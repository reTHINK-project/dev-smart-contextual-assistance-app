{
  "BraceletSensorObserver": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "BraceletSensorObserver",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10001,
    "version": "0.1",
    "description": "Description of BraceletSensorObserver",
    "language": "javascript",
    "hypertyType": [
      "heart_rate",
      "sleep"
    ],
    "constraints": [],
    "objectName": "BraceletSensorObserver",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "dataObjects": [
      "https://catalogue.hybroker.rethink.ptinovacao.pt/.well-known/dataschema/Context"
    ]
  },
  "Connector": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "Connector",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10002,
    "version": "0.1",
    "description": "Description of Connector",
    "language": "Javascript",
    "hypertyType": [
      "audio",
      "video"
    ],
    "constraints": [],
    "objectName": "Connector",
    "configuration": {
      "webrtc": {
        "iceServers": [
          {
            "url": "stun:stun.l.google.com:19302"
          },
          {
            "url": "turn:194.65.138.95:3478",
            "credential": "luis123",
            "username": "luis"
          }
        ]
      }
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "dataObjects": [
      "https://catalogue.hybroker.rethink.ptinovacao.pt/.well-known/dataschema/Connection"
    ]
  },
  "GroupChatManager": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "GroupChatManager",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10003,
    "version": "0.1",
    "description": "Description of GroupChatManager",
    "language": "javascript",
    "hypertyType": [
      "chat"
    ],
    "constraints": [],
    "objectName": "GroupChatManager",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "dataObjects": [
      "https://catalogue.hybroker.rethink.ptinovacao.pt/.well-known/dataschema/Communication"
    ]
  },
  "RoomServer": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "RoomServer",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10004,
    "version": "0.1",
    "description": "Description of RoomServer",
    "language": "Javascript",
    "hypertyType": [],
    "constraints": [],
    "objectName": "RoomServer",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "dataObjects": [
      "https://catalogue.hybroker.rethink.ptinovacao.pt/.well-known/dataschema/Communication"
    ]
  },
  "BraceletSensorReporter": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKT2JqZWN0Lm9ic2VydmUgJiYgIUFycmF5Lm9ic2VydmUgJiYgKGZ1bmN0aW9uKE8sIEEpIHsNCiJ1c2Ugc3RyaWN0IjsNCg0KdmFyIG5vdGlmaWVyID0gTy5nZXROb3RpZmllciwNCiAgICBwZXJmb3JtID0gInBlcmZvcm1DaGFuZ2UiLA0KICAgIG9yaWdpbmFsID0gIl9vcmlnaW5hbCIsDQogICAgdHlwZSA9ICJzcGxpY2UiOw0KDQp2YXIgd3JhcHBlcnMgPSB7DQogICAgcHVzaDogZnVuY3Rpb24gcHVzaChpdGVtKSB7DQogICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLA0KICAgICAgICAgICAgcmV0ID0gcHVzaFtvcmlnaW5hbF0uYXBwbHkodGhpcywgYXJncyk7DQoNCiAgICAgICAgbm90aWZpZXIodGhpcylbcGVyZm9ybV0odHlwZSwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgIGluZGV4OiByZXQgLSBhcmdzLmxlbmd0aCwNCiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhcmdzLmxlbmd0aCwNCiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9LA0KICAgIHVuc2hpZnQ6IGZ1bmN0aW9uIHVuc2hpZnQoaXRlbSkgew0KICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cywNCiAgICAgICAgICAgIHJldCA9IHVuc2hpZnRbb3JpZ2luYWxdLmFwcGx5KHRoaXMsIGFyZ3MpOw0KDQogICAgICAgIG5vdGlmaWVyKHRoaXMpW3BlcmZvcm1dKHR5cGUsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICBpbmRleDogMCwNCiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiBhcmdzLmxlbmd0aCwNCiAgICAgICAgICAgICAgICByZW1vdmVkOiBbXQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgcmV0dXJuIHJldDsNCiAgICB9LA0KICAgIHBvcDogZnVuY3Rpb24gcG9wKCkgew0KICAgICAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGgsDQogICAgICAgICAgICBpdGVtID0gcG9wW29yaWdpbmFsXS5jYWxsKHRoaXMpOw0KDQogICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gbGVuKQ0KICAgICAgICAgICAgbm90aWZpZXIodGhpcylbcGVyZm9ybV0odHlwZSwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMubGVuZ3RoLA0KICAgICAgICAgICAgICAgICAgICBhZGRlZENvdW50OiAwLA0KICAgICAgICAgICAgICAgICAgICByZW1vdmVkOiBbIGl0ZW0gXQ0KICAgICAgICAgICAgICAgIH07DQogICAgICAgICAgICB9LCB0aGlzKTsNCg0KICAgICAgICByZXR1cm4gaXRlbTsNCiAgICB9LA0KICAgIHNoaWZ0OiBmdW5jdGlvbiBzaGlmdCgpIHsNCiAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoLA0KICAgICAgICAgICAgaXRlbSA9IHNoaWZ0W29yaWdpbmFsXS5jYWxsKHRoaXMpOw0KDQogICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gbGVuKQ0KICAgICAgICAgICAgbm90aWZpZXIodGhpcylbcGVyZm9ybV0odHlwZSwgZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IDAsDQogICAgICAgICAgICAgICAgICAgIGFkZGVkQ291bnQ6IDAsDQogICAgICAgICAgICAgICAgICAgIHJlbW92ZWQ6IFsgaXRlbSBdDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0sIHRoaXMpOw0KDQogICAgICAgIHJldHVybiBpdGVtOw0KICAgIH0sDQogICAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2Uoc3RhcnQsIGRlbGV0ZUNvdW50KSB7DQogICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLA0KICAgICAgICAgICAgcmVtb3ZlZCA9IHNwbGljZVtvcmlnaW5hbF0uYXBwbHkodGhpcywgYXJncyk7DQoNCiAgICAgICAgaWYgKHJlbW92ZWQubGVuZ3RoIHx8IGFyZ3MubGVuZ3RoID4gMikNCiAgICAgICAgICAgIG5vdGlmaWVyKHRoaXMpW3BlcmZvcm1dKHR5cGUsIGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgICAgIGluZGV4OiBzdGFydCwNCiAgICAgICAgICAgICAgICAgICAgYWRkZWRDb3VudDogYXJncy5sZW5ndGggLSAyLA0KICAgICAgICAgICAgICAgICAgICByZW1vdmVkOiByZW1vdmVkDQogICAgICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIH0sIHRoaXMpOw0KDQogICAgICAgIHJldHVybiByZW1vdmVkOw0KICAgIH0NCn07DQoNCmZvciAodmFyIHdyYXBwZXIgaW4gd3JhcHBlcnMpIHsNCiAgICB3cmFwcGVyc1t3cmFwcGVyXVtvcmlnaW5hbF0gPSBBLnByb3RvdHlwZVt3cmFwcGVyXTsNCiAgICBBLnByb3RvdHlwZVt3cmFwcGVyXSA9IHdyYXBwZXJzW3dyYXBwZXJdOw0KfQ0KDQpBLm9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsIGhhbmRsZXIpIHsNCiAgICByZXR1cm4gTy5vYnNlcnZlKG9iamVjdCwgaGFuZGxlciwgWyAiYWRkIiwgInVwZGF0ZSIsICJkZWxldGUiLCB0eXBlIF0pOw0KfTsNCkEudW5vYnNlcnZlID0gTy51bm9ic2VydmU7DQoNCn0pKE9iamVjdCwgQXJyYXkpOw0KCn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Vbml0X1Rlc3RpbmcvMS4wCi8vCi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCEKLy8KLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKQovLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+Ci8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvCi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlCi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vcgovLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwovLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgovLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQovLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTgovLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OCi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLy8gd2hlbiB1c2VkIGluIG5vZGUsIHRoaXMgd2lsbCBhY3R1YWxseSBsb2FkIHRoZSB1dGlsIG1vZHVsZSB3ZSBkZXBlbmQgb24KLy8gdmVyc3VzIGxvYWRpbmcgdGhlIGJ1aWx0aW4gdXRpbCBtb2R1bGUgYXMgaGFwcGVucyBvdGhlcndpc2UKLy8gdGhpcyBpcyBhIGJ1ZyBpbiBub2RlIG1vZHVsZSBsb2FkaW5nIGFzIGZhciBhcyBJIGFtIGNvbmNlcm5lZAp2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwvJyk7Cgp2YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwp2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsKCi8vIDEuIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93Ci8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZQovLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS4KCnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rOwoKLy8gMi4gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gYXNzZXJ0LgovLyBuZXcgYXNzZXJ0LkFzc2VydGlvbkVycm9yKHsgbWVzc2FnZTogbWVzc2FnZSwKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbDogYWN0dWFsLAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pCgphc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7CiAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJzsKICB0aGlzLmFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsOwogIHRoaXMuZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkOwogIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yOwogIGlmIChvcHRpb25zLm1lc3NhZ2UpIHsKICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTsKICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlOwogIH0gZWxzZSB7CiAgICB0aGlzLm1lc3NhZ2UgPSBnZXRNZXNzYWdlKHRoaXMpOwogICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTsKICB9CiAgdmFyIHN0YWNrU3RhcnRGdW5jdGlvbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZ1bmN0aW9uIHx8IGZhaWw7CgogIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkgewogICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3RhY2tTdGFydEZ1bmN0aW9uKTsKICB9CiAgZWxzZSB7CiAgICAvLyBub24gdjggYnJvd3NlcnMgc28gd2UgY2FuIGhhdmUgYSBzdGFja3RyYWNlCiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7CiAgICBpZiAoZXJyLnN0YWNrKSB7CiAgICAgIHZhciBvdXQgPSBlcnIuc3RhY2s7CgogICAgICAvLyB0cnkgdG8gc3RyaXAgdXNlbGVzcyBmcmFtZXMKICAgICAgdmFyIGZuX25hbWUgPSBzdGFja1N0YXJ0RnVuY3Rpb24ubmFtZTsKICAgICAgdmFyIGlkeCA9IG91dC5pbmRleE9mKCdcbicgKyBmbl9uYW1lKTsKICAgICAgaWYgKGlkeCA+PSAwKSB7CiAgICAgICAgLy8gb25jZSB3ZSBoYXZlIGxvY2F0ZWQgdGhlIGZ1bmN0aW9uIGZyYW1lCiAgICAgICAgLy8gd2UgbmVlZCB0byBzdHJpcCBvdXQgZXZlcnl0aGluZyBiZWZvcmUgaXQgKGFuZCBpdHMgbGluZSkKICAgICAgICB2YXIgbmV4dF9saW5lID0gb3V0LmluZGV4T2YoJ1xuJywgaWR4ICsgMSk7CiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZyhuZXh0X2xpbmUgKyAxKTsKICAgICAgfQoKICAgICAgdGhpcy5zdGFjayA9IG91dDsKICAgIH0KICB9Cn07CgovLyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IgaW5zdGFuY2VvZiBFcnJvcgp1dGlsLmluaGVyaXRzKGFzc2VydC5Bc3NlcnRpb25FcnJvciwgRXJyb3IpOwoKZnVuY3Rpb24gcmVwbGFjZXIoa2V5LCB2YWx1ZSkgewogIGlmICh1dGlsLmlzVW5kZWZpbmVkKHZhbHVlKSkgewogICAgcmV0dXJuICcnICsgdmFsdWU7CiAgfQogIGlmICh1dGlsLmlzTnVtYmVyKHZhbHVlKSAmJiAhaXNGaW5pdGUodmFsdWUpKSB7CiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTsKICB9CiAgaWYgKHV0aWwuaXNGdW5jdGlvbih2YWx1ZSkgfHwgdXRpbC5pc1JlZ0V4cCh2YWx1ZSkpIHsKICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpOwogIH0KICByZXR1cm4gdmFsdWU7Cn0KCmZ1bmN0aW9uIHRydW5jYXRlKHMsIG4pIHsKICBpZiAodXRpbC5pc1N0cmluZyhzKSkgewogICAgcmV0dXJuIHMubGVuZ3RoIDwgbiA/IHMgOiBzLnNsaWNlKDAsIG4pOwogIH0gZWxzZSB7CiAgICByZXR1cm4gczsKICB9Cn0KCmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikgewogIHJldHVybiB0cnVuY2F0ZShKU09OLnN0cmluZ2lmeShzZWxmLmFjdHVhbCwgcmVwbGFjZXIpLCAxMjgpICsgJyAnICsKICAgICAgICAgc2VsZi5vcGVyYXRvciArICcgJyArCiAgICAgICAgIHRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHNlbGYuZXhwZWN0ZWQsIHJlcGxhY2VyKSwgMTI4KTsKfQoKLy8gQXQgcHJlc2VudCBvbmx5IHRoZSB0aHJlZSBrZXlzIG1lbnRpb25lZCBhYm92ZSBhcmUgdXNlZCBhbmQKLy8gdW5kZXJzdG9vZCBieSB0aGUgc3BlYy4gSW1wbGVtZW50YXRpb25zIG9yIHN1YiBtb2R1bGVzIGNhbiBwYXNzCi8vIG90aGVyIGtleXMgdG8gdGhlIEFzc2VydGlvbkVycm9yJ3MgY29uc3RydWN0b3IgLSB0aGV5IHdpbGwgYmUKLy8gaWdub3JlZC4KCi8vIDMuIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yCi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0Ci8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiAgQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGUKLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3IKLy8gZGlzcGxheSBwdXJwb3Nlcy4KCmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGdW5jdGlvbikgewogIHRocm93IG5ldyBhc3NlcnQuQXNzZXJ0aW9uRXJyb3IoewogICAgbWVzc2FnZTogbWVzc2FnZSwKICAgIGFjdHVhbDogYWN0dWFsLAogICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLAogICAgb3BlcmF0b3I6IG9wZXJhdG9yLAogICAgc3RhY2tTdGFydEZ1bmN0aW9uOiBzdGFja1N0YXJ0RnVuY3Rpb24KICB9KTsKfQoKLy8gRVhURU5TSU9OISBhbGxvd3MgZm9yIHdlbGwgYmVoYXZlZCBlcnJvcnMgZGVmaW5lZCBlbHNld2hlcmUuCmFzc2VydC5mYWlsID0gZmFpbDsKCi8vIDQuIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWQKLy8gYnkgISFndWFyZC4KLy8gYXNzZXJ0Lm9rKGd1YXJkLCBtZXNzYWdlX29wdCk7Ci8vIFRoaXMgc3RhdGVtZW50IGlzIGVxdWl2YWxlbnQgdG8gYXNzZXJ0LmVxdWFsKHRydWUsICEhZ3VhcmQsCi8vIG1lc3NhZ2Vfb3B0KTsuIFRvIHRlc3Qgc3RyaWN0bHkgZm9yIHRoZSB2YWx1ZSB0cnVlLCB1c2UKLy8gYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIGd1YXJkLCBtZXNzYWdlX29wdCk7LgoKZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHsKICBpZiAoIXZhbHVlKSBmYWlsKHZhbHVlLCB0cnVlLCBtZXNzYWdlLCAnPT0nLCBhc3NlcnQub2spOwp9CmFzc2VydC5vayA9IG9rOwoKLy8gNS4gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoCi8vID09LgovLyBhc3NlcnQuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpOwoKYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09JywgYXNzZXJ0LmVxdWFsKTsKfTsKCi8vIDYuIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3QgZXF1YWwKLy8gd2l0aCAhPSBhc3NlcnQubm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpOwoKYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9JywgYXNzZXJ0Lm5vdEVxdWFsKTsKICB9Cn07CgovLyA3LiBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi4KLy8gYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7Cgphc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHsKICBpZiAoIV9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBFcXVhbCcsIGFzc2VydC5kZWVwRXF1YWwpOwogIH0KfTsKCmZ1bmN0aW9uIF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkgewogIC8vIDcuMS4gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LgogIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7CiAgICByZXR1cm4gdHJ1ZTsKCiAgfSBlbHNlIGlmICh1dGlsLmlzQnVmZmVyKGFjdHVhbCkgJiYgdXRpbC5pc0J1ZmZlcihleHBlY3RlZCkpIHsKICAgIGlmIChhY3R1YWwubGVuZ3RoICE9IGV4cGVjdGVkLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0dWFsLmxlbmd0aDsgaSsrKSB7CiAgICAgIGlmIChhY3R1YWxbaV0gIT09IGV4cGVjdGVkW2ldKSByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgcmV0dXJuIHRydWU7CgogIC8vIDcuMi4gSWYgdGhlIGV4cGVjdGVkIHZhbHVlIGlzIGEgRGF0ZSBvYmplY3QsIHRoZSBhY3R1YWwgdmFsdWUgaXMKICAvLyBlcXVpdmFsZW50IGlmIGl0IGlzIGFsc28gYSBEYXRlIG9iamVjdCB0aGF0IHJlZmVycyB0byB0aGUgc2FtZSB0aW1lLgogIH0gZWxzZSBpZiAodXRpbC5pc0RhdGUoYWN0dWFsKSAmJiB1dGlsLmlzRGF0ZShleHBlY3RlZCkpIHsKICAgIHJldHVybiBhY3R1YWwuZ2V0VGltZSgpID09PSBleHBlY3RlZC5nZXRUaW1lKCk7CgogIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzCiAgLy8gZXF1aXZhbGVudCBpZiBpdCBpcyBhbHNvIGEgUmVnRXhwIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNvdXJjZSBhbmQKICAvLyBwcm9wZXJ0aWVzIChgZ2xvYmFsYCwgYG11bHRpbGluZWAsIGBsYXN0SW5kZXhgLCBgaWdub3JlQ2FzZWApLgogIH0gZWxzZSBpZiAodXRpbC5pc1JlZ0V4cChhY3R1YWwpICYmIHV0aWwuaXNSZWdFeHAoZXhwZWN0ZWQpKSB7CiAgICByZXR1cm4gYWN0dWFsLnNvdXJjZSA9PT0gZXhwZWN0ZWQuc291cmNlICYmCiAgICAgICAgICAgYWN0dWFsLmdsb2JhbCA9PT0gZXhwZWN0ZWQuZ2xvYmFsICYmCiAgICAgICAgICAgYWN0dWFsLm11bHRpbGluZSA9PT0gZXhwZWN0ZWQubXVsdGlsaW5lICYmCiAgICAgICAgICAgYWN0dWFsLmxhc3RJbmRleCA9PT0gZXhwZWN0ZWQubGFzdEluZGV4ICYmCiAgICAgICAgICAgYWN0dWFsLmlnbm9yZUNhc2UgPT09IGV4cGVjdGVkLmlnbm9yZUNhc2U7CgogIC8vIDcuNC4gT3RoZXIgcGFpcnMgdGhhdCBkbyBub3QgYm90aCBwYXNzIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JywKICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5ID09LgogIH0gZWxzZSBpZiAoIXV0aWwuaXNPYmplY3QoYWN0dWFsKSAmJiAhdXRpbC5pc09iamVjdChleHBlY3RlZCkpIHsKICAgIHJldHVybiBhY3R1YWwgPT0gZXhwZWN0ZWQ7CgogIC8vIDcuNSBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzCiAgLy8gZGV0ZXJtaW5lZCBieSBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGFzIHZlcmlmaWVkCiAgLy8gd2l0aCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwpLCB0aGUgc2FtZSBzZXQgb2Yga2V5cwogIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkKICAvLyBjb3JyZXNwb25kaW5nIGtleSwgYW5kIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4gTm90ZTogdGhpcwogIC8vIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLgogIH0gZWxzZSB7CiAgICByZXR1cm4gb2JqRXF1aXYoYWN0dWFsLCBleHBlY3RlZCk7CiAgfQp9CgpmdW5jdGlvbiBpc0FyZ3VtZW50cyhvYmplY3QpIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7Cn0KCmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIpIHsKICBpZiAodXRpbC5pc051bGxPclVuZGVmaW5lZChhKSB8fCB1dGlsLmlzTnVsbE9yVW5kZWZpbmVkKGIpKQogICAgcmV0dXJuIGZhbHNlOwogIC8vIGFuIGlkZW50aWNhbCAncHJvdG90eXBlJyBwcm9wZXJ0eS4KICBpZiAoYS5wcm90b3R5cGUgIT09IGIucHJvdG90eXBlKSByZXR1cm4gZmFsc2U7CiAgLy8gaWYgb25lIGlzIGEgcHJpbWl0aXZlLCB0aGUgb3RoZXIgbXVzdCBiZSBzYW1lCiAgaWYgKHV0aWwuaXNQcmltaXRpdmUoYSkgfHwgdXRpbC5pc1ByaW1pdGl2ZShiKSkgewogICAgcmV0dXJuIGEgPT09IGI7CiAgfQogIHZhciBhSXNBcmdzID0gaXNBcmd1bWVudHMoYSksCiAgICAgIGJJc0FyZ3MgPSBpc0FyZ3VtZW50cyhiKTsKICBpZiAoKGFJc0FyZ3MgJiYgIWJJc0FyZ3MpIHx8ICghYUlzQXJncyAmJiBiSXNBcmdzKSkKICAgIHJldHVybiBmYWxzZTsKICBpZiAoYUlzQXJncykgewogICAgYSA9IHBTbGljZS5jYWxsKGEpOwogICAgYiA9IHBTbGljZS5jYWxsKGIpOwogICAgcmV0dXJuIF9kZWVwRXF1YWwoYSwgYik7CiAgfQogIHZhciBrYSA9IG9iamVjdEtleXMoYSksCiAgICAgIGtiID0gb2JqZWN0S2V5cyhiKSwKICAgICAga2V5LCBpOwogIC8vIGhhdmluZyB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcyAoa2V5cyBpbmNvcnBvcmF0ZXMKICAvLyBoYXNPd25Qcm9wZXJ0eSkKICBpZiAoa2EubGVuZ3RoICE9IGtiLmxlbmd0aCkKICAgIHJldHVybiBmYWxzZTsKICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLAogIGthLnNvcnQoKTsKICBrYi5zb3J0KCk7CiAgLy9+fn5jaGVhcCBrZXkgdGVzdAogIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBpZiAoa2FbaV0gIT0ga2JbaV0pCiAgICAgIHJldHVybiBmYWxzZTsKICB9CiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZAogIC8vfn5+cG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdAogIGZvciAoaSA9IGthLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICBrZXkgPSBrYVtpXTsKICAgIGlmICghX2RlZXBFcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7Cn0KCi8vIDguIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LgovLyBhc3NlcnQubm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdub3REZWVwRXF1YWwnLCBhc3NlcnQubm90RGVlcEVxdWFsKTsKICB9Cn07CgovLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LgovLyBhc3NlcnQuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpOwoKYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PT0nLCBhc3NlcnQuc3RyaWN0RXF1YWwpOwogIH0KfTsKCi8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhcwovLyBkZXRlcm1pbmVkIGJ5ICE9PS4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7Cgphc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYgKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9PScsIGFzc2VydC5ub3RTdHJpY3RFcXVhbCk7CiAgfQp9OwoKZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkgewogIGlmICghYWN0dWFsIHx8ICFleHBlY3RlZCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChleHBlY3RlZCkgPT0gJ1tvYmplY3QgUmVnRXhwXScpIHsKICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7CiAgfSBlbHNlIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkgewogICAgcmV0dXJuIHRydWU7CiAgfSBlbHNlIGlmIChleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgdmFyIGFjdHVhbDsKCiAgaWYgKHV0aWwuaXNTdHJpbmcoZXhwZWN0ZWQpKSB7CiAgICBtZXNzYWdlID0gZXhwZWN0ZWQ7CiAgICBleHBlY3RlZCA9IG51bGw7CiAgfQoKICB0cnkgewogICAgYmxvY2soKTsKICB9IGNhdGNoIChlKSB7CiAgICBhY3R1YWwgPSBlOwogIH0KCiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArCiAgICAgICAgICAgIChtZXNzYWdlID8gJyAnICsgbWVzc2FnZSA6ICcuJyk7CgogIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7CiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsICdNaXNzaW5nIGV4cGVjdGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTsKICB9CgogIGlmICghc2hvdWxkVGhyb3cgJiYgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHsKICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgJ0dvdCB1bndhbnRlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7CiAgfQoKICBpZiAoKHNob3VsZFRocm93ICYmIGFjdHVhbCAmJiBleHBlY3RlZCAmJgogICAgICAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8ICghc2hvdWxkVGhyb3cgJiYgYWN0dWFsKSkgewogICAgdGhyb3cgYWN0dWFsOwogIH0KfQoKLy8gMTEuIEV4cGVjdGVkIHRvIHRocm93IGFuIGVycm9yOgovLyBhc3NlcnQudGhyb3dzKGJsb2NrLCBFcnJvcl9vcHQsIG1lc3NhZ2Vfb3B0KTsKCmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHsKICBfdGhyb3dzLmFwcGx5KHRoaXMsIFt0cnVlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwp9OwoKLy8gRVhURU5TSU9OISBUaGlzIGlzIGFubm95aW5nIHRvIHdyaXRlIG91dHNpZGUgdGhpcyBtb2R1bGUuCmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovbWVzc2FnZSkgewogIF90aHJvd3MuYXBwbHkodGhpcywgW2ZhbHNlXS5jb25jYXQocFNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOwp9OwoKYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbihlcnIpIHsgaWYgKGVycikge3Rocm93IGVycjt9fTsKCnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgaWYgKGhhc093bi5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7CiAgfQogIHJldHVybiBrZXlzOwp9OwoKfSx7InV0aWwvIjo1NX1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCcKCmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheQpleHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5Cgp2YXIgbG9va3VwID0gW10KdmFyIHJldkxvb2t1cCA9IFtdCnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXkKCmZ1bmN0aW9uIGluaXQgKCkgewogIHZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nCiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgIGxvb2t1cFtpXSA9IGNvZGVbaV0KICAgIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaQogIH0KCiAgcmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyCiAgcmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzCn0KCmluaXQoKQoKZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkgewogIHZhciBpLCBqLCBsLCB0bXAsIHBsYWNlSG9sZGVycywgYXJyCiAgdmFyIGxlbiA9IGI2NC5sZW5ndGgKCiAgaWYgKGxlbiAlIDQgPiAwKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKQogIH0KCiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycykKICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0CiAgLy8gcmVwcmVzZW50IG9uZSBieXRlCiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzCiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZQogIHBsYWNlSG9sZGVycyA9IGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDAKCiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhCiAgYXJyID0gbmV3IEFycihsZW4gKiAzIC8gNCAtIHBsYWNlSG9sZGVycykKCiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFycwogIGwgPSBwbGFjZUhvbGRlcnMgPiAwID8gbGVuIC0gNCA6IGxlbgoKICB2YXIgTCA9IDAKCiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykgewogICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8IHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldCiAgICBhcnJbTCsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRgogICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRgogICAgYXJyW0wrK10gPSB0bXAgJiAweEZGCiAgfQoKICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7CiAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KQogICAgYXJyW0wrK10gPSB0bXAgJiAweEZGCiAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHsKICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKQogICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRgogICAgYXJyW0wrK10gPSB0bXAgJiAweEZGCiAgfQoKICByZXR1cm4gYXJyCn0KCmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7CiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICsgbG9va3VwW251bSAmIDB4M0ZdCn0KCmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkgewogIHZhciB0bXAKICB2YXIgb3V0cHV0ID0gW10KICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykgewogICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKQogICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpCiAgfQogIHJldHVybiBvdXRwdXQuam9pbignJykKfQoKZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHsKICB2YXIgdG1wCiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aAogIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlcwogIHZhciBvdXRwdXQgPSAnJwogIHZhciBwYXJ0cyA9IFtdCiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzCgogIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXIKICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7CiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKQogIH0KCiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlcwogIGlmIChleHRyYUJ5dGVzID09PSAxKSB7CiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXQogICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl0KICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdCiAgICBvdXRwdXQgKz0gJz09JwogIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikgewogICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKQogICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdCiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXQogICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0KICAgIG91dHB1dCArPSAnPScKICB9CgogIHBhcnRzLnB1c2gob3V0cHV0KQoKICByZXR1cm4gcGFydHMuam9pbignJykKfQoKfSx7fV0sNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cgp9LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKLyohCiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLgogKgogKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz4KICogQGxpY2Vuc2UgIE1JVAogKi8KLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KCid1c2Ugc3RyaWN0JwoKdmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpCnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpCnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpCgpleHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcgpleHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyCmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MAoKLyoqCiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6CiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpCiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNikKICoKICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLAogKiBPcGVyYSAxMS42KywgaU9TIDQuMisuCiAqCiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW4KICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuCiAqCiAqIE5vdGU6CiAqCiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsCiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC4KICoKICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uCiAqCiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mCiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy4KCiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5CiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LgogKi8KQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkCiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVAogIDogdHlwZWRBcnJheVN1cHBvcnQoKQoKLyoKICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLgogKi8KZXhwb3J0cy5rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpCgpmdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7CiAgdHJ5IHsKICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKQogICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19CiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZAogICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgCiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWAKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gZmFsc2UKICB9Cn0KCmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkgewogIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVAogICAgPyAweDdmZmZmZmZmCiAgICA6IDB4M2ZmZmZmZmYKfQoKZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHsKICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKQogIH0KICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZQogICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCkKICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZQogIH0gZWxzZSB7CiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzCiAgICBpZiAodGhhdCA9PT0gbnVsbCkgewogICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpCiAgICB9CiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aAogIH0KCiAgcmV0dXJuIHRoYXQKfQoKLyoqCiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpcgogKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mCiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHMKICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXQKICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC4KICoKICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLgogKi8KCmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHsKICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQogIH0KCiAgLy8gQ29tbW9uIGNhc2UuCiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7CiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigKICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnCiAgICAgICkKICAgIH0KICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpCiAgfQogIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQp9CgpCdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb24KCi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLgpCdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7CiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKICByZXR1cm4gYXJyCn0KCmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignInZhbHVlIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpCiAgfQoKICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7CiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpCiAgfQoKICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpCiAgfQoKICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSkKfQoKLyoqCiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yCiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLgogKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pCiAqIEJ1ZmZlci5mcm9tKGFycmF5KQogKiBCdWZmZXIuZnJvbShidWZmZXIpCiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKQogKiovCkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQp9CgppZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlCiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkKICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiYKICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7CiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85NwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHsKICAgICAgdmFsdWU6IG51bGwsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfSkKICB9Cn0KCmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHsKICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpCiAgfSBlbHNlIGlmIChzaXplIDwgMCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpCiAgfQp9CgpmdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICBhc3NlcnRTaXplKHNpemUpCiAgaWYgKHNpemUgPD0gMCkgewogICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKQogIH0KICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7CiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpcwogICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZAogICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LgogICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycKICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZykKICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKQogIH0KICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpCn0KCi8qKgogKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSkKICoqLwpCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpCn0KCmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7CiAgYXNzZXJ0U2l6ZShzaXplKQogIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApCiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHsKICAgICAgdGhhdFtpXSA9IDAKICAgIH0KICB9CiAgcmV0dXJuIHRoYXQKfQoKLyoqCiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCiAqICovCkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7CiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpCn0KLyoqCiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgogKi8KQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7CiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpCn0KCmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHsKICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHsKICAgIGVuY29kaW5nID0gJ3V0ZjgnCiAgfQoKICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImVuY29kaW5nIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJykKICB9CgogIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMAogIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKQoKICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKQoKICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHsKICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbAogICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy4KICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKQogICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKQogIH0KCiAgcmV0dXJuIHRoYXQKfQoKZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHsKICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwCiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewogICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1CiAgfQogIHJldHVybiB0aGF0Cn0KCmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewogIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlcgoKICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ29mZnNldFwnIGlzIG91dCBvZiBib3VuZHMnKQogIH0KCiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wnbGVuZ3RoXCcgaXMgb3V0IG9mIGJvdW5kcycpCiAgfQoKICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KQogIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpCiAgfSBlbHNlIHsKICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkKICB9CgogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlCiAgICB0aGF0ID0gYXJyYXkKICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZQogIH0gZWxzZSB7CiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzCiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSkKICB9CiAgcmV0dXJuIHRoYXQKfQoKZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7CiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7CiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDAKICAgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuKQoKICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkgewogICAgICByZXR1cm4gdGhhdAogICAgfQoKICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbikKICAgIHJldHVybiB0aGF0CiAgfQoKICBpZiAob2JqKSB7CiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYKICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikgewogICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7CiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKQogICAgICB9CiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iaikKICAgIH0KCiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7CiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKQogICAgfQogIH0KCiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpCn0KCmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkgewogIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlbgogIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKQogIGlmIChsZW5ndGggPj0ga01heExlbmd0aCgpKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpCiAgfQogIHJldHVybiBsZW5ndGggfCAwCn0KCmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkgewogIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcQogICAgbGVuZ3RoID0gMAogIH0KICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpCn0KCkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7CiAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcikKfQoKQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7CiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpCiAgfQoKICBpZiAoYSA9PT0gYikgcmV0dXJuIDAKCiAgdmFyIHggPSBhLmxlbmd0aAogIHZhciB5ID0gYi5sZW5ndGgKCiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHsKICAgIGlmIChhW2ldICE9PSBiW2ldKSB7CiAgICAgIHggPSBhW2ldCiAgICAgIHkgPSBiW2ldCiAgICAgIGJyZWFrCiAgICB9CiAgfQoKICBpZiAoeCA8IHkpIHJldHVybiAtMQogIGlmICh5IDwgeCkgcmV0dXJuIDEKICByZXR1cm4gMAp9CgpCdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7CiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHsKICAgIGNhc2UgJ2hleCc6CiAgICBjYXNlICd1dGY4JzoKICAgIGNhc2UgJ3V0Zi04JzoKICAgIGNhc2UgJ2FzY2lpJzoKICAgIGNhc2UgJ2xhdGluMSc6CiAgICBjYXNlICdiaW5hcnknOgogICAgY2FzZSAnYmFzZTY0JzoKICAgIGNhc2UgJ3VjczInOgogICAgY2FzZSAndWNzLTInOgogICAgY2FzZSAndXRmMTZsZSc6CiAgICBjYXNlICd1dGYtMTZsZSc6CiAgICAgIHJldHVybiB0cnVlCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gZmFsc2UKICB9Cn0KCkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkgewogIGlmICghaXNBcnJheShsaXN0KSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImxpc3QiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpCiAgfQoKICBpZiAobGlzdC5sZW5ndGggPT09IDApIHsKICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCkKICB9CgogIHZhciBpCiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CiAgICBsZW5ndGggPSAwCiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkgewogICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGgKICAgIH0KICB9CgogIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKQogIHZhciBwb3MgPSAwCiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKICAgIHZhciBidWYgPSBsaXN0W2ldCiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQogICAgfQogICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpCiAgICBwb3MgKz0gYnVmLmxlbmd0aAogIH0KICByZXR1cm4gYnVmZmVyCn0KCmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHsKICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHsKICAgIHJldHVybiBzdHJpbmcubGVuZ3RoCiAgfQogIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiYKICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkgewogICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoCiAgfQogIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykgewogICAgc3RyaW5nID0gJycgKyBzdHJpbmcKICB9CgogIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoCiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDAKCiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uCiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2UKICBmb3IgKDs7KSB7CiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICByZXR1cm4gbGVuCiAgICAgIGNhc2UgJ3V0ZjgnOgogICAgICBjYXNlICd1dGYtOCc6CiAgICAgIGNhc2UgdW5kZWZpbmVkOgogICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aAogICAgICBjYXNlICd1Y3MyJzoKICAgICAgY2FzZSAndWNzLTInOgogICAgICBjYXNlICd1dGYxNmxlJzoKICAgICAgY2FzZSAndXRmLTE2bGUnOgogICAgICAgIHJldHVybiBsZW4gKiAyCiAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMQogICAgICBjYXNlICdiYXNlNjQnOgogICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjgKICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlCiAgICB9CiAgfQp9CkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aAoKZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkgewogIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCgogIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzIiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHkKICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LgoKICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmQKICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuCiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbiwKICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi4KICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHsKICAgIHN0YXJ0ID0gMAogIH0KICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMgogIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuCiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHsKICAgIHJldHVybiAnJwogIH0KCiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7CiAgICBlbmQgPSB0aGlzLmxlbmd0aAogIH0KCiAgaWYgKGVuZCA8PSAwKSB7CiAgICByZXR1cm4gJycKICB9CgogIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuCiAgZW5kID4+Pj0gMAogIHN0YXJ0ID4+Pj0gMAoKICBpZiAoZW5kIDw9IHN0YXJ0KSB7CiAgICByZXR1cm4gJycKICB9CgogIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnCgogIHdoaWxlICh0cnVlKSB7CiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CiAgICAgIGNhc2UgJ2hleCc6CiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICd1dGY4JzoKICAgICAgY2FzZSAndXRmLTgnOgogICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCiAgICAgIGNhc2UgJ2FzY2lpJzoKICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKICAgICAgY2FzZSAnbGF0aW4xJzoKICAgICAgY2FzZSAnYmluYXJ5JzoKICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCiAgICAgIGNhc2UgJ2Jhc2U2NCc6CiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgogICAgICBjYXNlICd1Y3MyJzoKICAgICAgY2FzZSAndWNzLTInOgogICAgICBjYXNlICd1dGYxNmxlJzoKICAgICAgY2FzZSAndXRmLTE2bGUnOgogICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpCiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKQogICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZQogICAgfQogIH0KfQoKLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3QKLy8gQnVmZmVyIGluc3RhbmNlcy4KQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlCgpmdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7CiAgdmFyIGkgPSBiW25dCiAgYltuXSA9IGJbbV0KICBiW21dID0gaQp9CgpCdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7CiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCiAgaWYgKGxlbiAlIDIgIT09IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDEpCiAgfQogIHJldHVybiB0aGlzCn0KCkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHsKICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKICBpZiAobGVuICUgNCAhPT0gMCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJykKICB9CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkgewogICAgc3dhcCh0aGlzLCBpLCBpICsgMykKICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKQogIH0KICByZXR1cm4gdGhpcwp9CgpCdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7CiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCiAgaWYgKGxlbiAlIDggIT09IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpCiAgfQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHsKICAgIHN3YXAodGhpcywgaSwgaSArIDcpCiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNikKICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KQogICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpCiAgfQogIHJldHVybiB0aGlzCn0KCkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7CiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMAogIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJwogIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aCkKICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKfQoKQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlCiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwCn0KCkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkgewogIHZhciBzdHIgPSAnJwogIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTCiAgaWYgKHRoaXMubGVuZ3RoID4gMCkgewogICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJykKICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICcKICB9CiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPicKfQoKQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJykKICB9CgogIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7CiAgICBzdGFydCA9IDAKICB9CiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7CiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMAogIH0KICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHsKICAgIHRoaXNTdGFydCA9IDAKICB9CiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkgewogICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoCiAgfQoKICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKQogIH0KCiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkgewogICAgcmV0dXJuIDAKICB9CiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7CiAgICByZXR1cm4gLTEKICB9CiAgaWYgKHN0YXJ0ID49IGVuZCkgewogICAgcmV0dXJuIDEKICB9CgogIHN0YXJ0ID4+Pj0gMAogIGVuZCA+Pj49IDAKICB0aGlzU3RhcnQgPj4+PSAwCiAgdGhpc0VuZCA+Pj49IDAKCiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDAKCiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0CiAgdmFyIHkgPSBlbmQgLSBzdGFydAogIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KQoKICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZCkKICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKQoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHsKICAgICAgeCA9IHRoaXNDb3B5W2ldCiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldCiAgICAgIGJyZWFrCiAgICB9CiAgfQoKICBpZiAoeCA8IHkpIHJldHVybiAtMQogIGlmICh5IDwgeCkgcmV0dXJuIDEKICByZXR1cm4gMAp9CgovLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsCi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuCi8vCi8vIEFyZ3VtZW50czoKLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2gKLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXIKLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyCi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nCi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mCmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikgewogIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaAogIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTEKCiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQKICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7CiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXQKICAgIGJ5dGVPZmZzZXQgPSAwCiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikgewogICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmYKICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkgewogICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwCiAgfQogIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci4KICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHsKICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sICJmb28iLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXIKICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKQogIH0KCiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXIKICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldAogIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHsKICAgIGlmIChkaXIpIHJldHVybiAtMQogICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDEKICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7CiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMAogICAgZWxzZSByZXR1cm4gLTEKICB9CgogIC8vIE5vcm1hbGl6ZSB2YWwKICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHsKICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpCiAgfQoKICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZgogIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkgewogICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlscwogICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHsKICAgICAgcmV0dXJuIC0xCiAgICB9CiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKQogIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XQogICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmCiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHsKICAgICAgaWYgKGRpcikgewogICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpCiAgICAgIH0KICAgIH0KICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKQogIH0KCiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJykKfQoKZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikgewogIHZhciBpbmRleFNpemUgPSAxCiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGgKICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aAoKICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgewogICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkKICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8CiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykgewogICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHsKICAgICAgICByZXR1cm4gLTEKICAgICAgfQogICAgICBpbmRleFNpemUgPSAyCiAgICAgIGFyckxlbmd0aCAvPSAyCiAgICAgIHZhbExlbmd0aCAvPSAyCiAgICAgIGJ5dGVPZmZzZXQgLz0gMgogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7CiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7CiAgICAgIHJldHVybiBidWZbaV0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpCiAgICB9CiAgfQoKICB2YXIgaQogIGlmIChkaXIpIHsKICAgIHZhciBmb3VuZEluZGV4ID0gLTEKICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykgewogICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7CiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaQogICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemUKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXgKICAgICAgICBmb3VuZEluZGV4ID0gLTEKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aAogICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHsKICAgICAgdmFyIGZvdW5kID0gdHJ1ZQogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7CiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkgewogICAgICAgICAgZm91bmQgPSBmYWxzZQogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaQogICAgfQogIH0KCiAgcmV0dXJuIC0xCn0KCkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewogIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xCn0KCkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSkKfQoKQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKQp9CgpmdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMAogIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0CiAgaWYgKCFsZW5ndGgpIHsKICAgIGxlbmd0aCA9IHJlbWFpbmluZwogIH0gZWxzZSB7CiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKQogICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykgewogICAgICBsZW5ndGggPSByZW1haW5pbmcKICAgIH0KICB9CgogIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzCiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGgKICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJykKCiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHsKICAgIGxlbmd0aCA9IHN0ckxlbiAvIDIKICB9CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNikKICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaQogICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkCiAgfQogIHJldHVybiBpCn0KCmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKfQoKZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCn0KCmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCn0KCmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7CiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykgewogIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpCiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7CiAgICBlbmNvZGluZyA9ICd1dGY4JwogICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgKICAgIG9mZnNldCA9IDAKICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZykKICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7CiAgICBlbmNvZGluZyA9IG9mZnNldAogICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgKICAgIG9mZnNldCA9IDAKICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKQogIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkgewogICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHsKICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMAogICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCcKICAgIH0gZWxzZSB7CiAgICAgIGVuY29kaW5nID0gbGVuZ3RoCiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZAogICAgfQogIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTMKICB9IGVsc2UgewogICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnCiAgICApCiAgfQoKICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQKICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmcKCiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpCiAgfQoKICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4JwoKICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZQogIGZvciAoOzspIHsKICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKICAgICAgY2FzZSAnaGV4JzoKICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCiAgICAgIGNhc2UgJ3V0ZjgnOgogICAgICBjYXNlICd1dGYtOCc6CiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgY2FzZSAnYXNjaWknOgogICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgogICAgICBjYXNlICdsYXRpbjEnOgogICAgICBjYXNlICdiaW5hcnknOgogICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgY2FzZSAnYmFzZTY0JzoKICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZQogICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKICAgICAgY2FzZSAndWNzMic6CiAgICAgIGNhc2UgJ3Vjcy0yJzoKICAgICAgY2FzZSAndXRmMTZsZSc6CiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgogICAgICBkZWZhdWx0OgogICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQogICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkKICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKICAgIH0KICB9Cn0KCkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHsKICByZXR1cm4gewogICAgdHlwZTogJ0J1ZmZlcicsCiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMCkKICB9Cn0KCmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7CiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKQogIH0gZWxzZSB7CiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKQogIH0KfQoKZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpCiAgdmFyIHJlcyA9IFtdCgogIHZhciBpID0gc3RhcnQKICB3aGlsZSAoaSA8IGVuZCkgewogICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXQogICAgdmFyIGNvZGVQb2ludCA9IG51bGwKICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNAogICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDMKICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyCiAgICAgIDogMQoKICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHsKICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludAoKICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHsKICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlCiAgICAgICAgICB9CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkgewogICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRikKICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBicmVhawogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdCiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpCiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHsKICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrCiAgICAgICAgY2FzZSA0OgogICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV0KICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl0KICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdCiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkgewogICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRikKICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7CiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7CiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGEKICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZQogICAgICBjb2RlUG9pbnQgPSAweEZGRkQKICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDEKICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7CiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpCiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwCiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCkKICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkYKICAgIH0KCiAgICByZXMucHVzaChjb2RlUG9pbnQpCiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2UKICB9CgogIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKQp9CgovLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGgKLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLgovLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5CnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMAoKZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7CiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoCiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkgewogICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpCiAgfQoKICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkICJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWQiLgogIHZhciByZXMgPSAnJwogIHZhciBpID0gMAogIHdoaWxlIChpIDwgbGVuKSB7CiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgKICAgICAgU3RyaW5nLAogICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpCiAgICApCiAgfQogIHJldHVybiByZXMKfQoKZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgdmFyIHJldCA9ICcnCiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKQoKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RikKICB9CiAgcmV0dXJuIHJldAp9CgpmdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CiAgdmFyIHJldCA9ICcnCiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKQoKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKQogIH0KICByZXR1cm4gcmV0Cn0KCmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKICB2YXIgbGVuID0gYnVmLmxlbmd0aAoKICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwCiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlbgoKICB2YXIgb3V0ID0gJycKICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewogICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSkKICB9CiAgcmV0dXJuIG91dAp9CgpmdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewogIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKQogIHZhciByZXMgPSAnJwogIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHsKICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KQogIH0KICByZXR1cm4gcmVzCn0KCkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkgewogIHZhciBsZW4gPSB0aGlzLmxlbmd0aAogIHN0YXJ0ID0gfn5zdGFydAogIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmQKCiAgaWYgKHN0YXJ0IDwgMCkgewogICAgc3RhcnQgKz0gbGVuCiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDAKICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7CiAgICBzdGFydCA9IGxlbgogIH0KCiAgaWYgKGVuZCA8IDApIHsKICAgIGVuZCArPSBsZW4KICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwCiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHsKICAgIGVuZCA9IGxlbgogIH0KCiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydAoKICB2YXIgbmV3QnVmCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpCiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZQogIH0gZWxzZSB7CiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydAogICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7CiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XQogICAgfQogIH0KCiAgcmV0dXJuIG5ld0J1Zgp9CgovKgogKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy4KICovCmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7CiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JykKICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKCiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XQogIHZhciBtdWwgPSAxCiAgdmFyIGkgPSAwCiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsCiAgfQoKICByZXR1cm4gdmFsCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCiAgaWYgKCFub0Fzc2VydCkgewogICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKICB9CgogIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0KICB2YXIgbXVsID0gMQogIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bAogIH0KCiAgcmV0dXJuIHZhbAp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuIHRoaXNbb2Zmc2V0XQp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV0KfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQoKICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHwKICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfAogICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICsKICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICsKICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAogICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfAogICAgdGhpc1tvZmZzZXQgKyAzXSkKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKCiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XQogIHZhciBtdWwgPSAxCiAgdmFyIGkgPSAwCiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsCiAgfQogIG11bCAqPSAweDgwCgogIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpCgogIHJldHVybiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKCiAgdmFyIGkgPSBieXRlTGVuZ3RoCiAgdmFyIG11bCA9IDEKICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldCiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsCiAgfQogIG11bCAqPSAweDgwCgogIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpCgogIHJldHVybiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCkKICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pCiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpCiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbAp9CgpCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQogIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KQogIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWwKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHwKICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHwKICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8CiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNCkKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHwKICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8CiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8CiAgICAodGhpc1tvZmZzZXQgKyAzXSkKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpCn0KCkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNCkKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKQogIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOCkKfQoKQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKQogIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpCn0KCmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCciYnVmZmVyIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJykKICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCcidmFsdWUiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKQogIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewogIHZhbHVlID0gK3ZhbHVlCiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAogIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAogIGlmICghbm9Bc3NlcnQpIHsKICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDEKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG1heEJ5dGVzLCAwKQogIH0KCiAgdmFyIG11bCA9IDEKICB2YXIgaSA9IDAKICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkYKICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewogICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCiAgaWYgKCFub0Fzc2VydCkgewogICAgdmFyIG1heEJ5dGVzID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpIC0gMQogICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApCiAgfQoKICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxCiAgdmFyIG11bCA9IDEKICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGCiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkYKICB9CgogIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMCkKICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpCiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICByZXR1cm4gb2Zmc2V0ICsgMQp9CgpmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHsKICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZiArIHZhbHVlICsgMQogIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHsKICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+CiAgICAgIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpICogOAogIH0KfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDIKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpCiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZikKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCiAgfQogIHJldHVybiBvZmZzZXQgKyAyCn0KCmZ1bmN0aW9uIG9iamVjdFdyaXRlVUludDMyIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbikgewogIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMQogIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHsKICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSA+Pj4gKGxpdHRsZUVuZGlhbiA/IGkgOiAzIC0gaSkgKiA4KSAmIDB4ZmYKICB9Cn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KQogICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpCiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDQKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCkKICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KQogICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCkKICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKQogIH0gZWxzZSB7CiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDQKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSB7CiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpCgogICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpCiAgfQoKICB2YXIgaSA9IDAKICB2YXIgbXVsID0gMQogIHZhciBzdWIgPSAwCiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGCiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7CiAgICAgIHN1YiA9IDEKICAgIH0KICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkYKICB9CgogIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgewogICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKQoKICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KQogIH0KCiAgdmFyIGkgPSBieXRlTGVuZ3RoIC0gMQogIHZhciBtdWwgPSAxCiAgdmFyIHN1YiA9IDAKICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGCiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7CiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkgewogICAgICBzdWIgPSAxCiAgICB9CiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGCiAgfQoKICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MCkKICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB2YWx1ZSA9IE1hdGguZmxvb3IodmFsdWUpCiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxCiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKICByZXR1cm4gb2Zmc2V0ICsgMQp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDIKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKQogIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKQogIH0KICByZXR1cm4gb2Zmc2V0ICsgMgp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICB2YWx1ZSA9ICt2YWx1ZQogIG9mZnNldCA9IG9mZnNldCB8IDAKICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMCkKICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpCiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCkKICB9IGVsc2UgewogICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKICB9CiAgcmV0dXJuIG9mZnNldCArIDQKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgdmFsdWUgPSArdmFsdWUKICBvZmZzZXQgPSBvZmZzZXQgfCAwCiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxCiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KQogICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpCiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KQogICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpCiAgfSBlbHNlIHsKICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKQogIH0KICByZXR1cm4gb2Zmc2V0ICsgNAp9CgpmdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikgewogIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCn0KCmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkgewogIGlmICghbm9Bc3NlcnQpIHsKICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KQogIH0KICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNCkKICByZXR1cm4gb2Zmc2V0ICsgNAp9CgpCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCkKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KQp9CgpmdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7CiAgaWYgKCFub0Fzc2VydCkgewogICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOCkKICB9CiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpCiAgcmV0dXJuIG9mZnNldCArIDgKfQoKQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpCn0KCkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydCkKfQoKLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKQpCdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7CiAgaWYgKCFzdGFydCkgc3RhcnQgPSAwCiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aAogIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGgKICBpZiAoIXRhcmdldFN0YXJ0KSB0YXJnZXRTdGFydCA9IDAKICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQKCiAgLy8gQ29weSAwIGJ5dGVzOyB3ZSdyZSBkb25lCiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwCiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwCgogIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnMKICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpCiAgfQogIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJykKICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJykKCiAgLy8gQXJlIHdlIG9vYj8KICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoCiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7CiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydAogIH0KCiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0CiAgdmFyIGkKCiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7CiAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmQKICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdCiAgICB9CiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewogICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydAogICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7CiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdCiAgICB9CiAgfSBlbHNlIHsKICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKAogICAgICB0YXJnZXQsCiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwKICAgICAgdGFyZ2V0U3RhcnQKICAgICkKICB9CgogIHJldHVybiBsZW4KfQoKLy8gVXNhZ2U6Ci8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKQovLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSkKLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pCkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHsKICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOgogIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewogICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHsKICAgICAgZW5jb2RpbmcgPSBzdGFydAogICAgICBzdGFydCA9IDAKICAgICAgZW5kID0gdGhpcy5sZW5ndGgKICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHsKICAgICAgZW5jb2RpbmcgPSBlbmQKICAgICAgZW5kID0gdGhpcy5sZW5ndGgKICAgIH0KICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7CiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMCkKICAgICAgaWYgKGNvZGUgPCAyNTYpIHsKICAgICAgICB2YWwgPSBjb2RlCiAgICAgIH0KICAgIH0KICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpCiAgICB9CiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7CiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKICAgIH0KICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CiAgICB2YWwgPSB2YWwgJiAyNTUKICB9CgogIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LgogIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpCiAgfQoKICBpZiAoZW5kIDw9IHN0YXJ0KSB7CiAgICByZXR1cm4gdGhpcwogIH0KCiAgc3RhcnQgPSBzdGFydCA+Pj4gMAogIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDAKCiAgaWYgKCF2YWwpIHZhbCA9IDAKCiAgdmFyIGkKICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKICAgICAgdGhpc1tpXSA9IHZhbAogICAgfQogIH0gZWxzZSB7CiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKQogICAgICA/IHZhbAogICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSkKICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGgKICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7CiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dCiAgICB9CiAgfQoKICByZXR1cm4gdGhpcwp9CgovLyBIRUxQRVIgRlVOQ1RJT05TCi8vID09PT09PT09PT09PT09PT0KCnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcLzAtOUEtWmEtei1fXS9nCgpmdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7CiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxuIGFuZCBcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdAogIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJykKICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnCiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJycKICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3QKICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHsKICAgIHN0ciA9IHN0ciArICc9JwogIH0KICByZXR1cm4gc3RyCn0KCmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikgewogIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCkKICByZXR1cm4gc3RyLnJlcGxhY2UoL15ccyt8XHMrJC9nLCAnJykKfQoKZnVuY3Rpb24gdG9IZXggKG4pIHsKICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNikKICByZXR1cm4gbi50b1N0cmluZygxNikKfQoKZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHsKICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5CiAgdmFyIGNvZGVQb2ludAogIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoCiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsCiAgdmFyIGJ5dGVzID0gW10KCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewogICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSkKCiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50CiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkgewogICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZAogICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHsKICAgICAgICAvLyBubyBsZWFkIHlldAogICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHsKICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWwKICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKQogICAgICAgICAgY29udGludWUKICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHsKICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWQKICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKQogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIC8vIHZhbGlkIGxlYWQKICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50CgogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KCiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3cKICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkgewogICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKQogICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQKICAgICAgICBjb250aW51ZQogICAgICB9CgogICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpcgogICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwCiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHsKICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZAogICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKICAgIH0KCiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbAoKICAgIC8vIGVuY29kZSB1dGY4CiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkgewogICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWsKICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpCiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7CiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhawogICAgICBieXRlcy5wdXNoKAogICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLAogICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCiAgICAgICkKICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWsKICAgICAgYnl0ZXMucHVzaCgKICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCwKICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsCiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKICAgICAgKQogICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkgewogICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWsKICAgICAgYnl0ZXMucHVzaCgKICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsCiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLAogICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCwKICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MAogICAgICApCiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpCiAgICB9CiAgfQoKICByZXR1cm4gYnl0ZXMKfQoKZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHsKICB2YXIgYnl0ZUFycmF5ID0gW10KICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewogICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uCiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpCiAgfQogIHJldHVybiBieXRlQXJyYXkKfQoKZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHsKICB2YXIgYywgaGksIGxvCiAgdmFyIGJ5dGVBcnJheSA9IFtdCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhawoKICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKQogICAgaGkgPSBjID4+IDgKICAgIGxvID0gYyAlIDI1NgogICAgYnl0ZUFycmF5LnB1c2gobG8pCiAgICBieXRlQXJyYXkucHVzaChoaSkKICB9CgogIHJldHVybiBieXRlQXJyYXkKfQoKZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7CiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKQp9CgpmdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrCiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV0KICB9CiAgcmV0dXJuIGkKfQoKZnVuY3Rpb24gaXNuYW4gKHZhbCkgewogIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZQp9Cgp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKfSx7ImJhc2U2NC1qcyI6MywiaWVlZTc1NCI6MTQsImlzYXJyYXkiOjE4fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzPXsKICAiT19SRE9OTFkiOiAwLAogICJPX1dST05MWSI6IDEsCiAgIk9fUkRXUiI6IDIsCiAgIlNfSUZNVCI6IDYxNDQwLAogICJTX0lGUkVHIjogMzI3NjgsCiAgIlNfSUZESVIiOiAxNjM4NCwKICAiU19JRkNIUiI6IDgxOTIsCiAgIlNfSUZCTEsiOiAyNDU3NiwKICAiU19JRklGTyI6IDQwOTYsCiAgIlNfSUZMTksiOiA0MDk2MCwKICAiU19JRlNPQ0siOiA0OTE1MiwKICAiT19DUkVBVCI6IDUxMiwKICAiT19FWENMIjogMjA0OCwKICAiT19OT0NUVFkiOiAxMzEwNzIsCiAgIk9fVFJVTkMiOiAxMDI0LAogICJPX0FQUEVORCI6IDgsCiAgIk9fRElSRUNUT1JZIjogMTA0ODU3NiwKICAiT19OT0ZPTExPVyI6IDI1NiwKICAiT19TWU5DIjogMTI4LAogICJPX1NZTUxJTksiOiAyMDk3MTUyLAogICJPX05PTkJMT0NLIjogNCwKICAiU19JUldYVSI6IDQ0OCwKICAiU19JUlVTUiI6IDI1NiwKICAiU19JV1VTUiI6IDEyOCwKICAiU19JWFVTUiI6IDY0LAogICJTX0lSV1hHIjogNTYsCiAgIlNfSVJHUlAiOiAzMiwKICAiU19JV0dSUCI6IDE2LAogICJTX0lYR1JQIjogOCwKICAiU19JUldYTyI6IDcsCiAgIlNfSVJPVEgiOiA0LAogICJTX0lXT1RIIjogMiwKICAiU19JWE9USCI6IDEsCiAgIkUyQklHIjogNywKICAiRUFDQ0VTIjogMTMsCiAgIkVBRERSSU5VU0UiOiA0OCwKICAiRUFERFJOT1RBVkFJTCI6IDQ5LAogICJFQUZOT1NVUFBPUlQiOiA0NywKICAiRUFHQUlOIjogMzUsCiAgIkVBTFJFQURZIjogMzcsCiAgIkVCQURGIjogOSwKICAiRUJBRE1TRyI6IDk0LAogICJFQlVTWSI6IDE2LAogICJFQ0FOQ0VMRUQiOiA4OSwKICAiRUNISUxEIjogMTAsCiAgIkVDT05OQUJPUlRFRCI6IDUzLAogICJFQ09OTlJFRlVTRUQiOiA2MSwKICAiRUNPTk5SRVNFVCI6IDU0LAogICJFREVBRExLIjogMTEsCiAgIkVERVNUQUREUlJFUSI6IDM5LAogICJFRE9NIjogMzMsCiAgIkVEUVVPVCI6IDY5LAogICJFRVhJU1QiOiAxNywKICAiRUZBVUxUIjogMTQsCiAgIkVGQklHIjogMjcsCiAgIkVIT1NUVU5SRUFDSCI6IDY1LAogICJFSURSTSI6IDkwLAogICJFSUxTRVEiOiA5MiwKICAiRUlOUFJPR1JFU1MiOiAzNiwKICAiRUlOVFIiOiA0LAogICJFSU5WQUwiOiAyMiwKICAiRUlPIjogNSwKICAiRUlTQ09OTiI6IDU2LAogICJFSVNESVIiOiAyMSwKICAiRUxPT1AiOiA2MiwKICAiRU1GSUxFIjogMjQsCiAgIkVNTElOSyI6IDMxLAogICJFTVNHU0laRSI6IDQwLAogICJFTVVMVElIT1AiOiA5NSwKICAiRU5BTUVUT09MT05HIjogNjMsCiAgIkVORVRET1dOIjogNTAsCiAgIkVORVRSRVNFVCI6IDUyLAogICJFTkVUVU5SRUFDSCI6IDUxLAogICJFTkZJTEUiOiAyMywKICAiRU5PQlVGUyI6IDU1LAogICJFTk9EQVRBIjogOTYsCiAgIkVOT0RFViI6IDE5LAogICJFTk9FTlQiOiAyLAogICJFTk9FWEVDIjogOCwKICAiRU5PTENLIjogNzcsCiAgIkVOT0xJTksiOiA5NywKICAiRU5PTUVNIjogMTIsCiAgIkVOT01TRyI6IDkxLAogICJFTk9QUk9UT09QVCI6IDQyLAogICJFTk9TUEMiOiAyOCwKICAiRU5PU1IiOiA5OCwKICAiRU5PU1RSIjogOTksCiAgIkVOT1NZUyI6IDc4LAogICJFTk9UQ09OTiI6IDU3LAogICJFTk9URElSIjogMjAsCiAgIkVOT1RFTVBUWSI6IDY2LAogICJFTk9UU09DSyI6IDM4LAogICJFTk9UU1VQIjogNDUsCiAgIkVOT1RUWSI6IDI1LAogICJFTlhJTyI6IDYsCiAgIkVPUE5PVFNVUFAiOiAxMDIsCiAgIkVPVkVSRkxPVyI6IDg0LAogICJFUEVSTSI6IDEsCiAgIkVQSVBFIjogMzIsCiAgIkVQUk9UTyI6IDEwMCwKICAiRVBST1RPTk9TVVBQT1JUIjogNDMsCiAgIkVQUk9UT1RZUEUiOiA0MSwKICAiRVJBTkdFIjogMzQsCiAgIkVST0ZTIjogMzAsCiAgIkVTUElQRSI6IDI5LAogICJFU1JDSCI6IDMsCiAgIkVTVEFMRSI6IDcwLAogICJFVElNRSI6IDEwMSwKICAiRVRJTUVET1VUIjogNjAsCiAgIkVUWFRCU1kiOiAyNiwKICAiRVdPVUxEQkxPQ0siOiAzNSwKICAiRVhERVYiOiAxOCwKICAiU0lHSFVQIjogMSwKICAiU0lHSU5UIjogMiwKICAiU0lHUVVJVCI6IDMsCiAgIlNJR0lMTCI6IDQsCiAgIlNJR1RSQVAiOiA1LAogICJTSUdBQlJUIjogNiwKICAiU0lHSU9UIjogNiwKICAiU0lHQlVTIjogMTAsCiAgIlNJR0ZQRSI6IDgsCiAgIlNJR0tJTEwiOiA5LAogICJTSUdVU1IxIjogMzAsCiAgIlNJR1NFR1YiOiAxMSwKICAiU0lHVVNSMiI6IDMxLAogICJTSUdQSVBFIjogMTMsCiAgIlNJR0FMUk0iOiAxNCwKICAiU0lHVEVSTSI6IDE1LAogICJTSUdDSExEIjogMjAsCiAgIlNJR0NPTlQiOiAxOSwKICAiU0lHU1RPUCI6IDE3LAogICJTSUdUU1RQIjogMTgsCiAgIlNJR1RUSU4iOiAyMSwKICAiU0lHVFRPVSI6IDIyLAogICJTSUdVUkciOiAxNiwKICAiU0lHWENQVSI6IDI0LAogICJTSUdYRlNaIjogMjUsCiAgIlNJR1ZUQUxSTSI6IDI2LAogICJTSUdQUk9GIjogMjcsCiAgIlNJR1dJTkNIIjogMjgsCiAgIlNJR0lPIjogMjMsCiAgIlNJR1NZUyI6IDEyLAogICJTU0xfT1BfQUxMIjogMjE0NzQ4NjcxOSwKICAiU1NMX09QX0FMTE9XX1VOU0FGRV9MRUdBQ1lfUkVORUdPVElBVElPTiI6IDI2MjE0NCwKICAiU1NMX09QX0NJUEhFUl9TRVJWRVJfUFJFRkVSRU5DRSI6IDQxOTQzMDQsCiAgIlNTTF9PUF9DSVNDT19BTllDT05ORUNUIjogMzI3NjgsCiAgIlNTTF9PUF9DT09LSUVfRVhDSEFOR0UiOiA4MTkyLAogICJTU0xfT1BfQ1JZUFRPUFJPX1RMU0VYVF9CVUciOiAyMTQ3NDgzNjQ4LAogICJTU0xfT1BfRE9OVF9JTlNFUlRfRU1QVFlfRlJBR01FTlRTIjogMjA0OCwKICAiU1NMX09QX0VQSEVNRVJBTF9SU0EiOiAwLAogICJTU0xfT1BfTEVHQUNZX1NFUlZFUl9DT05ORUNUIjogNCwKICAiU1NMX09QX01JQ1JPU09GVF9CSUdfU1NMVjNfQlVGRkVSIjogMzIsCiAgIlNTTF9PUF9NSUNST1NPRlRfU0VTU19JRF9CVUciOiAxLAogICJTU0xfT1BfTVNJRV9TU0xWMl9SU0FfUEFERElORyI6IDAsCiAgIlNTTF9PUF9ORVRTQ0FQRV9DQV9ETl9CVUciOiA1MzY4NzA5MTIsCiAgIlNTTF9PUF9ORVRTQ0FQRV9DSEFMTEVOR0VfQlVHIjogMiwKICAiU1NMX09QX05FVFNDQVBFX0RFTU9fQ0lQSEVSX0NIQU5HRV9CVUciOiAxMDczNzQxODI0LAogICJTU0xfT1BfTkVUU0NBUEVfUkVVU0VfQ0lQSEVSX0NIQU5HRV9CVUciOiA4LAogICJTU0xfT1BfTk9fQ09NUFJFU1NJT04iOiAxMzEwNzIsCiAgIlNTTF9PUF9OT19RVUVSWV9NVFUiOiA0MDk2LAogICJTU0xfT1BfTk9fU0VTU0lPTl9SRVNVTVBUSU9OX09OX1JFTkVHT1RJQVRJT04iOiA2NTUzNiwKICAiU1NMX09QX05PX1NTTHYyIjogMTY3NzcyMTYsCiAgIlNTTF9PUF9OT19TU0x2MyI6IDMzNTU0NDMyLAogICJTU0xfT1BfTk9fVElDS0VUIjogMTYzODQsCiAgIlNTTF9PUF9OT19UTFN2MSI6IDY3MTA4ODY0LAogICJTU0xfT1BfTk9fVExTdjFfMSI6IDI2ODQzNTQ1NiwKICAiU1NMX09QX05PX1RMU3YxXzIiOiAxMzQyMTc3MjgsCiAgIlNTTF9PUF9QS0NTMV9DSEVDS18xIjogMCwKICAiU1NMX09QX1BLQ1MxX0NIRUNLXzIiOiAwLAogICJTU0xfT1BfU0lOR0xFX0RIX1VTRSI6IDEwNDg1NzYsCiAgIlNTTF9PUF9TSU5HTEVfRUNESF9VU0UiOiA1MjQyODgsCiAgIlNTTF9PUF9TU0xFQVlfMDgwX0NMSUVOVF9ESF9CVUciOiAxMjgsCiAgIlNTTF9PUF9TU0xSRUYyX1JFVVNFX0NFUlRfVFlQRV9CVUciOiAwLAogICJTU0xfT1BfVExTX0JMT0NLX1BBRERJTkdfQlVHIjogNTEyLAogICJTU0xfT1BfVExTX0Q1X0JVRyI6IDI1NiwKICAiU1NMX09QX1RMU19ST0xMQkFDS19CVUciOiA4Mzg4NjA4LAogICJFTkdJTkVfTUVUSE9EX0RTQSI6IDIsCiAgIkVOR0lORV9NRVRIT0RfREgiOiA0LAogICJFTkdJTkVfTUVUSE9EX1JBTkQiOiA4LAogICJFTkdJTkVfTUVUSE9EX0VDREgiOiAxNiwKICAiRU5HSU5FX01FVEhPRF9FQ0RTQSI6IDMyLAogICJFTkdJTkVfTUVUSE9EX0NJUEhFUlMiOiA2NCwKICAiRU5HSU5FX01FVEhPRF9ESUdFU1RTIjogMTI4LAogICJFTkdJTkVfTUVUSE9EX1NUT1JFIjogMjU2LAogICJFTkdJTkVfTUVUSE9EX1BLRVlfTUVUSFMiOiA1MTIsCiAgIkVOR0lORV9NRVRIT0RfUEtFWV9BU04xX01FVEhTIjogMTAyNCwKICAiRU5HSU5FX01FVEhPRF9BTEwiOiA2NTUzNSwKICAiRU5HSU5FX01FVEhPRF9OT05FIjogMCwKICAiREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSI6IDIsCiAgIkRIX0NIRUNLX1BfTk9UX1BSSU1FIjogMSwKICAiREhfVU5BQkxFX1RPX0NIRUNLX0dFTkVSQVRPUiI6IDQsCiAgIkRIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1IiOiA4LAogICJOUE5fRU5BQkxFRCI6IDEsCiAgIlJTQV9QS0NTMV9QQURESU5HIjogMSwKICAiUlNBX1NTTFYyM19QQURESU5HIjogMiwKICAiUlNBX05PX1BBRERJTkciOiAzLAogICJSU0FfUEtDUzFfT0FFUF9QQURESU5HIjogNCwKICAiUlNBX1g5MzFfUEFERElORyI6IDUsCiAgIlJTQV9QS0NTMV9QU1NfUEFERElORyI6IDYsCiAgIlBPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCI6IDIsCiAgIlBPSU5UX0NPTlZFUlNJT05fVU5DT01QUkVTU0VEIjogNCwKICAiUE9JTlRfQ09OVkVSU0lPTl9IWUJSSUQiOiA2LAogICJGX09LIjogMCwKICAiUl9PSyI6IDQsCiAgIldfT0siOiAyLAogICJYX09LIjogMSwKICAiVVZfVURQX1JFVVNFQUREUiI6IDQKfQoKfSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoQnVmZmVyKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgCi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLgoKZnVuY3Rpb24gaXNBcnJheShhcmcpIHsKICBpZiAoQXJyYXkuaXNBcnJheSkgewogICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTsKICB9CiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7Cn0KZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTsKCmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nOwp9CmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuOwoKZnVuY3Rpb24gaXNOdWxsKGFyZykgewogIHJldHVybiBhcmcgPT09IG51bGw7Cn0KZXhwb3J0cy5pc051bGwgPSBpc051bGw7CgpmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09IG51bGw7Cn0KZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkOwoKZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwp9CmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjsKCmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJzsKfQpleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7CgpmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7Cn0KZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sOwoKZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwOwp9CmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDsKCmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7CiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7Cn0KZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwOwoKZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDsKfQpleHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7CgpmdW5jdGlvbiBpc0RhdGUoZCkgewogIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nOwp9CmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlOwoKZnVuY3Rpb24gaXNFcnJvcihlKSB7CiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpOwp9CmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7CgpmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nOwp9CmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247CgpmdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHsKICByZXR1cm4gYXJnID09PSBudWxsIHx8CiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbAogICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJzsKfQpleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7CgpleHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyOwoKZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7Cn0KCn0pLmNhbGwodGhpcyx7ImlzQnVmZmVyIjpyZXF1aXJlKCIuLi8uLi9pcy1idWZmZXIvaW5kZXguanMiKX0pCn0seyIuLi8uLi9pcy1idWZmZXIvaW5kZXguanMiOjE3fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHsKICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307CiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDsKfQptb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsKCi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueApFdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyOwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkOwpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7CgovLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmUKLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDsKCi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93cwovLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC4KRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7CiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSkKICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7CiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjsKICByZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHsKICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzOwoKICBpZiAoIXRoaXMuX2V2ZW50cykKICAgIHRoaXMuX2V2ZW50cyA9IHt9OwoKICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuCiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHsKICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8CiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7CiAgICAgIGVyID0gYXJndW1lbnRzWzFdOwogICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudAogICAgICB9IGVsc2UgewogICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXIKICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgImVycm9yIiBldmVudC4gKCcgKyBlciArICcpJyk7CiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjsKICAgICAgICB0aHJvdyBlcnI7CiAgICAgIH0KICAgIH0KICB9CgogIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07CgogIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSkKICAgIHJldHVybiBmYWxzZTsKCiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHsKICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICAvLyBmYXN0IGNhc2VzCiAgICAgIGNhc2UgMToKICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMjoKICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAzOgogICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7CiAgICAgICAgYnJlYWs7CiAgICAgIC8vIHNsb3dlcgogICAgICBkZWZhdWx0OgogICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7CiAgICB9CiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkgewogICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7CiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7CiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOwogICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKQogICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7CiAgfQoKICByZXR1cm4gdHJ1ZTsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikgewogIHZhciBtOwoKICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKQogICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKCiAgaWYgKCF0aGlzLl9ldmVudHMpCiAgICB0aGlzLl9ldmVudHMgPSB7fTsKCiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gIm5ld0xpc3RlbmVyIiEgQmVmb3JlCiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgIm5ld0xpc3RlbmVyIi4KICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKQogICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsCiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgPwogICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpOwoKICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkKICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LgogICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7CiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSkKICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC4KICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTsKICBlbHNlCiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS4KICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTsKCiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWsKICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkgewogICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7CiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7CiAgICB9IGVsc2UgewogICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7CiAgICB9CgogICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHsKICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7CiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgKwogICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgKwogICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLAogICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpOwogICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwCiAgICAgICAgY29uc29sZS50cmFjZSgpOwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyOwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHsKICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKQogICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKCiAgdmFyIGZpcmVkID0gZmFsc2U7CgogIGZ1bmN0aW9uIGcoKSB7CiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpOwoKICAgIGlmICghZmlyZWQpIHsKICAgICAgZmlyZWQgPSB0cnVlOwogICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQogIH0KCiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyOwogIHRoaXMub24odHlwZSwgZyk7CgogIHJldHVybiB0aGlzOwp9OwoKLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7CgogIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpCiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpOwoKICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKQogICAgcmV0dXJuIHRoaXM7CgogIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07CiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7CiAgcG9zaXRpb24gPSAtMTsKCiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8CiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkgewogICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpCiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7CgogIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHsKICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHsKICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8CiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHsKICAgICAgICBwb3NpdGlvbiA9IGk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBpZiAocG9zaXRpb24gPCAwKQogICAgICByZXR1cm4gdGhpczsKCiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHsKICAgICAgbGlzdC5sZW5ndGggPSAwOwogICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOwogICAgfSBlbHNlIHsKICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpOwogICAgfQoKICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpCiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7CiAgfQoKICByZXR1cm4gdGhpczsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkgewogIHZhciBrZXksIGxpc3RlbmVyczsKCiAgaWYgKCF0aGlzLl9ldmVudHMpCiAgICByZXR1cm4gdGhpczsKCiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdAogIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkKICAgICAgdGhpcy5fZXZlbnRzID0ge307CiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pCiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07CiAgICByZXR1cm4gdGhpczsKICB9CgogIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50cwogIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHsKICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7CiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7CiAgICB9CiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTsKICAgIHRoaXMuX2V2ZW50cyA9IHt9OwogICAgcmV0dXJuIHRoaXM7CiAgfQoKICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07CgogIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHsKICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTsKICB9IGVsc2UgaWYgKGxpc3RlbmVycykgewogICAgLy8gTElGTyBvcmRlcgogICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpCiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7CiAgfQogIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07CgogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7CiAgdmFyIHJldDsKICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKQogICAgcmV0ID0gW107CiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKQogICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07CiAgZWxzZQogICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7CiAgcmV0dXJuIHJldDsKfTsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHsKICBpZiAodGhpcy5fZXZlbnRzKSB7CiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKCiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSkKICAgICAgcmV0dXJuIDE7CiAgICBlbHNlIGlmIChldmxpc3RlbmVyKQogICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7CiAgfQogIHJldHVybiAwOwp9OwoKRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7CiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTsKfTsKCmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7Cn0KCmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJzsKfQoKZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDsKfQoKZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwOwp9Cgp9LHt9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JwoKdmFyIGZzID0gcmVxdWlyZSgnZnMnKQoKbW9kdWxlLmV4cG9ydHMgPSBjbG9uZShmcykKCmZ1bmN0aW9uIGNsb25lIChvYmopIHsKICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKQogICAgcmV0dXJuIG9iagoKICBpZiAob2JqIGluc3RhbmNlb2YgT2JqZWN0KQogICAgdmFyIGNvcHkgPSB7IF9fcHJvdG9fXzogb2JqLl9fcHJvdG9fXyB9CiAgZWxzZQogICAgdmFyIGNvcHkgPSBPYmplY3QuY3JlYXRlKG51bGwpCgogIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29weSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSkKICB9KQoKICByZXR1cm4gY29weQp9Cgp9LHsiZnMiOjV9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7CnZhciBmcyA9IHJlcXVpcmUoJ2ZzJykKdmFyIHBvbHlmaWxscyA9IHJlcXVpcmUoJy4vcG9seWZpbGxzLmpzJykKdmFyIGxlZ2FjeSA9IHJlcXVpcmUoJy4vbGVnYWN5LXN0cmVhbXMuanMnKQp2YXIgcXVldWUgPSBbXQoKdmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJykKCmZ1bmN0aW9uIG5vb3AgKCkge30KCnZhciBkZWJ1ZyA9IG5vb3AKaWYgKHV0aWwuZGVidWdsb2cpCiAgZGVidWcgPSB1dGlsLmRlYnVnbG9nKCdnZnM0JykKZWxzZSBpZiAoL1xiZ2ZzNFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSkKICBkZWJ1ZyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIG0gPSB1dGlsLmZvcm1hdC5hcHBseSh1dGlsLCBhcmd1bWVudHMpCiAgICBtID0gJ0dGUzQ6ICcgKyBtLnNwbGl0KC9cbi8pLmpvaW4oJ1xuR0ZTNDogJykKICAgIGNvbnNvbGUuZXJyb3IobSkKICB9CgppZiAoL1xiZ2ZzNFxiL2kudGVzdChwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnKSkgewogIHByb2Nlc3Mub24oJ2V4aXQnLCBmdW5jdGlvbigpIHsKICAgIGRlYnVnKHF1ZXVlKQogICAgcmVxdWlyZSgnYXNzZXJ0JykuZXF1YWwocXVldWUubGVuZ3RoLCAwKQogIH0pCn0KCm1vZHVsZS5leHBvcnRzID0gcGF0Y2gocmVxdWlyZSgnLi9mcy5qcycpKQppZiAocHJvY2Vzcy5lbnYuVEVTVF9HUkFDRUZVTF9GU19HTE9CQUxfUEFUQ0gpIHsKICBtb2R1bGUuZXhwb3J0cyA9IHBhdGNoKGZzKQp9CgovLyBBbHdheXMgcGF0Y2ggZnMuY2xvc2UvY2xvc2VTeW5jLCBiZWNhdXNlIHdlIHdhbnQgdG8KLy8gcmV0cnkoKSB3aGVuZXZlciBhIGNsb3NlIGhhcHBlbnMgKmFueXdoZXJlKiBpbiB0aGUgcHJvZ3JhbS4KLy8gVGhpcyBpcyBlc3NlbnRpYWwgd2hlbiBtdWx0aXBsZSBncmFjZWZ1bC1mcyBpbnN0YW5jZXMgYXJlCi8vIGluIHBsYXkgYXQgdGhlIHNhbWUgdGltZS4KbW9kdWxlLmV4cG9ydHMuY2xvc2UgPQpmcy5jbG9zZSA9IChmdW5jdGlvbiAoZnMkY2xvc2UpIHsgcmV0dXJuIGZ1bmN0aW9uIChmZCwgY2IpIHsKICByZXR1cm4gZnMkY2xvc2UuY2FsbChmcywgZmQsIGZ1bmN0aW9uIChlcnIpIHsKICAgIGlmICghZXJyKQogICAgICByZXRyeSgpCgogICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykKICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKQogIH0pCn19KShmcy5jbG9zZSkKCm1vZHVsZS5leHBvcnRzLmNsb3NlU3luYyA9CmZzLmNsb3NlU3luYyA9IChmdW5jdGlvbiAoZnMkY2xvc2VTeW5jKSB7IHJldHVybiBmdW5jdGlvbiAoZmQpIHsKICAvLyBOb3RlIHRoYXQgZ3JhY2VmdWwtZnMgYWxzbyByZXRyaWVzIHdoZW4gZnMuY2xvc2VTeW5jKCkgZmFpbHMuCiAgLy8gTG9va3MgbGlrZSBhIGJ1ZyB0byBtZSwgYWx0aG91Z2ggaXQncyBwcm9iYWJseSBhIGhhcm1sZXNzIG9uZS4KICB2YXIgcnZhbCA9IGZzJGNsb3NlU3luYy5hcHBseShmcywgYXJndW1lbnRzKQogIHJldHJ5KCkKICByZXR1cm4gcnZhbAp9fSkoZnMuY2xvc2VTeW5jKQoKZnVuY3Rpb24gcGF0Y2ggKGZzKSB7CiAgLy8gRXZlcnl0aGluZyB0aGF0IHJlZmVyZW5jZXMgdGhlIG9wZW4oKSBmdW5jdGlvbiBuZWVkcyB0byBiZSBpbiBoZXJlCiAgcG9seWZpbGxzKGZzKQogIGZzLmdyYWNlZnVsaWZ5ID0gcGF0Y2gKICBmcy5GaWxlUmVhZFN0cmVhbSA9IFJlYWRTdHJlYW07ICAvLyBMZWdhY3kgbmFtZS4KICBmcy5GaWxlV3JpdGVTdHJlYW0gPSBXcml0ZVN0cmVhbTsgIC8vIExlZ2FjeSBuYW1lLgogIGZzLmNyZWF0ZVJlYWRTdHJlYW0gPSBjcmVhdGVSZWFkU3RyZWFtCiAgZnMuY3JlYXRlV3JpdGVTdHJlYW0gPSBjcmVhdGVXcml0ZVN0cmVhbQogIHZhciBmcyRyZWFkRmlsZSA9IGZzLnJlYWRGaWxlCiAgZnMucmVhZEZpbGUgPSByZWFkRmlsZQogIGZ1bmN0aW9uIHJlYWRGaWxlIChwYXRoLCBvcHRpb25zLCBjYikgewogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKQogICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsCgogICAgcmV0dXJuIGdvJHJlYWRGaWxlKHBhdGgsIG9wdGlvbnMsIGNiKQoKICAgIGZ1bmN0aW9uIGdvJHJlYWRGaWxlIChwYXRoLCBvcHRpb25zLCBjYikgewogICAgICByZXR1cm4gZnMkcmVhZEZpbGUocGF0aCwgb3B0aW9ucywgZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChlcnIgJiYgKGVyci5jb2RlID09PSAnRU1GSUxFJyB8fCBlcnIuY29kZSA9PT0gJ0VORklMRScpKQogICAgICAgICAgZW5xdWV1ZShbZ28kcmVhZEZpbGUsIFtwYXRoLCBvcHRpb25zLCBjYl1dKQogICAgICAgIGVsc2UgewogICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgcmV0cnkoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0KICB9CgogIHZhciBmcyR3cml0ZUZpbGUgPSBmcy53cml0ZUZpbGUKICBmcy53cml0ZUZpbGUgPSB3cml0ZUZpbGUKICBmdW5jdGlvbiB3cml0ZUZpbGUgKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKSB7CiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpCiAgICAgIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IG51bGwKCiAgICByZXR1cm4gZ28kd3JpdGVGaWxlKHBhdGgsIGRhdGEsIG9wdGlvbnMsIGNiKQoKICAgIGZ1bmN0aW9uIGdvJHdyaXRlRmlsZSAocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpIHsKICAgICAgcmV0dXJuIGZzJHdyaXRlRmlsZShwYXRoLCBkYXRhLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKGVyciAmJiAoZXJyLmNvZGUgPT09ICdFTUZJTEUnIHx8IGVyci5jb2RlID09PSAnRU5GSUxFJykpCiAgICAgICAgICBlbnF1ZXVlKFtnbyR3cml0ZUZpbGUsIFtwYXRoLCBkYXRhLCBvcHRpb25zLCBjYl1dKQogICAgICAgIGVsc2UgewogICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgcmV0cnkoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0KICB9CgogIHZhciBmcyRhcHBlbmRGaWxlID0gZnMuYXBwZW5kRmlsZQogIGlmIChmcyRhcHBlbmRGaWxlKQogICAgZnMuYXBwZW5kRmlsZSA9IGFwcGVuZEZpbGUKICBmdW5jdGlvbiBhcHBlbmRGaWxlIChwYXRoLCBkYXRhLCBvcHRpb25zLCBjYikgewogICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKQogICAgICBjYiA9IG9wdGlvbnMsIG9wdGlvbnMgPSBudWxsCgogICAgcmV0dXJuIGdvJGFwcGVuZEZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpCgogICAgZnVuY3Rpb24gZ28kYXBwZW5kRmlsZSAocGF0aCwgZGF0YSwgb3B0aW9ucywgY2IpIHsKICAgICAgcmV0dXJuIGZzJGFwcGVuZEZpbGUocGF0aCwgZGF0YSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChlcnIgJiYgKGVyci5jb2RlID09PSAnRU1GSUxFJyB8fCBlcnIuY29kZSA9PT0gJ0VORklMRScpKQogICAgICAgICAgZW5xdWV1ZShbZ28kYXBwZW5kRmlsZSwgW3BhdGgsIGRhdGEsIG9wdGlvbnMsIGNiXV0pCiAgICAgICAgZWxzZSB7CiAgICAgICAgICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKQogICAgICAgICAgICBjYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICByZXRyeSgpCiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0KCiAgdmFyIGZzJHJlYWRkaXIgPSBmcy5yZWFkZGlyCiAgZnMucmVhZGRpciA9IHJlYWRkaXIKICBmdW5jdGlvbiByZWFkZGlyIChwYXRoLCBjYikgewogICAgcmV0dXJuIGdvJHJlYWRkaXIocGF0aCwgY2IpCgogICAgZnVuY3Rpb24gZ28kcmVhZGRpciAoKSB7CiAgICAgIHJldHVybiBmcyRyZWFkZGlyKHBhdGgsIGZ1bmN0aW9uIChlcnIsIGZpbGVzKSB7CiAgICAgICAgaWYgKGZpbGVzICYmIGZpbGVzLnNvcnQpCiAgICAgICAgICBmaWxlcy5zb3J0KCk7ICAvLyBCYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGdyYWNlZnVsLWZzLgoKICAgICAgICBpZiAoZXJyICYmIChlcnIuY29kZSA9PT0gJ0VNRklMRScgfHwgZXJyLmNvZGUgPT09ICdFTkZJTEUnKSkKICAgICAgICAgIGVucXVldWUoW2dvJHJlYWRkaXIsIFtwYXRoLCBjYl1dKQogICAgICAgIGVsc2UgewogICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgcmV0cnkoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0KICB9CgoKICBpZiAocHJvY2Vzcy52ZXJzaW9uLnN1YnN0cigwLCA0KSA9PT0gJ3YwLjgnKSB7CiAgICB2YXIgbGVnU3RyZWFtcyA9IGxlZ2FjeShmcykKICAgIFJlYWRTdHJlYW0gPSBsZWdTdHJlYW1zLlJlYWRTdHJlYW0KICAgIFdyaXRlU3RyZWFtID0gbGVnU3RyZWFtcy5Xcml0ZVN0cmVhbQogIH0KCiAgdmFyIGZzJFJlYWRTdHJlYW0gPSBmcy5SZWFkU3RyZWFtCiAgUmVhZFN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGZzJFJlYWRTdHJlYW0ucHJvdG90eXBlKQogIFJlYWRTdHJlYW0ucHJvdG90eXBlLm9wZW4gPSBSZWFkU3RyZWFtJG9wZW4KCiAgdmFyIGZzJFdyaXRlU3RyZWFtID0gZnMuV3JpdGVTdHJlYW0KICBXcml0ZVN0cmVhbS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGZzJFdyaXRlU3RyZWFtLnByb3RvdHlwZSkKICBXcml0ZVN0cmVhbS5wcm90b3R5cGUub3BlbiA9IFdyaXRlU3RyZWFtJG9wZW4KCiAgZnMuUmVhZFN0cmVhbSA9IFJlYWRTdHJlYW0KICBmcy5Xcml0ZVN0cmVhbSA9IFdyaXRlU3RyZWFtCgogIGZ1bmN0aW9uIFJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHsKICAgIGlmICh0aGlzIGluc3RhbmNlb2YgUmVhZFN0cmVhbSkKICAgICAgcmV0dXJuIGZzJFJlYWRTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGhpcwogICAgZWxzZQogICAgICByZXR1cm4gUmVhZFN0cmVhbS5hcHBseShPYmplY3QuY3JlYXRlKFJlYWRTdHJlYW0ucHJvdG90eXBlKSwgYXJndW1lbnRzKQogIH0KCiAgZnVuY3Rpb24gUmVhZFN0cmVhbSRvcGVuICgpIHsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgb3Blbih0aGF0LnBhdGgsIHRoYXQuZmxhZ3MsIHRoYXQubW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIGlmICh0aGF0LmF1dG9DbG9zZSkKICAgICAgICAgIHRoYXQuZGVzdHJveSgpCgogICAgICAgIHRoYXQuZW1pdCgnZXJyb3InLCBlcnIpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhhdC5mZCA9IGZkCiAgICAgICAgdGhhdC5lbWl0KCdvcGVuJywgZmQpCiAgICAgICAgdGhhdC5yZWFkKCkKICAgICAgfQogICAgfSkKICB9CgogIGZ1bmN0aW9uIFdyaXRlU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7CiAgICBpZiAodGhpcyBpbnN0YW5jZW9mIFdyaXRlU3RyZWFtKQogICAgICByZXR1cm4gZnMkV3JpdGVTdHJlYW0uYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdGhpcwogICAgZWxzZQogICAgICByZXR1cm4gV3JpdGVTdHJlYW0uYXBwbHkoT2JqZWN0LmNyZWF0ZShXcml0ZVN0cmVhbS5wcm90b3R5cGUpLCBhcmd1bWVudHMpCiAgfQoKICBmdW5jdGlvbiBXcml0ZVN0cmVhbSRvcGVuICgpIHsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgb3Blbih0aGF0LnBhdGgsIHRoYXQuZmxhZ3MsIHRoYXQubW9kZSwgZnVuY3Rpb24gKGVyciwgZmQpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIHRoYXQuZGVzdHJveSgpCiAgICAgICAgdGhhdC5lbWl0KCdlcnJvcicsIGVycikKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGF0LmZkID0gZmQKICAgICAgICB0aGF0LmVtaXQoJ29wZW4nLCBmZCkKICAgICAgfQogICAgfSkKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHsKICAgIHJldHVybiBuZXcgUmVhZFN0cmVhbShwYXRoLCBvcHRpb25zKQogIH0KCiAgZnVuY3Rpb24gY3JlYXRlV3JpdGVTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHsKICAgIHJldHVybiBuZXcgV3JpdGVTdHJlYW0ocGF0aCwgb3B0aW9ucykKICB9CgogIHZhciBmcyRvcGVuID0gZnMub3BlbgogIGZzLm9wZW4gPSBvcGVuCiAgZnVuY3Rpb24gb3BlbiAocGF0aCwgZmxhZ3MsIG1vZGUsIGNiKSB7CiAgICBpZiAodHlwZW9mIG1vZGUgPT09ICdmdW5jdGlvbicpCiAgICAgIGNiID0gbW9kZSwgbW9kZSA9IG51bGwKCiAgICByZXR1cm4gZ28kb3BlbihwYXRoLCBmbGFncywgbW9kZSwgY2IpCgogICAgZnVuY3Rpb24gZ28kb3BlbiAocGF0aCwgZmxhZ3MsIG1vZGUsIGNiKSB7CiAgICAgIHJldHVybiBmcyRvcGVuKHBhdGgsIGZsYWdzLCBtb2RlLCBmdW5jdGlvbiAoZXJyLCBmZCkgewogICAgICAgIGlmIChlcnIgJiYgKGVyci5jb2RlID09PSAnRU1GSUxFJyB8fCBlcnIuY29kZSA9PT0gJ0VORklMRScpKQogICAgICAgICAgZW5xdWV1ZShbZ28kb3BlbiwgW3BhdGgsIGZsYWdzLCBtb2RlLCBjYl1dKQogICAgICAgIGVsc2UgewogICAgICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgY2IuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgcmV0cnkoKQogICAgICAgIH0KICAgICAgfSkKICAgIH0KICB9CgogIHJldHVybiBmcwp9CgpmdW5jdGlvbiBlbnF1ZXVlIChlbGVtKSB7CiAgZGVidWcoJ0VOUVVFVUUnLCBlbGVtWzBdLm5hbWUsIGVsZW1bMV0pCiAgcXVldWUucHVzaChlbGVtKQp9CgpmdW5jdGlvbiByZXRyeSAoKSB7CiAgdmFyIGVsZW0gPSBxdWV1ZS5zaGlmdCgpCiAgaWYgKGVsZW0pIHsKICAgIGRlYnVnKCdSRVRSWScsIGVsZW1bMF0ubmFtZSwgZWxlbVsxXSkKICAgIGVsZW1bMF0uYXBwbHkobnVsbCwgZWxlbVsxXSkKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQp9LHsiLi9mcy5qcyI6MTAsIi4vbGVnYWN5LXN0cmVhbXMuanMiOjEyLCIuL3BvbHlmaWxscy5qcyI6MTMsIl9wcm9jZXNzIjoyMywiYXNzZXJ0IjoyLCJmcyI6NSwidXRpbCI6NTV9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7CnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKS5TdHJlYW0KCm1vZHVsZS5leHBvcnRzID0gbGVnYWN5CgpmdW5jdGlvbiBsZWdhY3kgKGZzKSB7CiAgcmV0dXJuIHsKICAgIFJlYWRTdHJlYW06IFJlYWRTdHJlYW0sCiAgICBXcml0ZVN0cmVhbTogV3JpdGVTdHJlYW0KICB9CgogIGZ1bmN0aW9uIFJlYWRTdHJlYW0gKHBhdGgsIG9wdGlvbnMpIHsKICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkU3RyZWFtKSkgcmV0dXJuIG5ldyBSZWFkU3RyZWFtKHBhdGgsIG9wdGlvbnMpOwoKICAgIFN0cmVhbS5jYWxsKHRoaXMpOwoKICAgIHZhciBzZWxmID0gdGhpczsKCiAgICB0aGlzLnBhdGggPSBwYXRoOwogICAgdGhpcy5mZCA9IG51bGw7CiAgICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTsKICAgIHRoaXMucGF1c2VkID0gZmFsc2U7CgogICAgdGhpcy5mbGFncyA9ICdyJzsKICAgIHRoaXMubW9kZSA9IDQzODsgLyo9MDY2NiovCiAgICB0aGlzLmJ1ZmZlclNpemUgPSA2NCAqIDEwMjQ7CgogICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgogICAgLy8gTWl4aW4gb3B0aW9ucyBpbnRvIHRoaXMKICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7CiAgICBmb3IgKHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykgewogICAgICB2YXIga2V5ID0ga2V5c1tpbmRleF07CiAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTsKICAgIH0KCiAgICBpZiAodGhpcy5lbmNvZGluZykgdGhpcy5zZXRFbmNvZGluZyh0aGlzLmVuY29kaW5nKTsKCiAgICBpZiAodGhpcy5zdGFydCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGlmICgnbnVtYmVyJyAhPT0gdHlwZW9mIHRoaXMuc3RhcnQpIHsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ3N0YXJ0IG11c3QgYmUgYSBOdW1iZXInKTsKICAgICAgfQogICAgICBpZiAodGhpcy5lbmQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMuZW5kID0gSW5maW5pdHk7CiAgICAgIH0gZWxzZSBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLmVuZCkgewogICAgICAgIHRocm93IFR5cGVFcnJvcignZW5kIG11c3QgYmUgYSBOdW1iZXInKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuc3RhcnQgPiB0aGlzLmVuZCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgbXVzdCBiZSA8PSBlbmQnKTsKICAgICAgfQoKICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0OwogICAgfQoKICAgIGlmICh0aGlzLmZkICE9PSBudWxsKSB7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgc2VsZi5fcmVhZCgpOwogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGZzLm9wZW4odGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIGZ1bmN0aW9uIChlcnIsIGZkKSB7CiAgICAgIGlmIChlcnIpIHsKICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTsKICAgICAgICBzZWxmLnJlYWRhYmxlID0gZmFsc2U7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBzZWxmLmZkID0gZmQ7CiAgICAgIHNlbGYuZW1pdCgnb3BlbicsIGZkKTsKICAgICAgc2VsZi5fcmVhZCgpOwogICAgfSkKICB9CgogIGZ1bmN0aW9uIFdyaXRlU3RyZWFtIChwYXRoLCBvcHRpb25zKSB7CiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGVTdHJlYW0pKSByZXR1cm4gbmV3IFdyaXRlU3RyZWFtKHBhdGgsIG9wdGlvbnMpOwoKICAgIFN0cmVhbS5jYWxsKHRoaXMpOwoKICAgIHRoaXMucGF0aCA9IHBhdGg7CiAgICB0aGlzLmZkID0gbnVsbDsKICAgIHRoaXMud3JpdGFibGUgPSB0cnVlOwoKICAgIHRoaXMuZmxhZ3MgPSAndyc7CiAgICB0aGlzLmVuY29kaW5nID0gJ2JpbmFyeSc7CiAgICB0aGlzLm1vZGUgPSA0Mzg7IC8qPTA2NjYqLwogICAgdGhpcy5ieXRlc1dyaXR0ZW4gPSAwOwoKICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAgIC8vIE1peGluIG9wdGlvbnMgaW50byB0aGlzCiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpOwogICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHsKICAgICAgdmFyIGtleSA9IGtleXNbaW5kZXhdOwogICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV07CiAgICB9CgogICAgaWYgKHRoaXMuc3RhcnQgIT09IHVuZGVmaW5lZCkgewogICAgICBpZiAoJ251bWJlcicgIT09IHR5cGVvZiB0aGlzLnN0YXJ0KSB7CiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdzdGFydCBtdXN0IGJlIGEgTnVtYmVyJyk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc3RhcnQgPCAwKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBtdXN0IGJlID49IHplcm8nKTsKICAgICAgfQoKICAgICAgdGhpcy5wb3MgPSB0aGlzLnN0YXJ0OwogICAgfQoKICAgIHRoaXMuYnVzeSA9IGZhbHNlOwogICAgdGhpcy5fcXVldWUgPSBbXTsKCiAgICBpZiAodGhpcy5mZCA9PT0gbnVsbCkgewogICAgICB0aGlzLl9vcGVuID0gZnMub3BlbjsKICAgICAgdGhpcy5fcXVldWUucHVzaChbdGhpcy5fb3BlbiwgdGhpcy5wYXRoLCB0aGlzLmZsYWdzLCB0aGlzLm1vZGUsIHVuZGVmaW5lZF0pOwogICAgICB0aGlzLmZsdXNoKCk7CiAgICB9CiAgfQp9Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKfSx7Il9wcm9jZXNzIjoyMywic3RyZWFtIjo1MX1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKdmFyIGZzID0gcmVxdWlyZSgnLi9mcy5qcycpCnZhciBjb25zdGFudHMgPSByZXF1aXJlKCdjb25zdGFudHMnKQoKdmFyIG9yaWdDd2QgPSBwcm9jZXNzLmN3ZAp2YXIgY3dkID0gbnVsbApwcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uKCkgewogIGlmICghY3dkKQogICAgY3dkID0gb3JpZ0N3ZC5jYWxsKHByb2Nlc3MpCiAgcmV0dXJuIGN3ZAp9CnRyeSB7CiAgcHJvY2Vzcy5jd2QoKQp9IGNhdGNoIChlcikge30KCnZhciBjaGRpciA9IHByb2Nlc3MuY2hkaXIKcHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uKGQpIHsKICBjd2QgPSBudWxsCiAgY2hkaXIuY2FsbChwcm9jZXNzLCBkKQp9Cgptb2R1bGUuZXhwb3J0cyA9IHBhdGNoCgpmdW5jdGlvbiBwYXRjaCAoZnMpIHsKICAvLyAocmUtKWltcGxlbWVudCBzb21lIHRoaW5ncyB0aGF0IGFyZSBrbm93biBidXN0ZWQgb3IgbWlzc2luZy4KCiAgLy8gbGNobW9kLCBicm9rZW4gcHJpb3IgdG8gMC42LjIKICAvLyBiYWNrLXBvcnQgdGhlIGZpeCBoZXJlLgogIGlmIChjb25zdGFudHMuaGFzT3duUHJvcGVydHkoJ09fU1lNTElOSycpICYmCiAgICAgIHByb2Nlc3MudmVyc2lvbi5tYXRjaCgvXnYwXC42XC5bMC0yXXxedjBcLjVcLi8pKSB7CiAgICBwYXRjaExjaG1vZChmcykKICB9CgogIC8vIGx1dGltZXMgaW1wbGVtZW50YXRpb24sIG9yIG5vLW9wCiAgaWYgKCFmcy5sdXRpbWVzKSB7CiAgICBwYXRjaEx1dGltZXMoZnMpCiAgfQoKICAvLyBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL25vZGUtZ3JhY2VmdWwtZnMvaXNzdWVzLzQKICAvLyBDaG93biBzaG91bGQgbm90IGZhaWwgb24gZWludmFsIG9yIGVwZXJtIGlmIG5vbi1yb290LgogIC8vIEl0IHNob3VsZCBub3QgZmFpbCBvbiBlbm9zeXMgZXZlciwgYXMgdGhpcyBqdXN0IGluZGljYXRlcwogIC8vIHRoYXQgYSBmcyBkb2Vzbid0IHN1cHBvcnQgdGhlIGludGVuZGVkIG9wZXJhdGlvbi4KCiAgZnMuY2hvd24gPSBjaG93bkZpeChmcy5jaG93bikKICBmcy5mY2hvd24gPSBjaG93bkZpeChmcy5mY2hvd24pCiAgZnMubGNob3duID0gY2hvd25GaXgoZnMubGNob3duKQoKICBmcy5jaG1vZCA9IGNobW9kRml4KGZzLmNobW9kKQogIGZzLmZjaG1vZCA9IGNobW9kRml4KGZzLmZjaG1vZCkKICBmcy5sY2htb2QgPSBjaG1vZEZpeChmcy5sY2htb2QpCgogIGZzLmNob3duU3luYyA9IGNob3duRml4U3luYyhmcy5jaG93blN5bmMpCiAgZnMuZmNob3duU3luYyA9IGNob3duRml4U3luYyhmcy5mY2hvd25TeW5jKQogIGZzLmxjaG93blN5bmMgPSBjaG93bkZpeFN5bmMoZnMubGNob3duU3luYykKCiAgZnMuY2htb2RTeW5jID0gY2htb2RGaXhTeW5jKGZzLmNobW9kU3luYykKICBmcy5mY2htb2RTeW5jID0gY2htb2RGaXhTeW5jKGZzLmZjaG1vZFN5bmMpCiAgZnMubGNobW9kU3luYyA9IGNobW9kRml4U3luYyhmcy5sY2htb2RTeW5jKQoKICAvLyBpZiBsY2htb2QvbGNob3duIGRvIG5vdCBleGlzdCwgdGhlbiBtYWtlIHRoZW0gbm8tb3BzCiAgaWYgKCFmcy5sY2htb2QpIHsKICAgIGZzLmxjaG1vZCA9IGZ1bmN0aW9uIChwYXRoLCBtb2RlLCBjYikgewogICAgICBpZiAoY2IpIHByb2Nlc3MubmV4dFRpY2soY2IpCiAgICB9CiAgICBmcy5sY2htb2RTeW5jID0gZnVuY3Rpb24gKCkge30KICB9CiAgaWYgKCFmcy5sY2hvd24pIHsKICAgIGZzLmxjaG93biA9IGZ1bmN0aW9uIChwYXRoLCB1aWQsIGdpZCwgY2IpIHsKICAgICAgaWYgKGNiKSBwcm9jZXNzLm5leHRUaWNrKGNiKQogICAgfQogICAgZnMubGNob3duU3luYyA9IGZ1bmN0aW9uICgpIHt9CiAgfQoKICAvLyBvbiBXaW5kb3dzLCBBL1Ygc29mdHdhcmUgY2FuIGxvY2sgdGhlIGRpcmVjdG9yeSwgY2F1c2luZyB0aGlzCiAgLy8gdG8gZmFpbCB3aXRoIGFuIEVBQ0NFUyBvciBFUEVSTSBpZiB0aGUgZGlyZWN0b3J5IGNvbnRhaW5zIG5ld2x5CiAgLy8gY3JlYXRlZCBmaWxlcy4gIFRyeSBhZ2FpbiBvbiBmYWlsdXJlLCBmb3IgdXAgdG8gMSBzZWNvbmQuCiAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICJ3aW4zMiIpIHsKICAgIGZzLnJlbmFtZSA9IChmdW5jdGlvbiAoZnMkcmVuYW1lKSB7IHJldHVybiBmdW5jdGlvbiAoZnJvbSwgdG8sIGNiKSB7CiAgICAgIHZhciBzdGFydCA9IERhdGUubm93KCkKICAgICAgZnMkcmVuYW1lKGZyb20sIHRvLCBmdW5jdGlvbiBDQiAoZXIpIHsKICAgICAgICBpZiAoZXIKICAgICAgICAgICAgJiYgKGVyLmNvZGUgPT09ICJFQUNDRVMiIHx8IGVyLmNvZGUgPT09ICJFUEVSTSIpCiAgICAgICAgICAgICYmIERhdGUubm93KCkgLSBzdGFydCA8IDEwMDApIHsKICAgICAgICAgIHJldHVybiBmcyRyZW5hbWUoZnJvbSwgdG8sIENCKQogICAgICAgIH0KICAgICAgICBpZiAoY2IpIGNiKGVyKQogICAgICB9KQogICAgfX0pKGZzLnJlbmFtZSkKICB9CgogIC8vIGlmIHJlYWQoKSByZXR1cm5zIEVBR0FJTiwgdGhlbiBqdXN0IHRyeSBpdCBhZ2Fpbi4KICBmcy5yZWFkID0gKGZ1bmN0aW9uIChmcyRyZWFkKSB7IHJldHVybiBmdW5jdGlvbiAoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFja18pIHsKICAgIHZhciBjYWxsYmFjawogICAgaWYgKGNhbGxiYWNrXyAmJiB0eXBlb2YgY2FsbGJhY2tfID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHZhciBlYWdDb3VudGVyID0gMAogICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uIChlciwgXywgX18pIHsKICAgICAgICBpZiAoZXIgJiYgZXIuY29kZSA9PT0gJ0VBR0FJTicgJiYgZWFnQ291bnRlciA8IDEwKSB7CiAgICAgICAgICBlYWdDb3VudGVyICsrCiAgICAgICAgICByZXR1cm4gZnMkcmVhZC5jYWxsKGZzLCBmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKQogICAgICAgIH0KICAgICAgICBjYWxsYmFja18uYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICB9CiAgICB9CiAgICByZXR1cm4gZnMkcmVhZC5jYWxsKGZzLCBmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKQogIH19KShmcy5yZWFkKQoKICBmcy5yZWFkU3luYyA9IChmdW5jdGlvbiAoZnMkcmVhZFN5bmMpIHsgcmV0dXJuIGZ1bmN0aW9uIChmZCwgYnVmZmVyLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24pIHsKICAgIHZhciBlYWdDb3VudGVyID0gMAogICAgd2hpbGUgKHRydWUpIHsKICAgICAgdHJ5IHsKICAgICAgICByZXR1cm4gZnMkcmVhZFN5bmMuY2FsbChmcywgZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uKQogICAgICB9IGNhdGNoIChlcikgewogICAgICAgIGlmIChlci5jb2RlID09PSAnRUFHQUlOJyAmJiBlYWdDb3VudGVyIDwgMTApIHsKICAgICAgICAgIGVhZ0NvdW50ZXIgKysKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIHRocm93IGVyCiAgICAgIH0KICAgIH0KICB9fSkoZnMucmVhZFN5bmMpCn0KCmZ1bmN0aW9uIHBhdGNoTGNobW9kIChmcykgewogIGZzLmxjaG1vZCA9IGZ1bmN0aW9uIChwYXRoLCBtb2RlLCBjYWxsYmFjaykgewogICAgZnMub3BlbiggcGF0aAogICAgICAgICAgICwgY29uc3RhbnRzLk9fV1JPTkxZIHwgY29uc3RhbnRzLk9fU1lNTElOSwogICAgICAgICAgICwgbW9kZQogICAgICAgICAgICwgZnVuY3Rpb24gKGVyciwgZmQpIHsKICAgICAgaWYgKGVycikgewogICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKQogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIC8vIHByZWZlciB0byByZXR1cm4gdGhlIGNobW9kIGVycm9yLCBpZiBvbmUgb2NjdXJzLAogICAgICAvLyBidXQgc3RpbGwgdHJ5IHRvIGNsb3NlLCBhbmQgcmVwb3J0IGNsb3NpbmcgZXJyb3JzIGlmIHRoZXkgb2NjdXIuCiAgICAgIGZzLmZjaG1vZChmZCwgbW9kZSwgZnVuY3Rpb24gKGVycikgewogICAgICAgIGZzLmNsb3NlKGZkLCBmdW5jdGlvbihlcnIyKSB7CiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVyciB8fCBlcnIyKQogICAgICAgIH0pCiAgICAgIH0pCiAgICB9KQogIH0KCiAgZnMubGNobW9kU3luYyA9IGZ1bmN0aW9uIChwYXRoLCBtb2RlKSB7CiAgICB2YXIgZmQgPSBmcy5vcGVuU3luYyhwYXRoLCBjb25zdGFudHMuT19XUk9OTFkgfCBjb25zdGFudHMuT19TWU1MSU5LLCBtb2RlKQoKICAgIC8vIHByZWZlciB0byByZXR1cm4gdGhlIGNobW9kIGVycm9yLCBpZiBvbmUgb2NjdXJzLAogICAgLy8gYnV0IHN0aWxsIHRyeSB0byBjbG9zZSwgYW5kIHJlcG9ydCBjbG9zaW5nIGVycm9ycyBpZiB0aGV5IG9jY3VyLgogICAgdmFyIHRocmV3ID0gdHJ1ZQogICAgdmFyIHJldAogICAgdHJ5IHsKICAgICAgcmV0ID0gZnMuZmNobW9kU3luYyhmZCwgbW9kZSkKICAgICAgdGhyZXcgPSBmYWxzZQogICAgfSBmaW5hbGx5IHsKICAgICAgaWYgKHRocmV3KSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZzLmNsb3NlU3luYyhmZCkKICAgICAgICB9IGNhdGNoIChlcikge30KICAgICAgfSBlbHNlIHsKICAgICAgICBmcy5jbG9zZVN5bmMoZmQpCiAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXQKICB9Cn0KCmZ1bmN0aW9uIHBhdGNoTHV0aW1lcyAoZnMpIHsKICBpZiAoY29uc3RhbnRzLmhhc093blByb3BlcnR5KCJPX1NZTUxJTksiKSkgewogICAgZnMubHV0aW1lcyA9IGZ1bmN0aW9uIChwYXRoLCBhdCwgbXQsIGNiKSB7CiAgICAgIGZzLm9wZW4ocGF0aCwgY29uc3RhbnRzLk9fU1lNTElOSywgZnVuY3Rpb24gKGVyLCBmZCkgewogICAgICAgIGlmIChlcikgewogICAgICAgICAgaWYgKGNiKSBjYihlcikKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBmcy5mdXRpbWVzKGZkLCBhdCwgbXQsIGZ1bmN0aW9uIChlcikgewogICAgICAgICAgZnMuY2xvc2UoZmQsIGZ1bmN0aW9uIChlcjIpIHsKICAgICAgICAgICAgaWYgKGNiKSBjYihlciB8fCBlcjIpCiAgICAgICAgICB9KQogICAgICAgIH0pCiAgICAgIH0pCiAgICB9CgogICAgZnMubHV0aW1lc1N5bmMgPSBmdW5jdGlvbiAocGF0aCwgYXQsIG10KSB7CiAgICAgIHZhciBmZCA9IGZzLm9wZW5TeW5jKHBhdGgsIGNvbnN0YW50cy5PX1NZTUxJTkspCiAgICAgIHZhciByZXQKICAgICAgdmFyIHRocmV3ID0gdHJ1ZQogICAgICB0cnkgewogICAgICAgIHJldCA9IGZzLmZ1dGltZXNTeW5jKGZkLCBhdCwgbXQpCiAgICAgICAgdGhyZXcgPSBmYWxzZQogICAgICB9IGZpbmFsbHkgewogICAgICAgIGlmICh0aHJldykgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZnMuY2xvc2VTeW5jKGZkKQogICAgICAgICAgfSBjYXRjaCAoZXIpIHt9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGZzLmNsb3NlU3luYyhmZCkKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJldAogICAgfQoKICB9IGVsc2UgewogICAgZnMubHV0aW1lcyA9IGZ1bmN0aW9uIChfYSwgX2IsIF9jLCBjYikgeyBpZiAoY2IpIHByb2Nlc3MubmV4dFRpY2soY2IpIH0KICAgIGZzLmx1dGltZXNTeW5jID0gZnVuY3Rpb24gKCkge30KICB9Cn0KCmZ1bmN0aW9uIGNobW9kRml4IChvcmlnKSB7CiAgaWYgKCFvcmlnKSByZXR1cm4gb3JpZwogIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBtb2RlLCBjYikgewogICAgcmV0dXJuIG9yaWcuY2FsbChmcywgdGFyZ2V0LCBtb2RlLCBmdW5jdGlvbiAoZXIpIHsKICAgICAgaWYgKGNob3duRXJPayhlcikpIGVyID0gbnVsbAogICAgICBpZiAoY2IpIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgIH0pCiAgfQp9CgpmdW5jdGlvbiBjaG1vZEZpeFN5bmMgKG9yaWcpIHsKICBpZiAoIW9yaWcpIHJldHVybiBvcmlnCiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG1vZGUpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiBvcmlnLmNhbGwoZnMsIHRhcmdldCwgbW9kZSkKICAgIH0gY2F0Y2ggKGVyKSB7CiAgICAgIGlmICghY2hvd25Fck9rKGVyKSkgdGhyb3cgZXIKICAgIH0KICB9Cn0KCgpmdW5jdGlvbiBjaG93bkZpeCAob3JpZykgewogIGlmICghb3JpZykgcmV0dXJuIG9yaWcKICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgdWlkLCBnaWQsIGNiKSB7CiAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIHVpZCwgZ2lkLCBmdW5jdGlvbiAoZXIpIHsKICAgICAgaWYgKGNob3duRXJPayhlcikpIGVyID0gbnVsbAogICAgICBpZiAoY2IpIGNiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgIH0pCiAgfQp9CgpmdW5jdGlvbiBjaG93bkZpeFN5bmMgKG9yaWcpIHsKICBpZiAoIW9yaWcpIHJldHVybiBvcmlnCiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHVpZCwgZ2lkKSB7CiAgICB0cnkgewogICAgICByZXR1cm4gb3JpZy5jYWxsKGZzLCB0YXJnZXQsIHVpZCwgZ2lkKQogICAgfSBjYXRjaCAoZXIpIHsKICAgICAgaWYgKCFjaG93bkVyT2soZXIpKSB0aHJvdyBlcgogICAgfQogIH0KfQoKLy8gRU5PU1lTIG1lYW5zIHRoYXQgdGhlIGZzIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgb3AuIEp1c3QgaWdub3JlCi8vIHRoYXQsIGJlY2F1c2UgaXQgZG9lc24ndCBtYXR0ZXIuCi8vCi8vIGlmIHRoZXJlJ3Mgbm8gZ2V0dWlkLCBvciBpZiBnZXR1aWQoKSBpcyBzb21ldGhpbmcgb3RoZXIKLy8gdGhhbiAwLCBhbmQgdGhlIGVycm9yIGlzIEVJTlZBTCBvciBFUEVSTSwgdGhlbiBqdXN0IGlnbm9yZQovLyBpdC4KLy8KLy8gVGhpcyBzcGVjaWZpYyBjYXNlIGlzIGEgc2lsZW50IGZhaWx1cmUgaW4gY3AsIGluc3RhbGwsIHRhciwKLy8gYW5kIG1vc3Qgb3RoZXIgdW5peCB0b29scyB0aGF0IG1hbmFnZSBwZXJtaXNzaW9ucy4KLy8KLy8gV2hlbiBydW5uaW5nIGFzIHJvb3QsIG9yIGlmIG90aGVyIHR5cGVzIG9mIGVycm9ycyBhcmUKLy8gZW5jb3VudGVyZWQsIHRoZW4gaXQncyBzdHJpY3QuCmZ1bmN0aW9uIGNob3duRXJPayAoZXIpIHsKICBpZiAoIWVyKQogICAgcmV0dXJuIHRydWUKCiAgaWYgKGVyLmNvZGUgPT09ICJFTk9TWVMiKQogICAgcmV0dXJuIHRydWUKCiAgdmFyIG5vbnJvb3QgPSAhcHJvY2Vzcy5nZXR1aWQgfHwgcHJvY2Vzcy5nZXR1aWQoKSAhPT0gMAogIGlmIChub25yb290KSB7CiAgICBpZiAoZXIuY29kZSA9PT0gIkVJTlZBTCIgfHwgZXIuY29kZSA9PT0gIkVQRVJNIikKICAgICAgcmV0dXJuIHRydWUKICB9CgogIHJldHVybiBmYWxzZQp9Cgp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKfSx7Ii4vZnMuanMiOjEwLCJfcHJvY2VzcyI6MjMsImNvbnN0YW50cyI6N31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKICB2YXIgZSwgbQogIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEKICB2YXIgZUJpYXMgPSBlTWF4ID4+IDEKICB2YXIgbkJpdHMgPSAtNwogIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDAKICB2YXIgZCA9IGlzTEUgPyAtMSA6IDEKICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXQoKICBpICs9IGQKCiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSkKICBzID4+PSAoLW5CaXRzKQogIG5CaXRzICs9IGVMZW4KICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fQoKICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKQogIGUgPj49ICgtbkJpdHMpCiAgbkJpdHMgKz0gbUxlbgogIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgogIGlmIChlID09PSAwKSB7CiAgICBlID0gMSAtIGVCaWFzCiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7CiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSkKICB9IGVsc2UgewogICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKQogICAgZSA9IGUgLSBlQmlhcwogIH0KICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKQp9CgpleHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7CiAgdmFyIGUsIG0sIGMKICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMQogIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxCiAgdmFyIGVCaWFzID0gZU1heCA+PiAxCiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKQogIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSkKICB2YXIgZCA9IGlzTEUgPyAxIDogLTEKICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMAoKICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKQoKICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkgewogICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwCiAgICBlID0gZU1heAogIH0gZWxzZSB7CiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMikKICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHsKICAgICAgZS0tCiAgICAgIGMgKj0gMgogICAgfQogICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7CiAgICAgIHZhbHVlICs9IHJ0IC8gYwogICAgfSBlbHNlIHsKICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpCiAgICB9CiAgICBpZiAodmFsdWUgKiBjID49IDIpIHsKICAgICAgZSsrCiAgICAgIGMgLz0gMgogICAgfQoKICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkgewogICAgICBtID0gMAogICAgICBlID0gZU1heAogICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkgewogICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbikKICAgICAgZSA9IGUgKyBlQmlhcwogICAgfSBlbHNlIHsKICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pCiAgICAgIGUgPSAwCiAgICB9CiAgfQoKICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fQoKICBlID0gKGUgPDwgbUxlbikgfCBtCiAgZUxlbiArPSBtTGVuCiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fQoKICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjgKfQoKfSx7fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKioKICogQHByZXNlcnZlCiAqIEpTIEltcGxlbWVudGF0aW9uIG9mIGluY3JlbWVudGFsIE11cm11ckhhc2gzIChyMTUwKSAoYXMgb2YgTWF5IDEwLCAyMDEzKQogKgogKiBAYXV0aG9yIDxhIGhyZWY9Im1haWx0bzpqZW5zeXRAZ21haWwuY29tIj5KZW5zIFRheWxvcjwvYT4KICogQHNlZSBodHRwOi8vZ2l0aHViLmNvbS9ob21lYnJld2luZy9icmF1aGF1cy1kaWZmCiAqIEBhdXRob3IgPGEgaHJlZj0ibWFpbHRvOmdhcnkuY291cnRAZ21haWwuY29tIj5HYXJ5IENvdXJ0PC9hPgogKiBAc2VlIGh0dHA6Ly9naXRodWIuY29tL2dhcnljb3VydC9tdXJtdXJoYXNoLWpzCiAqIEBhdXRob3IgPGEgaHJlZj0ibWFpbHRvOmFhcHBsZWJ5QGdtYWlsLmNvbSI+QXVzdGluIEFwcGxlYnk8L2E+CiAqIEBzZWUgaHR0cDovL3NpdGVzLmdvb2dsZS5jb20vc2l0ZS9tdXJtdXJoYXNoLwogKi8KKGZ1bmN0aW9uKCl7CiAgICB2YXIgY2FjaGU7CgogICAgLy8gQ2FsbCB0aGlzIGZ1bmN0aW9uIHdpdGhvdXQgYG5ld2AgdG8gdXNlIHRoZSBjYWNoZWQgb2JqZWN0IChnb29kIGZvcgogICAgLy8gc2luZ2xlLXRocmVhZGVkIGVudmlyb25tZW50cyksIG9yIHdpdGggYG5ld2AgdG8gY3JlYXRlIGEgbmV3IG9iamVjdC4KICAgIC8vCiAgICAvLyBAcGFyYW0ge3N0cmluZ30ga2V5IEEgVVRGLTE2IG9yIEFTQ0lJIHN0cmluZwogICAgLy8gQHBhcmFtIHtudW1iZXJ9IHNlZWQgQW4gb3B0aW9uYWwgcG9zaXRpdmUgaW50ZWdlcgogICAgLy8gQHJldHVybiB7b2JqZWN0fSBBIE11cm11ckhhc2gzIG9iamVjdCBmb3IgaW5jcmVtZW50YWwgaGFzaGluZwogICAgZnVuY3Rpb24gTXVybXVySGFzaDMoa2V5LCBzZWVkKSB7CiAgICAgICAgdmFyIG0gPSB0aGlzIGluc3RhbmNlb2YgTXVybXVySGFzaDMgPyB0aGlzIDogY2FjaGU7CiAgICAgICAgbS5yZXNldChzZWVkKQogICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkubGVuZ3RoID4gMCkgewogICAgICAgICAgICBtLmhhc2goa2V5KTsKICAgICAgICB9CgogICAgICAgIGlmIChtICE9PSB0aGlzKSB7CiAgICAgICAgICAgIHJldHVybiBtOwogICAgICAgIH0KICAgIH07CgogICAgLy8gSW5jcmVtZW50YWxseSBhZGQgYSBzdHJpbmcgdG8gdGhpcyBoYXNoCiAgICAvLwogICAgLy8gQHBhcmFtIHtzdHJpbmd9IGtleSBBIFVURi0xNiBvciBBU0NJSSBzdHJpbmcKICAgIC8vIEByZXR1cm4ge29iamVjdH0gdGhpcwogICAgTXVybXVySGFzaDMucHJvdG90eXBlLmhhc2ggPSBmdW5jdGlvbihrZXkpIHsKICAgICAgICB2YXIgaDEsIGsxLCBpLCB0b3AsIGxlbjsKCiAgICAgICAgbGVuID0ga2V5Lmxlbmd0aDsKICAgICAgICB0aGlzLmxlbiArPSBsZW47CgogICAgICAgIGsxID0gdGhpcy5rMTsKICAgICAgICBpID0gMDsKICAgICAgICBzd2l0Y2ggKHRoaXMucmVtKSB7CiAgICAgICAgICAgIGNhc2UgMDogazEgXj0gbGVuID4gaSA/IChrZXkuY2hhckNvZGVBdChpKyspICYgMHhmZmZmKSA6IDA7CiAgICAgICAgICAgIGNhc2UgMTogazEgXj0gbGVuID4gaSA/IChrZXkuY2hhckNvZGVBdChpKyspICYgMHhmZmZmKSA8PCA4IDogMDsKICAgICAgICAgICAgY2FzZSAyOiBrMSBePSBsZW4gPiBpID8gKGtleS5jaGFyQ29kZUF0KGkrKykgJiAweGZmZmYpIDw8IDE2IDogMDsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgazEgXj0gbGVuID4gaSA/IChrZXkuY2hhckNvZGVBdChpKSAmIDB4ZmYpIDw8IDI0IDogMDsKICAgICAgICAgICAgICAgIGsxIF49IGxlbiA+IGkgPyAoa2V5LmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmYwMCkgPj4gOCA6IDA7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnJlbSA9IChsZW4gKyB0aGlzLnJlbSkgJiAzOyAvLyAmIDMgaXMgc2FtZSBhcyAlIDQKICAgICAgICBsZW4gLT0gdGhpcy5yZW07CiAgICAgICAgaWYgKGxlbiA+IDApIHsKICAgICAgICAgICAgaDEgPSB0aGlzLmgxOwogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgazEgPSAoazEgKiAweDJkNTEgKyAoazEgJiAweGZmZmYpICogMHhjYzllMDAwMCkgJiAweGZmZmZmZmZmOwogICAgICAgICAgICAgICAgazEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7CiAgICAgICAgICAgICAgICBrMSA9IChrMSAqIDB4MzU5MyArIChrMSAmIDB4ZmZmZikgKiAweDFiODcwMDAwKSAmIDB4ZmZmZmZmZmY7CgogICAgICAgICAgICAgICAgaDEgXj0gazE7CiAgICAgICAgICAgICAgICBoMSA9IChoMSA8PCAxMykgfCAoaDEgPj4+IDE5KTsKICAgICAgICAgICAgICAgIGgxID0gKGgxICogNSArIDB4ZTY1NDZiNjQpICYgMHhmZmZmZmZmZjsKCiAgICAgICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBrMSA9ICgoa2V5LmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmZmZikpIF4KICAgICAgICAgICAgICAgICAgICAgKChrZXkuY2hhckNvZGVBdChpKyspICYgMHhmZmZmKSA8PCA4KSBeCiAgICAgICAgICAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoaSsrKSAmIDB4ZmZmZikgPDwgMTYpOwogICAgICAgICAgICAgICAgdG9wID0ga2V5LmNoYXJDb2RlQXQoaSsrKTsKICAgICAgICAgICAgICAgIGsxIF49ICgodG9wICYgMHhmZikgPDwgMjQpIF4KICAgICAgICAgICAgICAgICAgICAgICgodG9wICYgMHhmZjAwKSA+PiA4KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgazEgPSAwOwogICAgICAgICAgICBzd2l0Y2ggKHRoaXMucmVtKSB7CiAgICAgICAgICAgICAgICBjYXNlIDM6IGsxIF49IChrZXkuY2hhckNvZGVBdChpICsgMikgJiAweGZmZmYpIDw8IDE2OwogICAgICAgICAgICAgICAgY2FzZSAyOiBrMSBePSAoa2V5LmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZmZmKSA8PCA4OwogICAgICAgICAgICAgICAgY2FzZSAxOiBrMSBePSAoa2V5LmNoYXJDb2RlQXQoaSkgJiAweGZmZmYpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aGlzLmgxID0gaDE7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmsxID0gazE7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIC8vIEdldCB0aGUgcmVzdWx0IG9mIHRoaXMgaGFzaAogICAgLy8KICAgIC8vIEByZXR1cm4ge251bWJlcn0gVGhlIDMyLWJpdCBoYXNoCiAgICBNdXJtdXJIYXNoMy5wcm90b3R5cGUucmVzdWx0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGsxLCBoMTsKICAgICAgICAKICAgICAgICBrMSA9IHRoaXMuazE7CiAgICAgICAgaDEgPSB0aGlzLmgxOwoKICAgICAgICBpZiAoazEgPiAwKSB7CiAgICAgICAgICAgIGsxID0gKGsxICogMHgyZDUxICsgKGsxICYgMHhmZmZmKSAqIDB4Y2M5ZTAwMDApICYgMHhmZmZmZmZmZjsKICAgICAgICAgICAgazEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7CiAgICAgICAgICAgIGsxID0gKGsxICogMHgzNTkzICsgKGsxICYgMHhmZmZmKSAqIDB4MWI4NzAwMDApICYgMHhmZmZmZmZmZjsKICAgICAgICAgICAgaDEgXj0gazE7CiAgICAgICAgfQoKICAgICAgICBoMSBePSB0aGlzLmxlbjsKCiAgICAgICAgaDEgXj0gaDEgPj4+IDE2OwogICAgICAgIGgxID0gKGgxICogMHhjYTZiICsgKGgxICYgMHhmZmZmKSAqIDB4ODVlYjAwMDApICYgMHhmZmZmZmZmZjsKICAgICAgICBoMSBePSBoMSA+Pj4gMTM7CiAgICAgICAgaDEgPSAoaDEgKiAweGFlMzUgKyAoaDEgJiAweGZmZmYpICogMHhjMmIyMDAwMCkgJiAweGZmZmZmZmZmOwogICAgICAgIGgxIF49IGgxID4+PiAxNjsKCiAgICAgICAgcmV0dXJuIGgxID4+PiAwOwogICAgfTsKCiAgICAvLyBSZXNldCB0aGUgaGFzaCBvYmplY3QgZm9yIHJldXNlCiAgICAvLwogICAgLy8gQHBhcmFtIHtudW1iZXJ9IHNlZWQgQW4gb3B0aW9uYWwgcG9zaXRpdmUgaW50ZWdlcgogICAgTXVybXVySGFzaDMucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oc2VlZCkgewogICAgICAgIHRoaXMuaDEgPSB0eXBlb2Ygc2VlZCA9PT0gJ251bWJlcicgPyBzZWVkIDogMDsKICAgICAgICB0aGlzLnJlbSA9IHRoaXMuazEgPSB0aGlzLmxlbiA9IDA7CiAgICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKICAgIC8vIEEgY2FjaGVkIG9iamVjdCB0byB1c2UuIFRoaXMgY2FuIGJlIHNhZmVseSB1c2VkIGlmIHlvdSdyZSBpbiBhIHNpbmdsZS0KICAgIC8vIHRocmVhZGVkIGVudmlyb25tZW50LCBvdGhlcndpc2UgeW91IG5lZWQgdG8gY3JlYXRlIG5ldyBoYXNoZXMgdG8gdXNlLgogICAgY2FjaGUgPSBuZXcgTXVybXVySGFzaDMoKTsKCiAgICBpZiAodHlwZW9mKG1vZHVsZSkgIT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IE11cm11ckhhc2gzOwogICAgfSBlbHNlIHsKICAgICAgICB0aGlzLk11cm11ckhhc2gzID0gTXVybXVySGFzaDM7CiAgICB9Cn0oKSk7Cgp9LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykgewogIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yCiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwgewogICAgICBjb25zdHJ1Y3RvcjogewogICAgICAgIHZhbHVlOiBjdG9yLAogICAgICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICB9CiAgICB9KTsKICB9Owp9IGVsc2UgewogIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzCiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yCiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fQogICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZQogICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKQogICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yCiAgfQp9Cgp9LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qIQogKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyCiAqCiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPgogKiBAbGljZW5zZSAgTUlUCiAqLwoKLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZwovLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpCn0KCmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHsKICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKQp9CgovLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LgpmdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikgewogIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKQp9Cgp9LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nOwoKbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7Cn07Cgp9LHt9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7Ci8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMC4wCihmdW5jdGlvbigpIHsKICB2YXIgSlNPTlN0b3JhZ2UsIEtFWV9GT1JfRU1QVFlfU1RSSU5HLCBMb2NhbFN0b3JhZ2UsIE1ldGFLZXksIFFVT1RBX0VYQ0VFREVEX0VSUiwgU3RvcmFnZUV2ZW50LCBfZW1wdHlEaXJlY3RvcnksIF9lc2NhcGVLZXksIF9ybSwgY3JlYXRlTWFwLCBldmVudHMsIGZzLCBwYXRoLCB3cml0ZVN5bmMsCiAgICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sCiAgICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7CgogIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7CgogIGZzID0gcmVxdWlyZSgnZnMnKTsKCiAgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7CgogIHdyaXRlU3luYyA9IHJlcXVpcmUoJ3dyaXRlLWZpbGUtYXRvbWljJykuc3luYzsKCiAgS0VZX0ZPUl9FTVBUWV9TVFJJTkcgPSAnLS0tLkVNUFRZX1NUUklORy4tLS0nOwoKICBfZW1wdHlEaXJlY3RvcnkgPSBmdW5jdGlvbih0YXJnZXQpIHsKICAgIHZhciBpLCBsZW4sIHAsIHJlZiwgcmVzdWx0czsKICAgIHJlZiA9IGZzLnJlYWRkaXJTeW5jKHRhcmdldCk7CiAgICByZXN1bHRzID0gW107CiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgcCA9IHJlZltpXTsKICAgICAgcmVzdWx0cy5wdXNoKF9ybShwYXRoLmpvaW4odGFyZ2V0LCBwKSkpOwogICAgfQogICAgcmV0dXJuIHJlc3VsdHM7CiAgfTsKCiAgX3JtID0gZnVuY3Rpb24odGFyZ2V0KSB7CiAgICBpZiAoZnMuc3RhdFN5bmModGFyZ2V0KS5pc0RpcmVjdG9yeSgpKSB7CiAgICAgIF9lbXB0eURpcmVjdG9yeSh0YXJnZXQpOwogICAgICByZXR1cm4gZnMucm1kaXJTeW5jKHRhcmdldCk7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gZnMudW5saW5rU3luYyh0YXJnZXQpOwogICAgfQogIH07CgogIF9lc2NhcGVLZXkgPSBmdW5jdGlvbihrZXkpIHsKICAgIHZhciBuZXdLZXk7CiAgICBpZiAoa2V5ID09PSAnJykgewogICAgICBuZXdLZXkgPSBLRVlfRk9SX0VNUFRZX1NUUklORzsKICAgIH0gZWxzZSB7CiAgICAgIG5ld0tleSA9IGtleS50b1N0cmluZygpOwogICAgfQogICAgcmV0dXJuIG5ld0tleTsKICB9OwoKICBRVU9UQV9FWENFRURFRF9FUlIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykgewogICAgZXh0ZW5kKFFVT1RBX0VYQ0VFREVEX0VSUiwgc3VwZXJDbGFzcyk7CgogICAgZnVuY3Rpb24gUVVPVEFfRVhDRUVERURfRVJSKG1lc3NhZ2UpIHsKICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6ICdVbmtub3duIGVycm9yLic7CiAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSAhPSBudWxsKSB7CiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7CiAgICAgIH0KICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lOwogICAgfQoKICAgIFFVT1RBX0VYQ0VFREVEX0VSUi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMubmFtZSArICI6ICIgKyB0aGlzLm1lc3NhZ2U7CiAgICB9OwoKICAgIHJldHVybiBRVU9UQV9FWENFRURFRF9FUlI7CgogIH0pKEVycm9yKTsKCiAgU3RvcmFnZUV2ZW50ID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gU3RvcmFnZUV2ZW50KGtleTEsIG9sZFZhbHVlMSwgbmV3VmFsdWUxLCB1cmwsIHN0b3JhZ2VBcmVhKSB7CiAgICAgIHRoaXMua2V5ID0ga2V5MTsKICAgICAgdGhpcy5vbGRWYWx1ZSA9IG9sZFZhbHVlMTsKICAgICAgdGhpcy5uZXdWYWx1ZSA9IG5ld1ZhbHVlMTsKICAgICAgdGhpcy51cmwgPSB1cmw7CiAgICAgIHRoaXMuc3RvcmFnZUFyZWEgPSBzdG9yYWdlQXJlYSAhPSBudWxsID8gc3RvcmFnZUFyZWEgOiAnbG9jYWxTdG9yYWdlJzsKICAgIH0KCiAgICByZXR1cm4gU3RvcmFnZUV2ZW50OwoKICB9KSgpOwoKICBNZXRhS2V5ID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gTWV0YUtleShrZXkxLCBpbmRleDEpIHsKICAgICAgdGhpcy5rZXkgPSBrZXkxOwogICAgICB0aGlzLmluZGV4ID0gaW5kZXgxOwogICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWV0YUtleSkpIHsKICAgICAgICByZXR1cm4gbmV3IE1ldGFLZXkodGhpcy5rZXksIHRoaXMuaW5kZXgpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIE1ldGFLZXk7CgogIH0pKCk7CgogIGNyZWF0ZU1hcCA9IGZ1bmN0aW9uKCkgewogICAgdmFyIE1hcDsKICAgIE1hcCA9IGZ1bmN0aW9uKCkge307CiAgICBNYXAucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHJldHVybiBuZXcgTWFwKCk7CiAgfTsKCiAgTG9jYWxTdG9yYWdlID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHsKICAgIHZhciBpbnN0YW5jZU1hcDsKCiAgICBleHRlbmQoTG9jYWxTdG9yYWdlLCBzdXBlckNsYXNzKTsKCiAgICBpbnN0YW5jZU1hcCA9IHt9OwoKICAgIGZ1bmN0aW9uIExvY2FsU3RvcmFnZShfbG9jYXRpb24sIHF1b3RhKSB7CiAgICAgIHRoaXMuX2xvY2F0aW9uID0gX2xvY2F0aW9uOwogICAgICB0aGlzLnF1b3RhID0gcXVvdGEgIT0gbnVsbCA/IHF1b3RhIDogNSAqIDEwMjQgKiAxMDI0OwogICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTG9jYWxTdG9yYWdlKSkgewogICAgICAgIHJldHVybiBuZXcgTG9jYWxTdG9yYWdlKHRoaXMuX2xvY2F0aW9uLCB0aGlzLnF1b3RhKTsKICAgICAgfQogICAgICB0aGlzLl9sb2NhdGlvbiA9IHBhdGgucmVzb2x2ZSh0aGlzLl9sb2NhdGlvbik7CiAgICAgIGlmIChpbnN0YW5jZU1hcFt0aGlzLl9sb2NhdGlvbl0gIT0gbnVsbCkgewogICAgICAgIHJldHVybiBpbnN0YW5jZU1hcFt0aGlzLl9sb2NhdGlvbl07CiAgICAgIH0KICAgICAgdGhpcy5sZW5ndGggPSAwOwogICAgICB0aGlzLl9ieXRlc0luVXNlID0gMDsKICAgICAgdGhpcy5fa2V5cyA9IFtdOwogICAgICB0aGlzLl9tZXRhS2V5TWFwID0gY3JlYXRlTWFwKCk7CiAgICAgIHRoaXMuX2V2ZW50VXJsID0gInBpZDoiICsgcHJvY2Vzcy5waWQ7CiAgICAgIHRoaXMuX2luaXQoKTsKICAgICAgdGhpcy5fUVVPVEFfRVhDRUVERURfRVJSID0gUVVPVEFfRVhDRUVERURfRVJSOwogICAgICBpbnN0YW5jZU1hcFt0aGlzLl9sb2NhdGlvbl0gPSB0aGlzOwogICAgICByZXR1cm4gaW5zdGFuY2VNYXBbdGhpcy5fbG9jYXRpb25dOwogICAgfQoKICAgIExvY2FsU3RvcmFnZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIF9NZXRhS2V5LCBfZGVjb2RlZEtleSwgX2tleXMsIGVycm9yLCBpLCBpbmRleCwgaywgbGVuLCBzdGF0OwogICAgICB0cnkgewogICAgICAgIHN0YXQgPSBmcy5zdGF0U3luYyh0aGlzLl9sb2NhdGlvbik7CiAgICAgICAgaWYgKChzdGF0ICE9IG51bGwpICYmICFzdGF0LmlzRGlyZWN0b3J5KCkpIHsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiQSBmaWxlIGV4aXN0cyBhdCB0aGUgbG9jYXRpb24gJyIgKyB0aGlzLl9sb2NhdGlvbiArICInIHdoZW4gdHJ5aW5nIHRvIGNyZWF0ZS9vcGVuIGxvY2FsU3RvcmFnZSIpOwogICAgICAgIH0KICAgICAgICB0aGlzLl9ieXRlc0luVXNlID0gMDsKICAgICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgICAgX2tleXMgPSBmcy5yZWFkZGlyU3luYyh0aGlzLl9sb2NhdGlvbik7CiAgICAgICAgZm9yIChpbmRleCA9IGkgPSAwLCBsZW4gPSBfa2V5cy5sZW5ndGg7IGkgPCBsZW47IGluZGV4ID0gKytpKSB7CiAgICAgICAgICBrID0gX2tleXNbaW5kZXhdOwogICAgICAgICAgX2RlY29kZWRLZXkgPSBkZWNvZGVVUklDb21wb25lbnQoayk7CiAgICAgICAgICB0aGlzLl9rZXlzLnB1c2goX2RlY29kZWRLZXkpOwogICAgICAgICAgX01ldGFLZXkgPSBuZXcgTWV0YUtleShrLCBpbmRleCk7CiAgICAgICAgICB0aGlzLl9tZXRhS2V5TWFwW19kZWNvZGVkS2V5XSA9IF9NZXRhS2V5OwogICAgICAgICAgc3RhdCA9IHRoaXMuX2dldFN0YXQoayk7CiAgICAgICAgICBpZiAoKHN0YXQgIT0gbnVsbCA/IHN0YXQuc2l6ZSA6IHZvaWQgMCkgIT0gbnVsbCkgewogICAgICAgICAgICBfTWV0YUtleS5zaXplID0gc3RhdC5zaXplOwogICAgICAgICAgICB0aGlzLl9ieXRlc0luVXNlICs9IHN0YXQuc2l6ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5sZW5ndGggPSBfa2V5cy5sZW5ndGg7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgZnMubWtkaXJTeW5jKHRoaXMuX2xvY2F0aW9uKTsKICAgICAgfQogICAgfTsKCiAgICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnNldEl0ZW0gPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgIHZhciBlbmNvZGVkS2V5LCBldm50LCBleGlzdHNCZWZvcmVTZXQsIGZpbGVuYW1lLCBoYXNMaXN0ZW5lcnMsIG1ldGFLZXksIG9sZExlbmd0aCwgb2xkVmFsdWUsIHZhbHVlU3RyaW5nLCB2YWx1ZVN0cmluZ0xlbmd0aDsKICAgICAgaGFzTGlzdGVuZXJzID0gZXZlbnRzLkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KHRoaXMsICdzdG9yYWdlJyk7CiAgICAgIG9sZFZhbHVlID0gbnVsbDsKICAgICAgaWYgKGhhc0xpc3RlbmVycykgewogICAgICAgIG9sZFZhbHVlID0gdGhpcy5nZXRJdGVtKGtleSk7CiAgICAgIH0KICAgICAga2V5ID0gX2VzY2FwZUtleShrZXkpOwogICAgICBlbmNvZGVkS2V5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7CiAgICAgIGZpbGVuYW1lID0gcGF0aC5qb2luKHRoaXMuX2xvY2F0aW9uLCBlbmNvZGVkS2V5KTsKICAgICAgdmFsdWVTdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpOwogICAgICB2YWx1ZVN0cmluZ0xlbmd0aCA9IHZhbHVlU3RyaW5nLmxlbmd0aDsKICAgICAgbWV0YUtleSA9IHRoaXMuX21ldGFLZXlNYXBba2V5XTsKICAgICAgZXhpc3RzQmVmb3JlU2V0ID0gISFtZXRhS2V5OwogICAgICBpZiAoZXhpc3RzQmVmb3JlU2V0KSB7CiAgICAgICAgb2xkTGVuZ3RoID0gbWV0YUtleS5zaXplOwogICAgICB9IGVsc2UgewogICAgICAgIG9sZExlbmd0aCA9IDA7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuX2J5dGVzSW5Vc2UgLSBvbGRMZW5ndGggKyB2YWx1ZVN0cmluZ0xlbmd0aCA+IHRoaXMucXVvdGEpIHsKICAgICAgICB0aHJvdyBuZXcgUVVPVEFfRVhDRUVERURfRVJSKCk7CiAgICAgIH0KICAgICAgd3JpdGVTeW5jKGZpbGVuYW1lLCB2YWx1ZVN0cmluZywgJ3V0ZjgnKTsKICAgICAgaWYgKCFleGlzdHNCZWZvcmVTZXQpIHsKICAgICAgICBtZXRhS2V5ID0gbmV3IE1ldGFLZXkoZW5jb2RlZEtleSwgKHRoaXMuX2tleXMucHVzaChrZXkpKSAtIDEpOwogICAgICAgIG1ldGFLZXkuc2l6ZSA9IHZhbHVlU3RyaW5nTGVuZ3RoOwogICAgICAgIHRoaXMuX21ldGFLZXlNYXBba2V5XSA9IG1ldGFLZXk7CiAgICAgICAgdGhpcy5sZW5ndGggKz0gMTsKICAgICAgICB0aGlzLl9ieXRlc0luVXNlICs9IHZhbHVlU3RyaW5nTGVuZ3RoOwogICAgICB9CiAgICAgIGlmIChoYXNMaXN0ZW5lcnMpIHsKICAgICAgICBldm50ID0gbmV3IFN0b3JhZ2VFdmVudChrZXksIG9sZFZhbHVlLCB2YWx1ZSwgdGhpcy5fZXZlbnRVcmwpOwogICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ3N0b3JhZ2UnLCBldm50KTsKICAgICAgfQogICAgfTsKCiAgICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLmdldEl0ZW0gPSBmdW5jdGlvbihrZXkpIHsKICAgICAgdmFyIGZpbGVuYW1lLCBtZXRhS2V5OwogICAgICBrZXkgPSBfZXNjYXBlS2V5KGtleSk7CiAgICAgIG1ldGFLZXkgPSB0aGlzLl9tZXRhS2V5TWFwW2tleV07CiAgICAgIGlmICghIW1ldGFLZXkpIHsKICAgICAgICBmaWxlbmFtZSA9IHBhdGguam9pbih0aGlzLl9sb2NhdGlvbiwgbWV0YUtleS5rZXkpOwogICAgICAgIHJldHVybiBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUsICd1dGY4Jyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH07CgogICAgTG9jYWxTdG9yYWdlLnByb3RvdHlwZS5fZ2V0U3RhdCA9IGZ1bmN0aW9uKGtleSkgewogICAgICB2YXIgZXJyb3IsIGZpbGVuYW1lOwogICAgICBrZXkgPSBfZXNjYXBlS2V5KGtleSk7CiAgICAgIGZpbGVuYW1lID0gcGF0aC5qb2luKHRoaXMuX2xvY2F0aW9uLCBlbmNvZGVVUklDb21wb25lbnQoa2V5KSk7CiAgICAgIHRyeSB7CiAgICAgICAgcmV0dXJuIGZzLnN0YXRTeW5jKGZpbGVuYW1lKTsKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfTsKCiAgICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihrZXkpIHsKICAgICAgdmFyIGV2bnQsIGZpbGVuYW1lLCBoYXNMaXN0ZW5lcnMsIGssIG1ldGEsIG1ldGFLZXksIG9sZFZhbHVlLCByZWYsIHY7CiAgICAgIGtleSA9IF9lc2NhcGVLZXkoa2V5KTsKICAgICAgbWV0YUtleSA9IHRoaXMuX21ldGFLZXlNYXBba2V5XTsKICAgICAgaWYgKCEhbWV0YUtleSkgewogICAgICAgIGhhc0xpc3RlbmVycyA9IGV2ZW50cy5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCh0aGlzLCAnc3RvcmFnZScpOwogICAgICAgIG9sZFZhbHVlID0gbnVsbDsKICAgICAgICBpZiAoaGFzTGlzdGVuZXJzKSB7CiAgICAgICAgICBvbGRWYWx1ZSA9IHRoaXMuZ2V0SXRlbShrZXkpOwogICAgICAgIH0KICAgICAgICBkZWxldGUgdGhpcy5fbWV0YUtleU1hcFtrZXldOwogICAgICAgIHRoaXMubGVuZ3RoIC09IDE7CiAgICAgICAgdGhpcy5fYnl0ZXNJblVzZSAtPSBtZXRhS2V5LnNpemU7CiAgICAgICAgZmlsZW5hbWUgPSBwYXRoLmpvaW4odGhpcy5fbG9jYXRpb24sIG1ldGFLZXkua2V5KTsKICAgICAgICB0aGlzLl9rZXlzLnNwbGljZShtZXRhS2V5LmluZGV4LCAxKTsKICAgICAgICByZWYgPSB0aGlzLl9tZXRhS2V5TWFwOwogICAgICAgIGZvciAoayBpbiByZWYpIHsKICAgICAgICAgIHYgPSByZWZba107CiAgICAgICAgICBtZXRhID0gdGhpcy5fbWV0YUtleU1hcFtrXTsKICAgICAgICAgIGlmIChtZXRhLmluZGV4ID4gbWV0YUtleS5pbmRleCkgewogICAgICAgICAgICBtZXRhLmluZGV4IC09IDE7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIF9ybShmaWxlbmFtZSk7CiAgICAgICAgaWYgKGhhc0xpc3RlbmVycykgewogICAgICAgICAgZXZudCA9IG5ldyBTdG9yYWdlRXZlbnQoa2V5LCBvbGRWYWx1ZSwgbnVsbCwgdGhpcy5fZXZlbnRVcmwpOwogICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnc3RvcmFnZScsIGV2bnQpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBMb2NhbFN0b3JhZ2UucHJvdG90eXBlLmtleSA9IGZ1bmN0aW9uKG4pIHsKICAgICAgcmV0dXJuIHRoaXMuX2tleXNbbl07CiAgICB9OwoKICAgIExvY2FsU3RvcmFnZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGV2bnQ7CiAgICAgIF9lbXB0eURpcmVjdG9yeSh0aGlzLl9sb2NhdGlvbik7CiAgICAgIHRoaXMuX21ldGFLZXlNYXAgPSBjcmVhdGVNYXAoKTsKICAgICAgdGhpcy5fa2V5cyA9IFtdOwogICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgIHRoaXMuX2J5dGVzSW5Vc2UgPSAwOwogICAgICBpZiAoZXZlbnRzLkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KHRoaXMsICdzdG9yYWdlJykpIHsKICAgICAgICBldm50ID0gbmV3IFN0b3JhZ2VFdmVudChudWxsLCBudWxsLCBudWxsLCB0aGlzLl9ldmVudFVybCk7CiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnc3RvcmFnZScsIGV2bnQpOwogICAgICB9CiAgICB9OwoKICAgIExvY2FsU3RvcmFnZS5wcm90b3R5cGUuX2dldEJ5dGVzSW5Vc2UgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuX2J5dGVzSW5Vc2U7CiAgICB9OwoKICAgIExvY2FsU3RvcmFnZS5wcm90b3R5cGUuX2RlbGV0ZUxvY2F0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgIGRlbGV0ZSBpbnN0YW5jZU1hcFt0aGlzLl9sb2NhdGlvbl07CiAgICAgIF9ybSh0aGlzLl9sb2NhdGlvbik7CiAgICAgIHRoaXMuX21ldGFLZXlNYXAgPSB7fTsKICAgICAgdGhpcy5fa2V5cyA9IFtdOwogICAgICB0aGlzLmxlbmd0aCA9IDA7CiAgICAgIHJldHVybiB0aGlzLl9ieXRlc0luVXNlID0gMDsKICAgIH07CgogICAgcmV0dXJuIExvY2FsU3RvcmFnZTsKCiAgfSkoZXZlbnRzLkV2ZW50RW1pdHRlcik7CgogIEpTT05TdG9yYWdlID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHsKICAgIGV4dGVuZChKU09OU3RvcmFnZSwgc3VwZXJDbGFzcyk7CgogICAgZnVuY3Rpb24gSlNPTlN0b3JhZ2UoKSB7CiAgICAgIHJldHVybiBKU09OU3RvcmFnZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICBKU09OU3RvcmFnZS5wcm90b3R5cGUuc2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgdmFyIG5ld1ZhbHVlOwogICAgICBuZXdWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTsKICAgICAgcmV0dXJuIEpTT05TdG9yYWdlLl9fc3VwZXJfXy5zZXRJdGVtLmNhbGwodGhpcywga2V5LCBuZXdWYWx1ZSk7CiAgICB9OwoKICAgIEpTT05TdG9yYWdlLnByb3RvdHlwZS5nZXRJdGVtID0gZnVuY3Rpb24oa2V5KSB7CiAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT05TdG9yYWdlLl9fc3VwZXJfXy5nZXRJdGVtLmNhbGwodGhpcywga2V5KSk7CiAgICB9OwoKICAgIHJldHVybiBKU09OU3RvcmFnZTsKCiAgfSkoTG9jYWxTdG9yYWdlKTsKCiAgZXhwb3J0cy5Mb2NhbFN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2U7CgogIGV4cG9ydHMuSlNPTlN0b3JhZ2UgPSBKU09OU3RvcmFnZTsKCiAgZXhwb3J0cy5RVU9UQV9FWENFRURFRF9FUlIgPSBRVU9UQV9FWENFRURFRF9FUlI7Cgp9KS5jYWxsKHRoaXMpOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCn0seyJfcHJvY2VzcyI6MjMsImV2ZW50cyI6OSwiZnMiOjUsInBhdGgiOjIxLCJ3cml0ZS1maWxlLWF0b21pYyI6NTZ9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qIQ0KICogT2JqZWN0Lm9ic2VydmUgcG9seWZpbGwgLSB2MC4yLjQNCiAqIGJ5IE1hc3NpbW8gQXJ0aXp6dSAoTWF4QXJ0MjUwMSkNCiAqDQogKiBodHRwczovL2dpdGh1Yi5jb20vTWF4QXJ0MjUwMS9vYmplY3Qtb2JzZXJ2ZQ0KICoNCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZQ0KICogU2VlIExJQ0VOU0UgZm9yIGRldGFpbHMNCiAqLw0KDQovLyBTb21lIHR5cGUgZGVmaW5pdGlvbnMNCi8qKg0KICogVGhpcyByZXByZXNlbnRzIHRoZSBkYXRhIHJlbGF0aXZlIHRvIGFuIG9ic2VydmVkIG9iamVjdA0KICogQHR5cGVkZWYgIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgT2JqZWN0RGF0YQ0KICogQHByb3BlcnR5IHtNYXA8SGFuZGxlciwgSGFuZGxlckRhdGE+fSAgaGFuZGxlcnMNCiAqIEBwcm9wZXJ0eSB7U3RyaW5nW119ICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMNCiAqIEBwcm9wZXJ0eSB7KltdfSAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcw0KICogQHByb3BlcnR5IHtEZXNjcmlwdG9yW119ICAgICAgICAgICAgICAgZGVzY3JpcHRvcnMNCiAqIEBwcm9wZXJ0eSB7Tm90aWZpZXJ9ICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyDQogKiBAcHJvcGVydHkge0Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICBmcm96ZW4NCiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gICAgICAgICAgICAgICAgICAgIGV4dGVuc2libGUNCiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgIHByb3RvDQogKi8NCi8qKg0KICogRnVuY3Rpb24gZGVmaW5pdGlvbiBvZiBhIGhhbmRsZXINCiAqIEBjYWxsYmFjayBIYW5kbGVyDQogKiBAcGFyYW0ge0NoYW5nZVJlY29yZFtdfSAgICAgICAgICAgICAgICBjaGFuZ2VzDQoqLw0KLyoqDQogKiBUaGlzIHJlcHJlc2VudHMgdGhlIGRhdGEgcmVsYXRpdmUgdG8gYW4gb2JzZXJ2ZWQgb2JqZWN0IGFuZCBvbmUgb2YgaXRzDQogKiBoYW5kbGVycw0KICogQHR5cGVkZWYgIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgSGFuZGxlckRhdGENCiAqIEBwcm9wZXJ0eSB7TWFwPE9iamVjdCwgT2JzZXJ2ZWREYXRhPn0gIG9ic2VydmVkDQogKiBAcHJvcGVydHkge0NoYW5nZVJlY29yZFtdfSAgICAgICAgICAgICBjaGFuZ2VSZWNvcmRzDQogKi8NCi8qKg0KICogQHR5cGVkZWYgIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgT2JzZXJ2ZWREYXRhDQogKiBAcHJvcGVydHkge1N0cmluZ1tdfSAgICAgICAgICAgICAgICAgICBhY2NlcHRMaXN0DQogKiBAcHJvcGVydHkge09iamVjdERhdGF9ICAgICAgICAgICAgICAgICBkYXRhDQoqLw0KLyoqDQogKiBUeXBlIGRlZmluaXRpb24gZm9yIGEgY2hhbmdlLiBBbnkgb3RoZXIgcHJvcGVydHkgY2FuIGJlIGFkZGVkIHVzaW5nDQogKiB0aGUgbm90aWZ5KCkgb3IgcGVyZm9ybUNoYW5nZSgpIG1ldGhvZHMgb2YgdGhlIG5vdGlmaWVyLg0KICogQHR5cGVkZWYgIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgQ2hhbmdlUmVjb3JkDQogKiBAcHJvcGVydHkge1N0cmluZ30gICAgICAgICAgICAgICAgICAgICB0eXBlDQogKiBAcHJvcGVydHkge09iamVjdH0gICAgICAgICAgICAgICAgICAgICBvYmplY3QNCiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgIFtuYW1lXQ0KICogQHByb3BlcnR5IHsqfSAgICAgICAgICAgICAgICAgICAgICAgICAgW29sZFZhbHVlXQ0KICogQHByb3BlcnR5IHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgW2luZGV4XQ0KICovDQovKioNCiAqIFR5cGUgZGVmaW5pdGlvbiBmb3IgYSBub3RpZmllciAod2hhdCBPYmplY3QuZ2V0Tm90aWZpZXIgcmV0dXJucykNCiAqIEB0eXBlZGVmICB7T2JqZWN0fSAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWVyDQogKiBAcHJvcGVydHkge0Z1bmN0aW9ufSAgICAgICAgICAgICAgICAgICBub3RpZnkNCiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259ICAgICAgICAgICAgICAgICAgIHBlcmZvcm1DaGFuZ2UNCiAqLw0KLyoqDQogKiBGdW5jdGlvbiBjYWxsZWQgd2l0aCBOb3RpZmllci5wZXJmb3JtQ2hhbmdlLiBJdCBtYXkgb3B0aW9uYWxseSByZXR1cm4gYQ0KICogQ2hhbmdlUmVjb3JkIHRoYXQgZ2V0cyBhdXRvbWF0aWNhbGx5IG5vdGlmaWVkLCBidXQgYHR5cGVgIGFuZCBgb2JqZWN0YA0KICogcHJvcGVydGllcyBhcmUgb3ZlcnJpZGRlbi4NCiAqIEBjYWxsYmFjayBQZXJmb3JtZXINCiAqIEByZXR1cm5zIHtDaGFuZ2VSZWNvcmR8dW5kZWZpbmVkfQ0KICovDQoNCk9iamVjdC5vYnNlcnZlIHx8IChmdW5jdGlvbihPLCBBLCByb290LCBfdW5kZWZpbmVkKSB7DQogICAgInVzZSBzdHJpY3QiOw0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBSZWxhdGVzIG9ic2VydmVkIG9iamVjdHMgYW5kIHRoZWlyIGRhdGENCiAgICAgICAgICogQHR5cGUge01hcDxPYmplY3QsIE9iamVjdERhdGF9DQogICAgICAgICAqLw0KICAgIHZhciBvYnNlcnZlZCwNCiAgICAgICAgLyoqDQogICAgICAgICAqIExpc3Qgb2YgaGFuZGxlcnMgYW5kIHRoZWlyIGRhdGENCiAgICAgICAgICogQHR5cGUge01hcDxIYW5kbGVyLCBNYXA8T2JqZWN0LCBIYW5kbGVyRGF0YT4+fQ0KICAgICAgICAgKi8NCiAgICAgICAgaGFuZGxlcnMsDQoNCiAgICAgICAgZGVmYXVsdEFjY2VwdExpc3QgPSBbICJhZGQiLCAidXBkYXRlIiwgImRlbGV0ZSIsICJyZWNvbmZpZ3VyZSIsICJzZXRQcm90b3R5cGUiLCAicHJldmVudEV4dGVuc2lvbnMiIF07DQoNCiAgICAvLyBGdW5jdGlvbnMgZm9yIGludGVybmFsIHVzYWdlDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIENoZWNrcyBpZiB0aGUgYXJndW1lbnQgaXMgYW4gQXJyYXkgb2JqZWN0LiBQb2x5ZmlsbHMgQXJyYXkuaXNBcnJheS4NCiAgICAgICAgICogQGZ1bmN0aW9uIGlzQXJyYXkNCiAgICAgICAgICogQHBhcmFtIHs/Kn0gb2JqZWN0DQogICAgICAgICAqIEByZXR1cm5zIHtCb29sZWFufQ0KICAgICAgICAgKi8NCiAgICB2YXIgaXNBcnJheSA9IEEuaXNBcnJheSB8fCAoZnVuY3Rpb24odG9TdHJpbmcpIHsNCiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiB0b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICJbb2JqZWN0IEFycmF5XSI7IH07DQogICAgICAgIH0pKE8ucHJvdG90eXBlLnRvU3RyaW5nKSwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gaXRlbSBpbiBhIGNvbGxlY3Rpb24sIG9yIC0xIGlmIG5vdCBmb3VuZC4NCiAgICAgICAgICogVXNlcyB0aGUgZ2VuZXJpYyBBcnJheS5pbmRleE9mIG9yIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGlmIGF2YWlsYWJsZS4NCiAgICAgICAgICogQGZ1bmN0aW9uIGluQXJyYXkNCiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkNCiAgICAgICAgICogQHBhcmFtIHsqfSBwaXZvdCAgICAgICAgICAgSXRlbSB0byBsb29rIGZvcg0KICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gW3N0YXJ0PTBdICBJbmRleCB0byBzdGFydCBmcm9tDQogICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9DQogICAgICAgICAqLw0KICAgICAgICBpbkFycmF5ID0gQS5wcm90b3R5cGUuaW5kZXhPZiA/IEEuaW5kZXhPZiB8fCBmdW5jdGlvbihhcnJheSwgcGl2b3QsIHN0YXJ0KSB7DQogICAgICAgICAgICByZXR1cm4gQS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBwaXZvdCwgc3RhcnQpOw0KICAgICAgICB9IDogZnVuY3Rpb24oYXJyYXksIHBpdm90LCBzdGFydCkgew0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0IHx8IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IHBpdm90KQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTsNCiAgICAgICAgICAgIHJldHVybiAtMTsNCiAgICAgICAgfSwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBNYXAsIG9yIGEgTWFwLWxpa2Ugb2JqZWN0IGlzIE1hcCBpcyBub3QNCiAgICAgICAgICogc3VwcG9ydGVkIG9yIGRvZXNuJ3Qgc3VwcG9ydCBmb3JFYWNoKCkNCiAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZU1hcA0KICAgICAgICAgKiBAcmV0dXJucyB7TWFwfQ0KICAgICAgICAgKi8NCiAgICAgICAgY3JlYXRlTWFwID0gcm9vdC5NYXAgPT09IF91bmRlZmluZWQgfHwgIU1hcC5wcm90b3R5cGUuZm9yRWFjaCA/IGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgLy8gTGlnaHR3ZWlnaHQgc2hpbSBvZiBNYXAuIExhY2tzIGNsZWFyKCksIGVudHJpZXMoKSwga2V5cygpIGFuZA0KICAgICAgICAgICAgLy8gdmFsdWVzKCkgKHRoZSBsYXN0IDMgbm90IHN1cHBvcnRlZCBieSBJRTExLCBzbyBjYW4ndCB1c2UgdGhlbSksDQogICAgICAgICAgICAvLyBpdCBkb2Vzbid0IGhhbmRsZSB0aGUgY29uc3RydWN0b3IncyBhcmd1bWVudCAobGlrZSBJRTExKSBhbmQgb2YNCiAgICAgICAgICAgIC8vIGNvdXJzZSBpdCBkb2Vzbid0IHN1cHBvcnQgZm9yLi4ub2YuDQogICAgICAgICAgICAvLyBDaHJvbWUgMzEtMzUgYW5kIEZpcmVmb3ggMTMtMjQgaGF2ZSBhIGJhc2ljIHN1cHBvcnQgb2YgTWFwLCBidXQNCiAgICAgICAgICAgIC8vIHRoZXkgbGFjayBmb3JFYWNoKCksIHNvIHRoZWlyIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyBiYWQgZm9yDQogICAgICAgICAgICAvLyB0aGlzIHBvbHlmaWxsLiAoQ2hyb21lIDM2KyBzdXBwb3J0cyBPYmplY3Qub2JzZXJ2ZS4pDQogICAgICAgICAgICB2YXIga2V5cyA9IFtdLCB2YWx1ZXMgPSBbXTsNCg0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICBzaXplOiAwLA0KICAgICAgICAgICAgICAgIGhhczogZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpbkFycmF5KGtleXMsIGtleSkgPiAtMTsgfSwNCiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVzW2luQXJyYXkoa2V5cywga2V5KV07IH0sDQogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBpID0gaW5BcnJheShrZXlzLCBrZXkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplKys7DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB2YWx1ZXNbaV0gPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICJkZWxldGUiOiBmdW5jdGlvbihrZXkpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpbkFycmF5KGtleXMsIGtleSk7DQogICAgICAgICAgICAgICAgICAgIGlmIChpID4gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGtleXMuc3BsaWNlKGksIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnNwbGljZShpLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZS0tOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICBmb3JFYWNoOiBmdW5jdGlvbihjYWxsYmFjay8qLCB0aGlzT2JqKi8pIHsNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChhcmd1bWVudHNbMV0sIHZhbHVlc1tpXSwga2V5c1tpXSwgdGhpcyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSA6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbmV3IE1hcCgpOyB9LA0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBTaW1wbGUgc2hpbSBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2hlbiBpcyBub3QgYXZhaWxhYmxlDQogICAgICAgICAqIE1pc3NlcyBjaGVja3Mgb24gb2JqZWN0LCBkb24ndCB1c2UgYXMgYSByZXBsYWNlbWVudCBvZiBPYmplY3Qua2V5cy9nZXRPd25Qcm9wZXJ0eU5hbWVzDQogICAgICAgICAqIEBmdW5jdGlvbiBnZXRQcm9wcw0KICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0DQogICAgICAgICAqIEByZXR1cm5zIHtTdHJpbmdbXX0NCiAgICAgICAgICovDQogICAgICAgIGdldFByb3BzID0gTy5nZXRPd25Qcm9wZXJ0eU5hbWVzID8gKGZ1bmN0aW9uKCkgew0KICAgICAgICAgICAgdmFyIGZ1bmMgPSBPLmdldE93blByb3BlcnR5TmFtZXM7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIGFyZ3VtZW50cy5jYWxsZWU7DQogICAgICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgICAgICAgLy8gU3RyaWN0IG1vZGUgaXMgc3VwcG9ydGVkDQoNCiAgICAgICAgICAgICAgICAvLyBJbiBzdHJpY3QgbW9kZSwgd2UgY2FuJ3QgYWNjZXNzIHRvICJhcmd1bWVudHMiLCAiY2FsbGVyIiBhbmQNCiAgICAgICAgICAgICAgICAvLyAiY2FsbGVlIiBwcm9wZXJ0aWVzIG9mIGZ1bmN0aW9ucy4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMNCiAgICAgICAgICAgICAgICAvLyByZXR1cm5zIFsgInByb3RvdHlwZSIsICJsZW5ndGgiLCAibmFtZSIgXSBpbiBGaXJlZm94OyBpdCByZXR1cm5zDQogICAgICAgICAgICAgICAgLy8gImNhbGxlciIgYW5kICJhcmd1bWVudHMiIHRvbyBpbiBDaHJvbWUgYW5kIGluIEludGVybmV0DQogICAgICAgICAgICAgICAgLy8gRXhwbG9yZXIsIHNvIHRob3NlIHZhbHVlcyBtdXN0IGJlIGZpbHRlcmVkLg0KICAgICAgICAgICAgICAgIHZhciBhdm9pZCA9IChmdW5jKGluQXJyYXkpLmpvaW4oIiAiKSArICIgIikucmVwbGFjZSgvcHJvdG90eXBlIHxsZW5ndGggfG5hbWUgL2csICIiKS5zbGljZSgwLCAtMSkuc3BsaXQoIiAiKTsNCiAgICAgICAgICAgICAgICBpZiAoYXZvaWQubGVuZ3RoKSBmdW5jID0gZnVuY3Rpb24ob2JqZWN0KSB7DQogICAgICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IE8uZ2V0T3duUHJvcGVydHlOYW1lcyhvYmplY3QpOw0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gImZ1bmN0aW9uIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqOyBpIDwgYXZvaWQubGVuZ3RoOykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGogPSBpbkFycmF5KHByb3BzLCBhdm9pZFtpKytdKSkgPiAtMSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuc3BsaWNlKGosIDEpOw0KDQogICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wczsNCiAgICAgICAgICAgICAgICB9Ow0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIGZ1bmM7DQogICAgICAgIH0pKCkgOiBmdW5jdGlvbihvYmplY3QpIHsNCiAgICAgICAgICAgIC8vIFBvb3ItbW91dGggdmVyc2lvbiB3aXRoIGZvci4uLmluIChJRTgtKQ0KICAgICAgICAgICAgdmFyIHByb3BzID0gW10sIHByb3AsIGhvcDsNCiAgICAgICAgICAgIGlmICgiaGFzT3duUHJvcGVydHkiIGluIG9iamVjdCkgew0KICAgICAgICAgICAgICAgIGZvciAocHJvcCBpbiBvYmplY3QpDQogICAgICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkocHJvcCkpDQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHByb3ApOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBob3AgPSBPLmhhc093blByb3BlcnR5Ow0KICAgICAgICAgICAgICAgIGZvciAocHJvcCBpbiBvYmplY3QpDQogICAgICAgICAgICAgICAgICAgIGlmIChob3AuY2FsbChvYmplY3QsIHByb3ApKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMucHVzaChwcm9wKTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgLy8gSW5zZXJ0aW5nIGEgY29tbW9uIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9mIGFycmF5cw0KICAgICAgICAgICAgaWYgKGlzQXJyYXkob2JqZWN0KSkNCiAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKCJsZW5ndGgiKTsNCg0KICAgICAgICAgICAgcmV0dXJuIHByb3BzOw0KICAgICAgICB9LA0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBSZXR1cm4gdGhlIHByb3RvdHlwZSBvZiB0aGUgb2JqZWN0Li4uIGlmIGRlZmluZWQuDQogICAgICAgICAqIEBmdW5jdGlvbiBnZXRQcm90b3R5cGUNCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fQ0KICAgICAgICAgKi8NCiAgICAgICAgZ2V0UHJvdG90eXBlID0gTy5nZXRQcm90b3R5cGVPZiwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogUmV0dXJuIHRoZSBkZXNjcmlwdG9yIG9mIHRoZSBvYmplY3QuLi4gaWYgZGVmaW5lZC4NCiAgICAgICAgICogSUU4IHN1cHBvcnRzIGEgKHVzZWxlc3MpIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgZm9yIERPTQ0KICAgICAgICAgKiBub2RlcyBvbmx5LCBzbyBkZWZpbmVQcm9wZXJ0aWVzIGlzIGNoZWNrZWQgaW5zdGVhZC4NCiAgICAgICAgICogQGZ1bmN0aW9uIGdldERlc2NyaXB0b3INCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkNCiAgICAgICAgICogQHJldHVybnMge0Rlc2NyaXB0b3J9DQogICAgICAgICAqLw0KICAgICAgICBnZXREZXNjcmlwdG9yID0gTy5kZWZpbmVQcm9wZXJ0aWVzICYmIE8uZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLA0KDQogICAgICAgIC8qKg0KICAgICAgICAgKiBTZXRzIHVwIHRoZSBuZXh0IGNoZWNrIGFuZCBkZWxpdmVyaW5nIGl0ZXJhdGlvbiwgdXNpbmcNCiAgICAgICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lIG9yIGEgKGNsb3NlKSBwb2x5ZmlsbC4NCiAgICAgICAgICogQGZ1bmN0aW9uIG5leHRGcmFtZQ0KICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jDQogICAgICAgICAqIEByZXR1cm5zIHtudW1iZXJ9DQogICAgICAgICAqLw0KICAgICAgICBuZXh0RnJhbWUgPSByb290LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByb290LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICB2YXIgaW5pdGlhbCA9ICtuZXcgRGF0ZSwNCiAgICAgICAgICAgICAgICBsYXN0ID0gaW5pdGlhbDsNCiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihmdW5jKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgICAgIGZ1bmMoKGxhc3QgPSArbmV3IERhdGUpIC0gaW5pdGlhbCk7DQogICAgICAgICAgICAgICAgfSwgMTcpOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgfSkoKSwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogU2V0cyB1cCB0aGUgb2JzZXJ2YXRpb24gb2YgYW4gb2JqZWN0DQogICAgICAgICAqIEBmdW5jdGlvbiBkb09ic2VydmUNCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAgICAgKiBAcGFyYW0ge0hhbmRsZXJ9IGhhbmRsZXINCiAgICAgICAgICogQHBhcmFtIHtTdHJpbmdbXX0gW2FjY2VwdExpc3RdDQogICAgICAgICAqLw0KICAgICAgICBkb09ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsIGhhbmRsZXIsIGFjY2VwdExpc3QpIHsNCiAgICAgICAgICAgIHZhciBkYXRhID0gb2JzZXJ2ZWQuZ2V0KG9iamVjdCk7DQoNCiAgICAgICAgICAgIGlmIChkYXRhKSB7DQogICAgICAgICAgICAgICAgcGVyZm9ybVByb3BlcnR5Q2hlY2tzKGRhdGEsIG9iamVjdCk7DQogICAgICAgICAgICAgICAgc2V0SGFuZGxlcihvYmplY3QsIGRhdGEsIGhhbmRsZXIsIGFjY2VwdExpc3QpOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBkYXRhID0gY3JlYXRlT2JqZWN0RGF0YShvYmplY3QpOw0KICAgICAgICAgICAgICAgIHNldEhhbmRsZXIob2JqZWN0LCBkYXRhLCBoYW5kbGVyLCBhY2NlcHRMaXN0KTsNCg0KICAgICAgICAgICAgICAgIGlmIChvYnNlcnZlZC5zaXplID09PSAxKQ0KICAgICAgICAgICAgICAgICAgICAvLyBMZXQgdGhlIG9ic2VydmF0aW9uIGJlZ2luIQ0KICAgICAgICAgICAgICAgICAgICBuZXh0RnJhbWUocnVuR2xvYmFsTG9vcCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIENyZWF0ZXMgdGhlIGluaXRpYWwgZGF0YSBmb3IgYW4gb2JzZXJ2ZWQgb2JqZWN0DQogICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVPYmplY3REYXRhDQogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QNCiAgICAgICAgICovDQogICAgICAgIGNyZWF0ZU9iamVjdERhdGEgPSBmdW5jdGlvbihvYmplY3QsIGRhdGEpIHsNCiAgICAgICAgICAgIHZhciBwcm9wcyA9IGdldFByb3BzKG9iamVjdCksDQogICAgICAgICAgICAgICAgdmFsdWVzID0gW10sIGRlc2NzLCBpID0gMCwNCiAgICAgICAgICAgICAgICBkYXRhID0gew0KICAgICAgICAgICAgICAgICAgICBoYW5kbGVyczogY3JlYXRlTWFwKCksDQogICAgICAgICAgICAgICAgICAgIGZyb3plbjogTy5pc0Zyb3plbiA/IE8uaXNGcm96ZW4ob2JqZWN0KSA6IGZhbHNlLA0KICAgICAgICAgICAgICAgICAgICBleHRlbnNpYmxlOiBPLmlzRXh0ZW5zaWJsZSA/IE8uaXNFeHRlbnNpYmxlKG9iamVjdCkgOiB0cnVlLA0KICAgICAgICAgICAgICAgICAgICBwcm90bzogZ2V0UHJvdG90eXBlICYmIGdldFByb3RvdHlwZShvYmplY3QpLA0KICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wcywNCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsDQogICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyOiByZXRyaWV2ZU5vdGlmaWVyKG9iamVjdCwgZGF0YSkNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICBpZiAoZ2V0RGVzY3JpcHRvcikgew0KICAgICAgICAgICAgICAgIGRlc2NzID0gZGF0YS5kZXNjcmlwdG9ycyA9IFtdOw0KICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgcHJvcHMubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgICAgIGRlc2NzW2ldID0gZ2V0RGVzY3JpcHRvcihvYmplY3QsIHByb3BzW2ldKTsNCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gb2JqZWN0W3Byb3BzW2krK11dOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB3aGlsZSAoaSA8IHByb3BzLmxlbmd0aCkNCiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBvYmplY3RbcHJvcHNbaSsrXV07DQoNCiAgICAgICAgICAgIG9ic2VydmVkLnNldChvYmplY3QsIGRhdGEpOw0KDQogICAgICAgICAgICByZXR1cm4gZGF0YTsNCiAgICAgICAgfSwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogUGVyZm9ybXMgYmFzaWMgcHJvcGVydHkgdmFsdWUgY2hhbmdlIGNoZWNrcyBvbiBhbiBvYnNlcnZlZCBvYmplY3QNCiAgICAgICAgICogQGZ1bmN0aW9uIHBlcmZvcm1Qcm9wZXJ0eUNoZWNrcw0KICAgICAgICAgKiBAcGFyYW0ge09iamVjdERhdGF9IGRhdGENCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2V4Y2VwdF0gIERvZXNuJ3QgZGVsaXZlciB0aGUgY2hhbmdlcyB0byB0aGUNCiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVycyB0aGF0IGFjY2VwdCB0aGlzIHR5cGUNCiAgICAgICAgICovDQogICAgICAgIHBlcmZvcm1Qcm9wZXJ0eUNoZWNrcyA9IChmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIHZhciB1cGRhdGVDaGVjayA9IGdldERlc2NyaXB0b3IgPyBmdW5jdGlvbihvYmplY3QsIGRhdGEsIGlkeCwgZXhjZXB0LCBkZXNjcikgew0KICAgICAgICAgICAgICAgIHZhciBrZXkgPSBkYXRhLnByb3BlcnRpZXNbaWR4XSwNCiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XSwNCiAgICAgICAgICAgICAgICAgICAgb3ZhbHVlID0gZGF0YS52YWx1ZXNbaWR4XSwNCiAgICAgICAgICAgICAgICAgICAgb2Rlc2MgPSBkYXRhLmRlc2NyaXB0b3JzW2lkeF07DQoNCiAgICAgICAgICAgICAgICBpZiAoInZhbHVlIiBpbiBkZXNjciAmJiAob3ZhbHVlID09PSB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgPyBvdmFsdWUgPT09IDAgJiYgMS9vdmFsdWUgIT09IDEvdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgICAgIDogb3ZhbHVlID09PSBvdmFsdWUgfHwgdmFsdWUgPT09IHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICBhZGRDaGFuZ2VSZWNvcmQob2JqZWN0LCBkYXRhLCB7DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksDQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidXBkYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IG92YWx1ZQ0KICAgICAgICAgICAgICAgICAgICB9LCBleGNlcHQpOw0KICAgICAgICAgICAgICAgICAgICBkYXRhLnZhbHVlc1tpZHhdID0gdmFsdWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChvZGVzYy5jb25maWd1cmFibGUgJiYgKCFkZXNjci5jb25maWd1cmFibGUNCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGRlc2NyLndyaXRhYmxlICE9PSBvZGVzYy53cml0YWJsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgZGVzY3IuZW51bWVyYWJsZSAhPT0gb2Rlc2MuZW51bWVyYWJsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgfHwgZGVzY3IuZ2V0ICE9PSBvZGVzYy5nZXQNCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGRlc2NyLnNldCAhPT0gb2Rlc2Muc2V0KSkgew0KICAgICAgICAgICAgICAgICAgICBhZGRDaGFuZ2VSZWNvcmQob2JqZWN0LCBkYXRhLCB7DQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksDQogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicmVjb25maWd1cmUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBvYmplY3QsDQogICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb3ZhbHVlDQogICAgICAgICAgICAgICAgICAgIH0sIGV4Y2VwdCk7DQogICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRvcnNbaWR4XSA9IGRlc2NyOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QsIGRhdGEsIGlkeCwgZXhjZXB0KSB7DQogICAgICAgICAgICAgICAgdmFyIGtleSA9IGRhdGEucHJvcGVydGllc1tpZHhdLA0KICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldLA0KICAgICAgICAgICAgICAgICAgICBvdmFsdWUgPSBkYXRhLnZhbHVlc1tpZHhdOw0KDQogICAgICAgICAgICAgICAgaWYgKG92YWx1ZSA9PT0gdmFsdWUgPyBvdmFsdWUgPT09IDAgJiYgMS9vdmFsdWUgIT09IDEvdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgICAgIDogb3ZhbHVlID09PSBvdmFsdWUgfHwgdmFsdWUgPT09IHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgIGFkZENoYW5nZVJlY29yZChvYmplY3QsIGRhdGEsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ1cGRhdGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiBvYmplY3QsDQogICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogb3ZhbHVlDQogICAgICAgICAgICAgICAgICAgIH0sIGV4Y2VwdCk7DQogICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWVzW2lkeF0gPSB2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAvLyBDaGVja3MgaWYgc29tZSBwcm9wZXJ0eSBoYXMgYmVlbiBkZWxldGVkDQogICAgICAgICAgICB2YXIgZGVsZXRpb25DaGVjayA9IGdldERlc2NyaXB0b3IgPyBmdW5jdGlvbihvYmplY3QsIHByb3BzLCBwcm9wbGVuLCBkYXRhLCBleGNlcHQpIHsNCiAgICAgICAgICAgICAgICB2YXIgaSA9IHByb3BzLmxlbmd0aCwgZGVzY3I7DQogICAgICAgICAgICAgICAgd2hpbGUgKHByb3BsZW4gJiYgaS0tKSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wc1tpXSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3IgPSBnZXREZXNjcmlwdG9yKG9iamVjdCwgcHJvcHNbaV0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGxlbi0tOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRlc2NyaXB0b3IsIHRoZSBwcm9wZXJ0eSBoYXMgcmVhbGx5DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWVuIGRlbGV0ZWQ7IG90aGVyd2lzZSwgaXQncyBiZWVuIHJlY29uZmlndXJlZCBzbw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCdzIG5vdCBlbnVtZXJhYmxlIGFueW1vcmUNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcikgdXBkYXRlQ2hlY2sob2JqZWN0LCBkYXRhLCBpLCBleGNlcHQsIGRlc2NyKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENoYW5nZVJlY29yZChvYmplY3QsIGRhdGEsIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcHNbaV0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJkZWxldGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IGRhdGEudmFsdWVzW2ldDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZXhjZXB0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb3BlcnRpZXMuc3BsaWNlKGksIDEpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWVzLnNwbGljZShpLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0b3JzLnNwbGljZShpLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gOiBmdW5jdGlvbihvYmplY3QsIHByb3BzLCBwcm9wbGVuLCBkYXRhLCBleGNlcHQpIHsNCiAgICAgICAgICAgICAgICB2YXIgaSA9IHByb3BzLmxlbmd0aDsNCiAgICAgICAgICAgICAgICB3aGlsZSAocHJvcGxlbiAmJiBpLS0pDQogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wc1tpXSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHByb3BzW2ldLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJkZWxldGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBkYXRhLnZhbHVlc1tpXQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgZXhjZXB0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvcGVydGllcy5zcGxpY2UoaSwgMSk7DQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZhbHVlcy5zcGxpY2UoaSwgMSk7DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9wbGVuLS07DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhLCBvYmplY3QsIGV4Y2VwdCkgew0KICAgICAgICAgICAgICAgIGlmICghZGF0YS5oYW5kbGVycy5zaXplIHx8IGRhdGEuZnJvemVuKSByZXR1cm47DQoNCiAgICAgICAgICAgICAgICB2YXIgcHJvcHMsIHByb3BsZW4sIGtleXMsDQogICAgICAgICAgICAgICAgICAgIHZhbHVlcyA9IGRhdGEudmFsdWVzLA0KICAgICAgICAgICAgICAgICAgICBkZXNjcyA9IGRhdGEuZGVzY3JpcHRvcnMsDQogICAgICAgICAgICAgICAgICAgIGkgPSAwLCBpZHgsDQogICAgICAgICAgICAgICAgICAgIGtleSwgdmFsdWUsDQogICAgICAgICAgICAgICAgICAgIHByb3RvLCBkZXNjcjsNCg0KICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgaXNuJ3QgZXh0ZW5zaWJsZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayBmb3IgbmV3DQogICAgICAgICAgICAgICAgLy8gb3IgZGVsZXRlZCBwcm9wZXJ0aWVzDQogICAgICAgICAgICAgICAgaWYgKGRhdGEuZXh0ZW5zaWJsZSkgew0KDQogICAgICAgICAgICAgICAgICAgIHByb3BzID0gZGF0YS5wcm9wZXJ0aWVzLnNsaWNlKCk7DQogICAgICAgICAgICAgICAgICAgIHByb3BsZW4gPSBwcm9wcy5sZW5ndGg7DQogICAgICAgICAgICAgICAgICAgIGtleXMgPSBnZXRQcm9wcyhvYmplY3QpOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBrZXlzLmxlbmd0aCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbaSsrXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHggPSBpbkFycmF5KHByb3BzLCBrZXkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyID0gZ2V0RGVzY3JpcHRvcihvYmplY3QsIGtleSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRDaGFuZ2VSZWNvcmQob2JqZWN0LCBkYXRhLCB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYWRkIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGV4Y2VwdCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvcGVydGllcy5wdXNoKGtleSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9iamVjdFtrZXldKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3MucHVzaChkZXNjcik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbaWR4XSA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BsZW4tLTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hlY2sob2JqZWN0LCBkYXRhLCBpZHgsIGV4Y2VwdCwgZGVzY3IpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0aW9uQ2hlY2sob2JqZWN0LCBwcm9wcywgcHJvcGxlbiwgZGF0YSwgZXhjZXB0KTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFPLmlzRXh0ZW5zaWJsZShvYmplY3QpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5leHRlbnNpYmxlID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicHJldmVudEV4dGVuc2lvbnMiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGV4Y2VwdCk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZyb3plbiA9IE8uaXNGcm96ZW4ob2JqZWN0KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChpIDwga2V5cy5sZW5ndGgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzW2krK107DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gaW5BcnJheShwcm9wcywga2V5KTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImFkZCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBleGNlcHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByb3BlcnRpZXMucHVzaChrZXkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbaWR4XSA9IG51bGw7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BsZW4tLTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hlY2sob2JqZWN0LCBkYXRhLCBpZHgsIGV4Y2VwdCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRpb25DaGVjayhvYmplY3QsIHByb3BzLCBwcm9wbGVuLCBkYXRhLCBleGNlcHQpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFkYXRhLmZyb3plbikgew0KDQogICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgaXMgbm90IGV4dGVuc2libGUsIGJ1dCBub3QgZnJvemVuLCB3ZSBqdXN0IGhhdmUNCiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hlY2sgZm9yIHZhbHVlIGNoYW5nZXMNCiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gcHJvcHNbaV07DQogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDaGVjayhvYmplY3QsIGRhdGEsIGksIGV4Y2VwdCwgZ2V0RGVzY3JpcHRvcihvYmplY3QsIGtleSkpOw0KICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgaWYgKE8uaXNGcm96ZW4ob2JqZWN0KSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZnJvemVuID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoZ2V0UHJvdG90eXBlKSB7DQogICAgICAgICAgICAgICAgICAgIHByb3RvID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChwcm90byAhPT0gZGF0YS5wcm90bykgew0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzZXRQcm90b3R5cGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJfX3Byb3RvX18iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogb2JqZWN0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiBkYXRhLnByb3RvDQogICAgICAgICAgICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvdG8gPSBwcm90bzsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0pKCksDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFNldHMgdXAgdGhlIG1haW4gbG9vcCBmb3Igb2JqZWN0IG9ic2VydmF0aW9uIGFuZCBjaGFuZ2Ugbm90aWZpY2F0aW9uDQogICAgICAgICAqIEl0IHN0b3BzIGlmIG5vIG9iamVjdCBpcyBvYnNlcnZlZC4NCiAgICAgICAgICogQGZ1bmN0aW9uIHJ1bkdsb2JhbExvb3ANCiAgICAgICAgICovDQogICAgICAgIHJ1bkdsb2JhbExvb3AgPSBmdW5jdGlvbigpIHsNCiAgICAgICAgICAgIGlmIChvYnNlcnZlZC5zaXplKSB7DQogICAgICAgICAgICAgICAgb2JzZXJ2ZWQuZm9yRWFjaChwZXJmb3JtUHJvcGVydHlDaGVja3MpOw0KICAgICAgICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goZGVsaXZlckhhbmRsZXJSZWNvcmRzKTsNCiAgICAgICAgICAgICAgICBuZXh0RnJhbWUocnVuR2xvYmFsTG9vcCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIERlbGl2ZXIgdGhlIGNoYW5nZSByZWNvcmRzIHJlbGF0aXZlIHRvIGEgY2VydGFpbiBoYW5kbGVyLCBhbmQgcmVzZXRzDQogICAgICAgICAqIHRoZSByZWNvcmQgbGlzdC4NCiAgICAgICAgICogQHBhcmFtIHtIYW5kbGVyRGF0YX0gaGRhdGENCiAgICAgICAgICogQHBhcmFtIHtIYW5kbGVyfSBoYW5kbGVyDQogICAgICAgICAqLw0KICAgICAgICBkZWxpdmVySGFuZGxlclJlY29yZHMgPSBmdW5jdGlvbihoZGF0YSwgaGFuZGxlcikgew0KICAgICAgICAgICAgdmFyIHJlY29yZHMgPSBoZGF0YS5jaGFuZ2VSZWNvcmRzOw0KICAgICAgICAgICAgaWYgKHJlY29yZHMubGVuZ3RoKSB7DQogICAgICAgICAgICAgICAgaGRhdGEuY2hhbmdlUmVjb3JkcyA9IFtdOw0KICAgICAgICAgICAgICAgIGhhbmRsZXIocmVjb3Jkcyk7DQogICAgICAgICAgICB9DQogICAgICAgIH0sDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFJldHVybnMgdGhlIG5vdGlmaWVyIGZvciBhbiBvYmplY3QgLSB3aGV0aGVyIGl0J3Mgb2JzZXJ2ZWQgb3Igbm90DQogICAgICAgICAqIEBmdW5jdGlvbiByZXRyaWV2ZU5vdGlmaWVyDQogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QNCiAgICAgICAgICogQHBhcmFtIHtPYmplY3REYXRhfSBbZGF0YV0NCiAgICAgICAgICogQHJldHVybnMge05vdGlmaWVyfQ0KICAgICAgICAgKi8NCiAgICAgICAgcmV0cmlldmVOb3RpZmllciA9IGZ1bmN0aW9uKG9iamVjdCwgZGF0YSkgew0KICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKQ0KICAgICAgICAgICAgICAgIGRhdGEgPSBvYnNlcnZlZC5nZXQob2JqZWN0KTsNCg0KICAgICAgICAgICAgLyoqIEB0eXBlIHtOb3RpZmllcn0gKi8NCiAgICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGEubm90aWZpZXIgfHwgew0KICAgICAgICAgICAgICAgIC8qKg0KICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgbm90aWZ5DQogICAgICAgICAgICAgICAgICogQHNlZSBodHRwOi8vYXJ2LmdpdGh1Yi5pby9lY21hc2NyaXB0LW9iamVjdC1vYnNlcnZlLyNub3RpZmllcnByb3RvdHlwZS5fbm90aWZ5DQogICAgICAgICAgICAgICAgICogQG1lbWJlcm9mIE5vdGlmaWVyDQogICAgICAgICAgICAgICAgICogQHBhcmFtIHtDaGFuZ2VSZWNvcmR9IGNoYW5nZVJlY29yZA0KICAgICAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgICAgIG5vdGlmeTogZnVuY3Rpb24oY2hhbmdlUmVjb3JkKSB7DQogICAgICAgICAgICAgICAgICAgIGNoYW5nZVJlY29yZC50eXBlOyAvLyBKdXN0IHRvIGNoZWNrIHRoZSBwcm9wZXJ0eSBpcyB0aGVyZS4uLg0KDQogICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gZGF0YSwgdGhlIG9iamVjdCBoYXMgYmVlbiB1bm9ic2VydmVkDQogICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gb2JzZXJ2ZWQuZ2V0KG9iamVjdCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7DQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3JkQ29weSA9IHsgb2JqZWN0OiBvYmplY3QgfSwgcHJvcDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocHJvcCBpbiBjaGFuZ2VSZWNvcmQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgIT09ICJvYmplY3QiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNvcmRDb3B5W3Byb3BdID0gY2hhbmdlUmVjb3JkW3Byb3BdOw0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgcmVjb3JkQ29weSk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9LA0KDQogICAgICAgICAgICAgICAgLyoqDQogICAgICAgICAgICAgICAgICogQG1ldGhvZCBwZXJmb3JtQ2hhbmdlDQogICAgICAgICAgICAgICAgICogQHNlZSBodHRwOi8vYXJ2LmdpdGh1Yi5pby9lY21hc2NyaXB0LW9iamVjdC1vYnNlcnZlLyNub3RpZmllcnByb3RvdHlwZV8ucGVyZm9ybWNoYW5nZQ0KICAgICAgICAgICAgICAgICAqIEBtZW1iZXJvZiBOb3RpZmllcg0KICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjaGFuZ2VUeXBlDQogICAgICAgICAgICAgICAgICogQHBhcmFtIHtQZXJmb3JtZXJ9IGZ1bmMgICAgIFRoZSB0YXNrIHBlcmZvcm1lcg0KICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNPYmpdICAgICAgICBVc2VkIHRvIHNldCBgdGhpc2Agd2hlbiBjYWxsaW5nIGZ1bmMNCiAgICAgICAgICAgICAgICAgKi8NCiAgICAgICAgICAgICAgICBwZXJmb3JtQ2hhbmdlOiBmdW5jdGlvbihjaGFuZ2VUeXBlLCBmdW5jLyosIHRoaXNPYmoqLykgew0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNoYW5nZVR5cGUgIT09ICJzdHJpbmciKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBub24tc3RyaW5nIGNoYW5nZVR5cGUiKTsNCg0KICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICJmdW5jdGlvbiIpDQogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgcGVyZm9ybSBub24tZnVuY3Rpb24iKTsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRhdGEsIHRoZSBvYmplY3QgaGFzIGJlZW4gdW5vYnNlcnZlZA0KICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG9ic2VydmVkLmdldChvYmplY3QpLA0KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCwgY2hhbmdlUmVjb3JkLA0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpc09iaiA9IGFyZ3VtZW50c1syXSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXNPYmogPT09IF91bmRlZmluZWQgPyBmdW5jKCkgOiBmdW5jLmNhbGwodGhpc09iaik7DQoNCiAgICAgICAgICAgICAgICAgICAgZGF0YSAmJiBwZXJmb3JtUHJvcGVydHlDaGVja3MoZGF0YSwgb2JqZWN0LCBjaGFuZ2VUeXBlKTsNCg0KICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGRhdGEsIHRoZSBvYmplY3QgaGFzIGJlZW4gdW5vYnNlcnZlZA0KICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiByZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gIm9iamVjdCIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVJlY29yZCA9IHsgb2JqZWN0OiBvYmplY3QsIHR5cGU6IGNoYW5nZVR5cGUgfTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocHJvcCBpbiByZXN1bHQpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgIT09ICJvYmplY3QiICYmIHByb3AgIT09ICJ0eXBlIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlUmVjb3JkW3Byb3BdID0gcmVzdWx0W3Byb3BdOw0KICAgICAgICAgICAgICAgICAgICAgICAgYWRkQ2hhbmdlUmVjb3JkKG9iamVjdCwgZGF0YSwgY2hhbmdlUmVjb3JkKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIH0sDQoNCiAgICAgICAgLyoqDQogICAgICAgICAqIFJlZ2lzdGVyIChvciByZWRlZmluZXMpIGFuIGhhbmRsZXIgaW4gdGhlIGNvbGxlY3Rpb24gZm9yIGEgZ2l2ZW4NCiAgICAgICAgICogb2JqZWN0IGFuZCBhIGdpdmVuIHR5cGUgYWNjZXB0IGxpc3QuDQogICAgICAgICAqIEBmdW5jdGlvbiBzZXRIYW5kbGVyDQogICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QNCiAgICAgICAgICogQHBhcmFtIHtPYmplY3REYXRhfSBkYXRhDQogICAgICAgICAqIEBwYXJhbSB7SGFuZGxlcn0gaGFuZGxlcg0KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBhY2NlcHRMaXN0DQogICAgICAgICAqLw0KICAgICAgICBzZXRIYW5kbGVyID0gZnVuY3Rpb24ob2JqZWN0LCBkYXRhLCBoYW5kbGVyLCBhY2NlcHRMaXN0KSB7DQogICAgICAgICAgICB2YXIgaGRhdGEgPSBoYW5kbGVycy5nZXQoaGFuZGxlcik7DQogICAgICAgICAgICBpZiAoIWhkYXRhKQ0KICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNldChoYW5kbGVyLCBoZGF0YSA9IHsNCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQ6IGNyZWF0ZU1hcCgpLA0KICAgICAgICAgICAgICAgICAgICBjaGFuZ2VSZWNvcmRzOiBbXQ0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgaGRhdGEub2JzZXJ2ZWQuc2V0KG9iamVjdCwgew0KICAgICAgICAgICAgICAgIGFjY2VwdExpc3Q6IGFjY2VwdExpc3Quc2xpY2UoKSwNCiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhDQogICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIGRhdGEuaGFuZGxlcnMuc2V0KGhhbmRsZXIsIGhkYXRhKTsNCiAgICAgICAgfSwNCg0KICAgICAgICAvKioNCiAgICAgICAgICogQWRkcyBhIGNoYW5nZSByZWNvcmQgaW4gYSBnaXZlbiBPYmplY3REYXRhDQogICAgICAgICAqIEBmdW5jdGlvbiBhZGRDaGFuZ2VSZWNvcmQNCiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAgICAgKiBAcGFyYW0ge09iamVjdERhdGF9IGRhdGENCiAgICAgICAgICogQHBhcmFtIHtDaGFuZ2VSZWNvcmR9IGNoYW5nZVJlY29yZA0KICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2V4Y2VwdF0NCiAgICAgICAgICovDQogICAgICAgIGFkZENoYW5nZVJlY29yZCA9IGZ1bmN0aW9uKG9iamVjdCwgZGF0YSwgY2hhbmdlUmVjb3JkLCBleGNlcHQpIHsNCiAgICAgICAgICAgIGRhdGEuaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoZGF0YSkgew0KICAgICAgICAgICAgICAgIHZhciBhY2NlcHRMaXN0ID0gaGRhdGEub2JzZXJ2ZWQuZ2V0KG9iamVjdCkuYWNjZXB0TGlzdDsNCiAgICAgICAgICAgICAgICAvLyBJZiBleGNlcHQgaXMgZGVmaW5lZCwgTm90aWZpZXIucGVyZm9ybUNoYW5nZSBoYXMgYmVlbg0KICAgICAgICAgICAgICAgIC8vIGNhbGxlZCwgd2l0aCBleGNlcHQgYXMgdGhlIHR5cGUuDQogICAgICAgICAgICAgICAgLy8gQWxsIHRoZSBoYW5kbGVycyB0aGF0IGFjY2VwdHMgdGhhdCB0eXBlIGFyZSBza2lwcGVkLg0KICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGV4Y2VwdCAhPT0gInN0cmluZyINCiAgICAgICAgICAgICAgICAgICAgICAgIHx8IGluQXJyYXkoYWNjZXB0TGlzdCwgZXhjZXB0KSA9PT0gLTEpDQogICAgICAgICAgICAgICAgICAgICAgICAmJiBpbkFycmF5KGFjY2VwdExpc3QsIGNoYW5nZVJlY29yZC50eXBlKSA+IC0xKQ0KICAgICAgICAgICAgICAgICAgICBoZGF0YS5jaGFuZ2VSZWNvcmRzLnB1c2goY2hhbmdlUmVjb3JkKTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICB9Ow0KDQogICAgb2JzZXJ2ZWQgPSBjcmVhdGVNYXAoKTsNCiAgICBoYW5kbGVycyA9IGNyZWF0ZU1hcCgpOw0KDQogICAgLyoqDQogICAgICogQGZ1bmN0aW9uIE9iamVjdC5vYnNlcnZlDQogICAgICogQHNlZSBodHRwOi8vYXJ2LmdpdGh1Yi5pby9lY21hc2NyaXB0LW9iamVjdC1vYnNlcnZlLyNPYmplY3Qub2JzZXJ2ZQ0KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QNCiAgICAgKiBAcGFyYW0ge0hhbmRsZXJ9IGhhbmRsZXINCiAgICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBbYWNjZXB0TGlzdF0NCiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9DQogICAgICogQHJldHVybnMge09iamVjdH0gICAgICAgICAgICAgICBUaGUgb2JzZXJ2ZWQgb2JqZWN0DQogICAgICovDQogICAgTy5vYnNlcnZlID0gZnVuY3Rpb24gb2JzZXJ2ZShvYmplY3QsIGhhbmRsZXIsIGFjY2VwdExpc3QpIHsNCiAgICAgICAgaWYgKCFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCAhPT0gIm9iamVjdCIgJiYgdHlwZW9mIG9iamVjdCAhPT0gImZ1bmN0aW9uIikNCiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5vYnNlcnZlIGNhbm5vdCBvYnNlcnZlIG5vbi1vYmplY3QiKTsNCg0KICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICJmdW5jdGlvbiIpDQogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3Qub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTsNCg0KICAgICAgICBpZiAoTy5pc0Zyb3plbiAmJiBPLmlzRnJvemVuKGhhbmRsZXIpKQ0KICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0Lm9ic2VydmUgY2Fubm90IGRlbGl2ZXIgdG8gYSBmcm96ZW4gZnVuY3Rpb24gb2JqZWN0Iik7DQoNCiAgICAgICAgaWYgKGFjY2VwdExpc3QgPT09IF91bmRlZmluZWQpDQogICAgICAgICAgICBhY2NlcHRMaXN0ID0gZGVmYXVsdEFjY2VwdExpc3Q7DQogICAgICAgIGVsc2UgaWYgKCFhY2NlcHRMaXN0IHx8IHR5cGVvZiBhY2NlcHRMaXN0ICE9PSAib2JqZWN0IikNCiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlRoaXJkIGFyZ3VtZW50IHRvIE9iamVjdC5vYnNlcnZlIG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5ncy4iKTsNCg0KICAgICAgICBkb09ic2VydmUob2JqZWN0LCBoYW5kbGVyLCBhY2NlcHRMaXN0KTsNCg0KICAgICAgICByZXR1cm4gb2JqZWN0Ow0KICAgIH07DQoNCiAgICAvKioNCiAgICAgKiBAZnVuY3Rpb24gT2JqZWN0LnVub2JzZXJ2ZQ0KICAgICAqIEBzZWUgaHR0cDovL2Fydi5naXRodWIuaW8vZWNtYXNjcmlwdC1vYmplY3Qtb2JzZXJ2ZS8jT2JqZWN0LnVub2JzZXJ2ZQ0KICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QNCiAgICAgKiBAcGFyYW0ge0hhbmRsZXJ9IGhhbmRsZXINCiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9DQogICAgICogQHJldHVybnMge09iamVjdH0gICAgICAgICBUaGUgZ2l2ZW4gb2JqZWN0DQogICAgICovDQogICAgTy51bm9ic2VydmUgPSBmdW5jdGlvbiB1bm9ic2VydmUob2JqZWN0LCBoYW5kbGVyKSB7DQogICAgICAgIGlmIChvYmplY3QgPT09IG51bGwgfHwgdHlwZW9mIG9iamVjdCAhPT0gIm9iamVjdCIgJiYgdHlwZW9mIG9iamVjdCAhPT0gImZ1bmN0aW9uIikNCiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC51bm9ic2VydmUgY2Fubm90IHVub2JzZXJ2ZSBub24tb2JqZWN0Iik7DQoNCiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAiZnVuY3Rpb24iKQ0KICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LnVub2JzZXJ2ZSBjYW5ub3QgZGVsaXZlciB0byBub24tZnVuY3Rpb24iKTsNCg0KICAgICAgICB2YXIgaGRhdGEgPSBoYW5kbGVycy5nZXQoaGFuZGxlciksIG9kYXRhOw0KDQogICAgICAgIGlmIChoZGF0YSAmJiAob2RhdGEgPSBoZGF0YS5vYnNlcnZlZC5nZXQob2JqZWN0KSkpIHsNCiAgICAgICAgICAgIGhkYXRhLm9ic2VydmVkLmZvckVhY2goZnVuY3Rpb24ob2RhdGEsIG9iamVjdCkgew0KICAgICAgICAgICAgICAgIHBlcmZvcm1Qcm9wZXJ0eUNoZWNrcyhvZGF0YS5kYXRhLCBvYmplY3QpOw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBuZXh0RnJhbWUoZnVuY3Rpb24oKSB7DQogICAgICAgICAgICAgICAgZGVsaXZlckhhbmRsZXJSZWNvcmRzKGhkYXRhLCBoYW5kbGVyKTsNCiAgICAgICAgICAgIH0pOw0KDQogICAgICAgICAgICAvLyBJbiBGaXJlZm94IDEzLTE4LCBzaXplIGlzIGEgZnVuY3Rpb24sIGJ1dCBjcmVhdGVNYXAgc2hvdWxkIGZhbGwNCiAgICAgICAgICAgIC8vIGJhY2sgdG8gdGhlIHNoaW0gZm9yIHRob3NlIHZlcnNpb25zDQogICAgICAgICAgICBpZiAoaGRhdGEub2JzZXJ2ZWQuc2l6ZSA9PT0gMSAmJiBoZGF0YS5vYnNlcnZlZC5oYXMob2JqZWN0KSkNCiAgICAgICAgICAgICAgICBoYW5kbGVyc1siZGVsZXRlIl0oaGFuZGxlcik7DQogICAgICAgICAgICBlbHNlIGhkYXRhLm9ic2VydmVkWyJkZWxldGUiXShvYmplY3QpOw0KDQogICAgICAgICAgICBpZiAob2RhdGEuZGF0YS5oYW5kbGVycy5zaXplID09PSAxKQ0KICAgICAgICAgICAgICAgIG9ic2VydmVkWyJkZWxldGUiXShvYmplY3QpOw0KICAgICAgICAgICAgZWxzZSBvZGF0YS5kYXRhLmhhbmRsZXJzWyJkZWxldGUiXShoYW5kbGVyKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiBvYmplY3Q7DQogICAgfTsNCg0KICAgIC8qKg0KICAgICAqIEBmdW5jdGlvbiBPYmplY3QuZ2V0Tm90aWZpZXINCiAgICAgKiBAc2VlIGh0dHA6Ly9hcnYuZ2l0aHViLmlvL2VjbWFzY3JpcHQtb2JqZWN0LW9ic2VydmUvI0dldE5vdGlmaWVyDQogICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdA0KICAgICAqIEB0aHJvd3Mge1R5cGVFcnJvcn0NCiAgICAgKiBAcmV0dXJucyB7Tm90aWZpZXJ9DQogICAgICovDQogICAgTy5nZXROb3RpZmllciA9IGZ1bmN0aW9uIGdldE5vdGlmaWVyKG9iamVjdCkgew0KICAgICAgICBpZiAob2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBvYmplY3QgIT09ICJvYmplY3QiICYmIHR5cGVvZiBvYmplY3QgIT09ICJmdW5jdGlvbiIpDQogICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJPYmplY3QuZ2V0Tm90aWZpZXIgY2Fubm90IGdldE5vdGlmaWVyIG5vbi1vYmplY3QiKTsNCg0KICAgICAgICBpZiAoTy5pc0Zyb3plbiAmJiBPLmlzRnJvemVuKG9iamVjdCkpIHJldHVybiBudWxsOw0KDQogICAgICAgIHJldHVybiByZXRyaWV2ZU5vdGlmaWVyKG9iamVjdCk7DQogICAgfTsNCg0KICAgIC8qKg0KICAgICAqIEBmdW5jdGlvbiBPYmplY3QuZGVsaXZlckNoYW5nZVJlY29yZHMNCiAgICAgKiBAc2VlIGh0dHA6Ly9hcnYuZ2l0aHViLmlvL2VjbWFzY3JpcHQtb2JqZWN0LW9ic2VydmUvI09iamVjdC5kZWxpdmVyQ2hhbmdlUmVjb3Jkcw0KICAgICAqIEBzZWUgaHR0cDovL2Fydi5naXRodWIuaW8vZWNtYXNjcmlwdC1vYmplY3Qtb2JzZXJ2ZS8jRGVsaXZlckNoYW5nZVJlY29yZHMNCiAgICAgKiBAcGFyYW0ge0hhbmRsZXJ9IGhhbmRsZXINCiAgICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9DQogICAgICovDQogICAgTy5kZWxpdmVyQ2hhbmdlUmVjb3JkcyA9IGZ1bmN0aW9uIGRlbGl2ZXJDaGFuZ2VSZWNvcmRzKGhhbmRsZXIpIHsNCiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAiZnVuY3Rpb24iKQ0KICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LmRlbGl2ZXJDaGFuZ2VSZWNvcmRzIGNhbm5vdCBkZWxpdmVyIHRvIG5vbi1mdW5jdGlvbiIpOw0KDQogICAgICAgIHZhciBoZGF0YSA9IGhhbmRsZXJzLmdldChoYW5kbGVyKTsNCiAgICAgICAgaWYgKGhkYXRhKSB7DQogICAgICAgICAgICBoZGF0YS5vYnNlcnZlZC5mb3JFYWNoKGZ1bmN0aW9uKG9kYXRhLCBvYmplY3QpIHsNCiAgICAgICAgICAgICAgICBwZXJmb3JtUHJvcGVydHlDaGVja3Mob2RhdGEuZGF0YSwgb2JqZWN0KTsNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgZGVsaXZlckhhbmRsZXJSZWNvcmRzKGhkYXRhLCBoYW5kbGVyKTsNCiAgICAgICAgfQ0KICAgIH07DQoNCn0pKE9iamVjdCwgQXJyYXksIHRoaXMpOw0KCn0se31dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlCi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcKSBpbiB0aGUgYXJyYXkKLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoCi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocykKZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsIGFsbG93QWJvdmVSb290KSB7CiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDAKICB2YXIgdXAgPSAwOwogIGZvciAodmFyIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgewogICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTsKICAgIGlmIChsYXN0ID09PSAnLicpIHsKICAgICAgcGFydHMuc3BsaWNlKGksIDEpOwogICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7CiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTsKICAgICAgdXArKzsKICAgIH0gZWxzZSBpZiAodXApIHsKICAgICAgcGFydHMuc3BsaWNlKGksIDEpOwogICAgICB1cC0tOwogICAgfQogIH0KCiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4ucwogIGlmIChhbGxvd0Fib3ZlUm9vdCkgewogICAgZm9yICg7IHVwLS07IHVwKSB7CiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7CiAgICB9CiAgfQoKICByZXR1cm4gcGFydHM7Cn0KCi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uCi8vICdyb290JyBpcyBqdXN0IGEgc2xhc2gsIG9yIG5vdGhpbmcuCnZhciBzcGxpdFBhdGhSZSA9CiAgICAvXihcLz98KShbXHNcU10qPykoKD86XC57MSwyfXxbXlwvXSs/fCkoXC5bXi5cL10qfCkpKD86W1wvXSopJC87CnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkgewogIHJldHVybiBzcGxpdFBhdGhSZS5leGVjKGZpbGVuYW1lKS5zbGljZSgxKTsKfTsKCi8vIHBhdGgucmVzb2x2ZShbZnJvbSAuLi5dLCB0bykKLy8gcG9zaXggdmVyc2lvbgpleHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHsKICB2YXIgcmVzb2x2ZWRQYXRoID0gJycsCiAgICAgIHJlc29sdmVkQWJzb2x1dGUgPSBmYWxzZTsKCiAgZm9yICh2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpID49IC0xICYmICFyZXNvbHZlZEFic29sdXRlOyBpLS0pIHsKICAgIHZhciBwYXRoID0gKGkgPj0gMCkgPyBhcmd1bWVudHNbaV0gOiBwcm9jZXNzLmN3ZCgpOwoKICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllcwogICAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpOwogICAgfSBlbHNlIGlmICghcGF0aCkgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoOwogICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7CiAgfQoKICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0CiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpCgogIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aAogIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkgewogICAgcmV0dXJuICEhcDsKICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTsKCiAgcmV0dXJuICgocmVzb2x2ZWRBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHJlc29sdmVkUGF0aCkgfHwgJy4nOwp9OwoKLy8gcGF0aC5ub3JtYWxpemUocGF0aCkKLy8gcG9zaXggdmVyc2lvbgpleHBvcnRzLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBhdGgpIHsKICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSwKICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJzsKCiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoCiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHsKICAgIHJldHVybiAhIXA7CiAgfSksICFpc0Fic29sdXRlKS5qb2luKCcvJyk7CgogIGlmICghcGF0aCAmJiAhaXNBYnNvbHV0ZSkgewogICAgcGF0aCA9ICcuJzsKICB9CiAgaWYgKHBhdGggJiYgdHJhaWxpbmdTbGFzaCkgewogICAgcGF0aCArPSAnLyc7CiAgfQoKICByZXR1cm4gKGlzQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoOwp9OwoKLy8gcG9zaXggdmVyc2lvbgpleHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7CiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLyc7Cn07CgovLyBwb3NpeCB2ZXJzaW9uCmV4cG9ydHMuam9pbiA9IGZ1bmN0aW9uKCkgewogIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7CiAgcmV0dXJuIGV4cG9ydHMubm9ybWFsaXplKGZpbHRlcihwYXRocywgZnVuY3Rpb24ocCwgaW5kZXgpIHsKICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTsKICAgIH0KICAgIHJldHVybiBwOwogIH0pLmpvaW4oJy8nKSk7Cn07CgoKLy8gcGF0aC5yZWxhdGl2ZShmcm9tLCB0bykKLy8gcG9zaXggdmVyc2lvbgpleHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHsKICBmcm9tID0gZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTsKICB0byA9IGV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpOwoKICBmdW5jdGlvbiB0cmltKGFycikgewogICAgdmFyIHN0YXJ0ID0gMDsKICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHsKICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhazsKICAgIH0KCiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7CiAgICBmb3IgKDsgZW5kID49IDA7IGVuZC0tKSB7CiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrOwogICAgfQoKICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdOwogICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTsKICB9CgogIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7CiAgdmFyIHRvUGFydHMgPSB0cmltKHRvLnNwbGl0KCcvJykpOwoKICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpOwogIHZhciBzYW1lUGFydHNMZW5ndGggPSBsZW5ndGg7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkgewogICAgICBzYW1lUGFydHNMZW5ndGggPSBpOwogICAgICBicmVhazsKICAgIH0KICB9CgogIHZhciBvdXRwdXRQYXJ0cyA9IFtdOwogIGZvciAodmFyIGkgPSBzYW1lUGFydHNMZW5ndGg7IGkgPCBmcm9tUGFydHMubGVuZ3RoOyBpKyspIHsKICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7CiAgfQoKICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpOwoKICByZXR1cm4gb3V0cHV0UGFydHMuam9pbignLycpOwp9OwoKZXhwb3J0cy5zZXAgPSAnLyc7CmV4cG9ydHMuZGVsaW1pdGVyID0gJzonOwoKZXhwb3J0cy5kaXJuYW1lID0gZnVuY3Rpb24ocGF0aCkgewogIHZhciByZXN1bHQgPSBzcGxpdFBhdGgocGF0aCksCiAgICAgIHJvb3QgPSByZXN1bHRbMF0sCiAgICAgIGRpciA9IHJlc3VsdFsxXTsKCiAgaWYgKCFyb290ICYmICFkaXIpIHsKICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlcgogICAgcmV0dXJuICcuJzsKICB9CgogIGlmIChkaXIpIHsKICAgIC8vIEl0IGhhcyBhIGRpcm5hbWUsIHN0cmlwIHRyYWlsaW5nIHNsYXNoCiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTsKICB9CgogIHJldHVybiByb290ICsgZGlyOwp9OwoKCmV4cG9ydHMuYmFzZW5hbWUgPSBmdW5jdGlvbihwYXRoLCBleHQpIHsKICB2YXIgZiA9IHNwbGl0UGF0aChwYXRoKVsyXTsKICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/CiAgaWYgKGV4dCAmJiBmLnN1YnN0cigtMSAqIGV4dC5sZW5ndGgpID09PSBleHQpIHsKICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpOwogIH0KICByZXR1cm4gZjsKfTsKCgpleHBvcnRzLmV4dG5hbWUgPSBmdW5jdGlvbihwYXRoKSB7CiAgcmV0dXJuIHNwbGl0UGF0aChwYXRoKVszXTsKfTsKCmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHsKICAgIGlmICh4cy5maWx0ZXIpIHJldHVybiB4cy5maWx0ZXIoZik7CiAgICB2YXIgcmVzID0gW107CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKGYoeHNbaV0sIGksIHhzKSkgcmVzLnB1c2goeHNbaV0pOwogICAgfQogICAgcmV0dXJuIHJlczsKfQoKLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOAp2YXIgc3Vic3RyID0gJ2FiJy5zdWJzdHIoLTEpID09PSAnYicKICAgID8gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbikgeyByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKSB9CiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHsKICAgICAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IHN0ci5sZW5ndGggKyBzdGFydDsKICAgICAgICByZXR1cm4gc3RyLnN1YnN0cihzdGFydCwgbGVuKTsKICAgIH0KOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpCn0seyJfcHJvY2VzcyI6MjN9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2Vzcyl7Cid1c2Ugc3RyaWN0JzsKCmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8CiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHwKICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkgewogIG1vZHVsZS5leHBvcnRzID0gbmV4dFRpY2s7Cn0gZWxzZSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzLm5leHRUaWNrOwp9CgpmdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykgewogIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJjYWxsYmFjayIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgfQogIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwogIHZhciBhcmdzLCBpOwogIHN3aXRjaCAobGVuKSB7CiAgY2FzZSAwOgogIGNhc2UgMToKICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTsKICBjYXNlIDI6CiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7CiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7CiAgICB9KTsKICBjYXNlIDM6CiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7CiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7CiAgICB9KTsKICBjYXNlIDQ6CiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHsKICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTsKICAgIH0pOwogIGRlZmF1bHQ6CiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpOwogICAgaSA9IDA7CiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7CiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTsKICAgIH0KICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHsKICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7CiAgICB9KTsKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQp9LHsiX3Byb2Nlc3MiOjIzfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0Ci8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpcwovLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuCgp2YXIgY2FjaGVkU2V0VGltZW91dDsKdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCihmdW5jdGlvbiAoKSB7CiAgICB0cnkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBpcyBub3QgZGVmaW5lZCcpOwogICAgICAgIH0KICAgIH0KICAgIHRyeSB7CiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaXMgbm90IGRlZmluZWQnKTsKICAgICAgICB9CiAgICB9Cn0gKCkpCmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9CiAgICB0cnkgewogICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApOwogICAgfSBjYXRjaChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHkKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApOwogICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yCiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTsKICAgICAgICB9CiAgICB9CgoKfQpmdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7CiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHsKICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnMKICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9CiAgICB0cnkgewogICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9IGNhdGNoIChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpOwogICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci4KICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dAogICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTsKICAgICAgICB9CiAgICB9CgoKCn0KdmFyIHF1ZXVlID0gW107CnZhciBkcmFpbmluZyA9IGZhbHNlOwp2YXIgY3VycmVudFF1ZXVlOwp2YXIgcXVldWVJbmRleCA9IC0xOwoKZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkgewogICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7CiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgfQogICAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgICAgIGRyYWluUXVldWUoKTsKICAgIH0KfQoKZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICAgIGlmIChkcmFpbmluZykgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwogICAgZHJhaW5pbmcgPSB0cnVlOwoKICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB3aGlsZShsZW4pIHsKICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB9CiAgICBjdXJyZW50UXVldWUgPSBudWxsOwogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKfQoKcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgIH0KICAgIH0KICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7CiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7CiAgICB9Cn07CgovLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkgewogICAgdGhpcy5mdW4gPSBmdW47CiAgICB0aGlzLmFycmF5ID0gYXJyYXk7Cn0KSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7Cn07CnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwpwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKcHJvY2Vzcy52ZXJzaW9ucyA9IHt9OwoKZnVuY3Rpb24gbm9vcCgpIHt9Cgpwcm9jZXNzLm9uID0gbm9vcDsKcHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3Mub25jZSA9IG5vb3A7CnByb2Nlc3Mub2ZmID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDsKcHJvY2Vzcy5lbWl0ID0gbm9vcDsKCnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07Cgpwcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9Owpwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikgewogICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKcHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTsKCn0se31dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCIuL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIpCgp9LHsiLi9saWIvX3N0cmVhbV9kdXBsZXguanMiOjI1fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLgovLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzcwovLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tCi8vIFdyaXRhYmxlLgoKJ3VzZSBzdHJpY3QnOwoKLyo8cmVwbGFjZW1lbnQ+Ki8KCnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikgewogIHZhciBrZXlzID0gW107CiAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAga2V5cy5wdXNoKGtleSk7CiAgfXJldHVybiBrZXlzOwp9OwovKjwvcmVwbGFjZW1lbnQ+Ki8KCm1vZHVsZS5leHBvcnRzID0gRHVwbGV4OwoKLyo8cmVwbGFjZW1lbnQ+Ki8KdmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8KdmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTsKdXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKdmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7CnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpOwoKdXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTsKCnZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpOwpmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHsKICB2YXIgbWV0aG9kID0ga2V5c1t2XTsKICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07Cn0KCmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7CiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpOwoKICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpOwogIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7CgogIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7CgogIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7CgogIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7CiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7CgogIHRoaXMub25jZSgnZW5kJywgb25lbmQpOwp9CgovLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyCmZ1bmN0aW9uIG9uZW5kKCkgewogIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsCiAgLy8gdGhlbiB3ZSdyZSBvay4KICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjsKCiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLgogIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLgogIHByb2Nlc3NOZXh0VGljayhvbkVuZE5ULCB0aGlzKTsKfQoKZnVuY3Rpb24gb25FbmROVChzZWxmKSB7CiAgc2VsZi5lbmQoKTsKfQoKZnVuY3Rpb24gZm9yRWFjaCh4cywgZikgewogIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICBmKHhzW2ldLCBpKTsKICB9Cn0KfSx7Ii4vX3N0cmVhbV9yZWFkYWJsZSI6MjcsIi4vX3N0cmVhbV93cml0YWJsZSI6MjksImNvcmUtdXRpbC1pcyI6OCwiaW5oZXJpdHMiOjE2LCJwcm9jZXNzLW5leHRpY2stYXJncyI6MjJ9XSwyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLgovLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS4KLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy4KCid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7Cgp2YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpOwoKLyo8cmVwbGFjZW1lbnQ+Ki8KdmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTsKdXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7Ci8qPC9yZXBsYWNlbWVudD4qLwoKdXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTsKCmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHsKICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpOwoKICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTsKfQoKUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIGNiKG51bGwsIGNodW5rKTsKfTsKfSx7Ii4vX3N0cmVhbV90cmFuc2Zvcm0iOjI4LCJjb3JlLXV0aWwtaXMiOjgsImluaGVyaXRzIjoxNn1dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKJ3VzZSBzdHJpY3QnOwoKbW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTsKCi8qPHJlcGxhY2VtZW50PiovCnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7Ci8qPC9yZXBsYWNlbWVudD4qLwoKUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7Cgp2YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKTsKCi8qPHJlcGxhY2VtZW50PiovCnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkgewogIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7Cn07Ci8qPC9yZXBsYWNlbWVudD4qLwoKLyo8cmVwbGFjZW1lbnQ+Ki8KdmFyIFN0cmVhbTsKKGZ1bmN0aW9uICgpIHsKICB0cnkgewogICAgU3RyZWFtID0gcmVxdWlyZSgnc3QnICsgJ3JlYW0nKTsKICB9IGNhdGNoIChfKSB7fSBmaW5hbGx5IHsKICAgIGlmICghU3RyZWFtKSBTdHJlYW0gPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7CiAgfQp9KSgpOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7CgovKjxyZXBsYWNlbWVudD4qLwp2YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwp2YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpOwp2YXIgZGVidWcgPSB1bmRlZmluZWQ7CmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7CiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpOwp9IGVsc2UgewogIGRlYnVnID0gZnVuY3Rpb24gKCkge307Cn0KLyo8L3JlcGxhY2VtZW50PiovCgp2YXIgU3RyaW5nRGVjb2RlcjsKCnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7Cgp2YXIgRHVwbGV4OwpmdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CgogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0bwogIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5CiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7CgogIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlOwoKICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlcgogIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXIiCiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyazsKICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0OwogIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bSB8fCBod20gPT09IDAgPyBod20gOiBkZWZhdWx0SHdtOwoKICAvLyBjYXN0IHRvIGludHMuCiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfiB+dGhpcy5oaWdoV2F0ZXJNYXJrOwoKICB0aGlzLmJ1ZmZlciA9IFtdOwogIHRoaXMubGVuZ3RoID0gMDsKICB0aGlzLnBpcGVzID0gbnVsbDsKICB0aGlzLnBpcGVzQ291bnQgPSAwOwogIHRoaXMuZmxvd2luZyA9IG51bGw7CiAgdGhpcy5lbmRlZCA9IGZhbHNlOwogIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlOwogIHRoaXMucmVhZGluZyA9IGZhbHNlOwoKICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSwKICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueQogIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsICJsYXRlciIgc2hvdWxkIGdlbmVyYWxseSBhbHNvCiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuCiAgdGhpcy5zeW5jID0gdHJ1ZTsKCiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXkKICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi4KICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlOwogIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7CiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlOwogIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7CgogIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmcKICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgogIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnOwoKICAvLyB3aGVuIHBpcGluZywgd2Ugb25seSBjYXJlIGFib3V0ICdyZWFkYWJsZScgZXZlbnRzIHRoYXQgaGFwcGVuCiAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay4KICB0aGlzLnJhbk91dCA9IGZhbHNlOwoKICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpcwogIHRoaXMuYXdhaXREcmFpbiA9IDA7CgogIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWQKICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7CgogIHRoaXMuZGVjb2RlciA9IG51bGw7CiAgdGhpcy5lbmNvZGluZyA9IG51bGw7CiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHsKICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7CiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTsKICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nOwogIH0KfQoKdmFyIER1cGxleDsKZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykgewogIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CgogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7CgogIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTsKCiAgLy8gbGVnYWN5CiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7CgogIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7CgogIFN0cmVhbS5jYWxsKHRoaXMpOwp9CgovLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci4KLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsCi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGQKLy8gd3JpdGUoKSBzb21lIG1vcmUuClJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgogIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7CiAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZzsKICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHsKICAgICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7CiAgICAgIGVuY29kaW5nID0gJyc7CiAgICB9CiAgfQoKICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBmYWxzZSk7Cn07CgovLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKQpSZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCAnJywgdHJ1ZSk7Cn07CgpSZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7Cn07CgpmdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkgewogIHZhciBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspOwogIGlmIChlcikgewogICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwogIH0gZWxzZSBpZiAoY2h1bmsgPT09IG51bGwpIHsKICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7CiAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHsKICAgIGlmIChzdGF0ZS5lbmRlZCAmJiAhYWRkVG9Gcm9udCkgewogICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTsKICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7CiAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZEVtaXR0ZWQgJiYgYWRkVG9Gcm9udCkgewogICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTsKICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7CiAgICB9IGVsc2UgewogICAgICB2YXIgc2tpcEFkZDsKICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWFkZFRvRnJvbnQgJiYgIWVuY29kaW5nKSB7CiAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKICAgICAgICBza2lwQWRkID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgY2h1bmsubGVuZ3RoID09PSAwOwogICAgICB9CgogICAgICBpZiAoIWFkZFRvRnJvbnQpIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKCiAgICAgIC8vIERvbid0IGFkZCB0byB0aGUgYnVmZmVyIGlmIHdlJ3ZlIGRlY29kZWQgdG8gYW4gZW1wdHkgc3RyaW5nIGNodW5rIGFuZAogICAgICAvLyB3ZSdyZSBub3QgaW4gb2JqZWN0IG1vZGUKICAgICAgaWYgKCFza2lwQWRkKSB7CiAgICAgICAgLy8gaWYgd2Ugd2FudCB0aGUgZGF0YSBub3csIGp1c3QgZW1pdCBpdC4KICAgICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHsKICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspOwogICAgICAgICAgc3RyZWFtLnJlYWQoMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uCiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CiAgICAgICAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspOwoKICAgICAgICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTsKICAgIH0KICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7CiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CiAgfQoKICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTsKfQoKLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS4KLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWUKLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsCi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhCi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdAovLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlcgovLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLgpmdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHsKICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApOwp9CgovLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4KUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykgewogIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7CiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTsKICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jOwogIHJldHVybiB0aGlzOwp9OwoKLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQgp2YXIgTUFYX0hXTSA9IDB4ODAwMDAwOwpmdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7CiAgaWYgKG4gPj0gTUFYX0hXTSkgewogICAgbiA9IE1BWF9IV007CiAgfSBlbHNlIHsKICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIKICAgIG4tLTsKICAgIG4gfD0gbiA+Pj4gMTsKICAgIG4gfD0gbiA+Pj4gMjsKICAgIG4gfD0gbiA+Pj4gNDsKICAgIG4gfD0gbiA+Pj4gODsKICAgIG4gfD0gbiA+Pj4gMTY7CiAgICBuKys7CiAgfQogIHJldHVybiBuOwp9CgpmdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7CiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7CgogIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gbiA9PT0gMCA/IDAgOiAxOwoKICBpZiAobiA9PT0gbnVsbCB8fCBpc05hTihuKSkgewogICAgLy8gb25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lCiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5idWZmZXIubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyWzBdLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7CiAgfQoKICBpZiAobiA8PSAwKSByZXR1cm4gMDsKCiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIHRhcmdldCBidWZmZXIgbGV2ZWwsCiAgLy8gdGhlbiByYWlzZSB0aGUgd2F0ZXIgbWFyay4gIEJ1bXAgdXAgdG8gdGhlIG5leHQgaGlnaGVzdAogIC8vIHBvd2VyIG9mIDIsIHRvIHByZXZlbnQgaW5jcmVhc2luZyBpdCBleGNlc3NpdmVseSBpbiB0aW55CiAgLy8gYW1vdW50cy4KICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTsKCiAgLy8gZG9uJ3QgaGF2ZSB0aGF0IG11Y2guICByZXR1cm4gbnVsbCwgdW5sZXNzIHdlJ3ZlIGVuZGVkLgogIGlmIChuID4gc3RhdGUubGVuZ3RoKSB7CiAgICBpZiAoIXN0YXRlLmVuZGVkKSB7CiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CiAgICAgIHJldHVybiAwOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIHN0YXRlLmxlbmd0aDsKICAgIH0KICB9CgogIHJldHVybiBuOwp9CgovLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LgpSZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgZGVidWcoJ3JlYWQnLCBuKTsKICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogIHZhciBuT3JpZyA9IG47CgogIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA+IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwoKICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlCiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlcgogIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLgogIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7CiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7CiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTsKICAgIHJldHVybiBudWxsOwogIH0KCiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpOwoKICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuCiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHsKICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpOwogICAgcmV0dXJuIG51bGw7CiAgfQoKICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlCiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluCiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZAogIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2UKICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlbgogIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLgogIC8vCiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6CiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkbwogIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuCiAgLy8KICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLgogIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpcwogIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhbgogIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmUKICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLgogIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbAogIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXQKICAvLyAncmVhZGFibGUnIGV0Yy4KICAvLwogIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi4KCiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLgogIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7CiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpOwoKICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWUKICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7CiAgICBkb1JlYWQgPSB0cnVlOwogICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTsKICB9CgogIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5CiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LgogIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7CiAgICBkb1JlYWQgPSBmYWxzZTsKICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTsKICB9CgogIGlmIChkb1JlYWQpIHsKICAgIGRlYnVnKCdkbyByZWFkJyk7CiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTsKICAgIHN0YXRlLnN5bmMgPSB0cnVlOwogICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC4KICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kCiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspOwogICAgc3RhdGUuc3luYyA9IGZhbHNlOwogIH0KCiAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSwKICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuCiAgaWYgKGRvUmVhZCAmJiAhc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTsKCiAgdmFyIHJldDsKICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7CgogIGlmIChyZXQgPT09IG51bGwpIHsKICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CiAgICBuID0gMDsKICB9CgogIHN0YXRlLmxlbmd0aCAtPSBuOwoKICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3cKICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuCiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CgogIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay4KICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTsKCiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTsKCiAgcmV0dXJuIHJldDsKfTsKCmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHsKICB2YXIgZXIgPSBudWxsOwogIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHsKICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpOwogIH0KICByZXR1cm4gZXI7Cn0KCmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkgewogIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuOwogIGlmIChzdGF0ZS5kZWNvZGVyKSB7CiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpOwogICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgewogICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7CiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKICAgIH0KICB9CiAgc3RhdGUuZW5kZWQgPSB0cnVlOwoKICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC4KICBlbWl0UmVhZGFibGUoc3RyZWFtKTsKfQoKLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyCi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlcgovLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuCmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7CiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHsKICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTsKICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7CiAgICBpZiAoc3RhdGUuc3luYykgcHJvY2Vzc05leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7CiAgfQp9CgpmdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkgewogIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7CiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7CiAgZmxvdyhzdHJlYW0pOwp9CgovLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LAovLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkCi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmCi8vIGl0J3MgaW4gcHJvZ3Jlc3MuCi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sCi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuCmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkgewogIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHsKICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTsKICAgIHByb2Nlc3NOZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7CiAgfQp9CgpmdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7CiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDsKICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHsKICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpOwogICAgc3RyZWFtLnJlYWQoMCk7CiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpCiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuCiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoOwogIH0KICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlOwp9CgovLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuCi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguCi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCAibGVuZ3RoIiBpcyBzb21ld2hhdAovLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuClJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpOwp9OwoKUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHsKICB2YXIgc3JjID0gdGhpczsKICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoKICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHsKICAgIGNhc2UgMDoKICAgICAgc3RhdGUucGlwZXMgPSBkZXN0OwogICAgICBicmVhazsKICAgIGNhc2UgMToKICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdOwogICAgICBicmVhazsKICAgIGRlZmF1bHQ6CiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7CiAgICAgIGJyZWFrOwogIH0KICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7CiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTsKCiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjsKCiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IGNsZWFudXA7CiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3NOZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pOwoKICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7CiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHsKICAgIGRlYnVnKCdvbnVucGlwZScpOwogICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHsKICAgICAgY2xlYW51cCgpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gb25lbmQoKSB7CiAgICBkZWJ1Zygnb25lbmQnKTsKICAgIGRlc3QuZW5kKCk7CiAgfQoKICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyCiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpCiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXMKICAvLyB0b28gc2xvdy4KICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7CiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTsKCiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlOwogIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICBkZWJ1ZygnY2xlYW51cCcpOwogICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlbgogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpOwogICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7CiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApOwogICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTsKCiAgICBjbGVhbmVkVXAgPSB0cnVlOwoKICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXMKICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydAogICAgLy8gZmxvd2luZyBhZ2Fpbi4KICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy4KICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS4KICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTsKICB9CgogIHNyYy5vbignZGF0YScsIG9uZGF0YSk7CiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CiAgICBkZWJ1Zygnb25kYXRhJyk7CiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7CiAgICBpZiAoZmFsc2UgPT09IHJldCkgewogICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGUKICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGUKICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS4KICAgICAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXNbMF0gPT09IGRlc3QgJiYgc3JjLmxpc3RlbmVyQ291bnQoJ2RhdGEnKSA9PT0gMSAmJiAhY2xlYW5lZFVwKSB7CiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTsKICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrOwogICAgICB9CiAgICAgIHNyYy5wYXVzZSgpOwogICAgfQogIH0KCiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuCiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLgogIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKICAgIGRlYnVnKCdvbmVycm9yJywgZXIpOwogICAgdW5waXBlKCk7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwogICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTsKICB9CiAgLy8gVGhpcyBpcyBhIGJydXRhbGx5IHVnbHkgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlcgogIC8vIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnkgdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuCiAgaWYgKCFkZXN0Ll9ldmVudHMgfHwgIWRlc3QuX2V2ZW50cy5lcnJvcikgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtlbHNlIGlmIChpc0FycmF5KGRlc3QuX2V2ZW50cy5lcnJvcikpIGRlc3QuX2V2ZW50cy5lcnJvci51bnNoaWZ0KG9uZXJyb3IpO2Vsc2UgZGVzdC5fZXZlbnRzLmVycm9yID0gW29uZXJyb3IsIGRlc3QuX2V2ZW50cy5lcnJvcl07CgogIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuCiAgZnVuY3Rpb24gb25jbG9zZSgpIHsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKICAgIHVucGlwZSgpOwogIH0KICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7CiAgZnVuY3Rpb24gb25maW5pc2goKSB7CiAgICBkZWJ1Zygnb25maW5pc2gnKTsKICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7CiAgICB1bnBpcGUoKTsKICB9CiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7CgogIGZ1bmN0aW9uIHVucGlwZSgpIHsKICAgIGRlYnVnKCd1bnBpcGUnKTsKICAgIHNyYy51bnBpcGUoZGVzdCk7CiAgfQoKICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0bwogIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7CgogIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS4KICBpZiAoIXN0YXRlLmZsb3dpbmcpIHsKICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpOwogICAgc3JjLnJlc3VtZSgpOwogIH0KCiAgcmV0dXJuIGRlc3Q7Cn07CgpmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlOwogICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7CiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tOwogICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkgewogICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKICAgICAgZmxvdyhzcmMpOwogICAgfQogIH07Cn0KClJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgogIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy4KICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7CgogIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS4KICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgewogICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuCiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7CgogICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7CgogICAgLy8gZ290IGEgbWF0Y2guCiAgICBzdGF0ZS5waXBlcyA9IG51bGw7CiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDsKICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTsKICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpOwogICAgcmV0dXJuIHRoaXM7CiAgfQoKICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLgoKICBpZiAoIWRlc3QpIHsKICAgIC8vIHJlbW92ZSBhbGwuCiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlczsKICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50OwogICAgc3RhdGUucGlwZXMgPSBudWxsOwogICAgc3RhdGUucGlwZXNDb3VudCA9IDA7CiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7CgogICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbjsgX2krKykgewogICAgICBkZXN0c1tfaV0uZW1pdCgndW5waXBlJywgdGhpcyk7CiAgICB9cmV0dXJuIHRoaXM7CiAgfQoKICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLgogIHZhciBpID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7CiAgaWYgKGkgPT09IC0xKSByZXR1cm4gdGhpczsKCiAgc3RhdGUucGlwZXMuc3BsaWNlKGksIDEpOwogIHN0YXRlLnBpcGVzQ291bnQgLT0gMTsKICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTsKCiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTsKCiAgcmV0dXJuIHRoaXM7Cn07CgovLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yCi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nClJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHsKICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7CgogIC8vIElmIGxpc3RlbmluZyB0byBkYXRhLCBhbmQgaXQgaGFzIG5vdCBleHBsaWNpdGx5IGJlZW4gcGF1c2VkLAogIC8vIHRoZW4gY2FsbCByZXN1bWUgdG8gc3RhcnQgdGhlIGZsb3cgb2YgZGF0YSBvbiB0aGUgbmV4dCB0aWNrLgogIGlmIChldiA9PT0gJ2RhdGEnICYmIGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHsKICAgIHRoaXMucmVzdW1lKCk7CiAgfQoKICBpZiAoZXYgPT09ICdyZWFkYWJsZScgJiYgIXRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCkgewogICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKICAgIGlmICghc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHsKICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSB0cnVlOwogICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7CiAgICAgICAgcHJvY2Vzc05leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpOwogICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkgewogICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzLCBzdGF0ZSk7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiByZXM7Cn07ClJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjsKCmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikgewogIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTsKICBzZWxmLnJlYWQoMCk7Cn0KCi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUEkKLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLgpSZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7CiAgICBkZWJ1ZygncmVzdW1lJyk7CiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7CiAgfQogIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkgewogICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTsKICAgIHByb2Nlc3NOZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTsKICB9Cn0KCmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkgewogIGlmICghc3RhdGUucmVhZGluZykgewogICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTsKICAgIHN0cmVhbS5yZWFkKDApOwogIH0KCiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7CiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpOwogIGZsb3coc3RyZWFtKTsKICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7Cn0KClJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHsKICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTsKICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykgewogICAgZGVidWcoJ3BhdXNlJyk7CiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTsKICAgIHRoaXMuZW1pdCgncGF1c2UnKTsKICB9CiAgcmV0dXJuIHRoaXM7Cn07CgpmdW5jdGlvbiBmbG93KHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpOwogIGlmIChzdGF0ZS5mbG93aW5nKSB7CiAgICBkbyB7CiAgICAgIHZhciBjaHVuayA9IHN0cmVhbS5yZWFkKCk7CiAgICB9IHdoaWxlIChudWxsICE9PSBjaHVuayAmJiBzdGF0ZS5mbG93aW5nKTsKICB9Cn0KCi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuCi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS4KLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuClJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CiAgdmFyIHBhdXNlZCA9IGZhbHNlOwoKICB2YXIgc2VsZiA9IHRoaXM7CiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7CiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTsKICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkgewogICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpOwogICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBzZWxmLnB1c2goY2h1bmspOwogICAgfQoKICAgIHNlbGYucHVzaChudWxsKTsKICB9KTsKCiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7CiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7CiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKCiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGUKICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjsKCiAgICB2YXIgcmV0ID0gc2VsZi5wdXNoKGNodW5rKTsKICAgIGlmICghcmV0KSB7CiAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgIHN0cmVhbS5wYXVzZSgpOwogICAgfQogIH0pOwoKICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuCiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuCiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHsKICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oaSk7CiAgICB9CiAgfQoKICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuCiAgdmFyIGV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTsKICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24gKGV2KSB7CiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7CiAgfSk7CgogIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGUKICAvLyB1bmRlcmx5aW5nIHN0cmVhbS4KICBzZWxmLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7CiAgICBpZiAocGF1c2VkKSB7CiAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICBzdHJlYW0ucmVzdW1lKCk7CiAgICB9CiAgfTsKCiAgcmV0dXJuIHNlbGY7Cn07CgovLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuClJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0OwoKLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLgovLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LgpmdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkgewogIHZhciBsaXN0ID0gc3RhdGUuYnVmZmVyOwogIHZhciBsZW5ndGggPSBzdGF0ZS5sZW5ndGg7CiAgdmFyIHN0cmluZ01vZGUgPSAhIXN0YXRlLmRlY29kZXI7CiAgdmFyIG9iamVjdE1vZGUgPSAhIXN0YXRlLm9iamVjdE1vZGU7CiAgdmFyIHJldDsKCiAgLy8gbm90aGluZyBpbiB0aGUgbGlzdCwgZGVmaW5pdGVseSBlbXB0eS4KICBpZiAobGlzdC5sZW5ndGggPT09IDApIHJldHVybiBudWxsOwoKICBpZiAobGVuZ3RoID09PSAwKSByZXQgPSBudWxsO2Vsc2UgaWYgKG9iamVjdE1vZGUpIHJldCA9IGxpc3Quc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IGxlbmd0aCkgewogICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBhcnJheS4KICAgIGlmIChzdHJpbmdNb2RlKSByZXQgPSBsaXN0LmpvaW4oJycpO2Vsc2UgaWYgKGxpc3QubGVuZ3RoID09PSAxKSByZXQgPSBsaXN0WzBdO2Vsc2UgcmV0ID0gQnVmZmVyLmNvbmNhdChsaXN0LCBsZW5ndGgpOwogICAgbGlzdC5sZW5ndGggPSAwOwogIH0gZWxzZSB7CiAgICAvLyByZWFkIGp1c3Qgc29tZSBvZiBpdC4KICAgIGlmIChuIDwgbGlzdFswXS5sZW5ndGgpIHsKICAgICAgLy8ganVzdCB0YWtlIGEgcGFydCBvZiB0aGUgZmlyc3QgbGlzdCBpdGVtLgogICAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy4KICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07CiAgICAgIHJldCA9IGJ1Zi5zbGljZSgwLCBuKTsKICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShuKTsKICAgIH0gZWxzZSBpZiAobiA9PT0gbGlzdFswXS5sZW5ndGgpIHsKICAgICAgLy8gZmlyc3QgbGlzdCBpcyBhIHBlcmZlY3QgbWF0Y2gKICAgICAgcmV0ID0gbGlzdC5zaGlmdCgpOwogICAgfSBlbHNlIHsKICAgICAgLy8gY29tcGxleCBjYXNlLgogICAgICAvLyB3ZSBoYXZlIGVub3VnaCB0byBjb3ZlciBpdCwgYnV0IGl0IHNwYW5zIHBhc3QgdGhlIGZpcnN0IGJ1ZmZlci4KICAgICAgaWYgKHN0cmluZ01vZGUpIHJldCA9ICcnO2Vsc2UgcmV0ID0gbmV3IEJ1ZmZlcihuKTsKCiAgICAgIHZhciBjID0gMDsKICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGwgJiYgYyA8IG47IGkrKykgewogICAgICAgIHZhciBidWYgPSBsaXN0WzBdOwogICAgICAgIHZhciBjcHkgPSBNYXRoLm1pbihuIC0gYywgYnVmLmxlbmd0aCk7CgogICAgICAgIGlmIChzdHJpbmdNb2RlKSByZXQgKz0gYnVmLnNsaWNlKDAsIGNweSk7ZWxzZSBidWYuY29weShyZXQsIGMsIDAsIGNweSk7CgogICAgICAgIGlmIChjcHkgPCBidWYubGVuZ3RoKSBsaXN0WzBdID0gYnVmLnNsaWNlKGNweSk7ZWxzZSBsaXN0LnNoaWZ0KCk7CgogICAgICAgIGMgKz0gY3B5OwogICAgICB9CiAgICB9CiAgfQoKICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CgogIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGEKICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uCiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignZW5kUmVhZGFibGUgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTsKCiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7CiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7CiAgICBwcm9jZXNzTmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7CiAgfQp9CgpmdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHsKICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC4KICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7CiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTsKICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlOwogICAgc3RyZWFtLmVtaXQoJ2VuZCcpOwogIH0KfQoKZnVuY3Rpb24gZm9yRWFjaCh4cywgZikgewogIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CiAgICBmKHhzW2ldLCBpKTsKICB9Cn0KCmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHsKICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC0xOwp9Cn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQp9LHsiLi9fc3RyZWFtX2R1cGxleCI6MjUsIl9wcm9jZXNzIjoyMywiYnVmZmVyIjo2LCJjb3JlLXV0aWwtaXMiOjgsImV2ZW50cyI6OSwiaW5oZXJpdHMiOjE2LCJpc2FycmF5IjoxOCwicHJvY2Vzcy1uZXh0aWNrLWFyZ3MiOjIyLCJzdHJpbmdfZGVjb2Rlci8iOjUyLCJ1dGlsIjo0fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvCi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgImZpbHRlciIsCi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlCi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGQKLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKQovLwovLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhCi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLAovLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW4KLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLgovLwovLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6Ci8vCi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZQovLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpCi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXMKLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbAovLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuCi8vCi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuCi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlCi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZQovLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdAovLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG8KLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LgovLwovLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsCi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsCi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmcKLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXMKLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueQovLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluCi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbAovLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluCi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbAovLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZAovLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LgovLwovLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rCi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWwKLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuCgondXNlIHN0cmljdCc7Cgptb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTsKCnZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7CgovKjxyZXBsYWNlbWVudD4qLwp2YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgp1dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTsKCmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKHN0cmVhbSkgewogIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZXIsIGRhdGEpIHsKICAgIHJldHVybiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKTsKICB9OwoKICB0aGlzLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTsKICB0aGlzLnRyYW5zZm9ybWluZyA9IGZhbHNlOwogIHRoaXMud3JpdGVjYiA9IG51bGw7CiAgdGhpcy53cml0ZWNodW5rID0gbnVsbDsKICB0aGlzLndyaXRlZW5jb2RpbmcgPSBudWxsOwp9CgpmdW5jdGlvbiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKSB7CiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTsKICB0cy50cmFuc2Zvcm1pbmcgPSBmYWxzZTsKCiAgdmFyIGNiID0gdHMud3JpdGVjYjsKCiAgaWYgKCFjYikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm8gd3JpdGVjYiBpbiBUcmFuc2Zvcm0gY2xhc3MnKSk7CgogIHRzLndyaXRlY2h1bmsgPSBudWxsOwogIHRzLndyaXRlY2IgPSBudWxsOwoKICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQpIHN0cmVhbS5wdXNoKGRhdGEpOwoKICBjYihlcik7CgogIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTsKICBycy5yZWFkaW5nID0gZmFsc2U7CiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7CiAgICBzdHJlYW0uX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7CiAgfQp9CgpmdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykgewogIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTsKCiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7CgogIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0gbmV3IFRyYW5zZm9ybVN0YXRlKHRoaXMpOwoKICAvLyB3aGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuCiAgdmFyIHN0cmVhbSA9IHRoaXM7CgogIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLgogIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKCiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzCiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZQogIC8vIHN5bmMgZ3VhcmQgZmxhZy4KICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtOwoKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoOwogIH0KCiAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7CiAgICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIpIHsKICAgICAgZG9uZShzdHJlYW0sIGVyKTsKICAgIH0pO2Vsc2UgZG9uZShzdHJlYW0pOwogIH0pOwp9CgpUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlOwogIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpOwp9OwoKLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhCi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy4KLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay4KLy8KLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0Ci8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuCi8vCi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzCi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3UKLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay4KVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpOwp9OwoKVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlOwogIHRzLndyaXRlY2IgPSBjYjsKICB0cy53cml0ZWNodW5rID0gY2h1bms7CiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nOwogIGlmICghdHMudHJhbnNmb3JtaW5nKSB7CiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwogICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7CiAgfQp9OwoKLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS4KLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay4KLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS4KVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7CiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7CgogIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykgewogICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTsKICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7CiAgfSBlbHNlIHsKICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW4KICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LgogICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7CiAgfQp9OwoKZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyKSB7CiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwoKICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zCiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkCiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlOwogIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7CgogIGlmICh3cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7CgogIGlmICh0cy50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpOwoKICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7Cn0KfSx7Ii4vX3N0cmVhbV9kdXBsZXgiOjI1LCJjb3JlLXV0aWwtaXMiOjgsImluaGVyaXRzIjoxNn1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzKXsKLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuCi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbAovLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy4KCid1c2Ugc3RyaWN0JzsKCm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7CgovKjxyZXBsYWNlbWVudD4qLwp2YXIgcHJvY2Vzc05leHRUaWNrID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwp2YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcHJvY2Vzc05leHRUaWNrOwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7Ci8qPC9yZXBsYWNlbWVudD4qLwoKV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7CgovKjxyZXBsYWNlbWVudD4qLwp2YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpOwp1dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKLyo8L3JlcGxhY2VtZW50PiovCgovKjxyZXBsYWNlbWVudD4qLwp2YXIgaW50ZXJuYWxVdGlsID0gewogIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKQp9OwovKjwvcmVwbGFjZW1lbnQ+Ki8KCi8qPHJlcGxhY2VtZW50PiovCnZhciBTdHJlYW07CihmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIFN0cmVhbSA9IHJlcXVpcmUoJ3N0JyArICdyZWFtJyk7CiAgfSBjYXRjaCAoXykge30gZmluYWxseSB7CiAgICBpZiAoIVN0cmVhbSkgU3RyZWFtID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyOwogIH0KfSkoKTsKLyo8L3JlcGxhY2VtZW50PiovCgp2YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyOwoKdXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTsKCmZ1bmN0aW9uIG5vcCgpIHt9CgpmdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgdGhpcy5jaHVuayA9IGNodW5rOwogIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZzsKICB0aGlzLmNhbGxiYWNrID0gY2I7CiAgdGhpcy5uZXh0ID0gbnVsbDsKfQoKdmFyIER1cGxleDsKZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHsKICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpOwoKICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtCiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLgogIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlOwoKICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTsKCiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZQogIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmCiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKQogIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7CiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDsKICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTsKCiAgLy8gY2FzdCB0byBpbnRzLgogIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyazsKCiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTsKICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKQogIHRoaXMuZW5kaW5nID0gZmFsc2U7CiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZAogIHRoaXMuZW5kZWQgPSBmYWxzZTsKICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWQKICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7CgogIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlPwogIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZwogIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuCiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTsKICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7CgogIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmcKICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuCiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgogIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnOwoKICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudAogIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmcKICAvLyBzb2NrZXQgb3IgZmlsZS4KICB0aGlzLmxlbmd0aCA9IDA7CgogIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuCiAgdGhpcy53cml0aW5nID0gZmFsc2U7CgogIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGwKICB0aGlzLmNvcmtlZCA9IDA7CgogIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LAogIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55CiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgImxhdGVyIiBzaG91bGQgZ2VuZXJhbGx5IGFsc28KICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC4KICB0aGlzLnN5bmMgPSB0cnVlOwoKICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoCiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3QKICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi4KICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsKCiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKQogIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikgewogICAgb253cml0ZShzdHJlYW0sIGVyKTsKICB9OwoKICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYikKICB0aGlzLndyaXRlY2IgPSBudWxsOwoKICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuCiAgdGhpcy53cml0ZWxlbiA9IDA7CgogIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOwoKICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrcwogIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZAogIHRoaXMucGVuZGluZ2NiID0gMDsKCiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNicwogIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zCiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlOwoKICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpbgogIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7CgogIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzCiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7CgogIC8vIGNyZWF0ZSB0aGUgdHdvIG9iamVjdHMgbmVlZGVkIHRvIHN0b3JlIHRoZSBjb3JrZWQgcmVxdWVzdHMKICAvLyB0aGV5IGFyZSBub3QgYSBsaW5rZWQgbGlzdCwgYXMgbm8gbmV3IGVsZW1lbnRzIGFyZSBpbnNlcnRlZCBpbiB0aGVyZQogIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7CiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpOwp9CgpXcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiB3cml0YWJsZVN0YXRlR2V0QnVmZmVyKCkgewogIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7CiAgdmFyIG91dCA9IFtdOwogIHdoaWxlIChjdXJyZW50KSB7CiAgICBvdXQucHVzaChjdXJyZW50KTsKICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7CiAgfQogIHJldHVybiBvdXQ7Cn07CgooZnVuY3Rpb24gKCkgewogIHRyeSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7CiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7CiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJykKICAgIH0pOwogIH0gY2F0Y2ggKF8pIHt9Cn0pKCk7Cgp2YXIgRHVwbGV4OwpmdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7CiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTsKCiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3QKICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuCiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdyaXRhYmxlKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpOwoKICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7CgogIC8vIGxlZ2FjeS4KICB0aGlzLndyaXRhYmxlID0gdHJ1ZTsKCiAgaWYgKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlOwoKICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2OwogIH0KCiAgU3RyZWFtLmNhbGwodGhpcyk7Cn0KCi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy4KV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7CiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUuIE5vdCByZWFkYWJsZS4nKSk7Cn07CgpmdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHsKICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpOwogIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiCiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwogIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpOwp9CgovLyBJZiB3ZSBnZXQgc29tZXRoaW5nIHRoYXQgaXMgbm90IGEgYnVmZmVyLCBzdHJpbmcsIG51bGwsIG9yIHVuZGVmaW5lZCwKLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci4KLy8gT3RoZXJ3aXNlIHN0cmVhbSBjaHVua3MgYXJlIGFsbCBjb25zaWRlcmVkIHRvIGJlIG9mIGxlbmd0aD0xLCBhbmQgdGhlCi8vIHdhdGVybWFya3MgZGV0ZXJtaW5lIGhvdyBtYW55IG9iamVjdHMgdG8ga2VlcCBpbiB0aGUgYnVmZmVyLCByYXRoZXIgdGhhbgovLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLgpmdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikgewogIHZhciB2YWxpZCA9IHRydWU7CgogIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHsKICAgIHZhciBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTsKICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsKICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpOwogICAgdmFsaWQgPSBmYWxzZTsKICB9CiAgcmV0dXJuIHZhbGlkOwp9CgpXcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewogIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7CiAgdmFyIHJldCA9IGZhbHNlOwoKICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGVuY29kaW5nOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0KCiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZzsKCiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7CgogIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkgewogICAgc3RhdGUucGVuZGluZ2NiKys7CiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKTsKICB9CgogIHJldHVybiByZXQ7Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICBzdGF0ZS5jb3JrZWQrKzsKfTsKCldyaXRhYmxlLnByb3RvdHlwZS51bmNvcmsgPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTsKCiAgaWYgKHN0YXRlLmNvcmtlZCkgewogICAgc3RhdGUuY29ya2VkLS07CgogICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkgY2xlYXJCdWZmZXIodGhpcywgc3RhdGUpOwogIH0KfTsKCldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHsKICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS4KICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykgZW5jb2RpbmcgPSBlbmNvZGluZy50b0xvd2VyQ2FzZSgpOwogIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7CiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZzsKfTsKCmZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHsKICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykgewogICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7CiAgfQogIHJldHVybiBjaHVuazsKfQoKLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzCi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlCi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuCmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYikgewogIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7CgogIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInOwogIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKCiAgc3RhdGUubGVuZ3RoICs9IGxlbjsKCiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7CiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuCiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7CgogIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkgewogICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0OwogICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKTsKICAgIGlmIChsYXN0KSB7CiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7CiAgICB9IGVsc2UgewogICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0OwogICAgfQogICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTsKICB9IGVsc2UgewogICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHsKICBzdGF0ZS53cml0ZWxlbiA9IGxlbjsKICBzdGF0ZS53cml0ZWNiID0gY2I7CiAgc3RhdGUud3JpdGluZyA9IHRydWU7CiAgc3RhdGUuc3luYyA9IHRydWU7CiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpOwogIHN0YXRlLnN5bmMgPSBmYWxzZTsKfQoKZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikgewogIC0tc3RhdGUucGVuZGluZ2NiOwogIGlmIChzeW5jKSBwcm9jZXNzTmV4dFRpY2soY2IsIGVyKTtlbHNlIGNiKGVyKTsKCiAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7CiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwp9CgpmdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHsKICBzdGF0ZS53cml0aW5nID0gZmFsc2U7CiAgc3RhdGUud3JpdGVjYiA9IG51bGw7CiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuOwogIHN0YXRlLndyaXRlbGVuID0gMDsKfQoKZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7CiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlOwogIHZhciBzeW5jID0gc3RhdGUuc3luYzsKICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiOwoKICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpOwoKICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2UgewogICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXQKICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpOwoKICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHsKICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7CiAgICB9CgogICAgaWYgKHN5bmMpIHsKICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki8KICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwogICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki8KICAgIH0gZWxzZSB7CiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwogICAgICB9CiAgfQp9CgpmdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikgewogIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTsKICBzdGF0ZS5wZW5kaW5nY2ItLTsKICBjYigpOwogIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpOwp9CgovLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndAovLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuCi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuCmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7CiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHsKICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlOwogICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7CiAgfQp9CgovLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdApmdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7CiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7CiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0OwoKICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkgewogICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKQogICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDsKICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7CiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlOwogICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7CgogICAgdmFyIGNvdW50ID0gMDsKICAgIHdoaWxlIChlbnRyeSkgewogICAgICBidWZmZXJbY291bnRdID0gZW50cnk7CiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDsKICAgICAgY291bnQgKz0gMTsKICAgIH0KCiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7CgogICAgLy8gZG9Xcml0ZSBpcyBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZQogICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlCiAgICBzdGF0ZS5wZW5kaW5nY2IrKzsKICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOwogICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7CiAgICBob2xkZXIubmV4dCA9IG51bGw7CiAgfSBlbHNlIHsKICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmUKICAgIHdoaWxlIChlbnRyeSkgewogICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuazsKICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7CiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrOwogICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7CgogICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwogICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuCiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuCiAgICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHkKICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uCiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsOwogIH0KCiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOwogIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5OwogIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsKfQoKV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CiAgY2IobmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7Cn07CgpXcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7CgpXcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHsKICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGNodW5rOwogICAgY2h1bmsgPSBudWxsOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICBjYiA9IGVuY29kaW5nOwogICAgZW5jb2RpbmcgPSBudWxsOwogIH0KCiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsKCiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3MKICBpZiAoc3RhdGUuY29ya2VkKSB7CiAgICBzdGF0ZS5jb3JrZWQgPSAxOwogICAgdGhpcy51bmNvcmsoKTsKICB9CgogIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy4KICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7Cn07CgpmdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7CiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZzsKfQoKZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHsKICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkKSB7CiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7CiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7CiAgfQp9CgpmdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7CiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTsKICBpZiAobmVlZCkgewogICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkgewogICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7CiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTsKICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpOwogICAgfSBlbHNlIHsKICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpOwogICAgfQogIH0KICByZXR1cm4gbmVlZDsKfQoKZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHsKICBzdGF0ZS5lbmRpbmcgPSB0cnVlOwogIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpOwogIGlmIChjYikgewogICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwcm9jZXNzTmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTsKICB9CiAgc3RhdGUuZW5kZWQgPSB0cnVlOwogIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlOwp9CgovLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3QKLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtCmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHsKICB2YXIgX3RoaXMgPSB0aGlzOwoKICB0aGlzLm5leHQgPSBudWxsOwogIHRoaXMuZW50cnkgPSBudWxsOwoKICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uIChlcnIpIHsKICAgIHZhciBlbnRyeSA9IF90aGlzLmVudHJ5OwogICAgX3RoaXMuZW50cnkgPSBudWxsOwogICAgd2hpbGUgKGVudHJ5KSB7CiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrOwogICAgICBzdGF0ZS5wZW5kaW5nY2ItLTsKICAgICAgY2IoZXJyKTsKICAgICAgZW50cnkgPSBlbnRyeS5uZXh0OwogICAgfQogICAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkgewogICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IF90aGlzOwogICAgfSBlbHNlIHsKICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gX3RoaXM7CiAgICB9CiAgfTsKfQp9KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSkKfSx7Ii4vX3N0cmVhbV9kdXBsZXgiOjI1LCJfcHJvY2VzcyI6MjMsImJ1ZmZlciI6NiwiY29yZS11dGlsLWlzIjo4LCJldmVudHMiOjksImluaGVyaXRzIjoxNiwicHJvY2Vzcy1uZXh0aWNrLWFyZ3MiOjIyLCJ1dGlsLWRlcHJlY2F0ZSI6NTN9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIpCgp9LHsiLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyI6MjZ9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBTdHJlYW0gPSAoZnVuY3Rpb24gKCl7CiAgdHJ5IHsKICAgIHJldHVybiByZXF1aXJlKCdzdCcgKyAncmVhbScpOyAvLyBoYWNrIHRvIGZpeCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWUgd2hlbiB1c2VkIHdpdGggYnJvd3NlcmlmeQogIH0gY2F0Y2goXyl7fQp9KCkpOwpleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7CmV4cG9ydHMuU3RyZWFtID0gU3RyZWFtIHx8IGV4cG9ydHM7CmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzOwpleHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpOwpleHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7CmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTsKZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTsKCn0seyIuL2xpYi9fc3RyZWFtX2R1cGxleC5qcyI6MjUsIi4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiOjI2LCIuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIjoyNywiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiOjI4LCIuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIjoyOX1dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCIuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIpCgp9LHsiLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiOjI4fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoIi4vbGliL19zdHJlYW1fd3JpdGFibGUuanMiKQoKfSx7Ii4vbGliL19zdHJlYW1fd3JpdGFibGUuanMiOjI5fV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIF9QZXJzaXN0ZW5jZU1hbmFnZXI9cmVxdWlyZSgiLi9wZXJzaXN0ZW5jZS9QZXJzaXN0ZW5jZU1hbmFnZXIiKSxfUGVyc2lzdGVuY2VNYW5hZ2VyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QZXJzaXN0ZW5jZU1hbmFnZXIpO2V4cG9ydHNbImRlZmF1bHQiXT1fUGVyc2lzdGVuY2VNYW5hZ2VyMlsiZGVmYXVsdCJdLG1vZHVsZS5leHBvcnRzPWV4cG9ydHNbImRlZmF1bHQiXTsKCgp9LHsiLi9wZXJzaXN0ZW5jZS9QZXJzaXN0ZW5jZU1hbmFnZXIiOjM2fV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZXhwb3J0cy5EYXRhT2JqZWN0T2JzZXJ2ZXI9ZXhwb3J0cy5EYXRhT2JqZWN0UmVwb3J0ZXI9ZXhwb3J0cy5TeW5jaGVyPXZvaWQgMCxyZXF1aXJlKCJvYmplY3Qub2JzZXJ2ZSIpLHJlcXVpcmUoImFycmF5Lm9ic2VydmUiKTt2YXIgX1N5bmNoZXI9cmVxdWlyZSgiLi9zeW5jaGVyL1N5bmNoZXIiKSxfU3luY2hlcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY2hlciksX0RhdGFPYmplY3RSZXBvcnRlcj1yZXF1aXJlKCIuL3N5bmNoZXIvRGF0YU9iamVjdFJlcG9ydGVyIiksX0RhdGFPYmplY3RSZXBvcnRlcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdFJlcG9ydGVyKSxfRGF0YU9iamVjdE9ic2VydmVyPXJlcXVpcmUoIi4vc3luY2hlci9EYXRhT2JqZWN0T2JzZXJ2ZXIiKSxfRGF0YU9iamVjdE9ic2VydmVyMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0T2JzZXJ2ZXIpO2V4cG9ydHMuU3luY2hlcj1fU3luY2hlcjJbImRlZmF1bHQiXSxleHBvcnRzLkRhdGFPYmplY3RSZXBvcnRlcj1fRGF0YU9iamVjdFJlcG9ydGVyMlsiZGVmYXVsdCJdLGV4cG9ydHMuRGF0YU9iamVjdE9ic2VydmVyPV9EYXRhT2JqZWN0T2JzZXJ2ZXIyWyJkZWZhdWx0Il07CgoKfSx7Ii4vc3luY2hlci9EYXRhT2JqZWN0T2JzZXJ2ZXIiOjQxLCIuL3N5bmNoZXIvRGF0YU9iamVjdFJlcG9ydGVyIjo0MiwiLi9zeW5jaGVyL1N5bmNoZXIiOjQ1LCJhcnJheS5vYnNlcnZlIjoxLCJvYmplY3Qub2JzZXJ2ZSI6MjB9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgX3VuaXZlcnNhbExvY2Fsc3RvcmFnZT1yZXF1aXJlKCIuL3VuaXZlcnNhbC1sb2NhbHN0b3JhZ2UiKSxfdW5pdmVyc2FsTG9jYWxzdG9yYWdlMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91bml2ZXJzYWxMb2NhbHN0b3JhZ2UpLHBlcnNpc3RlbmNlTWFuYWdlcj17c2V0OmZ1bmN0aW9uKGUsdCxyKXtfdW5pdmVyc2FsTG9jYWxzdG9yYWdlMlsiZGVmYXVsdCJdLnNldEl0ZW0oZSxKU09OLnN0cmluZ2lmeSh7dmVyc2lvbjp0LHZhbHVlOnJ9KSl9LGdldDpmdW5jdGlvbihlKXt0cnl7cmV0dXJuIEpTT04ucGFyc2UoX3VuaXZlcnNhbExvY2Fsc3RvcmFnZTJbImRlZmF1bHQiXS5nZXRJdGVtKGUpKS52YWx1ZX1jYXRjaCh0KXt9fSxnZXRWZXJzaW9uOmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gSlNPTi5wYXJzZShfdW5pdmVyc2FsTG9jYWxzdG9yYWdlMlsiZGVmYXVsdCJdLmdldEl0ZW0oZSkpLnZlcnNpb259Y2F0Y2godCl7fX0sImRlbGV0ZSI6ZnVuY3Rpb24oZSl7X3VuaXZlcnNhbExvY2Fsc3RvcmFnZTJbImRlZmF1bHQiXS5yZW1vdmVJdGVtKGUpfX07ZXhwb3J0c1siZGVmYXVsdCJdPXBlcnNpc3RlbmNlTWFuYWdlcixtb2R1bGUuZXhwb3J0cz1leHBvcnRzWyJkZWZhdWx0Il07CgoKfSx7Ii4vdW5pdmVyc2FsLWxvY2Fsc3RvcmFnZSI6Mzh9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdy5sb2NhbFN0b3JhZ2UmJiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LnNlc3Npb25TdG9yYWdlfHxmdW5jdGlvbigpe3ZhciBuPWZ1bmN0aW9uKG4pe2Z1bmN0aW9uIGUobixlLHQpe3ZhciBvLGk7dD8obz1uZXcgRGF0ZSxvLnNldFRpbWUoby5nZXRUaW1lKCkrMjQqdCo2MCo2MCoxZTMpLGk9IjsgZXhwaXJlcz0iK28udG9HTVRTdHJpbmcoKSk6aT0iIixkb2N1bWVudC5jb29raWU9bisiPSIrZStpKyI7IHBhdGg9LyJ9ZnVuY3Rpb24gdChuKXt2YXIgZSx0LG89bisiPSIsaT1kb2N1bWVudC5jb29raWUuc3BsaXQoIjsiKTtmb3IoZT0wO2U8aS5sZW5ndGg7ZSsrKXtmb3IodD1pW2VdOyIgIj09dC5jaGFyQXQoMCk7KXQ9dC5zdWJzdHJpbmcoMSx0Lmxlbmd0aCk7aWYoMD09dC5pbmRleE9mKG8pKXJldHVybiB0LnN1YnN0cmluZyhvLmxlbmd0aCx0Lmxlbmd0aCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gbyh0KXt0PUpTT04uc3RyaW5naWZ5KHQpLCJzZXNzaW9uIj09bj93aW5kb3cubmFtZT10OmUoImxvY2FsU3RvcmFnZSIsdCwzNjUpfWZ1bmN0aW9uIGkoKXsic2Vzc2lvbiI9PW4/d2luZG93Lm5hbWU9IiI6ZSgibG9jYWxTdG9yYWdlIiwiIiwzNjUpfWZ1bmN0aW9uIHIoKXt2YXIgZT0ic2Vzc2lvbiI9PW4/d2luZG93Lm5hbWU6dCgibG9jYWxTdG9yYWdlIik7cmV0dXJuIGU/SlNPTi5wYXJzZShlKTp7fX12YXIgcz1yKCk7cmV0dXJue2xlbmd0aDowLGNsZWFyOmZ1bmN0aW9uKCl7cz17fSx0aGlzLmxlbmd0aD0wLGkoKX0sZ2V0SXRlbTpmdW5jdGlvbihuKXtyZXR1cm4gdm9pZCAwPT09c1tuXT9udWxsOnNbbl19LGtleTpmdW5jdGlvbihuKXt2YXIgZT0wO2Zvcih2YXIgdCBpbiBzKXtpZihlPT1uKXJldHVybiB0O2UrK31yZXR1cm4gbnVsbH0scmVtb3ZlSXRlbTpmdW5jdGlvbihuKXtkZWxldGUgc1tuXSx0aGlzLmxlbmd0aC0tLG8ocyl9LHNldEl0ZW06ZnVuY3Rpb24obixlKXtzW25dPWUrIiIsdGhpcy5sZW5ndGgrKyxvKHMpfX19OyJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZSYmKHdpbmRvdy5sb2NhbFN0b3JhZ2U9bmV3IG4oImxvY2FsIikpLCJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93LnNlc3Npb25TdG9yYWdlJiYod2luZG93LnNlc3Npb25TdG9yYWdlPW5ldyBuKCJzZXNzaW9uIikpfSgpOwoKCn0se31dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbG9jYWxTdG9yYWdlPXZvaWQgMDtpZigidW5kZWZpbmVkIj09dHlwZW9mIHdpbmRvdyl7dmFyIExvY2FsU3RvcmFnZT1yZXF1aXJlKCJub2RlLWxvY2Fsc3RvcmFnZSIpLkxvY2FsU3RvcmFnZTtsb2NhbFN0b3JhZ2U9bmV3IExvY2FsU3RvcmFnZSgiLi91bHMtc2NyYXRjaCIpfWVsc2UgbG9jYWxTdG9yYWdlPSJ1bmRlZmluZWQiPT10eXBlb2Ygd2luZG93LmxvY2FsU3RvcmFnZXx8InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3cuc2Vzc2lvblN0b3JhZ2U/cmVxdWlyZSgiLi9yZW0tbG9jYWxzdG9yYWdlIik6d2luZG93LmxvY2FsU3RvcmFnZTtleHBvcnRzWyJkZWZhdWx0Il09bG9jYWxTdG9yYWdlLG1vZHVsZS5leHBvcnRzPWV4cG9ydHNbImRlZmF1bHQiXTsKCgp9LHsiLi9yZW0tbG9jYWxzdG9yYWdlIjozNywibm9kZS1sb2NhbHN0b3JhZ2UiOjE5fV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxuLHIpe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLHImJmUodCxyKSx0fX0oKSxfU3luY09iamVjdD1yZXF1aXJlKCIuL1N5bmNPYmplY3QiKSxfU3luY09iamVjdDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY09iamVjdCksX0RhdGFPYmplY3RDaGlsZD1yZXF1aXJlKCIuL0RhdGFPYmplY3RDaGlsZCIpLF9EYXRhT2JqZWN0Q2hpbGQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RDaGlsZCksX3V0aWxzPXJlcXVpcmUoIi4uL3V0aWxzL3V0aWxzLmpzIiksRGF0YU9iamVjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLHIsbyxhLGMpe19jbGFzc0NhbGxDaGVjayh0aGlzLGUpO3ZhciBpPXRoaXM7aS5fc3luY2hlcj10LGkuX3VybD1uLGkuX3NjaGVtYT1yLGkuX3N0YXR1cz1vLGkuX3N5bmNPYmo9bmV3IF9TeW5jT2JqZWN0MlsiZGVmYXVsdCJdKGEpLGkuX2NoaWxkcmVucz1jLGkuX3ZlcnNpb249MCxpLl9jaGlsZElkPTAsaS5fY2hpbGRyZW5PYmplY3RzPXt9LGkuX2NoaWxkcmVuTGlzdGVuZXJzPVtdLGkuX293bmVyPXQuX293bmVyLGkuX2J1cz10Ll9idXN9cmV0dXJuIF9jcmVhdGVDbGFzcyhlLFt7a2V5OiJfYWxsb2NhdGVMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMsbj10Ll91cmwrIi9jaGlsZHJlbi8iO3QuX2NoaWxkcmVucyYmdC5fY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24ocil7dmFyIG89bityLGE9dC5fYnVzLmFkZExpc3RlbmVyKG8sZnVuY3Rpb24obil7aWYobi5mcm9tIT09ZS5fb3duZXIpc3dpdGNoKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0LUNoaWxkcmVuLVJDVjogIixuKSxuLnR5cGUpe2Nhc2UiY3JlYXRlIjp0Ll9vbkNoaWxkQ3JlYXRlKG4pO2JyZWFrO2Nhc2UiZGVsZXRlIjpjb25zb2xlLmxvZyhuKTticmVhaztkZWZhdWx0OnQuX2NoYW5nZUNoaWxkcmVuKG4pfX0pO3QuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goYSl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZSgpfSksT2JqZWN0LmtleXMoZS5fY2hpbGRyZW5PYmplY3RzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuX2NoaWxkcmVuT2JqZWN0c1t0XS5fcmVsZWFzZUxpc3RlbmVycygpfSl9fSx7a2V5OiJwYXVzZSIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyJOb3QgaW1wbGVtZW50ZWQifX0se2tleToicmVzdW1lIix2YWx1ZTpmdW5jdGlvbigpe3Rocm93Ik5vdCBpbXBsZW1lbnRlZCJ9fSx7a2V5OiJzdG9wIix2YWx1ZTpmdW5jdGlvbigpe3Rocm93Ik5vdCBpbXBsZW1lbnRlZCJ9fSx7a2V5OiJhZGRDaGlsZCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO24uX2NoaWxkSWQrKzt2YXIgcj1uLl9vd25lcisiIyIrbi5fY2hpbGRJZCxvPW4uX3VybCsiL2NoaWxkcmVuLyIrZSxhPXt0eXBlOiJjcmVhdGUiLGZyb206bi5fb3duZXIsdG86byxib2R5OntyZXNvdXJjZTpyLHZhbHVlOnR9fTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7dmFyIGM9bi5fYnVzLnBvc3RNZXNzYWdlKGEpO2NvbnNvbGUubG9nKCJjcmVhdGUtcmVwb3J0ZXItY2hpbGQoICIrbi5fb3duZXIrIiApOiAiLGEpO3ZhciBpPW5ldyBfRGF0YU9iamVjdENoaWxkMlsiZGVmYXVsdCJdKG4scix0LG4uX293bmVyLGMpO2kub25DaGFuZ2UoZnVuY3Rpb24oZSl7bi5fb25DaGFuZ2UoZSx7cGF0aDpvLGNoaWxkSWQ6cn0pfSksbi5fY2hpbGRyZW5PYmplY3RzW3JdPWksZShpKX0pfX0se2tleToib25BZGRDaGlsZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25BZGRDaGlsZHJlbkhhbmRsZXI9ZX19LHtrZXk6Il9vbkNoaWxkQ3JlYXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5ib2R5LnJlc291cmNlO2NvbnNvbGUubG9nKCJjcmVhdGUtb2JzZXJ2ZXItY2hpbGQoICIrdC5fb3duZXIrIiApOiAiLGUpO3ZhciByPW5ldyBfRGF0YU9iamVjdENoaWxkMlsiZGVmYXVsdCJdKHQsbixlLmJvZHkudmFsdWUpO3QuX2NoaWxkcmVuT2JqZWN0c1tuXT1yLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDAsc291cmNlOnQuX293bmVyfX0pfSk7dmFyIG89e3R5cGU6ZS50eXBlLGZyb206ZS5mcm9tLHVybDplLnRvLHZhbHVlOmUuYm9keS52YWx1ZSxjaGlsZElkOm4saWRlbnRpdHk6ZS5ib2R5LmlkZW50aXR5fTt0Ll9vbkFkZENoaWxkcmVuSGFuZGxlciYmKGNvbnNvbGUubG9nKCJBREQtQ0hJTERSRU4tRVZFTlQ6ICIsbyksdC5fb25BZGRDaGlsZHJlbkhhbmRsZXIobykpfX0se2tleToiX29uQ2hhbmdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYobi5fdmVyc2lvbisrLCJvbiI9PT1uLl9zdGF0dXMpe3ZhciByPXt0eXBlOiJ1cGRhdGUiLGZyb206bi5fdXJsLHRvOm4uX3VybCsiL2NoYW5nZXMiLGJvZHk6e3ZlcnNpb246bi5fdmVyc2lvbixzb3VyY2U6bi5fb3duZXIsYXR0cmlidXRlOmUuZmllbGR9fTtlLm9UeXBlPT09X1N5bmNPYmplY3QuT2JqZWN0VHlwZS5PQkpFQ1Q/ZS5jVHlwZSE9PV9TeW5jT2JqZWN0LkNoYW5nZVR5cGUuUkVNT1ZFJiYoci5ib2R5LnZhbHVlPWUuZGF0YSk6KHIuYm9keS5hdHRyaWJ1dGVUeXBlPWUub1R5cGUsci5ib2R5LnZhbHVlPWUuZGF0YSxlLmNUeXBlIT09X1N5bmNPYmplY3QuQ2hhbmdlVHlwZS5VUERBVEUmJihyLmJvZHkub3BlcmF0aW9uPWUuY1R5cGUpKSx0JiYoci50bz10LnBhdGgsci5ib2R5LnJlc291cmNlPXQuY2hpbGRJZCksbi5fYnVzLnBvc3RNZXNzYWdlKHIpfX19LHtrZXk6Il9jaGFuZ2VPYmplY3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztpZihuLl92ZXJzaW9uKzE9PT10LmJvZHkudmVyc2lvbil7bi5fdmVyc2lvbisrO3ZhciByPXQuYm9keS5hdHRyaWJ1dGUsbz0oMCxfdXRpbHMuZGVlcENsb25lKSh0LmJvZHkudmFsdWUpLGE9ZS5maW5kQmVmb3JlKHIpO2lmKHQuYm9keS5hdHRyaWJ1dGVUeXBlPT09X1N5bmNPYmplY3QuT2JqZWN0VHlwZS5BUlJBWSlpZih0LmJvZHkub3BlcmF0aW9uPT09X1N5bmNPYmplY3QuQ2hhbmdlVHlwZS5BREQpe3ZhciBjPWEub2JqLGk9YS5sYXN0O0FycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYyxbaSwwXS5jb25jYXQobykpfWVsc2UgaWYodC5ib2R5Lm9wZXJhdGlvbj09PV9TeW5jT2JqZWN0LkNoYW5nZVR5cGUuUkVNT1ZFKXt2YXIgbD1hLm9iaixzPWEubGFzdDtsLnNwbGljZShzLG8pfWVsc2UgYS5vYmpbYS5sYXN0XT1vO2Vsc2UgdC5ib2R5LnZhbHVlP2Eub2JqW2EubGFzdF09bzpkZWxldGUgYS5vYmpbYS5sYXN0XX1lbHNlIGNvbnNvbGUubG9nKCJVTlNZTkNIUk9OSVpFRCBWRVJTSU9OOiAoZGF0YSA9PiAiK24uX3ZlcnNpb24rIiwgbXNnID0+ICIrdC5ib2R5LnZlcnNpb24rIikiKX19LHtrZXk6Il9jaGFuZ2VDaGlsZHJlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztjb25zb2xlLmxvZygiQ2hhbmdlIGNoaWxkcmVuOiAiLHQuX293bmVyLGUpO3ZhciBuPWUuYm9keS5yZXNvdXJjZSxyPXQuX2NoaWxkcmVuT2JqZWN0c1tuXTtyP3QuX2NoYW5nZU9iamVjdChyLl9zeW5jT2JqLGUpOmNvbnNvbGUubG9nKCJObyBjaGlsZHJlbiBmb3VuZCBmb3I6ICIsbil9fSx7a2V5OiJ1cmwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl91cmx9fSx7a2V5OiJzY2hlbWEiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY2hlbWF9fSx7a2V5OiJzdGF0dXMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zdGF0dXN9fSx7a2V5OiJkYXRhIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3luY09iai5kYXRhfX0se2tleToiY2hpbGRyZW5zIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRyZW5PYmplY3RzfX1dKSxlfSgpO2V4cG9ydHNbImRlZmF1bHQiXT1EYXRhT2JqZWN0LG1vZHVsZS5leHBvcnRzPWV4cG9ydHNbImRlZmF1bHQiXTsKCgp9LHsiLi4vdXRpbHMvdXRpbHMuanMiOjQ2LCIuL0RhdGFPYmplY3RDaGlsZCI6NDAsIi4vU3luY09iamVjdCI6NDR9XSw0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLG4pe2lmKCEoZSBpbnN0YW5jZW9mIG4pKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgX2NyZWF0ZUNsYXNzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLG4pe2Zvcih2YXIgdD0wO3Q8bi5sZW5ndGg7dCsrKXt2YXIgcj1uW3RdO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbihuLHQscil7cmV0dXJuIHQmJmUobi5wcm90b3R5cGUsdCksciYmZShuLHIpLG59fSgpLF9TeW5jT2JqZWN0PXJlcXVpcmUoIi4vU3luY09iamVjdCIpLF9TeW5jT2JqZWN0Mj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jT2JqZWN0KSxEYXRhT2JqZWN0Q2hpbGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4sdCxyLHMsbyl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsZSk7dmFyIGE9dGhpczthLl9wYXJlbnQ9bixhLl9jaGlsZElkPXQsYS5fb3duZXI9cyxhLl9tc2dJZD1vLGEuX3N5bmNPYmo9bmV3IF9TeW5jT2JqZWN0MlsiZGVmYXVsdCJdKHIpLGEuX2J1cz1uLl9idXMsYS5fYWxsb2NhdGVMaXN0ZW5lcnMoKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKGUsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuX293bmVyJiYoZS5fbGlzdGVuZXI9ZS5fYnVzLmFkZExpc3RlbmVyKGUuX293bmVyLGZ1bmN0aW9uKG4peyJyZXNwb25zZSI9PT1uLnR5cGUmJm4uaWQ9PT1lLl9tc2dJZCYmKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0Q2hpbGQub25SZXNwb25zZToiLG4pLGUuX29uUmVzcG9uc2UobikpfSkpfX0se2tleToiX3JlbGVhc2VMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztlLl9saXN0ZW5lciYmZS5fbGlzdGVuZXIucmVtb3ZlKCl9fSx7a2V5OiJkZWxldGUiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztkZWxldGUgZS5fcGFyZW50Ll9jaGlsZHJlbltlLl9jaGlsZElkXSxlLl9yZWxlYXNlTGlzdGVuZXJzKCl9fSx7a2V5OiJvbkNoYW5nZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uKG4pe2Uobil9KX19LHtrZXk6Im9uUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyPWV9fSx7a2V5OiJfb25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpcyx0PXt0eXBlOmUudHlwZSx1cmw6ZS5ib2R5LnNvdXJjZSxjb2RlOmUuYm9keS5jb2RlfTtuLl9vblJlc3BvbnNlSGFuZGxlciYmbi5fb25SZXNwb25zZUhhbmRsZXIodCl9fSx7a2V5OiJjaGlsZElkIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRJZH19LHtrZXk6ImRhdGEiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zeW5jT2JqLmRhdGF9fV0pLGV9KCk7ZXhwb3J0c1siZGVmYXVsdCJdPURhdGFPYmplY3RDaGlsZCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzWyJkZWZhdWx0Il07CgoKfSx7Ii4vU3luY09iamVjdCI6NDR9XSw0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPXR5cGVvZiB0JiYiZnVuY3Rpb24iIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gX2luaGVyaXRzKGUsdCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKSxfZ2V0PWZ1bmN0aW9uIGUodCxyLG4pe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZih2b2lkIDA9PT1hKXt2YXIgbz1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1vP3ZvaWQgMDplKG8scixuKX1pZigidmFsdWUiaW4gYSlyZXR1cm4gYS52YWx1ZTt2YXIgaT1hLmdldDtpZih2b2lkIDAhPT1pKXJldHVybiBpLmNhbGwobil9LF9EYXRhT2JqZWN0Mj1yZXF1aXJlKCIuL0RhdGFPYmplY3QiKSxfRGF0YU9iamVjdDM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpLF9EYXRhT2JqZWN0Q2hpbGQ9cmVxdWlyZSgiLi9EYXRhT2JqZWN0Q2hpbGQiKSxfRGF0YU9iamVjdENoaWxkMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Q2hpbGQpLEZpbHRlclR5cGU9e0FOWToiYW55IixTVEFSVDoic3RhcnQiLEVYQUNUOiJleGFjdCJ9LERhdGFPYmplY3RPYnNlcnZlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLGEsbyxpLGwpe19jbGFzc0NhbGxDaGVjayh0aGlzLHQpO3ZhciBzPV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsT2JqZWN0LmdldFByb3RvdHlwZU9mKHQpLmNhbGwodGhpcyxlLHIsbixhLG8uZGF0YSxpKSksYz1zO3JldHVybiBjLl92ZXJzaW9uPWwsYy5fZmlsdGVycz17fSxjLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24oZSl7Yy5fb25GaWx0ZXIoZSl9KSxPYmplY3Qua2V5cyhvLmNoaWxkcmVucykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1vLmNoaWxkcmVuc1tlXTtjLl9jaGlsZHJlbk9iamVjdHNbZV09bmV3IF9EYXRhT2JqZWN0Q2hpbGQyWyJkZWZhdWx0Il0oYyxlLHQpfSksYy5fYWxsb2NhdGVMaXN0ZW5lcnMoKSxzfXJldHVybiBfaW5oZXJpdHModCxlKSxfY3JlYXRlQ2xhc3ModCxbe2tleToiX2FsbG9jYXRlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe19nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSwiX2FsbG9jYXRlTGlzdGVuZXJzIix0aGlzKS5jYWxsKHRoaXMpO3ZhciBlPXRoaXM7ZS5fY2hhbmdlTGlzdGVuZXI9ZS5fYnVzLmFkZExpc3RlbmVyKGUuX3VybCsiL2NoYW5nZXMiLGZ1bmN0aW9uKHQpeyJ1cGRhdGUiPT09dC50eXBlJiYoY29uc29sZS5sb2coIkRhdGFPYmplY3RPYnNlcnZlci0iK2UuX3VybCsiLVJDVjogIix0KSxlLl9jaGFuZ2VPYmplY3QoZS5fc3luY09iaix0KSl9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe19nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSwiX3JlbGVhc2VMaXN0ZW5lcnMiLHRoaXMpLmNhbGwodGhpcyk7dmFyIGU9dGhpcztlLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKX19LHtrZXk6ImRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuX3JlbGVhc2VMaXN0ZW5lcnMoKSxkZWxldGUgZS5fc3luY2hlci5fb2JzZXJ2ZXJzW2UuX3VybF19fSx7a2V5OiJ1bnN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e3R5cGU6InVuc3Vic2NyaWJlIixmcm9tOmUuX293bmVyLHRvOmUuX3N5bmNoZXIuX3N1YlVSTCxib2R5OntyZXNvdXJjZTplLl91cmx9fTtlLl9idXMucG9zdE1lc3NhZ2UodCxmdW5jdGlvbih0KXtjb25zb2xlLmxvZygiRGF0YU9iamVjdE9ic2VydmVyLVVOU1VCU0NSSUJFOiAiLHQpLDIwMD09PXQuYm9keS5jb2RlJiYoZS5fcmVsZWFzZUxpc3RlbmVycygpLGRlbGV0ZSBlLl9zeW5jaGVyLl9vYnNlcnZlcnNbZS5fdXJsXSl9KX19LHtrZXk6Im9uQ2hhbmdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPWUsbj17dHlwZTpGaWx0ZXJUeXBlLkVYQUNULGNhbGxiYWNrOnR9LGE9ZS5pbmRleE9mKCIqIik7YT09PWUubGVuZ3RoLTEmJigwPT09YT9uLnR5cGU9RmlsdGVyVHlwZS5BTlk6KG4udHlwZT1GaWx0ZXJUeXBlLlNUQVJULHI9ZS5zdWJzdHIoMCxlLmxlbmd0aC0xKSkpLHRoaXMuX2ZpbHRlcnNbcl09bn19LHtrZXk6Il9vbkZpbHRlciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyh0Ll9maWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKHIpe3ZhciBuPXQuX2ZpbHRlcnNbcl07bi50eXBlPT09RmlsdGVyVHlwZS5BTlk/bi5jYWxsYmFjayhlKTpuLnR5cGU9PT1GaWx0ZXJUeXBlLlNUQVJUPzA9PT1lLmZpZWxkLmluZGV4T2YocikmJm4uY2FsbGJhY2soZSk6bi50eXBlPT09RmlsdGVyVHlwZS5FWEFDVCYmZS5maWVsZD09PXImJm4uY2FsbGJhY2soZSl9KX19XSksdH0oX0RhdGFPYmplY3QzWyJkZWZhdWx0Il0pO2V4cG9ydHNbImRlZmF1bHQiXT1EYXRhT2JqZWN0T2JzZXJ2ZXIsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1siZGVmYXVsdCJdOwoKCn0seyIuL0RhdGFPYmplY3QiOjM5LCIuL0RhdGFPYmplY3RDaGlsZCI6NDB9XSw0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPXR5cGVvZiB0JiYiZnVuY3Rpb24iIT10eXBlb2YgdD9lOnR9ZnVuY3Rpb24gX2luaGVyaXRzKGUsdCl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2YgdCk7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSx0KTplLl9fcHJvdG9fXz10KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIHI9dFtvXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24odCxvLHIpe3JldHVybiBvJiZlKHQucHJvdG90eXBlLG8pLHImJmUodCxyKSx0fX0oKSxfZ2V0PWZ1bmN0aW9uIGUodCxvLHIpe251bGw9PT10JiYodD1GdW5jdGlvbi5wcm90b3R5cGUpO3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxvKTtpZih2b2lkIDA9PT1uKXt2YXIgcz1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCk7cmV0dXJuIG51bGw9PT1zP3ZvaWQgMDplKHMsbyxyKX1pZigidmFsdWUiaW4gbilyZXR1cm4gbi52YWx1ZTt2YXIgYT1uLmdldDtpZih2b2lkIDAhPT1hKXJldHVybiBhLmNhbGwocil9LF9EYXRhT2JqZWN0Mj1yZXF1aXJlKCIuL0RhdGFPYmplY3QiKSxfRGF0YU9iamVjdDM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpLF91dGlscz1yZXF1aXJlKCIuLi91dGlscy91dGlscy5qcyIpLERhdGFPYmplY3RSZXBvcnRlcj1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUsbyxyLG4scyxhKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyx0KTt2YXIgaT1fcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLE9iamVjdC5nZXRQcm90b3R5cGVPZih0KS5jYWxsKHRoaXMsZSxvLHIsbixzLGEpKSxjPWk7cmV0dXJuIGMuX3N1YnNjcmlwdGlvbnM9e30sYy5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJEYXRhT2JqZWN0UmVwb3J0ZXItIitvKyItU0VORDogIixlKSxjLl9vbkNoYW5nZShlKX0pLGMuX2FsbG9jYXRlTGlzdGVuZXJzKCksaX1yZXR1cm4gX2luaGVyaXRzKHQsZSksX2NyZWF0ZUNsYXNzKHQsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXtfZ2V0KE9iamVjdC5nZXRQcm90b3R5cGVPZih0LnByb3RvdHlwZSksIl9hbGxvY2F0ZUxpc3RlbmVycyIsdGhpcykuY2FsbCh0aGlzKTt2YXIgZT10aGlzO2UuX29iamVjdExpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl91cmwsZnVuY3Rpb24odCl7c3dpdGNoKGNvbnNvbGUubG9nKCJEYXRhT2JqZWN0LSIrZS5fdXJsKyItUkNWOiAiLHQpLHQudHlwZSl7Y2FzZSJyZXNwb25zZSI6ZS5fb25SZXNwb25zZSh0KTticmVhaztjYXNlInJlYWQiOmUuX29uUmVhZCh0KX19KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe19nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKHQucHJvdG90eXBlKSwiX3JlbGVhc2VMaXN0ZW5lcnMiLHRoaXMpLmNhbGwodGhpcyk7dmFyIGU9dGhpcztlLl9vYmplY3RMaXN0ZW5lci5yZW1vdmUoKX19LHtrZXk6Imludml0ZU9ic2VydmVycyIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxvPXt0eXBlOiJjcmVhdGUiLGZyb206dC5fc3luY2hlci5fb3duZXIsdG86dC5fc3luY2hlci5fc3ViVVJMLGJvZHk6e3Jlc291cmNlOnQuX3VybCxzY2hlbWE6dC5fc2NoZW1hLHZhbHVlOnQuX3N5bmNPYmouZGF0YSxhdXRob3Jpc2U6ZX19O3QuX2J1cy5wb3N0TWVzc2FnZShvKX19LHtrZXk6ImRlbGV0ZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e3R5cGU6ImRlbGV0ZSIsZnJvbTplLl9vd25lcix0bzplLl9zeW5jaGVyLl9zdWJVUkwsYm9keTp7cmVzb3VyY2U6ZS5fdXJsfX07ZS5fYnVzLnBvc3RNZXNzYWdlKHQsZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIkRhdGFPYmplY3RSZXBvcnRlci1ERUxFVEU6ICIsdCksMjAwPT09dC5ib2R5LmNvZGUmJihlLl9yZWxlYXNlTGlzdGVuZXJzKCksZGVsZXRlIGUuX3N5bmNoZXIuX3JlcG9ydGVyc1tlLl91cmxdKX0pfX0se2tleToib25TdWJzY3JpcHRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcj1lfX0se2tleToib25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25SZXNwb25zZUhhbmRsZXI9ZX19LHtrZXk6Im9uUmVhZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25SZWFkSGFuZGxlcj1lfX0se2tleToiX29uRm9yd2FyZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztzd2l0Y2goY29uc29sZS5sb2coIkRhdGFPYmplY3RSZXBvcnRlci1SQ1Y6ICIsZSksZS5ib2R5LnR5cGUpe2Nhc2Uic3Vic2NyaWJlIjp0Ll9vblN1YnNjcmliZShlKTticmVhaztjYXNlInVuc3Vic2NyaWJlIjp0Ll9vblVuU3Vic2NyaWJlKGUpfX19LHtrZXk6Il9vblN1YnNjcmliZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxvPWUuYm9keS5mcm9tLHI9e3R5cGU6ZS5ib2R5LnR5cGUsdXJsOm8saWRlbnRpdHk6ZS5ib2R5LmlkZW50aXR5LGFjY2VwdDpmdW5jdGlvbigpe3ZhciByPXt1cmw6byxzdGF0dXM6Im9uIn07dC5fc3Vic2NyaXB0aW9uc1tvXT1yO3ZhciBuPXt9O3JldHVybiBPYmplY3Qua2V5cyh0Ll9jaGlsZHJlbk9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG89dC5fY2hpbGRyZW5PYmplY3RzW2VdLmRhdGE7bltlXT0oMCxfdXRpbHMuZGVlcENsb25lKShvKX0pLHQuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOjIwMCxzY2hlbWE6dC5fc2NoZW1hLHZlcnNpb246dC5fdmVyc2lvbix2YWx1ZTp7ZGF0YTooMCxfdXRpbHMuZGVlcENsb25lKSh0LmRhdGEpLGNoaWxkcmVuczpufX19KSxyfSxyZWplY3Q6ZnVuY3Rpb24obyl7dC5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6NDAzLGRlc2M6b319KX19O3QuX29uU3Vic2NyaXB0aW9uSGFuZGxlciYmKGNvbnNvbGUubG9nKCJTVUJTQ1JJUFRJT04tRVZFTlQ6ICIsciksdC5fb25TdWJzY3JpcHRpb25IYW5kbGVyKHIpKX19LHtrZXk6Il9vblVuU3Vic2NyaWJlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG89ZS5ib2R5LmZyb20scj10Ll9zdWJzY3JpcHRpb25zW29dO2RlbGV0ZSB0Ll9zdWJzY3JpcHRpb25zW29dO3ZhciBuPXt0eXBlOmUuYm9keS50eXBlLHVybDpvLG9iamVjdDpyfTt0Ll9vblN1YnNjcmlwdGlvbkhhbmRsZXImJihjb25zb2xlLmxvZygiVU4tU1VCU0NSSVBUSU9OLUVWRU5UOiAiLG4pLHQuX29uU3Vic2NyaXB0aW9uSGFuZGxlcihuKSl9fSx7a2V5OiJfb25SZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxvPXt0eXBlOmUudHlwZSx1cmw6ZS5mcm9tLGNvZGU6ZS5ib2R5LmNvZGV9O3QuX29uUmVzcG9uc2VIYW5kbGVyJiYoY29uc29sZS5sb2coIlJFU1BPTlNFLUVWRU5UOiAiLG8pLHQuX29uUmVzcG9uc2VIYW5kbGVyKG8pKX19LHtrZXk6Il9vblJlYWQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbz17dHlwZTplLnR5cGUsdXJsOmUuZnJvbSxhY2NlcHQ6ZnVuY3Rpb24oKXt0Ll9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZToyMDAsdmFsdWU6KDAsX3V0aWxzLmRlZXBDbG9uZSkodC5kYXRhKX19KX0scmVqZWN0OmZ1bmN0aW9uKG8pe3QuX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOjQwMSxkZXNjOm99fSl9fTt0Ll9vblJlYWRIYW5kbGVyJiYoY29uc29sZS5sb2coIlJFQUQtRVZFTlQ6ICIsbyksdC5fb25SZWFkSGFuZGxlcihvKSl9fSx7a2V5OiJzdWJzY3JpcHRpb25zIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc319XSksdH0oX0RhdGFPYmplY3QzWyJkZWZhdWx0Il0pO2V4cG9ydHNbImRlZmF1bHQiXT1EYXRhT2JqZWN0UmVwb3J0ZXIsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1siZGVmYXVsdCJdOwoKCn0seyIuLi91dGlscy91dGlscy5qcyI6NDYsIi4vRGF0YU9iamVjdCI6Mzl9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soZSxuKXtpZighKGUgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxuKXtmb3IodmFyIHQ9MDt0PG4ubGVuZ3RoO3QrKyl7dmFyIHI9blt0XTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24obix0LHIpe3JldHVybiB0JiZlKG4ucHJvdG90eXBlLHQpLHImJmUobixyKSxufX0oKSxEYXRhUHJvdmlzaW9uYWw9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4sdCxyLGEpe19jbGFzc0NhbGxDaGVjayh0aGlzLGUpO3ZhciBzPXRoaXM7cy5fb3duZXI9bixzLl91cmw9dCxzLl9idXM9cixzLl9jaGlsZHJlbj1hLHMuX2NoYW5nZXM9W10scy5fYWxsb2NhdGVMaXN0ZW5lcnMoKX1yZXR1cm4gX2NyZWF0ZUNsYXNzKGUsW3trZXk6Il9hbGxvY2F0ZUxpc3RlbmVycyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2UuX2xpc3RlbmVyPWUuX2J1cy5hZGRMaXN0ZW5lcihlLl91cmwsZnVuY3Rpb24obil7Y29uc29sZS5sb2coIkRhdGFQcm92aXNpb25hbC0iK2UuX3VybCsiLVJDVjogIixuKSxlLl9jaGFuZ2VzLnB1c2gobil9KX19LHtrZXk6Il9yZWxlYXNlTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7ZS5fbGlzdGVuZXIucmVtb3ZlKCl9fSx7a2V5OiJhcHBseSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztuLl9jaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24obil7ZS5fY2hhbmdlT2JqZWN0KGUuX3N5bmNPYmosbil9KX19LHtrZXk6ImNoaWxkcmVuIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY2hpbGRyZW59fV0pLGV9KCk7ZXhwb3J0c1siZGVmYXVsdCJdPURhdGFQcm92aXNpb25hbCxtb2R1bGUuZXhwb3J0cz1leHBvcnRzWyJkZWZhdWx0Il07CgoKfSx7fV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLGV4cG9ydHMuT2JqZWN0VHlwZT1leHBvcnRzLkNoYW5nZVR5cGU9dm9pZCAwO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19cmV0dXJuIGZ1bmN0aW9uKHQsbixyKXtyZXR1cm4gbiYmZSh0LnByb3RvdHlwZSxuKSxyJiZlKHQsciksdH19KCksX3V0aWxzPXJlcXVpcmUoIi4uL3V0aWxzL3V0aWxzLmpzIiksU3luY09iamVjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsZSk7dmFyIG49dGhpcztuLl9vYnNlcnZlcnM9W10sbi5fZmlsdGVycz17fSx0P24uX2RhdGE9KDAsX3V0aWxzLmRlZXBDbG9uZSkodCk6bi5fZGF0YT17fSxuLl9pbnRlcm5hbE9ic2VydmUobmV3IFBhdGgsbi5fZGF0YSl9cmV0dXJuIF9jcmVhdGVDbGFzcyhlLFt7a2V5OiJvYnNlcnZlIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vYnNlcnZlcnMucHVzaChlKX19LHtrZXk6ImZpbmQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoIi4iKTtyZXR1cm4gdGhpcy5fZmluZFdpdGhTcGxpdCh0KX19LHtrZXk6ImZpbmRCZWZvcmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXt9LG49ZS5zcGxpdCgiLiIpO3JldHVybiB0Lmxhc3Q9bi5wb3AoKSx0Lm9iaj10aGlzLl9maW5kV2l0aFNwbGl0KG4pLHR9fSx7a2V5OiJfZmluZFdpdGhTcGxpdCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fZGF0YTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3Q9dFtlXX0pLHR9fSx7a2V5OiJfZmlyZUV2ZW50Iix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbih0KXt0KGUpfSl9fSx7a2V5OiJfaXNPYnNlcnZhYmxlIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5jb25zdHJ1Y3Rvcj09PU9iamVjdHx8ZS5jb25zdHJ1Y3Rvcj09PUFycmF5fX0se2tleToiX2ludGVybmFsT2JzZXJ2ZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKG4uX2lzT2JzZXJ2YWJsZSh0KSl7dmFyIHI9ZnVuY3Rpb24odCl7bi5fb25DaGFuZ2VzKGUsdCl9O2lmKHQuY29uc3RydWN0b3I9PT1PYmplY3Qpe09iamVjdC5vYnNlcnZlKHQscik7Zm9yKHZhciBhIGluIHQpbi5faXNPYnNlcnZhYmxlKHRbYV0pJiZuLl9pbnRlcm5hbE9ic2VydmUoZVsibmV3Il0oYSksdFthXSl9ZWxzZSBpZih0LmNvbnN0cnVjdG9yPT09QXJyYXkpe0FycmF5Lm9ic2VydmUodCxyKTtmb3IodmFyIGkgaW4gdClpZihuLl9pc09ic2VydmFibGUodFtpXSkpe3ZhciBvPWVbIm5ldyJdKG5ldyBBcnJheUluZGV4KHRbaV0saSkpO24uX2ludGVybmFsT2JzZXJ2ZShvLHRbaV0pfX19fX0se2tleToiX29uQ2hhbmdlcyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2Zvcih2YXIgciBpbiB0KXt2YXIgYT10W3JdLm9iamVjdCxpPXZvaWQgMDtpZihhLmNvbnN0cnVjdG9yPT09T2JqZWN0JiYoaT1PYmplY3RUeXBlLk9CSkVDVCksYS5jb25zdHJ1Y3Rvcj09PUFycmF5JiYoaT1PYmplY3RUeXBlLkFSUkFZKSwic3BsaWNlIj09PXRbcl0udHlwZSkhZnVuY3Rpb24oKXt2YXIgbz10W3JdLmluZGV4LHM9ZVsibmV3Il0oIiIrbyksYz1zLnRvU3RyaW5nKCksbD10W3JdLnJlbW92ZWQubGVuZ3RoO2lmKDAhPT1sKXt2YXIgdT10W3JdLnJlbW92ZWQ7dS5mb3JFYWNoKGZ1bmN0aW9uKHQscil7bi5faXNPYnNlcnZhYmxlKHQpJiZlLnJlbW92ZUluZGV4KG8rcil9KSxuLl9maXJlRXZlbnQoe2NUeXBlOkNoYW5nZVR5cGUuUkVNT1ZFLG9UeXBlOmksZmllbGQ6YyxkYXRhOmx9KX12YXIgZj10W3JdLmFkZGVkQ291bnQ7aWYoMCE9PWYpe3ZhciB2PWEuc2xpY2UobyxvK2YpO3YuZm9yRWFjaChmdW5jdGlvbih0LHIpe2lmKG4uX2lzT2JzZXJ2YWJsZSh0KSl7dmFyIGE9ZVsibmV3Il0obmV3IEFycmF5SW5kZXgodCxvK3IpKTtuLl9pbnRlcm5hbE9ic2VydmUoYSx0KX19KSxuLl9maXJlRXZlbnQoe2NUeXBlOkNoYW5nZVR5cGUuQURELG9UeXBlOmksZmllbGQ6YyxkYXRhOigwLF91dGlscy5kZWVwQ2xvbmUpKHYpfSl9byE9PWEubGVuZ3RoLTEmJmUucmVJbmRleEZyb20oYSl9KCk7ZWxzZXt2YXIgbz1lWyJuZXciXSh0W3JdLm5hbWUpLHM9by50b1N0cmluZygpO2lmKHMuaW5kZXhPZigiU3ltYm9sIikhPT0tMSljb250aW51ZTt2YXIgYz1hW3Rbcl0ubmFtZV07InVwZGF0ZSI9PT10W3JdLnR5cGUmJnRoaXMuX2ZpcmVFdmVudCh7Y1R5cGU6Q2hhbmdlVHlwZS5VUERBVEUsb1R5cGU6aSxmaWVsZDpzLGRhdGE6KDAsX3V0aWxzLmRlZXBDbG9uZSkoYyl9KSwiYWRkIj09PXRbcl0udHlwZSYmKHRoaXMuX2ludGVybmFsT2JzZXJ2ZShvLGMpLHRoaXMuX2ZpcmVFdmVudCh7Y1R5cGU6Q2hhbmdlVHlwZS5BREQsb1R5cGU6aSxmaWVsZDpzLGRhdGE6KDAsX3V0aWxzLmRlZXBDbG9uZSkoYyl9KSksImRlbGV0ZSI9PT10W3JdLnR5cGUmJnRoaXMuX2ZpcmVFdmVudCh7Y1R5cGU6Q2hhbmdlVHlwZS5SRU1PVkUsb1R5cGU6aSxmaWVsZDpzfSl9fX19LHtrZXk6ImRhdGEiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfX1dKSxlfSgpLFBhdGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7X2NsYXNzQ2FsbENoZWNrKHRoaXMsZSksdGhpcy5fcGF0aD1bXSx0aGlzLl9vYnNlcnZhYmxlcz17fX1yZXR1cm4gX2NyZWF0ZUNsYXNzKGUsW3trZXk6InJlbW92ZUluZGV4Iix2YWx1ZTpmdW5jdGlvbihlKXtkZWxldGUgdGhpcy5fb2JzZXJ2YWJsZXNbZV19fSx7a2V5OiJyZUluZGV4RnJvbSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztPYmplY3Qua2V5cyh0aGlzLl9vYnNlcnZhYmxlcykuZm9yRWFjaChmdW5jdGlvbihuKXt2YXIgcj10Ll9vYnNlcnZhYmxlc1tuXSxhPWUuaW5kZXhPZihyLm9iaik7ci5pZHghPWEmJihyLmlkeD1hLGRlbGV0ZSB0Ll9vYnNlcnZhYmxlc1tuXSx0Ll9vYnNlcnZhYmxlc1thXT1yKX0pfX0se2tleToibmV3Iix2YWx1ZTpmdW5jdGlvbihlKXtlLmNvbnN0cnVjdG9yPT1BcnJheUluZGV4JiYodGhpcy5fb2JzZXJ2YWJsZXNbZS5pZHhdPWUpO3ZhciB0PXRoaXMuY2xvbmUoKTtyZXR1cm4gdC5fcGF0aC5wdXNoKGUpLHR9fSx7a2V5OiJjbG9uZSIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uZXcgZTtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuX3BhdGgucHVzaChlKX0pLHR9fSx7a2V5OiJ0b1N0cmluZyIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0iIjtyZXR1cm4gdGhpcy5fcGF0aC5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7MD09PW4/ZT10LnRvU3RyaW5nKCk6ZSs9Ii4iK3QudG9TdHJpbmcoKX0pLGV9fV0pLGV9KCksQXJyYXlJbmRleD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXtfY2xhc3NDYWxsQ2hlY2sodGhpcyxlKSx0aGlzLm9iaj10LHRoaXMuaWR4PW59cmV0dXJuIF9jcmVhdGVDbGFzcyhlLFt7a2V5OiJ0b1N0cmluZyIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZHgudG9TdHJpbmcoKX19XSksZX0oKSxDaGFuZ2VUeXBlPWV4cG9ydHMuQ2hhbmdlVHlwZT17VVBEQVRFOiJ1cGRhdGUiLEFERDoiYWRkIixSRU1PVkU6InJlbW92ZSJ9LE9iamVjdFR5cGU9ZXhwb3J0cy5PYmplY3RUeXBlPXtPQkpFQ1Q6Im9iamVjdCIsQVJSQVk6ImFycmF5In07ZXhwb3J0c1siZGVmYXVsdCJdPVN5bmNPYmplY3Q7CgoKfSx7Ii4uL3V0aWxzL3V0aWxzLmpzIjo0Nn1dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGUsbyl7aWYoIShlIGluc3RhbmNlb2YgbykpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsbyl7Zm9yKHZhciByPTA7cjxvLmxlbmd0aDtyKyspe3ZhciB0PW9bcl07dC5lbnVtZXJhYmxlPXQuZW51bWVyYWJsZXx8ITEsdC5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHQmJih0LndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LmtleSx0KX19cmV0dXJuIGZ1bmN0aW9uKG8scix0KXtyZXR1cm4gciYmZShvLnByb3RvdHlwZSxyKSx0JiZlKG8sdCksb319KCksX0RhdGFPYmplY3RSZXBvcnRlcj1yZXF1aXJlKCIuL0RhdGFPYmplY3RSZXBvcnRlciIpLF9EYXRhT2JqZWN0UmVwb3J0ZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RSZXBvcnRlciksX0RhdGFPYmplY3RPYnNlcnZlcj1yZXF1aXJlKCIuL0RhdGFPYmplY3RPYnNlcnZlciIpLF9EYXRhT2JqZWN0T2JzZXJ2ZXIyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RPYnNlcnZlciksX0RhdGFQcm92aXNpb25hbD1yZXF1aXJlKCIuL0RhdGFQcm92aXNpb25hbCIpLF9EYXRhUHJvdmlzaW9uYWwyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFQcm92aXNpb25hbCksU3luY2hlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobyxyLHQpe19jbGFzc0NhbGxDaGVjayh0aGlzLGUpO3ZhciBuPXRoaXM7bi5fb3duZXI9byxuLl9idXM9cixuLl9zdWJVUkw9dC5ydW50aW1lVVJMKyIvc20iLG4uX3JlcG9ydGVycz17fSxuLl9vYnNlcnZlcnM9e30sbi5fcHJvdmlzaW9uYWxzPXt9LHIuYWRkTGlzdGVuZXIobyxmdW5jdGlvbihlKXtpZihlLmZyb20hPT1vKXN3aXRjaChjb25zb2xlLmxvZygiU3luY2hlci1SQ1Y6ICIsZSksZS50eXBlKXtjYXNlImZvcndhcmQiOm4uX29uRm9yd2FyZChlKTticmVhaztjYXNlImNyZWF0ZSI6bi5fb25SZW1vdGVDcmVhdGUoZSk7YnJlYWs7Y2FzZSJkZWxldGUiOm4uX29uUmVtb3RlRGVsZXRlKGUpfX0pfXJldHVybiBfY3JlYXRlQ2xhc3MoZSxbe2tleToiY3JlYXRlIix2YWx1ZTpmdW5jdGlvbihlLG8scil7dmFyIHQ9dGhpcztyLnJlcG9ydGVyPXQuX293bmVyLHIuc2NoZW1hPWU7dmFyIG49e3R5cGU6ImNyZWF0ZSIsZnJvbTp0Ll9vd25lcix0bzp0Ll9zdWJVUkwsYm9keTp7c2NoZW1hOmUsdmFsdWU6cixhdXRob3Jpc2U6b319O3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihvLHMpe3QuX2J1cy5wb3N0TWVzc2FnZShuLGZ1bmN0aW9uKG4pe2lmKGNvbnNvbGUubG9nKCJjcmVhdGUtcmVzcG9uc2U6ICIsbiksMjAwPT09bi5ib2R5LmNvZGUpe3ZhciBhPW4uYm9keS5yZXNvdXJjZSxpPW5ldyBfRGF0YU9iamVjdFJlcG9ydGVyMlsiZGVmYXVsdCJdKHQsYSxlLCJvbiIscixuLmJvZHkuY2hpbGRyZW5SZXNvdXJjZXMpO3QuX3JlcG9ydGVyc1thXT1pLG8oaSl9ZWxzZSBzKG4uYm9keS5kZXNjKX0pfSl9fSx7a2V5OiJzdWJzY3JpYmUiLHZhbHVlOmZ1bmN0aW9uKGUsbyl7dmFyIHI9dGhpcyx0PXt0eXBlOiJzdWJzY3JpYmUiLGZyb206ci5fb3duZXIsdG86ci5fc3ViVVJMLGJvZHk6e3NjaGVtYTplLHJlc291cmNlOm99fTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixzKXtyLl9idXMucG9zdE1lc3NhZ2UodCxmdW5jdGlvbih0KXtjb25zb2xlLmxvZygic3Vic2NyaWJlLXJlc3BvbnNlOiAiLHQpO3ZhciBhPXIuX3Byb3Zpc2lvbmFsc1tvXTtpZihkZWxldGUgci5fcHJvdmlzaW9uYWxzW29dLGEmJmEuX3JlbGVhc2VMaXN0ZW5lcnMoKSx0LmJvZHkuY29kZTwyMDApYT1uZXcgX0RhdGFQcm92aXNpb25hbDJbImRlZmF1bHQiXShyLl9vd25lcixvLHIuX2J1cyx0LmJvZHkuY2hpbGRyZW5SZXNvdXJjZXMpLHIuX3Byb3Zpc2lvbmFsc1tvXT1hO2Vsc2UgaWYoMjAwPT09dC5ib2R5LmNvZGUpe3ZhciBpPW5ldyBfRGF0YU9iamVjdE9ic2VydmVyMlsiZGVmYXVsdCJdKHIsbyxlLCJvbiIsdC5ib2R5LnZhbHVlLGEuY2hpbGRyZW4sdC5ib2R5LnZlcnNpb24pO3IuX29ic2VydmVyc1tvXT1pLG4oaSksYS5hcHBseShpKX1lbHNlIHModC5ib2R5LmRlc2MpfSl9KX19LHtrZXk6InJlYWQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBvPXRoaXMscj17dHlwZToicmVhZCIsZnJvbTpvLl9vd25lcix0bzplfTtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtvLl9idXMucG9zdE1lc3NhZ2UocixmdW5jdGlvbihvKXtjb25zb2xlLmxvZygicmVhZC1yZXNwb25zZTogIixvKSwyMDA9PT1vLmJvZHkuY29kZT9lKG8uYm9keS52YWx1ZSk6dChvLmJvZHkuZGVzYyl9KX0pfX0se2tleToib25Ob3RpZmljYXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcj1lfX0se2tleToiX29uRm9yd2FyZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG89dGhpcyxyPW8uX3JlcG9ydGVyc1tlLmJvZHkudG9dO3IuX29uRm9yd2FyZChlKX19LHtrZXk6Il9vblJlbW90ZUNyZWF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG89dGhpcyxyPWUuZnJvbS5zbGljZSgwLC0xMyksdD17dHlwZTplLnR5cGUsZnJvbTplLmJvZHkuc291cmNlLHVybDpyLHNjaGVtYTplLmJvZHkuc2NoZW1hLHZhbHVlOmUuYm9keS52YWx1ZSxpZGVudGl0eTplLmJvZHkuaWRlbnRpdHksYWNrOmZ1bmN0aW9uKHIpe3ZhciB0PTIwMDtyJiYodD1yKSxvLl9idXMucG9zdE1lc3NhZ2Uoe2lkOmUuaWQsdHlwZToicmVzcG9uc2UiLGZyb206ZS50byx0bzplLmZyb20sYm9keTp7Y29kZTp0fX0pfX07by5fb25Ob3RpZmljYXRpb25IYW5kbGVyJiYoY29uc29sZS5sb2coIk5PVElGSUNBVElPTi1FVkVOVDogIix0KSxvLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIodCkpfX0se2tleToiX29uUmVtb3RlRGVsZXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbz10aGlzLHI9ZS5ib2R5LnJlc291cmNlLHQ9by5fb2JzZXJ2ZXJzW3JdO2lmKHQpe3ZhciBuPXt0eXBlOmUudHlwZSx1cmw6cixpZGVudGl0eTplLmJvZHkuaWRlbnRpdHksYWNrOmZ1bmN0aW9uKHIpe3ZhciBuPTIwMDtyJiYobj1yKSwyMDA9PT1uJiZ0WyJkZWxldGUiXSgpLG8uX2J1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsZnJvbTplLnRvLHRvOmUuZnJvbSxib2R5Ontjb2RlOm4sc291cmNlOm8uX293bmVyfX0pfX07by5fb25Ob3RpZmljYXRpb25IYW5kbGVyJiYoY29uc29sZS5sb2coIk5PVElGSUNBVElPTi1FVkVOVDogIixuKSxvLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIobikpfWVsc2Ugby5fYnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIixmcm9tOmUudG8sdG86ZS5mcm9tLGJvZHk6e2NvZGU6NDA0LHNvdXJjZTpvLl9vd25lcn19KX19LHtrZXk6Im93bmVyIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb3duZXJ9fSx7a2V5OiJyZXBvcnRlcnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZXBvcnRlcnN9fSx7a2V5OiJvYnNlcnZlcnMiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vYnNlcnZlcnN9fV0pLGV9KCk7ZXhwb3J0c1siZGVmYXVsdCJdPVN5bmNoZXIsbW9kdWxlLmV4cG9ydHM9ZXhwb3J0c1siZGVmYXVsdCJdOwoKCn0seyIuL0RhdGFPYmplY3RPYnNlcnZlciI6NDEsIi4vRGF0YU9iamVjdFJlcG9ydGVyIjo0MiwiLi9EYXRhUHJvdmlzaW9uYWwiOjQzfV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7ZnVuY3Rpb24gZGl2aWRlVVJMKGUpe2lmKCFlKXRocm93IEVycm9yKCJVUkwgaXMgbmVlZGVkIHRvIHNwbGl0Iik7dmFyIHI9LyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2ksdD0iJDEsJDIsJDMiLGk9ZS5yZXBsYWNlKHIsdCkuc3BsaXQoIiwiKTtpWzBdPT09ZSYmKGlbMF09Imh0dHBzIixpWzFdPWUpO3ZhciBuPXt0eXBlOmlbMF0sZG9tYWluOmlbMV0saWRlbnRpdHk6aVsyXX07cmV0dXJuIG59ZnVuY3Rpb24gZGl2aWRlRW1haWwoZSl7dmFyIHI9ZS5pbmRleE9mKCJAIiksdD17dXNlcm5hbWU6ZS5zdWJzdHJpbmcoMCxyKSxkb21haW46ZS5zdWJzdHJpbmcocisxLGUubGVuZ3RoKX07cmV0dXJuIHR9ZnVuY3Rpb24gZW1wdHlPYmplY3QoZSl7cmV0dXJuIShPYmplY3Qua2V5cyhlKS5sZW5ndGg+MCl9ZnVuY3Rpb24gZGVlcENsb25lKGUpe2lmKGUpcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpfWZ1bmN0aW9uIGdldFVzZXJVUkxGcm9tRW1haWwoZSl7dmFyIHI9ZS5pbmRleE9mKCJAIik7cmV0dXJuInVzZXI6Ly8iK2Uuc3Vic3RyaW5nKHIrMSxlLmxlbmd0aCkrIi8iK2Uuc3Vic3RyaW5nKDAscil9ZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTChlKXt2YXIgcj1kaXZpZGVVUkwoZSk7cmV0dXJuIHIuaWRlbnRpdHkucmVwbGFjZSgiLyIsIiIpKyJAIityLmRvbWFpbn1mdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGUpe2lmKCJ1c2VyOi8vIj09PWUuc3Vic3RyaW5nKDAsNykpe3ZhciByPWRpdmlkZVVSTChlKTtpZihyLmRvbWFpbiYmci5pZGVudGl0eSlyZXR1cm4gZTt0aHJvdyJ1c2VyVVJMIHdpdGggd3JvbmcgZm9ybWF0In1yZXR1cm4gZ2V0VXNlclVSTEZyb21FbWFpbChlKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksZXhwb3J0cy5kaXZpZGVVUkw9ZGl2aWRlVVJMLGV4cG9ydHMuZGl2aWRlRW1haWw9ZGl2aWRlRW1haWwsZXhwb3J0cy5lbXB0eU9iamVjdD1lbXB0eU9iamVjdCxleHBvcnRzLmRlZXBDbG9uZT1kZWVwQ2xvbmUsZXhwb3J0cy5nZXRVc2VyVVJMRnJvbUVtYWlsPWdldFVzZXJVUkxGcm9tRW1haWwsZXhwb3J0cy5nZXRVc2VyRW1haWxGcm9tVVJMPWdldFVzZXJFbWFpbEZyb21VUkwsZXhwb3J0cy5jb252ZXJ0VG9Vc2VyVVJMPWNvbnZlcnRUb1VzZXJVUkw7CgoKfSx7fV0sNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MpewoKLyoKdXNhZ2U6CgovLyBkbyBzb21ldGhpbmcgdG8gYSBsaXN0IG9mIHRoaW5ncwphc3luY01hcChteUxpc3RPZlN0dWZmLCBmdW5jdGlvbiAodGhpbmcsIGNiKSB7IGRvU29tZXRoaW5nKHRoaW5nLmZvbywgY2IpIH0sIGNiKQovLyBkbyBtb3JlIHRoYW4gb25lIHRoaW5nIHRvIGVhY2ggaXRlbQphc3luY01hcChsaXN0LCBmb29GbiwgYmFyRm4sIGNiKQoKKi8KCm1vZHVsZS5leHBvcnRzID0gYXN5bmNNYXAKCmZ1bmN0aW9uIGFzeW5jTWFwICgpIHsKICB2YXIgc3RlcHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpCiAgICAsIGxpc3QgPSBzdGVwcy5zaGlmdCgpIHx8IFtdCiAgICAsIGNiXyA9IHN0ZXBzLnBvcCgpCiAgaWYgKHR5cGVvZiBjYl8gIT09ICJmdW5jdGlvbiIpIHRocm93IG5ldyBFcnJvcigKICAgICJObyBjYWxsYmFjayBwcm92aWRlZCB0byBhc3luY01hcCIpCiAgaWYgKCFsaXN0KSByZXR1cm4gY2JfKG51bGwsIFtdKQogIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgbGlzdCA9IFtsaXN0XQogIHZhciBuID0gc3RlcHMubGVuZ3RoCiAgICAsIGRhdGEgPSBbXSAvLyAyZCBhcnJheQogICAgLCBlcnJTdGF0ZSA9IG51bGwKICAgICwgbCA9IGxpc3QubGVuZ3RoCiAgICAsIGEgPSBsICogbgogIGlmICghYSkgcmV0dXJuIGNiXyhudWxsLCBbXSkKICBmdW5jdGlvbiBjYiAoZXIpIHsKICAgIGlmIChlciAmJiAhZXJyU3RhdGUpIGVyclN0YXRlID0gZXIKCiAgICB2YXIgYXJnTGVuID0gYXJndW1lbnRzLmxlbmd0aAogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdMZW47IGkgKyspIGlmIChhcmd1bWVudHNbaV0gIT09IHVuZGVmaW5lZCkgewogICAgICBkYXRhW2kgLSAxXSA9IChkYXRhW2kgLSAxXSB8fCBbXSkuY29uY2F0KGFyZ3VtZW50c1tpXSkKICAgIH0KICAgIC8vIHNlZSBpZiBhbnkgbmV3IHRoaW5ncyBoYXZlIGJlZW4gYWRkZWQuCiAgICBpZiAobGlzdC5sZW5ndGggPiBsKSB7CiAgICAgIHZhciBuZXdMaXN0ID0gbGlzdC5zbGljZShsKQogICAgICBhICs9IChsaXN0Lmxlbmd0aCAtIGwpICogbgogICAgICBsID0gbGlzdC5sZW5ndGgKICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgbmV3TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhcikgewogICAgICAgICAgc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsgZm4oYXIsIGNiKSB9KQogICAgICAgIH0pCiAgICAgIH0pCiAgICB9CgogICAgaWYgKC0tYSA9PT0gMCkgY2JfLmFwcGx5KG51bGwsIFtlcnJTdGF0ZV0uY29uY2F0KGRhdGEpKQogIH0KICAvLyBleHBlY3QgdGhlIHN1cHBsaWVkIGNiIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZAogIC8vICJuIiB0aW1lcyBmb3IgZWFjaCB0aGluZyBpbiB0aGUgYXJyYXkuCiAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhcikgewogICAgc3RlcHMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsgZm4oYXIsIGNiKSB9KQogIH0pCn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKQp9LHsiX3Byb2Nlc3MiOjIzfV0sNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGJpbmRBY3RvcgpmdW5jdGlvbiBiaW5kQWN0b3IgKCkgewogIHZhciBhcmdzID0gCiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwKICAgICAgICAoYXJndW1lbnRzKSAvLyBqc3d0Zi4KICAgICwgb2JqID0gbnVsbAogICAgLCBmbgogIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gIm9iamVjdCIpIHsKICAgIG9iaiA9IGFyZ3Muc2hpZnQoKQogICAgZm4gPSBhcmdzLnNoaWZ0KCkKICAgIGlmICh0eXBlb2YgZm4gPT09ICJzdHJpbmciKQogICAgICBmbiA9IG9ialsgZm4gXQogIH0gZWxzZSBmbiA9IGFyZ3Muc2hpZnQoKQogIHJldHVybiBmdW5jdGlvbiAoY2IpIHsKICAgIGZuLmFwcGx5KG9iaiwgYXJncy5jb25jYXQoY2IpKSB9Cn0KCn0se31dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBjaGFpbgp2YXIgYmluZEFjdG9yID0gcmVxdWlyZSgiLi9iaW5kLWFjdG9yLmpzIikKY2hhaW4uZmlyc3QgPSB7fSA7IGNoYWluLmxhc3QgPSB7fQpmdW5jdGlvbiBjaGFpbiAodGhpbmdzLCBjYikgewogIHZhciByZXMgPSBbXQogIDsoZnVuY3Rpb24gTE9PUCAoaSwgbGVuKSB7CiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiBjYihudWxsLHJlcykKICAgIGlmIChBcnJheS5pc0FycmF5KHRoaW5nc1tpXSkpCiAgICAgIHRoaW5nc1tpXSA9IGJpbmRBY3Rvci5hcHBseShudWxsLAogICAgICAgIHRoaW5nc1tpXS5tYXAoZnVuY3Rpb24oaSl7CiAgICAgICAgICByZXR1cm4gKGk9PT1jaGFpbi5maXJzdCkgPyByZXNbMF0KICAgICAgICAgICA6IChpPT09Y2hhaW4ubGFzdCkKICAgICAgICAgICAgID8gcmVzW3Jlcy5sZW5ndGggLSAxXSA6IGkgfSkpCiAgICBpZiAoIXRoaW5nc1tpXSkgcmV0dXJuIExPT1AoaSArIDEsIGxlbikKICAgIHRoaW5nc1tpXShmdW5jdGlvbiAoZXIsIGRhdGEpIHsKICAgICAgaWYgKGVyKSByZXR1cm4gY2IoZXIsIHJlcykKICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkgcmVzID0gcmVzLmNvbmNhdChkYXRhKQogICAgICBMT09QKGkgKyAxLCBsZW4pCiAgICB9KQogIH0pKDAsIHRoaW5ncy5sZW5ndGgpIH0KCn0seyIuL2JpbmQtYWN0b3IuanMiOjQ4fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpleHBvcnRzLmFzeW5jTWFwID0gcmVxdWlyZSgiLi9hc3luYy1tYXAiKQpleHBvcnRzLmJpbmRBY3RvciA9IHJlcXVpcmUoIi4vYmluZC1hY3RvciIpCmV4cG9ydHMuY2hhaW4gPSByZXF1aXJlKCIuL2NoYWluIikKCn0seyIuL2FzeW5jLW1hcCI6NDcsIi4vYmluZC1hY3RvciI6NDgsIi4vY2hhaW4iOjQ5fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQovLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAovLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwovLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgovLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgptb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTsKCnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjsKdmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCmluaGVyaXRzKFN0cmVhbSwgRUUpOwpTdHJlYW0uUmVhZGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMnKTsKU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7ClN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7ClN0cmVhbS5UcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzJyk7ClN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpOwoKLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LngKU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTsKCgoKLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudAovLyBwYXJ0IG9mIHRoaXMgY2xhc3MpIGlzIG92ZXJyaWRkZW4gaW4gdGhlIFJlYWRhYmxlIGNsYXNzLgoKZnVuY3Rpb24gU3RyZWFtKCkgewogIEVFLmNhbGwodGhpcyk7Cn0KClN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHsKICB2YXIgc291cmNlID0gdGhpczsKCiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CiAgICBpZiAoZGVzdC53cml0YWJsZSkgewogICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkgewogICAgICAgIHNvdXJjZS5wYXVzZSgpOwogICAgICB9CiAgICB9CiAgfQoKICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpOwoKICBmdW5jdGlvbiBvbmRyYWluKCkgewogICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7CiAgICAgIHNvdXJjZS5yZXN1bWUoKTsKICAgIH0KICB9CgogIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7CgogIC8vIElmIHRoZSAnZW5kJyBvcHRpb24gaXMgbm90IHN1cHBsaWVkLCBkZXN0LmVuZCgpIHdpbGwgYmUgY2FsbGVkIHdoZW4KICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS4KICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHsKICAgIHNvdXJjZS5vbignZW5kJywgb25lbmQpOwogICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpOwogIH0KCiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7CiAgZnVuY3Rpb24gb25lbmQoKSB7CiAgICBpZiAoZGlkT25FbmQpIHJldHVybjsKICAgIGRpZE9uRW5kID0gdHJ1ZTsKCiAgICBkZXN0LmVuZCgpOwogIH0KCgogIGZ1bmN0aW9uIG9uY2xvc2UoKSB7CiAgICBpZiAoZGlkT25FbmQpIHJldHVybjsKICAgIGRpZE9uRW5kID0gdHJ1ZTsKCiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7CiAgfQoKICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuCiAgZnVuY3Rpb24gb25lcnJvcihlcikgewogICAgY2xlYW51cCgpOwogICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHsKICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCBzdHJlYW0gZXJyb3IgaW4gcGlwZS4KICAgIH0KICB9CgogIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTsKICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpOwoKICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLgogIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpOwogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTsKCiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTsKICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTsKCiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwoKICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7CiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7CgogICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTsKICB9CgogIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7CiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApOwoKICBkZXN0Lm9uKCdjbG9zZScsIGNsZWFudXApOwoKICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpOwoKICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKQogIHJldHVybiBkZXN0Owp9OwoKfSx7ImV2ZW50cyI6OSwiaW5oZXJpdHMiOjE2LCJyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzIjoyNCwicmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzIjozMCwicmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIjozMSwicmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyI6MzIsInJlYWRhYmxlLXN0cmVhbS93cml0YWJsZS5qcyI6MzN9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7Cgp2YXIgaXNCdWZmZXJFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nCiAgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHsKICAgICAgIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkgewogICAgICAgICBjYXNlICdoZXgnOiBjYXNlICd1dGY4JzogY2FzZSAndXRmLTgnOiBjYXNlICdhc2NpaSc6IGNhc2UgJ2JpbmFyeSc6IGNhc2UgJ2Jhc2U2NCc6IGNhc2UgJ3VjczInOiBjYXNlICd1Y3MtMic6IGNhc2UgJ3V0ZjE2bGUnOiBjYXNlICd1dGYtMTZsZSc6IGNhc2UgJ3Jhdyc6IHJldHVybiB0cnVlOwogICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7CiAgICAgICB9CiAgICAgfQoKCmZ1bmN0aW9uIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKSB7CiAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpOwogIH0KfQoKLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZgovLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGUKLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuCi8vCi8vIEBUT0RPIEhhbmRsaW5nIGFsbCBlbmNvZGluZ3MgaW5zaWRlIGEgc2luZ2xlIG9iamVjdCBtYWtlcyBpdCB2ZXJ5IGRpZmZpY3VsdAovLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS4KLy8gQFRPRE8gVGhlcmUgc2hvdWxkIGJlIGEgdXRmOC1zdHJpY3QgZW5jb2RpbmcgdGhhdCByZWplY3RzIGludmFsaWQgVVRGLTggY29kZQovLyBwb2ludHMgYXMgdXNlZCBieSBDRVNVLTguCnZhciBTdHJpbmdEZWNvZGVyID0gZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oZW5jb2RpbmcpIHsKICB0aGlzLmVuY29kaW5nID0gKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9dLywgJycpOwogIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKTsKICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHsKICAgIGNhc2UgJ3V0ZjgnOgogICAgICAvLyBDRVNVLTggcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDMtYnl0ZXMKICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMzsKICAgICAgYnJlYWs7CiAgICBjYXNlICd1Y3MyJzoKICAgIGNhc2UgJ3V0ZjE2bGUnOgogICAgICAvLyBVVEYtMTYgcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDItYnl0ZXMKICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMjsKICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnYmFzZTY0JzoKICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLgogICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzOwogICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXI7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgdGhpcy53cml0ZSA9IHBhc3NUaHJvdWdoV3JpdGU7CiAgICAgIHJldHVybjsKICB9CgogIC8vIEVub3VnaCBzcGFjZSB0byBzdG9yZSBhbGwgYnl0ZXMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLiBVVEYtOCBuZWVkcyA0CiAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS4KICB0aGlzLmNoYXJCdWZmZXIgPSBuZXcgQnVmZmVyKDYpOwogIC8vIE51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci4KICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7CiAgLy8gTnVtYmVyIG9mIGJ5dGVzIGV4cGVjdGVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLgogIHRoaXMuY2hhckxlbmd0aCA9IDA7Cn07CgoKLy8gd3JpdGUgZGVjb2RlcyB0aGUgZ2l2ZW4gYnVmZmVyIGFuZCByZXR1cm5zIGl0IGFzIEpTIHN0cmluZyB0aGF0IGlzCi8vIGd1YXJhbnRlZWQgdG8gbm90IGNvbnRhaW4gYW55IHBhcnRpYWwgbXVsdGktYnl0ZSBjaGFyYWN0ZXJzLiBBbnkgcGFydGlhbAovLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZQovLyByZXR1cm5lZCB3aGVuIGNhbGxpbmcgd3JpdGUgYWdhaW4gd2l0aCB0aGUgcmVtYWluaW5nIGJ5dGVzLgovLwovLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZwovLyBjdXJyZW50bHkgd29ya3MsIGJ1dCBjb252ZXJ0aW5nIGEgU3RyaW5nIHRvIGEgQnVmZmVyICh2aWEgYG5ldyBCdWZmZXJgLCBvcgovLyBCdWZmZXIjd3JpdGUpIHdpbGwgcmVwbGFjZSBpbmNvbXBsZXRlIHN1cnJvZ2F0ZXMgd2l0aCB0aGUgdW5pY29kZQovLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLgpTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikgewogIHZhciBjaGFyU3RyID0gJyc7CiAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXIKICB3aGlsZSAodGhpcy5jaGFyTGVuZ3RoKSB7CiAgICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgcmVtYWluaW5nIGJ5dGVzIHRoaXMgYnVmZmVyIGhhcyB0byBvZmZlciBmb3IgdGhpcyBjaGFyCiAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID8KICAgICAgICB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCA6CiAgICAgICAgYnVmZmVyLmxlbmd0aDsKCiAgICAvLyBhZGQgdGhlIG5ldyBieXRlcyB0byB0aGUgY2hhciBidWZmZXIKICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgdGhpcy5jaGFyUmVjZWl2ZWQsIDAsIGF2YWlsYWJsZSk7CiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBhdmFpbGFibGU7CgogICAgaWYgKHRoaXMuY2hhclJlY2VpdmVkIDwgdGhpcy5jaGFyTGVuZ3RoKSB7CiAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uCiAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICAvLyByZW1vdmUgYnl0ZXMgYmVsb25naW5nIHRvIHRoZSBjdXJyZW50IGNoYXJhY3RlciBmcm9tIHRoZSBidWZmZXIKICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShhdmFpbGFibGUsIGJ1ZmZlci5sZW5ndGgpOwoKICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIHNwbGl0CiAgICBjaGFyU3RyID0gdGhpcy5jaGFyQnVmZmVyLnNsaWNlKDAsIHRoaXMuY2hhckxlbmd0aCkudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7CgogICAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlcgogICAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGNoYXJTdHIubGVuZ3RoIC0gMSk7CiAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikgewogICAgICB0aGlzLmNoYXJMZW5ndGggKz0gdGhpcy5zdXJyb2dhdGVTaXplOwogICAgICBjaGFyU3RyID0gJyc7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgdGhpcy5jaGFyUmVjZWl2ZWQgPSB0aGlzLmNoYXJMZW5ndGggPSAwOwoKICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGluIHRoaXMgYnVmZmVyLCBqdXN0IGVtaXQgb3VyIGNoYXIKICAgIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSB7CiAgICAgIHJldHVybiBjaGFyU3RyOwogICAgfQogICAgYnJlYWs7CiAgfQoKICAvLyBkZXRlcm1pbmUgYW5kIHNldCBjaGFyTGVuZ3RoIC8gY2hhclJlY2VpdmVkCiAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpOwoKICB2YXIgZW5kID0gYnVmZmVyLmxlbmd0aDsKICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7CiAgICAvLyBidWZmZXIgdGhlIGluY29tcGxldGUgY2hhcmFjdGVyIGJ5dGVzIHdlIGdvdAogICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQsIGVuZCk7CiAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7CiAgfQoKICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpOwoKICB2YXIgZW5kID0gY2hhclN0ci5sZW5ndGggLSAxOwogIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChlbmQpOwogIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIKICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikgewogICAgdmFyIHNpemUgPSB0aGlzLnN1cnJvZ2F0ZVNpemU7CiAgICB0aGlzLmNoYXJMZW5ndGggKz0gc2l6ZTsKICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IHNpemU7CiAgICB0aGlzLmNoYXJCdWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHNpemUsIDAsIHNpemUpOwogICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCAwLCBzaXplKTsKICAgIHJldHVybiBjaGFyU3RyLnN1YnN0cmluZygwLCBlbmQpOwogIH0KCiAgLy8gb3IganVzdCBlbWl0IHRoZSBjaGFyU3RyCiAgcmV0dXJuIGNoYXJTdHI7Cn07CgovLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0Ci8vIHRoZSBlbmQgb2YgdGhlIGdpdmVuIGJ1ZmZlci4gSWYgc28sIGl0IHNldHMgdGhpcy5jaGFyTGVuZ3RoIHRvIHRoZSBieXRlCi8vIGxlbmd0aCB0aGF0IGNoYXJhY3RlciwgYW5kIHNldHMgdGhpcy5jaGFyUmVjZWl2ZWQgdG8gdGhlIG51bWJlciBvZiBieXRlcwovLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLgpTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGZ1bmN0aW9uKGJ1ZmZlcikgewogIC8vIGRldGVybWluZSBob3cgbWFueSBieXRlcyB3ZSBoYXZlIHRvIGNoZWNrIGF0IHRoZSBlbmQgb2YgdGhpcyBidWZmZXIKICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7CgogIC8vIEZpZ3VyZSBvdXQgaWYgb25lIG9mIHRoZSBsYXN0IGkgYnl0ZXMgb2Ygb3VyIGJ1ZmZlciBhbm5vdW5jZXMgYW4KICAvLyBpbmNvbXBsZXRlIGNoYXIuCiAgZm9yICg7IGkgPiAwOyBpLS0pIHsKICAgIHZhciBjID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSBpXTsKCiAgICAvLyBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtOCNEZXNjcmlwdGlvbgoKICAgIC8vIDExMFhYWFhYCiAgICBpZiAoaSA9PSAxICYmIGMgPj4gNSA9PSAweDA2KSB7CiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDI7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIC8vIDExMTBYWFhYCiAgICBpZiAoaSA8PSAyICYmIGMgPj4gNCA9PSAweDBFKSB7CiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDM7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIC8vIDExMTEwWFhYCiAgICBpZiAoaSA8PSAzICYmIGMgPj4gMyA9PSAweDFFKSB7CiAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDQ7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7Cn07CgpTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHsKICB2YXIgcmVzID0gJyc7CiAgaWYgKGJ1ZmZlciAmJiBidWZmZXIubGVuZ3RoKQogICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpOwoKICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQpIHsKICAgIHZhciBjciA9IHRoaXMuY2hhclJlY2VpdmVkOwogICAgdmFyIGJ1ZiA9IHRoaXMuY2hhckJ1ZmZlcjsKICAgIHZhciBlbmMgPSB0aGlzLmVuY29kaW5nOwogICAgcmVzICs9IGJ1Zi5zbGljZSgwLCBjcikudG9TdHJpbmcoZW5jKTsKICB9CgogIHJldHVybiByZXM7Cn07CgpmdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikgewogIHJldHVybiBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7Cn0KCmZ1bmN0aW9uIHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7CiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMjsKICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDIgOiAwOwp9CgpmdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHsKICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAzOwogIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMyA6IDA7Cn0KCn0seyJidWZmZXIiOjZ9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKCi8qKgogKiBNb2R1bGUgZXhwb3J0cy4KICovCgptb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTsKCi8qKgogKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLgogKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LgogKgogKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC4KICoKICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zCiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLgogKgogKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnMKICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC4KICoKICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlCiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkCiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgImRlcHJlY2F0ZWQiIHZlcnNpb24gb2YgYGZuYAogKiBAYXBpIHB1YmxpYwogKi8KCmZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykgewogIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkgewogICAgcmV0dXJuIGZuOwogIH0KCiAgdmFyIHdhcm5lZCA9IGZhbHNlOwogIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7CiAgICBpZiAoIXdhcm5lZCkgewogICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTsKICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkgewogICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLndhcm4obXNnKTsKICAgICAgfQogICAgICB3YXJuZWQgPSB0cnVlOwogICAgfQogICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICByZXR1cm4gZGVwcmVjYXRlZDsKfQoKLyoqCiAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuCiAqCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lCiAqIEByZXR1cm5zIHtCb29sZWFufQogKiBAYXBpIHByaXZhdGUKICovCgpmdW5jdGlvbiBjb25maWcgKG5hbWUpIHsKICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lcwogIHRyeSB7CiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTsKICB9IGNhdGNoIChfKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQogIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdOwogIGlmIChudWxsID09IHZhbCkgcmV0dXJuIGZhbHNlOwogIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7Cn0KCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQp9LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7CiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JwogICAgJiYgdHlwZW9mIGFyZy5jb3B5ID09PSAnZnVuY3Rpb24nCiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbicKICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nOwp9Cn0se31dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7Ci8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgovLwovLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQovLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCi8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAovLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0Ci8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQovLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKLy8KLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCi8vCi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgovLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nOwpleHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHsKICBpZiAoIWlzU3RyaW5nKGYpKSB7CiAgICB2YXIgb2JqZWN0cyA9IFtdOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7CiAgICB9CiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7CiAgfQoKICB2YXIgaSA9IDE7CiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoOwogIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHsKICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnOwogICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDsKICAgIHN3aXRjaCAoeCkgewogICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTsKICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7CiAgICAgIGNhc2UgJyVqJzoKICAgICAgICB0cnkgewogICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7CiAgICAgICAgfSBjYXRjaCAoXykgewogICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJzsKICAgICAgICB9CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgcmV0dXJuIHg7CiAgICB9CiAgfSk7CiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHsKICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7CiAgICAgIHN0ciArPSAnICcgKyB4OwogICAgfSBlbHNlIHsKICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7CiAgICB9CiAgfQogIHJldHVybiBzdHI7Cn07CgoKLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC4KLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC4KLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC4KZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7CiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC4KICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9CgogIGlmIChwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHsKICAgIHJldHVybiBmbjsKICB9CgogIHZhciB3YXJuZWQgPSBmYWxzZTsKICBmdW5jdGlvbiBkZXByZWNhdGVkKCkgewogICAgaWYgKCF3YXJuZWQpIHsKICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikgewogICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpOwogICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikgewogICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7CiAgICAgIH0KICAgICAgd2FybmVkID0gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgcmV0dXJuIGRlcHJlY2F0ZWQ7Cn07CgoKdmFyIGRlYnVncyA9IHt9Owp2YXIgZGVidWdFbnZpcm9uOwpleHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7CiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpCiAgICBkZWJ1Z0Vudmlyb24gPSBwcm9jZXNzLmVudi5OT0RFX0RFQlVHIHx8ICcnOwogIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpOwogIGlmICghZGVidWdzW3NldF0pIHsKICAgIGlmIChuZXcgUmVnRXhwKCdcXGInICsgc2V0ICsgJ1xcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7CiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDsKICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTsKICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTsKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTsKICAgIH0KICB9CiAgcmV0dXJuIGRlYnVnc1tzZXRdOwp9OwoKCi8qKgogKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0CiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLgogKgogKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LgogKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LgogKi8KLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqLwpmdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykgewogIC8vIGRlZmF1bHQgb3B0aW9ucwogIHZhciBjdHggPSB7CiAgICBzZWVuOiBbXSwKICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yCiAgfTsKICAvLyBsZWdhY3kuLi4KICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07CiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTsKICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7CiAgICAvLyBsZWdhY3kuLi4KICAgIGN0eC5zaG93SGlkZGVuID0gb3B0czsKICB9IGVsc2UgaWYgKG9wdHMpIHsKICAgIC8vIGdvdCBhbiAib3B0aW9ucyIgb2JqZWN0CiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTsKICB9CiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9ucwogIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7CiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7CiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7CiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlOwogIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7CiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpOwp9CmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7CgoKLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzCmluc3BlY3QuY29sb3JzID0gewogICdib2xkJyA6IFsxLCAyMl0sCiAgJ2l0YWxpYycgOiBbMywgMjNdLAogICd1bmRlcmxpbmUnIDogWzQsIDI0XSwKICAnaW52ZXJzZScgOiBbNywgMjddLAogICd3aGl0ZScgOiBbMzcsIDM5XSwKICAnZ3JleScgOiBbOTAsIDM5XSwKICAnYmxhY2snIDogWzMwLCAzOV0sCiAgJ2JsdWUnIDogWzM0LCAzOV0sCiAgJ2N5YW4nIDogWzM2LCAzOV0sCiAgJ2dyZWVuJyA6IFszMiwgMzldLAogICdtYWdlbnRhJyA6IFszNSwgMzldLAogICdyZWQnIDogWzMxLCAzOV0sCiAgJ3llbGxvdycgOiBbMzMsIDM5XQp9OwoKLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlCmluc3BlY3Quc3R5bGVzID0gewogICdzcGVjaWFsJzogJ2N5YW4nLAogICdudW1iZXInOiAneWVsbG93JywKICAnYm9vbGVhbic6ICd5ZWxsb3cnLAogICd1bmRlZmluZWQnOiAnZ3JleScsCiAgJ251bGwnOiAnYm9sZCcsCiAgJ3N0cmluZyc6ICdncmVlbicsCiAgJ2RhdGUnOiAnbWFnZW50YScsCiAgLy8gIm5hbWUiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nCiAgJ3JlZ2V4cCc6ICdyZWQnCn07CgoKZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkgewogIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07CgogIGlmIChzdHlsZSkgewogICAgcmV0dXJuICdcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArCiAgICAgICAgICAgJ1x1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nOwogIH0gZWxzZSB7CiAgICByZXR1cm4gc3RyOwogIH0KfQoKCmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7CiAgcmV0dXJuIHN0cjsKfQoKCmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7CiAgdmFyIGhhc2ggPSB7fTsKCiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkgewogICAgaGFzaFt2YWxdID0gdHJ1ZTsKICB9KTsKCiAgcmV0dXJuIGhhc2g7Cn0KCgpmdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHsKICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuCiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0CiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmCiAgICAgIHZhbHVlICYmCiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiYKICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsCiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJgogICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay4KICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkgewogICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpOwogICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7CiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpOwogICAgfQogICAgcmV0dXJuIHJldDsKICB9CgogIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzCiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTsKICBpZiAocHJpbWl0aXZlKSB7CiAgICByZXR1cm4gcHJpbWl0aXZlOwogIH0KCiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LgogIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpOwogIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpOwoKICBpZiAoY3R4LnNob3dIaWRkZW4pIHsKICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7CiAgfQoKICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlCiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHgKICBpZiAoaXNFcnJvcih2YWx1ZSkKICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7CiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpOwogIH0KCiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLgogIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkgewogICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7CiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7CiAgICB9CiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7CiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7CiAgICB9CiAgICBpZiAoaXNEYXRlKHZhbHVlKSkgewogICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7CiAgICB9CiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHsKICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTsKICAgIH0KICB9CgogIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107CgogIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXkKICBpZiAoaXNBcnJheSh2YWx1ZSkpIHsKICAgIGFycmF5ID0gdHJ1ZTsKICAgIGJyYWNlcyA9IFsnWycsICddJ107CiAgfQoKICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnMKICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHsKICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7CiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJzsKICB9CgogIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzCiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7CiAgfQoKICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGUKICBpZiAoaXNEYXRlKHZhbHVlKSkgewogICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpOwogIH0KCiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvcgogIGlmIChpc0Vycm9yKHZhbHVlKSkgewogICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTsKICB9CgogIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkgewogICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07CiAgfQoKICBpZiAocmVjdXJzZVRpbWVzIDwgMCkgewogICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkgewogICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7CiAgICB9CiAgfQoKICBjdHguc2Vlbi5wdXNoKHZhbHVlKTsKCiAgdmFyIG91dHB1dDsKICBpZiAoYXJyYXkpIHsKICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpOwogIH0gZWxzZSB7CiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHsKICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpOwogICAgfSk7CiAgfQoKICBjdHguc2Vlbi5wb3AoKTsKCiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTsKfQoKCmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7CiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkKICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpOwogIGlmIChpc1N0cmluZyh2YWx1ZSkpIHsKICAgIHZhciBzaW1wbGUgPSAnXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL14ifCIkL2csICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCAiXFwnIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcIi9nLCAnIicpICsgJ1wnJzsKICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTsKICB9CiAgaWYgKGlzTnVtYmVyKHZhbHVlKSkKICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7CiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpCiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTsKICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgIm9iamVjdCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLgogIGlmIChpc051bGwodmFsdWUpKQogICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTsKfQoKCmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7CiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJzsKfQoKCmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHsKICB2YXIgb3V0cHV0ID0gW107CiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkgewogICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLAogICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7CiAgICB9IGVsc2UgewogICAgICBvdXRwdXQucHVzaCgnJyk7CiAgICB9CiAgfQogIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgIGlmICgha2V5Lm1hdGNoKC9eXGQrJC8pKSB7CiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsCiAgICAgICAgICBrZXksIHRydWUpKTsKICAgIH0KICB9KTsKICByZXR1cm4gb3V0cHV0Owp9CgoKZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkgewogIHZhciBuYW1lLCBzdHIsIGRlc2M7CiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9OwogIGlmIChkZXNjLmdldCkgewogICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpOwogICAgfSBlbHNlIHsKICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTsKICAgIH0KICB9IGVsc2UgewogICAgaWYgKGRlc2Muc2V0KSB7CiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7CiAgICB9CiAgfQogIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHsKICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7CiAgfQogIGlmICghc3RyKSB7CiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHsKICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7CiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpOwogICAgICB9CiAgICAgIGlmIChzdHIuaW5kZXhPZignXG4nKSA+IC0xKSB7CiAgICAgICAgaWYgKGFycmF5KSB7CiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lOwogICAgICAgICAgfSkuam9pbignXG4nKS5zdWJzdHIoMik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHN0ciA9ICdcbicgKyBzdHIuc3BsaXQoJ1xuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTsKICAgICAgICAgIH0pLmpvaW4oJ1xuJyk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7CiAgICB9CiAgfQogIGlmIChpc1VuZGVmaW5lZChuYW1lKSkgewogICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxkKyQvKSkgewogICAgICByZXR1cm4gc3RyOwogICAgfQogICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTsKICAgIGlmIChuYW1lLm1hdGNoKC9eIihbYS16QS1aX11bYS16QS1aXzAtOV0qKSIkLykpIHsKICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7CiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpOwogICAgfSBlbHNlIHsKICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCAiXFwnIikKICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwiL2csICciJykKICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF4ifCIkKS9nLCAiJyIpOwogICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpOwogICAgfQogIH0KCiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyOwp9CgoKZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHsKICB2YXIgbnVtTGluZXNFc3QgPSAwOwogIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikgewogICAgbnVtTGluZXNFc3QrKzsKICAgIGlmIChjdXIuaW5kZXhPZignXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrOwogICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXHUwMDFiXFtcZFxkP20vZywgJycpLmxlbmd0aCArIDE7CiAgfSwgMCk7CgogIGlmIChsZW5ndGggPiA2MCkgewogICAgcmV0dXJuIGJyYWNlc1swXSArCiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xuICcpICsKICAgICAgICAgICAnICcgKwogICAgICAgICAgIG91dHB1dC5qb2luKCcsXG4gICcpICsKICAgICAgICAgICAnICcgKwogICAgICAgICAgIGJyYWNlc1sxXTsKICB9CgogIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07Cn0KCgovLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmAKLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuCmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHsKICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7Cn0KZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTsKCmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nOwp9CmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuOwoKZnVuY3Rpb24gaXNOdWxsKGFyZykgewogIHJldHVybiBhcmcgPT09IG51bGw7Cn0KZXhwb3J0cy5pc051bGwgPSBpc051bGw7CgpmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHsKICByZXR1cm4gYXJnID09IG51bGw7Cn0KZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkOwoKZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7CiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwp9CmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjsKCmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJzsKfQpleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7CgpmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7Cn0KZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sOwoKZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwOwp9CmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDsKCmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7CiAgcmV0dXJuIGlzT2JqZWN0KHJlKSAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nOwp9CmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDsKCmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykgewogIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7Cn0KZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0OwoKZnVuY3Rpb24gaXNEYXRlKGQpIHsKICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJzsKfQpleHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTsKCmZ1bmN0aW9uIGlzRXJyb3IoZSkgewogIHJldHVybiBpc09iamVjdChlKSAmJgogICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTsKfQpleHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yOwoKZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHsKICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKfQpleHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uOwoKZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7CiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fAogICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHwKICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwKICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHwKICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2wKICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7Cn0KZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlOwoKZXhwb3J0cy5pc0J1ZmZlciA9IHJlcXVpcmUoJy4vc3VwcG9ydC9pc0J1ZmZlcicpOwoKZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykgewogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7Cn0KCgpmdW5jdGlvbiBwYWQobikgewogIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApOwp9CgoKdmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLAogICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddOwoKLy8gMjYgRmViIDE2OjE5OjM0CmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHsKICB2YXIgZCA9IG5ldyBEYXRlKCk7CiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksCiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSwKICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7CiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTsKfQoKCi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXAKZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHsKICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTsKfTsKCgovKioKICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLgogKgogKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lCiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZAogKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZQogKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXMKICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuCiAqCiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGUKICogICAgIHByb3RvdHlwZS4KICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uCiAqLwpleHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTsKCmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7CiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdAogIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luOwoKICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7CiAgdmFyIGkgPSBrZXlzLmxlbmd0aDsKICB3aGlsZSAoaS0tKSB7CiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07CiAgfQogIHJldHVybiBvcmlnaW47Cn07CgpmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHsKICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCn0seyIuL3N1cHBvcnQvaXNCdWZmZXIiOjU0LCJfcHJvY2VzcyI6MjMsImluaGVyaXRzIjoxNn1dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLF9fZmlsZW5hbWUpewondXNlIHN0cmljdCcKdmFyIGZzID0gcmVxdWlyZSgnZ3JhY2VmdWwtZnMnKQp2YXIgY2hhaW4gPSByZXF1aXJlKCdzbGlkZScpLmNoYWluCnZhciBNdXJtdXJIYXNoMyA9IHJlcXVpcmUoJ2ltdXJtdXJoYXNoJykKdmFyIGV4dGVuZCA9IE9iamVjdC5hc3NpZ24gfHwgcmVxdWlyZSgndXRpbCcpLl9leHRlbmQKCmZ1bmN0aW9uIG11cm11cmhleCAoKSB7CiAgdmFyIGhhc2ggPSBuZXcgTXVybXVySGFzaDMoKQogIGZvciAodmFyIGlpID0gMDsgaWkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2lpKSBoYXNoLmhhc2goJycgKyBhcmd1bWVudHNbaWldKQogIHJldHVybiBoYXNoLnJlc3VsdCgpCn0KdmFyIGludm9jYXRpb25zID0gMAp2YXIgZ2V0VG1wbmFtZSA9IGZ1bmN0aW9uIChmaWxlbmFtZSkgewogIHJldHVybiBmaWxlbmFtZSArICcuJyArIG11cm11cmhleChfX2ZpbGVuYW1lLCBwcm9jZXNzLnBpZCwgKytpbnZvY2F0aW9ucykKfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3cml0ZUZpbGUgKGZpbGVuYW1lLCBkYXRhLCBvcHRpb25zLCBjYWxsYmFjaykgewogIGlmIChvcHRpb25zIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsKICAgIGNhbGxiYWNrID0gb3B0aW9ucwogICAgb3B0aW9ucyA9IG51bGwKICB9CiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge30KICB2YXIgdG1wZmlsZSA9IGdldFRtcG5hbWUoZmlsZW5hbWUpCgogIGlmIChvcHRpb25zLm1vZGUgJiYgb3B0aW9ucy5jaG1vZCkgewogICAgcmV0dXJuIHRoZW5Xcml0ZUZpbGUoKQogIH0gZWxzZSB7CiAgICAvLyBFaXRoZXIgbW9kZSBvciBjaG93biBpcyBub3QgZXhwbGljaXRseSBzZXQKICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gY29weSBpdCBmcm9tIG9yaWdpbmFsIGZpbGUKICAgIHJldHVybiBmcy5zdGF0KGZpbGVuYW1lLCBmdW5jdGlvbiAoZXJyLCBzdGF0cykgewogICAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKQogICAgICBpZiAoIWVyciAmJiBzdGF0cyAmJiAhb3B0aW9ucy5tb2RlKSB7CiAgICAgICAgb3B0aW9ucy5tb2RlID0gc3RhdHMubW9kZQogICAgICB9CiAgICAgIGlmICghZXJyICYmIHN0YXRzICYmICFvcHRpb25zLmNob3duICYmIHByb2Nlc3MuZ2V0dWlkKSB7CiAgICAgICAgb3B0aW9ucy5jaG93biA9IHsgdWlkOiBzdGF0cy51aWQsIGdpZDogc3RhdHMuZ2lkIH0KICAgICAgfQogICAgICByZXR1cm4gdGhlbldyaXRlRmlsZSgpCiAgICB9KQogIH0KCiAgZnVuY3Rpb24gdGhlbldyaXRlRmlsZSAoKSB7CiAgICBjaGFpbihbCiAgICAgIFtmcywgZnMud3JpdGVGaWxlLCB0bXBmaWxlLCBkYXRhLCBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4J10sCiAgICAgIG9wdGlvbnMubW9kZSAmJiBbZnMsIGZzLmNobW9kLCB0bXBmaWxlLCBvcHRpb25zLm1vZGVdLAogICAgICBvcHRpb25zLmNob3duICYmIFtmcywgZnMuY2hvd24sIHRtcGZpbGUsIG9wdGlvbnMuY2hvd24udWlkLCBvcHRpb25zLmNob3duLmdpZF0sCiAgICAgIFtmcywgZnMucmVuYW1lLCB0bXBmaWxlLCBmaWxlbmFtZV0KICAgIF0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgZXJyID8gZnMudW5saW5rKHRtcGZpbGUsIGZ1bmN0aW9uICgpIHsgY2FsbGJhY2soZXJyKSB9KQogICAgICAgIDogY2FsbGJhY2soKQogICAgfSkKICB9Cn0KCm1vZHVsZS5leHBvcnRzLnN5bmMgPSBmdW5jdGlvbiB3cml0ZUZpbGVTeW5jIChmaWxlbmFtZSwgZGF0YSwgb3B0aW9ucykgewogIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9CiAgdmFyIHRtcGZpbGUgPSBnZXRUbXBuYW1lKGZpbGVuYW1lKQoKICB0cnkgewogICAgaWYgKCFvcHRpb25zLm1vZGUgfHwgIW9wdGlvbnMuY2htb2QpIHsKICAgICAgLy8gRWl0aGVyIG1vZGUgb3IgY2hvd24gaXMgbm90IGV4cGxpY2l0bHkgc2V0CiAgICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gY29weSBpdCBmcm9tIG9yaWdpbmFsIGZpbGUKICAgICAgdHJ5IHsKICAgICAgICB2YXIgc3RhdHMgPSBmcy5zdGF0U3luYyhmaWxlbmFtZSkKCiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucykKICAgICAgICBpZiAoIW9wdGlvbnMubW9kZSkgewogICAgICAgICAgb3B0aW9ucy5tb2RlID0gc3RhdHMubW9kZQogICAgICAgIH0KICAgICAgICBpZiAoIW9wdGlvbnMuY2hvd24gJiYgcHJvY2Vzcy5nZXR1aWQpIHsKICAgICAgICAgIG9wdGlvbnMuY2hvd24gPSB7IHVpZDogc3RhdHMudWlkLCBnaWQ6IHN0YXRzLmdpZCB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChleCkgewogICAgICAgIC8vIGlnbm9yZSBzdGF0IGVycm9ycwogICAgICB9CiAgICB9CgogICAgZnMud3JpdGVGaWxlU3luYyh0bXBmaWxlLCBkYXRhLCBvcHRpb25zLmVuY29kaW5nIHx8ICd1dGY4JykKICAgIGlmIChvcHRpb25zLmNob3duKSBmcy5jaG93blN5bmModG1wZmlsZSwgb3B0aW9ucy5jaG93bi51aWQsIG9wdGlvbnMuY2hvd24uZ2lkKQogICAgaWYgKG9wdGlvbnMubW9kZSkgZnMuY2htb2RTeW5jKHRtcGZpbGUsIG9wdGlvbnMubW9kZSkKICAgIGZzLnJlbmFtZVN5bmModG1wZmlsZSwgZmlsZW5hbWUpCiAgfSBjYXRjaCAoZXJyKSB7CiAgICB0cnkgeyBmcy51bmxpbmtTeW5jKHRtcGZpbGUpIH0gY2F0Y2ggKGUpIHt9CiAgICB0aHJvdyBlcnIKICB9Cn0KCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLCIvbm9kZV9tb2R1bGVzL3dyaXRlLWZpbGUtYXRvbWljL2luZGV4LmpzIikKfSx7Il9wcm9jZXNzIjoyMywiZ3JhY2VmdWwtZnMiOjExLCJpbXVybXVyaGFzaCI6MTUsInNsaWRlIjo1MCwidXRpbCI6NTV9XSw1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7Cgp2YXIgX1N5bmNoZXIgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXInKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9QZXJzaXN0ZW5jZU1hbmFnZXIgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1BlcnNpc3RlbmNlTWFuYWdlcicpOwoKdmFyIF9QZXJzaXN0ZW5jZU1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGVyc2lzdGVuY2VNYW5hZ2VyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCnZhciBCcmFjZWxldFNlbnNvclJlcG9ydGVyID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJyYWNlbGV0U2Vuc29yUmVwb3J0ZXIoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWd1cmF0aW9uKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJhY2VsZXRTZW5zb3JSZXBvcnRlcik7CgogICAgaWYgKCFoeXBlcnR5VVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBoeXBlcnR5VVJMIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwogICAgaWYgKCFidXMpIHRocm93IG5ldyBFcnJvcignVGhlIE1pbmlCdXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIF90aGlzLmZpcnN0VGltZSA9IHRydWU7CiAgICBfdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTsKCiAgICBfdGhpcy5fZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGh5cGVydHlVUkwpLmRvbWFpbjsKCiAgICBfdGhpcy5fb2JqZWN0RGVzY1VSTCA9ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4nICsgX3RoaXMuX2RvbWFpbiArICcvLndlbGwta25vd24vZGF0YXNjaGVtYS9Db250ZXh0JzsKCiAgICBjb25zb2xlLmxvZygnSW5pdCBCcmFjZWxldFNlbnNvclJlcG9ydGVyOiAnLCBoeXBlcnR5VVJMKTsKICAgIF90aGlzLl9zeW5jaGVyID0gbmV3IF9TeW5jaGVyLlN5bmNoZXIoaHlwZXJ0eVVSTCwgYnVzLCBjb25maWd1cmF0aW9uKTsKICAgIF90aGlzLl9wZXJzaXN0ZW5jZU1hbmFnZXIgPSBfUGVyc2lzdGVuY2VNYW5hZ2VyMi5kZWZhdWx0OwogICAgY29uc29sZS5sb2coJ1BNJywgX3RoaXMuX3BlcnNpc3RlbmNlTWFuYWdlcik7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQnJhY2VsZXRTZW5zb3JSZXBvcnRlciwgW3sKICAgIGtleTogJ2dldExhc3REZXZpY2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhc3REZXZpY2UoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIGlmIChfdGhpcy5fb25Db25uZWN0KSBfdGhpcy5fb25Db25uZWN0KF90aGlzLl9wZXJzaXN0ZW5jZU1hbmFnZXIuZ2V0KCdidExFQWRkcmVzcycpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdEaXNjb3ZlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gRGlzY292ZXIoKSB7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY29uc29sZS5sb2coJ0RJU0NPVkVSSU5HISEnKTsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICAgIHZhciBkZXZpY2VzTGlzdCA9IFtdOwogICAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgICBzZXJ2aWNlczogW10sCiAgICAgICAgICBhbGxvd0R1cGxpY2F0ZXM6IHRydWUsCiAgICAgICAgICBzY2FuTW9kZTogYmx1ZXRvb3RobGUuU0NBTl9NT0RFX0xPV19MQVRFTkNZLAogICAgICAgICAgbWF0Y2hNb2RlOiBibHVldG9vdGhsZS5NQVRDSF9NT0RFX0FHR1JFU1NJVkUsCiAgICAgICAgICBtYXRjaE51bTogYmx1ZXRvb3RobGUuTUFUQ0hfTlVNX01BWF9BRFZFUlRJU0VNRU5ULAogICAgICAgICAgY2FsbGJhY2tUeXBlOiBibHVldG9vdGhsZS5DQUxMQkFDS19UWVBFX0FMTF9NQVRDSEVTCiAgICAgICAgfTsKCiAgICAgICAgdmFyIHNjYW5TdWNjZXMgPSBmdW5jdGlvbiBzY2FuU3VjY2VzKGRldmljZSkgewogICAgICAgICAgY29uc29sZS5sb2coJ3NjYW4gc3VjY2VzcycsIGRldmljZSk7CiAgICAgICAgICBpZiAoJ2FkZHJlc3MnIGluIGRldmljZSkgewogICAgICAgICAgICB2YXIgbmV3RGV2aWNlID0geyBpZDogZGV2aWNlLmFkZHJlc3MsIG5hbWU6IGRldmljZS5uYW1lLCBkZXNjcmlwdGlvbjogJ1hpYW9taSBCYW5kJyB9OwogICAgICAgICAgICBkZXZpY2VzTGlzdC5wdXNoKG5ld0RldmljZSk7CiAgICAgICAgICB9CiAgICAgICAgfTsKICAgICAgICB2YXIgc2NhbkVycm9yID0gZnVuY3Rpb24gc2NhbkVycm9yKCkgewogICAgICAgICAgY29uc29sZS5sb2coJ3NjYW4gZXJyb3InKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgdGltZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgYmx1ZXRvb3RobGUuc3RvcFNjYW4oZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXR1czInLCBhKTsKICAgICAgICAgICAgcmVzb2x2ZShkZXZpY2VzTGlzdCk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoYikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnc3RhdHVzMycsIGIpOwogICAgICAgICAgfSk7CiAgICAgICAgfSwgMTAwMDApOwoKICAgICAgICBibHVldG9vdGhsZS5pbml0aWFsaXplKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnYmxlIGluaXRpYWxpemVkJywgYSk7CiAgICAgICAgICBibHVldG9vdGhsZS5zdGFydFNjYW4oc2NhblN1Y2Nlcywgc2NhbkVycm9yLCBwYXJhbXMpOwogICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdibGUgbm90IGluaXRpYWxpemVkJyk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ0Nvbm5lY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIENvbm5lY3QoaWQsIG9wdGlvbnMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgZGF0YSA9IHsgc2NoZW1lOiAnY29udGV4dCcsIGlkOiBpZCwgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCksIHZhbHVlczogW10gfTsKCiAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgIGFkZHJlc3M6IGlkCiAgICAgICAgfTsKICAgICAgICB2YXIgZGlzY29ubmVjdFN1Y2Nlc3MgPSBmdW5jdGlvbiBkaXNjb25uZWN0U3VjY2VzcyhzdGF0dXMpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0IHN1Y2Nlc3MnLCBzdGF0dXMpOwogICAgICAgICAgX3RoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTsKICAgICAgICAgIHZhciBzdGF0dXNDaGFuZ2VkID0geyBjb25uZWN0aW9uOiAncmVjb25uZWN0aW5nJywgYWRkcmVzczogaWQgfTsKICAgICAgICAgIGlmIChfdGhpcy5fb25TdGF0dXNDaGFuZ2UpIF90aGlzLl9vblN0YXR1c0NoYW5nZShzdGF0dXNDaGFuZ2VkKTsKICAgICAgICAgIHJlc29sdmUoJ3JlY29ubmVjdGluZycpOwogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGJsdWV0b290aGxlLnJlY29ubmVjdChyZWNvbm5lY3RTdWNjZXNzLCByZWNvbm5lY3RFcnJvciwgcGFyYW1zKTsKICAgICAgICAgIH0sIDUwMDApOwogICAgICAgIH07CiAgICAgICAgdmFyIGRpc2Nvbm5lY3RFcnJvciA9IGZ1bmN0aW9uIGRpc2Nvbm5lY3RFcnJvcihzdGF0dXMpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0IGVycm9yJywgc3RhdHVzKTsKICAgICAgICAgIGJsdWV0b290aGxlLmNvbm5lY3QoY29ubmVjdFN1Y2Nlc3MsIGNvbm5lY3RFcnJvciwgcGFyYW1zKTsKICAgICAgICB9OwogICAgICAgIHZhciBkaXNjb3ZlclN1Y2Nlc3MgPSBmdW5jdGlvbiBkaXNjb3ZlclN1Y2Nlc3Moc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXIgc3VjY2VzcycsIHN0YXR1cyk7CiAgICAgICAgICBjb25zb2xlLmxvZygnZmxhZycsIF90aGlzLmZpcnN0VGltZSk7CiAgICAgICAgICBfdGhpcy5fcGVyc2lzdGVuY2VNYW5hZ2VyLnNldCgnYnRMRUFkZHJlc3MnLCAwLCBpZCk7CiAgICAgICAgICBpZiAoX3RoaXMuZmlyc3RUaW1lKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmaXJzdCB0cnVlJyk7CiAgICAgICAgICAgIF90aGlzLnJlYWRCYXR0ZXJ5KGlkKS50aGVuKGZ1bmN0aW9uIChiYXR0ZXJ5KSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2JhdHRlcnknLCBiYXR0ZXJ5KTsKICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB7IHR5cGU6ICdiYXR0ZXJ5JywgbmFtZTogJ3JlbWFpbmluZyBiYXR0ZXJ5IGVuZXJneSBsZXZlbCBpbiBwZXJjZW50cycsIHVuaXQ6ICclRUwnLCB2YWx1ZTogYmF0dGVyeSwgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCkgfTsKICAgICAgICAgICAgICBkYXRhLnZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpOwogICAgICAgICAgICAgIF90aGlzLnJlYWRTdGVwcyhpZCkudGhlbihmdW5jdGlvbiAoc3RlcHMpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTVEVQUycsIHN0ZXBzKTsKICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHsgdHlwZTogJ3VzZXJfc3RlcHMnLCBuYW1lOiAnQ3VtdWxhdGl2ZSBudW1iZXIgb2Ygc3RlcHMnLCB1bml0OiAnc3RlcHMnLCB2YWx1ZTogc3RlcHMsIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpIH07CiAgICAgICAgICAgICAgICBkYXRhLnZhbHVlcy5wdXNoKHZhbHVlKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkYXRhJywgZGF0YSk7CiAgICAgICAgICAgICAgICBfdGhpcy5SZXBvcnRlckJyYWNlbGV0KGRhdGEpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZpcnN0IGZhbHNlJyk7CiAgICAgICAgICAgIF90aGlzLmZpcnN0VGltZSA9IGZhbHNlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIGRpc2NvdmVyRXJyb3IgPSBmdW5jdGlvbiBkaXNjb3ZlckVycm9yKHN0YXR1cykgewogICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVyIGVycm9yJywgc3RhdHVzKTsKICAgICAgICB9OwogICAgICAgIHZhciByZWNvbm5lY3RTdWNjZXNzID0gZnVuY3Rpb24gcmVjb25uZWN0U3VjY2VzcyhzdGF0dXMpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNvbm5lY3Qgc3VjY2VzcycsIHN0YXR1cyk7CiAgICAgICAgICBpZiAoc3RhdHVzLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHsKICAgICAgICAgICAgX3RoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBzdGF0dXNDaGFuZ2VkID0geyBjb25uZWN0aW9uOiAnY29ubmVjdGVkJywgYWRkcmVzczogaWQgfTsKICAgICAgICAgICAgaWYgKF90aGlzLl9vblN0YXR1c0NoYW5nZSkgX3RoaXMuX29uU3RhdHVzQ2hhbmdlKHN0YXR1c0NoYW5nZWQpOwogICAgICAgICAgICByZXNvbHZlKCdjb25uZWN0ZWQnKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCcpOwogICAgICAgICAgICBibHVldG9vdGhsZS5kaXNjb3ZlcihkaXNjb3ZlclN1Y2Nlc3MsIGRpc2NvdmVyRXJyb3IsIHBhcmFtcyk7CiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cy5zdGF0dXMgPT09ICdkaXNjb25uZWN0ZWQnKSB7CiAgICAgICAgICAgIGlmICghX3RoaXMucmVjb25uZWN0aW5nKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09uIFJlY29ubmVjdCBTdWNjZXNzIFJlY29ubmVjdGluZyBhZnRlciBkaXNjb25uZWN0Jyk7CiAgICAgICAgICAgICAgX3RoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTsKICAgICAgICAgICAgICB2YXIgX3N0YXR1c0NoYW5nZWQgPSB7IGNvbm5lY3Rpb246ICdyZWNvbm5lY3RpbmcnLCBhZGRyZXNzOiBpZCB9OwogICAgICAgICAgICAgIGlmIChfdGhpcy5fb25TdGF0dXNDaGFuZ2UpIF90aGlzLl9vblN0YXR1c0NoYW5nZShfc3RhdHVzQ2hhbmdlZCk7CiAgICAgICAgICAgICAgcmVzb2x2ZSgncmVjb25uZWN0aW5nJyk7CiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBibHVldG9vdGhsZS5yZWNvbm5lY3QocmVjb25uZWN0U3VjY2VzcywgcmVjb25uZWN0RXJyb3IsIHBhcmFtcyk7CiAgICAgICAgICAgICAgfSwgNTAwMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FscmVhZHkgUmVjb25uZWN0aW5nJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciByZWNvbm5lY3RFcnJvciA9IGZ1bmN0aW9uIHJlY29ubmVjdEVycm9yKHN0YXR1cykgewogICAgICAgICAgY29uc29sZS5sb2coJ3JlY29ubmVjdCBlcnJvcicsIHN0YXR1cyk7CiAgICAgICAgICBpZiAoc3RhdHVzLm1lc3NhZ2UgPT09ICdEZXZpY2UgaXNuXCd0IGRpc2Nvbm5lY3RlZCcpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2Nvbm5ldGluZycpOwogICAgICAgICAgICBibHVldG9vdGhsZS5kaXNjb25uZWN0KGRpc2Nvbm5lY3RTdWNjZXNzLCBkaXNjb25uZWN0RXJyb3IsIHBhcmFtcyk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGNvbm5lY3RTdWNjZXNzID0gZnVuY3Rpb24gY29ubmVjdFN1Y2Nlc3Moc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnY29ubmVjdCBzdWNjZXNzJywgc3RhdHVzKTsKCiAgICAgICAgICBpZiAoc3RhdHVzLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHsKICAgICAgICAgICAgcmVzb2x2ZSgnY29ubmVjdGVkJyk7CiAgICAgICAgICAgIGJsdWV0b290aGxlLmRpc2NvdmVyKGRpc2NvdmVyU3VjY2VzcywgZGlzY292ZXJFcnJvciwgcGFyYW1zKTsKICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzLnN0YXR1cyA9PT0gJ2Rpc2Nvbm5lY3RlZCcpIHsKICAgICAgICAgICAgaWYgKCFfdGhpcy5yZWNvbm5lY3RpbmcpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVjb25uZWN0aW5nIGFmdGVyIGRpc2Nvbm5lY3QnKTsKICAgICAgICAgICAgICBfdGhpcy5yZWNvbm5lY3RpbmcgPSB0cnVlOwogICAgICAgICAgICAgIHZhciBzdGF0dXNDaGFuZ2VkID0geyBjb25uZWN0aW9uOiAncmVjb25uZWN0aW5nJywgYWRkcmVzczogaWQgfTsKICAgICAgICAgICAgICBpZiAoX3RoaXMuX29uU3RhdHVzQ2hhbmdlKSBfdGhpcy5fb25TdGF0dXNDaGFuZ2Uoc3RhdHVzQ2hhbmdlZCk7CiAgICAgICAgICAgICAgcmVzb2x2ZSgncmVjb25uZWN0aW5nJyk7CiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBibHVldG9vdGhsZS5yZWNvbm5lY3QocmVjb25uZWN0U3VjY2VzcywgcmVjb25uZWN0RXJyb3IsIHBhcmFtcyk7CiAgICAgICAgICAgICAgfSwgNTAwMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FscmVhZHkgUmVjb25uZWN0aW5nJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBjb25uZWN0RXJyb3IgPSBmdW5jdGlvbiBjb25uZWN0RXJyb3Ioc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnY29ubmVjdCBlcnJvcicsIHN0YXR1cyk7CiAgICAgICAgICBpZiAoc3RhdHVzLm1lc3NhZ2UgPT09ICdEZXZpY2UgcHJldmlvdXNseSBjb25uZWN0ZWQsIHJlY29ubmVjdCBvciBjbG9zZSBmb3IgbmV3IGRldmljZScpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3RyeWluZyB0byByZWNvbm5lY3QnLCBfdGhpcy5yZWNvbm5lY3RpbmcpOwogICAgICAgICAgICBpZiAoIV90aGlzLnJlY29ubmVjdGluZykgewogICAgICAgICAgICAgIF90aGlzLnJlY29ubmVjdGluZyA9IHRydWU7CiAgICAgICAgICAgICAgdmFyIHN0YXR1c0NoYW5nZWQgPSB7IGNvbm5lY3Rpb246ICdyZWNvbm5lY3RpbmcnLCBhZGRyZXNzOiBpZCB9OwogICAgICAgICAgICAgIGlmIChfdGhpcy5fb25TdGF0dXNDaGFuZ2UpIF90aGlzLl9vblN0YXR1c0NoYW5nZShzdGF0dXNDaGFuZ2VkKTsKICAgICAgICAgICAgICByZXNvbHZlKCdyZWNvbm5lY3RpbmcnKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygndHJ5aW5nIHRvIHJlY29ubmVjdCcsIF90aGlzLnJlY29ubmVjdGluZyk7CiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBibHVldG9vdGhsZS5yZWNvbm5lY3QocmVjb25uZWN0U3VjY2VzcywgcmVjb25uZWN0RXJyb3IsIHBhcmFtcyk7CiAgICAgICAgICAgICAgfSwgNTAwMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIGJsdWV0b290aGxlLmluaXRpYWxpemUoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgIGlmIChfdGhpcy5yZWNvbm5lY3RpbmcpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1N0aWxsIFJlY29ubmVjdGluZywgcmVzb2x2ZSByZWNvbm5lY3RpbmcuLicpOwogICAgICAgICAgICB2YXIgc3RhdHVzQ2hhbmdlZCA9IHsgY29ubmVjdGlvbjogJ3JlY29ubmVjdGluZycsIGFkZHJlc3M6IGlkIH07CiAgICAgICAgICAgIGlmIChfdGhpcy5fb25TdGF0dXNDaGFuZ2UpIF90aGlzLl9vblN0YXR1c0NoYW5nZShzdGF0dXNDaGFuZ2VkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0aW5nJyk7CiAgICAgICAgICAgIGJsdWV0b290aGxlLmNvbm5lY3QoY29ubmVjdFN1Y2Nlc3MsIGNvbm5lY3RFcnJvciwgcGFyYW1zKTsKICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAoYikgewogICAgICAgICAgY29uc29sZS5sb2coYik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ1JlcG9ydGVyQnJhY2VsZXQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIFJlcG9ydGVyQnJhY2VsZXQoaW5pdGlhbERhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgY29uc29sZS5sb2coJ1JlcG9ydGVyIGluaXRpYWxpemVkJyk7CiAgICAgIF90aGlzLl9zeW5jaGVyLmNyZWF0ZShfdGhpcy5fb2JqZWN0RGVzY1VSTCwgW10sIGluaXRpYWxEYXRhKS50aGVuKGZ1bmN0aW9uIChyZXBvcnRlcikgewogICAgICAgIGNvbnNvbGUuaW5mbygnUmVwb3J0ZXIgY3JlYXRlZCcsIHJlcG9ydGVyKTsKICAgICAgICBfdGhpcy5yZXBvcnRlciA9IHJlcG9ydGVyOwogICAgICAgIHJlcG9ydGVyLm9uU3Vic2NyaXB0aW9uKGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgY29uc29sZS5sb2coJ29uU3Vic2NyaXB0aW9uOicsIGV2ZW50KTsKCiAgICAgICAgICBldmVudC5hY2NlcHQoKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgaXNDb25uZWN0ZWRTdWNjZXNzID0gZnVuY3Rpb24gaXNDb25uZWN0ZWRTdWNjZXNzKHN0YXR1cykgewogICAgICAgICAgaWYgKHN0YXR1cy5pc0Nvbm5lY3RlZCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnaXNDb25uZWN0ZWRTdWNjZXNzJywgc3RhdHVzKTsKICAgICAgICAgICAgX3RoaXMucmVhZEJhdHRlcnkoaW5pdGlhbERhdGEuaWQpLnRoZW4oZnVuY3Rpb24gKGJhdHRlcnkpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHVzaERhdGEoYmF0dGVyeSwgaW5pdGlhbERhdGEuaWQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpc0Nvbm5lY3RlZFN1Y2Nlc3MnLCBzdGF0dXMpOwogICAgICAgICAgICBfdGhpcy5Db25uZWN0KGluaXRpYWxEYXRhLmlkKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHZhciBpc0Nvbm5lY3RlZEVycm9yID0gZnVuY3Rpb24gaXNDb25uZWN0ZWRFcnJvcihzdGF0dXMpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdpc0Nvbm5lY3RlZEVycm9yJywgc3RhdHVzKTsKICAgICAgICB9OwogICAgICAgIHZhciBwYXJhbXMgPSB7IGFkZHJlc3M6IGluaXRpYWxEYXRhLmlkIH07CgogICAgICAgIGNvbnNvbGUubG9nKCdIWVBFUlRZIFJFUE9SVEVSIDogJywgcmVwb3J0ZXIudXJsKTsKICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBibHVldG9vdGhsZS5pc0Nvbm5lY3RlZChpc0Nvbm5lY3RlZFN1Y2Nlc3MsIGlzQ29ubmVjdGVkRXJyb3IsIHBhcmFtcyk7CiAgICAgICAgfSwgMjAwMCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3B1c2hEYXRhJywKICAgIHZhbHVlOiBmdW5jdGlvbiBwdXNoRGF0YShiYXR0ZXJ5LCBpZCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgdmFsdWUgPSB7IHR5cGU6ICdiYXR0ZXJ5JywgbmFtZTogJ3JlbWFpbmluZyBiYXR0ZXJ5IGVuZXJneSBsZXZlbCBpbiBwZXJjZW50cycsIHVuaXQ6ICclRUwnLCB2YWx1ZTogYmF0dGVyeSwgdGltZTogbmV3IERhdGUoKS5nZXRUaW1lKCkgfTsKICAgICAgX3RoaXMucmVwb3J0ZXIuZGF0YS52YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgIGlmIChfdGhpcy5fb25EYXRhQ2hhbmdlKSBfdGhpcy5fb25EYXRhQ2hhbmdlKHZhbHVlKTsKICAgICAgX3RoaXMucmVhZFN0ZXBzKGlkKS50aGVuKGZ1bmN0aW9uIChzdGVwcykgewogICAgICAgIHZhciB2YWx1ZSA9IHsgdHlwZTogJ3VzZXJfc3RlcHMnLCBuYW1lOiAnQ3VtdWxhdGl2ZSBudW1iZXIgb2Ygc3RlcHMnLCB1bml0OiAnc3RlcHMnLCB2YWx1ZTogc3RlcHMsIHRpbWU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpIH07CiAgICAgICAgX3RoaXMucmVwb3J0ZXIuZGF0YS52YWx1ZXMucHVzaCh2YWx1ZSk7CiAgICAgICAgY29uc29sZS5sb2coJ2RhdGEnLCBfdGhpcy5yZXBvcnRlci5kYXRhLnZhbHVlcyk7CiAgICAgICAgaWYgKF90aGlzLl9vbkRhdGFDaGFuZ2UpIF90aGlzLl9vbkRhdGFDaGFuZ2UodmFsdWUpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZWFkU3RlcHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWRTdGVwcyhibGVBZGRyZXNzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY29uc29sZS5sb2coJ3JlYWRpbmcgc3RlcHMnKTsKICAgICAgICB2YXIgcGFyYW1zID0geyBhZGRyZXNzOiBibGVBZGRyZXNzLCBzZXJ2aWNlOiAnZmVlMCcsIGNoYXJhY3RlcmlzdGljOiAnZmYwNicgfTsKICAgICAgICB2YXIgcmVhZFN1Y2VzcyA9IGZ1bmN0aW9uIHJlYWRTdWNlc3Moc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVhZCBzdWNjZXNzJywgc3RhdHVzKTsKICAgICAgICAgIHZhciBiID0gYmx1ZXRvb3RobGUuZW5jb2RlZFN0cmluZ1RvQnl0ZXMoc3RhdHVzLnZhbHVlKTsKICAgICAgICAgIHZhciB2YWxvciA9IDB4ZmYgJiBiWzBdIHwgKDB4ZmYgJiBiWzFdKSA8PCA4OwogICAgICAgICAgcmVzb2x2ZSh2YWxvcik7CiAgICAgICAgfTsKICAgICAgICB2YXIgcmVhZEVycm9yID0gZnVuY3Rpb24gcmVhZEVycm9yKHN0YXR1cykgewogICAgICAgICAgY29uc29sZS5sb2coJ3JlYWQgZXJyb3InLCBzdGF0dXMpOwogICAgICAgICAgX3RoaXMuQ29ubmVjdChibGVBZGRyZXNzKTsKICAgICAgICB9OwogICAgICAgIGJsdWV0b290aGxlLnJlYWQocmVhZFN1Y2VzcywgcmVhZEVycm9yLCBwYXJhbXMpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZWFkQmF0dGVyeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZEJhdHRlcnkoYmxlQWRkcmVzcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNvbnNvbGUubG9nKCdyZWFkaW5nIGJhdHRlcnknKTsKICAgICAgICB2YXIgcGFyYW1zID0geyBhZGRyZXNzOiBibGVBZGRyZXNzLCBzZXJ2aWNlOiAnZmVlMCcsIGNoYXJhY3RlcmlzdGljOiAnZmYwYycgfTsKICAgICAgICB2YXIgcmVhZFN1Y2VzcyA9IGZ1bmN0aW9uIHJlYWRTdWNlc3Moc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVhZCBzdWNjZXNzJywgc3RhdHVzKTsKICAgICAgICAgIHZhciBiID0gYmx1ZXRvb3RobGUuZW5jb2RlZFN0cmluZ1RvQnl0ZXMoc3RhdHVzLnZhbHVlKTsKICAgICAgICAgIHZhciB2YWxvciA9IGJbMF07CiAgICAgICAgICByZXNvbHZlKHZhbG9yKTsKICAgICAgICB9OwogICAgICAgIHZhciByZWFkRXJyb3IgPSBmdW5jdGlvbiByZWFkRXJyb3Ioc3RhdHVzKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVhZCBlcnJvcicsIHN0YXR1cyk7CiAgICAgICAgICBfdGhpcy5Db25uZWN0KGJsZUFkZHJlc3MpOwogICAgICAgIH07CiAgICAgICAgYmx1ZXRvb3RobGUucmVhZChyZWFkU3VjZXNzLCByZWFkRXJyb3IsIHBhcmFtcyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ29uRGF0YUNoYW5nZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25EYXRhQ2hhbmdlKGNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9vbkRhdGFDaGFuZ2UgPSBjYWxsYmFjazsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvblN0YXR1c0NoYW5nZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TdGF0dXNDaGFuZ2UoY2FsbGJhY2spIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX29uU3RhdHVzQ2hhbmdlID0gY2FsbGJhY2s7CiAgICB9CiAgfSwgewogICAga2V5OiAnb25Db25uZWN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNvbm5lY3QoY2FsbGJhY2spIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX29uQ29ubmVjdCA9IGNhbGxiYWNrOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJyYWNlbGV0U2Vuc29yUmVwb3J0ZXI7Cn0oKTsKCmZ1bmN0aW9uIGFjdGl2YXRlKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbikgewoKICByZXR1cm4gewogICAgbmFtZTogJ0JyYWNlbGV0U2Vuc29yUmVwb3J0ZXInLAogICAgaW5zdGFuY2U6IG5ldyBCcmFjZWxldFNlbnNvclJlcG9ydGVyKGh5cGVydHlVUkwsIGJ1cywgY29uZmlndXJhdGlvbikKICB9Owp9Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjU4LCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1BlcnNpc3RlbmNlTWFuYWdlciI6MzQsInNlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvU3luY2hlciI6MzV9XSw1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kaXZpZGVVUkwgPSBkaXZpZGVVUkw7CmV4cG9ydHMuZGVlcENsb25lID0gZGVlcENsb25lOwpleHBvcnRzLmdldFVzZXJNZWRpYSA9IGdldFVzZXJNZWRpYTsKLyoqCiAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQogKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKiovCgovLyBqc2hpbnQgYnJvd3Nlcjp0cnVlLCBqcXVlcnk6IHRydWUKLy8ganNoaW50IHZhcnN0bXQ6IHRydWUKLyogZ2xvYmFsIEhhbmRsZWJhcnMgKi8KCi8qKgogKiBTdXBwb3J0IG1vZHVsZSB3aXRoIHNvbWUgZnVuY3Rpb25zIHdpbGwgYmUgdXNlZnVsCiAqIEBtb2R1bGUgdXRpbHMKICovCgovKioKICogQHR5cGVkZWYgZGl2aWRlVVJMCiAqIEB0eXBlIE9iamVjdAogKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkwKICogQHByb3BlcnR5IHtzdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG9mIFVSTAogKiBAcHJvcGVydHkge3N0cmluZ30gaWRlbnRpdHkgVGhlIGlkZW50aXR5IG9mIFVSTAogKi8KCi8qKgogKiBEaXZpZGUgYW4gdXJsIGluIHR5cGUsIGRvbWFpbiBhbmQgaWRlbnRpdHkKICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3MKICogQHJldHVybiB7ZGl2aWRlVVJMfSB0aGUgcmVzdWx0IG9mIGRpdmlkZVVSTAogKi8KZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkgewoKICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKSooXC9bXC9cZFx3XC4tXSopKig/OltcP10pKiguKykqL2dpOwogIHZhciByZSA9IC8oW2EtekEtWi1dKik6XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOwogIHZhciBzdWJzdCA9ICckMSwkMiwkMyc7CiAgdmFyIHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpOwoKICAvLyBJZiB0aGUgdXJsIGhhcyBubyBwcm90b2NvbCwgdGhlIGRlZmF1bHQgcHJvdG9jb2wgc2V0IGlzIGh0dHBzCiAgaWYgKHBhcnRzWzBdID09PSB1cmwpIHsKICAgIHBhcnRzWzBdID0gJ2h0dHBzJzsKICAgIHBhcnRzWzFdID0gdXJsOwogIH0KCiAgdmFyIHJlc3VsdCA9IHsKICAgIHR5cGU6IHBhcnRzWzBdLAogICAgZG9tYWluOiBwYXJ0c1sxXSwKICAgIGlkZW50aXR5OiBwYXJ0c1syXQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCi8qKgogKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YQogKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkCiAqIEByZXR1cm4ge09iamVjdH0KICovCmZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHsKICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uCiAgaWYgKG9iaikgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7Cn0KCi8qKgogKiBHZXQgV2ViUlRDIEFQSSByZXNvdXJjZXMKICogQHBhcmFtICB7b2JqZWN0fSAgICAgb3B0aW9ucyBPYmplY3QgY29udGFpbmluZyB0aGUgaW5mb3JtYXRpb24gdGhhdCByZXNvdXJjZXMgd2lsbCBiZSB1c2VkIChjYW1lcmEsIG1pYywgcmVzb2x1dGlvbiwgZXRjKTsKICogQHJldHVybiB7UHJvbWlzZX0KICovCmZ1bmN0aW9uIGdldFVzZXJNZWRpYShjb25zdHJhaW50cykgewoKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKGZ1bmN0aW9uIChtZWRpYVN0cmVhbSkgewogICAgICByZXNvbHZlKG1lZGlhU3RyZWFtKTsKICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICB9KTsKICB9KTsKfQoKfSx7fV19LHt9LFs1N10pKDU3KQp9KTs=",
      "sourceCodeClassname": "BraceletSensorReporter",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10005,
    "version": "0.1",
    "description": "Description of BraceletSensorReporter",
    "language": "Javascript",
    "objectName": "BraceletSensorReporter",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "GroupChat": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "GroupChat",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10006,
    "version": "0.1",
    "description": "Description of GroupChat",
    "language": "Javascript",
    "objectName": "GroupChat",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "HelloWorldObserver": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HelloWorldObserver",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10007,
    "version": "0.1",
    "description": "Description of HelloWorldObserver",
    "language": "Javascript",
    "objectName": "HelloWorldObserver",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "HelloWorldReporter": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "HelloWorldReporter",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10008,
    "version": "0.1",
    "description": "Description of HelloWorldReporter",
    "language": "Javascript",
    "objectName": "HelloWorldReporter",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "Location": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "Location",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10009,
    "version": "0.1",
    "description": "Description of Location",
    "language": "Javascript",
    "objectName": "Location",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "NotificationsObserver": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "NotificationsObserver",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10010,
    "version": "0.1",
    "description": "Description of NotificationsObserver",
    "language": "Javascript",
    "objectName": "NotificationsObserver",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "NotificationsReporter": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "NotificationsReporter",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10011,
    "version": "0.1",
    "description": "Description of NotificationsReporter",
    "language": "Javascript",
    "objectName": "NotificationsReporter",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "RoomClient": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "RoomClient",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10012,
    "version": "0.1",
    "description": "Description of RoomClient",
    "language": "Javascript",
    "objectName": "RoomClient",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "SurveyObserver": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "SurveyObserver",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10013,
    "version": "0.1",
    "description": "Description of SurveyObserver",
    "language": "Javascript",
    "objectName": "SurveyObserver",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "SurveyReporter": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "SurveyReporter",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10014,
    "version": "0.1",
    "description": "Description of SurveyReporter",
    "language": "Javascript",
    "objectName": "SurveyReporter",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  },
  "UserStatus": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "UserStatus",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": 10015,
    "version": "0.1",
    "description": "Description of UserStatus",
    "language": "Javascript",
    "objectName": "UserStatus",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "hypertyType": [],
    "dataObjects": []
  }
}