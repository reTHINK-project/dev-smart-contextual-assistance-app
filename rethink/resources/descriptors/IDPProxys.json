{
  "orange.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "OrangeProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 50001,
    "type": "IDPProxys",
    "version": "0.1",
    "description": "Description of OrangeProxyStub",
    "objectName": "OrangeProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "microsoft.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MicrosoftProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 50002,
    "type": "IDPProxys",
    "version": "0.1",
    "description": "Description of MicrosoftProxyStub",
    "objectName": "MicrosoftProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "google.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IdpProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 50003,
    "type": "IDPProxys",
    "version": "0.1",
    "description": "Description of IdpProxyStub",
    "objectName": "IdpProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}
