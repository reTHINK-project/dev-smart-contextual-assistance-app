{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "LyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgUnVudGltZS5qcyAKLy8gdmVyc2lvbjogMC41LjEKLy8gTGFzdCBidWlsZDogV2VkIEp1bCAxMyAyMDE2IDE4OjE4OjQyIEdNVCswMTAwIChXRVNUKQoKKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuUnVudGltZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK28rIiciKTt0aHJvdyBmLmNvZGU9Ik1PRFVMRV9OT1RfRk9VTkQiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09ImZ1bmN0aW9uIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKGdsb2JhbCl7CiJ1c2Ugc3RyaWN0IjsKCnJlcXVpcmUoImNvcmUtanMvc2hpbSIpOwoKcmVxdWlyZSgicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIik7CgpyZXF1aXJlKCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGUiKTsKCi8qIGVzbGludCBtYXgtbGVuOiAwICovCgppZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7CiAgdGhyb3cgbmV3IEVycm9yKCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkIik7Cn0KZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTsKCi8vIFNob3VsZCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2U6Cgp2YXIgREVGSU5FX1BST1BFUlRZID0gImRlZmluZVByb3BlcnR5IjsKZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHsKICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7CiAgICB3cml0YWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB2YWx1ZQogIH0pOwp9CgpkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgInBhZExlZnQiLCAiIi5wYWRTdGFydCk7CmRlZmluZShTdHJpbmcucHJvdG90eXBlLCAicGFkUmlnaHQiLCAiIi5wYWRFbmQpOwoKInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbCIuc3BsaXQoIiwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpOwp9KTsKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlIjoyLCJjb3JlLWpzL3NoaW0iOjI5NiwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjozODl9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjIzLCIuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZSI6MTIwfV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7CiAgcmV0dXJuIGl0Owp9Owp9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgbXNnKXsNCiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7DQogIHJldHVybiAraXQ7DQp9Owp9LHsiLi9fY29mIjoxOH1dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdCnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpCiAgLCBBcnJheVByb3RvICA9IEFycmF5LnByb3RvdHlwZTsKaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7Cn07Cn0seyIuL19oaWRlIjo0MCwiLi9fd2tzIjoxMTd9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKXsKICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7CiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpOwogIH0gcmV0dXJuIGl0Owp9Owp9LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpOwogIHJldHVybiBpdDsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6NDl9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCid1c2Ugc3RyaWN0JzsKdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7CiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKQogICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKQogICAgLCBpbmMgICA9IDE7CiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXsKICAgIGluYyAgPSAtMTsKICAgIGZyb20gKz0gY291bnQgLSAxOwogICAgdG8gICArPSBjb3VudCAtIDE7CiAgfQogIHdoaWxlKGNvdW50LS0gPiAwKXsKICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07CiAgICBlbHNlIGRlbGV0ZSBPW3RvXTsKICAgIHRvICAgKz0gaW5jOwogICAgZnJvbSArPSBpbmM7CiAgfSByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoxMDUsIi4vX3RvLWxlbmd0aCI6MTA4LCIuL190by1vYmplY3QiOjEwOX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aCkKJ3VzZSBzdHJpY3QnOwp2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpCiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7CiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpCiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAsIGluZGV4ICA9IHRvSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aCkKICAgICwgZW5kICAgID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQKICAgICwgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKTsKICB3aGlsZShlbmRQb3MgPiBpbmRleClPW2luZGV4KytdID0gdmFsdWU7CiAgcmV0dXJuIE87Cn07Cn0seyIuL190by1pbmRleCI6MTA1LCIuL190by1sZW5ndGgiOjEwOCwiLi9fdG8tb2JqZWN0IjoxMDl9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7CiAgdmFyIHJlc3VsdCA9IFtdOwogIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCn0seyIuL19mb3Itb2YiOjM3fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mCi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzCnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXsKICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpewogICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcykKICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKQogICAgICAsIHZhbHVlOwogICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobQogICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpewogICAgICB2YWx1ZSA9IE9baW5kZXgrK107CiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlOwogICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdAogICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7CiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDsKICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTsKICB9Owp9Owp9LHsiLi9fdG8taW5kZXgiOjEwNSwiLi9fdG8taW9iamVjdCI6MTA3LCIuL190by1sZW5ndGgiOjEwOH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMCAtPiBBcnJheSNmb3JFYWNoCi8vIDEgLT4gQXJyYXkjbWFwCi8vIDIgLT4gQXJyYXkjZmlsdGVyCi8vIDMgLT4gQXJyYXkjc29tZQovLyA0IC0+IEFycmF5I2V2ZXJ5Ci8vIDUgLT4gQXJyYXkjZmluZAovLyA2IC0+IEFycmF5I2ZpbmRJbmRleAp2YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXsKICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMQogICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyCiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDMKICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNAogICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2CiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWAogICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7CiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXsKICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcykKICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMAogICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQKICAgICAgLCB2YWwsIHJlczsKICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7CiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdOwogICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pOwogICAgICBpZihUWVBFKXsKICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXAKICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7CiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZQogICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQKICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXgKICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXIKICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeQogICAgICB9CiAgICB9CiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0OwogIH07Cn07Cn0seyIuL19hcnJheS1zcGVjaWVzLWNyZWF0ZSI6MTUsIi4vX2N0eCI6MjUsIi4vX2lvYmplY3QiOjQ1LCIuL190by1sZW5ndGgiOjEwOCwiLi9fdG8tb2JqZWN0IjoxMDl9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykNCiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQ0KICAsIElPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKQ0KICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpOw0KDQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpew0KICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7DQogIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KQ0KICAgICwgc2VsZiAgID0gSU9iamVjdChPKQ0KICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpDQogICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDANCiAgICAsIGkgICAgICA9IGlzUmlnaHQgPyAtMSA6IDE7DQogIGlmKGFMZW4gPCAyKWZvcig7Oyl7DQogICAgaWYoaW5kZXggaW4gc2VsZil7DQogICAgICBtZW1vID0gc2VsZltpbmRleF07DQogICAgICBpbmRleCArPSBpOw0KICAgICAgYnJlYWs7DQogICAgfQ0KICAgIGluZGV4ICs9IGk7DQogICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7DQogICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTsNCiAgICB9DQogIH0NCiAgZm9yKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKWlmKGluZGV4IGluIHNlbGYpew0KICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7DQogIH0NCiAgcmV0dXJuIG1lbW87DQp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6MywiLi9faW9iamVjdCI6NDUsIi4vX3RvLWxlbmd0aCI6MTA4LCIuL190by1vYmplY3QiOjEwOX1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykNCiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JykNCiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwpew0KICB2YXIgQzsNCiAgaWYoaXNBcnJheShvcmlnaW5hbCkpew0KICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjsNCiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFjaw0KICAgIGlmKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSlDID0gdW5kZWZpbmVkOw0KICAgIGlmKGlzT2JqZWN0KEMpKXsNCiAgICAgIEMgPSBDW1NQRUNJRVNdOw0KICAgICAgaWYoQyA9PT0gbnVsbClDID0gdW5kZWZpbmVkOw0KICAgIH0NCiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDOw0KfTsKfSx7Ii4vX2lzLWFycmF5Ijo0NywiLi9faXMtb2JqZWN0Ijo0OSwiLi9fd2tzIjoxMTd9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkKdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7CiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTsKfTsKfSx7Ii4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IiOjE0fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGludm9rZSAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKQogICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlCiAgLCBmYWN0b3JpZXMgID0ge307Cgp2YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXsKICBpZighKGxlbiBpbiBmYWN0b3JpZXMpKXsKICAgIGZvcih2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKW5baV0gPSAnYVsnICsgaSArICddJzsKICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTsKICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyosIGFyZ3MuLi4gKi8pewogIHZhciBmbiAgICAgICA9IGFGdW5jdGlvbih0aGlzKQogICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOwogIHZhciBib3VuZCA9IGZ1bmN0aW9uKC8qIGFyZ3MuLi4gKi8pewogICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpOwogICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTsKICB9OwogIGlmKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlOwogIHJldHVybiBib3VuZDsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMsIi4vX2ludm9rZSI6NDQsIi4vX2lzLW9iamVjdCI6NDl9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpCnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKQogICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJykKICAvLyBFUzMgd3JvbmcgaGVyZQogICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7CgovLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvcgp2YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7CiAgdHJ5IHsKICAgIHJldHVybiBpdFtrZXldOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHZhciBPLCBULCBCOwogIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJwogICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlCiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUCiAgICAvLyBidWlsdGluVGFnIGNhc2UKICAgIDogQVJHID8gY29mKE8pCiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrCiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjsKfTsKfSx7Ii4vX2NvZiI6MTgsIi4vX3drcyI6MTE3fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7Cn07Cn0se31dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBjcmVhdGUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgaGlkZSAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKQogICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKQogICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXkKICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnOwoKdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXsKICAvLyBmYXN0IGNhc2UKICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5OwogIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdOwogIC8vIGZyb3plbiBvYmplY3QgY2FzZQogIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXsKICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4CiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5CiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnkKICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZQogICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgfSk7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgewogICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKCkKICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpCiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpewogICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgICAgICAgZW50cnkuciA9IHRydWU7CiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7CiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTsKICAgICAgICB9CiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhhdFtTSVpFXSA9IDA7CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpewogICAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpOwogICAgICAgIGlmKGVudHJ5KXsKICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubgogICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wOwogICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07CiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTsKICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDsKICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjsKICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7CiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2OwogICAgICAgICAgdGhhdFtTSVpFXS0tOwogICAgICAgIH0gcmV0dXJuICEhZW50cnk7CiAgICAgIH0sCiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7CiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpCiAgICAgICAgICAsIGVudHJ5OwogICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7CiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpOwogICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5CiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7CiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTsKICAgICAgfQogICAgfSk7CiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpCiAgICAgICwgcHJldiwgaW5kZXg7CiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKICAgIGlmKGVudHJ5KXsKICAgICAgZW50cnkudiA9IHZhbHVlOwogICAgLy8gY3JlYXRlIG5ldyBlbnRyeQogICAgfSBlbHNlIHsKICAgICAgdGhhdC5fbCA9IGVudHJ5ID0gewogICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleAogICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXkKICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWUKICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnkKICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeQogICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkCiAgICAgIH07CiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTsKICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTsKICAgICAgdGhhdFtTSVpFXSsrOwogICAgICAvLyBhZGQgdG8gaW5kZXgKICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5OwogICAgfSByZXR1cm4gdGhhdDsKICB9LAogIGdldEVudHJ5OiBnZXRFbnRyeSwKICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7CiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl0KICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTEKICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsKICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0CiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmQKICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXMKICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAsIGtpbmQgID0gdGhhdC5fawogICAgICAgICwgZW50cnkgPSB0aGF0Ll9sOwogICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnkKICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7CiAgICAgIC8vIGdldCBuZXh0IGVudHJ5CiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpewogICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uCiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gc3RlcCgxKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kCiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7CiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7CiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7CiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpOwoKICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yCiAgICBzZXRTcGVjaWVzKE5BTUUpOwogIH0KfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjo2LCIuL19jdHgiOjI1LCIuL19kZWZpbmVkIjoyNywiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19mb3Itb2YiOjM3LCIuL19oaWRlIjo0MCwiLi9faXRlci1kZWZpbmUiOjUzLCIuL19pdGVyLXN0ZXAiOjU1LCIuL19tZXRhIjo2MiwiLi9fb2JqZWN0LWNyZWF0ZSI6NjYsIi4vX29iamVjdC1kcCI6NjcsIi4vX3JlZGVmaW5lLWFsbCI6ODYsIi4vX3NldC1zcGVjaWVzIjo5MX1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKQogICwgZnJvbSAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXsKICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7CiAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyAiI3RvSlNPTiBpc24ndCBnZW5lcmljIik7CiAgICByZXR1cm4gZnJvbSh0aGlzKTsKICB9Owp9Owp9LHsiLi9fYXJyYXktZnJvbS1pdGVyYWJsZSI6MTAsIi4vX2NsYXNzb2YiOjE3fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBnZXRXZWFrICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrCiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpCiAgLCAkaGFzICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpCiAgLCBhcnJheUZpbmRJbmRleCAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpCiAgLCBpZCAgICAgICAgICAgICAgICA9IDA7CgovLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXMKdmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbih0aGF0KXsKICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTsKfTsKdmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbigpewogIHRoaXMuYSA9IFtdOwp9Owp2YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24oc3RvcmUsIGtleSl7CiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7CiAgICByZXR1cm4gaXRbMF0gPT09IGtleTsKICB9KTsKfTsKVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7CiAgZ2V0OiBmdW5jdGlvbihrZXkpewogICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgICBpZihlbnRyeSlyZXR1cm4gZW50cnlbMV07CiAgfSwKICBoYXM6IGZ1bmN0aW9uKGtleSl7CiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTsKICB9LAogIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTsKICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7CiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7CiAgfSwKICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXsKICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpewogICAgICByZXR1cm4gaXRbMF0gPT09IGtleTsKICAgIH0pOwogICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpOwogICAgcmV0dXJuICEhfmluZGV4OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXsKICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWQKICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHMKICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTsKICAgIH0pOwogICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHsKICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKQogICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXsKICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7CiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7CiAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKVsnZGVsZXRlJ10oa2V5KTsKICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldOwogICAgICB9LAogICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KQogICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7CiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlOwogICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpOwogICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7CiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7CiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7CiAgICBpZihkYXRhID09PSB0cnVlKXVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpOwogICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7CiAgICByZXR1cm4gdGhhdDsKICB9LAogIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmUKfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjo2LCIuL19hbi1vYmplY3QiOjcsIi4vX2FycmF5LW1ldGhvZHMiOjEyLCIuL19mb3Itb2YiOjM3LCIuL19oYXMiOjM5LCIuL19pcy1vYmplY3QiOjQ5LCIuL19tZXRhIjo2MiwiLi9fcmVkZWZpbmUtYWxsIjo4Nn1dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKQogICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKQogICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspewogIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXQogICAgLCBDICAgICA9IEJhc2UKICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnCiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZQogICAgLCBPICAgICA9IHt9OwogIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpewogICAgdmFyIGZuID0gcHJvdG9bS0VZXTsKICAgIHJlZGVmaW5lKHByb3RvLCBLRVksCiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfQogICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9CiAgICApOwogIH07CiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTsKICB9KSkpewogICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICBtZXRhLk5FRUQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQwogICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nCiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlCiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZQogICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KQogICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5CiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZQogICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpewogICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50cwogICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpCiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7CiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7CiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTsKICAgICAgfSk7CiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IAogICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXsKICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7CiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTsKICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgICAgIHJldHVybiB0aGF0OwogICAgICB9KTsKICAgICAgQy5wcm90b3R5cGUgPSBwcm90bzsKICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDOwogICAgfQogICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7CiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7CiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7CiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpOwogICAgfQogICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpOwogICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2QKICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyOwogIH0KCiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7CgogIE9bTkFNRV0gPSBDOwogICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pOwoKICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7CgogIHJldHVybiBDOwp9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjYsIi4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzIjozNCwiLi9fZm9yLW9mIjozNywiLi9fZ2xvYmFsIjozOCwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6NDMsIi4vX2lzLW9iamVjdCI6NDksIi4vX2l0ZXItZGV0ZWN0Ijo1NCwiLi9fbWV0YSI6NjIsIi4vX3JlZGVmaW5lIjo4NywiLi9fcmVkZWZpbmUtYWxsIjo4NiwiLi9fc2V0LXRvLXN0cmluZy10YWciOjkyfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9OwppZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKfSx7fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQp2YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykNCiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpew0KICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpOw0KICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTsNCn07Cn0seyIuL19vYmplY3QtZHAiOjY3LCIuL19wcm9wZXJ0eS1kZXNjIjo4NX1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nCnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7CiAgYUZ1bmN0aW9uKGZuKTsKICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuOwogIHN3aXRjaChsZW5ndGgpewogICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7CiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpOwogICAgfTsKICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpewogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTsKICAgIH07CiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7CiAgICB9OwogIH0KICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7CiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTsKICB9Owp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6M31dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykNCiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpDQogICwgTlVNQkVSICAgICAgPSAnbnVtYmVyJzsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihoaW50KXsNCiAgaWYoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0Jyl0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7DQogIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpOw0KfTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fdG8tcHJpbWl0aXZlIjoxMTB9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiICsgaXQpOwogIHJldHVybiBpdDsKfTsKfSx7fV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5Cm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3Owp9KTsKfSx7Ii4vX2ZhaWxzIjozNH1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQKICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcKICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9Owp9Owp9LHsiLi9fZ2xvYmFsIjozOCwiLi9faXMtb2JqZWN0Ijo0OX1dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5cw0KbW9kdWxlLmV4cG9ydHMgPSAoDQogICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnDQopLnNwbGl0KCcsJyk7Cn0se31dLDMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHMKdmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCBnT1BTICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKQogICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgdmFyIHJlc3VsdCAgICAgPSBnZXRLZXlzKGl0KQogICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mOwogIGlmKGdldFN5bWJvbHMpewogICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KQogICAgICAsIGlzRW51bSAgPSBwSUUuZgogICAgICAsIGkgICAgICAgPSAwCiAgICAgICwga2V5OwogICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7CiAgfSByZXR1cm4gcmVzdWx0Owp9Owp9LHsiLi9fb2JqZWN0LWdvcHMiOjczLCIuL19vYmplY3Qta2V5cyI6NzYsIi4vX29iamVjdC1waWUiOjc3fV0sMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7Cgp2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7CiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkYKICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRwogICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TCiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlAKICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQgogICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0KICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSkKICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkKICAgICwga2V5LCBvd24sIG91dCwgZXhwOwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldOwogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0OwogICAgLy8gZXh0ZW5kIGdsb2JhbAogICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpOwogICAgLy8gZXhwb3J0CiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApOwogICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDsKICB9Cn07Cmdsb2JhbC5jb3JlID0gY29yZTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjIzLCIuL19jdHgiOjI1LCIuL19nbG9iYWwiOjM4LCIuL19oaWRlIjo0MCwiLi9fcmVkZWZpbmUiOjg3fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpewogIHZhciByZSA9IC8uLzsKICB0cnkgewogICAgJy8uLydbS0VZXShyZSk7CiAgfSBjYXRjaChlKXsKICAgIHRyeSB7CiAgICAgIHJlW01BVENIXSA9IGZhbHNlOwogICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpOwogICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfQogIH0gcmV0dXJuIHRydWU7Cn07Cn0seyIuL193a3MiOjExN31dLDM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgcmV0dXJuICEhZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07Cn0se31dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKQogICwgd2tzICAgICAgPSByZXF1aXJlKCcuL193a3MnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpewogIHZhciBTWU1CT0wgICA9IHdrcyhLRVkpCiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pCiAgICAsIHN0cmZuICAgID0gZm5zWzBdCiAgICAsIHJ4Zm4gICAgID0gZm5zWzFdOwogIGlmKGZhaWxzKGZ1bmN0aW9uKCl7CiAgICB2YXIgTyA9IHt9OwogICAgT1tTWU1CT0xdID0gZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH07CiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3OwogIH0pKXsKICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pOwogICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyCiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSkKICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdCkKICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9CiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKQogICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpCiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9CiAgICApOwogIH0KfTsKfSx7Ii4vX2RlZmluZWQiOjI3LCIuL19mYWlscyI6MzQsIi4vX2hpZGUiOjQwLCIuL19yZWRlZmluZSI6ODcsIi4vX3drcyI6MTE3fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzCnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7CiAgdmFyIHRoYXQgICA9IGFuT2JqZWN0KHRoaXMpCiAgICAsIHJlc3VsdCA9ICcnOwogIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJzsKICBpZih0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7CiAgaWYodGhhdC5tdWx0aWxpbmUpICByZXN1bHQgKz0gJ20nOwogIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JzsKICBpZih0aGF0LnN0aWNreSkgICAgIHJlc3VsdCArPSAneSc7CiAgcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX2FuLW9iamVjdCI6N31dLDM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJykKICAsIEJSRUFLICAgICAgID0ge30KICAsIFJFVFVSTiAgICAgID0ge307CnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXsKICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpCiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKQogICAgLCBpbmRleCAgPSAwCiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsKICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7CiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yCiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspewogICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXsKICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0KfTsKZXhwb3J0cy5CUkVBSyAgPSBCUkVBSzsKZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2N0eCI6MjUsIi4vX2lzLWFycmF5LWl0ZXIiOjQ2LCIuL19pdGVyLWNhbGwiOjUxLCIuL190by1sZW5ndGgiOjEwOCwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjExOH1dLDM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoCiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwppZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSwzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpOwp9Owp9LHt9XSw0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKfSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CiAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICByZXR1cm4gb2JqZWN0Owp9Owp9LHsiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19vYmplY3QtZHAiOjY3LCIuL19wcm9wZXJ0eS1kZXNjIjo4NX1dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Cn0seyIuL19nbG9iYWwiOjM4fV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7DQogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsNCn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19kb20tY3JlYXRlIjoyOSwiLi9fZmFpbHMiOjM0fV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQ0KICAsIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0Ow0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCB0YXJnZXQsIEMpew0KICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjsNCiAgaWYoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZil7DQogICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7DQogIH0gcmV0dXJuIHRoYXQ7DQp9Owp9LHsiLi9faXMtb2JqZWN0Ijo0OSwiLi9fc2V0LXByb3RvIjo5MH1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpewogIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDsKICBzd2l0Y2goYXJncy5sZW5ndGgpewogICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7CiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7CiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7CiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpOwp9Owp9LHt9XSw0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzCnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7Cn07Cn0seyIuL19jb2YiOjE4fV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKQogICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7Cn07Cn0seyIuL19pdGVyYXRvcnMiOjU2LCIuL193a3MiOjExN31dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpOwptb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpewogIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknOwp9Owp9LHsiLi9fY29mIjoxOH1dLDQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBmbG9vciAgICA9IE1hdGguZmxvb3I7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXsKICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6NDl9XSw0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7Cn07Cn0se31dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBjb2YgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCBNQVRDSCAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgaXNSZWdFeHA7CiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpOwp9Owp9LHsiLi9fY29mIjoxOCwiLi9faXMtb2JqZWN0Ijo0OSwiLi9fd2tzIjoxMTd9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3IKdmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7CiAgdHJ5IHsKICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7CiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbikKICB9IGNhdGNoKGUpewogICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTsKICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7CiAgICB0aHJvdyBlOwogIH0KfTsKfSx7Ii4vX2FuLW9iamVjdCI6N31dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CgovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQpyZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXsKICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7CiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7Cn07Cn0seyIuL19oaWRlIjo0MCwiLi9fb2JqZWN0LWNyZWF0ZSI6NjYsIi4vX3Byb3BlcnR5LWRlc2MiOjg1LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6OTIsIi4vX3drcyI6MTE3fV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgCiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJwogICwgS0VZUyAgICAgICAgICAgPSAna2V5cycKICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7Cgp2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpewogICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTsKICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7CiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07CiAgICBzd2l0Y2goa2luZCl7CiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICB9OwogIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InCiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUwogICAgLCBWQUxVRVNfQlVHID0gZmFsc2UKICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlCiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF0KICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpCiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkCiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlCiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7CiAgLy8gRml4IG5hdGl2ZQogIGlmKCRhbnlOYXRpdmUpewogICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTsKICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXsKICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9ycwogICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTsKICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzCiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7CiAgICB9CiAgfQogIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkYKICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpewogICAgVkFMVUVTX0JVRyA9IHRydWU7CiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9OwogIH0KICAvLyBEZWZpbmUgaXRlcmF0b3IKICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7CiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpOwogIH0KICAvLyBQbHVnIGZvciBsaWJyYXJ5CiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7CiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpczsKICBpZihERUZBVUxUKXsKICAgIG1ldGhvZHMgPSB7CiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLAogICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksCiAgICAgIGVudHJpZXM6ICRlbnRyaWVzCiAgICB9OwogICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7CiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pOwogICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTsKICB9CiAgcmV0dXJuIG1ldGhvZHM7Cn07Cn0seyIuL19leHBvcnQiOjMyLCIuL19oYXMiOjM5LCIuL19oaWRlIjo0MCwiLi9faXRlci1jcmVhdGUiOjUyLCIuL19pdGVyYXRvcnMiOjU2LCIuL19saWJyYXJ5Ijo1OCwiLi9fb2JqZWN0LWdwbyI6NzQsIi4vX3JlZGVmaW5lIjo4NywiLi9fc2V0LXRvLXN0cmluZy10YWciOjkyLCIuL193a3MiOjExN31dLDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTsKCnRyeSB7CiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpOwogIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07CiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7Cn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3NpbmcpewogIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTsKICB2YXIgc2FmZSA9IGZhbHNlOwogIHRyeSB7CiAgICB2YXIgYXJyICA9IFs3XQogICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7CiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTsKICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTsKICAgIGV4ZWMoYXJyKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgcmV0dXJuIHNhZmU7Cn07Cn0seyIuL193a3MiOjExN31dLDU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7CiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07Cn07Cn0se31dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7fTsKfSx7fV0sNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpewogIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQogICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAsIGluZGV4ICA9IDAKICAgICwga2V5OwogIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7Cn07Cn0seyIuL19vYmplY3Qta2V5cyI6NzYsIi4vX3RvLWlvYmplY3QiOjEwN31dLDU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTsKfSx7fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KQp2YXIgJGV4cG0xID0gTWF0aC5leHBtMTsKbW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMQogIC8vIE9sZCBGRiBidWcKICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4CiAgLy8gVG9yIEJyb3dzZXIgYnVnCiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3CikgPyBmdW5jdGlvbiBleHBtMSh4KXsKICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxOwp9IDogJGV4cG0xOwp9LHt9XSw2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpCm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KXsKICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7Cn07Cn0se31dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KQptb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpewogIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTsKfTsKfSx7fV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpCiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGlkICAgICAgID0gMDsKdmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXsKICByZXR1cm4gdHJ1ZTsKfTsKdmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTsKfSk7CnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpewogIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZTogewogICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElECiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEcwogIH19KTsKfTsKdmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4CiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0OwogIGlmKCFoYXMoaXQsIE1FVEEpKXsKICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnOwogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJzsKICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhCiAgICBzZXRNZXRhKGl0KTsKICAvLyByZXR1cm4gb2JqZWN0IElECiAgfSByZXR1cm4gaXRbTUVUQV0uaTsKfTsKdmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKICBpZighaGFzKGl0LCBNRVRBKSl7CiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAogICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7CiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQogICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHMKICB9IHJldHVybiBpdFtNRVRBXS53Owp9OwovLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmcKdmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpewogIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTsKICByZXR1cm4gaXQ7Cn07CnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7CiAgS0VZOiAgICAgIE1FVEEsCiAgTkVFRDogICAgIGZhbHNlLAogIGZhc3RLZXk6ICBmYXN0S2V5LAogIGdldFdlYWs6ICBnZXRXZWFrLAogIG9uRnJlZXplOiBvbkZyZWV6ZQp9Owp9LHsiLi9fZmFpbHMiOjM0LCIuL19oYXMiOjM5LCIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3QtZHAiOjY3LCIuL191aWQiOjExNH1dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIE1hcCAgICAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKQogICwgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzaGFyZWQgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJykKICAsIHN0b3JlICAgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkpOwoKdmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKXsKICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTsKICBpZighdGFyZ2V0TWV0YWRhdGEpewogICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkOwogICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTsKICB9CiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7CiAgaWYoIWtleU1ldGFkYXRhKXsKICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDsKICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCk7CiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7Cn07CnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpOwogIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpOwp9Owp2YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTsKICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7Cn07CnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApewogIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTsKfTsKdmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXkpewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKQogICAgLCBrZXlzICAgICAgICA9IFtdOwogIGlmKG1ldGFkYXRhTWFwKW1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24oXywga2V5KXsga2V5cy5wdXNoKGtleSk7IH0pOwogIHJldHVybiBrZXlzOwp9Owp2YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTsKfTsKdmFyIGV4cCA9IGZ1bmN0aW9uKE8pewogICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgc3RvcmU6IHN0b3JlLAogIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCwKICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsCiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLAogIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSwKICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cywKICBrZXk6IHRvTWV0YUtleSwKICBleHA6IGV4cAp9Owp9LHsiLi9fZXhwb3J0IjozMiwiLi9fc2hhcmVkIjo5NCwiLi9lczYubWFwIjoxNTAsIi4vZXM2LndlYWstbWFwIjoyNTZ9XSw2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldAogICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIKICAsIHByb2Nlc3MgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZQogICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpewogIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7CgogIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgcGFyZW50LCBmbjsKICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7CiAgICB3aGlsZShoZWFkKXsKICAgICAgZm4gICA9IGhlYWQuZm47CiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7CiAgICAgIHRyeSB7CiAgICAgICAgZm4oKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICBpZihoZWFkKW5vdGlmeSgpOwogICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDsKICAgICAgICB0aHJvdyBlOwogICAgICB9CiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7CiAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7CiAgfTsKCiAgLy8gTm9kZS5qcwogIGlmKGlzTm9kZSl7CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTsKICAgIH07CiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyCiAgfSBlbHNlIGlmKE9ic2VydmVyKXsKICAgIHZhciB0b2dnbGUgPSB0cnVlCiAgICAgICwgbm9kZSAgID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpOwogICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlOwogICAgfTsKICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZQogIH0gZWxzZSBpZihQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSl7CiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpOwogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTsKICAgIH07CiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjoKICAvLyAtIHNldEltbWVkaWF0ZQogIC8vIC0gTWVzc2FnZUNoYW5uZWwKICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnCiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2UKICAvLyAtIHNldFRpbWVvdXQKICB9IGVsc2UgewogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKQogICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTsKICAgIH07CiAgfQoKICByZXR1cm4gZnVuY3Rpb24oZm4pewogICAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWR9OwogICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrOwogICAgaWYoIWhlYWQpewogICAgICBoZWFkID0gdGFzazsKICAgICAgbm90aWZ5KCk7CiAgICB9IGxhc3QgPSB0YXNrOwogIH07Cn07Cn0seyIuL19jb2YiOjE4LCIuL19nbG9iYWwiOjM4LCIuL190YXNrIjoxMDR9XSw2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKQp2YXIgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIHBJRSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpCiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKQogICwgJGFzc2lnbiAgPSBPYmplY3QuYXNzaWduOwoKLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpCm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHZhciBBID0ge30KICAgICwgQiA9IHt9CiAgICAsIFMgPSBTeW1ib2woKQogICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JzsKICBBW1NdID0gNzsKICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7CiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7Cn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldCkKICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAsIGluZGV4ID0gMQogICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mCiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjsKICB3aGlsZShhTGVuID4gaW5kZXgpewogICAgdmFyIFMgICAgICA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKQogICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUykKICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aAogICAgICAsIGogICAgICA9IDAKICAgICAgLCBrZXk7CiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldOwogIH0gcmV0dXJuIFQ7Cn0gOiAkYXNzaWduOwp9LHsiLi9fZmFpbHMiOjM0LCIuL19pb2JqZWN0Ijo0NSwiLi9fb2JqZWN0LWdvcHMiOjczLCIuL19vYmplY3Qta2V5cyI6NzYsIi4vX29iamVjdC1waWUiOjc3LCIuL190by1vYmplY3QiOjEwOX1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pDQp2YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQ0KICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpDQogICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykNCiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKQ0KICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfQ0KICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7DQoNCi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUNCnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXsNCiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWcNCiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJykNCiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aA0KICAgICwgZ3QgICAgID0gJz4nDQogICAgLCBpZnJhbWVEb2N1bWVudDsNCiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpOw0KICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsDQogIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7DQogIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTsNCiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDsNCiAgaWZyYW1lRG9jdW1lbnQub3BlbigpOw0KICBpZnJhbWVEb2N1bWVudC53cml0ZSgnPHNjcmlwdD5kb2N1bWVudC5GPU9iamVjdDwvc2NyaXB0JyArIGd0KTsNCiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsNCiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7DQogIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTsNCiAgcmV0dXJuIGNyZWF0ZURpY3QoKTsNCn07DQoNCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7DQogIHZhciByZXN1bHQ7DQogIGlmKE8gIT09IG51bGwpew0KICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTsNCiAgICByZXN1bHQgPSBuZXcgRW1wdHk7DQogICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7DQogICAgLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwNCiAgICByZXN1bHRbSUVfUFJPVE9dID0gTzsNCiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTsNCiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpOw0KfTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fZG9tLWNyZWF0ZSI6MjksIi4vX2VudW0tYnVnLWtleXMiOjMwLCIuL19odG1sIjo0MSwiLi9fb2JqZWN0LWRwcyI6NjgsIi4vX3NoYXJlZC1rZXkiOjkzfV0sNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXsKICBhbk9iamVjdChPKTsKICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgYW5PYmplY3QoQXR0cmlidXRlcyk7CiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHsKICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7CiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOwogIHJldHVybiBPOwp9Owp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2llOC1kb20tZGVmaW5lIjo0MiwiLi9fdG8tcHJpbWl0aXZlIjoxMTB9XSw2ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpDQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQ0KICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTsNCg0KbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpew0KICBhbk9iamVjdChPKTsNCiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcykNCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoDQogICAgLCBpID0gMA0KICAgICwgUDsNCiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pOw0KICByZXR1cm4gTzsNCn07Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2Rlc2NyaXB0b3JzIjoyOCwiLi9fb2JqZWN0LWRwIjo2NywiLi9fb2JqZWN0LWtleXMiOjc2fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzDQptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKXx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7DQogIHZhciBLID0gTWF0aC5yYW5kb20oKTsNCiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHMNCiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7DQogIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTsNCn0pOwp9LHsiLi9fZmFpbHMiOjM0LCIuL19nbG9iYWwiOjM4LCIuL19saWJyYXJ5Ijo1OH1dLDcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpDQogICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykNCiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQ0KICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykNCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpDQogICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpDQogICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOw0KDQpleHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKXsNCiAgTyA9IHRvSU9iamVjdChPKTsNCiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOw0KICBpZihJRThfRE9NX0RFRklORSl0cnkgew0KICAgIHJldHVybiBnT1BEKE8sIFApOw0KICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9DQogIGlmKGhhcyhPLCBQKSlyZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7DQp9Owp9LHsiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19oYXMiOjM5LCIuL19pZTgtZG9tLWRlZmluZSI6NDIsIi4vX29iamVjdC1waWUiOjc3LCIuL19wcm9wZXJ0eS1kZXNjIjo4NSwiLi9fdG8taW9iamVjdCI6MTA3LCIuL190by1wcmltaXRpdmUiOjExMH1dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdwp2YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCBnT1BOICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYKICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nOwoKdmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMKICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTsKCnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXsKICB0cnkgewogICAgcmV0dXJuIGdPUE4oaXQpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7CiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTsKfTsKCn0seyIuL19vYmplY3QtZ29wbiI6NzIsIi4vX3RvLWlvYmplY3QiOjEwN31dLDcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQ0KdmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpDQogICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsNCg0KZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXsNCiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpOw0KfTsKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjMwLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NzV9XSw3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7Cn0se31dLDc0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTykNCnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpDQogICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQ0KICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpDQogICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlOw0KDQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXsNCiAgTyA9IHRvT2JqZWN0KE8pOw0KICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTsNCiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7DQogICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlOw0KICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsOw0KfTsKfSx7Ii4vX2hhcyI6MzksIi4vX3NoYXJlZC1rZXkiOjkzLCIuL190by1vYmplY3QiOjEwOX1dLDc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpDQogICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpDQogICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSkNCiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7DQogIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQ0KICAgICwgaSAgICAgID0gMA0KICAgICwgcmVzdWx0ID0gW10NCiAgICAsIGtleTsNCiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOw0KICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzDQogIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXsNCiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpOw0KICB9DQogIHJldHVybiByZXN1bHQ7DQp9Owp9LHsiLi9fYXJyYXktaW5jbHVkZXMiOjExLCIuL19oYXMiOjM5LCIuL19zaGFyZWQta2V5Ijo5MywiLi9fdG8taW9iamVjdCI6MTA3fV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTykNCnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJykNCiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pew0KICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpOw0KfTsKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjMwLCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NzV9XSw3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOwp9LHt9XSw3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlcwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpewogIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV0KICAgICwgZXhwID0ge307CiAgZXhwW0tFWV0gPSBleGVjKGZuKTsKICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7Cn07Cn0seyIuL19jb3JlIjoyMywiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0fV0sNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCBpc0VudW0gICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc0VudHJpZXMpewogIHJldHVybiBmdW5jdGlvbihpdCl7CiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KGl0KQogICAgICAsIGtleXMgICA9IGdldEtleXMoTykKICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aAogICAgICAsIGkgICAgICA9IDAKICAgICAgLCByZXN1bHQgPSBbXQogICAgICAsIGtleTsKICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSl7CiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pOwogICAgfSByZXR1cm4gcmVzdWx0OwogIH07Cn07Cn0seyIuL19vYmplY3Qta2V5cyI6NzYsIi4vX29iamVjdC1waWUiOjc3LCIuL190by1pb2JqZWN0IjoxMDd9XSw4MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHMKdmFyIGdPUE4gICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKQogICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBSZWZsZWN0ICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7Cm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCl7CiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKQogICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mOwogIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5czsKfTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fZ2xvYmFsIjozOCwiLi9fb2JqZWN0LWdvcG4iOjcyLCIuL19vYmplY3QtZ29wcyI6NzN9XSw4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQKICAsICR0cmltICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltOwoKbW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpewogIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMykKICAgICwgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTsKICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7Cn0gOiAkcGFyc2VGbG9hdDsKfSx7Ii4vX2dsb2JhbCI6MzgsIi4vX3N0cmluZy10cmltIjoxMDIsIi4vX3N0cmluZy13cyI6MTAzfV0sODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQKICAsICR0cmltICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbQogICwgd3MgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJykKICAsIGhleCAgICAgICA9IC9eW1wtK10/MFt4WF0vOwoKbW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpewogIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7CiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7Cn0gOiAkcGFyc2VJbnQ7Cn0seyIuL19nbG9iYWwiOjM4LCIuL19zdHJpbmctdHJpbSI6MTAyLCIuL19zdHJpbmctd3MiOjEwM31dLDgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpCiAgLCBpbnZva2UgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXsKICB2YXIgZm4gICAgID0gYUZ1bmN0aW9uKHRoaXMpCiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKQogICAgLCBpICAgICAgPSAwCiAgICAsIF8gICAgICA9IHBhdGguXwogICAgLCBob2xkZXIgPSBmYWxzZTsKICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlOwogIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXsKICAgIHZhciB0aGF0ID0gdGhpcwogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzOwogICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7CiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTsKICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTsKICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7CiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTsKICB9Owp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6MywiLi9faW52b2tlIjo0NCwiLi9fcGF0aCI6ODR9XSw4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7Cn0seyIuL19nbG9iYWwiOjM4fV0sODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpewogIHJldHVybiB7CiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksCiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksCiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksCiAgICB2YWx1ZSAgICAgICA6IHZhbHVlCiAgfTsKfTsKfSx7fV0sODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXsKICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTsKICByZXR1cm4gdGFyZ2V0Owp9Owp9LHsiLi9fcmVkZWZpbmUiOjg3fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgaGFzICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIFNSQyAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKQogICwgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJwogICwgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXQogICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpOwoKcmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTsKfTsKCihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIGtleSwgdmFsLCBzYWZlKXsKICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJzsKICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTsKICBpZihPW2tleV0gPT09IHZhbClyZXR1cm47CiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTsKICBpZihPID09PSBnbG9iYWwpewogICAgT1trZXldID0gdmFsOwogIH0gZWxzZSB7CiAgICBpZighc2FmZSl7CiAgICAgIGRlbGV0ZSBPW2tleV07CiAgICAgIGhpZGUoTywga2V5LCB2YWwpOwogICAgfSBlbHNlIHsKICAgICAgaWYoT1trZXldKU9ba2V5XSA9IHZhbDsKICAgICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsKTsKICAgIH0KICB9Ci8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZQp9KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7Cn0pOwp9LHsiLi9fY29yZSI6MjMsIi4vX2dsb2JhbCI6MzgsIi4vX2hhcyI6MzksIi4vX2hpZGUiOjQwLCIuL191aWQiOjExNH1dLDg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2UpewogIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpewogICAgcmV0dXJuIHJlcGxhY2VbcGFydF07CiAgfSA6IHJlcGxhY2U7CiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXsKICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7CiAgfTsKfTsKfSx7fV0sODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSkKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSl7CiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7Cn07Cn0se31dLDkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwp2YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7CiAgYW5PYmplY3QoTyk7CiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyAiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpOwp9Owptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXsKICAgICAgdHJ5IHsKICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7CiAgICAgICAgc2V0KHRlc3QsIFtdKTsKICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTsKICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9CiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7CiAgICAgICAgY2hlY2soTywgcHJvdG8pOwogICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87CiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pOwogICAgICAgIHJldHVybiBPOwogICAgICB9OwogICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSwKICBjaGVjazogY2hlY2sKfTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fY3R4IjoyNSwiLi9faXMtb2JqZWN0Ijo0OSwiLi9fb2JqZWN0LWdvcGQiOjcwfV0sOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXsKICB2YXIgQyA9IGdsb2JhbFtLRVldOwogIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7CiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9CiAgfSk7Cn07Cn0seyIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2dsb2JhbCI6MzgsIi4vX29iamVjdC1kcCI6NjcsIi4vX3drcyI6MTE3fV0sOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJykKICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXsKICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7Cn07Cn0seyIuL19oYXMiOjM5LCIuL19vYmplY3QtZHAiOjY3LCIuL193a3MiOjExN31dLDkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJykNCiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTsNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsNCiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTsNCn07Cn0seyIuL19zaGFyZWQiOjk0LCIuL191aWQiOjExNH1dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJwogICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7Cn07Cn0seyIuL19nbG9iYWwiOjM4fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcikKdmFyIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7CiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvciwgUzsKICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjozLCIuL19hbi1vYmplY3QiOjcsIi4vX3drcyI6MTE3fV0sOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpOw0KDQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKXsNCiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7DQogICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpOw0KICB9KTsNCn07Cn0seyIuL19mYWlscyI6MzR9XSw5NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0Ci8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7CiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7CiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKQogICAgICAsIGkgPSB0b0ludGVnZXIocG9zKQogICAgICAsIGwgPSBzLmxlbmd0aAogICAgICAsIGEsIGI7CiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOwogICAgYSA9IHMuY2hhckNvZGVBdChpKTsKICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmCiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhCiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwOwogIH07Cn07Cn0seyIuL19kZWZpbmVkIjoyNywiLi9fdG8taW50ZWdlciI6MTA2fV0sOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfQp2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKQogICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSl7CiAgaWYoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSl0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArICIgZG9lc24ndCBhY2NlcHQgcmVnZXghIik7CiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTsKfTsKfSx7Ii4vX2RlZmluZWQiOjI3LCIuL19pcy1yZWdleHAiOjUwfV0sOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKQogICwgcXVvdCAgICA9IC8iL2c7Ci8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKQp2YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7CiAgdmFyIFMgID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSkKICAgICwgcDEgPSAnPCcgKyB0YWc7CiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPSInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICciJzsKICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+JzsKfTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCBleGVjKXsKICB2YXIgTyA9IHt9OwogIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpOwogICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsKICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJyInKTsKICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnIicpLmxlbmd0aCA+IDM7CiAgfSksICdTdHJpbmcnLCBPKTsKfTsKfSx7Ii4vX2RlZmluZWQiOjI3LCIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzR9XSwxMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZAp2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgcmVwZWF0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JykKICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpewogIHZhciBTICAgICAgICAgICAgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSkKICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGgKICAgICwgZmlsbFN0ciAgICAgID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpCiAgICAsIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7CiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTOwogIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoCiAgICAsIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTsKICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7CiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjsKfTsKCn0seyIuL19kZWZpbmVkIjoyNywiLi9fc3RyaW5nLXJlcGVhdCI6MTAxLCIuL190by1sZW5ndGgiOjEwOH1dLDEwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpewogIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSkKICAgICwgcmVzID0gJycKICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTsKICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlIik7CiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjsKICByZXR1cm4gcmVzOwp9Owp9LHsiLi9fZGVmaW5lZCI6MjcsIi4vX3RvLWludGVnZXIiOjEwNn1dLDEwMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJykKICAsIHNwYWNlICAgPSAnWycgKyBzcGFjZXMgKyAnXScKICAsIG5vbiAgICAgPSAnXHUyMDBiXHUwMDg1JwogICwgbHRyaW0gICA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKQogICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7Cgp2YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbihLRVksIGV4ZWMsIEFMSUFTKXsKICB2YXIgZXhwICAgPSB7fTsKICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbigpewogICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjsKICB9KTsKICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldOwogIGlmKEFMSUFTKWV4cFtBTElBU10gPSBmbjsKICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTsKfTsKCi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0Ci8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodAovLyAzIC0+IFN0cmluZyN0cmltCnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7CiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7CiAgaWYoVFlQRSAmIDEpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTsKICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpOwogIHJldHVybiBzdHJpbmc7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyOwp9LHsiLi9fZGVmaW5lZCI6MjcsIi4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzIjozNCwiLi9fc3RyaW5nLXdzIjoxMDN9XSwxMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICdceDA5XHgwQVx4MEJceDBDXHgwRFx4MjBceEEwXHUxNjgwXHUxODBFXHUyMDAwXHUyMDAxXHUyMDAyXHUyMDAzJyArDQogICdcdTIwMDRcdTIwMDVcdTIwMDZcdTIwMDdcdTIwMDhcdTIwMDlcdTIwMEFcdTIwMkZcdTIwNUZcdTMwMDBcdTIwMjhcdTIwMjlcdUZFRkYnOwp9LHt9XSwxMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGludm9rZSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpCiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJykKICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKQogICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlCiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGUKICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbAogICwgY291bnRlciAgICAgICAgICAgID0gMAogICwgcXVldWUgICAgICAgICAgICAgID0ge30KICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnCiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDsKdmFyIHJ1biA9IGZ1bmN0aW9uKCl7CiAgdmFyIGlkID0gK3RoaXM7CiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXsKICAgIHZhciBmbiA9IHF1ZXVlW2lkXTsKICAgIGRlbGV0ZSBxdWV1ZVtpZF07CiAgICBmbigpOwogIH0KfTsKdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpewogIHJ1bi5jYWxsKGV2ZW50LmRhdGEpOwp9OwovLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6CmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spewogIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pewogICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7CiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7CiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTsKICAgIH07CiAgICBkZWZlcihjb3VudGVyKTsKICAgIHJldHVybiBjb3VudGVyOwogIH07CiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpewogICAgZGVsZXRlIHF1ZXVlW2lkXTsKICB9OwogIC8vIE5vZGUuanMgMC44LQogIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpOwogICAgfTsKICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzCiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXsKICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7CiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjsKICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7CiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTsKICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnMKICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0JwogIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpOwogICAgfTsKICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTsKICAvLyBJRTgtCiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpewogICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7CiAgICAgICAgcnVuLmNhbGwoaWQpOwogICAgICB9OwogICAgfTsKICAvLyBSZXN0IG9sZCBicm93c2VycwogIH0gZWxzZSB7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApOwogICAgfTsKICB9Cn0KbW9kdWxlLmV4cG9ydHMgPSB7CiAgc2V0OiAgIHNldFRhc2ssCiAgY2xlYXI6IGNsZWFyVGFzawp9Owp9LHsiLi9fY29mIjoxOCwiLi9fY3R4IjoyNSwiLi9fZG9tLWNyZWF0ZSI6MjksIi4vX2dsb2JhbCI6MzgsIi4vX2h0bWwiOjQxLCIuL19pbnZva2UiOjQ0fV0sMTA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgbWF4ICAgICAgID0gTWF0aC5tYXgKICAsIG1pbiAgICAgICA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpewogIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTsKICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTsKfTsKfSx7Ii4vX3RvLWludGVnZXIiOjEwNn1dLDEwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS40IFRvSW50ZWdlcgp2YXIgY2VpbCAgPSBNYXRoLmNlaWwKICAsIGZsb29yID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7Cn07Cn0se31dLDEwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5ncwp2YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKQogICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6MjcsIi4vX2lvYmplY3QiOjQ1fV0sMTA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjE1IFRvTGVuZ3RoCnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIG1pbiAgICAgICA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MQp9Owp9LHsiLi9fdG8taW50ZWdlciI6MTA2fV0sMTA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KQp2YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7Cn07Cn0seyIuL19kZWZpbmVkIjoyN31dLDExMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2UKLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmcKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7CiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7CiAgdmFyIGZuLCB2YWw7CiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOwogIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOwogIHRocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIik7Cn07Cn0seyIuL19pcy1vYmplY3QiOjQ5fV0sMTExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwppZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKXsKICB2YXIgTElCUkFSWSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICAgLCBnbG9iYWwgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAgICwgZmFpbHMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAgICwgJGV4cG9ydCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgICAsICR0eXBlZCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpCiAgICAsICRidWZmZXIgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKQogICAgLCBjdHggICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAgICwgcHJvcGVydHlEZXNjICAgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICAgLCBoaWRlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgICAsIHJlZGVmaW5lQWxsICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICAgLCBpc0ludGVnZXIgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpCiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpCiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKQogICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICAgLCB0b09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKQogICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpCiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICAgLCBpc0l0ZXJhYmxlICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmlzLWl0ZXJhYmxlJykKICAgICwgZ2V0SXRlckZuICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJykKICAgICwgdWlkICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgICAsIHdrcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKQogICAgLCBjcmVhdGVBcnJheU1ldGhvZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpCiAgICAsIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpCiAgICAsIHNwZWNpZXNDb25zdHJ1Y3RvciAgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJykKICAgICwgQXJyYXlJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJykKICAgICwgSXRlcmF0b3JzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgICAsICRpdGVyRGV0ZWN0ICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpCiAgICAsIHNldFNwZWNpZXMgICAgICAgICAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpCiAgICAsIGFycmF5RmlsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJykKICAgICwgYXJyYXlDb3B5V2l0aGluICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykKICAgICwgJERQICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgICAsICRHT1BEICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgICAsIGRQICAgICAgICAgICAgICAgICAgPSAkRFAuZgogICAgLCBnT1BEICAgICAgICAgICAgICAgID0gJEdPUEQuZgogICAgLCBSYW5nZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3IKICAgICwgVHlwZUVycm9yICAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3IKICAgICwgVWludDhBcnJheSAgICAgICAgICA9IGdsb2JhbC5VaW50OEFycmF5CiAgICAsIEFSUkFZX0JVRkZFUiAgICAgICAgPSAnQXJyYXlCdWZmZXInCiAgICAsIFNIQVJFRF9CVUZGRVIgICAgICAgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUgogICAgLCBCWVRFU19QRVJfRUxFTUVOVCAgID0gJ0JZVEVTX1BFUl9FTEVNRU5UJwogICAgLCBQUk9UT1RZUEUgICAgICAgICAgID0gJ3Byb3RvdHlwZScKICAgICwgQXJyYXlQcm90byAgICAgICAgICA9IEFycmF5W1BST1RPVFlQRV0KICAgICwgJEFycmF5QnVmZmVyICAgICAgICA9ICRidWZmZXIuQXJyYXlCdWZmZXIKICAgICwgJERhdGFWaWV3ICAgICAgICAgICA9ICRidWZmZXIuRGF0YVZpZXcKICAgICwgYXJyYXlGb3JFYWNoICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDApCiAgICAsIGFycmF5RmlsdGVyICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgyKQogICAgLCBhcnJheVNvbWUgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMykKICAgICwgYXJyYXlFdmVyeSAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpCiAgICAsIGFycmF5RmluZCAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KQogICAgLCBhcnJheUZpbmRJbmRleCAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNikKICAgICwgYXJyYXlJbmNsdWRlcyAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSkKICAgICwgYXJyYXlJbmRleE9mICAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpCiAgICAsIGFycmF5VmFsdWVzICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXMKICAgICwgYXJyYXlLZXlzICAgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmtleXMKICAgICwgYXJyYXlFbnRyaWVzICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXMKICAgICwgYXJyYXlMYXN0SW5kZXhPZiAgICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2YKICAgICwgYXJyYXlSZWR1Y2UgICAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlCiAgICAsIGFycmF5UmVkdWNlUmlnaHQgICAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0CiAgICAsIGFycmF5Sm9pbiAgICAgICAgICAgPSBBcnJheVByb3RvLmpvaW4KICAgICwgYXJyYXlTb3J0ICAgICAgICAgICA9IEFycmF5UHJvdG8uc29ydAogICAgLCBhcnJheVNsaWNlICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZQogICAgLCBhcnJheVRvU3RyaW5nICAgICAgID0gQXJyYXlQcm90by50b1N0cmluZwogICAgLCBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZwogICAgLCBJVEVSQVRPUiAgICAgICAgICAgID0gd2tzKCdpdGVyYXRvcicpCiAgICAsIFRBRyAgICAgICAgICAgICAgICAgPSB3a3MoJ3RvU3RyaW5nVGFnJykKICAgICwgVFlQRURfQ09OU1RSVUNUT1IgICA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKQogICAgLCBERUZfQ09OU1RSVUNUT1IgICAgID0gdWlkKCdkZWZfY29uc3RydWN0b3InKQogICAgLCBBTExfQ09OU1RSVUNUT1JTICAgID0gJHR5cGVkLkNPTlNUUgogICAgLCBUWVBFRF9BUlJBWSAgICAgICAgID0gJHR5cGVkLlRZUEVECiAgICAsIFZJRVcgICAgICAgICAgICAgICAgPSAkdHlwZWQuVklFVwogICAgLCBXUk9OR19MRU5HVEggICAgICAgID0gJ1dyb25nIGxlbmd0aCEnOwoKICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uKE8sIGxlbmd0aCl7CiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7CiAgfSk7CgogIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24oKXsKICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxOwogIH0pOwoKICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7CiAgfSk7CgogIHZhciBzdHJpY3RUb0xlbmd0aCA9IGZ1bmN0aW9uKGl0LCBTQU1FKXsKICAgIGlmKGl0ID09PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICB2YXIgbnVtYmVyID0gK2l0CiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoaXQpOwogICAgaWYoU0FNRSAmJiAhc2FtZShudW1iZXIsIGxlbmd0aCkpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgcmV0dXJuIGxlbmd0aDsKICB9OwoKICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbihpdCwgQllURVMpewogICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7CiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTsKICAgIHJldHVybiBvZmZzZXQ7CiAgfTsKCiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24oaXQpewogICAgaWYoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KXJldHVybiBpdDsKICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7CiAgfTsKCiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24oQywgbGVuZ3RoKXsKICAgIGlmKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpewogICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpOwogICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTsKICB9OwoKICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24oTywgbGlzdCl7CiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpOwogIH07CgogIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uKEMsIGxpc3QpewogICAgdmFyIGluZGV4ICA9IDAKICAgICAgLCBsZW5ndGggPSBsaXN0Lmxlbmd0aAogICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7CiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKGl0LCBrZXksIGludGVybmFsKXsKICAgIGRQKGl0LCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfX0pOwogIH07CgogIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qLCBtYXBmbiwgdGhpc0FyZyAqLyl7CiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KHNvdXJjZSkKICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZAogICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkCiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKQogICAgICAsIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yOwogICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSl7CiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKXsKICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTsKICAgICAgfSBPID0gdmFsdWVzOwogICAgfQogICAgaWYobWFwcGluZyAmJiBhTGVuID4gMiltYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTsKICAgIGZvcihpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspewogICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldOwogICAgfQogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyouLi5pdGVtcyovKXsKICAgIHZhciBpbmRleCAgPSAwCiAgICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7CiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdOwogICAgcmV0dXJuIHJlc3VsdDsKICB9OwoKICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlCiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7CgogIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpewogICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICB9OwoKICB2YXIgcHJvdG8gPSB7CiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyosIGVuZCAqLyl7CiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCwgZW5kICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLAogICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7CiAgICB9LAogICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXsKICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pewogICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgICB9LAogICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpewogICAgICB2YXIgdGhhdCAgID0gdGhpcwogICAgICAgICwgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoCiAgICAgICAgLCBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpCiAgICAgICAgLCBpbmRleCAgPSAwCiAgICAgICAgLCB2YWx1ZTsKICAgICAgd2hpbGUoaW5kZXggPCBtaWRkbGUpewogICAgICAgIHZhbHVlICAgICAgICAgPSB0aGF0W2luZGV4XTsKICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07CiAgICAgICAgdGhhdFtsZW5ndGhdICA9IHZhbHVlOwogICAgICB9IHJldHVybiB0aGF0OwogICAgfSwKICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7CiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTsKICAgIH0sCiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCl7CiAgICAgIHZhciBPICAgICAgPSB2YWxpZGF0ZSh0aGlzKQogICAgICAgICwgbGVuZ3RoID0gTy5sZW5ndGgKICAgICAgICAsICRiZWdpbiA9IHRvSW5kZXgoYmVnaW4sIGxlbmd0aCk7CiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKSgKICAgICAgICBPLmJ1ZmZlciwKICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULAogICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbikKICAgICAgKTsKICAgIH0KICB9OwoKICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7CiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpOwogIH07CgogIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiwgb2Zmc2V0ICovKXsKICAgIHZhbGlkYXRlKHRoaXMpOwogICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSkKICAgICAgLCBsZW5ndGggPSB0aGlzLmxlbmd0aAogICAgICAsIHNyYyAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSkKICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aChzcmMubGVuZ3RoKQogICAgICAsIGluZGV4ICA9IDA7CiAgICBpZihsZW4gKyBvZmZzZXQgPiBsZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgd2hpbGUoaW5kZXggPCBsZW4pdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107CiAgfTsKCiAgdmFyICRpdGVyYXRvcnMgPSB7CiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCl7CiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7CiAgICB9LAogICAga2V5czogZnVuY3Rpb24ga2V5cygpewogICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpOwogICAgfSwKICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCl7CiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTsKICAgIH0KICB9OwoKICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24odGFyZ2V0LCBrZXkpewogICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldCkKICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXQogICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnCiAgICAgICYmIGtleSBpbiB0YXJnZXQKICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpOwogIH07CiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KXsKICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKQogICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSkKICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTsKICB9OwogIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKXsKICAgIGlmKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpCiAgICAgICYmIGlzT2JqZWN0KGRlc2MpCiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKQogICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKQogICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKQogICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29ycwogICAgICAmJiAhZGVzYy5jb25maWd1cmFibGUKICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSkKICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpCiAgICApewogICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7CiAgICAgIHJldHVybiB0YXJnZXQ7CiAgICB9IGVsc2UgcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTsKICB9OwoKICBpZighQUxMX0NPTlNUUlVDVE9SUyl7CiAgICAkR09QRC5mID0gJGdldERlc2M7CiAgICAkRFAuZiAgID0gJHNldERlc2M7CiAgfQoKICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0JywgewogICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYywKICAgIGRlZmluZVByb3BlcnR5OiAgICAgICAgICAgJHNldERlc2MKICB9KTsKCiAgaWYoZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpewogICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpewogICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7CiAgICB9CiAgfQoKICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTsKICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpOwogIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpOwogIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgewogICAgc2xpY2U6ICAgICAgICAgICRzbGljZSwKICAgIHNldDogICAgICAgICAgICAkc2V0LAogICAgY29uc3RydWN0b3I6ICAgIGZ1bmN0aW9uKCl7IC8qIG5vb3AgKi8gfSwKICAgIHRvU3RyaW5nOiAgICAgICBhcnJheVRvU3RyaW5nLAogICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZwogIH0pOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7CiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHsKICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9CiAgfSk7CgogIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCl7CiAgICBDTEFNUEVEID0gISFDTEFNUEVEOwogICAgdmFyIE5BTUUgICAgICAgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheScKICAgICAgLCBJU05UX1VJTlQ4ID0gTkFNRSAhPSAnVWludDhBcnJheScKICAgICAgLCBHRVRURVIgICAgID0gJ2dldCcgKyBLRVkKICAgICAgLCBTRVRURVIgICAgID0gJ3NldCcgKyBLRVkKICAgICAgLCBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdCiAgICAgICwgQmFzZSAgICAgICA9IFR5cGVkQXJyYXkgfHwge30KICAgICAgLCBUQUMgICAgICAgID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KQogICAgICAsIEZPUkNFRCAgICAgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVgogICAgICAsIE8gICAgICAgICAgPSB7fQogICAgICAsIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTsKICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7CiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDsKICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pOwogICAgfTsKICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCwgdmFsdWUpewogICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7CiAgICAgIGlmKENMQU1QRUQpdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7CiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTsKICAgIH07CiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXsKICAgICAgZFAodGhhdCwgaW5kZXgsIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTsKICAgICAgICB9LAogICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZQogICAgICB9KTsKICAgIH07CiAgICBpZihGT1JDRUQpewogICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXsKICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpOwogICAgICAgIHZhciBpbmRleCAgPSAwCiAgICAgICAgICAsIG9mZnNldCA9IDAKICAgICAgICAgICwgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzOwogICAgICAgIGlmKCFpc09iamVjdChkYXRhKSl7CiAgICAgICAgICBsZW5ndGggICAgID0gc3RyaWN0VG9MZW5ndGgoZGF0YSwgdHJ1ZSkKICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUzsKICAgICAgICAgIGJ1ZmZlciAgICAgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpOwogICAgICAgIH0gZWxzZSBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXsKICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7CiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7CiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDsKICAgICAgICAgIGlmKCRsZW5ndGggPT09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgIGlmKCRsZW4gJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0OwogICAgICAgICAgICBpZihieXRlTGVuZ3RoIDwgMCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUzsKICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgICAgICAgfQogICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTOwogICAgICAgIH0gZWxzZSBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXsKICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgICAgfQogICAgICAgIGhpZGUodGhhdCwgJ19kJywgewogICAgICAgICAgYjogYnVmZmVyLAogICAgICAgICAgbzogb2Zmc2V0LAogICAgICAgICAgbDogYnl0ZUxlbmd0aCwKICAgICAgICAgIGU6IGxlbmd0aCwKICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKQogICAgICAgIH0pOwogICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKWFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7CiAgICAgIH0pOwogICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7CiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7CiAgICB9IGVsc2UgaWYoISRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpewogICAgICAvLyBWOCB3b3JrcyB3aXRoIGl0ZXJhdG9ycywgYnV0IGZhaWxzIGluIG1hbnkgb3RoZXIgY2FzZXMKICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQ1NTIKICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgfSwgdHJ1ZSkpewogICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXsKICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpOwogICAgICAgIHZhciBrbGFzczsKICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheQogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1CiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXJldHVybiBuZXcgQmFzZShzdHJpY3RUb0xlbmd0aChkYXRhLCBJU05UX1VJTlQ4KSk7CiAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7CiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkCiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKQogICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZAogICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKQogICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7CiAgICAgICAgfQogICAgICAgIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpOwogICAgICB9KTsKICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uKGtleSl7CiAgICAgICAgaWYoIShrZXkgaW4gVHlwZWRBcnJheSkpaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7CiAgICAgIH0pOwogICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlOwogICAgICBpZighTElCUkFSWSlUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTsKICAgIH0KICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgICA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdCiAgICAgICwgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvciAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKQogICAgICAsICRpdGVyYXRvciAgICAgICAgID0gJGl0ZXJhdG9ycy52YWx1ZXM7CiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTsKICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpOwogICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTsKICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTsKCiAgICBpZihDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpewogICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBOQU1FOyB9CiAgICAgIH0pOwogICAgfQoKICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5OwoKICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pOwoKICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7CiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFUywKICAgICAgZnJvbTogJGZyb20sCiAgICAgIG9mOiAkb2YKICAgIH0pOwoKICAgIGlmKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpOwoKICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7CgogICAgc2V0U3BlY2llcyhOQU1FKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHtzZXQ6ICRzZXR9KTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSwgTkFNRSwge3RvU3RyaW5nOiBhcnJheVRvU3RyaW5nfSk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpewogICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpOwogICAgfSksIE5BTUUsIHtzbGljZTogJHNsaWNlfSk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXsKICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKQogICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7CiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pOwogICAgfSkpLCBOQU1FLCB7dG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ30pOwoKICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yOwogICAgaWYoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7CiAgfTsKfSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjo2LCIuL19hcnJheS1jb3B5LXdpdGhpbiI6OCwiLi9fYXJyYXktZmlsbCI6OSwiLi9fYXJyYXktaW5jbHVkZXMiOjExLCIuL19hcnJheS1tZXRob2RzIjoxMiwiLi9fY2xhc3NvZiI6MTcsIi4vX2N0eCI6MjUsIi4vX2Rlc2NyaXB0b3JzIjoyOCwiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0LCIuL19nbG9iYWwiOjM4LCIuL19oYXMiOjM5LCIuL19oaWRlIjo0MCwiLi9faXMtYXJyYXktaXRlciI6NDYsIi4vX2lzLWludGVnZXIiOjQ4LCIuL19pcy1vYmplY3QiOjQ5LCIuL19pdGVyLWRldGVjdCI6NTQsIi4vX2l0ZXJhdG9ycyI6NTYsIi4vX2xpYnJhcnkiOjU4LCIuL19vYmplY3QtY3JlYXRlIjo2NiwiLi9fb2JqZWN0LWRwIjo2NywiLi9fb2JqZWN0LWdvcGQiOjcwLCIuL19vYmplY3QtZ29wbiI6NzIsIi4vX29iamVjdC1ncG8iOjc0LCIuL19wcm9wZXJ0eS1kZXNjIjo4NSwiLi9fcmVkZWZpbmUtYWxsIjo4NiwiLi9fc2FtZS12YWx1ZSI6ODksIi4vX3NldC1zcGVjaWVzIjo5MSwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6OTUsIi4vX3RvLWluZGV4IjoxMDUsIi4vX3RvLWludGVnZXIiOjEwNiwiLi9fdG8tbGVuZ3RoIjoxMDgsIi4vX3RvLW9iamVjdCI6MTA5LCIuL190by1wcmltaXRpdmUiOjExMCwiLi9fdHlwZWQiOjExMywiLi9fdHlwZWQtYnVmZmVyIjoxMTIsIi4vX3VpZCI6MTE0LCIuL193a3MiOjExNywiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjExOCwiLi9jb3JlLmlzLWl0ZXJhYmxlIjoxMTksIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjoxMzF9XSwxMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgLCAkdHlwZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCByZWRlZmluZUFsbCAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgdG9JbnRlZ2VyICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGdPUE4gICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgLCBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGFycmF5RmlsbCAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIEFSUkFZX0JVRkZFUiAgID0gJ0FycmF5QnVmZmVyJwogICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnCiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnCiAgLCBXUk9OR19MRU5HVEggICA9ICdXcm9uZyBsZW5ndGghJwogICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJwogICwgJEFycmF5QnVmZmVyICAgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXQogICwgJERhdGFWaWV3ICAgICAgPSBnbG9iYWxbREFUQV9WSUVXXQogICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aAogICwgcGFyc2VJbnQgICAgICAgPSBnbG9iYWwucGFyc2VJbnQKICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3IKICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5CiAgLCBCYXNlQnVmZmVyICAgICA9ICRBcnJheUJ1ZmZlcgogICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFicwogICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvdwogICwgbWluICAgICAgICAgICAgPSBNYXRoLm1pbgogICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yCiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nCiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yCiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInCiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJwogICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCcKICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSCiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RICiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUOwoKLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTQKdmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7CiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcykKICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyAgPSBlTWF4ID4+IDEKICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMAogICAgLCBpICAgICAgPSAwCiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDAKICAgICwgZSwgbSwgYzsKICB2YWx1ZSA9IGFicyh2YWx1ZSkKICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpewogICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7CiAgICBlID0gZU1heDsKICB9IGVsc2UgewogICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpOwogICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7CiAgICAgIGUtLTsKICAgICAgYyAqPSAyOwogICAgfQogICAgaWYoZSArIGVCaWFzID49IDEpewogICAgICB2YWx1ZSArPSBydCAvIGM7CiAgICB9IGVsc2UgewogICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpOwogICAgfQogICAgaWYodmFsdWUgKiBjID49IDIpewogICAgICBlKys7CiAgICAgIGMgLz0gMjsKICAgIH0KICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXsKICAgICAgbSA9IDA7CiAgICAgIGUgPSBlTWF4OwogICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXsKICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTsKICAgICAgZSA9IGUgKyBlQmlhczsKICAgIH0gZWxzZSB7CiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pOwogICAgICBlID0gMDsKICAgIH0KICB9CiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpOwogIGUgPSBlIDw8IG1MZW4gfCBtOwogIGVMZW4gKz0gbUxlbjsKICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTsKICBidWZmZXJbLS1pXSB8PSBzICogMTI4OwogIHJldHVybiBidWZmZXI7Cn07CnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpewogIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMQogICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMQogICAgLCBlQmlhcyA9IGVNYXggPj4gMQogICAgLCBuQml0cyA9IGVMZW4gLSA3CiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMQogICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dCiAgICAsIGUgICAgID0gcyAmIDEyNwogICAgLCBtOwogIHMgPj49IDc7CiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTsKICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxOwogIGUgPj49IC1uQml0czsKICBuQml0cyArPSBtTGVuOwogIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7CiAgaWYoZSA9PT0gMCl7CiAgICBlID0gMSAtIGVCaWFzOwogIH0gZWxzZSBpZihlID09PSBlTWF4KXsKICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5OwogIH0gZWxzZSB7CiAgICBtID0gbSArIHBvdygyLCBtTGVuKTsKICAgIGUgPSBlIC0gZUJpYXM7CiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7Cn07Cgp2YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpewogIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwp9Owp2YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBbaXQgJiAweGZmXTsKfTsKdmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTsKfTsKdmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07Cn07CnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpOwp9Owp2YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTsKfTsKCnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXsKICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7Cn07Cgp2YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTsKICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7Cn07CnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7CiAgdmFyIG51bUluZGV4ID0gK2luZGV4CiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTsKICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7CiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYgogICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXQogICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTsKICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTsKfTsKCnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXsKICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTsKICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aAogICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpOwogIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICByZXR1cm4gYnl0ZUxlbmd0aDsKfTsKCmlmKCEkdHlwZWQuQUJWKXsKICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpewogICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7CiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApOwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXsKICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpOwogICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTsKICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF0KICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7CiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7CiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7CiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7CiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0OwogICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7CiAgfTsKCiAgaWYoREVTQ1JJUFRPUlMpewogICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTsKICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTsKICB9CgogIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpewogICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0OwogICAgfSwKICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXsKICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTsKICAgIH0sCiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7CiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjsKICAgIH0sCiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTsKICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTsKICAgIH0sCiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7CiAgICB9LAogICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7CiAgICB9LAogICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpOwogICAgfSwKICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTsKICAgIH0sCiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpOwogICAgfSwKICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7CiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTsKICAgIH0sCiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0KICB9KTsKfSBlbHNlIHsKICBpZighZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpewogICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgfSkpewogICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXsKICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7CiAgICB9OwogICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTsKICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXsKICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7CiAgICB9OwogICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjsKICB9CiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnCiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpCiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODsKICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7CiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpOwogIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7CiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9LAogICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7CiAgICB9CiAgfSwgdHJ1ZSk7Cn0Kc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwpzZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7CmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTsKZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyOwpleHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7Cn0seyIuL19hbi1pbnN0YW5jZSI6NiwiLi9fYXJyYXktZmlsbCI6OSwiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19mYWlscyI6MzQsIi4vX2dsb2JhbCI6MzgsIi4vX2hpZGUiOjQwLCIuL19saWJyYXJ5Ijo1OCwiLi9fb2JqZWN0LWRwIjo2NywiLi9fb2JqZWN0LWdvcG4iOjcyLCIuL19yZWRlZmluZS1hbGwiOjg2LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6OTIsIi4vX3RvLWludGVnZXIiOjEwNiwiLi9fdG8tbGVuZ3RoIjoxMDgsIi4vX3R5cGVkIjoxMTN9XSwxMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhpZGUgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAsIFRZUEVEICA9IHVpZCgndHlwZWRfYXJyYXknKQogICwgVklFVyAgID0gdWlkKCd2aWV3JykKICAsIEFCViAgICA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpCiAgLCBDT05TVFIgPSBBQlYKICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7Cgp2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9ICgKICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknCikuc3BsaXQoJywnKTsKCndoaWxlKGkgPCBsKXsKICBpZihUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKXsKICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7CiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBBQlY6ICAgIEFCViwKICBDT05TVFI6IENPTlNUUiwKICBUWVBFRDogIFRZUEVELAogIFZJRVc6ICAgVklFVwp9Owp9LHsiLi9fZ2xvYmFsIjozOCwiLi9faGlkZSI6NDAsIi4vX3VpZCI6MTE0fV0sMTE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlkID0gMAogICwgcHggPSBNYXRoLnJhbmRvbSgpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTsKfTsKfSx7fV0sMTE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykNCiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQ0KICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpDQogICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JykNCiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpew0KICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pOw0KICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTsNCn07Cn0seyIuL19jb3JlIjoyMywiLi9fZ2xvYmFsIjozOCwiLi9fbGlicmFyeSI6NTgsIi4vX29iamVjdC1kcCI6NjcsIi4vX3drcy1leHQiOjExNn1dLDExNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpOwp9LHsiLi9fd2tzIjoxMTd9XSwxMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKQogICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpCiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sCiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nOwoKdmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXsKICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7Cn07CgokZXhwb3J0cy5zdG9yZSA9IHN0b3JlOwp9LHsiLi9fZ2xvYmFsIjozOCwiLi9fc2hhcmVkIjo5NCwiLi9fdWlkIjoxMTR9XSwxMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKQogICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpewogIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdCiAgICB8fCBpdFsnQEBpdGVyYXRvciddCiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldOwp9Owp9LHsiLi9fY2xhc3NvZiI6MTcsIi4vX2NvcmUiOjIzLCIuL19pdGVyYXRvcnMiOjU2LCIuL193a3MiOjExN31dLDExOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuaXNJdGVyYWJsZSA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgTyA9IE9iamVjdChpdCk7CiAgcmV0dXJuIE9bSVRFUkFUT1JdICE9PSB1bmRlZmluZWQKICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPCiAgICB8fCBJdGVyYXRvcnMuaGFzT3duUHJvcGVydHkoY2xhc3NvZihPKSk7Cn07Cn0seyIuL19jbGFzc29mIjoxNywiLi9fY29yZSI6MjMsIi4vX2l0ZXJhdG9ycyI6NTYsIi4vX3drcyI6MTE3fV0sMTIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcmUgICAgID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXiQqKz8uKCl8W1xde31dL2csICdcXCQmJyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHtlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCl7IHJldHVybiAkcmUoaXQpOyB9fSk7Cgp9LHsiLi9fZXhwb3J0IjozMiwiLi9fcmVwbGFjZXIiOjg4fV0sMTIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyl9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjUsIi4vX2FycmF5LWNvcHktd2l0aGluIjo4LCIuL19leHBvcnQiOjMyfV0sMTIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsICRldmVyeSAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7DQoNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHsNCiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pDQogIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7DQogICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOw0KICB9DQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyLCIuL19leHBvcnQiOjMyLCIuL19zdHJpY3QtbWV0aG9kIjo5Nn1dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJyl9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjUsIi4vX2FycmF5LWZpbGwiOjksIi4vX2V4cG9ydCI6MzJ9XSwxMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSkKICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOwogIH0KfSk7Cn0seyIuL19hcnJheS1tZXRob2RzIjoxMiwiLi9fZXhwb3J0IjozMiwiLi9fc3RyaWN0LW1ldGhvZCI6OTZ9XSwxMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpCiAgLCBLRVkgICAgID0gJ2ZpbmRJbmRleCcKICAsIGZvcmNlZCAgPSB0cnVlOwovLyBTaG91bGRuJ3Qgc2tpcCBob2xlcwppZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7CiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7CiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6NSwiLi9fYXJyYXktbWV0aG9kcyI6MTIsIi4vX2V4cG9ydCI6MzJ9XSwxMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KQogICwgS0VZICAgICA9ICdmaW5kJwogICwgZm9yY2VkICA9IHRydWU7Ci8vIFNob3VsZG4ndCBza2lwIGhvbGVzCmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTsKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHsKICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7CiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7CnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjUsIi4vX2FycmF5LW1ldGhvZHMiOjEyLCIuL19leHBvcnQiOjMyfV0sMTI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKQ0KICAsIFNUUklDVCAgID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpOw0KDQokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHsNCiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pDQogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pew0KICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOw0KICB9DQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyLCIuL19leHBvcnQiOjMyLCIuL19zdHJpY3QtbWV0aG9kIjo5Nn1dLDEyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpCiAgLCBnZXRJdGVyRm4gICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5JywgewogIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXsKICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKQogICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5CiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQKICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZAogICAgICAsIGluZGV4ICAgPSAwCiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKQogICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTsKICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZQogICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpewogICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7CiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7CiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7CiAgICAgIH0KICAgIH0KICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKCn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjI0LCIuL19jdHgiOjI1LCIuL19leHBvcnQiOjMyLCIuL19pcy1hcnJheS1pdGVyIjo0NiwiLi9faXRlci1jYWxsIjo1MSwiLi9faXRlci1kZXRlY3QiOjU0LCIuL190by1sZW5ndGgiOjEwOCwiLi9fdG8tb2JqZWN0IjoxMDksIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoxMTh9XSwxMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQp2YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpDQogICwgJGluZGV4T2YgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpDQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2YNCiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwOw0KDQokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7DQogIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pDQogIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7DQogICAgcmV0dXJuIE5FR0FUSVZFX1pFUk8NCiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzANCiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDANCiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTsNCiAgfQ0KfSk7Cn0seyIuL19hcnJheS1pbmNsdWRlcyI6MTEsIi4vX2V4cG9ydCI6MzIsIi4vX3N0cmljdC1tZXRob2QiOjk2fV0sMTMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZykNCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7DQoNCiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7aXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKX0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9faXMtYXJyYXkiOjQ3fV0sMTMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpCiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJykKICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTsKCi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKCkKLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKCkKLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKQovLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7CiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4CiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmQKLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCn0sIGZ1bmN0aW9uKCl7CiAgdmFyIE8gICAgID0gdGhpcy5fdAogICAgLCBraW5kICA9IHRoaXMuX2sKICAgICwgaW5kZXggPSB0aGlzLl9pKys7CiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpewogICAgdGhpcy5fdCA9IHVuZGVmaW5lZDsKICAgIHJldHVybiBzdGVwKDEpOwogIH0KICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTsKICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTsKICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7Cn0sICd2YWx1ZXMnKTsKCi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNykKSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTsKCmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTsKYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6NSwiLi9faXRlci1kZWZpbmUiOjUzLCIuL19pdGVyLXN0ZXAiOjU1LCIuL19pdGVyYXRvcnMiOjU2LCIuL190by1pb2JqZWN0IjoxMDd9XSwxMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQovLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKQ0KdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpDQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpDQogICwgYXJyYXlKb2luID0gW10uam9pbjsNCg0KLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3MNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywgew0KICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7DQogICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpOw0KICB9DQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX2lvYmplY3QiOjQ1LCIuL19zdHJpY3QtbWV0aG9kIjo5NiwiLi9fdG8taW9iamVjdCI6MTA3fV0sMTMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIHRvSU9iamVjdCAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykNCiAgLCB0b0ludGVnZXIgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpDQogICwgdG9MZW5ndGggICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpDQogICwgJG5hdGl2ZSAgICAgICA9IFtdLmxhc3RJbmRleE9mDQogICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7DQoNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHsNCiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pDQogIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pew0KICAgIC8vIGNvbnZlcnQgLTAgdG8gKzANCiAgICBpZihORUdBVElWRV9aRVJPKXJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDsNCiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KHRoaXMpDQogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQ0KICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxOw0KICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTsNCiAgICBpZihpbmRleCA8IDApaW5kZXggPSBsZW5ndGggKyBpbmRleDsNCiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudClyZXR1cm4gaW5kZXggfHwgMDsNCiAgICByZXR1cm4gLTE7DQogIH0NCn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fc3RyaWN0LW1ldGhvZCI6OTYsIi4vX3RvLWludGVnZXIiOjEwNiwiLi9fdG8taW9iamVjdCI6MTA3LCIuL190by1sZW5ndGgiOjEwOH1dLDEzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCAkbWFwICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpOw0KDQokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywgew0KICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKQ0KICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7DQogICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsNCiAgfQ0KfSk7Cn0seyIuL19hcnJheS1tZXRob2RzIjoxMiwiLi9fZXhwb3J0IjozMiwiLi9fc3RyaWN0LW1ldGhvZCI6OTZ9XSwxMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpOwoKLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWMKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgZnVuY3Rpb24gRigpe30KICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7Cn0pLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKQogIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXsKICAgIHZhciBpbmRleCAgPSAwCiAgICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7CiAgICB3aGlsZShhTGVuID4gaW5kZXgpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTsKICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwp9LHsiLi9fY3JlYXRlLXByb3BlcnR5IjoyNCwiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0fV0sMTM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTsNCg0KJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywgew0KICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSkNCiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pew0KICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7DQogIH0NCn0pOwp9LHsiLi9fYXJyYXktcmVkdWNlIjoxMywiLi9fZXhwb3J0IjozMiwiLi9fc3RyaWN0LW1ldGhvZCI6OTZ9XSwxMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpDQogICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpOw0KDQokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywgew0KICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pDQogIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pew0KICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpOw0KICB9DQp9KTsKfSx7Ii4vX2FycmF5LXJlZHVjZSI6MTMsIi4vX2V4cG9ydCI6MzIsIi4vX3N0cmljdC1tZXRob2QiOjk2fV0sMTM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KdmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIGh0bWwgICAgICAgPSByZXF1aXJlKCcuL19odG1sJykNCiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJykNCiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQ0KICAsIHRvTGVuZ3RoICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQ0KICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTsNCg0KLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0cw0KJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7DQogIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpOw0KfSksICdBcnJheScsIHsNCiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpew0KICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKQ0KICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTsNCiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDsNCiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7DQogICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbikNCiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbikNCiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KQ0KICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKQ0KICAgICAgLCBpICAgICAgPSAwOw0KICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZycNCiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKQ0KICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07DQogICAgcmV0dXJuIGNsb25lZDsNCiAgfQ0KfSk7Cn0seyIuL19jb2YiOjE4LCIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzQsIi4vX2h0bWwiOjQxLCIuL190by1pbmRleCI6MTA1LCIuL190by1sZW5ndGgiOjEwOH1dLDEzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpOw0KDQokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHsNCiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pDQogIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pew0KICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pOw0KICB9DQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEyLCIuL19leHBvcnQiOjMyLCIuL19zdHJpY3QtbWV0aG9kIjo5Nn1dLDE0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQ0KICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpDQogICwgZmFpbHMgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQ0KICAsICRzb3J0ICAgICA9IFtdLnNvcnQNCiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107DQoNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7DQogIC8vIElFOC0NCiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7DQp9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXsNCiAgLy8gVjggYnVnDQogIHRlc3Quc29ydChudWxsKTsNCiAgLy8gT2xkIFdlYktpdA0KfSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7DQogIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pDQogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXsNCiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWQNCiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSkNCiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpOw0KICB9DQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMsIi4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzIjozNCwiLi9fc3RyaWN0LW1ldGhvZCI6OTYsIi4vX3RvLW9iamVjdCI6MTA5fV0sMTQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTsKfSx7Ii4vX3NldC1zcGVjaWVzIjo5MX1dLDE0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKQ0KdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsNCg0KJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywge25vdzogZnVuY3Rpb24oKXsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9fSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMTQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKCkNCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQ0KICAsIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lOw0KDQp2YXIgbHogPSBmdW5jdGlvbihudW0pew0KICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTsNCn07DQoNCi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9ucw0KJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXsNCiAgcmV0dXJuIG5ldyBEYXRlKC01ZTEzIC0gMSkudG9JU09TdHJpbmcoKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJzsNCn0pIHx8ICFmYWlscyhmdW5jdGlvbigpew0KICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7DQp9KSksICdEYXRlJywgew0KICB0b0lTT1N0cmluZzogZnVuY3Rpb24gdG9JU09TdHJpbmcoKXsNCiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTsNCiAgICB2YXIgZCA9IHRoaXMNCiAgICAgICwgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKQ0KICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKQ0KICAgICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnOw0KICAgIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICsNCiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICsNCiAgICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgKw0KICAgICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7DQogIH0NCn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0fV0sMTQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTsKfSksICdEYXRlJywgewogIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSl7CiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKQogICAgICAsIHB2ID0gdG9QcmltaXRpdmUoTyk7CiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzQsIi4vX3RvLW9iamVjdCI6MTA5LCIuL190by1wcmltaXRpdmUiOjExMH1dLDE0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKQ0KICAsIHByb3RvICAgICAgICA9IERhdGUucHJvdG90eXBlOw0KDQppZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOwp9LHsiLi9fZGF0ZS10by1wcmltaXRpdmUiOjI2LCIuL19oaWRlIjo0MCwiLi9fd2tzIjoxMTd9XSwxNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgRGF0ZVByb3RvICAgID0gRGF0ZS5wcm90b3R5cGUKICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnCiAgLCBUT19TVFJJTkcgICAgPSAndG9TdHJpbmcnCiAgLCAkdG9TdHJpbmcgICAgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXQogICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7CmlmKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpewogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7CiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7CiAgfSk7Cn0KfSx7Ii4vX3JlZGVmaW5lIjo4N31dLDE0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLikNCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7DQoNCiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogcmVxdWlyZSgnLi9fYmluZCcpfSk7Cn0seyIuL19iaW5kIjoxNiwiLi9fZXhwb3J0IjozMn1dLDE0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpCiAgLCBGdW5jdGlvblByb3RvICA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpCmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pewogIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTsKICBpZighaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiBPIGluc3RhbmNlb2YgdGhpczsKICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOgogIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTsKICByZXR1cm4gZmFsc2U7Cn19KTsKfSx7Ii4vX2lzLW9iamVjdCI6NDksIi4vX29iamVjdC1kcCI6NjcsIi4vX29iamVjdC1ncG8iOjc0LCIuL193a3MiOjExN31dLDE0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBGUHJvdG8gICAgID0gRnVuY3Rpb24ucHJvdG90eXBlCiAgLCBuYW1lUkUgICAgID0gL15ccypmdW5jdGlvbiAoW14gKF0qKS8KICAsIE5BTUUgICAgICAgPSAnbmFtZSc7Cgp2YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpewogIHJldHVybiB0cnVlOwp9OwoKLy8gMTkuMi40LjIgbmFtZQpOQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICB0cnkgewogICAgICB2YXIgdGhhdCA9IHRoaXMKICAgICAgICAsIG5hbWUgPSAoJycgKyB0aGF0KS5tYXRjaChuYW1lUkUpWzFdOwogICAgICBoYXModGhhdCwgTkFNRSkgfHwgIWlzRXh0ZW5zaWJsZSh0aGF0KSB8fCBkUCh0aGF0LCBOQU1FLCBjcmVhdGVEZXNjKDUsIG5hbWUpKTsKICAgICAgcmV0dXJuIG5hbWU7CiAgICB9IGNhdGNoKGUpewogICAgICByZXR1cm4gJyc7CiAgICB9CiAgfQp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoyOCwiLi9faGFzIjozOSwiLi9fb2JqZWN0LWRwIjo2NywiLi9fcHJvcGVydHktZGVzYyI6ODV9XSwxNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpOwoKLy8gMjMuMSBNYXAgT2JqZWN0cwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXsKICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9Owp9LCB7CiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7CiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTsKICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52OwogIH0sCiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSkKICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXsKICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICB9Cn0sIHN0cm9uZywgdHJ1ZSk7Cn0seyIuL19jb2xsZWN0aW9uIjoyMiwiLi9fY29sbGVjdGlvbi1zdHJvbmciOjE5fV0sMTUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBsb2cxcCAgID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpCiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0CiAgLCAkYWNvc2ggID0gTWF0aC5hY29zaDsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2gKICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5CiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMAogIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIAogICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHkKKSwgJ01hdGgnLCB7CiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpewogICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NgogICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjIKICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19tYXRoLWxvZzFwIjo2MH1dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi41IE1hdGguYXNpbmgoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGFzaW5oICA9IE1hdGguYXNpbmg7CgpmdW5jdGlvbiBhc2luaCh4KXsKICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7Cn0KCi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMCAKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywge2FzaW5oOiBhc2luaH0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDE1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi43IE1hdGguYXRhbmgoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0YW5oICA9IE1hdGguYXRhbmg7CgovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDAgCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7CiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpewogICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDE1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi45IE1hdGguY2JydCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXsKICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19tYXRoLXNpZ24iOjYxfV0sMTU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7CiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzJ9XSwxNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpewogICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDE1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRleHBtMSAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywge2V4cG0xOiAkZXhwbTF9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX21hdGgtZXhwbTEiOjU5fV0sMTU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2lnbiAgICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJykKICAsIHBvdyAgICAgICA9IE1hdGgucG93CiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKQogICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMykKICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpCiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7Cgp2YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7CiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OOwp9OwoKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXsKICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpCiAgICAgICwgJHNpZ24gPSBzaWduKHgpCiAgICAgICwgYSwgcmVzdWx0OwogICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7CiAgICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7CiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTsKICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7CiAgICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX21hdGgtc2lnbiI6NjF9XSwxNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYWJzICAgICA9IE1hdGguYWJzOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHZhciBzdW0gID0gMAogICAgICAsIGkgICAgPSAwCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBsYXJnID0gMAogICAgICAsIGFyZywgZGl2OwogICAgd2hpbGUoaSA8IGFMZW4pewogICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pOwogICAgICBpZihsYXJnIDwgYXJnKXsKICAgICAgICBkaXYgID0gbGFyZyAvIGFyZzsKICAgICAgICBzdW0gID0gc3VtICogZGl2ICogZGl2ICsgMTsKICAgICAgICBsYXJnID0gYXJnOwogICAgICB9IGVsc2UgaWYoYXJnID4gMCl7CiAgICAgICAgZGl2ICA9IGFyZyAvIGxhcmc7CiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjsKICAgICAgfSBlbHNlIHN1bSArPSBhcmc7CiAgICB9CiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDE2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGltdWwgICA9IE1hdGguaW11bDsKCi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjsKfSksICdNYXRoJywgewogIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmCiAgICAgICwgeG4gPSAreAogICAgICAsIHluID0gK3kKICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuCiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjsKICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzIjozNH1dLDE2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpewogICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMTYyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19tYXRoLWxvZzFwIjo2MH1dLDE2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpewogICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzJ9XSwxNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7c2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX21hdGgtc2lnbiI6NjF9XSwxNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVycwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNzsKfSksICdNYXRoJywgewogIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCl7CiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDEKICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMgogICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzQsIi4vX21hdGgtZXhwbTEiOjU5fV0sMTY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpCiAgLCBleHAgICAgID0gTWF0aC5leHA7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXsKICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KQogICAgICAsIGIgPSBleHBtMSgteCk7CiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19tYXRoLWV4cG0xIjo1OX1dLDE2NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KXsKICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMTY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgY29mICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKQogICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJykKICAsIHRvUHJpbWl0aXZlICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGZhaWxzICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYKICAsIGdPUEQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mCiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltCiAgLCBOVU1CRVIgICAgICAgICAgICA9ICdOdW1iZXInCiAgLCAkTnVtYmVyICAgICAgICAgICA9IGdsb2JhbFtOVU1CRVJdCiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXIKICAsIHByb3RvICAgICAgICAgICAgID0gJE51bWJlci5wcm90b3R5cGUKICAvLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmcKICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUgogICwgVFJJTSAgICAgICAgICAgICAgPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTsKCi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KQp2YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCl7CiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTsKICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7CiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7CiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApCiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlOwogICAgaWYoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSl7CiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTsKICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeAogICAgfSBlbHNlIGlmKGZpcnN0ID09PSA0OCl7CiAgICAgIHN3aXRjaChpdC5jaGFyQ29kZUF0KDEpKXsKICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pCiAgICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2kKICAgICAgICBkZWZhdWx0IDogcmV0dXJuICtpdDsKICAgICAgfQogICAgICBmb3IodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspewogICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTsKICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2wKICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9scwogICAgICAgIGlmKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSlyZXR1cm4gTmFOOwogICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTsKICAgIH0KICB9IHJldHVybiAraXQ7Cn07CgppZighJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpewogICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpewogICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWUKICAgICAgLCB0aGF0ID0gdGhpczsKICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlcgogICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2UKICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbigpeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUikKICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpOwogIH07CiAgZm9yKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoCiAgICAvLyBFUzM6CiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArCiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKToKICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArCiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcicKICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKXsKICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpewogICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7CiAgICB9CiAgfQogICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87CiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyOwogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpOwp9Cn0seyIuL19jb2YiOjE4LCIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2ZhaWxzIjozNCwiLi9fZ2xvYmFsIjozOCwiLi9faGFzIjozOSwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6NDMsIi4vX29iamVjdC1jcmVhdGUiOjY2LCIuL19vYmplY3QtZHAiOjY3LCIuL19vYmplY3QtZ29wZCI6NzAsIi4vX29iamVjdC1nb3BuIjo3MiwiLi9fcmVkZWZpbmUiOjg3LCIuL19zdHJpbmctdHJpbSI6MTAyLCIuL190by1wcmltaXRpdmUiOjExMH1dLDE2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMTcwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcikKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCl7CiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX2dsb2JhbCI6Mzh9XSwxNzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge2lzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19pcy1pbnRlZ2VyIjo0OH1dLDE3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsKICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXsKICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMTczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKQogICwgYWJzICAgICAgID0gTWF0aC5hYnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsKICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcil7CiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9faXMtaW50ZWdlciI6NDh9XSwxNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDE3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUgp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmZ9KTsKfSx7Ii4vX2V4cG9ydCI6MzJ9XSwxNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpOwovLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3BhcnNlLWZsb2F0Ijo4MX1dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7Ci8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeCkKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fcGFyc2UtaW50Ijo4Mn1dLDE3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIGFuSW5zdGFuY2UgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykNCiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykNCiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpDQogICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpDQogICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZA0KICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3INCiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF0NCiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uIScNCiAgLCBaRVJPICAgICAgICAgPSAnMCc7DQoNCnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpew0KICB2YXIgaSAgPSAtMQ0KICAgICwgYzIgPSBjOw0KICB3aGlsZSgrK2kgPCA2KXsNCiAgICBjMiArPSBuICogZGF0YVtpXTsNCiAgICBkYXRhW2ldID0gYzIgJSAxZTc7DQogICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7DQogIH0NCn07DQp2YXIgZGl2aWRlID0gZnVuY3Rpb24obil7DQogIHZhciBpID0gNg0KICAgICwgYyA9IDA7DQogIHdoaWxlKC0taSA+PSAwKXsNCiAgICBjICs9IGRhdGFbaV07DQogICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTsNCiAgICBjID0gKGMgJSBuKSAqIDFlNzsNCiAgfQ0KfTsNCnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7DQogIHZhciBpID0gNg0KICAgICwgcyA9ICcnOw0KICB3aGlsZSgtLWkgPj0gMCl7DQogICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXsNCiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pOw0KICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDsNCiAgICB9DQogIH0gcmV0dXJuIHM7DQp9Ow0KdmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7DQogIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTsNCn07DQp2YXIgbG9nID0gZnVuY3Rpb24oeCl7DQogIHZhciBuICA9IDANCiAgICAsIHgyID0geDsNCiAgd2hpbGUoeDIgPj0gNDA5Nil7DQogICAgbiArPSAxMjsNCiAgICB4MiAvPSA0MDk2Ow0KICB9DQogIHdoaWxlKHgyID49IDIpew0KICAgIG4gICs9IDE7DQogICAgeDIgLz0gMjsNCiAgfSByZXR1cm4gbjsNCn07DQoNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKA0KICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHwNCiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fA0KICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHwNCiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnDQopIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7DQogIC8vIFY4IH4gQW5kcm9pZCA0LjMtDQogICR0b0ZpeGVkLmNhbGwoe30pOw0KfSkpLCAnTnVtYmVyJywgew0KICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXsNCiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUikNCiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cykNCiAgICAgICwgcyA9ICcnDQogICAgICAsIG0gPSBaRVJPDQogICAgICAsIGUsIHosIGosIGs7DQogICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpOw0KICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7DQogICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTsNCiAgICBpZih4IDwgMCl7DQogICAgICBzID0gJy0nOw0KICAgICAgeCA9IC14Ow0KICAgIH0NCiAgICBpZih4ID4gMWUtMjEpew0KICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTsNCiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTsNCiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDsNCiAgICAgIGUgPSA1MiAtIGU7DQogICAgICBpZihlID4gMCl7DQogICAgICAgIG11bHRpcGx5KDAsIHopOw0KICAgICAgICBqID0gZjsNCiAgICAgICAgd2hpbGUoaiA+PSA3KXsNCiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApOw0KICAgICAgICAgIGogLT0gNzsNCiAgICAgICAgfQ0KICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTsNCiAgICAgICAgaiA9IGUgLSAxOw0KICAgICAgICB3aGlsZShqID49IDIzKXsNCiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7DQogICAgICAgICAgaiAtPSAyMzsNCiAgICAgICAgfQ0KICAgICAgICBkaXZpZGUoMSA8PCBqKTsNCiAgICAgICAgbXVsdGlwbHkoMSwgMSk7DQogICAgICAgIGRpdmlkZSgyKTsNCiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICBtdWx0aXBseSgwLCB6KTsNCiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7DQogICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7DQogICAgICB9DQogICAgfQ0KICAgIGlmKGYgPiAwKXsNCiAgICAgIGsgPSBtLmxlbmd0aDsNCiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7DQogICAgfSBlbHNlIHsNCiAgICAgIG0gPSBzICsgbTsNCiAgICB9IHJldHVybiBtOw0KICB9DQp9KTsKfSx7Ii4vX2EtbnVtYmVyLXZhbHVlIjo0LCIuL19hbi1pbnN0YW5jZSI6NiwiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0LCIuL19zdHJpbmctcmVwZWF0IjoxMDEsIi4vX3RvLWludGVnZXIiOjEwNn1dLDE3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsICRmYWlscyAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykNCiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpDQogICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247DQoNCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbigpew0KICAvLyBJRTctDQogIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7DQp9KSB8fCAhJGZhaWxzKGZ1bmN0aW9uKCl7DQogIC8vIFY4IH4gQW5kcm9pZCA0LjMtDQogICR0b1ByZWNpc2lvbi5jYWxsKHt9KTsNCn0pKSwgJ051bWJlcicsIHsNCiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7DQogICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7DQogICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pOyANCiAgfQ0KfSk7Cn0seyIuL19hLW51bWJlci12YWx1ZSI6NCwiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0fV0sMTgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19vYmplY3QtYXNzaWduIjo2NX1dLDE4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQ0KJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1jcmVhdGUiOjY2fV0sMTgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsNCi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykNCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1kcHMiOjY4fV0sMTgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsNCi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpDQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1kcCI6Njd9XSwxODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24oJGZyZWV6ZSl7CiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7CiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0Ijo0OSwiLi9fbWV0YSI6NjIsIi4vX29iamVjdC1zYXAiOjc4fV0sMTg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQp2YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXsKICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpewogICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTsKICB9Owp9KTsKfSx7Ii4vX29iamVjdC1nb3BkIjo3MCwiLi9fb2JqZWN0LXNhcCI6NzgsIi4vX3RvLWlvYmplY3QiOjEwN31dLDE4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7Cn0pOwp9LHsiLi9fb2JqZWN0LWdvcG4tZXh0Ijo3MSwiLi9fb2JqZWN0LXNhcCI6Nzh9XSwxODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTykKdmFyIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXsKICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpewogICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpOwogIH07Cn0pOwp9LHsiLi9fb2JqZWN0LWdwbyI6NzQsIi4vX29iamVjdC1zYXAiOjc4LCIuL190by1vYmplY3QiOjEwOX1dLDE4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbigkaXNFeHRlbnNpYmxlKXsKICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3Qtc2FwIjo3OH1dLDE4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24oJGlzRnJvemVuKXsKICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3Qtc2FwIjo3OH1dLDE5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXsKICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3Qtc2FwIjo3OH1dLDE5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2lzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3NhbWUtdmFsdWUiOjg5fV0sMTkyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pCnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCAka2V5cyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpewogIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXsKICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpOwogIH07Cn0pOwp9LHsiLi9fb2JqZWN0LWtleXMiOjc2LCIuL19vYmplY3Qtc2FwIjo3OCwiLi9fdG8tb2JqZWN0IjoxMDl9XSwxOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbigkcHJldmVudEV4dGVuc2lvbnMpewogIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7CiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6NDksIi4vX21ldGEiOjYyLCIuL19vYmplY3Qtc2FwIjo3OH1dLDE5NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbigkc2VhbCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpewogICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0Ijo0OSwiLi9fbWV0YSI6NjIsIi4vX29iamVjdC1zYXAiOjc4fV0sMTk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bykKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fc2V0LXByb3RvIjo5MH1dLDE5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpCnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgLCB0ZXN0ICAgID0ge307CnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onOwppZih0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKXsKICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7CiAgfSwgdHJ1ZSk7Cn0KfSx7Ii4vX2NsYXNzb2YiOjE3LCIuL19yZWRlZmluZSI6ODcsIi4vX3drcyI6MTE3fV0sMTk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7DQovLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpDQokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19wYXJzZS1mbG9hdCI6ODF9XSwxOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTsNCi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KQ0KJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3BhcnNlLWludCI6ODJ9XSwxOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JykKICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpCiAgLCAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJykKICAsIGZvck9mICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpCiAgLCBzZXRQcm90byAgICAgICAgICAgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQKICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKQogICwgdGFzayAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldAogICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnCiAgLCBUeXBlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycKICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH0KICAsIEludGVybmFsLCBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7Cgp2YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXsKICB0cnkgewogICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0CiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpCiAgICAgICwgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07CiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0CiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cn0oKTsKCi8vIGhlbHBlcnMKdmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpewogIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZQogIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7Cn07CnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpewogIHZhciB0aGVuOwogIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTsKfTsKdmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7CiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQykKICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpCiAgICA6IG5ldyBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7Cn07CnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpewogIHZhciByZXNvbHZlLCByZWplY3Q7CiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7CiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpOwogICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTsKICAgIHJlamVjdCAgPSAkJHJlamVjdDsKICB9KTsKICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7CiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7Cn07CnZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYyl7CiAgdHJ5IHsKICAgIGV4ZWMoKTsKICB9IGNhdGNoKGUpewogICAgcmV0dXJuIHtlcnJvcjogZX07CiAgfQp9Owp2YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3QpewogIGlmKHByb21pc2UuX24pcmV0dXJuOwogIHByb21pc2UuX24gPSB0cnVlOwogIHZhciBjaGFpbiA9IHByb21pc2UuX2M7CiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92CiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDEKICAgICAgLCBpICAgICA9IDA7CiAgICB2YXIgcnVuID0gZnVuY3Rpb24ocmVhY3Rpb24pewogICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsCiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZQogICAgICAgICwgcmVqZWN0ICA9IHJlYWN0aW9uLnJlamVjdAogICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpbgogICAgICAgICwgcmVzdWx0LCB0aGVuOwogICAgICB0cnkgewogICAgICAgIGlmKGhhbmRsZXIpewogICAgICAgICAgaWYoIW9rKXsKICAgICAgICAgICAgaWYocHJvbWlzZS5faCA9PSAyKW9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpOwogICAgICAgICAgICBwcm9taXNlLl9oID0gMTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGhhbmRsZXIgPT09IHRydWUpcmVzdWx0ID0gdmFsdWU7CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpOwogICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsKICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7CiAgICAgICAgICB9CiAgICAgICAgICBpZihyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpewogICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpOwogICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpewogICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICByZWplY3QoZSk7CiAgICAgIH0KICAgIH07CiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2gKICAgIHByb21pc2UuX2MgPSBbXTsKICAgIHByb21pc2UuX24gPSBmYWxzZTsKICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpOwogIH0pOwp9Owp2YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpewogICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdgogICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTsKICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXsKICAgICAgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewogICAgICAgIGlmKGlzTm9kZSl7CiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTsKICAgICAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbil7CiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7CiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpewogICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkCiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTsKICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDsKICAgIGlmKGFicnVwdCl0aHJvdyBhYnJ1cHQuZXJyb3I7CiAgfSk7Cn07CnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jCiAgICAsIGkgICAgID0gMAogICAgLCByZWFjdGlvbjsKICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXsKICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTsKICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTsKICB9IHJldHVybiB0cnVlOwp9Owp2YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpewogICAgdmFyIGhhbmRsZXI7CiAgICBpZihpc05vZGUpewogICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTsKICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCl7CiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pOwogICAgfQogIH0pOwp9Owp2YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXsKICB2YXIgcHJvbWlzZSA9IHRoaXM7CiAgaWYocHJvbWlzZS5fZClyZXR1cm47CiAgcHJvbWlzZS5fZCA9IHRydWU7CiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwCiAgcHJvbWlzZS5fdiA9IHZhbHVlOwogIHByb21pc2UuX3MgPSAyOwogIGlmKCFwcm9taXNlLl9hKXByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7CiAgbm90aWZ5KHByb21pc2UsIHRydWUpOwp9Owp2YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSl7CiAgdmFyIHByb21pc2UgPSB0aGlzCiAgICAsIHRoZW47CiAgaWYocHJvbWlzZS5fZClyZXR1cm47CiAgcHJvbWlzZS5fZCA9IHRydWU7CiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwCiAgdHJ5IHsKICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcigiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGYiKTsKICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpewogICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBwcm9taXNlLl92ID0gdmFsdWU7CiAgICAgIHByb21pc2UuX3MgPSAxOwogICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpOwogICAgfQogIH0gY2F0Y2goZSl7CiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcAogIH0KfTsKCi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsCmlmKCFVU0VfTkFUSVZFKXsKICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKQogICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTsKICAgIGFGdW5jdGlvbihleGVjdXRvcik7CiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpOwogICAgdHJ5IHsKICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTsKICAgIH0gY2F0Y2goZXJyKXsKICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7CiAgICB9CiAgfTsKICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpewogICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnMKICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnMKICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGUKICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZQogICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZQogICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZAogICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnkKICB9OwogIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwgewogICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkKICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpewogICAgICB2YXIgcmVhY3Rpb24gICAgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTsKICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7CiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDsKICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7CiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7CiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTsKICAgICAgaWYodGhpcy5fcylub3RpZnkodGhpcywgZmFsc2UpOwogICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsKICAgIH0sCiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKQogICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7CiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTsKICAgIH0KICB9KTsKICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgcHJvbWlzZSAgPSBuZXcgSW50ZXJuYWw7CiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlOwogICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTsKICAgIHRoaXMucmVqZWN0ICA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTsKICB9Owp9CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTsKcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7CnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7CldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07CgovLyBzdGF0aWNzCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHsKICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKQogIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpewogICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQogICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgICQkcmVqZWN0KHIpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KQogIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7CiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlCiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4OwogICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQogICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7CiAgICAkJHJlc29sdmUoeCk7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7CiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTsKfSkpLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpCiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpewogICAgdmFyIEMgICAgICAgICAgPSB0aGlzCiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpCiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZQogICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXQogICAgICAgICwgaW5kZXggICAgID0gMAogICAgICAgICwgcmVtYWluaW5nID0gMTsKICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXsKICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KysKICAgICAgICAgICwgYWxyZWFkeUNhbGxlZCA9IGZhbHNlOwogICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7CiAgICAgICAgcmVtYWluaW5nKys7CiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47CiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7CiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlOwogICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpOwogICAgICAgIH0sIHJlamVjdCk7CiAgICAgIH0pOwogICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICB9KTsKICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfSwKICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpCiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7CiAgICB2YXIgQyAgICAgICAgICA9IHRoaXMKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQykKICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7CiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2UpewogICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICB9KTsKICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMsIi4vX2FuLWluc3RhbmNlIjo2LCIuL19hbi1vYmplY3QiOjcsIi4vX2NsYXNzb2YiOjE3LCIuL19jb3JlIjoyMywiLi9fY3R4IjoyNSwiLi9fZXhwb3J0IjozMiwiLi9fZm9yLW9mIjozNywiLi9fZ2xvYmFsIjozOCwiLi9faXMtb2JqZWN0Ijo0OSwiLi9faXRlci1kZXRlY3QiOjU0LCIuL19saWJyYXJ5Ijo1OCwiLi9fbWljcm90YXNrIjo2NCwiLi9fcmVkZWZpbmUtYWxsIjo4NiwiLi9fc2V0LXByb3RvIjo5MCwiLi9fc2V0LXNwZWNpZXMiOjkxLCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6OTIsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjk1LCIuL190YXNrIjoxMDQsIi4vX3drcyI6MTE3fV0sMjAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgX2FwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KXsKICAgIHJldHVybiBfYXBwbHkuY2FsbChhRnVuY3Rpb24odGFyZ2V0KSwgdGhpc0FyZ3VtZW50LCBhbk9iamVjdChhcmd1bWVudHNMaXN0KSk7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjMsIi4vX2FuLW9iamVjdCI6NywiLi9fZXhwb3J0IjozMn1dLDIwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSkKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjcmVhdGUgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGlzT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBiaW5kICAgICAgPSByZXF1aXJlKCcuL19iaW5kJyk7CgovLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMKLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdAokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICBmdW5jdGlvbiBGKCl7fQogIHJldHVybiAhKFJlZmxlY3QuY29uc3RydWN0KGZ1bmN0aW9uKCl7fSwgW10sIEYpIGluc3RhbmNlb2YgRik7Cn0pLCAnUmVmbGVjdCcsIHsKICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXsKICAgIGFGdW5jdGlvbihUYXJnZXQpOwogICAgYW5PYmplY3QoYXJncyk7CiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTsKICAgIGlmKFRhcmdldCA9PSBuZXdUYXJnZXQpewogICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50cwogICAgICBzd2l0Y2goYXJncy5sZW5ndGgpewogICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQ7CiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTsKICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pOwogICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7CiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTsKICAgICAgfQogICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZQogICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07CiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpOwogICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKTsKICAgIH0KICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9ycwogICAgdmFyIHByb3RvICAgID0gbmV3VGFyZ2V0LnByb3RvdHlwZQogICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSkKICAgICAgLCByZXN1bHQgICA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7CiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlOwogIH0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjozLCIuL19hbi1vYmplY3QiOjcsIi4vX2JpbmQiOjE2LCIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzQsIi4vX2lzLW9iamVjdCI6NDksIi4vX29iamVjdC1jcmVhdGUiOjY2fV0sMjAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykKdmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7CgovLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pOwp9KSwgJ1JlZmxlY3QnLCB7CiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpewogICAgYW5PYmplY3QodGFyZ2V0KTsKICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpOwogICAgYW5PYmplY3QoYXR0cmlidXRlcyk7CiAgICB0cnkgewogICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19leHBvcnQiOjMyLCIuL19mYWlscyI6MzQsIi4vX29iamVjdC1kcCI6NjcsIi4vX3RvLXByaW1pdGl2ZSI6MTEwfV0sMjAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7CiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1nb3BkIjo3MH1dLDIwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldCkKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7CnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7CiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0CiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAogIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXMKICAgICwga2V5OwogIGZvcihrZXkgaW4gaXRlcmF0ZWQpa2V5cy5wdXNoKGtleSk7Cn07CnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXsKICB2YXIgdGhhdCA9IHRoaXMKICAgICwga2V5cyA9IHRoYXQuX2sKICAgICwga2V5OwogIGRvIHsKICAgIGlmKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTsKICB9IHdoaWxlKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpOwogIHJldHVybiB7dmFsdWU6IGtleSwgZG9uZTogZmFsc2V9Owp9KTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpewogICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTsKICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19leHBvcnQiOjMyLCIuL19pdGVyLWNyZWF0ZSI6NTJ9XSwyMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1nb3BkIjo3MH1dLDIwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCkKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpewogICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1ncG8iOjc0fV0sMjA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKQp2YXIgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pewogIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdCiAgICAsIGRlc2MsIHByb3RvOwogIGlmKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKXJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldOwogIGlmKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKQogICAgPyBkZXNjLnZhbHVlCiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWQKICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKQogICAgICA6IHVuZGVmaW5lZDsKICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7Cn0KCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtnZXQ6IGdldH0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19leHBvcnQiOjMyLCIuL19oYXMiOjM5LCIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3QtZ29wZCI6NzAsIi4vX29iamVjdC1ncG8iOjc0fV0sMjA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7CiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0OwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMjA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpCnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KXsKICAgIGFuT2JqZWN0KHRhcmdldCk7CiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7CiAgfQp9KTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fZXhwb3J0IjozMn1dLDIxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19vd24ta2V5cyI6ODB9XSwyMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KQp2YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgdHJ5IHsKICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19leHBvcnQiOjMyfV0sMjEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpOwoKaWYoc2V0UHJvdG8pJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXsKICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pOwogICAgdHJ5IHsKICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fc2V0LXByb3RvIjo5MH1dLDIxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pCnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKCmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pewogIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdCiAgICAsIG93bkRlc2MgID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KQogICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvOwogIGlmKCFvd25EZXNjKXsKICAgIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpewogICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpOwogICAgfQogICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7CiAgfQogIGlmKGhhcyhvd25EZXNjLCAndmFsdWUnKSl7CiAgICBpZihvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKXJldHVybiBmYWxzZTsKICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7CiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWOwogICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7Cn0KCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtzZXQ6IHNldH0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19leHBvcnQiOjMyLCIuL19oYXMiOjM5LCIuL19pcy1vYmplY3QiOjQ5LCIuL19vYmplY3QtZHAiOjY3LCIuL19vYmplY3QtZ29wZCI6NzAsIi4vX29iamVjdC1ncG8iOjc0LCIuL19wcm9wZXJ0eS1kZXNjIjo4NX1dLDIxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKQogICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZgogICwgaXNSZWdFeHAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKQogICwgJGZsYWdzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpCiAgLCAkUmVnRXhwICAgICAgICAgICA9IGdsb2JhbC5SZWdFeHAKICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cAogICwgcHJvdG8gICAgICAgICAgICAgPSAkUmVnRXhwLnByb3RvdHlwZQogICwgcmUxICAgICAgICAgICAgICAgPSAvYS9nCiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2cKICAvLyAibmV3IiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlCiAgLCBDT1JSRUNUX05FVyAgICAgICA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTsKCmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlOwogIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoCiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7Cn0pKSl7CiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKXsKICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHAKICAgICAgLCBwaVJFID0gaXNSZWdFeHAocCkKICAgICAgLCBmaVUgID0gZiA9PT0gdW5kZWZpbmVkOwogICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwCiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVcKICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZikKICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKQogICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApOwogIH07CiAgdmFyIHByb3h5ID0gZnVuY3Rpb24oa2V5KXsKICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwgewogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSwKICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9CiAgICB9KTsKICB9OwogIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pOwogIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDsKICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvOwogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7Cn0KCnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19mYWlscyI6MzQsIi4vX2ZsYWdzIjozNiwiLi9fZ2xvYmFsIjozOCwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6NDMsIi4vX2lzLXJlZ2V4cCI6NTAsIi4vX29iamVjdC1kcCI6NjcsIi4vX29iamVjdC1nb3BuIjo3MiwiLi9fcmVkZWZpbmUiOjg3LCIuL19zZXQtc3BlY2llcyI6OTEsIi4vX3drcyI6MTE3fV0sMjE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKQppZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJykKfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2ZsYWdzIjozNiwiLi9fb2JqZWN0LWRwIjo2N31dLDIxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAbWF0Y2ggbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpewogIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cCkKICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpOwogIH0sICRtYXRjaF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MzV9XSwyMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBAQHJlcGxhY2UgbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UpewogIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkKICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkCiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKQogICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTsKICB9LCAkcmVwbGFjZV07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MzV9XSwyMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBAQHNlYXJjaCBsb2dpYwpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7CiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cCkKICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKQogICAgICAsIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdOwogICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpOwogIH0sICRzZWFyY2hdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjM1fV0sMjE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEBzcGxpdCBsb2dpYwpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgU1BMSVQsICRzcGxpdCl7CiAgJ3VzZSBzdHJpY3QnOwogIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAgICwgX3NwbGl0ICAgICA9ICRzcGxpdAogICAgLCAkcHVzaCAgICAgID0gW10ucHVzaAogICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0JwogICAgLCBMRU5HVEggICAgID0gJ2xlbmd0aCcKICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnOwogIGlmKAogICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHwKICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fAogICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8CiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHwKICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHwKICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXQogICl7CiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cAogICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTsKICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdOwogICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdAogICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgICAgdmFyIG91dHB1dCA9IFtdOwogICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgKwogICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpOwogICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7CiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDsKICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHkKICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTsKICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7CiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydAogICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxzKScsIGZsYWdzKTsKICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7CiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlcgogICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXsKICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpOwogICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0cKICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7CiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7CiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrOwogICAgICAgIH0KICAgICAgICBpZihzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleClzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AKICAgICAgfQogICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7CiAgICAgICAgaWYobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSlvdXRwdXQucHVzaCgnJyk7CiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpOwogICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0OwogICAgfTsKICAvLyBDaGFrcmEsIFY4CiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgIH07CiAgfQogIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpCiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXsKICAgIHZhciBPICA9IGRlZmluZWQodGhpcykKICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdOwogICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTsKICB9LCAkc3BsaXRdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjM1LCIuL19pcy1yZWdleHAiOjUwfV0sMjIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOw0KcmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7DQp2YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQ0KICAsICRmbGFncyAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKQ0KICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKQ0KICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJw0KICAsICR0b1N0cmluZyAgID0gLy4vW1RPX1NUUklOR107DQoNCnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7DQogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7DQp9Ow0KDQovLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpDQppZihyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7c291cmNlOiAnYScsIGZsYWdzOiAnYid9KSAhPSAnL2EvYic7IH0pKXsNCiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7DQogICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTsNCiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLA0KICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpOw0KICB9KTsNCi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lDQp9IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXsNCiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7DQogICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpOw0KICB9KTsNCn0KfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19mYWlscyI6MzQsIi4vX2ZsYWdzIjozNiwiLi9fcmVkZWZpbmUiOjg3LCIuL2VzNi5yZWdleHAuZmxhZ3MiOjIxNX1dLDIyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7CgovLyAyMy4yIFNldCBPYmplY3RzCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpewogIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07Cn0sIHsKICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSkKICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7CiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7CiAgfQp9LCBzdHJvbmcpOwp9LHsiLi9fY29sbGVjdGlvbiI6MjIsIi4vX2NvbGxlY3Rpb24tc3Ryb25nIjoxOX1dLDIyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6OTl9XSwyMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gYmlnKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBibGluaygpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6OTl9XSwyMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7CiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywgewogIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKQogIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpewogICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19zdHJpbmctYXQiOjk3fV0sMjI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKQondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JykKICAsIEVORFNfV0lUSCA9ICdlbmRzV2l0aCcKICAsICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7CiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKXsKICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCkKICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkCiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpCiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKQogICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogICAgcmV0dXJuICRlbmRzV2l0aAogICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKQogICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19mYWlscy1pcy1yZWdleHAiOjMzLCIuL19zdHJpbmctY29udGV4dCI6OTgsIi4vX3RvLWxlbmd0aCI6MTA4fV0sMjI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6OTl9XSwyMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjMxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvSW5kZXggICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgZnJvbUNoYXJDb2RlICAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlCiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50OwoKLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKQogIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHZhciByZXMgID0gW10KICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIGkgICAgPSAwCiAgICAgICwgY29kZTsKICAgIHdoaWxlKGFMZW4gPiBpKXsKICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTsKICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7CiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwCiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSkKICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApCiAgICAgICk7CiAgICB9IHJldHVybiByZXMuam9pbignJyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3RvLWluZGV4IjoxMDV9XSwyMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKQondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjb250ZXh0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JykKICAsIElOQ0xVREVTID0gJ2luY2x1ZGVzJzsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywgewogIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7CiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKQogICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMtaXMtcmVnZXhwIjozMywiLi9fc3RyaW5nLWNvbnRleHQiOjk4fV0sMjMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6OTl9XSwyMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7CgovLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpewogIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAovLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCn0sIGZ1bmN0aW9uKCl7CiAgdmFyIE8gICAgID0gdGhpcy5fdAogICAgLCBpbmRleCA9IHRoaXMuX2kKICAgICwgcG9pbnQ7CiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTsKICBwb2ludCA9ICRhdChPLCBpbmRleCk7CiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7CiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTsKfSk7Cn0seyIuL19pdGVyLWRlZmluZSI6NTMsIi4vX3N0cmluZy1hdCI6OTd9XSwyMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjo5OX1dLDIzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywgewogIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpCiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpewogICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KQogICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKQogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzICA9IFtdCiAgICAgICwgaSAgICA9IDA7CiAgICB3aGlsZShsZW4gPiBpKXsKICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7CiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTsKICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fdG8taW9iamVjdCI6MTA3LCIuL190by1sZW5ndGgiOjEwOH1dLDIzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpCiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JykKfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19zdHJpbmctcmVwZWF0IjoxMDF9XSwyMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJwogICwgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHsKICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXsKICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpCiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSkKICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkc3RhcnRzV2l0aAogICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkKICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzLWlzLXJlZ2V4cCI6MzMsIi4vX3N0cmluZy1jb250ZXh0Ijo5OCwiLi9fdG8tbGVuZ3RoIjoxMDh9XSwyNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjo5OX1dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gc3ViKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjk5fV0sMjQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBzdXAoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6OTl9XSwyNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKQpyZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltKCl7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7CiAgfTsKfSk7Cn0seyIuL19zdHJpbmctdHJpbSI6MTAyfV0sMjQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltCnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgTUVUQSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZCiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKQogICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKQogICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKQogICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JykKICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpCiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2tleW9mJykKICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJykKICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKQogICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKQogICwgJEdPUEQgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJykKICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZgogICwgZFAgICAgICAgICAgICAgPSAkRFAuZgogICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmYKICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbAogICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTgogICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnkKICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZScKICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJykKICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpCiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlCiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JykKICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJykKICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJykKICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV0KICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJwogICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDsKLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczCnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkOwoKLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3CnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywgewogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9CiAgfSkpLmEgIT0gNzsKfSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXsKICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTsKICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07CiAgZFAoaXQsIGtleSwgRCk7CiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpOwp9IDogZFA7Cgp2YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7CiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTsKICBzeW0uX2sgPSB0YWc7CiAgcmV0dXJuIHN5bTsKfTsKCnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJzsKfSA6IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sOwp9OwoKdmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpewogIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpOwogIGFuT2JqZWN0KGl0KTsKICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpOwogIGFuT2JqZWN0KEQpOwogIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXsKICAgIGlmKCFELmVudW1lcmFibGUpewogICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTsKICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7CiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pOwogICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTsKICB9IHJldHVybiBkUChpdCwga2V5LCBEKTsKfTsKdmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7CiAgYW5PYmplY3QoaXQpOwogIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSkKICAgICwgaSAgICA9IDAKICAgICwgbCA9IGtleXMubGVuZ3RoCiAgICAsIGtleTsKICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTsKICByZXR1cm4gaXQ7Cn07CnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXsKICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7Cn07CnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpewogIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7CiAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlOwogIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTsKfTsKdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7CiAgaXQgID0gdG9JT2JqZWN0KGl0KTsKICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpOwogIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47CiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpOwogIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlOwogIHJldHVybiBEOwp9Owp2YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXsKICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKQogICAgLCByZXN1bHQgPSBbXQogICAgLCBpICAgICAgPSAwCiAgICAsIGtleTsKICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsKICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKdmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpewogIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG8KICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpCiAgICAsIHJlc3VsdCA9IFtdCiAgICAsIGkgICAgICA9IDAKICAgICwga2V5OwogIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpewogICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7CiAgfSByZXR1cm4gcmVzdWx0Owp9OwoKLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pCmlmKCFVU0VfTkFUSVZFKXsKICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7CiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTsKICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwogICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7CiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTsKICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlOwogICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpOwogICAgfTsKICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pOwogICAgcmV0dXJuIHdyYXAodGFnKTsKICB9OwogIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHJldHVybiB0aGlzLl9rOwogIH0pOwoKICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5OwogIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzOwogIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTsKICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzOwoKICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKXsKICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpOwogIH0KCiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXsKICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7CiAgfQp9CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7Cgpmb3IodmFyIHN5bWJvbHMgPSAoCiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTQKICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnCikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pOwoKZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHsKICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSkKICAnZm9yJzogZnVuY3Rpb24oa2V5KXsKICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJykKICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldCiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTsKICB9LAogIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKQogIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7CiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTsKICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTsKICB9LAogIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSwKICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHsKICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCiAgY3JlYXRlOiAkY3JlYXRlLAogIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQogIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksCiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykKICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcywKICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApCiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLAogIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsCiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKQogIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9scwp9KTsKCi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKQokSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXsKICB2YXIgUyA9ICRTeW1ib2woKTsKICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fQogIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbAogIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzCiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9JzsKfSkpLCAnSlNPTicsIHsKICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7CiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWQKICAgIHZhciBhcmdzID0gW2l0XQogICAgICAsIGkgICAgPSAxCiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjsKICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7CiAgICByZXBsYWNlciA9IGFyZ3NbMV07CiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjsKICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXsKICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7CiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlOwogICAgfTsKICAgIGFyZ3NbMV0gPSByZXBsYWNlcjsKICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTsKICB9Cn0pOwoKLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KQokU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTsKLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7Ci8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ10Kc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTsKLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ10Kc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2Rlc2NyaXB0b3JzIjoyOCwiLi9fZW51bS1rZXlzIjozMSwiLi9fZXhwb3J0IjozMiwiLi9fZmFpbHMiOjM0LCIuL19nbG9iYWwiOjM4LCIuL19oYXMiOjM5LCIuL19oaWRlIjo0MCwiLi9faXMtYXJyYXkiOjQ3LCIuL19rZXlvZiI6NTcsIi4vX2xpYnJhcnkiOjU4LCIuL19tZXRhIjo2MiwiLi9fb2JqZWN0LWNyZWF0ZSI6NjYsIi4vX29iamVjdC1kcCI6NjcsIi4vX29iamVjdC1nb3BkIjo3MCwiLi9fb2JqZWN0LWdvcG4iOjcyLCIuL19vYmplY3QtZ29wbi1leHQiOjcxLCIuL19vYmplY3QtZ29wcyI6NzMsIi4vX29iamVjdC1rZXlzIjo3NiwiLi9fb2JqZWN0LXBpZSI6NzcsIi4vX3Byb3BlcnR5LWRlc2MiOjg1LCIuL19yZWRlZmluZSI6ODcsIi4vX3NldC10by1zdHJpbmctdGFnIjo5MiwiLi9fc2hhcmVkIjo5NCwiLi9fdG8taW9iamVjdCI6MTA3LCIuL190by1wcmltaXRpdmUiOjExMCwiLi9fdWlkIjoxMTQsIi4vX3drcyI6MTE3LCIuL193a3MtZGVmaW5lIjoxMTUsIi4vX3drcy1leHQiOjExNn1dLDI0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkdHlwZWQgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpCiAgLCBidWZmZXIgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKQogICwgYW5PYmplY3QgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvSW5kZXggICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIHRvTGVuZ3RoICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgVFlQRURfQVJSQVkgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3R5cGVkX2FycmF5JykKICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyCiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJykKICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlcgogICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3CiAgLCAkaXNWaWV3ICAgICAgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldwogICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZQogICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVcKICAsIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwgewogIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpCiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpewogICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7CiAgfQp9KTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7Cn0pLCBBUlJBWV9CVUZGRVIsIHsKICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZCkKICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7CiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4CiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aAogICAgICAsIGZpcnN0ICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pCiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpCiAgICAgICwgdmlld1MgID0gbmV3ICREYXRhVmlldyh0aGlzKQogICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KQogICAgICAsIGluZGV4ICA9IDA7CiAgICB3aGlsZShmaXJzdCA8IGZpbmFsKXsKICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpOwogICAgfSByZXR1cm4gcmVzdWx0OwogIH0KfSk7CgpyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX2V4cG9ydCI6MzIsIi4vX2ZhaWxzIjozNCwiLi9fZ2xvYmFsIjozOCwiLi9faXMtb2JqZWN0Ijo0OSwiLi9fc2V0LXNwZWNpZXMiOjkxLCIuL19zcGVjaWVzLWNvbnN0cnVjdG9yIjo5NSwiLi9fdG8taW5kZXgiOjEwNSwiLi9fdG8tbGVuZ3RoIjoxMDgsIi4vX3R5cGVkIjoxMTMsIi4vX3R5cGVkLWJ1ZmZlciI6MTEyLCIuL193a3MiOjExN31dLDI0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7CiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3Cn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fdHlwZWQiOjExMywiLi9fdHlwZWQtYnVmZmVyIjoxMTJ9XSwyNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoxMTF9XSwyNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoxMTF9XSwyNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjExMX1dLDI1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MTExfV0sMjUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MTExfV0sMjUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjExMX1dLDI1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoxMTF9XSwyNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjExMX1dLDI1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0sIHRydWUpOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjExMX1dLDI1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKQogICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpCiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykKICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpCiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2VhawogICwgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZQogICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZQogICwgdG1wICAgICAgICAgID0ge30KICAsIEludGVybmFsTWFwOwoKdmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpewogIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCl7CiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKICB9Owp9OwoKdmFyIG1ldGhvZHMgPSB7CiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSkKICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpewogICAgaWYoaXNPYmplY3Qoa2V5KSl7CiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpOwogICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpOwogICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7CiAgICB9CiAgfSwKICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSkKICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXsKICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTsKICB9Cn07CgovLyAyMy4zIFdlYWtNYXAgT2JqZWN0cwp2YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha01hcCcsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpOwoKLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeAppZihuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXsKICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlcik7CiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgbWV0YS5ORUVEID0gdHJ1ZTsKICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSl7CiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlCiAgICAgICwgbWV0aG9kID0gcHJvdG9ba2V5XTsKICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpewogICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW0KICAgICAgaWYoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSl7CiAgICAgICAgaWYoIXRoaXMuX2YpdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcDsKICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpOwogICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0OwogICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXAKICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7CiAgICB9KTsKICB9KTsKfQp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTIsIi4vX2NvbGxlY3Rpb24iOjIyLCIuL19jb2xsZWN0aW9uLXdlYWsiOjIxLCIuL19oYXMiOjM5LCIuL19pcy1vYmplY3QiOjQ5LCIuL19tZXRhIjo2MiwiLi9fb2JqZWN0LWFzc2lnbiI6NjUsIi4vX3JlZGVmaW5lIjo4N31dLDI1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTsKCi8vIDIzLjQgV2Vha1NldCBPYmplY3RzCnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07Cn0sIHsKICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpCiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpewogICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTsKICB9Cn0sIHdlYWssIGZhbHNlLCB0cnVlKTsKfSx7Ii4vX2NvbGxlY3Rpb24iOjIyLCIuL19jb2xsZWN0aW9uLXdlYWsiOjIxfV0sMjU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXMKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsKICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pewogICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7CgpyZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6NSwiLi9fYXJyYXktaW5jbHVkZXMiOjExLCIuL19leHBvcnQiOjMyfV0sMjU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrDQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpDQogICwgcHJvY2VzcyAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2Vzcw0KICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJzsNCg0KJGV4cG9ydCgkZXhwb3J0LkcsIHsNCiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbil7DQogICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjsNCiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pOw0KICB9DQp9KTsKfSx7Ii4vX2NvZiI6MTgsIi4vX2V4cG9ydCI6MzIsIi4vX2dsb2JhbCI6MzgsIi4vX21pY3JvdGFzayI6NjR9XSwyNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNvZiAgICAgPSByZXF1aXJlKCcuL19jb2YnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7CiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7CiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJzsKICB9Cn0pOwp9LHsiLi9fY29mIjoxOCwiLi9fZXhwb3J0IjozMn1dLDI2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT04KdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pOwp9LHsiLi9fY29sbGVjdGlvbi10by1qc29uIjoyMCwiLi9fZXhwb3J0IjozMn1dLDI2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKXsKICAgIHZhciAkeDAgPSB4MCA+Pj4gMAogICAgICAsICR4MSA9IHgxID4+PiAwCiAgICAgICwgJHkwID0geTAgPj4+IDA7CiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyfV0sMjYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdil7CiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmCiAgICAgICwgJHUgPSArdQogICAgICAsICR2ID0gK3YKICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2CiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNgogICAgICAsIHUxID0gJHUgPj4gMTYKICAgICAgLCB2MSA9ICR2ID4+IDE2CiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpOwogICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDI2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKXsKICAgIHZhciAkeDAgPSB4MCA+Pj4gMAogICAgICAsICR4MSA9IHgxID4+PiAwCiAgICAgICwgJHkwID0geTAgPj4+IDA7CiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzJ9XSwyNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXsKICAgIHZhciBVSU5UMTYgPSAweGZmZmYKICAgICAgLCAkdSA9ICt1CiAgICAgICwgJHYgPSArdgogICAgICAsIHUwID0gJHUgJiBVSU5UMTYKICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2CiAgICAgICwgdTEgPSAkdSA+Pj4gMTYKICAgICAgLCB2MSA9ICR2ID4+PiAxNgogICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTsKICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjozMn1dLDI2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpDQogICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpDQogICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7DQoNCi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikNCnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywgew0KICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7DQogICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTsNCiAgfQ0KfSk7Cn0seyIuL19hLWZ1bmN0aW9uIjozLCIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1kcCI6NjcsIi4vX29iamVjdC1mb3JjZWQtcGFtIjo2OSwiLi9fdG8tb2JqZWN0IjoxMDl9XSwyNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQp2YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQ0KICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQ0KICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpOw0KDQovLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpDQpyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHsNCiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpew0KICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7c2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7DQogIH0NCn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MywiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19leHBvcnQiOjMyLCIuL19vYmplY3QtZHAiOjY3LCIuL19vYmplY3QtZm9yY2VkLXBhbSI6NjksIi4vX3RvLW9iamVjdCI6MTA5fV0sMjY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7CiAgICByZXR1cm4gJGVudHJpZXMoaXQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19vYmplY3QtdG8tYXJyYXkiOjc5fV0sMjY5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnMKdmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIG93bktleXMgICAgICAgID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKQogICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgewogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXsKICAgIHZhciBPICAgICAgID0gdG9JT2JqZWN0KG9iamVjdCkKICAgICAgLCBnZXREZXNjID0gZ09QRC5mCiAgICAgICwga2V5cyAgICA9IG93bktleXMoTykKICAgICAgLCByZXN1bHQgID0ge30KICAgICAgLCBpICAgICAgID0gMAogICAgICAsIGtleSwgRDsKICAgIHdoaWxlKGtleXMubGVuZ3RoID4gaSljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSA9IGtleXNbaSsrXSwgZ2V0RGVzYyhPLCBrZXkpKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfQp9KTsKfSx7Ii4vX2NyZWF0ZS1wcm9wZXJ0eSI6MjQsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1nb3BkIjo3MCwiLi9fb3duLWtleXMiOjgwLCIuL190by1pb2JqZWN0IjoxMDd9XSwyNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQp2YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykNCiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQ0KICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpDQogICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpDQogICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mOw0KDQovLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKQ0KcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7DQogIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCl7DQogICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKQ0KICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSkNCiAgICAgICwgRDsNCiAgICBkbyB7DQogICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELmdldDsNCiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7DQogIH0NCn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjI4LCIuL19leHBvcnQiOjMyLCIuL19vYmplY3QtZm9yY2VkLXBhbSI6NjksIi4vX29iamVjdC1nb3BkIjo3MCwiLi9fb2JqZWN0LWdwbyI6NzQsIi4vX3RvLW9iamVjdCI6MTA5LCIuL190by1wcmltaXRpdmUiOjExMH1dLDI3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsNCnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpDQogICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykNCiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykNCiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7DQoNCi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApDQpyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHsNCiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXsNCiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpDQogICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKQ0KICAgICAgLCBEOw0KICAgIGRvIHsNCiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0Ow0KICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTsNCiAgfQ0KfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MjgsIi4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC1mb3JjZWQtcGFtIjo2OSwiLi9fb2JqZWN0LWdvcGQiOjcwLCIuL19vYmplY3QtZ3BvIjo3NCwiLi9fdG8tb2JqZWN0IjoxMDksIi4vX3RvLXByaW1pdGl2ZSI6MTEwfV0sMjcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7CiAgICByZXR1cm4gJHZhbHVlcyhpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX29iamVjdC10by1hcnJheSI6Nzl9XSwyNzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQovLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlDQp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykNCiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQ0KICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQ0KICAsIE9CU0VSVkFCTEUgID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKQ0KICAsIGFGdW5jdGlvbiAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpDQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQ0KICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQ0KICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykNCiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQ0KICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykNCiAgLCBSRVRVUk4gICAgICA9IGZvck9mLlJFVFVSTjsNCg0KdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGZuKXsNCiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pOw0KfTsNCg0KdmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pew0KICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYzsNCiAgaWYoY2xlYW51cCl7DQogICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkOw0KICAgIGNsZWFudXAoKTsNCiAgfQ0KfTsNCg0KdmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7DQogIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDsNCn07DQoNCnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7DQogIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7DQogICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOw0KICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsNCiAgfQ0KfTsNCg0KdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXsNCiAgYW5PYmplY3Qob2JzZXJ2ZXIpOw0KICB0aGlzLl9jID0gdW5kZWZpbmVkOw0KICB0aGlzLl9vID0gb2JzZXJ2ZXI7DQogIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpOw0KICB0cnkgew0KICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKQ0KICAgICAgLCBzdWJzY3JpcHRpb24gPSBjbGVhbnVwOw0KICAgIGlmKGNsZWFudXAgIT0gbnVsbCl7DQogICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07DQogICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTsNCiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwOw0KICAgIH0NCiAgfSBjYXRjaChlKXsNCiAgICBvYnNlcnZlci5lcnJvcihlKTsNCiAgICByZXR1cm47DQogIH0gaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKWNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7DQp9Ow0KDQpTdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHsNCiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCl7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9DQp9KTsNCg0KdmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsNCiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjsNCn07DQoNClN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7DQogIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpew0KICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOw0KICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7DQogICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287DQogICAgICB0cnkgew0KICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTsNCiAgICAgICAgaWYobSlyZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7DQogICAgICB9IGNhdGNoKGUpew0KICAgICAgICB0cnkgew0KICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7DQogICAgICAgIH0gZmluYWxseSB7DQogICAgICAgICAgdGhyb3cgZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKXsNCiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsNCiAgICBpZihzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl0aHJvdyB2YWx1ZTsNCiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287DQogICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOw0KICAgIHRyeSB7DQogICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7DQogICAgICBpZighbSl0aHJvdyB2YWx1ZTsNCiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7DQogICAgfSBjYXRjaChlKXsNCiAgICAgIHRyeSB7DQogICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsNCiAgICAgIH0gZmluYWxseSB7DQogICAgICAgIHRocm93IGU7DQogICAgICB9DQogICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7DQogICAgcmV0dXJuIHZhbHVlOw0KICB9LA0KICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpew0KICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOw0KICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7DQogICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287DQogICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7DQogICAgICB0cnkgew0KICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7DQogICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkOw0KICAgICAgfSBjYXRjaChlKXsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7DQogICAgICAgIH0gZmluYWxseSB7DQogICAgICAgICAgdGhyb3cgZTsNCiAgICAgICAgfQ0KICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7DQogICAgICByZXR1cm4gdmFsdWU7DQogICAgfQ0KICB9DQp9KTsNCg0KdmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKXsNCiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTsNCn07DQoNCnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgew0KICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7DQogICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpOw0KICB9LA0KICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXsNCiAgICB2YXIgdGhhdCA9IHRoaXM7DQogICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpew0KICAgICAgYUZ1bmN0aW9uKGZuKTsNCiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7DQogICAgICAgIG5leHQgOiBmdW5jdGlvbih2YWx1ZSl7DQogICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7DQogICAgICAgICAgfSBjYXRjaChlKXsNCiAgICAgICAgICAgIHJlamVjdChlKTsNCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgZXJyb3I6IHJlamVjdCwNCiAgICAgICAgY29tcGxldGU6IHJlc29sdmUNCiAgICAgIH0pOw0KICAgIH0pOw0KICB9DQp9KTsNCg0KcmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHsNCiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXsNCiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlOw0KICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pOw0KICAgIGlmKG1ldGhvZCl7DQogICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTsNCiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXsNCiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTsNCiAgICAgIH0pOw0KICAgIH0NCiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpew0KICAgICAgdmFyIGRvbmUgPSBmYWxzZTsNCiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpew0KICAgICAgICBpZighZG9uZSl7DQogICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbihpdCl7DQogICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpOw0KICAgICAgICAgICAgICBpZihkb25lKXJldHVybiBSRVRVUk47DQogICAgICAgICAgICB9KSA9PT0gUkVUVVJOKXJldHVybjsNCiAgICAgICAgICB9IGNhdGNoKGUpew0KICAgICAgICAgICAgaWYoZG9uZSl0aHJvdyBlOw0KICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7DQogICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTsNCiAgICB9KTsNCiAgfSwNCiAgb2Y6IGZ1bmN0aW9uIG9mKCl7DQogICAgZm9yKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOylpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdOw0KICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7DQogICAgICB2YXIgZG9uZSA9IGZhbHNlOw0KICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7DQogICAgICAgIGlmKCFkb25lKXsNCiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpew0KICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7DQogICAgICAgICAgICBpZihkb25lKXJldHVybjsNCiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7DQogICAgICAgIH0NCiAgICAgIH0pOw0KICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9Ow0KICAgIH0pOw0KICB9DQp9KTsNCg0KaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsNCg0KJGV4cG9ydCgkZXhwb3J0LkcsIHtPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZX0pOw0KDQpyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7Cn0seyIuL19hLWZ1bmN0aW9uIjozLCIuL19hbi1pbnN0YW5jZSI6NiwiLi9fYW4tb2JqZWN0Ijo3LCIuL19jb3JlIjoyMywiLi9fZXhwb3J0IjozMiwiLi9fZm9yLW9mIjozNywiLi9fZ2xvYmFsIjozOCwiLi9faGlkZSI6NDAsIi4vX21pY3JvdGFzayI6NjQsIi4vX3JlZGVmaW5lLWFsbCI6ODYsIi4vX3NldC1zcGVjaWVzIjo5MSwiLi9fd2tzIjoxMTd9XSwyNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleQogICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDsKCm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7CiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjcsIi4vX21ldGFkYXRhIjo2M31dLDI3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5CiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwCiAgLCBzdG9yZSAgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEuc3RvcmU7CgptZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHZhciB0YXJnZXRLZXkgICA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkKICAgICwgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpOwogIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlOwogIGlmKG1ldGFkYXRhTWFwLnNpemUpcmV0dXJuIHRydWU7CiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7CiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7CiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19tZXRhZGF0YSI6NjN9XSwyNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgU2V0ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2VzNi5zZXQnKQogICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJykKICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cwogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbihPLCBQKXsKICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCkKICAgICwgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgaWYocGFyZW50ID09PSBudWxsKXJldHVybiBvS2V5czsKICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTsKICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7Cn07CgptZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fYXJyYXktZnJvbS1pdGVyYWJsZSI6MTAsIi4vX21ldGFkYXRhIjo2MywiLi9fb2JqZWN0LWdwbyI6NzQsIi4vZXM2LnNldCI6MjIxfV0sMjc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7Cn07CgptZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19tZXRhZGF0YSI6NjMsIi4vX29iamVjdC1ncG8iOjc0fV0sMjc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19tZXRhZGF0YSI6NjN9XSwyNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldAogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTsKCm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCkKICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fbWV0YWRhdGEiOjYzfV0sMjgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgaWYoaGFzT3duKXJldHVybiB0cnVlOwogIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTsKICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlOwp9OwoKbWV0YWRhdGEuZXhwKHtoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6NywiLi9fbWV0YWRhdGEiOjYzLCIuL19vYmplY3QtZ3BvIjo3NH1dLDI4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5OwoKbWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KQogICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0Ijo3LCIuL19tZXRhZGF0YSI6NjN9XSwyODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleQogICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDsKCm1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKXsKICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KXsKICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoCiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLAogICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSwKICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSkKICAgICk7CiAgfTsKfX0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MywiLi9fYW4tb2JqZWN0Ijo3LCIuL19tZXRhZGF0YSI6NjN9XSwyODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTsKfSx7Ii4vX2NvbGxlY3Rpb24tdG8tanNvbiI6MjAsIi4vX2V4cG9ydCI6MzJ9XSwyODQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3N0cmluZy1hdCI6OTd9XSwyODU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7DQovLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvDQp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQ0KICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpDQogICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQ0KICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykNCiAgLCBnZXRGbGFncyAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJykNCiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7DQoNCnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7DQogIHRoaXMuX3IgPSByZWdleHA7DQogIHRoaXMuX3MgPSBzdHJpbmc7DQp9Ow0KDQpyZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7DQogIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTsNCiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTsNCn0pOw0KDQokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsNCiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7DQogICAgZGVmaW5lZCh0aGlzKTsNCiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7DQogICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpDQogICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApDQogICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7DQogICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7DQogICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpOw0KICB9DQp9KTsKfSx7Ii4vX2RlZmluZWQiOjI3LCIuL19leHBvcnQiOjMyLCIuL19mbGFncyI6MzYsIi4vX2lzLXJlZ2V4cCI6NTAsIi4vX2l0ZXItY3JlYXRlIjo1MiwiLi9fdG8tbGVuZ3RoIjoxMDh9XSwyODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pewogICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19zdHJpbmctcGFkIjoxMDB9XSwyODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXsKICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19zdHJpbmctcGFkIjoxMDB9XSwyODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0KcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbigkdHJpbSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7CiAgfTsKfSwgJ3RyaW1TdGFydCcpOwp9LHsiLi9fc3RyaW5nLXRyaW0iOjEwMn1dLDI4OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbQpyZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbigkdHJpbSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpewogICAgcmV0dXJuICR0cmltKHRoaXMsIDIpOwogIH07Cn0sICd0cmltRW5kJyk7Cn0seyIuL19zdHJpbmctdHJpbSI6MTAyfV0sMjkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7Cn0seyIuL193a3MtZGVmaW5lIjoxMTV9XSwyOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTsKfSx7Ii4vX3drcy1kZWZpbmUiOjExNX1dLDI5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtZ2xvYmFsCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHtnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpfSk7Cn0seyIuL19leHBvcnQiOjMyLCIuL19nbG9iYWwiOjM4fV0sMjkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRpdGVyYXRvcnMgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpCiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoaWRlICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIHdrcyAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKQogICwgSVRFUkFUT1IgICAgICA9IHdrcygnaXRlcmF0b3InKQogICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKQogICwgQXJyYXlWYWx1ZXMgICA9IEl0ZXJhdG9ycy5BcnJheTsKCmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspewogIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV0KICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXQogICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZQogICAgLCBrZXk7CiAgaWYocHJvdG8pewogICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpOwogICAgaWYoIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOwogICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7CiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTsKICB9Cn0KfSx7Ii4vX2dsb2JhbCI6MzgsIi4vX2hpZGUiOjQwLCIuL19pdGVyYXRvcnMiOjU2LCIuL19yZWRlZmluZSI6ODcsIi4vX3drcyI6MTE3LCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MTMxfV0sMjk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHRhc2sgICA9IHJlcXVpcmUoJy4vX3Rhc2snKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHsKICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LAogIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhcgp9KTsKfSx7Ii4vX2V4cG9ydCI6MzIsIi4vX3Rhc2siOjEwNH1dLDI5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXgKdmFyIGdsb2JhbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIHBhcnRpYWwgICAgPSByZXF1aXJlKCcuL19wYXJ0aWFsJykKICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yCiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrCnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXsKICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXsKICAgIHJldHVybiBzZXQoaW52b2tlKAogICAgICBwYXJ0aWFsLAogICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksCiAgICAgIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikKICAgICksIHRpbWUpOwogIH0gOiBzZXQ7Cn07CiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwgewogIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSwKICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpCn0pOwp9LHsiLi9fZXhwb3J0IjozMiwiLi9fZ2xvYmFsIjozOCwiLi9faW52b2tlIjo0NCwiLi9fcGFydGlhbCI6ODN9XSwyOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7Cn0seyIuL21vZHVsZXMvX2NvcmUiOjIzLCIuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluIjoxMjEsIi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkiOjEyMiwiLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsIjoxMjMsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyIjoxMjQsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCI6MTI2LCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgiOjEyNSwiLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCI6MTI3LCIuL21vZHVsZXMvZXM2LmFycmF5LmZyb20iOjEyOCwiLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZiI6MTI5LCIuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5IjoxMzAsIi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IiOjEzMSwiLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luIjoxMzIsIi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZiI6MTMzLCIuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCI6MTM0LCIuL21vZHVsZXMvZXM2LmFycmF5Lm9mIjoxMzUsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlIjoxMzcsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0IjoxMzYsIi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UiOjEzOCwiLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lIjoxMzksIi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCI6MTQwLCIuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMiOjE0MSwiLi9tb2R1bGVzL2VzNi5kYXRlLm5vdyI6MTQyLCIuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZyI6MTQzLCIuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbiI6MTQ0LCIuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlIjoxNDUsIi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmciOjE0NiwiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kIjoxNDcsIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlIjoxNDgsIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZSI6MTQ5LCIuL21vZHVsZXMvZXM2Lm1hcCI6MTUwLCIuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2giOjE1MSwiLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oIjoxNTIsIi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCI6MTUzLCIuL21vZHVsZXMvZXM2Lm1hdGguY2JydCI6MTU0LCIuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIiOjE1NSwiLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2giOjE1NiwiLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xIjoxNTcsIi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQiOjE1OCwiLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90IjoxNTksIi4vbW9kdWxlcy9lczYubWF0aC5pbXVsIjoxNjAsIi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCI6MTYxLCIuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAiOjE2MiwiLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzIiOjE2MywiLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24iOjE2NCwiLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgiOjE2NSwiLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgiOjE2NiwiLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jIjoxNjcsIi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yIjoxNjgsIi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24iOjE2OSwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlIjoxNzAsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIiOjE3MSwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuIjoxNzIsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlciI6MTczLCIuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyIjoxNzQsIi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIiOjE3NSwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQiOjE3NiwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50IjoxNzcsIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkIjoxNzgsIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbiI6MTc5LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24iOjE4MCwiLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlIjoxODEsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjoxODIsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6MTgzLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiOjE4NCwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjoxODUsIi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMiOjE4NiwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6MTg3LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcyI6MTkxLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlIjoxODgsIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbiI6MTg5LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQiOjE5MCwiLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI6MTkyLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMiOjE5MywiLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCI6MTk0LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mIjoxOTUsIi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MTk2LCIuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0IjoxOTcsIi4vbW9kdWxlcy9lczYucGFyc2UtaW50IjoxOTgsIi4vbW9kdWxlcy9lczYucHJvbWlzZSI6MTk5LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkiOjIwMCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCI6MjAxLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5IjoyMDIsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkiOjIwMywiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZSI6MjA0LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0IjoyMDcsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjIwNSwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YiOjIwNiwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcyI6MjA4LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZSI6MjA5LCIuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMiOjIxMCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucyI6MjExLCIuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0IjoyMTMsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mIjoyMTIsIi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yIjoyMTQsIi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzIjoyMTUsIi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoIjoyMTYsIi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UiOjIxNywiLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoIjoyMTgsIi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0IjoyMTksIi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZyI6MjIwLCIuL21vZHVsZXMvZXM2LnNldCI6MjIxLCIuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IiOjIyMiwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnIjoyMjMsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rIjoyMjQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQiOjIyNSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCI6MjI2LCIuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgiOjIyNywiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQiOjIyOCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yIjoyMjksIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplIjoyMzAsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCI6MjMxLCIuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcyI6MjMyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzIjoyMzMsIi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIjoyMzQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsiOjIzNSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3IjoyMzYsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCI6MjM3LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCI6MjM4LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCI6MjM5LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UiOjI0MCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViIjoyNDEsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCI6MjQyLCIuL21vZHVsZXMvZXM2LnN0cmluZy50cmltIjoyNDMsIi4vbW9kdWxlcy9lczYuc3ltYm9sIjoyNDQsIi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyIjoyNDUsIi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3IjoyNDYsIi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheSI6MjQ3LCIuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkiOjI0OCwiLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheSI6MjQ5LCIuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5IjoyNTAsIi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheSI6MjUxLCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheSI6MjUyLCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheSI6MjUzLCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5IjoyNTQsIi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheSI6MjU1LCIuL21vZHVsZXMvZXM2LndlYWstbWFwIjoyNTYsIi4vbW9kdWxlcy9lczYud2Vhay1zZXQiOjI1NywiLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcyI6MjU4LCIuL21vZHVsZXMvZXM3LmFzYXAiOjI1OSwiLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvciI6MjYwLCIuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uIjoyNjEsIi4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCI6MjYyLCIuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgiOjI2MywiLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoIjoyNjQsIi4vbW9kdWxlcy9lczcubWF0aC51bXVsaCI6MjY1LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyIjoyNjYsIi4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIiOjI2NywiLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcyI6MjY4LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjoyNjksIi4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIiOjI3MCwiLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlciI6MjcxLCIuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMiOjI3MiwiLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlIjoyNzMsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEiOjI3NCwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YSI6Mjc1LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhIjoyNzcsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cyI6Mjc2LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YSI6Mjc5LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzIjoyNzgsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEiOjI4MCwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEiOjI4MSwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhIjoyODIsIi4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24iOjI4MywiLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQiOjI4NCwiLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsIjoyODUsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQiOjI4NiwiLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0IjoyODcsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCI6Mjg4LCIuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0IjoyODksIi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjoyOTAsIi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjI5MSwiLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsIjoyOTIsIi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjoyOTMsIi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlIjoyOTQsIi4vbW9kdWxlcy93ZWIudGltZXJzIjoyOTV9XSwyOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IjozMTJ9XSwyOTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbiIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbiI6MzEzfV0sMjk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiOjMxNH1dLDMwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IjozMTV9XSwzMDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjozMTZ9XSwzMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2lzLWZyb3plbiIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2lzLWZyb3plbiI6MzE3fV0sMzAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cyI6MzE4fV0sMzA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6MzE5fV0sMzA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UiOjMyMH1dLDMwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCI6MzIxfV0sMzA3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9Owp9LHt9XSwzMDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSIpOwoKdmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogICAgfQogIH0KCiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICAgIHJldHVybiBDb25zdHJ1Y3RvcjsKICB9Owp9KCk7Cn0seyIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjMwMH1dLDMwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBfT2JqZWN0JGNyZWF0ZSA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlIilbImRlZmF1bHQiXTsKCnZhciBfT2JqZWN0JHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIilbImRlZmF1bHQiXTsKCmV4cG9ydHNbImRlZmF1bHQiXSA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBfT2JqZWN0JGNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIGVudW1lcmFibGU6IGZhbHNlLAogICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9CiAgfSk7CiAgaWYgKHN1cGVyQ2xhc3MpIF9PYmplY3Qkc2V0UHJvdG90eXBlT2YgPyBfT2JqZWN0JHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7Cn07CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUiOjI5OSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIjozMDR9XSwzMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgiLi4vaGVscGVycy90eXBlb2YiKTsKCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7CiAgaWYgKCFzZWxmKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSA/IGNhbGwgOiBzZWxmOwp9Owp9LHsiLi4vaGVscGVycy90eXBlb2YiOjMxMX1dLDMxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCnZhciBfU3ltYm9sID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbCIpWyJkZWZhdWx0Il07CgpleHBvcnRzWyJkZWZhdWx0Il0gPSBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9TeW1ib2wgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7Cn07CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbCI6MzA2fV0sMzEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvcmUgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICByZXR1cm4gKGNvcmUuSlNPTiAmJiBjb3JlLkpTT04uc3RyaW5naWZ5IHx8IEpTT04uc3RyaW5naWZ5KS5hcHBseShKU09OLCBhcmd1bWVudHMpOwp9Owp9LHsiLi4vLi4vbW9kdWxlcy8kLmNvcmUiOjMyN31dLDMxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpLk9iamVjdC5hc3NpZ247Cn0seyIuLi8uLi9tb2R1bGVzLyQuY29yZSI6MzI3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduIjozNzh9XSwzMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXsKICByZXR1cm4gJC5jcmVhdGUoUCwgRCk7Cn07Cn0seyIuLi8uLi9tb2R1bGVzLyQiOjM1Mn1dLDMxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7CiAgcmV0dXJuICQuc2V0RGVzYyhpdCwga2V5LCBkZXNjKTsKfTsKfSx7Ii4uLy4uL21vZHVsZXMvJCI6MzUyfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjsKfSx7Ii4uLy4uL21vZHVsZXMvJC5jb3JlIjozMjcsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mIjozNzl9XSwzMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kLmNvcmUnKS5PYmplY3QuaXNGcm96ZW47Cn0seyIuLi8uLi9tb2R1bGVzLyQuY29yZSI6MzI3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuIjozODB9XSwzMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJC5jb3JlJykuT2JqZWN0LmtleXM7Cn0seyIuLi8uLi9tb2R1bGVzLyQuY29yZSI6MzI3LCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI6MzgxfV0sMzE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQuY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjsKfSx7Ii4uLy4uL21vZHVsZXMvJC5jb3JlIjozMjcsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mIjozODJ9XSwzMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpOwpyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTsKcmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvJC5jb3JlJykuUHJvbWlzZTsKfSx7Ii4uL21vZHVsZXMvJC5jb3JlIjozMjcsIi4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciOjM4MywiLi4vbW9kdWxlcy9lczYucHJvbWlzZSI6Mzg0LCIuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjM4NSwiLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjozODd9XSwzMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJC5jb3JlJykuU3ltYm9sOwp9LHsiLi4vLi4vbW9kdWxlcy8kLmNvcmUiOjMyNywiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MzgzLCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wiOjM4Nn1dLDMyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6M31dLDMyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsKfSx7fV0sMzI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTsKICByZXR1cm4gaXQ7Cn07Cn0seyIuLyQuaXMtb2JqZWN0IjozNDV9XSwzMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKQp2YXIgY29mID0gcmVxdWlyZSgnLi8kLmNvZicpCiAgLCBUQUcgPSByZXF1aXJlKCcuLyQud2tzJykoJ3RvU3RyaW5nVGFnJykKICAvLyBFUzMgd3JvbmcgaGVyZQogICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgTywgVCwgQjsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcKICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZQogICAgOiB0eXBlb2YgKFQgPSAoTyA9IE9iamVjdChpdCkpW1RBR10pID09ICdzdHJpbmcnID8gVAogICAgLy8gYnVpbHRpblRhZyBjYXNlCiAgICA6IEFSRyA/IGNvZihPKQogICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawogICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7Cn07Cn0seyIuLyQuY29mIjozMjYsIi4vJC53a3MiOjM3NX1dLDMyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjE4fV0sMzI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMS4yLjYnfTsKaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmCn0se31dLDMyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXsKICBhRnVuY3Rpb24oZm4pOwogIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47CiAgc3dpdGNoKGxlbmd0aCl7CiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7CiAgICB9OwogICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7CiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpOwogICAgfTsKICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpewogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTsKICAgIH07CiAgfQogIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXsKICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpOwogIH07Cn07Cn0seyIuLyQuYS1mdW5jdGlvbiI6MzIyfV0sMzI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzI3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6Mjd9XSwzMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5Cm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vJC5mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKfSk7Cn0seyIuLyQuZmFpbHMiOjMzNH1dLDMzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vJC5pcy1vYmplY3QnKQogICwgZG9jdW1lbnQgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykuZG9jdW1lbnQKICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcKICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9Owp9Owp9LHsiLi8kLmdsb2JhbCI6MzM3LCIuLyQuaXMtb2JqZWN0IjozNDV9XSwzMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9scwp2YXIgJCA9IHJlcXVpcmUoJy4vJCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIga2V5cyAgICAgICA9ICQuZ2V0S2V5cyhpdCkKICAgICwgZ2V0U3ltYm9scyA9ICQuZ2V0U3ltYm9sczsKICBpZihnZXRTeW1ib2xzKXsKICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCkKICAgICAgLCBpc0VudW0gID0gJC5pc0VudW0KICAgICAgLCBpICAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlrZXlzLnB1c2goa2V5KTsKICB9CiAgcmV0dXJuIGtleXM7Cn07Cn0seyIuLyQiOjM1Mn1dLDMzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykKICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vJC5jb3JlJykKICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKQogICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7Cgp2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7CiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkYKICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRwogICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TCiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlAKICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQgogICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XCiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pCiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0KICAgICwga2V5LCBvd24sIG91dDsKICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTsKICBmb3Ioa2V5IGluIHNvdXJjZSl7CiAgICAvLyBjb250YWlucyBpbiBuYXRpdmUKICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIGtleSBpbiB0YXJnZXQ7CiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7CiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZAogICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTsKICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlcwogICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV0KICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0CiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKQogICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnkKICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7CiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pewogICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pOwogICAgICB9OwogICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07CiAgICAgIHJldHVybiBGOwogICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzCiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7CiAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7CiAgfQp9OwovLyB0eXBlIGJpdG1hcAokZXhwb3J0LkYgPSAxOyAgLy8gZm9yY2VkCiRleHBvcnQuRyA9IDI7ICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpYwokZXhwb3J0LlAgPSA4OyAgLy8gcHJvdG8KJGV4cG9ydC5CID0gMTY7IC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7IC8vIHdyYXAKbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0Owp9LHsiLi8kLmNvcmUiOjMyNywiLi8kLmN0eCI6MzI4LCIuLyQuZ2xvYmFsIjozMzd9XSwzMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMzRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjozNH1dLDMzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKQogICwgY2FsbCAgICAgICAgPSByZXF1aXJlKCcuLyQuaXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi8kLmlzLWFycmF5LWl0ZXInKQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuLyQuYW4tb2JqZWN0JykKICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi8kLnRvLWxlbmd0aCcpCiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0KXsKICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKGl0ZXJhYmxlKQogICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSkKICAgICwgaW5kZXggID0gMAogICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yOwogIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTsKICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3IKICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7CiAgICBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7CiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApewogICAgY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7CiAgfQp9Owp9LHsiLi8kLmFuLW9iamVjdCI6MzI0LCIuLyQuY3R4IjozMjgsIi4vJC5pcy1hcnJheS1pdGVyIjozNDMsIi4vJC5pdGVyLWNhbGwiOjM0NiwiLi8kLnRvLWxlbmd0aCI6MzcyLCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCI6Mzc2fV0sMzM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdwp2YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKQogICwgZ2V0TmFtZXMgID0gcmVxdWlyZSgnLi8kJykuZ2V0TmFtZXMKICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nOwoKdmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcwogID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdOwoKdmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpewogIHRyeSB7CiAgICByZXR1cm4gZ2V0TmFtZXMoaXQpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXsKICBpZih3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJylyZXR1cm4gZ2V0V2luZG93TmFtZXMoaXQpOwogIHJldHVybiBnZXROYW1lcyh0b0lPYmplY3QoaXQpKTsKfTsKfSx7Ii4vJCI6MzUyLCIuLyQudG8taW9iamVjdCI6MzcxfV0sMzM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6Mzh9XSwzMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMzldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjozOX1dLDMzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkICAgICAgICAgID0gcmVxdWlyZSgnLi8kJykKICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuLyQucHJvcGVydHktZGVzYycpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXsKICByZXR1cm4gJC5zZXREZXNjKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7Cn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpewogIG9iamVjdFtrZXldID0gdmFsdWU7CiAgcmV0dXJuIG9iamVjdDsKfTsKfSx7Ii4vJCI6MzUyLCIuLyQuZGVzY3JpcHRvcnMiOjMzMCwiLi8kLnByb3BlcnR5LWRlc2MiOjM1OH1dLDM0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKfSx7Ii4vJC5nbG9iYWwiOjMzN31dLDM0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0NF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQ0fV0sMzQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3MKdmFyIGNvZiA9IHJlcXVpcmUoJy4vJC5jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7Cn07Cn0seyIuLyQuY29mIjozMjZ9XSwzNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi8kLml0ZXJhdG9ycycpCiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpCiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTsKfTsKfSx7Ii4vJC5pdGVyYXRvcnMiOjM1MSwiLi8kLndrcyI6Mzc1fV0sMzQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKdmFyIGNvZiA9IHJlcXVpcmUoJy4vJC5jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFyZyl7CiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7Cn07Cn0seyIuLyQuY29mIjozMjZ9XSwzNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0OX1dLDM0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3IKdmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpewogIHRyeSB7CiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpOwogIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pCiAgfSBjYXRjaChlKXsKICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107CiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpOwogICAgdGhyb3cgZTsKICB9Cn07Cn0seyIuLyQuYW4tb2JqZWN0IjozMjR9XSwzNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpCiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vJC5wcm9wZXJ0eS1kZXNjJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJykKICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CgovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQpyZXF1aXJlKCcuLyQuaGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpewogIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pOwogIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpOwp9Owp9LHsiLi8kIjozNTIsIi4vJC5oaWRlIjozMzksIi4vJC5wcm9wZXJ0eS1kZXNjIjozNTgsIi4vJC5zZXQtdG8tc3RyaW5nLXRhZyI6MzY0LCIuLyQud2tzIjozNzV9XSwzNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vJC5saWJyYXJ5JykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpCiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vJC5yZWRlZmluZScpCiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5oaWRlJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmhhcycpCiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKQogICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuLyQuaXRlci1jcmVhdGUnKQogICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKQogICwgZ2V0UHJvdG8gICAgICAgPSByZXF1aXJlKCcuLyQnKS5nZXRQcm90bwogICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJykKICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGAKICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InCiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJwogICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJzsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7CiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpOwogIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXsKICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTsKICAgIHN3aXRjaChraW5kKXsKICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwogIH07CiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcicKICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTCiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZQogICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGUKICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXQogICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCkKICAgICwgbWV0aG9kcywga2V5OwogIC8vIEZpeCBuYXRpdmUKICBpZigkbmF0aXZlKXsKICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvKCRkZWZhdWx0LmNhbGwobmV3IEJhc2UpKTsKICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnMKICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpOwogICAgLy8gRkYgZml4CiAgICBpZighTElCUkFSWSAmJiBoYXMocHJvdG8sIEZGX0lURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7CiAgICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGCiAgICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXsKICAgICAgVkFMVUVTX0JVRyA9IHRydWU7CiAgICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07CiAgICB9CiAgfQogIC8vIERlZmluZSBpdGVyYXRvcgogIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXsKICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7CiAgfQogIC8vIFBsdWcgZm9yIGxpYnJhcnkKICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDsKICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzOwogIGlmKERFRkFVTFQpewogICAgbWV0aG9kcyA9IHsKICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLAogICAgICBrZXlzOiAgICBJU19TRVQgICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLAogICAgICBlbnRyaWVzOiAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykKICAgIH07CiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXsKICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7CiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpOwogIH0KICByZXR1cm4gbWV0aG9kczsKfTsKfSx7Ii4vJCI6MzUyLCIuLyQuZXhwb3J0IjozMzMsIi4vJC5oYXMiOjMzOCwiLi8kLmhpZGUiOjMzOSwiLi8kLml0ZXItY3JlYXRlIjozNDcsIi4vJC5pdGVyYXRvcnMiOjM1MSwiLi8kLmxpYnJhcnkiOjM1NCwiLi8kLnJlZGVmaW5lIjozNjAsIi4vJC5zZXQtdG8tc3RyaW5nLXRhZyI6MzY0LCIuLyQud2tzIjozNzV9XSwzNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpCiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTsKCnRyeSB7CiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpOwogIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07CiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7Cn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3NpbmcpewogIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTsKICB2YXIgc2FmZSA9IGZhbHNlOwogIHRyeSB7CiAgICB2YXIgYXJyICA9IFs3XQogICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7CiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyBzYWZlID0gdHJ1ZTsgfTsKICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTsKICAgIGV4ZWMoYXJyKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgcmV0dXJuIHNhZmU7Cn07Cn0seyIuLyQud2tzIjozNzV9XSwzNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1NX1dLDM1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjU2fV0sMzUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRPYmplY3QgPSBPYmplY3Q7Cm1vZHVsZS5leHBvcnRzID0gewogIGNyZWF0ZTogICAgICRPYmplY3QuY3JlYXRlLAogIGdldFByb3RvOiAgICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsCiAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsCiAgZ2V0RGVzYzogICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsCiAgc2V0RGVzYzogICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwKICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsCiAgZ2V0S2V5czogICAgJE9iamVjdC5rZXlzLAogIGdldE5hbWVzOiAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcywKICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scywKICBlYWNoOiAgICAgICBbXS5mb3JFYWNoCn07Cn0se31dLDM1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkICAgICAgICAgPSByZXF1aXJlKCcuLyQnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXsKICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdCkKICAgICwga2V5cyAgID0gJC5nZXRLZXlzKE8pCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAsIGluZGV4ICA9IDAKICAgICwga2V5OwogIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7Cn07Cn0seyIuLyQiOjM1MiwiLi8kLnRvLWlvYmplY3QiOjM3MX1dLDM1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsKfSx7fV0sMzU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKQogICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi8kLnRhc2snKS5zZXQKICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyCiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2VzcwogICwgUHJvbWlzZSAgID0gZ2xvYmFsLlByb21pc2UKICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vJC5jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycKICAsIGhlYWQsIGxhc3QsIG5vdGlmeTsKCnZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7CiAgdmFyIHBhcmVudCwgZG9tYWluLCBmbjsKICBpZihpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSl7CiAgICBwcm9jZXNzLmRvbWFpbiA9IG51bGw7CiAgICBwYXJlbnQuZXhpdCgpOwogIH0KICB3aGlsZShoZWFkKXsKICAgIGRvbWFpbiA9IGhlYWQuZG9tYWluOwogICAgZm4gICAgID0gaGVhZC5mbjsKICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTsKICAgIGZuKCk7IC8vIDwtIGN1cnJlbnRseSB3ZSB1c2UgaXQgb25seSBmb3IgUHJvbWlzZSAtIHRyeSAvIGNhdGNoIG5vdCByZXF1aXJlZAogICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7CiAgICBoZWFkID0gaGVhZC5uZXh0OwogIH0gbGFzdCA9IHVuZGVmaW5lZDsKICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7Cn07CgovLyBOb2RlLmpzCmlmKGlzTm9kZSl7CiAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwogIH07Ci8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlcgp9IGVsc2UgaWYoT2JzZXJ2ZXIpewogIHZhciB0b2dnbGUgPSAxCiAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsKICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gLXRvZ2dsZTsKICB9OwovLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZQp9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpewogIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZsdXNoKTsKICB9OwovLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOgovLyAtIHNldEltbWVkaWF0ZQovLyAtIE1lc3NhZ2VDaGFubmVsCi8vIC0gd2luZG93LnBvc3RNZXNzYWcKLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2UKLy8gLSBzZXRUaW1lb3V0Cn0gZWxzZSB7CiAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbCkKICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpOwogIH07Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNhcChmbil7CiAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWQsIGRvbWFpbjogaXNOb2RlICYmIHByb2Nlc3MuZG9tYWlufTsKICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7CiAgaWYoIWhlYWQpewogICAgaGVhZCA9IHRhc2s7CiAgICBub3RpZnkoKTsKICB9IGxhc3QgPSB0YXNrOwp9Owp9LHsiLi8kLmNvZiI6MzI2LCIuLyQuZ2xvYmFsIjozMzcsIi4vJC50YXNrIjozNjl9XSwzNTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pCnZhciAkICAgICAgICA9IHJlcXVpcmUoJy4vJCcpCiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuLyQuaW9iamVjdCcpOwoKLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmZhaWxzJykoZnVuY3Rpb24oKXsKICB2YXIgYSA9IE9iamVjdC5hc3NpZ24KICAgICwgQSA9IHt9CiAgICAsIEIgPSB7fQogICAgLCBTID0gU3ltYm9sKCkKICAgICwgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7CiAgQVtTXSA9IDc7CiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pOwogIHJldHVybiBhKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKGEoe30sIEIpKS5qb2luKCcnKSAhPSBLOwp9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpCiAgICAsICQkICAgID0gYXJndW1lbnRzCiAgICAsICQkbGVuID0gJCQubGVuZ3RoCiAgICAsIGluZGV4ID0gMQogICAgLCBnZXRLZXlzICAgID0gJC5nZXRLZXlzCiAgICAsIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHMKICAgICwgaXNFbnVtICAgICA9ICQuaXNFbnVtOwogIHdoaWxlKCQkbGVuID4gaW5kZXgpewogICAgdmFyIFMgICAgICA9IElPYmplY3QoJCRbaW5kZXgrK10pCiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKQogICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAgICwgaiAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKGxlbmd0aCA+IGopaWYoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlUW2tleV0gPSBTW2tleV07CiAgfQogIHJldHVybiBUOwp9IDogT2JqZWN0LmFzc2lnbjsKfSx7Ii4vJCI6MzUyLCIuLyQuZmFpbHMiOjMzNCwiLi8kLmlvYmplY3QiOjM0MiwiLi8kLnRvLW9iamVjdCI6MzczfV0sMzU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpCiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi8kLmNvcmUnKQogICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vJC5mYWlscycpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7CiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXQogICAgLCBleHAgPSB7fTsKICBleHBbS0VZXSA9IGV4ZWMoZm4pOwogICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTsKfTsKfSx7Ii4vJC5jb3JlIjozMjcsIi4vJC5leHBvcnQiOjMzMywiLi8kLmZhaWxzIjozMzR9XSwzNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo4NX1dLDM1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vJC5yZWRlZmluZScpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjKXsKICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldKTsKICByZXR1cm4gdGFyZ2V0Owp9Owp9LHsiLi8kLnJlZGVmaW5lIjozNjB9XSwzNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5oaWRlJyk7Cn0seyIuLyQuaGlkZSI6MzM5fV0sMzYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzg5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6ODl9XSwzNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy4KLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KdmFyIGdldERlc2MgID0gcmVxdWlyZSgnLi8kJykuZ2V0RGVzYwogICwgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0JykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpOwp2YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7CiAgYW5PYmplY3QoTyk7CiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyAiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpOwp9Owptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXsKICAgICAgdHJ5IHsKICAgICAgICBzZXQgPSByZXF1aXJlKCcuLyQuY3R4JykoRnVuY3Rpb24uY2FsbCwgZ2V0RGVzYyhPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTsKICAgICAgICBzZXQodGVzdCwgW10pOwogICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpOwogICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXsKICAgICAgICBjaGVjayhPLCBwcm90byk7CiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bzsKICAgICAgICBlbHNlIHNldChPLCBwcm90byk7CiAgICAgICAgcmV0dXJuIE87CiAgICAgIH07CiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLAogIGNoZWNrOiBjaGVjawp9Owp9LHsiLi8kIjozNTIsIi4vJC5hbi1vYmplY3QiOjMyNCwiLi8kLmN0eCI6MzI4LCIuLyQuaXMtb2JqZWN0IjozNDV9XSwzNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vJC5jb3JlJykKICAsICQgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJykKICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi8kLmRlc2NyaXB0b3JzJykKICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7CiAgdmFyIEMgPSBjb3JlW0tFWV07CiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkkLnNldERlc2MoQywgU1BFQ0lFUywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfQogIH0pOwp9Owp9LHsiLi8kIjozNTIsIi4vJC5jb3JlIjozMjcsIi4vJC5kZXNjcmlwdG9ycyI6MzMwLCIuLyQud2tzIjozNzV9XSwzNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZGVmID0gcmVxdWlyZSgnLi8kJykuc2V0RGVzYwogICwgaGFzID0gcmVxdWlyZSgnLi8kLmhhcycpCiAgLCBUQUcgPSByZXF1aXJlKCcuLyQud2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpewogIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTsKfTsKfSx7Ii4vJCI6MzUyLCIuLyQuaGFzIjozMzgsIi4vJC53a3MiOjM3NX1dLDM2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykKICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nCiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTsKfTsKfSx7Ii4vJC5nbG9iYWwiOjMzN31dLDM2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKQp2YXIgYW5PYmplY3QgID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLyQuYS1mdW5jdGlvbicpCiAgLCBTUEVDSUVTICAgPSByZXF1aXJlKCcuLyQud2tzJykoJ3NwZWNpZXMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBEKXsKICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTOwogIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTsKfTsKfSx7Ii4vJC5hLWZ1bmN0aW9uIjozMjIsIi4vJC5hbi1vYmplY3QiOjMyNCwiLi8kLndrcyI6Mzc1fV0sMzY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUpewogIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAiOiB1c2UgdGhlICduZXcnIG9wZXJhdG9yISIpOwogIHJldHVybiBpdDsKfTsKfSx7fV0sMzY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vJC50by1pbnRlZ2VyJykKICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vJC5kZWZpbmVkJyk7Ci8vIHRydWUgIC0+IFN0cmluZyNhdAovLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXQKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpewogIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3MpewogICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSkKICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcykKICAgICAgLCBsID0gcy5sZW5ndGgKICAgICAgLCBhLCBiOwogICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsKICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7CiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZgogICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYQogICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDsKICB9Owp9Owp9LHsiLi8kLmRlZmluZWQiOjMyOSwiLi8kLnRvLWludGVnZXIiOjM3MH1dLDM2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JykKICAsIGludm9rZSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5pbnZva2UnKQogICwgaHRtbCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmh0bWwnKQogICwgY2VsICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmRvbS1jcmVhdGUnKQogICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwogICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZQogICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlCiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWwKICAsIGNvdW50ZXIgICAgICAgICAgICA9IDAKICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9CiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJwogICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7CnZhciBydW4gPSBmdW5jdGlvbigpewogIHZhciBpZCA9ICt0aGlzOwogIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7CiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07CiAgICBkZWxldGUgcXVldWVbaWRdOwogICAgZm4oKTsKICB9Cn07CnZhciBsaXN0bmVyID0gZnVuY3Rpb24oZXZlbnQpewogIHJ1bi5jYWxsKGV2ZW50LmRhdGEpOwp9OwovLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6CmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spewogIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pewogICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7CiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7CiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTsKICAgIH07CiAgICBkZWZlcihjb3VudGVyKTsKICAgIHJldHVybiBjb3VudGVyOwogIH07CiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpewogICAgZGVsZXRlIHF1ZXVlW2lkXTsKICB9OwogIC8vIE5vZGUuanMgMC44LQogIGlmKHJlcXVpcmUoJy4vJC5jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTsKICAgIH07CiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2VycwogIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7CiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsOwogICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7CiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RuZXI7CiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTsKICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnMKICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0JwogIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpOwogICAgfTsKICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdG5lciwgZmFsc2UpOwogIC8vIElFOC0KICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTsKICAgICAgICBydW4uY2FsbChpZCk7CiAgICAgIH07CiAgICB9OwogIC8vIFJlc3Qgb2xkIGJyb3dzZXJzCiAgfSBlbHNlIHsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7CiAgICB9OwogIH0KfQptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6ICAgc2V0VGFzaywKICBjbGVhcjogY2xlYXJUYXNrCn07Cn0seyIuLyQuY29mIjozMjYsIi4vJC5jdHgiOjMyOCwiLi8kLmRvbS1jcmVhdGUiOjMzMSwiLi8kLmdsb2JhbCI6MzM3LCIuLyQuaHRtbCI6MzQwLCIuLyQuaW52b2tlIjozNDF9XSwzNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTA2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MTA2fV0sMzcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzCnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlvYmplY3QnKQogICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vJC5kZWZpbmVkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTsKfTsKfSx7Ii4vJC5kZWZpbmVkIjozMjksIi4vJC5pb2JqZWN0IjozNDJ9XSwzNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMTUgVG9MZW5ndGgKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vJC50by1pbnRlZ2VyJykKICAsIG1pbiAgICAgICA9IE1hdGgubWluOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MQp9Owp9LHsiLi8kLnRvLWludGVnZXIiOjM3MH1dLDM3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudCkKdmFyIGRlZmluZWQgPSByZXF1aXJlKCcuLyQuZGVmaW5lZCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTsKfTsKfSx7Ii4vJC5kZWZpbmVkIjozMjl9XSwzNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTE0XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MTE0fV0sMzc1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHN0b3JlICA9IHJlcXVpcmUoJy4vJC5zaGFyZWQnKSgnd2tzJykKICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vJC51aWQnKQogICwgU3ltYm9sID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpLlN5bWJvbDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXsKICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KICAgIFN5bWJvbCAmJiBTeW1ib2xbbmFtZV0gfHwgKFN5bWJvbCB8fCB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTsKfTsKfSx7Ii4vJC5nbG9iYWwiOjMzNywiLi8kLnNoYXJlZCI6MzY1LCIuLyQudWlkIjozNzR9XSwzNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi8kLmNsYXNzb2YnKQogICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpCiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLyQuaXRlcmF0b3JzJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmNvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXsKICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXQogICAgfHwgaXRbJ0BAaXRlcmF0b3InXQogICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTsKfTsKfSx7Ii4vJC5jbGFzc29mIjozMjUsIi4vJC5jb3JlIjozMjcsIi4vJC5pdGVyYXRvcnMiOjM1MSwiLi8kLndrcyI6Mzc1fV0sMzc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vJC5hZGQtdG8tdW5zY29wYWJsZXMnKQogICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyLXN0ZXAnKQogICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKQogICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vJC50by1pb2JqZWN0Jyk7CgovLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpCi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKCkKLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLml0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsKICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0CiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZAovLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCkKfSwgZnVuY3Rpb24oKXsKICB2YXIgTyAgICAgPSB0aGlzLl90CiAgICAsIGtpbmQgID0gdGhpcy5fawogICAgLCBpbmRleCA9IHRoaXMuX2krKzsKICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7CiAgICB0aGlzLl90ID0gdW5kZWZpbmVkOwogICAgcmV0dXJuIHN0ZXAoMSk7CiAgfQogIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpOwogIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pOwogIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTsKfSwgJ3ZhbHVlcycpOwoKLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KQpJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5OwoKYWRkVG9VbnNjb3BhYmxlcygna2V5cycpOwphZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTsKYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpOwp9LHsiLi8kLmFkZC10by11bnNjb3BhYmxlcyI6MzIzLCIuLyQuaXRlci1kZWZpbmUiOjM0OCwiLi8kLml0ZXItc3RlcCI6MzUwLCIuLyQuaXRlcmF0b3JzIjozNTEsIi4vJC50by1pb2JqZWN0IjozNzF9XSwzNzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi8kLm9iamVjdC1hc3NpZ24nKX0pOwp9LHsiLi8kLmV4cG9ydCI6MzMzLCIuLyQub2JqZWN0LWFzc2lnbiI6MzU2fV0sMzc5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKTsKCnJlcXVpcmUoJy4vJC5vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oJGdldFByb3RvdHlwZU9mKXsKICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpewogICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpOwogIH07Cn0pOwp9LHsiLi8kLm9iamVjdC1zYXAiOjM1NywiLi8kLnRvLW9iamVjdCI6MzczfV0sMzgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuLyQub2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7CiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KXsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlOwogIH07Cn0pOwp9LHsiLi8kLmlzLW9iamVjdCI6MzQ1LCIuLyQub2JqZWN0LXNhcCI6MzU3fV0sMzgxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pCnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKTsKCnJlcXVpcmUoJy4vJC5vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigka2V5cyl7CiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpewogICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7CiAgfTsKfSk7Cn0seyIuLyQub2JqZWN0LXNhcCI6MzU3LCIuLyQudG8tb2JqZWN0IjozNzN9XSwzODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vJC5zZXQtcHJvdG8nKS5zZXR9KTsKfSx7Ii4vJC5leHBvcnQiOjMzMywiLi8kLnNldC1wcm90byI6MzYyfV0sMzgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKCn0se31dLDM4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICQgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKQogICwgTElCUkFSWSAgICA9IHJlcXVpcmUoJy4vJC5saWJyYXJ5JykKICAsIGdsb2JhbCAgICAgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykKICAsIGN0eCAgICAgICAgPSByZXF1aXJlKCcuLyQuY3R4JykKICAsIGNsYXNzb2YgICAgPSByZXF1aXJlKCcuLyQuY2xhc3NvZicpCiAgLCAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpCiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpCiAgLCBhbk9iamVjdCAgID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKQogICwgc3RyaWN0TmV3ICA9IHJlcXVpcmUoJy4vJC5zdHJpY3QtbmV3JykKICAsIGZvck9mICAgICAgPSByZXF1aXJlKCcuLyQuZm9yLW9mJykKICAsIHNldFByb3RvICAgPSByZXF1aXJlKCcuLyQuc2V0LXByb3RvJykuc2V0CiAgLCBzYW1lICAgICAgID0gcmVxdWlyZSgnLi8kLnNhbWUtdmFsdWUnKQogICwgU1BFQ0lFUyAgICA9IHJlcXVpcmUoJy4vJC53a3MnKSgnc3BlY2llcycpCiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLyQuc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgLCBhc2FwICAgICAgID0gcmVxdWlyZSgnLi8kLm1pY3JvdGFzaycpCiAgLCBQUk9NSVNFICAgID0gJ1Byb21pc2UnCiAgLCBwcm9jZXNzICAgID0gZ2xvYmFsLnByb2Nlc3MKICAsIGlzTm9kZSAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJwogICwgUCAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXQogICwgV3JhcHBlcjsKCnZhciB0ZXN0UmVzb2x2ZSA9IGZ1bmN0aW9uKHN1Yil7CiAgdmFyIHRlc3QgPSBuZXcgUChmdW5jdGlvbigpe30pOwogIGlmKHN1Yil0ZXN0LmNvbnN0cnVjdG9yID0gT2JqZWN0OwogIHJldHVybiBQLnJlc29sdmUodGVzdCkgPT09IHRlc3Q7Cn07Cgp2YXIgVVNFX05BVElWRSA9IGZ1bmN0aW9uKCl7CiAgdmFyIHdvcmtzID0gZmFsc2U7CiAgZnVuY3Rpb24gUDIoeCl7CiAgICB2YXIgc2VsZiA9IG5ldyBQKHgpOwogICAgc2V0UHJvdG8oc2VsZiwgUDIucHJvdG90eXBlKTsKICAgIHJldHVybiBzZWxmOwogIH0KICB0cnkgewogICAgd29ya3MgPSBQICYmIFAucmVzb2x2ZSAmJiB0ZXN0UmVzb2x2ZSgpOwogICAgc2V0UHJvdG8oUDIsIFApOwogICAgUDIucHJvdG90eXBlID0gJC5jcmVhdGUoUC5wcm90b3R5cGUsIHtjb25zdHJ1Y3Rvcjoge3ZhbHVlOiBQMn19KTsKICAgIC8vIGFjdHVhbCBGaXJlZm94IGhhcyBicm9rZW4gc3ViY2xhc3Mgc3VwcG9ydCwgdGVzdCB0aGF0CiAgICBpZighKFAyLnJlc29sdmUoNSkudGhlbihmdW5jdGlvbigpe30pIGluc3RhbmNlb2YgUDIpKXsKICAgICAgd29ya3MgPSBmYWxzZTsKICAgIH0KICAgIC8vIGFjdHVhbCBWOCBidWcsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTYyCiAgICBpZih3b3JrcyAmJiByZXF1aXJlKCcuLyQuZGVzY3JpcHRvcnMnKSl7CiAgICAgIHZhciB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSBmYWxzZTsKICAgICAgUC5yZXNvbHZlKCQuc2V0RGVzYyh7fSwgJ3RoZW4nLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpeyB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSB0cnVlOyB9CiAgICAgIH0pKTsKICAgICAgd29ya3MgPSB0aGVuYWJsZVRoZW5Hb3R0ZW47CiAgICB9CiAgfSBjYXRjaChlKXsgd29ya3MgPSBmYWxzZTsgfQogIHJldHVybiB3b3JrczsKfSgpOwoKLy8gaGVscGVycwp2YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7CiAgLy8gbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZQogIGlmKExJQlJBUlkgJiYgYSA9PT0gUCAmJiBiID09PSBXcmFwcGVyKXJldHVybiB0cnVlOwogIHJldHVybiBzYW1lKGEsIGIpOwp9Owp2YXIgZ2V0Q29uc3RydWN0b3IgPSBmdW5jdGlvbihDKXsKICB2YXIgUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdOwogIHJldHVybiBTICE9IHVuZGVmaW5lZCA/IFMgOiBDOwp9Owp2YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgdGhlbjsKICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7Cn07CnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpewogIHZhciByZXNvbHZlLCByZWplY3Q7CiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7CiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpOwogICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTsKICAgIHJlamVjdCAgPSAkJHJlamVjdDsKICB9KTsKICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSksCiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCkKfTsKdmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4ge2Vycm9yOiBlfTsKICB9Cn07CnZhciBub3RpZnkgPSBmdW5jdGlvbihyZWNvcmQsIGlzUmVqZWN0KXsKICBpZihyZWNvcmQubilyZXR1cm47CiAgcmVjb3JkLm4gPSB0cnVlOwogIHZhciBjaGFpbiA9IHJlY29yZC5jOwogIGFzYXAoZnVuY3Rpb24oKXsKICAgIHZhciB2YWx1ZSA9IHJlY29yZC52CiAgICAgICwgb2sgICAgPSByZWNvcmQucyA9PSAxCiAgICAgICwgaSAgICAgPSAwOwogICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXsKICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbAogICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmUKICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3QKICAgICAgICAsIHJlc3VsdCwgdGhlbjsKICAgICAgdHJ5IHsKICAgICAgICBpZihoYW5kbGVyKXsKICAgICAgICAgIGlmKCFvaylyZWNvcmQuaCA9IHRydWU7CiAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyID09PSB0cnVlID8gdmFsdWUgOiBoYW5kbGVyKHZhbHVlKTsKICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7CiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7CiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7CiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHJlamVjdChlKTsKICAgICAgfQogICAgfTsKICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaAogICAgY2hhaW4ubGVuZ3RoID0gMDsKICAgIHJlY29yZC5uID0gZmFsc2U7CiAgICBpZihpc1JlamVjdClzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgIHZhciBwcm9taXNlID0gcmVjb3JkLnAKICAgICAgICAsIGhhbmRsZXIsIGNvbnNvbGU7CiAgICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXsKICAgICAgICBpZihpc05vZGUpewogICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7CiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pewogICAgICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZX0pOwogICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0gcmVjb3JkLmEgPSB1bmRlZmluZWQ7CiAgICB9LCAxKTsKICB9KTsKfTsKdmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7CiAgdmFyIHJlY29yZCA9IHByb21pc2UuX2QKICAgICwgY2hhaW4gID0gcmVjb3JkLmEgfHwgcmVjb3JkLmMKICAgICwgaSAgICAgID0gMAogICAgLCByZWFjdGlvbjsKICBpZihyZWNvcmQuaClyZXR1cm4gZmFsc2U7CiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7CiAgICByZWFjdGlvbiA9IGNoYWluW2krK107CiAgICBpZihyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlyZXR1cm4gZmFsc2U7CiAgfSByZXR1cm4gdHJ1ZTsKfTsKdmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7CiAgdmFyIHJlY29yZCA9IHRoaXM7CiAgaWYocmVjb3JkLmQpcmV0dXJuOwogIHJlY29yZC5kID0gdHJ1ZTsKICByZWNvcmQgPSByZWNvcmQuciB8fCByZWNvcmQ7IC8vIHVud3JhcAogIHJlY29yZC52ID0gdmFsdWU7CiAgcmVjb3JkLnMgPSAyOwogIHJlY29yZC5hID0gcmVjb3JkLmMuc2xpY2UoKTsKICBub3RpZnkocmVjb3JkLCB0cnVlKTsKfTsKdmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpewogIHZhciByZWNvcmQgPSB0aGlzCiAgICAsIHRoZW47CiAgaWYocmVjb3JkLmQpcmV0dXJuOwogIHJlY29yZC5kID0gdHJ1ZTsKICByZWNvcmQgPSByZWNvcmQuciB8fCByZWNvcmQ7IC8vIHVud3JhcAogIHRyeSB7CiAgICBpZihyZWNvcmQucCA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOwogICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXsKICAgICAgYXNhcChmdW5jdGlvbigpewogICAgICAgIHZhciB3cmFwcGVyID0ge3I6IHJlY29yZCwgZDogZmFsc2V9OyAvLyB3cmFwCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTsKICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICByZWNvcmQudiA9IHZhbHVlOwogICAgICByZWNvcmQucyA9IDE7CiAgICAgIG5vdGlmeShyZWNvcmQsIGZhbHNlKTsKICAgIH0KICB9IGNhdGNoKGUpewogICAgJHJlamVjdC5jYWxsKHtyOiByZWNvcmQsIGQ6IGZhbHNlfSwgZSk7IC8vIHdyYXAKICB9Cn07CgovLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbAppZighVVNFX05BVElWRSl7CiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcikKICBQID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpOwogICAgdmFyIHJlY29yZCA9IHRoaXMuX2QgPSB7CiAgICAgIHA6IHN0cmljdE5ldyh0aGlzLCBQLCBQUk9NSVNFKSwgICAgICAgICAvLyA8LSBwcm9taXNlCiAgICAgIGM6IFtdLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnMKICAgICAgYTogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zCiAgICAgIHM6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBzdGF0ZQogICAgICBkOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gZG9uZQogICAgICB2OiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWUKICAgICAgaDogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGhhbmRsZWQgcmVqZWN0aW9uCiAgICAgIG46IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBub3RpZnkKICAgIH07CiAgICB0cnkgewogICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHJlY29yZCwgMSksIGN0eCgkcmVqZWN0LCByZWNvcmQsIDEpKTsKICAgIH0gY2F0Y2goZXJyKXsKICAgICAgJHJlamVjdC5jYWxsKHJlY29yZCwgZXJyKTsKICAgIH0KICB9OwogIHJlcXVpcmUoJy4vJC5yZWRlZmluZS1hbGwnKShQLnByb3RvdHlwZSwgewogICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkKICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpewogICAgICB2YXIgcmVhY3Rpb24gPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFApKQogICAgICAgICwgcHJvbWlzZSAgPSByZWFjdGlvbi5wcm9taXNlCiAgICAgICAgLCByZWNvcmQgICA9IHRoaXMuX2Q7CiAgICAgIHJlYWN0aW9uLm9rICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTsKICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDsKICAgICAgcmVjb3JkLmMucHVzaChyZWFjdGlvbik7CiAgICAgIGlmKHJlY29yZC5hKXJlY29yZC5hLnB1c2gocmVhY3Rpb24pOwogICAgICBpZihyZWNvcmQucylub3RpZnkocmVjb3JkLCBmYWxzZSk7CiAgICAgIHJldHVybiBwcm9taXNlOwogICAgfSwKICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpCiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXsKICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpOwogICAgfQogIH0pOwp9CgokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogUH0pOwpyZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKShQLCBQUk9NSVNFKTsKcmVxdWlyZSgnLi8kLnNldC1zcGVjaWVzJykoUFJPTUlTRSk7CldyYXBwZXIgPSByZXF1aXJlKCcuLyQuY29yZScpW1BST01JU0VdOwoKLy8gc3RhdGljcwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocikKICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXsKICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KHRoaXMpCiAgICAgICwgJCRyZWplY3QgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgJCRyZWplY3Qocik7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8IHRlc3RSZXNvbHZlKHRydWUpKSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KQogIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7CiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlCiAgICBpZih4IGluc3RhbmNlb2YgUCAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpcmV0dXJuIHg7CiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQogICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7CiAgICAkJHJlc29sdmUoeCk7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vJC5pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpewogIFAuYWxsKGl0ZXIpWydjYXRjaCddKGZ1bmN0aW9uKCl7fSk7Cn0pKSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKQogIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKXsKICAgIHZhciBDICAgICAgICAgID0gZ2V0Q29uc3RydWN0b3IodGhpcykKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpCiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZQogICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdAogICAgICAsIHZhbHVlcyAgICAgPSBbXTsKICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgdmFsdWVzLnB1c2gsIHZhbHVlcyk7CiAgICAgIHZhciByZW1haW5pbmcgPSB2YWx1ZXMubGVuZ3RoCiAgICAgICAgLCByZXN1bHRzICAgPSBBcnJheShyZW1haW5pbmcpOwogICAgICBpZihyZW1haW5pbmcpJC5lYWNoLmNhbGwodmFsdWVzLCBmdW5jdGlvbihwcm9taXNlLCBpbmRleCl7CiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTsKICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjsKICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlOwogICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSB2YWx1ZTsKICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUocmVzdWx0cyk7CiAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICAgIGVsc2UgcmVzb2x2ZShyZXN1bHRzKTsKICAgIH0pOwogICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9LAogIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSkKICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXsKICAgIHZhciBDICAgICAgICAgID0gZ2V0Q29uc3RydWN0b3IodGhpcykKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpCiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXsKICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXsKICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7CiAgICAgIH0pOwogICAgfSk7CiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7Cn0seyIuLyQiOjM1MiwiLi8kLmEtZnVuY3Rpb24iOjMyMiwiLi8kLmFuLW9iamVjdCI6MzI0LCIuLyQuY2xhc3NvZiI6MzI1LCIuLyQuY29yZSI6MzI3LCIuLyQuY3R4IjozMjgsIi4vJC5kZXNjcmlwdG9ycyI6MzMwLCIuLyQuZXhwb3J0IjozMzMsIi4vJC5mb3Itb2YiOjMzNSwiLi8kLmdsb2JhbCI6MzM3LCIuLyQuaXMtb2JqZWN0IjozNDUsIi4vJC5pdGVyLWRldGVjdCI6MzQ5LCIuLyQubGlicmFyeSI6MzU0LCIuLyQubWljcm90YXNrIjozNTUsIi4vJC5yZWRlZmluZS1hbGwiOjM1OSwiLi8kLnNhbWUtdmFsdWUiOjM2MSwiLi8kLnNldC1wcm90byI6MzYyLCIuLyQuc2V0LXNwZWNpZXMiOjM2MywiLi8kLnNldC10by1zdHJpbmctdGFnIjozNjQsIi4vJC5zcGVjaWVzLWNvbnN0cnVjdG9yIjozNjYsIi4vJC5zdHJpY3QtbmV3IjozNjcsIi4vJC53a3MiOjM3NX1dLDM4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRhdCAgPSByZXF1aXJlKCcuLyQuc3RyaW5nLWF0JykodHJ1ZSk7CgovLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCnJlcXVpcmUoJy4vJC5pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXsKICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0CiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKQp9LCBmdW5jdGlvbigpewogIHZhciBPICAgICA9IHRoaXMuX3QKICAgICwgaW5kZXggPSB0aGlzLl9pCiAgICAsIHBvaW50OwogIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07CiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpOwogIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoOwogIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07Cn0pOwp9LHsiLi8kLml0ZXItZGVmaW5lIjozNDgsIi4vJC5zdHJpbmctYXQiOjM2OH1dLDM4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbQp2YXIgJCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKQogICwgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLmhhcycpCiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuLyQucmVkZWZpbmUnKQogICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuLyQuZmFpbHMnKQogICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuLyQuc2hhcmVkJykKICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJykKICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpCiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC53a3MnKQogICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuLyQua2V5b2YnKQogICwgJG5hbWVzICAgICAgICAgPSByZXF1aXJlKCcuLyQuZ2V0LW5hbWVzJykKICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi8kLmVudW0ta2V5cycpCiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vJC5pcy1hcnJheScpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vJC5hbi1vYmplY3QnKQogICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuLyQudG8taW9iamVjdCcpCiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vJC5wcm9wZXJ0eS1kZXNjJykKICAsIGdldERlc2MgICAgICAgID0gJC5nZXREZXNjCiAgLCBzZXREZXNjICAgICAgICA9ICQuc2V0RGVzYwogICwgX2NyZWF0ZSAgICAgICAgPSAkLmNyZWF0ZQogICwgZ2V0TmFtZXMgICAgICAgPSAkbmFtZXMuZ2V0CiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2wKICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT04KICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5CiAgLCBzZXR0ZXIgICAgICAgICA9IGZhbHNlCiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpCiAgLCBpc0VudW0gICAgICAgICA9ICQuaXNFbnVtCiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JykKICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJykKICAsIHVzZU5hdGl2ZSAgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJwogICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3QucHJvdG90eXBlOwoKLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3CnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIF9jcmVhdGUoc2V0RGVzYyh7fSwgJ2EnLCB7CiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBzZXREZXNjKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfQogIH0pKS5hICE9IDc7Cn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7CiAgdmFyIHByb3RvRGVzYyA9IGdldERlc2MoT2JqZWN0UHJvdG8sIGtleSk7CiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldOwogIHNldERlc2MoaXQsIGtleSwgRCk7CiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylzZXREZXNjKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7Cn0gOiBzZXREZXNjOwoKdmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpewogIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2wucHJvdG90eXBlKTsKICBzeW0uX2sgPSB0YWc7CiAgREVTQ1JJUFRPUlMgJiYgc2V0dGVyICYmIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7CiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTsKICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKICAgIH0KICB9KTsKICByZXR1cm4gc3ltOwp9OwoKdmFyIGlzU3ltYm9sID0gZnVuY3Rpb24oaXQpewogIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7Cn07Cgp2YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7CiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSl7CiAgICBpZighRC5lbnVtZXJhYmxlKXsKICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlzZXREZXNjKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTsKICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7CiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pOwogICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTsKICB9IHJldHVybiBzZXREZXNjKGl0LCBrZXksIEQpOwp9Owp2YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXsKICBhbk9iamVjdChpdCk7CiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKQogICAgLCBpICAgID0gMAogICAgLCBsID0ga2V5cy5sZW5ndGgKICAgICwga2V5OwogIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pOwogIHJldHVybiBpdDsKfTsKdmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApewogIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTsKfTsKdmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7CiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkpOwogIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0KICAgID8gRSA6IHRydWU7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpewogIHZhciBEID0gZ2V0RGVzYyhpdCA9IHRvSU9iamVjdChpdCksIGtleSk7CiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7CiAgcmV0dXJuIEQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpewogIHZhciBuYW1lcyAgPSBnZXROYW1lcyh0b0lPYmplY3QoaXQpKQogICAgLCByZXN1bHQgPSBbXQogICAgLCBpICAgICAgPSAwCiAgICAsIGtleTsKICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTilyZXN1bHQucHVzaChrZXkpOwogIHJldHVybiByZXN1bHQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXsKICB2YXIgbmFtZXMgID0gZ2V0TmFtZXModG9JT2JqZWN0KGl0KSkKICAgICwgcmVzdWx0ID0gW10KICAgICwgaSAgICAgID0gMAogICAgLCBrZXk7CiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTsKICByZXR1cm4gcmVzdWx0Owp9Owp2YXIgJHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7CiAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkCiAgdmFyIGFyZ3MgPSBbaXRdCiAgICAsIGkgICAgPSAxCiAgICAsICQkICAgPSBhcmd1bWVudHMKICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjsKICB3aGlsZSgkJC5sZW5ndGggPiBpKWFyZ3MucHVzaCgkJFtpKytdKTsKICByZXBsYWNlciA9IGFyZ3NbMV07CiAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7CiAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7CiAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTsKICB9OwogIGFyZ3NbMV0gPSByZXBsYWNlcjsKICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7Cn07CnZhciBidWdneUpTT04gPSAkZmFpbHMoZnVuY3Rpb24oKXsKICB2YXIgUyA9ICRTeW1ib2woKTsKICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fQogIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbAogIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzCiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9JzsKfSk7CgovLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSkKaWYoIXVzZU5hdGl2ZSl7CiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpewogICAgaWYoaXNTeW1ib2wodGhpcykpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTsKICAgIHJldHVybiB3cmFwKHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCkpOwogIH07CiAgcmVkZWZpbmUoJFN5bWJvbC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICByZXR1cm4gdGhpcy5fazsKICB9KTsKCiAgaXNTeW1ib2wgPSBmdW5jdGlvbihpdCl7CiAgICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sOwogIH07CgogICQuY3JlYXRlICAgICA9ICRjcmVhdGU7CiAgJC5pc0VudW0gICAgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlOwogICQuZ2V0RGVzYyAgICA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgJC5zZXREZXNjICAgID0gJGRlZmluZVByb3BlcnR5OwogICQuc2V0RGVzY3MgICA9ICRkZWZpbmVQcm9wZXJ0aWVzOwogICQuZ2V0TmFtZXMgICA9ICRuYW1lcy5nZXQgPSAkZ2V0T3duUHJvcGVydHlOYW1lczsKICAkLmdldFN5bWJvbHMgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzOwoKICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi8kLmxpYnJhcnknKSl7CiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTsKICB9Cn0KCnZhciBzeW1ib2xTdGF0aWNzID0gewogIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KQogICdmb3InOiBmdW5jdGlvbihrZXkpewogICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKQogICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV0KICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpOwogIH0sCiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pCiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXsKICAgIHJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTsKICB9LAogIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSwKICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9Cn07Ci8vIDE5LjQuMi4yIFN5bWJvbC5oYXNJbnN0YW5jZQovLyAxOS40LjIuMyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlCi8vIDE5LjQuMi40IFN5bWJvbC5pdGVyYXRvcgovLyAxOS40LjIuNiBTeW1ib2wubWF0Y2gKLy8gMTkuNC4yLjggU3ltYm9sLnJlcGxhY2UKLy8gMTkuNC4yLjkgU3ltYm9sLnNlYXJjaAovLyAxOS40LjIuMTAgU3ltYm9sLnNwZWNpZXMKLy8gMTkuNC4yLjExIFN5bWJvbC5zcGxpdAovLyAxOS40LjIuMTIgU3ltYm9sLnRvUHJpbWl0aXZlCi8vIDE5LjQuMi4xMyBTeW1ib2wudG9TdHJpbmdUYWcKLy8gMTkuNC4yLjE0IFN5bWJvbC51bnNjb3BhYmxlcwokLmVhY2guY2FsbCgoCiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCwnICsKICAnc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcycKKS5zcGxpdCgnLCcpLCBmdW5jdGlvbihpdCl7CiAgdmFyIHN5bSA9IHdrcyhpdCk7CiAgc3ltYm9sU3RhdGljc1tpdF0gPSB1c2VOYXRpdmUgPyBzeW0gOiB3cmFwKHN5bSk7Cn0pOwoKc2V0dGVyID0gdHJ1ZTsKCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XLCB7U3ltYm9sOiAkU3ltYm9sfSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1N5bWJvbCcsIHN5bWJvbFN0YXRpY3MpOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhdXNlTmF0aXZlLCAnT2JqZWN0JywgewogIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKICBjcmVhdGU6ICRjcmVhdGUsCiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpCiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSwKICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQogIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLAogIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsCiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTykKICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcywKICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pCiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzCn0pOwoKLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pCiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCF1c2VOYXRpdmUgfHwgYnVnZ3lKU09OKSwgJ0pTT04nLCB7c3RyaW5naWZ5OiAkc3RyaW5naWZ5fSk7CgovLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTsKLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpOwovLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXQpzZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTsKfSx7Ii4vJCI6MzUyLCIuLyQuYW4tb2JqZWN0IjozMjQsIi4vJC5kZXNjcmlwdG9ycyI6MzMwLCIuLyQuZW51bS1rZXlzIjozMzIsIi4vJC5leHBvcnQiOjMzMywiLi8kLmZhaWxzIjozMzQsIi4vJC5nZXQtbmFtZXMiOjMzNiwiLi8kLmdsb2JhbCI6MzM3LCIuLyQuaGFzIjozMzgsIi4vJC5pcy1hcnJheSI6MzQ0LCIuLyQua2V5b2YiOjM1MywiLi8kLmxpYnJhcnkiOjM1NCwiLi8kLnByb3BlcnR5LWRlc2MiOjM1OCwiLi8kLnJlZGVmaW5lIjozNjAsIi4vJC5zZXQtdG8tc3RyaW5nLXRhZyI6MzY0LCIuLyQuc2hhcmVkIjozNjUsIi4vJC50by1pb2JqZWN0IjozNzEsIi4vJC51aWQiOjM3NCwiLi8kLndrcyI6Mzc1fV0sMzg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTsKdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKTsKSXRlcmF0b3JzLk5vZGVMaXN0ID0gSXRlcmF0b3JzLkhUTUxDb2xsZWN0aW9uID0gSXRlcmF0b3JzLkFycmF5Owp9LHsiLi8kLml0ZXJhdG9ycyI6MzUxLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6Mzc3fV0sMzg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyCgp2YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307CnZhciBxdWV1ZSA9IFtdOwp2YXIgZHJhaW5pbmcgPSBmYWxzZTsKdmFyIGN1cnJlbnRRdWV1ZTsKdmFyIHF1ZXVlSW5kZXggPSAtMTsKCmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHsKICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIGRyYWluaW5nID0gZmFsc2U7CiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkgewogICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7CiAgICB9IGVsc2UgewogICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgIH0KICAgIGlmIChxdWV1ZS5sZW5ndGgpIHsKICAgICAgICBkcmFpblF1ZXVlKCk7CiAgICB9Cn0KCmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7CiAgICBpZiAoZHJhaW5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTsKICAgIGRyYWluaW5nID0gdHJ1ZTsKCiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoOwogICAgd2hpbGUobGVuKSB7CiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7CiAgICAgICAgcXVldWUgPSBbXTsKICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7CiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHsKICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoOwogICAgfQogICAgY3VycmVudFF1ZXVlID0gbnVsbDsKICAgIGRyYWluaW5nID0gZmFsc2U7CiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7Cn0KCnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7CiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7CiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsKICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTsKICAgICAgICB9CiAgICB9CiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpOwogICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHsKICAgICAgICBzZXRUaW1lb3V0KGRyYWluUXVldWUsIDApOwogICAgfQp9OwoKLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0cwpmdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHsKICAgIHRoaXMuZnVuID0gZnVuOwogICAgdGhpcy5hcnJheSA9IGFycmF5Owp9Ckl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpOwp9Owpwcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInOwpwcm9jZXNzLmJyb3dzZXIgPSB0cnVlOwpwcm9jZXNzLmVudiA9IHt9Owpwcm9jZXNzLmFyZ3YgPSBbXTsKcHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzCnByb2Nlc3MudmVyc2lvbnMgPSB7fTsKCmZ1bmN0aW9uIG5vb3AoKSB7fQoKcHJvY2Vzcy5vbiA9IG5vb3A7CnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wOwpwcm9jZXNzLm9uY2UgPSBub29wOwpwcm9jZXNzLm9mZiA9IG5vb3A7CnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wOwpwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7CnByb2Nlc3MuZW1pdCA9IG5vb3A7Cgpwcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkgewogICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpOwp9OwoKcHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTsKcHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHsKICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07CnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07Cgp9LHt9XSwzODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewooZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXsKLyoqCiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy4KICogQWxsIHJpZ2h0cyByZXNlcnZlZC4KICoKICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW4KICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluCiAqIHRoZSBzYW1lIGRpcmVjdG9yeS4KICovCgohKGZ1bmN0aW9uKGdsb2JhbCkgewogICJ1c2Ugc3RyaWN0IjsKCiAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuCiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iID8gU3ltYm9sIDoge307CiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCAiQEBpdGVyYXRvciI7CiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCAiQEB0b1N0cmluZ1RhZyI7CgogIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09ICJvYmplY3QiOwogIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTsKICBpZiAocnVudGltZSkgewogICAgaWYgKGluTW9kdWxlKSB7CiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSwKICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS4KICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lOwogICAgfQogICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhcwogICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LgogICAgcmV0dXJuOwogIH0KCiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyCiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LgogIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9OwoKICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7CiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLgogICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUoKG91dGVyRm4gfHwgR2VuZXJhdG9yKS5wcm90b3R5cGUpOwogICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7CgogICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LAogICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLgogICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOwoKICAgIHJldHVybiBnZW5lcmF0b3I7CiAgfQogIHJ1bnRpbWUud3JhcCA9IHdyYXA7CgogIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvbgogIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZAogIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZQogIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2UKICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkCiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZwogIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlCiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlCiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaAogIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS4KICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiB7IHR5cGU6ICJub3JtYWwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgcmV0dXJuIHsgdHlwZTogInRocm93IiwgYXJnOiBlcnIgfTsKICAgIH0KICB9CgogIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gInN1c3BlbmRlZFN0YXJ0IjsKICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9ICJzdXNwZW5kZWRZaWVsZCI7CiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gImV4ZWN1dGluZyI7CiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gImNvbXBsZXRlZCI7CgogIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMKICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuCiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTsKCiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kCiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yCiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXIKICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLgogIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9CiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fQogIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge30KCiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0gR2VuZXJhdG9yLnByb3RvdHlwZTsKICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247CiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID0gR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwoKICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZQogIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuCiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkgewogICAgWyJuZXh0IiwgInRocm93IiwgInJldHVybiJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7CiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7CiAgICAgIH07CiAgICB9KTsKICB9CgogIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikgewogICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSAiZnVuY3Rpb24iICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjsKICAgIHJldHVybiBjdG9yCiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwKICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuCiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LgogICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09ICJHZW5lcmF0b3JGdW5jdGlvbiIKICAgICAgOiBmYWxzZTsKICB9OwoKICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHsKICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHsKICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpOwogICAgfSBlbHNlIHsKICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7CiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3JGdW5jdGlvbiI7CiAgICAgIH0KICAgIH0KICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTsKICAgIHJldHVybiBnZW5GdW47CiAgfTsKCiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvCiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3QKICAvLyBgdmFsdWUgaW5zdGFuY2VvZiBBd2FpdEFyZ3VtZW50YCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXMKICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLiBTb21lIG1heSBjb25zaWRlciB0aGUgbmFtZSBvZiB0aGlzIG1ldGhvZCB0b28KICAvLyBjdXRlc3ksIGJ1dCB0aGV5IGFyZSBjdXJtdWRnZW9ucy4KICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7CiAgICByZXR1cm4gbmV3IEF3YWl0QXJndW1lbnQoYXJnKTsKICB9OwoKICBmdW5jdGlvbiBBd2FpdEFyZ3VtZW50KGFyZykgewogICAgdGhpcy5hcmcgPSBhcmc7CiAgfQoKICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikgewogICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7CiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZzsKICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7CiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudCkgewogICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5hcmcpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsKICAgICAgICAgICAgaW52b2tlKCJuZXh0IiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgaW52b2tlKCJ0aHJvdyIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHsKICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzCiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGUKICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlCiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZQogICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3QKICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2UKICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW4KICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdAogICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkCiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFjawogICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoCiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlCiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlCiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmQKICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLgogICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkOwogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0sIHJlamVjdCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICJvYmplY3QiICYmIHByb2Nlc3MuZG9tYWluKSB7CiAgICAgIGludm9rZSA9IHByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTsKICAgIH0KCiAgICB2YXIgcHJldmlvdXNQcm9taXNlOwoKICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHsKICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0KICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsCiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsCiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZgogICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvCiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsCiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG8KICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5CiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHMKICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseQogICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlCiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHkKICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuCiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oCiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywKICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyCiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuCiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZwogICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpOwogICAgfQoKICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsCiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS4KICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7CiAgfQoKICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpOwoKICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mCiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mCiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuCiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7CiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKAogICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KQogICAgKTsKCiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pCiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuCiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOwogICAgICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgewogICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDsKCiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTsKICAgICAgfQoKICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkgewogICAgICAgIGlmIChtZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIHRocm93IGFyZzsKICAgICAgICB9CgogICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6CiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZQogICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7CiAgICAgIH0KCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTsKICAgICAgICBpZiAoZGVsZWdhdGUpIHsKICAgICAgICAgIGlmIChtZXRob2QgPT09ICJyZXR1cm4iIHx8CiAgICAgICAgICAgICAgKG1ldGhvZCA9PT0gInRocm93IiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7CiAgICAgICAgICAgIC8vIEEgcmV0dXJuIG9yIHRocm93ICh3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gdGhyb3cKICAgICAgICAgICAgLy8gbWV0aG9kKSBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuCiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYQogICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuCiAgICAgICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclsicmV0dXJuIl07CiAgICAgICAgICAgIGlmIChyZXR1cm5NZXRob2QpIHsKICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gocmV0dXJuTWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgYXJnKTsKICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXQKICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBwcmV2YWlsIG92ZXIgdGhlIG9yaWdpbmFsIHJldHVybiBvciB0aHJvdy4KICAgICAgICAgICAgICAgIG1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobWV0aG9kID09PSAicmV0dXJuIikgewogICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG91dGVyIHJldHVybiwgbm93IHRoYXQgdGhlIGRlbGVnYXRlCiAgICAgICAgICAgICAgLy8gaXRlcmF0b3IgaGFzIGJlZW4gdGVybWluYXRlZC4KICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaCgKICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSwKICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsCiAgICAgICAgICAgIGFyZwogICAgICAgICAgKTsKCiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CgogICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGUKICAgICAgICAgICAgLy8gb3ZlcmhlYWQgb2YgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbC4KICAgICAgICAgICAgbWV0aG9kID0gInRocm93IjsKICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc28KICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUgbWV0aG9kIHdhcywgd2UgY29udGludWUgYXMgaWYgaXQgaXMKICAgICAgICAgIC8vICJuZXh0IiB3aXRoIGFuIHVuZGVmaW5lZCBhcmcuCiAgICAgICAgICBtZXRob2QgPSAibmV4dCI7CiAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CgogICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnOwogICAgICAgICAgaWYgKGluZm8uZG9uZSkgewogICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTsKICAgICAgICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDsKICAgICAgICAgICAgcmV0dXJuIGluZm87CiAgICAgICAgICB9CgogICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBpZiAobWV0aG9kID09PSAibmV4dCIpIHsKICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwncwogICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4KICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBhcmc7CgogICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAidGhyb3ciKSB7CiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHsKICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDsKICAgICAgICAgICAgdGhyb3cgYXJnOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHsKICAgICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jaywKICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS4KICAgICAgICAgICAgbWV0aG9kID0gIm5leHQiOwogICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAicmV0dXJuIikgewogICAgICAgICAgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGFyZyk7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nOwoKICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAibm9ybWFsIikgewogICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PQogICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLgogICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmUKICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZAogICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7CgogICAgICAgICAgdmFyIGluZm8gPSB7CiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLAogICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmUKICAgICAgICAgIH07CgogICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHsKICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSAibmV4dCIpIHsKICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndAogICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS4KICAgICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBpbmZvOwogICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOwogICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZQogICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuCiAgICAgICAgICBtZXRob2QgPSAidGhyb3ciOwogICAgICAgICAgYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfQoKICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZQogIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC4KICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApOwoKICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzOwogIH07CgogIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3IiOwoKICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuICJbb2JqZWN0IEdlbmVyYXRvcl0iOwogIH07CgogIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7CiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9OwoKICAgIGlmICgxIGluIGxvY3MpIHsKICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdOwogICAgfQoKICAgIGlmICgyIGluIGxvY3MpIHsKICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07CiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTsKICAgIH0KCiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7CiAgfQoKICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7CiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTsKICAgIHJlY29yZC50eXBlID0gIm5vcm1hbCI7CiAgICBkZWxldGUgcmVjb3JkLmFyZzsKICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7CiAgfQoKICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7CiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2gKICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb20KICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC4KICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogInJvb3QiIH1dOwogICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpOwogICAgdGhpcy5yZXNldCh0cnVlKTsKICB9CgogIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgdmFyIGtleXMgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAga2V5cy5wdXNoKGtleSk7CiAgICB9CiAgICBrZXlzLnJldmVyc2UoKTsKCiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcAogICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi4KICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkgewogICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHsKICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTsKICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgewogICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTsKICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWUKICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXMKICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uCiAgICAgIG5leHQuZG9uZSA9IHRydWU7CiAgICAgIHJldHVybiBuZXh0OwogICAgfTsKICB9OwoKICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHsKICAgIGlmIChpdGVyYWJsZSkgewogICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07CiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkgewogICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlOwogICAgICB9CgogICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHsKICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHsKICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgewogICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTsKICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTsKICAgICAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7CiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlOwoKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH07CgogICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0OwogICAgICB9CiAgICB9CgogICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLgogICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9OwogIH0KICBydW50aW1lLnZhbHVlcyA9IHZhbHVlczsKCiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHsKICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTsKICB9CgogIENvbnRleHQucHJvdG90eXBlID0gewogICAgY29uc3RydWN0b3I6IENvbnRleHQsCgogICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHsKICAgICAgdGhpcy5wcmV2ID0gMDsKICAgICAgdGhpcy5uZXh0ID0gMDsKICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3MKICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4KICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDsKICAgICAgdGhpcy5kb25lID0gZmFsc2U7CiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7CgogICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHsKICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHsKICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6CiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09ICJ0IiAmJgogICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmCiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkgewogICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICBzdG9wOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5kb25lID0gdHJ1ZTsKCiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07CiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247CiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZzsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucnZhbDsKICAgIH0sCgogICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikgewogICAgICBpZiAodGhpcy5kb25lKSB7CiAgICAgICAgdGhyb3cgZXhjZXB0aW9uOwogICAgICB9CgogICAgICB2YXIgY29udGV4dCA9IHRoaXM7CiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkgewogICAgICAgIHJlY29yZC50eXBlID0gInRocm93IjsKICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uOwogICAgICAgIGNvbnRleHQubmV4dCA9IGxvYzsKICAgICAgICByZXR1cm4gISFjYXVnaHQ7CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247CgogICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09ICJyb290IikgewogICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGUKICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0bwogICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi4KICAgICAgICAgIHJldHVybiBoYW5kbGUoImVuZCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHsKICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKTsKICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIik7CgogICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHsKICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJgogICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgImZpbmFsbHlMb2MiKSAmJgogICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiYKICAgICAgICAgICh0eXBlID09PSAiYnJlYWsiIHx8CiAgICAgICAgICAgdHlwZSA9PT0gImNvbnRpbnVlIikgJiYKICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmCiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHsKICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhCiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLgogICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9OwogICAgICByZWNvcmQudHlwZSA9IHR5cGU7CiAgICAgIHJlY29yZC5hcmcgPSBhcmc7CgogICAgICBpZiAoZmluYWxseUVudHJ5KSB7CiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpOwogICAgICB9CgogICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgIH0sCgogICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHsKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZzsKICAgICAgfQoKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAiYnJlYWsiIHx8CiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gImNvbnRpbnVlIikgewogICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7CiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJyZXR1cm4iKSB7CiAgICAgICAgdGhpcy5ydmFsID0gcmVjb3JkLmFyZzsKICAgICAgICB0aGlzLm5leHQgPSAiZW5kIjsKICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gIm5vcm1hbCIgJiYgYWZ0ZXJMb2MpIHsKICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYzsKICAgICAgfQogICAgfSwKCiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgewogICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7CiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTsKICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgICAgIH0KICAgICAgfQogICAgfSwKCiAgICAiY2F0Y2giOiBmdW5jdGlvbih0cnlMb2MpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHsKICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwogICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnOwogICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiB0aHJvd247CiAgICAgICAgfQogICAgICB9CgogICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb24KICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLgogICAgICB0aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpOwogICAgfSwKCiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykgewogICAgICB0aGlzLmRlbGVnYXRlID0gewogICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLAogICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsCiAgICAgICAgbmV4dExvYzogbmV4dExvYwogICAgICB9OwoKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9CiAgfTsKfSkoCiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbAogIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdAogIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuCiAgdHlwZW9mIGdsb2JhbCA9PT0gIm9iamVjdCIgPyBnbG9iYWwgOgogIHR5cGVvZiB3aW5kb3cgPT09ICJvYmplY3QiID8gd2luZG93IDoKICB0eXBlb2Ygc2VsZiA9PT0gIm9iamVjdCIgPyBzZWxmIDogdGhpcwopOwoKfSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJyksdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKCn0seyJfcHJvY2VzcyI6Mzg4fV0sMzkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7Ci8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLy8gRGlzdHJpYnV0aW9uIGZpbGUgZm9yIE1lc3NhZ2VGYWN0b3J5LmpzIAovLyB2ZXJzaW9uOiAwLjMuMAovLyBMYXN0IGJ1aWxkOiBXZWQgSnVuIDI5IDIwMTYgMTg6MTg6MzIgR01UKzAxMDAgKFdFU1QpCgohZnVuY3Rpb24oZSl7aWYoIm9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciB0O3Q9InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjp0aGlzLHQuTWVzc2FnZUZhY3Rvcnk9ZSgpfX0oZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gZnVuY3Rpb24gdChlLHIsbil7ZnVuY3Rpb24gbyhhLHMpe2lmKCFyW2FdKXtpZighZVthXSl7dmFyIHU9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIXMmJnUpcmV0dXJuIHUoYSwhMCk7aWYoaSlyZXR1cm4gaShhLCEwKTt2YXIgbD1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIithKyInIik7dGhyb3cgbC5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixsfXZhciBjPXJbYV09e2V4cG9ydHM6e319O2VbYV1bMF0uY2FsbChjLmV4cG9ydHMsZnVuY3Rpb24odCl7dmFyIHI9ZVthXVsxXVt0XTtyZXR1cm4gbyhyP3I6dCl9LGMsYy5leHBvcnRzLHQsZSxyLG4pfXJldHVybiByW2FdLmV4cG9ydHN9Zm9yKHZhciBpPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGE9MDthPG4ubGVuZ3RoO2ErKylvKG5bYV0pO3JldHVybiBvfSh7MTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiOjE3fV0sMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjE4fV0sMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUiOjE5fV0sNDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjIwfV0sNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6MjF9XSw2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjoyMn1dLDc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjIzfV0sODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIjoyNH1dLDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvciI6MjV9XSwxMDpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtyLl9fZXNNb2R1bGU9ITAsclsiZGVmYXVsdCJdPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9fSx7fV0sMTE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksaT1uKG8pO3JbImRlZmF1bHQiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbiYmKG4ud3JpdGFibGU9ITApLCgwLGlbImRlZmF1bHQiXSkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCl9LHsiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5IjoyfV0sMTI6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLGk9bihvKSxhPWUoIi4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciIpLHM9bihhKTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24gdShlLHQscil7bnVsbD09PWUmJihlPUZ1bmN0aW9uLnByb3RvdHlwZSk7dmFyIG49KDAsc1siZGVmYXVsdCJdKShlLHQpO2lmKHZvaWQgMD09PW4pe3ZhciBvPSgwLGlbImRlZmF1bHQiXSkoZSk7cmV0dXJuIG51bGw9PT1vP3ZvaWQgMDp1KG8sdCxyKX1pZigidmFsdWUiaW4gbilyZXR1cm4gbi52YWx1ZTt2YXIgYT1uLmdldDtpZih2b2lkIDAhPT1hKXJldHVybiBhLmNhbGwocil9fSx7Ii4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6NCwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NX1dLDEzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSxpPW4obyksYT1lKCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUiKSxzPW4oYSksdT1lKCIuLi9oZWxwZXJzL3R5cGVvZiIpLGw9bih1KTtyWyJkZWZhdWx0Il09ZnVuY3Rpb24oZSx0KXtpZigiZnVuY3Rpb24iIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiKygidW5kZWZpbmVkIj09dHlwZW9mIHQ/InVuZGVmaW5lZCI6KDAsbFsiZGVmYXVsdCJdKSh0KSkpO2UucHJvdG90eXBlPSgwLHNbImRlZmF1bHQiXSkodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihpWyJkZWZhdWx0Il0/KDAsaVsiZGVmYXVsdCJdKShlLHQpOmUuX19wcm90b19fPXQpfX0seyIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUiOjEsIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjcsIi4uL2hlbHBlcnMvdHlwZW9mIjoxNX1dLDE0OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2hlbHBlcnMvdHlwZW9mIiksaT1uKG8pO3JbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7cmV0dXJuIXR8fCJvYmplY3QiIT09KCJ1bmRlZmluZWQiPT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCxpWyJkZWZhdWx0Il0pKHQpKSYmImZ1bmN0aW9uIiE9dHlwZW9mIHQ/ZTp0fX0seyIuLi9oZWxwZXJzL3R5cGVvZiI6MTV9XSwxNTpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvciIpLGk9bihvKSxhPWUoIi4uL2NvcmUtanMvc3ltYm9sIikscz1uKGEpLHU9ImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmInN5bWJvbCI9PXR5cGVvZiBpWyJkZWZhdWx0Il0/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbImRlZmF1bHQiXT8ic3ltYm9sIjp0eXBlb2YgZX07clsiZGVmYXVsdCJdPSJmdW5jdGlvbiI9PXR5cGVvZiBzWyJkZWZhdWx0Il0mJiJzeW1ib2wiPT09dShpWyJkZWZhdWx0Il0pP2Z1bmN0aW9uKGUpe3JldHVybiJ1bmRlZmluZWQiPT10eXBlb2YgZT8idW5kZWZpbmVkIjp1KGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbImRlZmF1bHQiXT8ic3ltYm9sIjoidW5kZWZpbmVkIj09dHlwZW9mIGU/InVuZGVmaW5lZCI6dShlKX19LHsiLi4vY29yZS1qcy9zeW1ib2wiOjgsIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIjo5fV0sMTY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZSgicmVnZW5lcmF0b3ItcnVudGltZSIpfSx7InJlZ2VuZXJhdG9yLXJ1bnRpbWUiOjk4fV0sMTc6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlIik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jcmVhdGUoZSx0KX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzEsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiOjg1fV0sMTg6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Iik7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmRlZmluZVByb3BlcnR5KGUsdCxyKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzEsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOjg2fV0sMTk6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3QuZnJlZXplfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMxLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplIjo4N31dLDIwOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciIpO3ZhciBuPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3Q7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCl9fSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMxLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjo4OH1dLDIxOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5nZXRQcm90b3R5cGVPZn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiOjg5fV0sMjI6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LmtleXN9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzEsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIjo5MH1dLDIzOltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5zZXRQcm90b3R5cGVPZn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiOjkxfV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wiKSxlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIiksZSgiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIiksZSgiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLlN5bWJvbH0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMSwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6OTIsIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCI6OTQsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvciI6OTUsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlIjo5Nn1dLDI1OltmdW5jdGlvbihlLHQscil7ZSgiLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIiksZSgiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX3drcy1leHQiKS5mKCJpdGVyYXRvciIpfSx7Ii4uLy4uL21vZHVsZXMvX3drcy1leHQiOjgyLCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiOjkzLCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOjk3fV0sMjY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYSBmdW5jdGlvbiEiKTtyZXR1cm4gZX19LHt9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbigpe319LHt9XSwyODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhbiBvYmplY3QhIik7cmV0dXJuIGV9fSx7Ii4vX2lzLW9iamVjdCI6NDd9XSwyOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWlvYmplY3QiKSxvPWUoIi4vX3RvLWxlbmd0aCIpLGk9ZSgiLi9fdG8taW5kZXgiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixhKXt2YXIgcyx1PW4odCksbD1vKHUubGVuZ3RoKSxjPWkoYSxsKTtpZihlJiZyIT1yKXtmb3IoO2w+YzspaWYocz11W2MrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7bD5jO2MrKylpZigoZXx8YyBpbiB1KSYmdVtjXT09PXIpcmV0dXJuIGV8fGN8fDA7cmV0dXJuIWUmJi0xfX19LHsiLi9fdG8taW5kZXgiOjc0LCIuL190by1pb2JqZWN0Ijo3NiwiLi9fdG8tbGVuZ3RoIjo3N31dLDMwOltmdW5jdGlvbihlLHQscil7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuLmNhbGwoZSkuc2xpY2UoOCwtMSl9fSx7fV0sMzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246IjIuNC4wIn07Im51bWJlciI9PXR5cGVvZiBfX2UmJihfX2U9bil9LHt9XSwzMjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2EtZnVuY3Rpb24iKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4sbyl7cmV0dXJuIGUuY2FsbCh0LHIsbixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LHsiLi9fYS1mdW5jdGlvbiI6MjZ9XSwzMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PWUpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIitlKTtyZXR1cm4gZX19LHt9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZSgiLi9fZmFpbHMiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHsiLi9fZmFpbHMiOjM5fV0sMzU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX2dsb2JhbCIpLmRvY3VtZW50LGk9bihvKSYmbihvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQoZSk6e319fSx7Ii4vX2dsb2JhbCI6NDAsIi4vX2lzLW9iamVjdCI6NDd9XSwzNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0iY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mIi5zcGxpdCgiLCIpfSx7fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cyIpLG89ZSgiLi9fb2JqZWN0LWdvcHMiKSxpPWUoIi4vX29iamVjdC1waWUiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9bihlKSxyPW8uZjtpZihyKWZvcih2YXIgYSxzPXIoZSksdT1pLmYsbD0wO3MubGVuZ3RoPmw7KXUuY2FsbChlLGE9c1tsKytdKSYmdC5wdXNoKGEpO3JldHVybiB0fX0seyIuL19vYmplY3QtZ29wcyI6NjEsIi4vX29iamVjdC1rZXlzIjo2NCwiLi9fb2JqZWN0LXBpZSI6NjV9XSwzODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fY3R4IiksYT1lKCIuL19oaWRlIikscz0icHJvdG90eXBlIix1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgbCxjLGYscD1lJnUuRixkPWUmdS5HLGg9ZSZ1LlMseT1lJnUuUCxtPWUmdS5CLHY9ZSZ1LlcsXz1kP286b1t0XXx8KG9bdF09e30pLGI9X1tzXSxnPWQ/bjpoP25bdF06KG5bdF18fHt9KVtzXTtkJiYocj10KTtmb3IobCBpbiByKWM9IXAmJmcmJnZvaWQgMCE9PWdbbF0sYyYmbCBpbiBffHwoZj1jP2dbbF06cltsXSxfW2xdPWQmJiJmdW5jdGlvbiIhPXR5cGVvZiBnW2xdP3JbbF06bSYmYz9pKGYsbik6diYmZ1tsXT09Zj9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LHIpfXJldHVybiBuZXcgZSh0LHIsbil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdFtzXT1lW3NdLHR9KGYpOnkmJiJmdW5jdGlvbiI9PXR5cGVvZiBmP2koRnVuY3Rpb24uY2FsbCxmKTpmLHkmJigoXy52aXJ0dWFsfHwoXy52aXJ0dWFsPXt9KSlbbF09ZixlJnUuUiYmYiYmIWJbbF0mJmEoYixsLGYpKSl9O3UuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsdC5leHBvcnRzPXV9LHsiLi9fY29yZSI6MzEsIi4vX2N0eCI6MzIsIi4vX2dsb2JhbCI6NDAsIi4vX2hpZGUiOjQyfV0sMzk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKHQpe3JldHVybiEwfX19LHt9XSw0MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz0idW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oInJldHVybiB0aGlzIikoKTsibnVtYmVyIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0se31dLDQxOltmdW5jdGlvbihlLHQscil7dmFyIG49e30uaGFzT3duUHJvcGVydHk7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4uY2FsbChlLHQpfX0se31dLDQyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LWRwIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIik7dC5leHBvcnRzPWUoIi4vX2Rlc2NyaXB0b3JzIik/ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBuLmYoZSx0LG8oMSxyKSl9OmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZVt0XT1yLGV9fSx7Ii4vX2Rlc2NyaXB0b3JzIjozNCwiLi9fb2JqZWN0LWRwIjo1NiwiLi9fcHJvcGVydHktZGVzYyI6Njd9XSw0MzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKCIuL19nbG9iYWwiKS5kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fSx7Ii4vX2dsb2JhbCI6NDB9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZSgiLi9fZGVzY3JpcHRvcnMiKSYmIWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUoIi4vX2RvbS1jcmVhdGUiKSgiZGl2IiksImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHsiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19kb20tY3JlYXRlIjozNSwiLi9fZmFpbHMiOjM5fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9T2JqZWN0KCJ6IikucHJvcGVydHlJc0VudW1lcmFibGUoMCk/T2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiJTdHJpbmciPT1uKGUpP2Uuc3BsaXQoIiIpOk9iamVjdChlKX19LHsiLi9fY29mIjozMH1dLDQ2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fY29mIik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiJBcnJheSI9PW4oZSl9fSx7Ii4vX2NvZiI6MzB9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4ib2JqZWN0Ij09dHlwZW9mIGU/bnVsbCE9PWU6ImZ1bmN0aW9uIj09dHlwZW9mIGV9fSx7fV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpLG89ZSgiLi9fcHJvcGVydHktZGVzYyIpLGk9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxhPXt9O2UoIi4vX2hpZGUiKShhLGUoIi4vX3drcyIpKCJpdGVyYXRvciIpLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSx0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UucHJvdG90eXBlPW4oYSx7bmV4dDpvKDEscil9KSxpKGUsdCsiIEl0ZXJhdG9yIil9fSx7Ii4vX2hpZGUiOjQyLCIuL19vYmplY3QtY3JlYXRlIjo1NSwiLi9fcHJvcGVydHktZGVzYyI6NjcsIi4vX3NldC10by1zdHJpbmctdGFnIjo3MCwiLi9fd2tzIjo4M31dLDQ5OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX2xpYnJhcnkiKSxvPWUoIi4vX2V4cG9ydCIpLGk9ZSgiLi9fcmVkZWZpbmUiKSxhPWUoIi4vX2hpZGUiKSxzPWUoIi4vX2hhcyIpLHU9ZSgiLi9faXRlcmF0b3JzIiksbD1lKCIuL19pdGVyLWNyZWF0ZSIpLGM9ZSgiLi9fc2V0LXRvLXN0cmluZy10YWciKSxmPWUoIi4vX29iamVjdC1ncG8iKSxwPWUoIi4vX3drcyIpKCJpdGVyYXRvciIpLGQ9IShbXS5rZXlzJiYibmV4dCJpbltdLmtleXMoKSksaD0iQEBpdGVyYXRvciIseT0ia2V5cyIsbT0idmFsdWVzIix2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixfLGIsZyxFKXtsKHIsdCxfKTt2YXIgaix3LE8sTT1mdW5jdGlvbihlKXtpZighZCYmZSBpbiBSKXJldHVybiBSW2VdO3N3aXRjaChlKXtjYXNlIHk6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9O2Nhc2UgbTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fSx4PXQrIiBJdGVyYXRvciIsUD1iPT1tLGs9ITEsUj1lLnByb3RvdHlwZSxTPVJbcF18fFJbaF18fGImJlJbYl0sQT1TfHxNKGIpLFQ9Yj9QP00oImVudHJpZXMiKTpBOnZvaWQgMCxOPSJBcnJheSI9PXQ/Ui5lbnRyaWVzfHxTOlM7aWYoTiYmKE89ZihOLmNhbGwobmV3IGUpKSxPIT09T2JqZWN0LnByb3RvdHlwZSYmKGMoTyx4LCEwKSxufHxzKE8scCl8fGEoTyxwLHYpKSksUCYmUyYmUy5uYW1lIT09bSYmKGs9ITAsQT1mdW5jdGlvbigpe3JldHVybiBTLmNhbGwodGhpcyl9KSxuJiYhRXx8IWQmJiFrJiZSW3BdfHxhKFIscCxBKSx1W3RdPUEsdVt4XT12LGIpaWYoaj17dmFsdWVzOlA/QTpNKG0pLGtleXM6Zz9BOk0oeSksZW50cmllczpUfSxFKWZvcih3IGluIGopdyBpbiBSfHxpKFIsdyxqW3ddKTtlbHNlIG8oby5QK28uRiooZHx8ayksdCxqKTtyZXR1cm4gan19LHsiLi9fZXhwb3J0IjozOCwiLi9faGFzIjo0MSwiLi9faGlkZSI6NDIsIi4vX2l0ZXItY3JlYXRlIjo0OCwiLi9faXRlcmF0b3JzIjo1MSwiLi9fbGlicmFyeSI6NTMsIi4vX29iamVjdC1ncG8iOjYyLCIuL19yZWRlZmluZSI6NjgsIi4vX3NldC10by1zdHJpbmctdGFnIjo3MCwiLi9fd2tzIjo4M31dLDUwOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0se31dLDUxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXt9fSx7fV0sNTI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cyIpLG89ZSgiLi9fdG8taW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixpPW8oZSksYT1uKGkpLHM9YS5sZW5ndGgsdT0wO3M+dTspaWYoaVtyPWFbdSsrXV09PT10KXJldHVybiByfX0seyIuL19vYmplY3Qta2V5cyI6NjQsIi4vX3RvLWlvYmplY3QiOjc2fV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ITB9LHt9XSw1NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3VpZCIpKCJtZXRhIiksbz1lKCIuL19pcy1vYmplY3QiKSxpPWUoIi4vX2hhcyIpLGE9ZSgiLi9fb2JqZWN0LWRwIikuZixzPTAsdT1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxsPSFlKCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIHUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSxjPWZ1bmN0aW9uKGUpe2EoZSxuLHt2YWx1ZTp7aToiTyIrICsrcyx3Ont9fX0pfSxmPWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSkpcmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlP2U6KCJzdHJpbmciPT10eXBlb2YgZT8iUyI6IlAiKStlO2lmKCFpKGUsbikpe2lmKCF1KGUpKXJldHVybiJGIjtpZighdClyZXR1cm4iRSI7YyhlKX1yZXR1cm4gZVtuXS5pfSxwPWZ1bmN0aW9uKGUsdCl7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuITA7aWYoIXQpcmV0dXJuITE7YyhlKX1yZXR1cm4gZVtuXS53fSxkPWZ1bmN0aW9uKGUpe3JldHVybiBsJiZoLk5FRUQmJnUoZSkmJiFpKGUsbikmJmMoZSksZX0saD10LmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpmLGdldFdlYWs6cCxvbkZyZWV6ZTpkfX0seyIuL19mYWlscyI6MzksIi4vX2hhcyI6NDEsIi4vX2lzLW9iamVjdCI6NDcsIi4vX29iamVjdC1kcCI6NTYsIi4vX3VpZCI6ODB9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2FuLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWRwcyIpLGk9ZSgiLi9fZW51bS1idWcta2V5cyIpLGE9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpLHM9ZnVuY3Rpb24oKXt9LHU9InByb3RvdHlwZSIsbD1mdW5jdGlvbigpe3ZhciB0LHI9ZSgiLi9fZG9tLWNyZWF0ZSIpKCJpZnJhbWUiKSxuPWkubGVuZ3RoLG89Ij4iO2ZvcihyLnN0eWxlLmRpc3BsYXk9Im5vbmUiLGUoIi4vX2h0bWwiKS5hcHBlbmRDaGlsZChyKSxyLnNyYz0iamF2YXNjcmlwdDoiLHQ9ci5jb250ZW50V2luZG93LmRvY3VtZW50LHQub3BlbigpLHQud3JpdGUoIjxzY3JpcHQ+ZG9jdW1lbnQuRj1PYmplY3Q8L3NjcmlwdCIrbyksdC5jbG9zZSgpLGw9dC5GO24tLTspZGVsZXRlIGxbdV1baVtuXV07cmV0dXJuIGwoKX07dC5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhzW3VdPW4oZSkscj1uZXcgcyxzW3VdPW51bGwsclthXT1lKTpyPWwoKSx2b2lkIDA9PT10P3I6byhyLHQpfX0seyIuL19hbi1vYmplY3QiOjI4LCIuL19kb20tY3JlYXRlIjozNSwiLi9fZW51bS1idWcta2V5cyI6MzYsIi4vX2h0bWwiOjQzLCIuL19vYmplY3QtZHBzIjo1NywiLi9fc2hhcmVkLWtleSI6NzF9XSw1NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2FuLW9iamVjdCIpLG89ZSgiLi9faWU4LWRvbS1kZWZpbmUiKSxpPWUoIi4vX3RvLXByaW1pdGl2ZSIpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O3IuZj1lKCIuL19kZXNjcmlwdG9ycyIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7aWYobihlKSx0PWkodCwhMCksbihyKSxvKXRyeXtyZXR1cm4gYShlLHQscil9Y2F0Y2gocyl7fWlmKCJnZXQiaW4gcnx8InNldCJpbiByKXRocm93IFR5cGVFcnJvcigiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhIik7cmV0dXJuInZhbHVlImluIHImJihlW3RdPXIudmFsdWUpLGV9fSx7Ii4vX2FuLW9iamVjdCI6MjgsIi4vX2Rlc2NyaXB0b3JzIjozNCwiLi9faWU4LWRvbS1kZWZpbmUiOjQ0LCIuL190by1wcmltaXRpdmUiOjc5fV0sNTc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKSxvPWUoIi4vX2FuLW9iamVjdCIpLGk9ZSgiLi9fb2JqZWN0LWtleXMiKTt0LmV4cG9ydHM9ZSgiLi9fZGVzY3JpcHRvcnMiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe28oZSk7Zm9yKHZhciByLGE9aSh0KSxzPWEubGVuZ3RoLHU9MDtzPnU7KW4uZihlLHI9YVt1KytdLHRbcl0pO3JldHVybiBlfX0seyIuL19hbi1vYmplY3QiOjI4LCIuL19kZXNjcmlwdG9ycyI6MzQsIi4vX29iamVjdC1kcCI6NTYsIi4vX29iamVjdC1rZXlzIjo2NH1dLDU4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fb2JqZWN0LXBpZSIpLG89ZSgiLi9fcHJvcGVydHktZGVzYyIpLGk9ZSgiLi9fdG8taW9iamVjdCIpLGE9ZSgiLi9fdG8tcHJpbWl0aXZlIikscz1lKCIuL19oYXMiKSx1PWUoIi4vX2llOC1kb20tZGVmaW5lIiksbD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3IuZj1lKCIuL19kZXNjcmlwdG9ycyIpP2w6ZnVuY3Rpb24oZSx0KXtpZihlPWkoZSksdD1hKHQsITApLHUpdHJ5e3JldHVybiBsKGUsdCl9Y2F0Y2gocil7fWlmKHMoZSx0KSlyZXR1cm4gbyghbi5mLmNhbGwoZSx0KSxlW3RdKX19LHsiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19oYXMiOjQxLCIuL19pZTgtZG9tLWRlZmluZSI6NDQsIi4vX29iamVjdC1waWUiOjY1LCIuL19wcm9wZXJ0eS1kZXNjIjo2NywiLi9fdG8taW9iamVjdCI6NzYsIi4vX3RvLXByaW1pdGl2ZSI6Nzl9XSw1OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWlvYmplY3QiKSxvPWUoIi4vX29iamVjdC1nb3BuIikuZixpPXt9LnRvU3RyaW5nLGE9Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gbyhlKX1jYXRjaCh0KXtyZXR1cm4gYS5zbGljZSgpfX07dC5leHBvcnRzLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIGEmJiJbb2JqZWN0IFdpbmRvd10iPT1pLmNhbGwoZSk/cyhlKTpvKG4oZSkpfX0seyIuL19vYmplY3QtZ29wbiI6NjAsIi4vX3RvLWlvYmplY3QiOjc2fV0sNjA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCIpLG89ZSgiLi9fZW51bS1idWcta2V5cyIpLmNvbmNhdCgibGVuZ3RoIiwicHJvdG90eXBlIik7ci5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0seyIuL19lbnVtLWJ1Zy1rZXlzIjozNiwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjYzfV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30se31dLDYyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faGFzIiksbz1lKCIuL190by1vYmplY3QiKSxpPWUoIi4vX3NoYXJlZC1rZXkiKSgiSUVfUFJPVE8iKSxhPU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24oZSl7cmV0dXJuIGU9byhlKSxuKGUsaSk/ZVtpXToiZnVuY3Rpb24iPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSx7Ii4vX2hhcyI6NDEsIi4vX3NoYXJlZC1rZXkiOjcxLCIuL190by1vYmplY3QiOjc4fV0sNjM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oYXMiKSxvPWUoIi4vX3RvLWlvYmplY3QiKSxpPWUoIi4vX2FycmF5LWluY2x1ZGVzIikoITEpLGE9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciByLHM9byhlKSx1PTAsbD1bXTtmb3IociBpbiBzKXIhPWEmJm4ocyxyKSYmbC5wdXNoKHIpO2Zvcig7dC5sZW5ndGg+dTspbihzLHI9dFt1KytdKSYmKH5pKGwscil8fGwucHVzaChyKSk7cmV0dXJuIGx9fSx7Ii4vX2FycmF5LWluY2x1ZGVzIjoyOSwiLi9faGFzIjo0MSwiLi9fc2hhcmVkLWtleSI6NzEsIi4vX3RvLWlvYmplY3QiOjc2fV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCIpLG89ZSgiLi9fZW51bS1idWcta2V5cyIpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LHsiLi9fZW51bS1idWcta2V5cyI6MzYsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjo2M31dLDY1OltmdW5jdGlvbihlLHQscil7ci5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlfSx7fV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKSxvPWUoIi4vX2NvcmUiKSxpPWUoIi4vX2ZhaWxzIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9KG8uT2JqZWN0fHx7fSlbZV18fE9iamVjdFtlXSxhPXt9O2FbZV09dChyKSxuKG4uUytuLkYqaShmdW5jdGlvbigpe3IoMSl9KSwiT2JqZWN0IixhKX19LHsiLi9fY29yZSI6MzEsIi4vX2V4cG9ydCI6MzgsIi4vX2ZhaWxzIjozOX1dLDY3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue2VudW1lcmFibGU6ISgxJmUpLGNvbmZpZ3VyYWJsZTohKDImZSksd3JpdGFibGU6ISg0JmUpLHZhbHVlOnR9fX0se31dLDY4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoIi4vX2hpZGUiKX0seyIuL19oaWRlIjo0Mn1dLDY5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iiksbz1lKCIuL19hbi1vYmplY3QiKSxpPWZ1bmN0aW9uKGUsdCl7aWYobyhlKSwhbih0KSYmbnVsbCE9PXQpdGhyb3cgVHlwZUVycm9yKHQrIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSEiKX07dC5leHBvcnRzPXtzZXQ6T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoIl9fcHJvdG9fXyJpbnt9P2Z1bmN0aW9uKHQscixuKXt0cnl7bj1lKCIuL19jdHgiKShGdW5jdGlvbi5jYWxsLGUoIi4vX29iamVjdC1nb3BkIikuZihPYmplY3QucHJvdG90eXBlLCJfX3Byb3RvX18iKS5zZXQsMiksbih0LFtdKSxyPSEodCBpbnN0YW5jZW9mIEFycmF5KX1jYXRjaChvKXtyPSEwfXJldHVybiBmdW5jdGlvbihlLHQpe3JldHVybiBpKGUsdCkscj9lLl9fcHJvdG9fXz10Om4oZSx0KSxlfX0oe30sITEpOnZvaWQgMCksY2hlY2s6aX19LHsiLi9fYW4tb2JqZWN0IjoyOCwiLi9fY3R4IjozMiwiLi9faXMtb2JqZWN0Ijo0NywiLi9fb2JqZWN0LWdvcGQiOjU4fV0sNzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKS5mLG89ZSgiLi9faGFzIiksaT1lKCIuL193a3MiKSgidG9TdHJpbmdUYWciKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UmJiFvKGU9cj9lOmUucHJvdG90eXBlLGkpJiZuKGUsaSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LHsiLi9faGFzIjo0MSwiLi9fb2JqZWN0LWRwIjo1NiwiLi9fd2tzIjo4M31dLDcxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fc2hhcmVkIikoImtleXMiKSxvPWUoIi4vX3VpZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09byhlKSl9fSx7Ii4vX3NoYXJlZCI6NzIsIi4vX3VpZCI6ODB9XSw3MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89Il9fY29yZS1qc19zaGFyZWRfXyIsaT1uW29dfHwobltvXT17fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpW2VdfHwoaVtlXT17fSl9fSx7Ii4vX2dsb2JhbCI6NDB9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWludGVnZXIiKSxvPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscil7dmFyIGksYSxzPVN0cmluZyhvKHQpKSx1PW4ociksbD1zLmxlbmd0aDtyZXR1cm4gdTwwfHx1Pj1sP2U/IiI6dm9pZCAwOihpPXMuY2hhckNvZGVBdCh1KSxpPDU1Mjk2fHxpPjU2MzE5fHx1KzE9PT1sfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/ZT9zLmNoYXJBdCh1KTppOmU/cy5zbGljZSh1LHUrMik6KGktNTUyOTY8PDEwKSsoYS01NjMyMCkrNjU1MzYpfX19LHsiLi9fZGVmaW5lZCI6MzMsIi4vX3RvLWludGVnZXIiOjc1fV0sNzQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pbnRlZ2VyIiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPW4oZSksZTwwP28oZSt0LDApOmkoZSx0KX19LHsiLi9fdG8taW50ZWdlciI6NzV9XSw3NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPU1hdGguY2VpbCxvPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bzpuKShlKX19LHt9XSw3NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lvYmplY3QiKSxvPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4obyhlKSl9fSx7Ii4vX2RlZmluZWQiOjMzLCIuL19pb2JqZWN0Ijo0NX1dLDc3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW50ZWdlciIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/byhuKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSx7Ii4vX3RvLWludGVnZXIiOjc1fV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19kZWZpbmVkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QobihlKSl9fSx7Ii4vX2RlZmluZWQiOjMzfV0sNzk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixvO2lmKHQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKCF0JiYiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO3Rocm93IFR5cGVFcnJvcigiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlIil9fSx7Ii4vX2lzLW9iamVjdCI6NDd9XSw4MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTAsbz1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4iU3ltYm9sKCIuY29uY2F0KHZvaWQgMD09PWU/IiI6ZSwiKV8iLCgrK24rbykudG9TdHJpbmcoMzYpKX19LHt9XSw4MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fbGlicmFyeSIpLGE9ZSgiLi9fd2tzLWV4dCIpLHM9ZSgiLi9fb2JqZWN0LWRwIikuZjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9by5TeW1ib2x8fChvLlN5bWJvbD1pP3t9Om4uU3ltYm9sfHx7fSk7Il8iPT1lLmNoYXJBdCgwKXx8ZSBpbiB0fHxzKHQsZSx7dmFsdWU6YS5mKGUpfSl9fSx7Ii4vX2NvcmUiOjMxLCIuL19nbG9iYWwiOjQwLCIuL19saWJyYXJ5Ijo1MywiLi9fb2JqZWN0LWRwIjo1NiwiLi9fd2tzLWV4dCI6ODJ9XSw4MjpbZnVuY3Rpb24oZSx0LHIpe3IuZj1lKCIuL193a3MiKX0seyIuL193a3MiOjgzfV0sODM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19zaGFyZWQiKSgid2tzIiksbz1lKCIuL191aWQiKSxpPWUoIi4vX2dsb2JhbCIpLlN5bWJvbCxhPSJmdW5jdGlvbiI9PXR5cGVvZiBpLHM9dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1hJiZpW2VdfHwoYT9pOm8pKCJTeW1ib2wuIitlKSl9O3Muc3RvcmU9bn0seyIuL19nbG9iYWwiOjQwLCIuL19zaGFyZWQiOjcyLCIuL191aWQiOjgwfV0sODQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fYWRkLXRvLXVuc2NvcGFibGVzIiksbz1lKCIuL19pdGVyLXN0ZXAiKSxpPWUoIi4vX2l0ZXJhdG9ycyIpLGE9ZSgiLi9fdG8taW9iamVjdCIpO3QuZXhwb3J0cz1lKCIuL19pdGVyLWRlZmluZSIpKEFycmF5LCJBcnJheSIsZnVuY3Rpb24oZSx0KXt0aGlzLl90PWEoZSksdGhpcy5faT0wLHRoaXMuX2s9dH0sZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90LHQ9dGhpcy5fayxyPXRoaXMuX2krKztyZXR1cm4hZXx8cj49ZS5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLG8oMSkpOiJrZXlzIj09dD9vKDAscik6InZhbHVlcyI9PXQ/bygwLGVbcl0pOm8oMCxbcixlW3JdXSl9LCJ2YWx1ZXMiKSxpLkFyZ3VtZW50cz1pLkFycmF5LG4oImtleXMiKSxuKCJ2YWx1ZXMiKSxuKCJlbnRyaWVzIil9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoyNywiLi9faXRlci1kZWZpbmUiOjQ5LCIuL19pdGVyLXN0ZXAiOjUwLCIuL19pdGVyYXRvcnMiOjUxLCIuL190by1pb2JqZWN0Ijo3Nn1dLDg1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMsIk9iamVjdCIse2NyZWF0ZTplKCIuL19vYmplY3QtY3JlYXRlIil9KX0seyIuL19leHBvcnQiOjM4LCIuL19vYmplY3QtY3JlYXRlIjo1NX1dLDg2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZXhwb3J0Iik7bihuLlMrbi5GKiFlKCIuL19kZXNjcmlwdG9ycyIpLCJPYmplY3QiLHtkZWZpbmVQcm9wZXJ0eTplKCIuL19vYmplY3QtZHAiKS5mfSl9LHsiLi9fZGVzY3JpcHRvcnMiOjM0LCIuL19leHBvcnQiOjM4LCIuL19vYmplY3QtZHAiOjU2fV0sODc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX21ldGEiKS5vbkZyZWV6ZTtlKCIuL19vYmplY3Qtc2FwIikoImZyZWV6ZSIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlJiZuKHQpP2Uobyh0KSk6dH19KX0seyIuL19pcy1vYmplY3QiOjQ3LCIuL19tZXRhIjo1NCwiLi9fb2JqZWN0LXNhcCI6NjZ9XSw4ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWlvYmplY3QiKSxvPWUoIi4vX29iamVjdC1nb3BkIikuZjtlKCIuL19vYmplY3Qtc2FwIikoImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gbyhuKGUpLHQpfX0pfSx7Ii4vX29iamVjdC1nb3BkIjo1OCwiLi9fb2JqZWN0LXNhcCI6NjYsIi4vX3RvLWlvYmplY3QiOjc2fV0sODk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1vYmplY3QiKSxvPWUoIi4vX29iamVjdC1ncG8iKTtlKCIuL19vYmplY3Qtc2FwIikoImdldFByb3RvdHlwZU9mIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbyhuKGUpKX19KX0seyIuL19vYmplY3QtZ3BvIjo2MiwiLi9fb2JqZWN0LXNhcCI6NjYsIi4vX3RvLW9iamVjdCI6Nzh9XSw5MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWtleXMiKTtlKCIuL19vYmplY3Qtc2FwIikoImtleXMiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7Ii4vX29iamVjdC1rZXlzIjo2NCwiLi9fb2JqZWN0LXNhcCI6NjYsIi4vX3RvLW9iamVjdCI6Nzh9XSw5MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2V4cG9ydCIpO24obi5TLCJPYmplY3QiLHtzZXRQcm90b3R5cGVPZjplKCIuL19zZXQtcHJvdG8iKS5zZXR9KX0seyIuL19leHBvcnQiOjM4LCIuL19zZXQtcHJvdG8iOjY5fV0sOTI6W2Z1bmN0aW9uKGUsdCxyKXt9LHt9XSw5MzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19zdHJpbmctYXQiKSghMCk7ZSgiLi9faXRlci1kZWZpbmUiKShTdHJpbmcsIlN0cmluZyIsZnVuY3Rpb24oZSl7dGhpcy5fdD1TdHJpbmcoZSksdGhpcy5faT0wfSxmdW5jdGlvbigpe3ZhciBlLHQ9dGhpcy5fdCxyPXRoaXMuX2k7cmV0dXJuIHI+PXQubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KGU9bih0LHIpLHRoaXMuX2krPWUubGVuZ3RoLHt2YWx1ZTplLGRvbmU6ITF9KX0pfSx7Ii4vX2l0ZXItZGVmaW5lIjo0OSwiLi9fc3RyaW5nLWF0Ijo3M31dLDk0OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO3ZhciBuPWUoIi4vX2dsb2JhbCIpLG89ZSgiLi9faGFzIiksaT1lKCIuL19kZXNjcmlwdG9ycyIpLGE9ZSgiLi9fZXhwb3J0Iikscz1lKCIuL19yZWRlZmluZSIpLHU9ZSgiLi9fbWV0YSIpLktFWSxsPWUoIi4vX2ZhaWxzIiksYz1lKCIuL19zaGFyZWQiKSxmPWUoIi4vX3NldC10by1zdHJpbmctdGFnIikscD1lKCIuL191aWQiKSxkPWUoIi4vX3drcyIpLGg9ZSgiLi9fd2tzLWV4dCIpLHk9ZSgiLi9fd2tzLWRlZmluZSIpLG09ZSgiLi9fa2V5b2YiKSx2PWUoIi4vX2VudW0ta2V5cyIpLF89ZSgiLi9faXMtYXJyYXkiKSxiPWUoIi4vX2FuLW9iamVjdCIpLGc9ZSgiLi9fdG8taW9iamVjdCIpLEU9ZSgiLi9fdG8tcHJpbWl0aXZlIiksaj1lKCIuL19wcm9wZXJ0eS1kZXNjIiksdz1lKCIuL19vYmplY3QtY3JlYXRlIiksTz1lKCIuL19vYmplY3QtZ29wbi1leHQiKSxNPWUoIi4vX29iamVjdC1nb3BkIikseD1lKCIuL19vYmplY3QtZHAiKSxQPWUoIi4vX29iamVjdC1rZXlzIiksaz1NLmYsUj14LmYsUz1PLmYsQT1uLlN5bWJvbCxUPW4uSlNPTixOPVQmJlQuc3RyaW5naWZ5LEk9InByb3RvdHlwZSIsVT1kKCJfaGlkZGVuIiksQz1kKCJ0b1ByaW1pdGl2ZSIpLEw9e30ucHJvcGVydHlJc0VudW1lcmFibGUsRj1jKCJzeW1ib2wtcmVnaXN0cnkiKSxCPWMoInN5bWJvbHMiKSxEPWMoIm9wLXN5bWJvbHMiKSxHPU9iamVjdFtJXSxLPSJmdW5jdGlvbiI9PXR5cGVvZiBBLFk9bi5RT2JqZWN0LHE9IVl8fCFZW0ldfHwhWVtJXS5maW5kQ2hpbGQsej1pJiZsKGZ1bmN0aW9uKCl7cmV0dXJuIDchPXcoUih7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiBSKHRoaXMsImEiLHt2YWx1ZTo3fSkuYX19KSkuYX0pP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1rKEcsdCk7biYmZGVsZXRlIEdbdF0sUihlLHQsciksbiYmZSE9PUcmJlIoRyx0LG4pfTpSLFc9ZnVuY3Rpb24oZSl7dmFyIHQ9QltlXT13KEFbSV0pO3JldHVybiB0Ll9rPWUsdH0sSD1LJiYic3ltYm9sIj09dHlwZW9mIEEuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIEF9LFY9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlPT09RyYmVihELHQsciksYihlKSx0PUUodCwhMCksYihyKSxvKEIsdCk/KHIuZW51bWVyYWJsZT8obyhlLFUpJiZlW1VdW3RdJiYoZVtVXVt0XT0hMSkscj13KHIse2VudW1lcmFibGU6aigwLCExKX0pKToobyhlLFUpfHxSKGUsVSxqKDEse30pKSxlW1VdW3RdPSEwKSx6KGUsdCxyKSk6UihlLHQscil9LEo9ZnVuY3Rpb24oZSx0KXtiKGUpO2Zvcih2YXIgcixuPXYodD1nKHQpKSxvPTAsaT1uLmxlbmd0aDtpPm87KVYoZSxyPW5bbysrXSx0W3JdKTtyZXR1cm4gZX0sJD1mdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3coZSk6Sih3KGUpLHQpfSxYPWZ1bmN0aW9uKGUpe3ZhciB0PUwuY2FsbCh0aGlzLGU9RShlLCEwKSk7cmV0dXJuISh0aGlzPT09RyYmbyhCLGUpJiYhbyhELGUpKSYmKCEodHx8IW8odGhpcyxlKXx8IW8oQixlKXx8byh0aGlzLFUpJiZ0aGlzW1VdW2VdKXx8dCl9LFE9ZnVuY3Rpb24oZSx0KXtpZihlPWcoZSksdD1FKHQsITApLGUhPT1HfHwhbyhCLHQpfHxvKEQsdCkpe3ZhciByPWsoZSx0KTtyZXR1cm4hcnx8IW8oQix0KXx8byhlLFUpJiZlW1VdW3RdfHwoci5lbnVtZXJhYmxlPSEwKSxyfX0sWj1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1TKGcoZSkpLG49W10saT0wO3IubGVuZ3RoPmk7KW8oQix0PXJbaSsrXSl8fHQ9PVV8fHQ9PXV8fG4ucHVzaCh0KTtyZXR1cm4gbn0sZWU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9ZT09PUcsbj1TKHI/RDpnKGUpKSxpPVtdLGE9MDtuLmxlbmd0aD5hOykhbyhCLHQ9blthKytdKXx8ciYmIW8oRyx0KXx8aS5wdXNoKEJbdF0pO3JldHVybiBpfTtLfHwoQT1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiBBKXRocm93IFR5cGVFcnJvcigiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yISIpO3ZhciBlPXAoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHQ9ZnVuY3Rpb24ocil7dGhpcz09PUcmJnQuY2FsbChELHIpLG8odGhpcyxVKSYmbyh0aGlzW1VdLGUpJiYodGhpc1tVXVtlXT0hMSkseih0aGlzLGUsaigxLHIpKX07cmV0dXJuIGkmJnEmJnooRyxlLHtjb25maWd1cmFibGU6ITAsc2V0OnR9KSxXKGUpfSxzKEFbSV0sInRvU3RyaW5nIixmdW5jdGlvbigpe3JldHVybiB0aGlzLl9rfSksTS5mPVEseC5mPVYsZSgiLi9fb2JqZWN0LWdvcG4iKS5mPU8uZj1aLGUoIi4vX29iamVjdC1waWUiKS5mPVgsZSgiLi9fb2JqZWN0LWdvcHMiKS5mPWVlLGkmJiFlKCIuL19saWJyYXJ5IikmJnMoRywicHJvcGVydHlJc0VudW1lcmFibGUiLFgsITApLGguZj1mdW5jdGlvbihlKXtyZXR1cm4gVyhkKGUpKX0pLGEoYS5HK2EuVythLkYqIUsse1N5bWJvbDpBfSk7Zm9yKHZhciB0ZT0iaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMiLnNwbGl0KCIsIikscmU9MDt0ZS5sZW5ndGg+cmU7KWQodGVbcmUrK10pO2Zvcih2YXIgdGU9UChkLnN0b3JlKSxyZT0wO3RlLmxlbmd0aD5yZTspeSh0ZVtyZSsrXSk7YShhLlMrYS5GKiFLLCJTeW1ib2wiLHsiZm9yIjpmdW5jdGlvbihlKXtyZXR1cm4gbyhGLGUrPSIiKT9GW2VdOkZbZV09QShlKX0sa2V5Rm9yOmZ1bmN0aW9uKGUpe2lmKEgoZSkpcmV0dXJuIG0oRixlKTt0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIHN5bWJvbCEiKX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7cT0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7cT0hMX19KSxhKGEuUythLkYqIUssIk9iamVjdCIse2NyZWF0ZTokLGRlZmluZVByb3BlcnR5OlYsZGVmaW5lUHJvcGVydGllczpKLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpRLGdldE93blByb3BlcnR5TmFtZXM6WixnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZWV9KSxUJiZhKGEuUythLkYqKCFLfHxsKGZ1bmN0aW9uKCl7dmFyIGU9QSgpO3JldHVybiJbbnVsbF0iIT1OKFtlXSl8fCJ7fSIhPU4oe2E6ZX0pfHwie30iIT1OKE9iamVjdChlKSl9KSksIkpTT04iLHtzdHJpbmdpZnk6ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSYmIUgoZSkpe2Zvcih2YXIgdCxyLG49W2VdLG89MTthcmd1bWVudHMubGVuZ3RoPm87KW4ucHVzaChhcmd1bWVudHNbbysrXSk7cmV0dXJuIHQ9blsxXSwiZnVuY3Rpb24iPT10eXBlb2YgdCYmKHI9dCksIXImJl8odCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYociYmKHQ9ci5jYWxsKHRoaXMsZSx0KSksIUgodCkpcmV0dXJuIHR9KSxuWzFdPXQsTi5hcHBseShULG4pfX19KSxBW0ldW0NdfHxlKCIuL19oaWRlIikoQVtJXSxDLEFbSV0udmFsdWVPZiksZihBLCJTeW1ib2wiKSxmKE1hdGgsIk1hdGgiLCEwKSxmKG4uSlNPTiwiSlNPTiIsITApfSx7Ii4vX2FuLW9iamVjdCI6MjgsIi4vX2Rlc2NyaXB0b3JzIjozNCwiLi9fZW51bS1rZXlzIjozNywiLi9fZXhwb3J0IjozOCwiLi9fZmFpbHMiOjM5LCIuL19nbG9iYWwiOjQwLCIuL19oYXMiOjQxLCIuL19oaWRlIjo0MiwiLi9faXMtYXJyYXkiOjQ2LCIuL19rZXlvZiI6NTIsIi4vX2xpYnJhcnkiOjUzLCIuL19tZXRhIjo1NCwiLi9fb2JqZWN0LWNyZWF0ZSI6NTUsIi4vX29iamVjdC1kcCI6NTYsIi4vX29iamVjdC1nb3BkIjo1OCwiLi9fb2JqZWN0LWdvcG4iOjYwLCIuL19vYmplY3QtZ29wbi1leHQiOjU5LCIuL19vYmplY3QtZ29wcyI6NjEsIi4vX29iamVjdC1rZXlzIjo2NCwiLi9fb2JqZWN0LXBpZSI6NjUsIi4vX3Byb3BlcnR5LWRlc2MiOjY3LCIuL19yZWRlZmluZSI6NjgsIi4vX3NldC10by1zdHJpbmctdGFnIjo3MCwiLi9fc2hhcmVkIjo3MiwiLi9fdG8taW9iamVjdCI6NzYsIi4vX3RvLXByaW1pdGl2ZSI6NzksIi4vX3VpZCI6ODAsIi4vX3drcyI6ODMsIi4vX3drcy1kZWZpbmUiOjgxLCIuL193a3MtZXh0Ijo4Mn1dLDk1OltmdW5jdGlvbihlLHQscil7ZSgiLi9fd2tzLWRlZmluZSIpKCJhc3luY0l0ZXJhdG9yIil9LHsiLi9fd2tzLWRlZmluZSI6ODF9XSw5NjpbZnVuY3Rpb24oZSx0LHIpe2UoIi4vX3drcy1kZWZpbmUiKSgib2JzZXJ2YWJsZSIpfSx7Ii4vX3drcy1kZWZpbmUiOjgxfV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuL2VzNi5hcnJheS5pdGVyYXRvciIpO2Zvcih2YXIgbj1lKCIuL19nbG9iYWwiKSxvPWUoIi4vX2hpZGUiKSxpPWUoIi4vX2l0ZXJhdG9ycyIpLGE9ZSgiLi9fd2tzIikoInRvU3RyaW5nVGFnIikscz1bIk5vZGVMaXN0IiwiRE9NVG9rZW5MaXN0IiwiTWVkaWFMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJDU1NSdWxlTGlzdCJdLHU9MDt1PDU7dSsrKXt2YXIgbD1zW3VdLGM9bltsXSxmPWMmJmMucHJvdG90eXBlO2YmJiFmW2FdJiZvKGYsYSxsKSxpW2xdPWkuQXJyYXl9fSx7Ii4vX2dsb2JhbCI6NDAsIi4vX2hpZGUiOjQyLCIuL19pdGVyYXRvcnMiOjUxLCIuL193a3MiOjgzLCIuL2VzNi5hcnJheS5pdGVyYXRvciI6ODR9XSw5ODpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihyKXt2YXIgbj0ib2JqZWN0Ij09dHlwZW9mIHI/cjoib2JqZWN0Ij09dHlwZW9mIHdpbmRvdz93aW5kb3c6Im9iamVjdCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyxvPW4ucmVnZW5lcmF0b3JSdW50aW1lJiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5pbmRleE9mKCJyZWdlbmVyYXRvclJ1bnRpbWUiKT49MCxpPW8mJm4ucmVnZW5lcmF0b3JSdW50aW1lO2lmKG4ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMCx0LmV4cG9ydHM9ZSgiLi9ydW50aW1lIiksbyluLnJlZ2VuZXJhdG9yUnVudGltZT1pO2Vsc2UgdHJ5e2RlbGV0ZSBuLnJlZ2VuZXJhdG9yUnVudGltZX1jYXRjaChhKXtuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDB9fSkuY2FsbCh0aGlzLCJ1bmRlZmluZWQiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDoidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGY/c2VsZjoidW5kZWZpbmVkIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7Ii4vcnVudGltZSI6OTl9XSw5OTpbZnVuY3Rpb24oZSx0LHIpeyhmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSx0LHIsbil7dmFyIGk9T2JqZWN0LmNyZWF0ZSgodHx8bykucHJvdG90eXBlKSxhPW5ldyBkKG58fFtdKTtyZXR1cm4gaS5faW52b2tlPWMoZSxyLGEpLGl9ZnVuY3Rpb24gbihlLHQscil7dHJ5e3JldHVybnt0eXBlOiJub3JtYWwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2gobil7cmV0dXJue3R5cGU6InRocm93Iixhcmc6bn19fWZ1bmN0aW9uIG8oKXt9ZnVuY3Rpb24gaSgpe31mdW5jdGlvbiBhKCl7fWZ1bmN0aW9uIHMoZSl7WyJuZXh0IiwidGhyb3ciLCJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIHUoZSl7dGhpcy5hcmc9ZX1mdW5jdGlvbiBsKGUpe2Z1bmN0aW9uIHQocixvLGksYSl7dmFyIHM9bihlW3JdLGUsbyk7aWYoInRocm93IiE9PXMudHlwZSl7dmFyIGw9cy5hcmcsYz1sLnZhbHVlO3JldHVybiBjIGluc3RhbmNlb2YgdT9Qcm9taXNlLnJlc29sdmUoYy5hcmcpLnRoZW4oZnVuY3Rpb24oZSl7dCgibmV4dCIsZSxpLGEpfSxmdW5jdGlvbihlKXt0KCJ0aHJvdyIsZSxpLGEpfSk6UHJvbWlzZS5yZXNvbHZlKGMpLnRoZW4oZnVuY3Rpb24oZSl7bC52YWx1ZT1lLGkobCl9LGEpfWEocy5hcmcpfWZ1bmN0aW9uIHIoZSxyKXtmdW5jdGlvbiBuKCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7dChlLHIsbixvKX0pfXJldHVybiBvPW8/by50aGVuKG4sbik6bigpfSJvYmplY3QiPT10eXBlb2YgcHJvY2VzcyYmcHJvY2Vzcy5kb21haW4mJih0PXByb2Nlc3MuZG9tYWluLmJpbmQodCkpO3ZhciBvO3RoaXMuX2ludm9rZT1yfWZ1bmN0aW9uIGMoZSx0LHIpe3ZhciBvPXc7cmV0dXJuIGZ1bmN0aW9uKGksYSl7aWYobz09PU0pdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7aWYobz09PXgpe2lmKCJ0aHJvdyI9PT1pKXRocm93IGE7cmV0dXJuIHkoKX1mb3IoOzspe3ZhciBzPXIuZGVsZWdhdGU7aWYocyl7aWYoInJldHVybiI9PT1pfHwidGhyb3ciPT09aSYmcy5pdGVyYXRvcltpXT09PW0pe3IuZGVsZWdhdGU9bnVsbDt2YXIgdT1zLml0ZXJhdG9yWyJyZXR1cm4iXTtpZih1KXt2YXIgbD1uKHUscy5pdGVyYXRvcixhKTtpZigidGhyb3ciPT09bC50eXBlKXtpPSJ0aHJvdyIsYT1sLmFyZztjb250aW51ZX19aWYoInJldHVybiI9PT1pKWNvbnRpbnVlfXZhciBsPW4ocy5pdGVyYXRvcltpXSxzLml0ZXJhdG9yLGEpO2lmKCJ0aHJvdyI9PT1sLnR5cGUpe3IuZGVsZWdhdGU9bnVsbCxpPSJ0aHJvdyIsYT1sLmFyZztjb250aW51ZX1pPSJuZXh0IixhPW07dmFyIGM9bC5hcmc7aWYoIWMuZG9uZSlyZXR1cm4gbz1PLGM7cltzLnJlc3VsdE5hbWVdPWMudmFsdWUsci5uZXh0PXMubmV4dExvYyxyLmRlbGVnYXRlPW51bGx9aWYoIm5leHQiPT09aSlyLnNlbnQ9ci5fc2VudD1hO2Vsc2UgaWYoInRocm93Ij09PWkpe2lmKG89PT13KXRocm93IG89eCxhO3IuZGlzcGF0Y2hFeGNlcHRpb24oYSkmJihpPSJuZXh0IixhPW0pfWVsc2UicmV0dXJuIj09PWkmJnIuYWJydXB0KCJyZXR1cm4iLGEpO289TTt2YXIgbD1uKGUsdCxyKTtpZigibm9ybWFsIj09PWwudHlwZSl7bz1yLmRvbmU/eDpPO3ZhciBjPXt2YWx1ZTpsLmFyZyxkb25lOnIuZG9uZX07aWYobC5hcmchPT1QKXJldHVybiBjO3IuZGVsZWdhdGUmJiJuZXh0Ij09PWkmJihhPW0pfWVsc2UidGhyb3ciPT09bC50eXBlJiYobz14LGk9InRocm93IixhPWwuYXJnKX19fWZ1bmN0aW9uIGYoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gcChlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT0ibm9ybWFsIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gZChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6InJvb3QifV0sZS5mb3JFYWNoKGYsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gaChlKXtpZihlKXt2YXIgdD1lW2JdO2lmKHQpcmV0dXJuIHQuY2FsbChlKTtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gbygpe2Zvcig7KytyPGUubGVuZ3RoOylpZih2LmNhbGwoZSxyKSlyZXR1cm4gby52YWx1ZT1lW3JdLG8uZG9uZT0hMSxvO3JldHVybiBvLnZhbHVlPW0sby5kb25lPSEwLG99O3JldHVybiBuLm5leHQ9bn19cmV0dXJue25leHQ6eX19ZnVuY3Rpb24geSgpe3JldHVybnt2YWx1ZTptLGRvbmU6ITB9fXZhciBtLHY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxfPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGI9Xy5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLGc9Xy50b1N0cmluZ1RhZ3x8IkBAdG9TdHJpbmdUYWciLEU9Im9iamVjdCI9PXR5cGVvZiB0LGo9ZS5yZWdlbmVyYXRvclJ1bnRpbWU7aWYoailyZXR1cm4gdm9pZChFJiYodC5leHBvcnRzPWopKTtqPWUucmVnZW5lcmF0b3JSdW50aW1lPUU/dC5leHBvcnRzOnt9LGoud3JhcD1yO3ZhciB3PSJzdXNwZW5kZWRTdGFydCIsTz0ic3VzcGVuZGVkWWllbGQiLE09ImV4ZWN1dGluZyIseD0iY29tcGxldGVkIixQPXt9LGs9YS5wcm90b3R5cGU9by5wcm90b3R5cGU7aS5wcm90b3R5cGU9ay5jb25zdHJ1Y3Rvcj1hLGEuY29uc3RydWN0b3I9aSxhW2ddPWkuZGlzcGxheU5hbWU9IkdlbmVyYXRvckZ1bmN0aW9uIixqLmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I7cmV0dXJuISF0JiYodD09PWl8fCJHZW5lcmF0b3JGdW5jdGlvbiI9PT0odC5kaXNwbGF5TmFtZXx8dC5uYW1lKSl9LGoubWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLGEpOihlLl9fcHJvdG9fXz1hLGcgaW4gZXx8KGVbZ109IkdlbmVyYXRvckZ1bmN0aW9uIikpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoayksZX0sai5hd3JhcD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IHUoZSl9LHMobC5wcm90b3R5cGUpLGouYXN5bmM9ZnVuY3Rpb24oZSx0LG4sbyl7dmFyIGk9bmV3IGwocihlLHQsbixvKSk7cmV0dXJuIGouaXNHZW5lcmF0b3JGdW5jdGlvbih0KT9pOmkubmV4dCgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZG9uZT9lLnZhbHVlOmkubmV4dCgpfSl9LHMoayksa1tiXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfSxrW2ddPSJHZW5lcmF0b3IiLGsudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4iW29iamVjdCBHZW5lcmF0b3JdIn0sai5rZXlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdC5yZXZlcnNlKCksZnVuY3Rpb24gbigpe2Zvcig7dC5sZW5ndGg7KXt2YXIgcj10LnBvcCgpO2lmKHIgaW4gZSlyZXR1cm4gbi52YWx1ZT1yLG4uZG9uZT0hMSxufXJldHVybiBuLmRvbmU9ITAsbn19LGoudmFsdWVzPWgsZC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmQscmVzZXQ6ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9bSx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHApLCFlKWZvcih2YXIgdCBpbiB0aGlzKSJ0Ij09PXQuY2hhckF0KDApJiZ2LmNhbGwodGhpcyx0KSYmIWlzTmFOKCt0LnNsaWNlKDEpKSYmKHRoaXNbdF09bSk7Cn0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0sdD1lLmNvbXBsZXRpb247aWYoInRocm93Ij09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm4gdGhpcy5ydmFsfSxkaXNwYXRjaEV4Y2VwdGlvbjpmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7cmV0dXJuIGkudHlwZT0idGhyb3ciLGkuYXJnPWUsci5uZXh0PXQsISFufWlmKHRoaXMuZG9uZSl0aHJvdyBlO2Zvcih2YXIgcj10aGlzLG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbbl0saT1vLmNvbXBsZXRpb247aWYoInJvb3QiPT09by50cnlMb2MpcmV0dXJuIHQoImVuZCIpO2lmKG8udHJ5TG9jPD10aGlzLnByZXYpe3ZhciBhPXYuY2FsbChvLCJjYXRjaExvYyIpLHM9di5jYWxsKG8sImZpbmFsbHlMb2MiKTtpZihhJiZzKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFzKXRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbihlLHQpe2Zvcih2YXIgcj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7cj49MDstLXIpe3ZhciBuPXRoaXMudHJ5RW50cmllc1tyXTtpZihuLnRyeUxvYzw9dGhpcy5wcmV2JiZ2LmNhbGwobiwiZmluYWxseUxvYyIpJiZ0aGlzLnByZXY8bi5maW5hbGx5TG9jKXt2YXIgbz1uO2JyZWFrfX1vJiYoImJyZWFrIj09PWV8fCJjb250aW51ZSI9PT1lKSYmby50cnlMb2M8PXQmJnQ8PW8uZmluYWxseUxvYyYmKG89bnVsbCk7dmFyIGk9bz9vLmNvbXBsZXRpb246e307cmV0dXJuIGkudHlwZT1lLGkuYXJnPXQsbz90aGlzLm5leHQ9by5maW5hbGx5TG9jOnRoaXMuY29tcGxldGUoaSksUH0sY29tcGxldGU6ZnVuY3Rpb24oZSx0KXtpZigidGhyb3ciPT09ZS50eXBlKXRocm93IGUuYXJnOyJicmVhayI9PT1lLnR5cGV8fCJjb250aW51ZSI9PT1lLnR5cGU/dGhpcy5uZXh0PWUuYXJnOiJyZXR1cm4iPT09ZS50eXBlPyh0aGlzLnJ2YWw9ZS5hcmcsdGhpcy5uZXh0PSJlbmQiKToibm9ybWFsIj09PWUudHlwZSYmdCYmKHRoaXMubmV4dD10KX0sZmluaXNoOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLmZpbmFsbHlMb2M9PT1lKXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSxwKHIpLFB9fSwiY2F0Y2giOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLnRyeUxvYz09PWUpe3ZhciBuPXIuY29tcGxldGlvbjtpZigidGhyb3ciPT09bi50eXBlKXt2YXIgbz1uLmFyZztwKHIpfXJldHVybiBvfX10aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpfSxkZWxlZ2F0ZVlpZWxkOmZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy5kZWxlZ2F0ZT17aXRlcmF0b3I6aChlKSxyZXN1bHROYW1lOnQsbmV4dExvYzpyfSxQfX19KCJvYmplY3QiPT10eXBlb2YgZT9lOiJvYmplY3QiPT10eXBlb2Ygd2luZG93P3dpbmRvdzoib2JqZWN0Ij09dHlwZW9mIHNlbGY/c2VsZjp0aGlzKX0pLmNhbGwodGhpcywidW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmP3NlbGY6InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se31dLDEwMDpbZnVuY3Rpb24odCxyLG4peyFmdW5jdGlvbih0LG4peyJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLmFtZD9lKFtdLG4pOiJ1bmRlZmluZWQiIT10eXBlb2YgciYmci5leHBvcnRzP3IuZXhwb3J0cz1uKCk6dC50djQ9bigpfSh0aGlzLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZW5jb2RlVVJJKGUpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZyxmdW5jdGlvbihlKXtyZXR1cm4iJSIrZS5zdWJzdHJpbmcoMyl9KX1mdW5jdGlvbiB0KHQpe3ZhciByPSIiO3BbdC5jaGFyQXQoMCldJiYocj10LmNoYXJBdCgwKSx0PXQuc3Vic3RyaW5nKDEpKTt2YXIgbj0iIixvPSIiLGk9ITAsYT0hMSxzPSExOyIrIj09PXI/aT0hMToiLiI9PT1yPyhvPSIuIixuPSIuIik6Ii8iPT09cj8obz0iLyIsbj0iLyIpOiIjIj09PXI/KG89IiMiLGk9ITEpOiI7Ij09PXI/KG89IjsiLG49IjsiLGE9ITAscz0hMCk6Ij8iPT09cj8obz0iPyIsbj0iJiIsYT0hMCk6IiYiPT09ciYmKG89IiYiLG49IiYiLGE9ITApO2Zvcih2YXIgdT1bXSxsPXQuc3BsaXQoIiwiKSxjPVtdLGY9e30saD0wO2g8bC5sZW5ndGg7aCsrKXt2YXIgeT1sW2hdLG09bnVsbDtpZih5LmluZGV4T2YoIjoiKSE9PS0xKXt2YXIgdj15LnNwbGl0KCI6Iik7eT12WzBdLG09cGFyc2VJbnQodlsxXSwxMCl9Zm9yKHZhciBfPXt9O2RbeS5jaGFyQXQoeS5sZW5ndGgtMSldOylfW3kuY2hhckF0KHkubGVuZ3RoLTEpXT0hMCx5PXkuc3Vic3RyaW5nKDAseS5sZW5ndGgtMSk7dmFyIGI9e3RydW5jYXRlOm0sbmFtZTp5LHN1ZmZpY2VzOl99O2MucHVzaChiKSxmW3ldPWIsdS5wdXNoKHkpfXZhciBnPWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj0iIix1PTAsbD0wO2w8Yy5sZW5ndGg7bCsrKXt2YXIgZj1jW2xdLHA9dChmLm5hbWUpO2lmKG51bGw9PT1wfHx2b2lkIDA9PT1wfHxBcnJheS5pc0FycmF5KHApJiYwPT09cC5sZW5ndGh8fCJvYmplY3QiPT10eXBlb2YgcCYmMD09PU9iamVjdC5rZXlzKHApLmxlbmd0aCl1Kys7ZWxzZSBpZihyKz1sPT09dT9vOm58fCIsIixBcnJheS5pc0FycmF5KHApKXthJiYocis9Zi5uYW1lKyI9Iik7Zm9yKHZhciBkPTA7ZDxwLmxlbmd0aDtkKyspZD4wJiYocis9Zi5zdWZmaWNlc1siKiJdP258fCIsIjoiLCIsZi5zdWZmaWNlc1siKiJdJiZhJiYocis9Zi5uYW1lKyI9IikpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KHBbZF0pLnJlcGxhY2UoLyEvZywiJTIxIik6ZShwW2RdKX1lbHNlIGlmKCJvYmplY3QiPT10eXBlb2YgcCl7YSYmIWYuc3VmZmljZXNbIioiXSYmKHIrPWYubmFtZSsiPSIpO3ZhciBoPSEwO2Zvcih2YXIgeSBpbiBwKWh8fChyKz1mLnN1ZmZpY2VzWyIqIl0/bnx8IiwiOiIsIiksaD0hMSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudCh5KS5yZXBsYWNlKC8hL2csIiUyMSIpOmUoeSkscis9Zi5zdWZmaWNlc1siKiJdPyI9IjoiLCIscis9aT9lbmNvZGVVUklDb21wb25lbnQocFt5XSkucmVwbGFjZSgvIS9nLCIlMjEiKTplKHBbeV0pfWVsc2UgYSYmKHIrPWYubmFtZSxzJiYiIj09PXB8fChyKz0iPSIpKSxudWxsIT1mLnRydW5jYXRlJiYocD1wLnN1YnN0cmluZygwLGYudHJ1bmNhdGUpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChwKS5yZXBsYWNlKC8hL2csIiUyMSIpOmUocCl9cmV0dXJuIHJ9O3JldHVybiBnLnZhck5hbWVzPXUse3ByZWZpeDpvLHN1YnN0aXR1dGlvbjpnfX1mdW5jdGlvbiByKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHIpKXJldHVybiBuZXcgcihlKTtmb3IodmFyIG49ZS5zcGxpdCgieyIpLG89W24uc2hpZnQoKV0saT1bXSxhPVtdLHM9W107bi5sZW5ndGg+MDspe3ZhciB1PW4uc2hpZnQoKSxsPXUuc3BsaXQoIn0iKVswXSxjPXUuc3Vic3RyaW5nKGwubGVuZ3RoKzEpLGY9dChsKTthLnB1c2goZi5zdWJzdGl0dXRpb24pLGkucHVzaChmLnByZWZpeCksby5wdXNoKGMpLHM9cy5jb25jYXQoZi5zdWJzdGl0dXRpb24udmFyTmFtZXMpfXRoaXMuZmlsbD1mdW5jdGlvbihlKXtmb3IodmFyIHQ9b1swXSxyPTA7cjxhLmxlbmd0aDtyKyspe3ZhciBuPWFbcl07dCs9bihlKSx0Kz1vW3IrMV19cmV0dXJuIHR9LHRoaXMudmFyTmFtZXM9cyx0aGlzLnRlbXBsYXRlPWV9ZnVuY3Rpb24gbihlLHQpe2lmKGU9PT10KXJldHVybiEwO2lmKGUmJnQmJiJvYmplY3QiPT10eXBlb2YgZSYmIm9iamVjdCI9PXR5cGVvZiB0KXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFuKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbztmb3IobyBpbiBlKWlmKHZvaWQgMD09PXRbb10mJnZvaWQgMCE9PWVbb10pcmV0dXJuITE7Zm9yKG8gaW4gdClpZih2b2lkIDA9PT1lW29dJiZ2b2lkIDAhPT10W29dKXJldHVybiExO2ZvcihvIGluIGUpaWYoIW4oZVtvXSx0W29dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBvKGUpe3ZhciB0PVN0cmluZyhlKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywiIikubWF0Y2goL14oW146XC8/I10rOik/KFwvXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlwvPyNdKikoPzo6KFxkKikpPykpPyhbXj8jXSopKFw/W14jXSopPygjW1xzXFNdKik/Lyk7cmV0dXJuIHQ/e2hyZWY6dFswXXx8IiIscHJvdG9jb2w6dFsxXXx8IiIsYXV0aG9yaXR5OnRbMl18fCIiLGhvc3Q6dFszXXx8IiIsaG9zdG5hbWU6dFs0XXx8IiIscG9ydDp0WzVdfHwiIixwYXRobmFtZTp0WzZdfHwiIixzZWFyY2g6dFs3XXx8IiIsaGFzaDp0WzhdfHwiIn06bnVsbH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gcihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKC9eKFwuXC4/KFwvfCQpKSsvLCIiKS5yZXBsYWNlKC9cLyhcLihcL3wkKSkrL2csIi8iKS5yZXBsYWNlKC9cL1wuXC4kLywiLy4uLyIpLnJlcGxhY2UoL1wvP1teXC9dKi9nLGZ1bmN0aW9uKGUpeyIvLi4iPT09ZT90LnBvcCgpOnQucHVzaChlKX0pLHQuam9pbigiIikucmVwbGFjZSgvXlwvLywiLyI9PT1lLmNoYXJBdCgwKT8iLyI6IiIpfXJldHVybiB0PW8odHx8IiIpLGU9byhlfHwiIiksdCYmZT8odC5wcm90b2NvbHx8ZS5wcm90b2NvbCkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5P3QuYXV0aG9yaXR5OmUuYXV0aG9yaXR5KStyKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHwiLyI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKT90LnBhdGhuYW1lOnQucGF0aG5hbWU/KGUuYXV0aG9yaXR5JiYhZS5wYXRobmFtZT8iLyI6IiIpK2UucGF0aG5hbWUuc2xpY2UoMCxlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCIvIikrMSkrdC5wYXRobmFtZTplLnBhdGhuYW1lKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fHQucGF0aG5hbWU/dC5zZWFyY2g6dC5zZWFyY2h8fGUuc2VhcmNoKSt0Lmhhc2g6bnVsbH1mdW5jdGlvbiBhKGUpe3JldHVybiBlLnNwbGl0KCIjIilbMF19ZnVuY3Rpb24gcyhlLHQpe2lmKGUmJiJvYmplY3QiPT10eXBlb2YgZSlpZih2b2lkIDA9PT10P3Q9ZS5pZDoic3RyaW5nIj09dHlwZW9mIGUuaWQmJih0PWkodCxlLmlkKSxlLmlkPXQpLEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspcyhlW3JdLHQpO2Vsc2V7InN0cmluZyI9PXR5cGVvZiBlLiRyZWYmJihlLiRyZWY9aSh0LGUuJHJlZikpO2Zvcih2YXIgbiBpbiBlKSJlbnVtIiE9PW4mJnMoZVtuXSx0KX19ZnVuY3Rpb24gdShlKXtlPWV8fCJlbiI7dmFyIHQ9RVtlXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9dFtlLmNvZGVdfHxnW2UuY29kZV07aWYoInN0cmluZyIhPXR5cGVvZiByKXJldHVybiJVbmtub3duIGVycm9yIGNvZGUgIitlLmNvZGUrIjogIitKU09OLnN0cmluZ2lmeShlLm1lc3NhZ2VQYXJhbXMpO3ZhciBuPWUucGFyYW1zO3JldHVybiByLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHJ8fCJudW1iZXIiPT10eXBlb2Ygcj9yOmV9KX19ZnVuY3Rpb24gbChlLHQscixuLG8pe2lmKEVycm9yLmNhbGwodGhpcyksdm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6ICIrbik7dGhpcy5tZXNzYWdlPSIiLHRoaXMucGFyYW1zPXQsdGhpcy5jb2RlPWUsdGhpcy5kYXRhUGF0aD1yfHwiIix0aGlzLnNjaGVtYVBhdGg9bnx8IiIsdGhpcy5zdWJFcnJvcnM9b3x8bnVsbDt2YXIgaT1uZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtpZih0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZSwhdGhpcy5zdGFjayl0cnl7dGhyb3cgaX1jYXRjaChpKXt0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZX19ZnVuY3Rpb24gYyhlLHQpe2lmKHQuc3Vic3RyaW5nKDAsZS5sZW5ndGgpPT09ZSl7dmFyIHI9dC5zdWJzdHJpbmcoZS5sZW5ndGgpO2lmKHQubGVuZ3RoPjAmJiIvIj09PXQuY2hhckF0KGUubGVuZ3RoLTEpfHwiIyI9PT1yLmNoYXJBdCgwKXx8Ij8iPT09ci5jaGFyQXQoMCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlKXt2YXIgdCxyLG49bmV3IGgsbz17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/dGhpcy5sYW5ndWFnZShlKToocj1lLCEwKX0sYWRkRm9ybWF0OmZ1bmN0aW9uKCl7bi5hZGRGb3JtYXQuYXBwbHkobixhcmd1bWVudHMpfSxsYW5ndWFnZTpmdW5jdGlvbihlKXtyZXR1cm4gZT8oRVtlXXx8KGU9ZS5zcGxpdCgiLSIpWzBdKSwhIUVbZV0mJih0PWUsZSkpOnR9LGFkZExhbmd1YWdlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKHIgaW4gdil0W3JdJiYhdFt2W3JdXSYmKHRbdltyXV09dFtyXSk7dmFyIG49ZS5zcGxpdCgiLSIpWzBdO2lmKEVbbl0pe0VbZV09T2JqZWN0LmNyZWF0ZShFW25dKTtmb3IociBpbiB0KSJ1bmRlZmluZWQiPT10eXBlb2YgRVtuXVtyXSYmKEVbbl1bcl09dFtyXSksRVtlXVtyXT10W3JdfWVsc2UgRVtlXT10LEVbbl09dDtyZXR1cm4gdGhpc30sZnJlc2hBcGk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZigpO3JldHVybiBlJiZ0Lmxhbmd1YWdlKGUpLHR9LHZhbGlkYXRlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksbD1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGM9bmV3IGgobiwoITEpLGwsaSxhKTsic3RyaW5nIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxjLmFkZFNjaGVtYSgiIixvKTt2YXIgZj1jLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsIiIpO3JldHVybiFmJiZhJiYoZj1jLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbykpLHRoaXMuZXJyb3I9Zix0aGlzLm1pc3Npbmc9Yy5taXNzaW5nLHRoaXMudmFsaWQ9bnVsbD09PWYsdGhpcy52YWxpZH0sdmFsaWRhdGVSZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gdGhpcy52YWxpZGF0ZS5hcHBseShlLGFyZ3VtZW50cyksZX0sdmFsaWRhdGVNdWx0aXBsZTpmdW5jdGlvbihlLG8saSxhKXt2YXIgcz11KHQpLGw9cj9mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIoZSx0LG4pfHxzKGUsdCxuKX06cyxjPW5ldyBoKG4sKCEwKSxsLGksYSk7InN0cmluZyI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksYy5hZGRTY2hlbWEoIiIsbyksYy52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLCIiKSxhJiZjLmJhblVua25vd25Qcm9wZXJ0aWVzKGUsbyk7dmFyIGY9e307cmV0dXJuIGYuZXJyb3JzPWMuZXJyb3JzLGYubWlzc2luZz1jLm1pc3NpbmcsZi52YWxpZD0wPT09Zi5lcnJvcnMubGVuZ3RoLGZ9LGFkZFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmFkZFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYTpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYS5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYU1hcDpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYU1hcC5hcHBseShuLGFyZ3VtZW50cyl9LGdldFNjaGVtYVVyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0TWlzc2luZ1VyaXM6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRNaXNzaW5nVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGRyb3BTY2hlbWFzOmZ1bmN0aW9uKCl7bi5kcm9wU2NoZW1hcy5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUtleXdvcmQ6ZnVuY3Rpb24oKXtuLmRlZmluZUtleXdvcmQuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVFcnJvcjpmdW5jdGlvbihlLHQscil7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbmFtZSBtdXN0IGJlIGEgc3RyaW5nIGluIFVQUEVSX0NBU0VfV0lUSF9VTkRFUlNDT1JFUyIpO2lmKCJudW1iZXIiIT10eXBlb2YgdHx8dCUxIT09MHx8dDwxZTQpdGhyb3cgbmV3IEVycm9yKCJDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMCIpO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdltlXSl0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGFscmVhZHkgZGVmaW5lZDogIitlKyIgYXMgIit2W2VdKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIF9bdF0pdGhyb3cgbmV3IEVycm9yKCJFcnJvciBjb2RlIGFscmVhZHkgdXNlZDogIitfW3RdKyIgYXMgIit0KTt2W2VdPXQsX1t0XT1lLGdbZV09Z1t0XT1yO2Zvcih2YXIgbiBpbiBFKXt2YXIgbz1FW25dO29bZV0mJihvW3RdPW9bdF18fG9bZV0pfX0scmVzZXQ6ZnVuY3Rpb24oKXtuLnJlc2V0KCksdGhpcy5lcnJvcj1udWxsLHRoaXMubWlzc2luZz1bXSx0aGlzLnZhbGlkPSEwfSxtaXNzaW5nOltdLGVycm9yOm51bGwsdmFsaWQ6ITAsbm9ybVNjaGVtYTpzLHJlc29sdmVVcmw6aSxnZXREb2N1bWVudFVyaTphLGVycm9yQ29kZXM6dn07cmV0dXJuIG8ubGFuZ3VhZ2UoZXx8ImVuIiksb31PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIikscj1bInRvU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJ2YWx1ZU9mIiwiaGFzT3duUHJvcGVydHkiLCJpc1Byb3RvdHlwZU9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjb25zdHJ1Y3RvciJdLG49ci5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKCJvYmplY3QiIT10eXBlb2YgbyYmImZ1bmN0aW9uIiE9dHlwZW9mIG98fG51bGw9PT1vKXRocm93IG5ldyBUeXBlRXJyb3IoIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Iik7dmFyIGk9W107Zm9yKHZhciBhIGluIG8pZS5jYWxsKG8sYSkmJmkucHVzaChhKTtpZih0KWZvcih2YXIgcz0wO3M8bjtzKyspZS5jYWxsKG8scltzXSkmJmkucHVzaChyW3NdKTtyZXR1cm4gaX19KCkpLE9iamVjdC5jcmVhdGV8fChPYmplY3QuY3JlYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLiIpO3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfX0oKSksQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuIltvYmplY3QgQXJyYXldIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX0pLEFycmF5LnByb3RvdHlwZS5pbmRleE9mfHwoQXJyYXkucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24oZSl7aWYobnVsbD09PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcjt2YXIgdD1PYmplY3QodGhpcykscj10Lmxlbmd0aD4+PjA7aWYoMD09PXIpcmV0dXJuLTE7dmFyIG49MDtpZihhcmd1bWVudHMubGVuZ3RoPjEmJihuPU51bWJlcihhcmd1bWVudHNbMV0pLG4hPT1uP249MDowIT09biYmbiE9PTEvMCYmbiE9PS0oMS8wKSYmKG49KG4+MHx8LTEpKk1hdGguZmxvb3IoTWF0aC5hYnMobikpKSksbj49cilyZXR1cm4tMTtmb3IodmFyIG89bj49MD9uOk1hdGgubWF4KHItTWF0aC5hYnMobiksMCk7bzxyO28rKylpZihvIGluIHQmJnRbb109PT1lKXJldHVybiBvO3JldHVybi0xfSksT2JqZWN0LmlzRnJvemVufHwoT2JqZWN0LmlzRnJvemVuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0idHY0X3Rlc3RfZnJvemVuX2tleSI7ZS5oYXNPd25Qcm9wZXJ0eSh0KTspdCs9TWF0aC5yYW5kb20oKTt0cnl7cmV0dXJuIGVbdF09ITAsZGVsZXRlIGVbdF0sITF9Y2F0Y2gocil7cmV0dXJuITB9fSk7dmFyIHA9eyIrIjohMCwiIyI6ITAsIi4iOiEwLCIvIjohMCwiOyI6ITAsIj8iOiEwLCImIjohMH0sZD17IioiOiEwfTtyLnByb3RvdHlwZT17dG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZW1wbGF0ZX0sZmlsbEZyb21PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZmlsbChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0pfX07dmFyIGg9ZnVuY3Rpb24oZSx0LHIsbixvKXtpZih0aGlzLm1pc3Npbmc9W10sdGhpcy5taXNzaW5nTWFwPXt9LHRoaXMuZm9ybWF0VmFsaWRhdG9ycz1lP09iamVjdC5jcmVhdGUoZS5mb3JtYXRWYWxpZGF0b3JzKTp7fSx0aGlzLnNjaGVtYXM9ZT9PYmplY3QuY3JlYXRlKGUuc2NoZW1hcyk6e30sdGhpcy5jb2xsZWN0TXVsdGlwbGU9dCx0aGlzLmVycm9ycz1bXSx0aGlzLmhhbmRsZUVycm9yPXQ/dGhpcy5jb2xsZWN0RXJyb3I6dGhpcy5yZXR1cm5FcnJvcixuJiYodGhpcy5jaGVja1JlY3Vyc2l2ZT0hMCx0aGlzLnNjYW5uZWQ9W10sdGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W10sdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycz1bXSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXk9InR2NF92YWxpZGF0aW9uX2lkIix0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXk9InR2NF92YWxpZGF0aW9uX2Vycm9yc19pZCIpLG8mJih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXM9ITAsdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSksdGhpcy5lcnJvclJlcG9ydGVyPXJ8fHUoImVuIiksInN0cmluZyI9PXR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIpdGhyb3cgbmV3IEVycm9yKCJkZWJ1ZyIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBpIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW2ldPWUuZGVmaW5lZEtleXdvcmRzW2ldLnNsaWNlKDApfTtoLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGgucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4sbyxpLGEpe3ZhciBzPW5ldyBsKGUsdCxyLG4sbyk7cmV0dXJuIHMubWVzc2FnZT10aGlzLmVycm9yUmVwb3J0ZXIocyxpLGEpLHN9LGgucHJvdG90eXBlLnJldHVybkVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxoLnByb3RvdHlwZS5jb2xsZWN0RXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuZXJyb3JzLnB1c2goZSksbnVsbH0saC5wcm90b3R5cGUucHJlZml4RXJyb3JzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZTtuPHRoaXMuZXJyb3JzLmxlbmd0aDtuKyspdGhpcy5lcnJvcnNbbl09dGhpcy5lcnJvcnNbbl0ucHJlZml4V2l0aCh0LHIpO3JldHVybiB0aGlzfSxoLnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKXt2YXIgbj10aGlzLmNyZWF0ZUVycm9yKHYuVU5LTk9XTl9QUk9QRVJUWSx7cGF0aDpyfSxyLCIiLG51bGwsZSx0KSxvPXRoaXMuaGFuZGxlRXJyb3Iobik7aWYobylyZXR1cm4gb31yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUuYWRkRm9ybWF0PWZ1bmN0aW9uKGUsdCl7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXtmb3IodmFyIHIgaW4gZSl0aGlzLmFkZEZvcm1hdChyLGVbcl0pO3JldHVybiB0aGlzfXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tlXT10fSxoLnByb3RvdHlwZS5yZXNvbHZlUmVmcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUuJHJlZil7aWYodD10fHx7fSx0W2UuJHJlZl0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5DSVJDVUxBUl9SRUZFUkVOQ0Use3VybHM6T2JqZWN0LmtleXModCkuam9pbigiLCAiKX0sIiIsIiIsbnVsbCx2b2lkIDAsZSk7dFtlLiRyZWZdPSEwLGU9dGhpcy5nZXRTY2hlbWEoZS4kcmVmLHQpfXJldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWE9ZnVuY3Rpb24oZSx0KXt2YXIgcjtpZih2b2lkIDAhPT10aGlzLnNjaGVtYXNbZV0pcmV0dXJuIHI9dGhpcy5zY2hlbWFzW2VdLHRoaXMucmVzb2x2ZVJlZnMocix0KTt2YXIgbj1lLG89IiI7aWYoZS5pbmRleE9mKCIjIikhPT0tMSYmKG89ZS5zdWJzdHJpbmcoZS5pbmRleE9mKCIjIikrMSksbj1lLnN1YnN0cmluZygwLGUuaW5kZXhPZigiIyIpKSksIm9iamVjdCI9PXR5cGVvZiB0aGlzLnNjaGVtYXNbbl0pe3I9dGhpcy5zY2hlbWFzW25dO3ZhciBpPWRlY29kZVVSSUNvbXBvbmVudChvKTtpZigiIj09PWkpcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMocix0KTtpZigiLyIhPT1pLmNoYXJBdCgwKSlyZXR1cm47Zm9yKHZhciBhPWkuc3BsaXQoIi8iKS5zbGljZSgxKSxzPTA7czxhLmxlbmd0aDtzKyspe3ZhciB1PWFbc10ucmVwbGFjZSgvfjEvZywiLyIpLnJlcGxhY2UoL34wL2csIn4iKTtpZih2b2lkIDA9PT1yW3VdKXtyPXZvaWQgMDticmVha31yPXJbdV19aWYodm9pZCAwIT09cilyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpfXZvaWQgMD09PXRoaXMubWlzc2luZ1tuXSYmKHRoaXMubWlzc2luZy5wdXNoKG4pLHRoaXMubWlzc2luZ1tuXT1uLHRoaXMubWlzc2luZ01hcFtuXT1uKX0saC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcz1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdGhpcy5zZWFyY2hTY2hlbWFzKGVbcl0sdCk7ZWxzZSBpZihlJiYib2JqZWN0Ij09dHlwZW9mIGUpeyJzdHJpbmciPT10eXBlb2YgZS5pZCYmYyh0LGUuaWQpJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbZS5pZF0mJih0aGlzLnNjaGVtYXNbZS5pZF09ZSk7Zm9yKHZhciBuIGluIGUpaWYoImVudW0iIT09bilpZigib2JqZWN0Ij09dHlwZW9mIGVbbl0pdGhpcy5zZWFyY2hTY2hlbWFzKGVbbl0sdCk7ZWxzZSBpZigiJHJlZiI9PT1uKXt2YXIgbz1hKGVbbl0pO28mJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tvXSYmdm9pZCAwPT09dGhpcy5taXNzaW5nTWFwW29dJiYodGhpcy5taXNzaW5nTWFwW29dPW8pfX19LGgucHJvdG90eXBlLmFkZFNjaGVtYT1mdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgZXx8InVuZGVmaW5lZCI9PXR5cGVvZiB0KXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgZS5pZClyZXR1cm47dD1lLGU9dC5pZH1lPT09YShlKSsiIyImJihlPWEoZSkpLHRoaXMuc2NoZW1hc1tlXT10LGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbZV0scyh0LGUpLHRoaXMuc2VhcmNoU2NoZW1hcyh0LGUpfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFNYXA9ZnVuY3Rpb24oKXt2YXIgZT17fTtmb3IodmFyIHQgaW4gdGhpcy5zY2hlbWFzKWVbdF09dGhpcy5zY2hlbWFzW3RdO3JldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLnNjaGVtYXMpZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5taXNzaW5nTWFwKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuZHJvcFNjaGVtYXM9ZnVuY3Rpb24oKXt0aGlzLnNjaGVtYXM9e30sdGhpcy5yZXNldCgpfSxoLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbigpe3RoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5lcnJvcnM9W119LGgucHJvdG90eXBlLnZhbGlkYXRlQWxsPWZ1bmN0aW9uKGUsdCxyLG4sbyl7dmFyIGk7aWYodD10aGlzLnJlc29sdmVSZWZzKHQpLCF0KXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBsKXJldHVybiB0aGlzLmVycm9ycy5wdXNoKHQpLHQ7dmFyIGEscz10aGlzLmVycm9ycy5sZW5ndGgsdT1udWxsLGM9bnVsbDtpZih0aGlzLmNoZWNrUmVjdXJzaXZlJiZlJiYib2JqZWN0Ij09dHlwZW9mIGUpe2lmKGk9IXRoaXMuc2Nhbm5lZC5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXt2YXIgZj1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZih0KTtpZihmIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdChlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bZl0pLG51bGx9aWYoT2JqZWN0LmlzRnJvemVuKGUpJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihlKSxhIT09LTEpKXt2YXIgcD10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmluZGV4T2YodCk7aWYocCE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVtwXSksbnVsbH1pZih0aGlzLnNjYW5uZWQucHVzaChlKSxPYmplY3QuaXNGcm96ZW4oZSkpYT09PS0xJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGUpLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSkpLHU9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXVt1XT10LHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bdV09W107ZWxzZXtpZighZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSl9Y2F0Y2goZCl7ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldPVtdLGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XT1bXX1jPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW2NdPXQsZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2NdPVtdfX12YXIgaD10aGlzLmVycm9ycy5sZW5ndGgseT10aGlzLnZhbGlkYXRlQmFzaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlTnVtZXJpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVTdHJpbmcoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQXJyYXkoZSx0LG8pfHx0aGlzLnZhbGlkYXRlT2JqZWN0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhlLHQsbyl8fHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUZvcm1hdChlLHQsbyl8fHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZSx0LG8pfHxudWxsO2lmKGkpe2Zvcig7dGhpcy5zY2FubmVkLmxlbmd0aDspe3ZhciBtPXRoaXMuc2Nhbm5lZC5wb3AoKTtkZWxldGUgbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldfXRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdfWlmKHl8fGghPT10aGlzLmVycm9ycy5sZW5ndGgpZm9yKDtyJiZyLmxlbmd0aHx8biYmbi5sZW5ndGg7KXt2YXIgdj1yJiZyLmxlbmd0aD8iIityLnBvcCgpOm51bGwsXz1uJiZuLmxlbmd0aD8iIituLnBvcCgpOm51bGw7eSYmKHk9eS5wcmVmaXhXaXRoKHYsXykpLHRoaXMucHJlZml4RXJyb3JzKGgsdixfKX1yZXR1cm4gbnVsbCE9PXU/dGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT10aGlzLmVycm9ycy5zbGljZShzKTpudWxsIT09YyYmKGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtjXT10aGlzLmVycm9ycy5zbGljZShzKSksdGhpcy5oYW5kbGVFcnJvcih5KX0saC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIHQuZm9ybWF0fHwhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XSlyZXR1cm4gbnVsbDt2YXIgcj10aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdLmNhbGwobnVsbCxlLHQpO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcnx8Im51bWJlciI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnJ9LCIiLCIvZm9ybWF0IixudWxsLGUsdCk6ciYmIm9iamVjdCI9PXR5cGVvZiByP3RoaXMuY3JlYXRlRXJyb3Iodi5GT1JNQVRfQ1VTVE9NLHttZXNzYWdlOnIubWVzc2FnZXx8Ij8ifSxyLmRhdGFQYXRofHwiIixyLnNjaGVtYVBhdGh8fCIvZm9ybWF0IixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVEZWZpbmVkS2V5d29yZHM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbiBpbiB0aGlzLmRlZmluZWRLZXl3b3JkcylpZigidW5kZWZpbmVkIiE9dHlwZW9mIHRbbl0pZm9yKHZhciBvPXRoaXMuZGVmaW5lZEtleXdvcmRzW25dLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXSxzPWEoZSx0W25dLHQscik7aWYoInN0cmluZyI9PXR5cGVvZiBzfHwibnVtYmVyIj09dHlwZW9mIHMpcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5LRVlXT1JEX0NVU1RPTSx7a2V5Om4sbWVzc2FnZTpzfSwiIiwiIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG4pO2lmKHMmJiJvYmplY3QiPT10eXBlb2Ygcyl7dmFyIHU9cy5jb2RlO2lmKCJzdHJpbmciPT10eXBlb2YgdSl7aWYoIXZbdV0pdGhyb3cgbmV3IEVycm9yKCJVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogIit1KTt1PXZbdV19ZWxzZSJudW1iZXIiIT10eXBlb2YgdSYmKHU9di5LRVlXT1JEX0NVU1RPTSk7dmFyIGw9Im9iamVjdCI9PXR5cGVvZiBzLm1lc3NhZ2U/cy5tZXNzYWdlOntrZXk6bixtZXNzYWdlOnMubWVzc2FnZXx8Ij8ifSxjPXMuc2NoZW1hUGF0aHx8Ii8iK24ucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIik7cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IodSxsLHMuZGF0YVBhdGh8fG51bGwsYyxudWxsLGUsdCl9fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLnZhbGlkYXRlVHlwZShlLHQscikpP24ucHJlZml4V2l0aChudWxsLCJ0eXBlIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCwidHlwZSIpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlVHlwZT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXQudHlwZSlyZXR1cm4gbnVsbDt2YXIgcj10eXBlb2YgZTtudWxsPT09ZT9yPSJudWxsIjpBcnJheS5pc0FycmF5KGUpJiYocj0iYXJyYXkiKTt2YXIgbj10LnR5cGU7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZihpPT09cnx8ImludGVnZXIiPT09aSYmIm51bWJlciI9PT1yJiZlJTE9PT0wKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuSU5WQUxJRF9UWVBFLHt0eXBlOnIsZXhwZWN0ZWQ6bi5qb2luKCIvIil9LCIiLCIiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVFbnVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dFsiZW51bSJdKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dFsiZW51bSJdLmxlbmd0aDtyKyspe3ZhciBvPXRbImVudW0iXVtyXTtpZihuKGUsbykpcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5FTlVNX01JU01BVENILHt2YWx1ZToidW5kZWZpbmVkIiE9dHlwZW9mIEpTT04/SlNPTi5zdHJpbmdpZnkoZSk6ZX0sIiIsIiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihlLHQscil8fHRoaXMudmFsaWRhdGVNaW5NYXgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTmFOKGUsdCxyKXx8bnVsbH07dmFyIHk9TWF0aC5wb3coMiwtNTEpLG09MS15O2gucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZj1mdW5jdGlvbihlLHQpe3ZhciByPXQubXVsdGlwbGVPZnx8dC5kaXZpc2libGVCeTtpZih2b2lkIDA9PT1yKXJldHVybiBudWxsO2lmKCJudW1iZXIiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49eSYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sIiIsIiIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heD1mdW5jdGlvbihlLHQpe2lmKCJudW1iZXIiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LCIiLCIvbWluaW11bSIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWluaW11bSYmZT09PXQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sIiIsIi9leGNsdXNpdmVNaW5pbXVtIixudWxsLGUsdCl9aWYodm9pZCAwIT09dC5tYXhpbXVtKXtpZihlPnQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNLHt2YWx1ZTplLG1heGltdW06dC5tYXhpbXVtfSwiIiwiL21heGltdW0iLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LCIiLCIvZXhjbHVzaXZlTWF4aW11bSIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5hTj1mdW5jdGlvbihlLHQpe3JldHVybiJudW1iZXIiIT10eXBlb2YgZT9udWxsOmlzTmFOKGUpPT09ITB8fGU9PT0xLzB8fGU9PT0tKDEvMCk/dGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9OT1RfQV9OVU1CRVIse3ZhbHVlOmV9LCIiLCIvdHlwZSIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdMZW5ndGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/bnVsbDp2b2lkIDAhPT10Lm1pbkxlbmd0aCYmZS5sZW5ndGg8dC5taW5MZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluTGVuZ3RofSwiIiwiL21pbkxlbmd0aCIsbnVsbCxlLHQpOnZvaWQgMCE9PXQubWF4TGVuZ3RoJiZlLmxlbmd0aD50Lm1heExlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heExlbmd0aH0sIiIsIi9tYXhMZW5ndGgiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm49ZnVuY3Rpb24oZSx0KXtpZigic3RyaW5nIiE9dHlwZW9mIGV8fCJzdHJpbmciIT10eXBlb2YgdC5wYXR0ZXJuJiYhKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpcmV0dXJuIG51bGw7dmFyIHI7aWYodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKXI9dC5wYXR0ZXJuO2Vsc2V7dmFyIG4sbz0iIixpPXQucGF0dGVybi5tYXRjaCgvXlwvKC4rKVwvKFtpbWddKikkLyk7aT8obj1pWzFdLG89aVsyXSk6bj10LnBhdHRlcm4scj1uZXcgUmVnRXhwKG4sbyl9cmV0dXJuIHIudGVzdChlKT9udWxsOnRoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfUEFUVEVSTix7cGF0dGVybjp0LnBhdHRlcm59LCIiLCIvcGF0dGVybiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT90aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheUl0ZW1zKGUsdCxyKXx8bnVsbDpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5TGVuZ3RoPWZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIHZvaWQgMCE9PXQubWluSXRlbXMmJmUubGVuZ3RoPHQubWluSXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluSXRlbXN9LCIiLCIvbWluSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4SXRlbXMmJmUubGVuZ3RoPnQubWF4SXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhJdGVtc30sIiIsIi9tYXhJdGVtcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zPWZ1bmN0aW9uKGUsdCl7aWYodC51bmlxdWVJdGVtcylmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylmb3IodmFyIG89cisxO288ZS5sZW5ndGg7bysrKWlmKG4oZVtyXSxlW29dKSl7dmFyIGk9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX1VOSVFVRSx7bWF0Y2gxOnIsbWF0Y2gyOm99LCIiLCIvdW5pcXVlSXRlbXMiLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKGkpKXJldHVybiBpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXM9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuaXRlbXMpcmV0dXJuIG51bGw7dmFyIG4sbztpZihBcnJheS5pc0FycmF5KHQuaXRlbXMpKXtmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG88dC5pdGVtcy5sZW5ndGgpe2lmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXNbb10sW29dLFsiaXRlbXMiLG9dLHIrIi8iK28pKXJldHVybiBufWVsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsSXRlbXMpaWYoImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsSXRlbXMpe2lmKCF0LmFkZGl0aW9uYWxJdGVtcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0FERElUSU9OQUxfSVRFTVMse30sIi8iK28sIi9hZGRpdGlvbmFsSXRlbXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbEl0ZW1zLFtvXSxbImFkZGl0aW9uYWxJdGVtcyJdLHIrIi8iK28pKXJldHVybiBufWVsc2UgZm9yKG89MDtvPGUubGVuZ3RoO28rKylpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0Lml0ZW1zLFtvXSxbIml0ZW1zIl0scisiLyIrbykpcmV0dXJuIG47cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0PWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4ib2JqZWN0IiE9dHlwZW9mIGV8fG51bGw9PT1lfHxBcnJheS5pc0FycmF5KGUpP251bGw6dGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj1PYmplY3Qua2V5cyhlKTtyZXR1cm4gdm9pZCAwIT09dC5taW5Qcm9wZXJ0aWVzJiZuLmxlbmd0aDx0Lm1pblByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1pbmltdW06dC5taW5Qcm9wZXJ0aWVzfSwiIiwiL21pblByb3BlcnRpZXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4UHJvcGVydGllcyYmbi5sZW5ndGg+dC5tYXhQcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtYXhpbXVtOnQubWF4UHJvcGVydGllc30sIiIsIi9tYXhQcm9wZXJ0aWVzIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PXQucmVxdWlyZWQpZm9yKHZhciByPTA7cjx0LnJlcXVpcmVkLmxlbmd0aDtyKyspe3ZhciBuPXQucmVxdWlyZWRbcl07aWYodm9pZCAwPT09ZVtuXSl7dmFyIG89dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9SRVFVSVJFRCx7a2V5Om59LCIiLCIvcmVxdWlyZWQvIityLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKG8pKXJldHVybiBvfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtmb3IodmFyIG8gaW4gZSl7dmFyIGk9cisiLyIrby5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSxhPSExO2lmKHZvaWQgMCE9PXQucHJvcGVydGllcyYmdm9pZCAwIT09dC5wcm9wZXJ0aWVzW29dJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnByb3BlcnRpZXNbb10sW29dLFsicHJvcGVydGllcyIsb10saSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PXQucGF0dGVyblByb3BlcnRpZXMpZm9yKHZhciBzIGluIHQucGF0dGVyblByb3BlcnRpZXMpe3ZhciB1PW5ldyBSZWdFeHAocyk7aWYodS50ZXN0KG8pJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnBhdHRlcm5Qcm9wZXJ0aWVzW3NdLFtvXSxbInBhdHRlcm5Qcm9wZXJ0aWVzIixzXSxpKSkpcmV0dXJuIG59aWYoYSl0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSk7ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSksImJvb2xlYW4iPT10eXBlb2YgdC5hZGRpdGlvbmFsUHJvcGVydGllcyl7aWYoIXQuYWRkaXRpb25hbFByb3BlcnRpZXMmJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLHtrZXk6b30sIiIsIi9hZGRpdGlvbmFsUHJvcGVydGllcyIsbnVsbCxlLHQpLnByZWZpeFdpdGgobyxudWxsKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbFByb3BlcnRpZXMsW29dLFsiYWRkaXRpb25hbFByb3BlcnRpZXMiXSxpKSlyZXR1cm4gbn1lbHNlIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtpZih2b2lkIDAhPT10LmRlcGVuZGVuY2llcylmb3IodmFyIG8gaW4gdC5kZXBlbmRlbmNpZXMpaWYodm9pZCAwIT09ZVtvXSl7dmFyIGk9dC5kZXBlbmRlbmNpZXNbb107aWYoInN0cmluZyI9PXR5cGVvZiBpKXtpZih2b2lkIDA9PT1lW2ldJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOml9LCIiLCIiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLCJkZXBlbmRlbmNpZXMiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKEFycmF5LmlzQXJyYXkoaSkpZm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV07aWYodm9pZCAwPT09ZVtzXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzpzfSwiIiwiLyIrYSxudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG8pLnByZWZpeFdpdGgobnVsbCwiZGVwZW5kZW5jaWVzIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxpLFtdLFsiZGVwZW5kZW5jaWVzIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQW55T2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT25lT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTm90KGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbGxPZilyZXR1cm4gbnVsbDtmb3IodmFyIG4sbz0wO288dC5hbGxPZi5sZW5ndGg7bysrKXt2YXIgaT10LmFsbE9mW29dO2lmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sWyJhbGxPZiIsb10scikpcmV0dXJuIG59cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQW55T2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQuYW55T2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPVtdLGE9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKTtmb3IodmFyIHM9ITAsdT0wO3U8dC5hbnlPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgbD10LmFueU9mW3VdLGM9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGwsW10sWyJhbnlPZiIsdV0scik7aWYobnVsbD09PWYmJmM9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIHAgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1twXT0hMCxkZWxldGUgbltwXTtmb3IodmFyIGQgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW2RdfHwobltkXT0hMCk7cz0hMTtjb250aW51ZX1yZXR1cm4gbnVsbH1mJiZpLnB1c2goZi5wcmVmaXhXaXRoKG51bGwsIiIrdSkucHJlZml4V2l0aChudWxsLCJhbnlPZiIpKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLHM/KGk9aS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UoYSkpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy5jcmVhdGVFcnJvcih2LkFOWV9PRl9NSVNTSU5HLHt9LCIiLCIvYW55T2YiLGksZSx0KSk6dm9pZCAwfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm9uZU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1udWxsLGE9W10scz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgdT0wO3U8dC5vbmVPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgbD10Lm9uZU9mW3VdLGM9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGwsW10sWyJvbmVPZiIsdV0scik7aWYobnVsbD09PWYmJmM9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKG51bGwhPT1pKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTVVMVElQTEUse2luZGV4MTppLGluZGV4Mjp1fSwiIiwiL29uZU9mIixudWxsLGUsdCk7aWYoaT11LHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBwIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bcF09ITAsZGVsZXRlIG5bcF07Zm9yKHZhciBkIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1tkXXx8KG5bZF09ITApfX1lbHNlIGYmJmEucHVzaChmKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1pPyhhPWEuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTUlTU0lORyx7fSwiIiwiL29uZU9mIixhLGUsdCkpOih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLG51bGwpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5vdD1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5ub3QpcmV0dXJuIG51bGw7dmFyIG4sbyxpPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYT10aGlzLnZhbGlkYXRlQWxsKGUsdC5ub3QsbnVsbCxudWxsLHIpLHM9dGhpcy5lcnJvcnMuc2xpY2UoaSk7cmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsaSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1hJiYwPT09cy5sZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2Lk5PVF9QQVNTRUQse30sIiIsIi9ub3QiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWE9ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmxpbmtzKXJldHVybiBudWxsO2Zvcih2YXIgbyxpPTA7aTx0LmxpbmtzLmxlbmd0aDtpKyspe3ZhciBhPXQubGlua3NbaV07aWYoImRlc2NyaWJlZGJ5Ij09PWEucmVsKXtmb3IodmFyIHM9bmV3IHIoYS5ocmVmKSx1PSEwLGw9MDtsPHMudmFyTmFtZXMubGVuZ3RoO2wrKylpZighKHMudmFyTmFtZXNbbF1pbiBlKSl7dT0hMTticmVha31pZih1KXt2YXIgYz1zLmZpbGxGcm9tT2JqZWN0KGUpLGY9eyRyZWY6Y307aWYobz10aGlzLnZhbGlkYXRlQWxsKGUsZixbXSxbImxpbmtzIixpXSxuKSlyZXR1cm4gb319fX07dmFyIHY9e0lOVkFMSURfVFlQRTowLEVOVU1fTUlTTUFUQ0g6MSxBTllfT0ZfTUlTU0lORzoxMCxPTkVfT0ZfTUlTU0lORzoxMSxPTkVfT0ZfTVVMVElQTEU6MTIsTk9UX1BBU1NFRDoxMyxOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LFNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCxBUlJBWV9MRU5HVEhfU0hPUlQ6NDAwLEFSUkFZX0xFTkdUSF9MT05HOjQwMSxBUlJBWV9VTklRVUU6NDAyLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6NDAzLEZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSxDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLFVOS05PV05fUFJPUEVSVFk6MWUzfSxfPXt9O2Zvcih2YXIgYiBpbiB2KV9bdltiXV09Yjt2YXIgZz17SU5WQUxJRF9UWVBFOiJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSkiLEVOVU1fTUlTTUFUQ0g6Ik5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9IixBTllfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tICJhbnlPZiInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gIm9uZU9mIicsT05FX09GX01VTFRJUExFOidEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSAib25lT2YiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfScsTk9UX1BBU1NFRDonRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tICJub3QiJyxOVU1CRVJfTVVMVElQTEVfT0Y6IlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgbXVsdGlwbGUgb2Yge211bHRpcGxlT2Z9IixOVU1CRVJfTUlOSU1VTToiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRToiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWluaW11bSB7bWluaW11bX0iLE5VTUJFUl9NQVhJTVVNOiJWYWx1ZSB7dmFsdWV9IGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfSIsTlVNQkVSX05PVF9BX05VTUJFUjoiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIiLFNUUklOR19MRU5HVEhfU0hPUlQ6IlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX0iLFNUUklOR19MRU5HVEhfTE9ORzoiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19IixTVFJJTkdfUEFUVEVSTjoiU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm46IHtwYXR0ZXJufSIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTToiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19IixPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19IixPQkpFQ1RfUkVRVUlSRUQ6Ik1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9IixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWQiLE9CSkVDVF9ERVBFTkRFTkNZX0tFWToiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSkiLEFSUkFZX0xFTkdUSF9TSE9SVDoiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19IixBUlJBWV9MRU5HVEhfTE9ORzoiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX0iLEFSUkFZX1VOSVFVRToiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KSIsQVJSQVlfQURESVRJT05BTF9JVEVNUzoiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZCIsRk9STUFUX0NVU1RPTToiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pIixLRVlXT1JEX0NVU1RPTToiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pIixDSVJDVUxBUl9SRUZFUkVOQ0U6IkNpcmN1bGFyICRyZWZzOiB7dXJsc30iLFVOS05PV05fUFJPUEVSVFk6IlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpIn07bC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLGwucHJvdG90eXBlLmNvbnN0cnVjdG9yPWwsbC5wcm90b3R5cGUubmFtZT0iVmFsaWRhdGlvbkVycm9yIixsLnByb3RvdHlwZS5wcmVmaXhXaXRoPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PWUmJihlPWUucmVwbGFjZSgvfi9nLCJ+MCIpLnJlcGxhY2UoL1wvL2csIn4xIiksdGhpcy5kYXRhUGF0aD0iLyIrZSt0aGlzLmRhdGFQYXRoKSxudWxsIT09dCYmKHQ9dC5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSx0aGlzLnNjaGVtYVBhdGg9Ii8iK3QrdGhpcy5zY2hlbWFQYXRoKSxudWxsIT09dGhpcy5zdWJFcnJvcnMpZm9yKHZhciByPTA7cjx0aGlzLnN1YkVycm9ycy5sZW5ndGg7cisrKXRoaXMuc3ViRXJyb3JzW3JdLnByZWZpeFdpdGgoZSx0KTtyZXR1cm4gdGhpc307dmFyIEU9e30saj1mKCk7cmV0dXJuIGouYWRkTGFuZ3VhZ2UoImVuLWdiIixnKSxqLnR2ND1qLGp9KX0se31dLDEwMTpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyLk1lc3NhZ2VGYWN0b3J5PXZvaWQgMDt2YXIgbz1lKCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeSIpLGk9bihvKTtyLk1lc3NhZ2VGYWN0b3J5PWlbImRlZmF1bHQiXX0seyIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeSI6MTA0fV0sMTAyOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZVR5cGU9ci5NZXNzYWdlPXZvaWQgMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxpPW4obyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxzPW4oYSksdT1yLk1lc3NhZ2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscixuLG8sYSl7KDAsaVsiZGVmYXVsdCJdKSh0aGlzLGUpLHRoaXMuaWQ9dCx0aGlzLmZyb209cix0aGlzLnRvPW4sdGhpcy50eXBlPW8sdGhpcy5ib2R5PWF9cmV0dXJuKDAsc1siZGVmYXVsdCJdKShlLFt7a2V5OiJhc3NlcnRJZGVudGl0eSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLCB0b2tlbiB0byBiZSByZW1vdmVkLCBhbmQgYXNzZXJ0ZWRJZGVudGl0eSBtdXN0IGJlIHByb3ZpZGVkIik7dmFyIHI9dGhpcy5ib2R5O3JldHVybiByLmlkVG9rZW49bnVsbCxyLmFzc2VydGVkSWRlbnRpdHk9dCx0aGlzLmJvZHk9cix0aGlzfX0se2tleToiYWRkSWRUb2tlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLCB0b2tlbiB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5pZFRva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319LHtrZXk6ImFkZEFjY2Vzc1Rva2VuIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkIik7dmFyIHQ9dGhpcy5ib2R5O3JldHVybiB0LmFjY2Vzc1Rva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319XSksZX0oKTtyLk1lc3NhZ2VUeXBlPXtDUkVBVEU6ImNyZWF0ZSIsUkVBRDoicmVhZCIsVVBEQVRFOiJ1cGRhdGUiLERFTEVURToiZGVsZXRlIixTVUJTQ1JJQkU6InN1YnNjcmliZSIsClVOU1VCU0NSSUJFOiJ1bnN1YnNjcmliZSIsUkVTUE9OU0U6InJlc3BvbnNlIixGT1JXQVJEOiJmb3J3YXJkIixFWEVDVVRFOiJleGVjdXRlIn07clsiZGVmYXVsdCJdPXV9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMX1dLDEwMzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fWZ1bmN0aW9uIG8oZSl7dmFyIHQ9KDAsdVsiZGVmYXVsdCJdKShlKS5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gdFtlW3JdXT1yLHR9LHt9KTtyZXR1cm4oMCxhWyJkZWZhdWx0Il0pKCgwLHVbImRlZmF1bHQiXSkoZSkucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHRbcl09ZVtyXSx0fSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pKX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5VUERBVEVfT1BFUkFUSU9OPXIuQVRUUklCVVRFX1RZUEU9ci5SRUFTT05fUEhSQVNFPXIuUkVTUE9OU0VfQ09ERT1yLkV4ZWN1dGVNZXNzYWdlQm9keT1yLlJlc3BvbnNlTWVzc2FnZUJvZHk9ci5Gb3J3YXJkTWVzc2FnZUJvZHk9ci5VcGRhdGVNZXNzYWdlQm9keT1yLkRlbGV0ZU1lc3NhZ2VCb2R5PXIuUmVhZE1lc3NhZ2VCb2R5PXIuQ3JlYXRlTWVzc2FnZUJvZHk9ci5NZXNzYWdlQm9keT12b2lkIDA7dmFyIGk9ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9mcmVlemUiKSxhPW4oaSkscz1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiKSx1PW4ocyksbD1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiKSxjPW4obCksZj1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIpLHA9bihmKSxkPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyIpLGg9bihkKSx5PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLG09bih5KSx2PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLF89bih2KTtyLkVudW09bzt2YXIgYj1yLk1lc3NhZ2VCb2R5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LHIsbixvLGkpeygwLG1bImRlZmF1bHQiXSkodGhpcyxlKSx0aGlzLmlkVG9rZW49dCx0aGlzLmFjY2Vzc1Rva2VuPXIsdGhpcy5yZXNvdXJjZT1uLHRoaXMuc2NoZW1hPW8sdGhpcy5hc3NlcnRlZElkZW50aXR5PWl9cmV0dXJuKDAsX1siZGVmYXVsdCJdKShlLFt7a2V5OiJhZGRWaWEiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcigidmlhIFVSTCB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZCIpO3JldHVybiB0aGlzLnZpYT1lLHRoaXN9fV0pLGV9KCksZz0oci5DcmVhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpe2lmKCgwLG1bImRlZmF1bHQiXSkodGhpcyx0KSwhZSl0aHJvdyBuZXcgRXJyb3IoIlRoZSB2YWx1ZSBwYXJhbWV0ZXIgaXMgbnVsbCIpO3ZhciB1PSgwLHBbImRlZmF1bHQiXSkodGhpcywoMCxjWyJkZWZhdWx0Il0pKHQpLmNhbGwodGhpcyxuLG8saSxhLHMsYSxzKSk7cmV0dXJuIHUudmFsdWU9ZSxyJiYodS5wb2xpY3k9ciksdX1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksdH0oYiksci5SZWFkTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzLHUpeygwLG1bImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgbD0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihsLmF0dHJpYnV0ZT1hKSxzJiYobC5jcml0ZXJpYVN5bnRheD1zKSx1JiYobC5jcml0ZXJpYT11KSxsfXJldHVybigwLGhbImRlZmF1bHQiXSkodCxlKSx0fShiKSxyLkRlbGV0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpe2lmKCgwLG1bImRlZmF1bHQiXSkodGhpcyx0KSxuIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBzPSgwLHBbImRlZmF1bHQiXSkodGhpcywoMCxjWyJkZWZhdWx0Il0pKHQpLmNhbGwodGhpcyxlLHIsbnVsbCxvLGkpKTtzLmNoaWxkcmVuUmVzb3VyY2VzPW59ZWxzZSB2YXIgcz0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihzLmF0dHJpYnV0ZT1hKSwoMCxwWyJkZWZhdWx0Il0pKHMpfXJldHVybigwLGhbImRlZmF1bHQiXSkodCxlKSx0fShiKSxyLlVwZGF0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7KDAsbVsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciB1PSgwLHBbImRlZmF1bHQiXSkodGhpcywoMCxjWyJkZWZhdWx0Il0pKHQpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gdS5hdHRyaWJ1dGU9YSx1LnZhbHVlPXMsdX1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksKDAsX1siZGVmYXVsdCJdKSh0LFt7a2V5OiJhZGRBdHRyaWJ1dGVUeXBlIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5hdHRyaWJ1dGVUeXBlPWUpfX0se2tleToiYWRkT3BlcmF0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5vcGVyYXRpb249ZSl9fV0pLHR9KGIpLHIuRm9yd2FyZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpeygwLG1bImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgcz0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHMubWVzc2FnZT1hLHN9cmV0dXJuKDAsaFsiZGVmYXVsdCJdKSh0LGUpLHR9KGIpLHIuUmVzcG9uc2VNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsbVsiZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciBhPSgwLHBbImRlZmF1bHQiXSkodGhpcywoMCxjWyJkZWZhdWx0Il0pKHQpLmNhbGwodGhpcyxlLHIsbikpO3JldHVybiBvJiYoYS5jb2RlPW8sYS5kZXNjcmlwdGlvbj1nW29dKSxpJiYoYS52YWx1ZT1pKSxhfXJldHVybigwLGhbImRlZmF1bHQiXSkodCxlKSx0fShiKSxyLkV4ZWN1dGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLG1bImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgdT0oMCxwWyJkZWZhdWx0Il0pKHRoaXMsKDAsY1siZGVmYXVsdCJdKSh0KS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUubWV0aG9kPWEscyYmKHMgaW5zdGFuY2VvZiBBcnJheT91LnBhcmFtcz1zOnUucGFyYW1zPVtzXSksdX1yZXR1cm4oMCxoWyJkZWZhdWx0Il0pKHQsZSksdH0oYiksci5SRVNQT05TRV9DT0RFPW8oezEwMDoiMTAwIiwxMDE6IjEwMSIsMjAwOiIyMDAiLDIwMToiMjAxIiwyMDI6IjIwMiIsMjAzOiIyMDMiLDIwNDoiMjA0IiwyMDU6IjIwNSIsMjA2OiIyMDYiLDMwMDoiMzAwIiwzMDE6IjMwMSIsMzAyOiIzMDIiLDMwMzoiMzAzIiwzMDQ6IjMwNCIsMzA1OiIzMDUiLDMwNzoiMzA3Iiw0MDA6IjQwMCIsNDAxOiI0MDEiLDQwMjoiNDAyIiw0MDM6IjQwMyIsNDA0OiI0MDQiLDQwNToiNDA1Iiw0MDY6IjQwNiIsNDA3OiI0MDciLDQwODoiNDA4Iiw0MDk6IjQwOSIsNDEwOiI0MTAiLDQxMToiNDExIiw0MTI6IjQxMiIsNDEzOiI0MTMiLDQxNDoiNDE0Iiw0MTU6IjQxNSIsNDE2OiI0MTYiLDQxNzoiNDE3Iiw0MjY6IjQyNiIsNTAwOiI1MDAiLDUwMToiNTAxIiw1MDI6IjUwMiIsNTAzOiI1MDMiLDUwNDoiNTA0Iiw1MDU6IjUwNSJ9KSxyLlJFQVNPTl9QSFJBU0U9byh7MTAwOiJDb250aW51ZSIsMTAxOiJTd2l0Y2hpbmcgUHJvdG9jb2xzIiwyMDA6Ik9LIiwyMDE6IkNyZWF0ZWQiLDIwMjoiQWNjZXB0ZWQiLDIwMzoiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24iLDIwNDoiTm8gQ29udGVudCIsMjA1OiJSZXNldCBDb250ZW50IiwyMDY6IlBhcnRpYWwgQ29udGVudCIsMzAwOiJNdWx0aXBsZSBDaG9pY2VzIiwzMDE6Ik1vdmVkIFBlcm1hbmVudGx5IiwzMDI6IkZvdW5kIiwzMDM6IlNlZSBPdGhlciIsMzA0OiJOb3QgTW9kaWZpZWQiLDMwNToiVXNlIFByb3h5IiwzMDc6IlRlbXBvcmFyeSBSZWRpcmVjdCIsNDAwOiJCYWQgUmVxdWVzdCIsNDAxOiJVbmF1dGhvcml6ZWQiLDQwMjoiUGF5bWVudCBSZXF1aXJlZCIsNDAzOiJGb3JiaWRkZW4iLDQwNDoiTm90IEZvdW5kIiw0MDU6Ik1ldGhvZCBOb3QgQWxsb3dlZCIsNDA2OiJOb3QgQWNjZXB0YWJsZSIsNDA3OiJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCIsNDA4OiJSZXF1ZXN0IFRpbWVvdXQiLDQwOToiQ29uZmxpY3QiLDQxMDoiR29uZSIsNDExOiJMZW5ndGggUmVxdWlyZWQiLDQxMjoiUHJlY29uZGl0aW9uIEZhaWxlZCIsNDEzOiJQYXlsb2FkIFRvbyBMYXJnZSIsNDE0OiJSZXF1ZXN0LVVSSSBUb28gTG9uZyIsNDE1OiJVbnN1cHBvcnRlZCBNZWRpYSBUeXBlIiw0MTY6IlJhbmdlIE5vdCBTYXRpc2ZpYWJsZSIsNDE3OiJFeHBlY3RhdGlvbiBGYWlsZWQiLDQyNjoiVXBncmFkZSBSZXF1aXJlZCIsNTAwOiJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IiLDUwMToiTm90IEltcGxlbWVudGVkIiw1MDI6IkJhZCBHYXRld2F5Iiw1MDM6IlNlcnZpY2UgVW5hdmFpbGFibGUiLDUwNDoiR2F0ZXdheSBUaW1lLW91dCIsNTA1OiJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZCJ9KSk7ci5BVFRSSUJVVEVfVFlQRT1vKHtPQkpFQ1Q6Ik9CSkVDVCIsQVJSQVk6IkFSUkFZIn0pLHIuVVBEQVRFX09QRVJBVElPTj1vKHtBREQ6IkFERCIsUkVNT1ZFOiJSRU1PVkUifSk7clsiZGVmYXVsdCJdPWJ9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9mcmVlemUiOjMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjo2LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjExLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjEzLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTR9XSwxMDQ6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5JZEdlbmVyYXRvcj12b2lkIDA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvciIpLGk9bihvKSxhPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLHM9bihhKSx1PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLGw9bih1KSxjPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLGY9bihjKSxwPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiksZD1uKHApLGg9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldCIpLHk9bihoKSxtPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyIpLHY9bihtKSxfPWUoIi4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qcyIpLGI9bihfKSxnPWUoIi4vTWVzc2FnZS5qcyIpLEU9bihnKSxqPWUoIi4vTWVzc2FnZUJvZHkuanMiKSx3PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyKXsoMCxsWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIG49KDAsZFsiZGVmYXVsdCJdKSh0aGlzLCgwLHNbImRlZmF1bHQiXSkodCkuY2FsbCh0aGlzLGUscikpO3JldHVybiBuLm15R2VuZXJhdG9yPShuZXcgTykuaWRNYWtlcigpLG59cmV0dXJuKDAsdlsiZGVmYXVsdCJdKSh0LGUpLCgwLGZbImRlZmF1bHQiXSkodCxbe2tleToidmFsaWRhdGUiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybigwLHlbImRlZmF1bHQiXSkoKDAsc1siZGVmYXVsdCJdKSh0LnByb3RvdHlwZSksInZhbGlkYXRlIix0aGlzKS5jYWxsKHRoaXMsZSl9fSx7a2V5OiJjcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvLCBhbmQgdmFsdWUgb2Ygb2JqZWN0IHRvIGJlIGNyZWF0ZWQgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBqLkNyZWF0ZU1lc3NhZ2VCb2R5KHIsbixudWxsLG51bGwsbnVsbCxudWxsLG51bGwpLGE9bmV3IEVbImRlZmF1bHQiXShvLGUsdCxnLk1lc3NhZ2VUeXBlLkNSRUFURSxpKTtyZXR1cm4gYX19LHtrZXk6ImNyZWF0ZUZvcndhcmRNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0bywgYW5kIG1lc3NhZ2UgdG8gZm9yd2FyZCBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGouRm9yd2FyZE1lc3NhZ2VCb2R5KG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxyKSxpPW5ldyBFWyJkZWZhdWx0Il0obixlLHQsZy5NZXNzYWdlVHlwZS5GT1JXQVJELG8pO3JldHVybiBpfX0se2tleToiY3JlYXRlRGVsZXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoImZyb20gYW5kIHRvIHBhcmFtZXRlcnMgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBqLkRlbGV0ZU1lc3NhZ2VCb2R5KG51bGwsbnVsbCxyLG4sbnVsbCxudWxsKSxhPW5ldyBFWyJkZWZhdWx0Il0obyxlLHQsZy5NZXNzYWdlVHlwZS5ERUxFVEUsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVVcGRhdGVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixvKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgYW5kIHRvIGFuZCB2YWx1ZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBpPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGE9bmV3IGouVXBkYXRlTWVzc2FnZUJvZHkobnVsbCxudWxsLG4sbnVsbCxudWxsLG8scikscz1uZXcgRVsiZGVmYXVsdCJdKGksZSx0LGcuTWVzc2FnZVR5cGUuVVBEQVRFLGEpO3JldHVybiBzfX0se2tleToiY3JlYXRlUmVhZE1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byByZWFkIGZyb20gTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBqLlJlYWRNZXNzYWdlQm9keShudWxsLG51bGwscixudWxsLG51bGwsbixudWxsLG51bGwpLGE9bmV3IEVbImRlZmF1bHQiXShvLGUsdCxnLk1lc3NhZ2VUeXBlLlJFQUQsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVTdWJzY3JpYmVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGouTWVzc2FnZUJvZHkobnVsbCxudWxsLHIsbnVsbCxudWxsKSxpPW5ldyBFWyJkZWZhdWx0Il0obixlLHQsZy5NZXNzYWdlVHlwZS5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OiJjcmVhdGVVbnN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgai5NZXNzYWdlQm9keShudWxsLG51bGwscixudWxsLG51bGwpLGk9bmV3IEVbImRlZmF1bHQiXShuLGUsdCxnLk1lc3NhZ2VUeXBlLlVOU1VCU0NSSUJFLG8pO3JldHVybiBpfX0se2tleToiY3JlYXRlRXhlY3V0ZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8gYW5kIHRoZSBtZXRob2QgdG8gZXhlY3V0ZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGouRXhlY3V0ZU1lc3NhZ2VCb2R5KG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxyLG4pLGE9bmV3IEVbImRlZmF1bHQiXShvLGUsdCxnLk1lc3NhZ2VUeXBlLkVYRUNVVEUsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVNZXNzYWdlUmVzcG9uc2UiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCF0KXRocm93IG5ldyBFcnJvcigicmVzcG9uc2UgQ29kZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBvPW5ldyBqLlJlc3BvbnNlTWVzc2FnZUJvZHkobnVsbCxudWxsLG51bGwsdCxyLG4pO3JldHVybiBuZXcgRVsiZGVmYXVsdCJdKGUuaWQsZS50byxlLmZyb20sZy5NZXNzYWdlVHlwZS5SRVNQT05TRSxvKX19LHtrZXk6ImdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcigibWVzc2FnZSBhbmQgcmVzcG9uc2UgY29kZSBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPWUuYm9keSxvPW4uaWRUb2tlbixpPW4uYWNjZXNzVG9rZW4sYT1uLnJlc291cmNlLHM9bmV3IGouUmVzcG9uc2VNZXNzYWdlQm9keShvLGksYSx0LHIpLHU9dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWU7cmV0dXJuIG5ldyBFWyJkZWZhdWx0Il0odSxlLnRvLGUuZnJvbSxnLk1lc3NhZ2VUeXBlLlJFU1BPTlNFLHMpfX1dKSx0fShiWyJkZWZhdWx0Il0pLE89ci5JZEdlbmVyYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxsWyJkZWZhdWx0Il0pKHRoaXMsZSl9cmV0dXJuKDAsZlsiZGVmYXVsdCJdKShlLFt7a2V5OiJpZE1ha2VyIix2YWx1ZTppWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiB0KCl7dmFyIGU7cmV0dXJuIGlbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmU9MTtjYXNlIDE6aWYoIShlPDFlNikpe3QubmV4dD02O2JyZWFrfXJldHVybiB0Lm5leHQ9NCxlKys7Y2FzZSA0OnQubmV4dD0xO2JyZWFrO2Nhc2UgNjpjYXNlImVuZCI6cmV0dXJuIHQuc3RvcCgpfX0sdCx0aGlzKX0pfV0pLGV9KCk7clsiZGVmYXVsdCJdPXd9LHsiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIjoxMDUsIi4vTWVzc2FnZS5qcyI6MTAyLCIuL01lc3NhZ2VCb2R5LmpzIjoxMDMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2dldCI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxNCwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvciI6MTZ9XSwxMDU6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5SZXRoaW5rT2JqZWN0PXZvaWQgMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siKSxpPW4obyksYT1lKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKSxzPW4oYSksdT1lKCJ0djQiKSxsPW4odSksYz1yLlJldGhpbmtPYmplY3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscil7KDAsaVsiZGVmYXVsdCJdKSh0aGlzLGUpO3RoaXMudmFsaWRhdGlvbj10LHRoaXMuc2NoZW1hPXJ9cmV0dXJuKDAsc1siZGVmYXVsdCJdKShlLFt7a2V5OiJ2YWxpZGF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuISF0aGlzLnNjaGVtYSYmbFsiZGVmYXVsdCJdLnZhbGlkYXRlKGUsdGhpcy5zY2hlbWEpfX1dKSxlfSgpO3JbImRlZmF1bHQiXT1jfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTEsdHY0OjEwMH1dfSx7fSxbMTAxXSkoMTAxKX0pOwoKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiX3Byb2Nlc3MiOjM4OH1dLDM5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIE1pbmltYWwgaW50ZXJmYWNlIGFuZCBpbXBsZW1lbnRhdGlvbiB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzLiBJdCBjYW4gYmUgcmV1c2VkIGluIG1hbnkgdHlwZSBvZiBjb21wb25lbnRzLgoqIENvbXBvbmVudHMgdGhhdCBuZWVkIGEgbWVzc2FnZSBzeXN0ZW0gc2hvdWxkIHJlY2VpdmUgdGhpcyBjbGFzcyBhcyBhIGRlcGVuZGVuY3kgb3IgZXh0ZW5kIGl0LgoqIEV4dGVuc2lvbnMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByaXZhdGUgbWV0aG9kczogX29uUG9zdE1lc3NhZ2UgYW5kIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIKKi8KCnZhciBCdXMgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQogIF9tc2dJZDogbnVtYmVyOwogIF9zdWJzY3JpcHRpb25zOiA8dXJsOiBNc2dMaXN0ZW5lcltdPgogICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXIKICBfcmVzcG9uc2VDYWxsYmFja3M6IDx1cmwraWQ6IChtc2cpID0+IHZvaWQ+CiAgICovCgogIGZ1bmN0aW9uIEJ1cygpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEJ1cyk7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIF90aGlzLl9tc2dJZCA9IDA7CiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9OwoKICAgIF90aGlzLl9yZXNwb25zZVRpbWVPdXQgPSA1MDAwOyAvL2RlZmF1bHQgdG8gM3MKICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrcyA9IHt9OwoKICAgIF90aGlzLl9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKTsKICB9CgogIC8qKgogICogUmVnaXN0ZXIgbGlzdGVuZXIgdG8gcmVjZWl2ZSBtZXNzYWdlIHdoZW4gIm1zZy50byA9PT0gdXJsIi4KICAqIFNwZWNpYWwgdXJsICIqIiBmb3IgZGVmYXVsdCBsaXN0ZW5lciBpcyBhY2NlcHRlZCB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzLgogICogQHBhcmFtIHtVUkx9IHVybCBBZGRyZXNzIHRvIGludGVyY2VwdCwgdGhhIGlzIGluIHRoZSBtZXNzYWdlICJ0byIKICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyIGxpc3RlbmVyCiAgKiBAcmV0dXJuIHtNc2dMaXN0ZW5lcn0gaW5zdGFuY2Ugb2YgTXNnTGlzdGVuZXIKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQnVzLCBbewogICAga2V5OiAnYWRkTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHVybCwgbGlzdGVuZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpdGVtID0gbmV3IE1zZ0xpc3RlbmVyKF90aGlzLl9zdWJzY3JpcHRpb25zLCB1cmwsIGxpc3RlbmVyKTsKICAgICAgdmFyIGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgICAgaWYgKCFpdGVtTGlzdCkgewogICAgICAgIGl0ZW1MaXN0ID0gW107CiAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXSA9IGl0ZW1MaXN0OwogICAgICB9CgogICAgICBpdGVtTGlzdC5wdXNoKGl0ZW0pOwogICAgICByZXR1cm4gaXRlbTsKICAgIH0KCiAgICAvKioKICAgICAqIE1hbnVhbGx5IGFkZCBhIHJlc3BvbnNlIGxpc3RlbmVyLiBPbmx5IG9uZSBsaXN0ZW5lciBwZXIgbWVzc2FnZSBJRCBzaG91bGQgZXhpc3QuCiAgICAgKiBBVEVOVElPTiwgdGhlcmUgaXMgbm8gdGltZW91dCBmb3IgdGhpcyBsaXN0ZW5lci4KICAgICAqIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgcmVtb3ZlZCB3aXRoIGEgcmVtb3ZlUmVzcG9uc2VMaXN0ZW5lciwgZmFpbGluZyB0byBkbyB0aGlzIHdpbGwgcmVzdWx0IGluIGEgdW5yZWxlYXNlZCBtZW1vcnkgcHJvYmxlbS4KICAgICAqIEBwYXJhbSB7VVJMfSB1cmwgT3JpZ2luIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2Ugc2VudCwgIm1zZy5mcm9tIi4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UuCiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNwb25zZUxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgcmVzcG9uc2UKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRSZXNwb25zZUxpc3RlbmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQsIHJlc3BvbnNlTGlzdGVuZXIpIHsKICAgICAgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdID0gcmVzcG9uc2VMaXN0ZW5lcjsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSB0aGUgcmVzcG9uc2UgbGlzdGVuZXIuCiAgICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsICJtc2cuZnJvbSIuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgIE1lc3NhZ2UgSUQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwb3N0TWVzc2FnZQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZVJlc3BvbnNlTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCkgewogICAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdOwogICAgfQoKICAgIC8qKgogICAgICogUmVtb3ZlIGFsbCBleGlzdGVudCBsaXN0ZW5lcnMgZm9yIHRoZSBVUkwKICAgICAqIEBwYXJhbSAge1VSTH0gdXJsIEFkZHJlc3MgcmVnaXN0ZXJlZAogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlbW92ZUFsbExpc3RlbmVyc09mJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnNPZih1cmwpIHsKICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTsKICAgIH0KCiAgICAvKioKICAgICAqIEhlbHBlciBtZXRob2QgdG8gYmluZCBsaXN0ZW5lcnMgKGluIGJvdGggZGlyZWN0aW9ucykgaW50byBvdGhlciBNaW5pQnVzIHRhcmdldC4KICAgICAqIEBwYXJhbSAge1VSTH0gb3V0VXJsIE91dGJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gInRoaXMgLT4gdGFyZ2V0IgogICAgICogQHBhcmFtICB7VVJMfSBpblVybCBJbmJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gInRhcmdldCAtPiB0aGlzIgogICAgICogQHBhcmFtICB7TWluaUJ1c30gdGFyZ2V0IFRoZSBvdGhlciB0YXJnZXQgTWluaUJ1cwogICAgICogQHJldHVybiB7Qm91bmR9IGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBwcm9wZXJ0aWVzIFt0aGlzTGlzdGVuZXIsIHRhcmdldExpc3RlbmVyXSBhbmQgdGhlIHVuYmluZCBtZXRob2QuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYmluZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYmluZChvdXRVcmwsIGluVXJsLCB0YXJnZXQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHRoaXNMaXN0biA9IF90aGlzLmFkZExpc3RlbmVyKG91dFVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShtc2cpOwogICAgICB9KTsKCiAgICAgIHZhciB0YXJnZXRMaXN0biA9IHRhcmdldC5hZGRMaXN0ZW5lcihpblVybCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgIH0pOwoKICAgICAgcmV0dXJuIHsKICAgICAgICB0aGlzTGlzdGVuZXI6IHRoaXNMaXN0biwKICAgICAgICB0YXJnZXRMaXN0ZW5lcjogdGFyZ2V0TGlzdG4sCiAgICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7CiAgICAgICAgICBfdGhpczIudGhpc0xpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgICAgX3RoaXMyLnRhcmdldExpc3RlbmVyLnJlbW92ZSgpOwogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gZGVmYXVsdCBsaXN0ZW5lcnMKCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbkRlZmF1bHQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdWJsaXNoT25EZWZhdWx0KG1zZykgewogICAgICAvL2lzIHRoZXJlIGFueSAiKiIgKGRlZmF1bHQpIGxpc3RlbmVycz8KICAgICAgdmFyIGl0ZW1MaXN0ID0gdGhpcy5fc3Vic2NyaXB0aW9uc1snKiddOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICB0aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7CiAgICAgIH0KICAgIH0KCiAgICAvL3B1Ymxpc2ggb24gYSBzdWJzY3JpcHRpb24gbGlzdC4KCiAgfSwgewogICAga2V5OiAnX3B1Ymxpc2hPbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKSB7CiAgICAgIGl0ZW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKHN1YikgewogICAgICAgIHN1Yi5fY2FsbGJhY2sobXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3Jlc3BvbnNlQ2FsbGJhY2snLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzCiAgICAgIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciByZXNwb25zZUlkID0gaW5Nc2cuZnJvbSArIGluTXNnLmlkOwogICAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdID0gcmVzcG9uc2VDYWxsYmFjazsKCiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICAgICAgdmFyIGVycm9yTXNnID0gewogICAgICAgICAgICAgICAgaWQ6IGluTXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLAogICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDgsIGRlc2M6ICdSZXNwb25zZSB0aW1lb3V0IScsIHZhbHVlOiBpbk1zZyB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgcmVzcG9uc2VGdW4oZXJyb3JNc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0KTsKICAgICAgICB9KSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX29uUmVzcG9uc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlc3BvbnNlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlSWQgPSBtc2cudG8gKyBtc2cuaWQ7CiAgICAgICAgdmFyIHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwoKICAgICAgICAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyCiAgICAgICAgaWYgKG1zZy5ib2R5LmNvZGUgPj0gMjAwKSB7CiAgICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7CiAgICAgICAgICByZXNwb25zZUZ1bihtc2cpOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlCgogIH0sIHsKICAgIGtleTogJ19vbk1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbk1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dOwogICAgICAgIGlmIChpdGVtTGlzdCkgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2VuSWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZW5JZChpbk1zZykgewogICAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/CiAgICAgIC8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIQogICAgICAvL1BlciBVUkwsIGNhbiBiZSBhIGxvdCBvZiBkYXRhIHRvIG1haW50YWluIQogICAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LgogICAgICBpZiAoIWluTXNnLmlkIHx8IGluTXNnLmlkID09PSAwKSB7CiAgICAgICAgdGhpcy5fbXNnSWQrKzsKICAgICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFNlbmQgbWVzc2FnZXMgdG8gbG9jYWwgbGlzdGVuZXJzLCBvciBpZiBub3QgZXhpc3RzIHRvIGV4dGVybmFsIGxpc3RlbmVycy4KICAgICogSXQncyBoYXMgYW4gb3B0aW9uYWwgbWVjaGFuaXNtIGZvciBhdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVycy4KICAgICogVGhlIHJlc3BvbnNlIGhhbmRsZXIgd2lsbCBiZSB1bnJlZ2lzdGVyZWQgYWZ0ZXIgcmVjZWl2aW5nIHRoZSByZXNwb25zZSwgb3IgYWZ0ZXIgcmVzcG9uc2UgdGltZW91dCAoZGVmYXVsdCB0byAzcykuCiAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIHNlbmQuIE1lc3NhZ2UgSUQgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgbWVzc2FnZS4KICAgICogQHBhcmFtICB7RnVuY3Rpb259IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgcGFyYW1ldGVyLCBpZiB0aGUgZGV2ZWxvcGVyIHdoYXQncyBhdXRvbWF0aWMgcmVzcG9uc2UgbWFuYWdlbWVudC4KICAgICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZXNzYWdlIElELCBpbiBjYXNlIGl0IHNob3VsZCBiZSBuZWVkZWQgZm9yIG1hbnVhbCBtYW5hZ2VtZW50IG9mIHRoZSByZXNwb25zZSBoYW5kbGVyLgogICAgKi8KCiAgfSwgewogICAga2V5OiAncG9zdE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7fQoKICAgIC8qKgogICAgICogTm90IHB1YmxpYyBhdmFpbGFibGUsIHVzZWQgYnkgdGhlIGNsYXNzIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbiwgdG8gcHJvY2VzcyBtZXNzYWdlcyBmcm9tIHRoZSBwdWJsaWMgInBvc3RNZXNzYWdlIiB3aXRob3V0IGEgcmVnaXN0ZXJlZCBsaXN0ZW5lci4KICAgICAqIFVzZWQgdG8gc2VuZCB0aGUgbWVzc2FnZSB0byBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLgogICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSBtc2cgTWVzc2FnZQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19vblBvc3RNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Qb3N0TWVzc2FnZShtc2cpIHt9IC8qaW1wbGVtZW50YXRpb24gd2lsbCBzZW5kIG1lc3NhZ2UgdG8gZXh0ZXJuYWwgc3lzdGVtKi8KCiAgICAvKioKICAgICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgYWxsIG1lc3NhZ2VzIHRoYXQgZW50ZXIgdGhlIE1pbmlCdXMgZnJvbSBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLgogICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uZSB0aW1lIGluIHRoZSBjb25zdHJ1Y3RvciB0byByZWdpc3RlciBleHRlcm5hbCBsaXN0ZW5lcnMuCiAgICAgKiBUaGUgaW1wbGVtZW50YXRpb24gd2lsbCBwcm9iYWJseSBjYWxsIHRoZSAiX29uTWVzc2FnZSIgbWV0aG9kIHRvIHB1Ymxpc2ggaW4gdGhlIGxvY2FsIGxpc3RlbmVycy4KICAgICAqIERPIE5PVCBjYWxsICJwb3N0TWVzc2FnZSIsIHRoZXJlIGlzIGEgZGFuZ2VyIHRoYXQgdGhlIG1lc3NhZ2UgZW50ZXJzIGluIGEgY3ljbGUhCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcigpIHsvKmltcGxlbWVudGF0aW9uIHdpbGwgcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXIgYW5kIGNhbGwgInRoaXMuX29uTWVzc2FnZShtc2cpIiAqL30KICB9XSk7CiAgcmV0dXJuIEJ1czsKfSgpOwoKdmFyIE1zZ0xpc3RlbmVyID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfc3Vic2NyaXB0aW9uczogPHN0cmluZzogTXNnTGlzdGVuZXJbXT47CiAgX3VybDogc3RyaW5nOwogIF9jYWxsYmFjazogKG1zZykgPT4gdm9pZDsKICAqLwoKICBmdW5jdGlvbiBNc2dMaXN0ZW5lcihzdWJzY3JpcHRpb25zLCB1cmwsIGNhbGxiYWNrKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNc2dMaXN0ZW5lcik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnM7CiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNc2dMaXN0ZW5lciwgW3sKICAgIGtleTogJ3JlbW92ZScsCgoKICAgIC8qKgogICAgICogUmVtb3ZlIHRoaXMgbGlzdGVuZXIgZnJvbSB0aGUgQnVzCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgc3VicyA9IF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdOwogICAgICBpZiAoc3VicykgewogICAgICAgIHZhciBpbmRleCA9IHN1YnMuaW5kZXhPZihfdGhpcyk7CiAgICAgICAgc3Vicy5zcGxpY2UoaW5kZXgsIDEpOwoKICAgICAgICAvL2lmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMsIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uIGVudGlyZWx5LgogICAgICAgIGlmIChzdWJzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1zZ0xpc3RlbmVyOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBCdXM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDM5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX0J1czIgPSByZXF1aXJlKCcuL0J1cycpOwoKdmFyIF9CdXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnVzMik7Cgp2YXIgX1BpcGVsaW5lID0gcmVxdWlyZSgnLi9QaXBlbGluZScpOwoKdmFyIF9QaXBlbGluZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QaXBlbGluZSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIE1lc3NhZ2UgQlVTIEludGVyZmFjZSBpcyBhbiBleHRlbnNpb24gb2YgdGhlIEJ1cwoqIEl0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZGVmYXVsdCAnKicgbGlzdGVuZXIsIGluc3RlYWQgaXQgdXNlcyB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLikKKi8KLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgTWVzc2FnZUJ1cyA9IGZ1bmN0aW9uIChfQnVzKSB7CiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTWVzc2FnZUJ1cywgX0J1cyk7CgogIC8qIHByaXZhdGUKICBfcmVnaXN0cnk6IFJlZ2lzdHJ5CiAgX2ZvcndhcmRzOiB7IDxmcm9tLXVybD46IHsgZmw6IE1zZ0xpc3RlbmVyLCBzYW5kYm94VG9VcmxzOiBNYXAoU2FuZGJveCwgW3RvLXVybF0pLCB1cmxUb1NhbmRib3g6IHsgdG8tdXJsOiBTYW5kYm94IH0gfSB9CiAgIF9waXBlbGluZTogUGlwZWxpbmUKICAqLwoKICAvL1RPRE86IGZ1dHVyZSBvcHRpbWl6YXRpb24KICAvLzEuIG1lc3NhZ2UgYmF0Y2ggcHJvY2Vzc2luZyB3aXRoIHNldEludGVydmFsCiAgLy8yLiByZXNvbHZlIGRlZmF1bHQgZ2F0ZXdheS9wcm90b3N0dWIgd2l0aCByZWdpc3Rlci5yZXNvbHZlCgogIGZ1bmN0aW9uIE1lc3NhZ2VCdXMocmVnaXN0cnkpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE1lc3NhZ2VCdXMpOwoKICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKE1lc3NhZ2VCdXMpLmNhbGwodGhpcykpOwoKICAgIF90aGlzMi5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIF90aGlzMi5fZm9yd2FyZHMgPSB7fTsKCiAgICBfdGhpczIuX3BpcGVsaW5lID0gbmV3IF9QaXBlbGluZTIuZGVmYXVsdChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgY29uc29sZS5sb2coJ1BJUEVMSU5FLUVSUk9SOiAnLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZXJyb3IpKTsKICAgIH0pOwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1lc3NhZ2VCdXMsIFt7CiAgICBrZXk6ICdwb3N0TWVzc2FnZScsCgoKICAgIC8qKgogICAgICogUG9zdCBhIG1lc3NhZ2UgZm9yIHJvdXRpbmcuIEl0IHdpbGwgZmlyc3Qgc2VhcmNoIGZvciBhIGxpc3RlbmVyLCBpZiB0aGVyZSBpcyBubyBvbmUsIGl0IHNlbmRzIHRvIGEgZXh0ZXJuYWwgcm91dGluZyB1c2luZyB0aGUgX29uUG9zdE1lc3NhZ2UuCiAgICAgKiBFeHRlcm5hbCByb3V0aW5nIHVzZSB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLikgbWV0aG9kIHRvIGRlY2lkZSB0aGUgZGVzdGluYXRpb24gc2FuZGJveC4KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfQogICAgICogQHBhcmFtICB7Q2FsbGJhY2t9IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgY2FsbGJhY2sgaWYgYSByZXNwb25zZSBpcyBleHBlY3RlZCBmcm9tIHRoZSByZXF1ZXN0LiBBIHJlc3BvbnNlIHdpbGwgYmUgYWx3YXlzIHNlbnQsIGV2ZW4gaWYgaXQgaXMgYSAiVGltZW91dCIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgdGhlIE1lc3NhZ2UgaWQKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZ2VuSWQoaW5Nc2cpOwoKICAgICAgX3RoaXMuX3BpcGVsaW5lLnByb2Nlc3MoaW5Nc2csIGZ1bmN0aW9uIChtc2cpIHsKCiAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spOwoKICAgICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICAgIHZhciBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107CiAgICAgICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICAgICAgLy9kbyBub3QgcHVibGlzaCBvbiBkZWZhdWx0IGFkZHJlc3MsIGJlY2F1c2Ugb2YgbG9vcGJhY2sgY3ljbGUKICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIsIHNlbmQgdG8gZXh0ZXJuYWwgaW50ZXJmYWNlCiAgICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiBpbk1zZy5pZDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZHMgYW4gZXh0ZXJuYWwgcHVibGlzaCBhZGRyZXNzIGxpc3RlbmVyLiBFdmVyeSBtZXNzYWdlIGZvciB0aGUgYWRkcmVzcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBieSBfb25Qb3N0TWVzc2FnZS4KICAgICAqIFRoaXMgbWVhbnMsIGV2ZW4gaWYgdGhlcmUgaXMgYSBsaXN0ZW5lciBmb3IgdGhlIGFkZHJlc3MsIGl0IHdpbGwgYWxzbyBzZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nLgogICAgICogQHBhcmFtIHtVUkx9IGZyb20gUHVibGlzaCBhZGRyZXNzLgogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZFB1Ymxpc2gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFB1Ymxpc2goZnJvbSkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL3ZlcmlmeSBpZiBmb3J3YXJkIGV4aXN0CiAgICAgIHZhciByZWZDb3VudCA9IF90aGlzLl9mb3J3YXJkc1tmcm9tXTsKICAgICAgaWYgKCFyZWZDb3VudCkgewogICAgICAgIHZhciBmb3J3YXJkTGlzdGVuZXIgPSBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnTUItUFVCTElTSDogKCAnICsgZnJvbSArICcgKScpOwogICAgICAgICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICB9KTsKCiAgICAgICAgcmVmQ291bnQgPSB7CiAgICAgICAgICBjb3VudGVyOiAwLAogICAgICAgICAgZmw6IGZvcndhcmRMaXN0ZW5lciwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICAgICAgICBfdGhpczMuY291bnRlci0tOwogICAgICAgICAgICBpZiAoX3RoaXMzLmNvdW50ZXIgPT09IDApIHsKICAgICAgICAgICAgICBfdGhpczMuZmwucmVtb3ZlKCk7CiAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1tmcm9tXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9mb3J3YXJkc1tmcm9tXSA9IHJlZkNvdW50OwogICAgICB9CgogICAgICByZWZDb3VudC5jb3VudGVyKys7CiAgICAgIHJldHVybiByZWZDb3VudDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZHMgYSBmb3J3YXJkIGxpc3RlbmVyIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uIEV2ZXJ5IG1lc3NhZ2UgcmVhY2hpbmcgYW4gYWRkcmVzcyB3aWxsIGJlIGFsc28gc2VudCB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLgogICAgICogQHBhcmFtIHtVUkx9IGZyb20gTWVzc2FnZSBkZXN0aW5hdGlvbiwgaXQncyBhY3R1YWxseSB0aGUgZmllbGQgInRvIiBvZiB0aGUgbWVzc2FnZS4KICAgICAqIEBwYXJhbSB7VVJMfSB0byAgIEZvcndhcmQgYWRkcmVzcy4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRGb3J3YXJkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGb3J3YXJkKGZyb20sIHRvKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIGNvbnNvbGUubG9nKCdNQi1GT1JXQVJEOiAoICcgKyBmcm9tICsgJyB0byAnICsgdG8gKyAnICknKTsKICAgICAgICBfdGhpcy5mb3J3YXJkKHRvLCBtc2cpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIEp1c3QgZm9yd2FyZCdzIGEgbWVzc2FnZSB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLiBMaXN0ZW5lcnMgc2hvdWxkIGJlIGF2YWlsYWJsZSBmb3IgdGhlIGZvcndhcmQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSAge1VSTH0gdXJsIEZvcndhcmQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIGZvcndhcmQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkKHVybCwgbXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpOwogICAgICB9CiAgICB9CgogICAgLy9kZWZhdWx0IHJvdXRlLCBpZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzIGF2YWlsYWJsZSBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLgoKICB9LCB7CiAgICBrZXk6ICdfb25Qb3N0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUG9zdE1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL3Jlc29sdmUgZXh0ZXJuYWwgcHJvdG9zdHViLi4uCiAgICAgIF90aGlzLl9yZWdpc3RyeS5yZXNvbHZlKG1zZy50bykudGhlbihmdW5jdGlvbiAocm91dGUpIHsKICAgICAgICBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKCdSRVNPTFZFLUVSUk9SOiAnLCBlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncGlwZWxpbmUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9waXBlbGluZTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1lc3NhZ2VCdXM7Cn0oX0J1czMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBNZXNzYWdlQnVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL0J1cyI6MzkxLCIuL1BpcGVsaW5lIjozOTMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6Mjk3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjMwMSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjMwOSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjMxMH1dLDM5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIFNlcXVlbmNpYWwgcHJvY2Vzc29yIG9mIG1ldGhvZHMuIFNpbWlsYXIgdG8gaG93IFNlcXVlbnRpYWwgUHJvbWlzZSdzIHdvcmssIGJ1dCBiZXR0ZXIgZml0IGZvciBtZXNzYWdlIHByb2Nlc3NpbmcuCiogTm9ybWFsIHVzZSBmb3IgdGhpcywgaXMgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcyB3aXRoIGNvbmZpZ3VyZWQgaGFuZGxlcnMsIGFuZCBhY3QgYWNjb3JkaW5nbHkuCiovCgp2YXIgUGlwZWxpbmUgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHVibGljCiAgICBoYW5kbGVyczogKChQaXBlQ29udGV4dCkgPT4gdm9pZClbXQogICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWQKICAqLwoKICBmdW5jdGlvbiBQaXBlbGluZShfb25GYWlsKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQaXBlbGluZSk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5oYW5kbGVycyA9IFtdOwogICAgX3RoaXMub25GYWlsID0gX29uRmFpbDsKICB9CgogIC8qKgogICAqIEluc2VydCBhIG1lc3NhZ2UgaW4gdGhlIHBpcGVsaW5lIHF1ZXVlLiBBbGwgbWVzc2FnZXMgYXJlIHdyYXBwZWQgd2l0aCBhIFBpcGVDb250ZXh0LgogICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWUKICAgKiBAcGFyYW0gIHtDYWxsYmFja30gb25EZWxpdmVyIFdoZW4gbWVzc2FnZSBpcyBmaW5pc2hlZCBwcm9jZXNzaW5nIGZyb20gYWxsIGhhbmRsZXJzLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBpbiB0aGlzIGNhbGxiYWNrLgogICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGlwZWxpbmUsIFt7CiAgICBrZXk6ICJwcm9jZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzKG1zZywgb25EZWxpdmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoX3RoaXMuaGFuZGxlcnMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBpdGVyID0gbmV3IEl0ZXJhdG9yKF90aGlzLmhhbmRsZXJzKTsKICAgICAgICBpdGVyLm5leHQobmV3IFBpcGVDb250ZXh0KF90aGlzLCBpdGVyLCBtc2csIG9uRGVsaXZlcikpOwogICAgICB9IGVsc2UgewogICAgICAgIG9uRGVsaXZlcihtc2cpOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBQaXBlbGluZTsKfSgpOwoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIFdyYXBwZXIgYXJvdW5kIGEgbWVzc2FnZSB0aGF0IGFkZHMgYWN0aW9ucyB0aGF0IGNhbiBiZSBmaXJlZCBieSBhbnkgaW50ZXJjZXB0b3IgaGFuZGxlci4KKiBUaGUgUGlwZWxpbmUgaXMgYXN5bmNocm9ub3VzLCBzbyBhbiBoYW5kbGVyIHNob3VsZCBhbHdheXMgY2FsbCBhbiBhY3Rpb24sIHRoZSBkZWZhdWx0IG9uZSBpcyAibmV4dCgpIgoqLwoKCnZhciBQaXBlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgICBfaW5TdG9wOiBib29sZWFuCiAgICAgX3BpcGVsaW5lOiBQaXBlbGluZQogICAgX2l0ZXI6IEl0ZXJhdG9yCiAgICBfbXNnOiBNZXNzYWdlCiAgKi8KCiAgZnVuY3Rpb24gUGlwZUNvbnRleHQocGlwZWxpbmUsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQaXBlQ29udGV4dCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faW5TdG9wID0gZmFsc2U7CgogICAgX3RoaXMuX3BpcGVsaW5lID0gcGlwZWxpbmU7CiAgICBfdGhpcy5faXRlciA9IGl0ZXI7CiAgICBfdGhpcy5fbXNnID0gbXNnOwogICAgX3RoaXMuX29uRGVsaXZlciA9IG9uRGVsaXZlcjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBpcGVDb250ZXh0LCBbewogICAga2V5OiAibmV4dCIsCgoKICAgIC8qKgogICAgICogUHJvY2VlZCB0byB0aGUgbmV4dCBpbnRlcmNlcHRvciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLiBJZiBpdCdzIHRoZSBsYXN0IG9uZSwgcHJvY2VlZCB0byBvbkRlbGl2ZXIgaGFuZGxlci4KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9pblN0b3ApIHsKICAgICAgICBpZiAoX3RoaXMuX2l0ZXIuaGFzTmV4dCkgewogICAgICAgICAgX3RoaXMuX2l0ZXIubmV4dChfdGhpcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBQcm9jZWVkIGRpcmVjdGx5IHRvIHRoZSBvbkRlbGl2ZXIgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZWxpdmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxpdmVyKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIV90aGlzLl9pblN0b3ApIHsKICAgICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTsKICAgICAgICBfdGhpcy5fb25EZWxpdmVyKF90aGlzLl9tc2cpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBNYXJrIHRoZSBjb250ZXh0IHdpdGggYW4gZXJyb3IgYW5kIHByb2NlZWQgdG8gdGhlIG9uRmFpbCBoYW5kbGVyLgogICAgICogQHBhcmFtICB7W3R5cGVdfSBlcnJvciBbZGVzY3JpcHRpb25dCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmFpbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmFpbChlcnJvcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7CiAgICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7CiAgICAgICAgaWYgKF90aGlzLl9waXBlbGluZS5vbkZhaWwpIHsKICAgICAgICAgIF90aGlzLl9waXBlbGluZS5vbkZhaWwoZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBpcGVsaW5lIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGlwZWxpbmU7CiAgICB9CiAgfSwgewogICAga2V5OiAibXNnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbXNnOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGluTXNnKSB7CiAgICAgIHRoaXMuX21zZyA9IGluTXNnOwogICAgfQogIH1dKTsKICByZXR1cm4gUGlwZUNvbnRleHQ7Cn0oKTsKCnZhciBJdGVyYXRvciA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgICBfaW5kZXg6IG51bWJlcgogICAgX2FycmF5OiBbXQogICovCgogIGZ1bmN0aW9uIEl0ZXJhdG9yKGFycmF5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJdGVyYXRvcik7CgogICAgdGhpcy5faW5kZXggPSAtMTsKICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJdGVyYXRvciwgW3sKICAgIGtleTogImhhc05leHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pbmRleCA8IHRoaXMuX2FycmF5Lmxlbmd0aCAtIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAibmV4dCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdGhpcy5faW5kZXgrKzsKICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2luZGV4XTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEl0ZXJhdG9yOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBQaXBlbGluZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4fV0sMzk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENsYXNzIHdpdGggdGhlIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcHJvdG9jb2wKKgoqLwoKdmFyIENyeXB0byA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBDcnlwdG8oKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDcnlwdG8pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgfQoKICAvKioKICAqIGVuY29kZSBhIGJ5dGVBcnJheSB2YWx1ZSBpbiBiYXNlIDY0IGVuY29kZQogICogQHBhcmFtICAge2J5dGVBcnJheX0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlCiAgKiBAcmV0dXJuICB7c3RyaW5nfSAgIGVuY29kZWQgdmFsdWUKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ3J5cHRvLCBbewogICAga2V5OiAnZW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNvZGUodmFsdWUpIHsKICAgICAgcmV0dXJuIGJ0b2EodmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgKiBkZWNvZGUgYSBiYXNlNjQgdmFsdWUgaW4gYSBuZXcgVWludDhBcnJheQogICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICB2YWx1ZSAgICB2YWx1ZSBlbmNvZGVkIGluIGJhc2UgNjQKICAgICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZSh2YWx1ZSkgewogICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuY3J5cHRSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRSU0EocHViS2V5LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0UlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0UlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCk7CgogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzaWduUlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduUlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnbgogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChzaWduYXR1cmUpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KHsKICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JwogICAgICAgICAgfSwgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YQogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChpc3ZhbGlkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgcmVzb2x2ZShpc3ZhbGlkKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhCiAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IQogICAgICAgICAgICBpdjogaXYKICAgICAgICAgIH0sIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIGl2OiBpdgogICAgICAgICAgfSwgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7CiAgICAgICAgICAgIHJlc29sdmUoZGVjb2RlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogY3JlYXRlcyBhIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZAogICAgKiBAcmV0dXJuICB7Ynl0ZUFycmF5fSAgIHNpZ25hdHVyZSAgcmVzdWx0aW5nIGhhc2gKICAgICovCgogIH0sIHsKICAgIGtleTogJ2hhc2hITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNoSE1BQyhrZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5faW1wb3J0SE1BQ2tleShrZXkpLnRoZW4oZnVuY3Rpb24gKGhtYWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBzaWduCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHNpZ25hdHVyZSkgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBzaWduYXR1cmUpOwoKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWhhc2hITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZCB0byBjb21wYXJlCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhCiAgICAqIEByZXR1cm4gIHtib29sZWFufSAgIGlzdmFsaWQgICAgIGJvb2xlYW4gc2F5aW5nIGlmIHRoZSBkYXRhIGNvcnJlc3BvbmRzIHRvIHRoZSBoYXNoIHJlY2VpdmVkCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJpZnlITUFDKGtleSwgZGF0YSwgc2lnbmF0dXJlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChobWFjS2V5KSB7CgogICAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGlzdmFsaWQpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3QKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeUhNQUMnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgaXN2YWxpZCA/IHJlc29sdmUoaXN2YWxpZCkgOiByZWplY3QoaXN2YWxpZCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by12ZXJpZnlITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBhIFJTQSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFpciB3aXRoIGEgbW9kdWx1cyBsZW5ndGggb2YgMjA0OCBiaXRzCiAgICAqIEByZXR1cm4gIHtKU09OfSAgIGtleVBhaXIgICAganNvbiBjb250YWluaW5nIHRoZSBwdWJsaWMgYW5kIHByaXZhdGUga2V5cwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVSU0FLZXlQYWlyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJTQUtleVBhaXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBrZXlQYWlyID0ge307CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KHsKICAgICAgICAgIG5hbWU6ICdSU0EtUFNTJywKICAgICAgICAgIG1vZHVsdXNMZW5ndGg6IDIwNDgsIC8vY2FuIGJlIDEwMjQsIDIwNDgsIG9yIDQwOTYKICAgICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwoKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEga2V5cGFpciBvYmplY3QKICAgICAgICAgIC8vY29uc29sZS5sb2coa2V5KTsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmV4cG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgICBrZXkucHVibGljS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWUKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAocHVibGljS2V5KSB7CiAgICAgICAgICAgIC8vcmV0dXJucyB0aGUgZXhwb3J0ZWQga2V5IGRhdGEKICAgICAgICAgICAga2V5UGFpci5wdWJsaWMgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpOwogICAgICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKICAgICAgICAgICAga2V5LnByaXZhdGVLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZQogICAgICAgICAgICApOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgICBrZXlQYWlyLnByaXZhdGUgPSBuZXcgVWludDhBcnJheShwcml2YXRlS2V5KTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlUlNBS2V5UGFpcicsIGtleVBhaXIpOwoKICAgICAgICAgICAgcmVzb2x2ZShrZXlQYWlyKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuCiAgICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVJVicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVJVigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDE2KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsCiAgICAqIHRoZSByZW1haW5pbmcgYXJlIGdlbmVyYXRlZCByYW5kb21seQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUmFuZG9tJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICB2YXIgZGF0ZSA9IERhdGUubm93KCk7CiAgICAgIHZhciBkYXRlRW5jb2RlZCA9IF90aGlzLl91dGY4RW5jb2RlKGRhdGUpOwoKICAgICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlCiAgICAgIHZhciBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpOwoKICAgICAgLy8gYWRkIGluIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBhcnJheSB0aGUgYnl0ZXMgZXh0cmFjdGVkIHByZXZpb3VzbHk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07CiAgICAgIH0KICAgICAgcmV0dXJuIGFycmF5OwogICAgfQoKICAgIC8qKgogICAgKiBnZW5lcmF0ZXMgYSBwcmVtYXN0ZXIgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgcmFuZG9tbHkKICAgICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcHJlbWFzdGVyIHNlY3JldCBrZXkKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUE1TJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVBNUygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CiAgICAgIHJldHVybiBhcnJheTsKICAgIH0KCiAgICAvKioKICAgICogZ2VuZXJhdGVzIGEgbWFzdGVyS2V5IHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHVzaW5nIHRoZSBwcmVtYXN0ZXIgc2VjcmV0IGFuZAogICAgKiB0d28gcmFuZG9tcwogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZU1hc3RlclNlY3JldCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoaG1hY0tleSwgZGF0YSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGtleSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgICB2YXIgc2VlZCA9IGRhdGE7CgogICAgICAgIF90aGlzLl9kaWdlc3QoaG1hY0tleSkudGhlbihmdW5jdGlvbiAoZGlnZXN0ZWRLZXkpIHsKCiAgICAgICAgICBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCkudGhlbihmdW5jdGlvbiAoa2V5cGFydDApIHsKCiAgICAgICAgICAgIC8vY29weSB0aGUgZmlyc3QgMzIgYnl0ZXMgaW50byB0aGUga2V5CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgICAgICAgICAgIGtleVtpXSA9IGtleXBhcnQwW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQxKSB7CgogICAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICAgIGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0Jywga2V5KTsKICAgICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXkKICAgICogd2l0aCA0IGJ5dGVBcnJheSBlYWNoIHdpdGggMzIgYnl0ZXMKICAgICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICAgICAgc2VjcmV0ICAgICAgIHNlY3JldCB0byBiZSB1c2VkIGluIHRoZSBITUFDIGZ1bmN0aW9uCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWQKICAgICogQHJldHVybiB7QXJyYXk8Ynl0ZUFycmF5Pn0ga2V5ICAgICAgICAgIGFycmF5IHdpdGggdGhlIGluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGtleXMKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlS2V5cycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVLZXlzKGhtYWNLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIga2V5ID0gW107CiAgICAgICAgdmFyIHNlZWQgPSBkYXRhOwoKICAgICAgICAvLyBpdGVyYXRlIDQgdGltZXMgdG8gb2J0YWluIGEgMTAyNCBrZXkgc2l6ZQogICAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQwKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0MCk7CiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MSkgewogICAgICAgICAga2V5LnB1c2goa2V5cGFydDEpOwogICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cGFydDIpIHsKICAgICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTsKICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDIpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQzKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0Myk7CgogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGtleSk7CiAgICAgICAgICByZXNvbHZlKGtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9jb25zb2xlLmxvZyhobWFjS2V5LCBkYXRhKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQXNpZ25LZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0cwogICAgICAgICkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTsKICAgICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBdmVyaWZ5S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0UlNBdmVyaWZ5S2V5KHB1YktleSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHB1YktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWyd2ZXJpZnknXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBZW5jcnlwdEtleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydFJTQWVuY3J5cHRLZXkocHViS2V5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHViS2V5LCB7IC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9ucwogICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJywKICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICBbJ2VuY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yCiAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHMKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWVuY3J5cHRLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQWRlY3J5cHRLZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydkZWNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvcgogICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIHByaXZhdGVLZXkpOwogICAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbmNhdFBNU3dpdGhSYW5kb21zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXRQTVN3aXRoUmFuZG9tcyhwbXMsIHRvUmFuZG9tLCBmcm9tUmFuZG9tKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZmluYWxLZXkgPSBuZXcgVWludDhBcnJheShwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoICsgZnJvbVJhbmRvbS5sZW5ndGgpOwoKICAgICAgLy8gYWRkIFByZW1hc3RlcktleQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBtcy5sZW5ndGg7IGkrKykgewogICAgICAgIGZpbmFsS2V5W2ldID0gcG1zW2ldOwogICAgICB9CgogICAgICAvL2FkZCB0byByYW5kb20KICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRvUmFuZG9tLmxlbmd0aDsgX2krKykgewogICAgICAgIGZpbmFsS2V5W19pICsgcG1zLmxlbmd0aF0gPSBwbXNbX2ldOwogICAgICB9CgogICAgICAvL2FkZCBmcm9tIHJhbmRvbQogICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBmcm9tUmFuZG9tLmxlbmd0aDsgX2kyKyspIHsKICAgICAgICBmaW5hbEtleVtfaTIgKyBwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoXSA9IHBtc1tfaTJdOwogICAgICB9CgogICAgICByZXR1cm4gZmluYWxLZXk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dlbmVyYXRlMjU2Yml0S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGUyNTZiaXRLZXkoKSB7CiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIGltcG9ydHMgdGhlIHNlY3JldCB0byB0aGUgSE1BQyBmdW5jdGlvbgogICAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgYXJyYXlCdWZmZXIgICAgIGJ5dGVzIHRvIGltcG9ydCBhcyBrZXkKICAgICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0SE1BQ2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEhNQUNrZXkoYXJyYXlCdWZmZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5fZGlnZXN0KGFycmF5QnVmZmVyKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICAgIGtleSwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICAgIG5hbWU6ICdITUFDJywKICAgICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSwgLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgICAgICBsZW5ndGg6IDI1NiAvL29wdGlvbmFsLCBpZiB5b3Ugd2FudCB5b3VyIGtleSBsZW5ndGggdG8gZGlmZmVyIGZyb20gdGhlIGhhc2ggZnVuY3Rpb24ncyBibG9jayBsZW5ndGgKICAgICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0SE1BQ2tleScsIGtleSk7CiAgICAgICAgICAgIHJlc29sdmUoa2V5KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2RpZ2VzdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RpZ2VzdCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5kaWdlc3QoewogICAgICAgICAgbmFtZTogJ1NIQS0yNTYnCiAgICAgICAgfSwgdmFsdWUgLy9UaGUgZGF0YSB5b3Ugd2FudCB0byBoYXNoIGFzIGFuIEFycmF5QnVmZmVyCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXIKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kaWdlc3QnLCBuZXcgVWludDhBcnJheShoYXNoKSk7CiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGhhc2gpKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydEFFU2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEFFU2tleShhcnJheUJ1ZmZlcikgewogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICBhcnJheUJ1ZmZlciwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnQUVTLUNCQycKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5JwogICAgICAgICkudGhlbihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBrZXkpOwogICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOEVuY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RGVjb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOERlY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpOwogICAgfQogIH1dKTsKICByZXR1cm4gQ3J5cHRvOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBDcnlwdG87Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjozMDUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDM5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIFRoZSBJZGVudGl0eSBEYXRhIE1vZGVsIGlzIHVzZWQgdG8gbW9kZWwgdGhlIHJlVEhJTksgVXNlciBlbnRpdHkuIFRoZSBJZGVudGl0eSBkYXRhIG1vZGVsIGlzIGhhbmRsZWQgYnkgSWRlbnRpdHkgTWFuYWdlbWVudCBmdW5jdGlvbmFsaXR5LgoqCiovCgp2YXIgSWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSWRlbnRpdHkoZ3VpZCwgdHlwZSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWRlbnRpdHkpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuZ3VpZCA9IGd1aWQ7CiAgICBfdGhpcy50eXBlID0gdHlwZTsKICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdCA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRlbnRpdHksIFt7CiAgICBrZXk6ICdhZGRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSWRlbnRpdHkoaWRlbnRpZmllcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaWRlbnRpdHlJbmZvcm1hdGlvbiA9IHsKICAgICAgICBpZEFzc2VydGlvbjogJycsCiAgICAgICAgc2VydmljZUFkZHJlc3M6ICcnLAogICAgICAgIGF1dGhlbnRpY2F0aW9uRGF0YTogJycsCiAgICAgICAgYXV0aG9yaXNhdGlvbkRhdGE6ICcnLAogICAgICAgIHVzZXJQcm9maWxlOiAnJwogICAgICB9OwogICAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3RbaWRlbnRpZmllcl0gPSBpZGVudGl0eUluZm9ybWF0aW9uOwogICAgfQogIH0sIHsKICAgIGtleTogJ2FkZElkQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJZEFzc2VydGlvbihpZGVudGlmaWVyLCBhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBuZXdJZEFzc2VydGlvbiA9IG5ldyBJZEFzc2VydGlvbihhc3NlcnRpb24sIGlkcCwgc2NvcGUpOwoKICAgICAgX3RoaXMuaWRBc3NlcnRpb25MaXN0LnB1c2gobmV3SWRBc3NlcnRpb24pOwogICAgfQogIH1dKTsKICByZXR1cm4gSWRlbnRpdHk7Cn0oKTsKCnZhciBJZEFzc2VydGlvbiA9IGZ1bmN0aW9uIElkQXNzZXJ0aW9uKGFzc2VydGlvbiwgaWRwLCBzY29wZSkgewogICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkQXNzZXJ0aW9uKTsKCiAgdmFyIF90aGlzID0gdGhpczsKCiAgX3RoaXMuYXNzZXJ0aW9uID0gYXNzZXJ0aW9uOwogIF90aGlzLmlkcCA9IGlkcDsKICBfdGhpcy5zY29wZSA9IHNjb3BlOwp9OwoKdmFyIElkVmFsaWRhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBJZFZhbGlkYXRpb24oaWRlbnRpdHksIGNvbnRlbnRzKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJZFZhbGlkYXRpb24pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5pZGVudGl0eSA9IGlkZW50aXR5OwogICAgX3RoaXMuY29udGVudHMgPSBjb250ZW50czsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKElkVmFsaWRhdGlvbiwgW3sKICAgIGtleTogJ3ZhbGlkYXRlcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVzKGlkZW50aXR5LCBjb250ZW50cykgewogICAgICAvL1RPRE8gaW1wbGVtZW50IHRoZSBsb2dpYwoKICAgIH0KICB9XSk7CiAgcmV0dXJuIElkVmFsaWRhdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gSWRlbnRpdHk7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDM5NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzLmpzJyk7Cgp2YXIgX0lkZW50aXR5ID0gcmVxdWlyZSgnLi9JZGVudGl0eScpOwoKdmFyIF9JZGVudGl0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JZGVudGl0eSk7Cgp2YXIgX0NyeXB0byA9IHJlcXVpcmUoJy4vQ3J5cHRvJyk7Cgp2YXIgX0NyeXB0bzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DcnlwdG8pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqCiogVGhlIElkZW50aXR5IE1vZHVsZSAoSWQgTW9kdWxlKSBpcyB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0aGUKKiB1c2VyIGlkZW50aXR5IGFuZCB0aGUgYXNzb2NpYXRpb24gb2YgdGhpcyBpZGVudGl0eSB3aXRoIHRoZSBIeXBlcnR5IGluc3RhbmNlcywKKiBpbiBvcmRlciB0byBtYWtlIEh5cGVydHkgaW5zdGFuY2VzIGlkZW50aWZpYWJsZS4gVGhlIGlkZW50aXR5IGluIHRoZSByZVRISU5LIHByb2plY3QKKiBpcyBub3QgZml4ZWQgdG8gYSB1bmlxdWUgSWRlbnRpdHkgU2VydmljZSBQcm92aWRlciwgYnV0IG9idGFpbmVkIHRocm91Z2ggc2V2ZXJhbAoqIGRpZmZlcmVudCBJZGVudGl0eSBzb3VyY2VzLiBXaXRoIHRoaXMgYXBwcm9hY2gsIHRoZSBJZCBNb2R1bGUgcHJvdmlkZXMgdG8gdGhlIHVzZXIgdGhlCiogb3B0aW9uIHRvIGNob29zZSB0aGUgcHJlZmVycmVkIG1ldGhvZCBmb3IgYXV0aGVudGljYXRpb24uCiogVGhpcyBtb2R1bGUgd2lsbCB0aHVzIGFibGUgdG8gc3VwcG9ydCBtdWx0aXBsZSBJZGVudGl0eSBhY3F1aXNpdGlvbiBtZXRob2RzLAoqIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgMS4wLCBLZXJiZXJvcyBTeXN0ZW0sIG9yIGF1dGhlbnRpY2F0aW9uIHRocm91Z2ggc21hcnQgY2FyZHMuCiogRm9yIGV4YW1wbGUsIGEgdXNlciB3aXRoIGEgR29vZ2xlIGFjY291bnQgY2FuIHVzZSB0aGUgR29vZ2xlIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyIHRvIHByb3ZpZGUgSWRlbnRpdHkgVG9rZW5zLAoqICB3aGljaCBjYW4gYmUgdXNlZCBieSB0aGUgSWRlbnRpdHkgTW9kdWxlIHRvIGFzc29jaWF0ZSBpdCB3aXRoIGEgSHlwZXJ0eSBpbnN0YW5jZS4KKgoqIFRoZSBJZGVudGl0eSBNb2R1bGUgdXNlcyBhIG5vZGUgcGFja2FnZSwgdGhlIEhlbGxvSlMsIHdoaWNoIGlzIGEgY2xpZW50LXNpZGUgSmF2YVNjcmlwdCBBUEkgZm9yIGF1dGhlbnRpY2F0aW9uCiogdGhhdCBmYWNpbGl0YXRlcyB0aGUgcmVxdWVzdHMgZm9yIHRoZSBPcGVuSUQgY29ubmVjdCBwcm90b2NvbC4gVGhpcyBtZXRob2QgYWxsb3dzIGZvciBzb21lIGFic3RyYWN0aW9uCiogd2hlbiBtYWtpbmcgcmVxdWVzdHMgZm9yIGRpZmZlcmVudCBJZGVudGl0eSBQcm92aWRlcnMsIHN1Y2ggYXMgT3BlbklEIGNvbm5lY3QgdXNlZCBieSBHb29nbGUsIEZhY2Vib29rLCBNaWNyb3NvZnQsIGZvciBleGFtcGxlLgoqCiogV2hlbiBhIHJlcXVlc3QgZm9yIGEgdXNlciBpZGVudGl0eSBpcyBtYWRlIHVzaW5nIHRoZSBtZXRob2QgbG9naW5XaXRoUlAoaWRlbnRpZmllciwgc2NvcGUpLAoqIHRoaXMgbWV0aG9kIHdpbGwgYW5hbHlzZSB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgY2hvc2VuIHRvIG9idGFpbiBhbiBpZGVudGl0eSBhbmQgd2lsbCB1c2UgdGhlIEhlbGxvSlMgbm9kZSBwYWNrYWdlCiogd2l0aCB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgUHJvdmlkZXIgYW5kIGlkZW50aXR5IHNjb3BlLiBBZnRlciB0aGUgSGVsbG9KUyByZXF1ZXN0IGZvciBhbiBBY2Nlc3MgVG9rZW4KKiB0byB0aGUgSWRlbnRpdHkgUHJvdmlkZXJzLCB0aGUgdXNlciB3aWxsIGJlIHByb21wdGVkIHRvIGF1dGhlbnRpY2F0ZSB0b3dhcmRzIHRoZSBJZGVudGl0eSBQcm92aWRlci4KKiBVcG9uIHJlY2VpdmluZyB0aGUgQWNjZXNzIFRva2VuLCB0aGlzIHRva2VuIGlzIHZhbGlkYXRlZCB3aXRoIGEgUkVTVGZ1bCB3ZWIgc2VydmljZSByZXF1ZXN0IHRvIGFuIGVuZHBvaW50Ciogb24gdGhlIElkZW50aXR5IFByb3ZpZGVyIEF1dGhvcml6YXRpb24gU2VydmVyLCBhbmQgYWZ0ZXIgdGhlIHZhbGlkYXRpb24gaXMgZG9uZSwKKiBhbiBJRCB0b2tlbiBpcyBvYnRhaW5lZCB3aXRoIHRoZSBpbmZvcm1hdGlvbiBhY2NvcmRpbmcgdG8gdGhlIHNjb3BlIHJlcXVpcmVkLgoqIFRoaXMgSUQgdG9rZW4gaXMgdGhlbiBwcmVzZXJ2ZWQgaW4gdGhpcyBtb2R1bGUgdGhhdCBjYW4gb2J0YWluZWQgdGhyb3VnaCB0aGUgZ2V0SWRlbnRpdGllcygpCiogYW5kIGlzIHBhc3NlZCBhcyByZXR1cm4gdmFsdWUgb2YgdGhlIGxvZ2luV2l0aFJQIGZ1bmN0aW9uLiBUaGUgbWV0aG9kcyBnZW5lcmF0ZUFzc2VydGlvbiBhbmQgdmFsaWRhdGVBc3NlcnRpb24gaGF2ZSBub3QgeWV0IGJlZW4gZGV2ZWxvcGVkLgoqCiovCgp2YXIgSWRlbnRpdHlNb2R1bGUgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHkgTW9kdWxlIGl0IGRvZXMgbm90IHJlcXVpcmUgYW55IGlucHV0LgogICovCgogIGZ1bmN0aW9uIElkZW50aXR5TW9kdWxlKHJ1bnRpbWVVUkwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkZW50aXR5TW9kdWxlKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7CgogICAgX3RoaXMuX3J1bnRpbWVVUkwgPSBydW50aW1lVVJMOwogICAgX3RoaXMuX2lkbVVSTCA9IHJ1bnRpbWVVUkwgKyAnL2lkbSc7CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5fcnVudGltZVVSTCkuZG9tYWluOwoKICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9CiAgICBfdGhpcy5pZGVudGl0aWVzID0gW107CiAgICB2YXIgbmV3SWRlbnRpdHkgPSBuZXcgX0lkZW50aXR5Mi5kZWZhdWx0KCdndWlkJywgJ0hVTUFOJyk7CiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgX3RoaXMuY3J5cHRvID0gbmV3IF9DcnlwdG8yLmRlZmF1bHQoKTsKCiAgICAvL3N0b3JlcyB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIGRhdGFPYmplY3QgYW5kIHRoZSBIeXBlcnR5IHJlZ2lzdGVyZWQgd2l0aGluCiAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5ID0ge307CgogICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIGFsbCB0aGUgY3J5cHRvIGluZm9ybWF0aW9uIGJldHdlZW4gdHdvIGh5cGVydGllcwogICAgX3RoaXMuY2hhdEtleXMgPSB7fTsKCiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIGNoYXQgZ3JvdXAKICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9OwoKICAgIC8vZmFpbHNhZmUgdG8gZW5hYmxlL2Rpc2FibGUgYWxsIHRoZSBjcmlwdG9ncmFwaGljIGZ1bmN0aW9ucwogICAgX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSB0cnVlOwoKICAgIC8vIHZlcmlmaWNhdGlvbiBvZiBub2RlSlMsIGFuZCBpbiBjYXNlIGl0IGlzIG5vZGVKUyB0aGVuIGRpc2FibGUgZW5jcnlwdGlvbgogICAgLy8gVE9ETyBpbXByb3ZlIGxhdGVyLCB0aGlzIGV4aXN0cyBiZWNhdXNlIHRoZSBjcnlwdG8gbGliIHVzZXMgYnJvd3NlciBjcnlwdG9ncmFwaGljIG1ldGhvZHMKICAgIC8vX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSAod2luZG93KSA/IHRydWUgOiBmYWxzZTsKICB9CgogIC8qKgogICogcmV0dXJuIHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkKICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXMKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRlbnRpdHlNb2R1bGUsIFt7CiAgICBrZXk6ICdnZXRJZGVudGl0aWVzJywKCgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIGlkZW50aXRpZXMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uIGJ5IGEgdXNlci4KICAgICogVGhlc2UgaWRlbnRpdGllcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgY29udGFpbmluZyBhIEpTT04gcGFja2FnZSBmb3IgZWFjaCB1c2VyIGlkZW50aXR5LgogICAgKiBAcmV0dXJuIHtBcnJheTxJZGVudGl0aWVzPn0gICAgICAgICBJZGVudGl0aWVzCiAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXRpZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5pZGVudGl0aWVzOwogICAgfQoKICAgIC8qKgogICAgKiBnZXRzIGFsbCB0aGUgaW5mb3JtYXRpb24gZnJvbSBhIGdpdmVuIHVzZXJVUkwKICAgICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmwKICAgICogQHJldHVybiB7SlNPTn0gICAgaWRlbnRpdHkgICAgaWRlbnRpdHkgYnVuZGxlIGZyb20gdGhlIHVzZXJVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldElkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0eSh1c2VyVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CgogICAgICAgIHZhciBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdOwogICAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkgewogICAgICAgICAgcmV0dXJuIGlkZW50aXR5OwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhyb3cgJ2lkZW50aXR5IG5vdCBmb3VuZCc7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHlPZkh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5T2ZIeXBlcnR5KGh5cGVydHlVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBzcGxpdFVSTCA9IGh5cGVydHlVUkwuc3BsaXQoJzovLycpOwogICAgICAgIGlmIChzcGxpdFVSTFswXSAhPT0gJ2h5cGVydHknKSB7CiAgICAgICAgICBfdGhpcy5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KGh5cGVydHlVUkwpLnRoZW4oZnVuY3Rpb24gKGh5cGVydHlVUkwpIHsKICAgICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoaHlwZXJ0eVVSTCk7CiAgICAgICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICAgICAgICAgIHZhciBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdOwogICAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5Lm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTsKICAgICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQuJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmV0dXJuIGFsbCB0aGUgdXNlcnMgVVJMcyByZWdpc3RlcmVkIHdpdGhpbiBhIHNlc3Npb24KICAgICogVGhlc2UgdXNlcnMgVVJMcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgb2Ygc3RyaW5ncy4KICAgICogQHBhcmFtICB7Qm9vbGVhbn0gIGVtYWlsRm9ybWF0IChPcHRpb25hbCkgICBib29sZWFuIHRvIGluZGljYXRlIHRvIHJldHVybiBpbiBlbWFpbCBmb3JtYXQKICAgICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn0gICAgICAgICB1c2VycwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0VXNlcnNJRHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVzZXJzSURzKGVtYWlsRm9ybWF0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciB1c2VycyA9IFtdOwoKICAgICAgLy9pZiByZXF1ZXN0IGNvbWVzIHdpdGggdGhlIGVtYWlsRm9ybWF0IG9wdGlvbiwgdGhlbiBjb252ZXJ0IHVybCB0byBlbWFpbCBmb3JtYXQKICAgICAgdmFyIGNvbnZlcnRlciA9IGVtYWlsRm9ybWF0ID8gX3V0aWxzLmdldFVzZXJFbWFpbEZyb21VUkwgOiBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH07CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgdXNlcnMucHVzaChjb252ZXJ0ZXIoaWRlbnRpdHkuaWRlbnRpdHkpKTsKICAgICAgfQogICAgICByZXR1cm4gdXNlcnM7CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgd2l0aGluIGEgc2Vzc2lvbgogICAgKiBAcmV0dXJuIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHkKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldEN1cnJlbnRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudElkZW50aXR5KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuY3VycmVudElkZW50aXR5OwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byBzZXQgdGhlIGN1cnJlbnQgSWRlbnRpdHkgd2l0aCBhIGdpdmVuIElkZW50aXR5CiAgICAqIEBwYXJhbSB7SWRlbnRpdHl9ICAgICAgICBpZGVudGl0eSAgICAgICAgIGlkZW50aXR5CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdzZXRDdXJyZW50SWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRJZGVudGl0eShpZGVudGl0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmVtb3ZlIHRoZSBhbiBpZGVudGl0eSBmcm9tIHRoZSBJZGVudGl0aWVzIGFycmF5CiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgdXNlclVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlSWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUlkZW50aXR5KHVzZXJVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGZvciAodmFyIGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdGhhdCByZXNvbHZlIGFuZCBjcmVhdGUgdGhlIGRvbWFpblVSTCBpbiBjYXNlIGl0IGlzIHByb3ZpZGVkIG9uZS4gSWYgbm90LCByZXNvbHZlIHRoZSBkZWZhdWx0IGRvbWFpblVSTAogICAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbCkKICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZXNvbHZlRG9tYWluJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzb2x2ZURvbWFpbihpZHBEb21haW4pIHsKICAgICAgaWYgKCFpZHBEb21haW4pIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIGxvZ2luIGEgdXNlciB3aXRoaW4gdGhlIHNlc3Npb24sIGl0IHdpbGwgc3RhcnQgdGhlIHByb2Nlc3MgdG8gb2J0YWluIGFuIElkZW50aXR5IGZyb20gYSB1c2VyLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgZm9yIGFuIGlkZW50aXR5IEFzc2VydGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHRva2VuIHJlY2VpdmVkIGJ5IHRoZSBpZHBQcm94eS4KICAgICoKICAgICogQHBhcmFtICB7SWRlbnRpZmllcn0gICAgICBpZGVudGlmaWVyICAgICAgaWRlbnRpZmllcgogICAgKiBAcGFyYW0gIHtTY29wZX0gICAgICAgICAgIHNjb3BlICAgICAgICAgICBzY29wZQogICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIFByb21pc2UgICAgICAgICBJRFRva2VuIGNvbnRhaW5pbmcgdGhlIHVzZXIgaW5mb3JtYXRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvZ2luV2l0aFJQJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyB2ZXJpZmljYXRpb24gYW5kIHJlZmFjdG9yIHRoaXMgcGFydAogICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IHVuZGVmaW5lZDsKICAgICAgICBfdGhpcy5nZXRJZGVudGl0eUFzc2VydGlvbignaWRlbnRpZmllcicsICdvcmlnaW4nLCAnaGludCcsIGlkZW50aWZpZXIpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbG9naW5XaXRoUlAnKTsKICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbldpdGhSUCBlcnInKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdGhhdCBmZXRjaCBhbiBpZGVudGl0eUFzc2VydGlvbiBmcm9tIGEgdXNlci4KICAgICoKICAgICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvbgogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0SWRlbnRpdHlBc3NlcnRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXR5QXNzZXJ0aW9uKGlkZW50aWZpZXIsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIC8vVE9ETyB2ZXJpZnkgd2hldGhlciB0aGUgdG9rZW4gaXMgc3RpbGwgdmFsaWQgb3Igbm90LgogICAgICAgICAgLy8gc2hvdWxkIGJlIG5lZWRlZCB0byBtYWtlIGZ1cnRoZXIgcmVxdWVzdHMsIHRvIG9idGFpbiBhIHZhbGlkIHRva2VuCiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpOwogICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgLy9DSEVDSyB3aGV0aGVyIGlzIGJyb3dzZXIgZW52aXJvbm1lbnQgb3Igbm9kZWpzCiAgICAgICAgICAvL2lmIGl0IGlzIGJyb3dzZXIsIHRoZW4gY3JlYXRlIGEgZmFrZSBpZGVudGl0eQoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIGlmICh3aW5kb3cpIHsKICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgIHZhciBwdWJsaWNLZXkgPSB2b2lkIDA7CiAgICAgICAgICAgICAgICB2YXIgdXNlcmtleVBhaXIgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpcgogICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmdlbmVyYXRlUlNBS2V5UGFpcigpLnRoZW4oZnVuY3Rpb24gKGtleVBhaXIpIHsKCiAgICAgICAgICAgICAgICAgIHB1YmxpY0tleSA9IGJ0b2Eoa2V5UGFpci5wdWJsaWMpOwogICAgICAgICAgICAgICAgICB1c2Vya2V5UGFpciA9IGtleVBhaXI7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgJycsIHVzZXJrZXlQYWlyLCBpZHBEb21haW4pOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCB1c2Vya2V5UGFpciwgaWRwRG9tYWluKTsKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0SWRlbnRpdHlBc3NlcnRpb24gZm9yIG5vZGVqcycpOwogICAgICAgICAgICB2YXIgcmFuZG9tTnVtYmVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKICAgICAgICAgICAgdmFyIGlkZW50aXR5QnVuZGxlID0gewogICAgICAgICAgICAgIGFzc2VydGlvbjogJ2Fzc2VydGlvbicsCiAgICAgICAgICAgICAgaWRwOiAnbm9kZWpzJywKICAgICAgICAgICAgICB1c2VyUHJvZmlsZTogewogICAgICAgICAgICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XYUNyalZNTVYtUS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBcy84T2xWcUNwU0I5Yy9waG90by5qcGcnLAogICAgICAgICAgICAgICAgY246ICd0ZXN0IG5vZGVqcycsCiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ25vZGVqcy0nICsgcmFuZG9tTnVtYmVyICsgJ0Bub2RlanMuY29tJywKICAgICAgICAgICAgICAgIHVzZXJVUkw6ICd1c2VyOi8vbm9kZWpzLmNvbS9ub2RlanMtJyArIHJhbmRvbU51bWJlcgogICAgICAgICAgICAgIH0gfTsKICAgICAgICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHlCdW5kbGU7CiAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChpZGVudGl0eUJ1bmRsZSk7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiBmb3IgYW4gaWRlbnRpdHlBc3NlcnRpb24KICAgICoKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBjb250ZW50cyAgICAgY29udGVudHMKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludAogICAgKiBAcGFyYW0gIHtKU09OfSAgICAgIGtleVBhaXIgICAgICAgdXNlciBrZXlQYWlyCiAgICAqIEByZXR1cm4ge0lkQXNzZXJ0aW9ufSAgICAgICAgICAgICAgSWRBc3NlcnRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTsKICAgICAgdmFyIG1lc3NhZ2UgPSB2b2lkIDA7CgogICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVBc3NlcnRpb24nKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBtZXNzYWdlID0geyB0eXBlOiAnZXhlY3V0ZScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ2dlbmVyYXRlQXNzZXJ0aW9uJywgcGFyYW1zOiB7IGNvbnRlbnRzOiBjb250ZW50cywgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogdXNlcm5hbWVIaW50IH0gfSB9OwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzLmJvZHkudmFsdWU7CgogICAgICAgICAgaWYgKHJlc3VsdC5sb2dpblVybCkgewogICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICB2YXIgd2luID0gd2luZG93Lm9wZW4ocmVzdWx0LmxvZ2luVXJsLCAnb3BlbklEcmVxdWVzdCcsICd3aWR0aD04MDAsIGhlaWdodD02MDAnKTsKICAgICAgICAgICAgICBpZiAod2luZG93LmNvcmRvdmEpIHsKICAgICAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICB2YXIgdXJsID0gZS51cmw7CiAgICAgICAgICAgICAgICAgIHZhciBjb2RlID0gL1wmY29kZT0oLispJC8uZXhlYyh1cmwpOwogICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAvXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpOwoKICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHVybCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAod2luLmNsb3NlZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICBpZiAod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdpZF90b2tlbicpICE9PSAtMSB8fCB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbi5kb2N1bWVudC5VUkw7CgogICAgICAgICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCkgewoKICAgICAgICAgICAgdmFyIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihyZXN1bHQuYXNzZXJ0aW9uKSk7CiAgICAgICAgICAgIHZhciBpZFRva2VuID0gdm9pZCAwOwoKICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGUgdmVyaWZpY2F0aW9uIGFuZCByZW1vdmUgdGhlIHRva2VuSURKU09OIGZyb20gdGhlIGdvb2dsZSBpZHBQcm94eTsKICAgICAgICAgICAgaWYgKGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTikgewogICAgICAgICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT047CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGlkVG9rZW4pIHsKICAgICAgICAgICAgICByZXN1bHQuaWRlbnRpdHkgPSAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKGlkVG9rZW4uZW1haWwpOwoKICAgICAgICAgICAgICBfdGhpcy5pZGVudGl0eS5hZGRJZGVudGl0eShyZXN1bHQpOwoKICAgICAgICAgICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGluZm9Ub2tlbiBpbiB0aGUgcmVzdWx0IHJlY2VpdmVkCiAgICAgICAgICAgICAgdmFyIGluZm9Ub2tlbiA9IHJlc3VsdC5pbmZvVG9rZW4gPyByZXN1bHQuaW5mb1Rva2VuIDoge307CiAgICAgICAgICAgICAgdmFyIHVzZXJQcm9maWxlQnVuZGxlID0geyB1c2VybmFtZTogaWRUb2tlbi5lbWFpbCwgY246IGlkVG9rZW4ubmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKGlkVG9rZW4uZW1haWwpIH07CgogICAgICAgICAgICAgIC8vY3JlYXRpb24gb2YgYSBuZXcgSlNPTiB3aXRoIHRoZSBpZGVudGl0eSB0byBzZW5kIHZpYSBtZXNzYWdlcwogICAgICAgICAgICAgIHZhciBuZXdJZGVudGl0eSA9IHsgdXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb24gfTsKICAgICAgICAgICAgICByZXN1bHQubWVzc2FnZUluZm8gPSBuZXdJZGVudGl0eTsKICAgICAgICAgICAgICByZXN1bHQua2V5UGFpciA9IGtleVBhaXI7CgogICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChyZXN1bHQpOwogICAgICAgICAgICAgIHJlc29sdmUobmV3SWRlbnRpdHkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogT1RIRVIgVVNFUidTIElERU5USVRZCiAgICAqLwoKICAgIC8qKgogICAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiB0byB2YWxpZGF0ZSBhbiBJZGVudGl0eUFzc2VydGlvbgogICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi4KICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBhc3NlcnRpb24KICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ3ZhbGlkYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZUFzc2VydGlvbihhc3NlcnRpb24sIG9yaWdpbiwgaWRwRG9tYWluKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnRVhFQ1VURScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ3ZhbGlkYXRlQXNzZXJ0aW9uJywKICAgICAgICAgIHBhcmFtczogeyBhc3NlcnRpb246IGFzc2VydGlvbiwgb3JpZ2luOiBvcmlnaW4gfSB9IH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBpZiAocmVzdWx0LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LmJvZHkudmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdlcnJvcicsIHJlc3VsdC5ib2R5LmNvZGUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY29uc29sZS5sb2coJ2VuY3J5cHQgbWVzc2FnZSAnKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnOwoKICAgICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZQogICAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2VuY3J5cHRpb24gZGlzYWJsZWQnKTsKICAgICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHNwbGl0ZWRUb1VSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTsKICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM107CgogICAgICAgIHZhciBpc1RvRGF0YU9iamVjdCA9ICgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShkYXRhT2JqZWN0VVJMKTsKICAgICAgICB2YXIgaXNGcm9tSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JzsKICAgICAgICB2YXIgaXNUb0h5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknOwoKICAgICAgICBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkgewogICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UuZnJvbSk7CiAgICAgICAgICBpZiAodXNlclVSTCkgewoKICAgICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBrZXlzIGJldHdlZW4gdHdvIHVzZXJzCiAgICAgICAgICAgIHZhciBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b107CiAgICAgICAgICAgIGlmICghY2hhdEtleXMpIHsKICAgICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGVDaGF0S2V5IGVuY3J5cHQnLCBtZXNzYWdlLmZyb20gKyBtZXNzYWdlLnRvKTsKICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gY2hhdEtleXM7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlID0gJ3N0YXJ0SGFuZFNoYWtlJzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgJiYgIWlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgLy9UT0RPIGFwcGx5IHRoZSBtZXNzYWdlIEhBU0gganVzdCBsaWtlIGluIGRvbmUgaW4gdGhlIGhhbmRzaGFrZSBwaGFzZQogICAgICAgICAgICAgICAgdmFyIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCBtZXNzYWdlLmJvZHkudmFsdWUsIGl2KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB7IGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpIH07CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKSk7CiAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyBpZiBpcyBhIGhhbmRzaGFrZSBtZXNzYWdlLCBqdXN0IHJlc29sdmUgaXQKICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKCiAgICAgICAgICAgICAgICAvLyBlbHNlLCBzdGFydHMgYSBuZXcgaGFuZHNoYWtlIHByb3RvY29sCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IHZhbHVlLmNoYXRLZXlzOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICByZWplY3QoJ2VuY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICAvL2lmIGZyb20gaHlwZXJ0eSB0byBhIGRhdGFPYmplY3RVUkwKICAgICAgICB9IGVsc2UgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZW5jcnlwdDogJywgbWVzc2FnZS5ib2R5LnZhbHVlKTsKCiAgICAgICAgICAgIHZhciBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdOwoKICAgICAgICAgICAgLy9pZiBubyBrZXkgZXhpc3RzLCBjcmVhdGUgYSBuZXcgb25lIGlmIGlzIHRoZSByZXBvcnRlciBvZiBkYXRhT2JqZWN0CiAgICAgICAgICAgIGlmICghZGF0YU9iamVjdEtleSkgewogICAgICAgICAgICAgIHZhciBpc0h5cGVydHlSZXBvcnRlciA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhkYXRhT2JqZWN0VVJMKTsKCiAgICAgICAgICAgICAgLy8gaWYgdGhlIGh5cGVydHkgaXMgdGhlIHJlcG9ydGVyIG9mIHRoZSBkYXRhT2JqZWN0IHRoZW4gZ2VuZXJhdGVzIGEgc2Vzc2lvbiBrZXkKICAgICAgICAgICAgICBpZiAoaXNIeXBlcnR5UmVwb3J0ZXIgJiYgaXNIeXBlcnR5UmVwb3J0ZXIgPT09IG1lc3NhZ2UuZnJvbSkgewoKICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7CiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7IHNlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlIH07CgogICAgICAgICAgICAgICAgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tCiAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7CgogICAgICAgICAgICAgIC8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlcwogICAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShtZXNzYWdlLmJvZHkudmFsdWUpKSwgaXYpLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdikgfSkpOwoKICAgICAgICAgICAgICAgICAgICAvL1RPRE8gYXBwbHkgdGhlIG1lc3NhZ2UgSEFTSCBqdXN0IGxpa2UgaW4gZG9uZSBpbiB0aGUgaGFuZHNoYWtlIHBoYXNlCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gbmV3VmFsdWU7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAvLyBpZiBub3QsIGp1c3Qgc2VuZCB0aGUgbWVzc2FnZQogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBzdGFydCB0aGUgZ2VuZXJhdGlvbiBvZiBhIG5ldyBzZXNzaW9uIEtleQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RlY3J5cHRNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnZGVjcnlwdCBtZXNzYWdlICcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7CgogICAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlCiAgICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpOwogICAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgc3BsaXRlZFRvVVJMID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTsKCiAgICAgICAgdmFyIGlzVG9EYXRhT2JqZWN0ID0gKDAsIF91dGlscy5pc0RhdGFPYmplY3RVUkwpKGRhdGFPYmplY3RVUkwpOwogICAgICAgIHZhciBpc0Zyb21IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknOwogICAgICAgIHZhciBpc1RvSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7CgogICAgICAgIC8vaXMgaXMgaHlwZXJ0eSB0byBoeXBlcnR5IGNvbW11bmljYXRpb24KICAgICAgICBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkgewogICAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdCBoeXBlcnR5IHRvIGh5cGVydHknKTsKICAgICAgICAgIHZhciB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLnRvKTsKICAgICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgICB2YXIgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dOwogICAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMLCAnZGVjcnlwdCcpOwogICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV0gPSBjaGF0S2V5czsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgJiYgIWlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgICAgIHZhciB2YWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLml2KTsKICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpOwogICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgdmFsdWUgJywgZGVjcnlwdGVkRGF0YSk7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSBkZWNyeXB0ZWREYXRhOwogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgICAgICAvL2lmIGl0IHdhcyBzdGFydGVkIGJ5IGRvTXV0dWFsQXV0aGVudGljYXRpb24gdGhlbiBlbmRzIHRoZSBwcm90b2NvbAogICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnaGFuZFNoYWtlRW5kJykgewogICAgICAgICAgICAgICAgICByZWplY3QoJ2RlY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpOwoKICAgICAgICAgICAgICAgICAgLy8gaWYgd2FzIHN0YXJ0ZWQgYnkgYSBtZXNzYWdlLCB0aGVuIHJlc2VuZCB0aGF0IG1lc3NhZ2UKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzOwogICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCcpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRlY3J5cHQgbWVzc2FnZScpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTAogICAgICAgIH0gZWxzZSBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBkZWNyeXB0OiAnLCBtZXNzYWdlLmJvZHkpOwoKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07CgogICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkgewoKICAgICAgICAgICAgICAvL2NoZWNrIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24KICAgICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkgewogICAgICAgICAgICAgICAgdmFyIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICAgICAgdmFyIF9pdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUuaXYpOwogICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7CgogICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBlbmNyeXB0ZWRWYWx1ZSwgX2l2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IoZGVjcnlwdGVkVmFsdWUpKTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZCBWYWx1ZSwnLCBwYXJzZWRWYWx1ZSk7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IHBhcnNlZFZhbHVlOwogICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy9pZiBub3QsIGp1c3QgcmV0dXJuIHRoZSBtZXNzYWdlCiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwoKICAgICAgICAgICAgICAvL3JlamVjdCgnbm8gc2Vzc2lvbktleSBmb3IgY2hhdCByb29tIGZvdW5kJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTsKICAgICAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkb011dHVhbEF1dGhlbnRpY2F0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uKHNlbmRlciwgcmVjZWl2ZXIpIHsKICAgICAgY29uc29sZS5sb2coJ2RvTXV0dWFsQXV0aGVudGljYXRpb246ICcsIHNlbmRlciwgcmVjZWl2ZXIpOwogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHZvaWQgMDsKCiAgICAgIC8vIGNoZWNrIGlmIHRoZSBzZW5kZXIgaXMgYSBkYXRhT2JqZWN0IGFuZCBpZiBzbyBzdG9yZXMgdGhhdCB2YWx1ZQogICAgICB2YXIgcmVwb3J0ZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoc2VuZGVyKTsKICAgICAgaWYgKHJlcG9ydGVyVVJMKSB7CiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNlbmRlcjsKICAgICAgICBzZW5kZXIgPSByZXBvcnRlclVSTDsKICAgICAgfQoKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0bzogcmVjZWl2ZXIsCiAgICAgICAgZnJvbTogc2VuZGVyLAogICAgICAgIGNhbGxiYWNrOiB1bmRlZmluZWQsCiAgICAgICAgYm9keTogeyBoYW5kc2hha2VQaGFzZTogJ3N0YXJ0SGFuZFNoYWtlJywgaWdub3JlOiAnaWdub3JlTWVzc2FnZScgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIGlmICghc2VuZGVyIHx8ICFyZWNlaXZlcikgewogICAgICAgICAgcmV0dXJuIHJlamVjdCgnc2VuZGVyIG9yIHJlY2VpdmVyIG1pc3Npbmcgb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbc2VuZGVyICsgJzwtPicgKyByZWNlaXZlcl07CiAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHNlbmRlcik7CgogICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgaWYgKCFjaGF0S2V5cykgewogICAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIHdoZW4gZmluaXNoIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24KICAgICAgICAgICAgdmFyIHJlc29sdmVkID0gZnVuY3Rpb24gcmVzb2x2ZWQodmFsdWUpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbGJhY2sgdmFsdWU6JywgdmFsdWUpOwogICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9OwogICAgICAgICAgICBtc2cuY2FsbGJhY2sgPSByZXNvbHZlZDsKICAgICAgICAgICAgbXNnLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMOwoKICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtc2csIHVzZXJVUkwpOwogICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1tzZW5kZXIgKyAnPC0+JyArIHJlY2VpdmVyXSA9IGNoYXRLZXlzOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkKSB7CgogICAgICAgICAgICB2YXIgc3RhcnRTZXNzaW9uS2V5RXhjaGFuZ2UgPSB7CiAgICAgICAgICAgICAgdG86IHNlbmRlciwKICAgICAgICAgICAgICBmcm9tOiByZWNlaXZlcgogICAgICAgICAgICB9OwogICAgICAgICAgICBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTDsKICAgICAgICAgICAgX3RoaXMuX3NlbmRSZXBvcnRlclNlc3Npb25LZXkoc3RhcnRTZXNzaW9uS2V5RXhjaGFuZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTsKICAgICAgICAgICAgICByZXNvbHZlKCdleGNoYW5nZSBvZiBjaGF0IHNlc3Npb25LZXkgaW5pdGlhdGVkJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1zZywgY2hhdEtleXMpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24nKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19kb0hhbmRTaGFrZVBoYXNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9jb25zb2xlLmxvZygnaGFuZHNoYWtlVHlwZScpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBoYW5kc2hha2VUeXBlID0gbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlOwogICAgICAgIHZhciBpdiA9IHZvaWQgMDsKICAgICAgICB2YXIgdmFsdWUgPSB7fTsKICAgICAgICBzd2l0Y2ggKGhhbmRzaGFrZVR5cGUpIHsKCiAgICAgICAgICBjYXNlICdzdGFydEhhbmRTaGFrZSc6CiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpOwoKICAgICAgICAgICAgdmFyIHN0YXJ0SGFuZFNoYWtlTXNnID0gewogICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckhlbGxvJywKICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzdGFydEhhbmRTaGFrZU1zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB3YXMgdGhlIGVuY3J5cHQgZnVuY3Rpb24gb3IgdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvbiB0aGF0IHJlcXVlc3QgdGhlCiAgICAgICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS4KICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHN0YXJ0SGFuZFNoYWtlTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzOwogICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHN0YXJ0SGFuZFNoYWtlTXNnKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdzZW5kZXJIZWxsbyc6CgogICAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVySGVsbG8nKTsKICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpOwogICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZGVjb2RlKG1lc3NhZ2UuYm9keS52YWx1ZSk7CiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKCiAgICAgICAgICAgIHZhciBzZW5kZXJIZWxsb01zZyA9IHsKICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckhlbGxvJywKICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMudG9SYW5kb20pCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzZW5kZXJIZWxsb01zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiBzZW5kZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdyZWNlaXZlckhlbGxvJzoKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckhlbGxvJyk7CiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpOwoKICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVBc3NlcnRpb24obWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyUHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5jb250ZW50cy5ub25jZSk7CiAgICAgICAgICAgICAgdmFyIHByZW1hc3RlclNlY3JldCA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVBNUygpOwogICAgICAgICAgICAgIHZhciB0b1JhbmRvbSA9IG1lc3NhZ2UuYm9keS52YWx1ZTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjsKICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gcmVjZWl2ZXJQdWJsaWNLZXk7CiAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsOwogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHRvUmFuZG9tKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IHByZW1hc3RlclNlY3JldDsKCiAgICAgICAgICAgICAgdmFyIGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhwcmVtYXN0ZXJTZWNyZXQsIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoY29uY2F0S2V5LCAnbWVzc2FnZUhpc3RvcmljJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBtYXN0ZXIga2V5CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKG1hc3RlcktleSkgewogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMubWFzdGVyS2V5ID0gbWFzdGVyS2V5OwoKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlS2V5cyhtYXN0ZXJLZXksICdrZXkgZXhwYW5zaW9uJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBzeW1tZXRyaWMgYW5kIGhhc2gga2V5cwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlzKSB7CgogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pOwogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1syXSk7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTsKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgLy8gaGFzaCB0aGUgdmFsdWUgYW5kIHRoZSBpdgogICAgICAgICAgICAgIC8vIFRPRE8gYWRkIHRoZSBtZXNzYWdlIGZpZWxkcyB0byB0aGUgaGFzaAogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksICdvaycgKyBpdik7CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICB2YWx1ZS5oYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKTsKCiAgICAgICAgICAgICAgLy9lbmNyeXB0IHRoZSBkYXRhCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICB2YWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24gPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZERhdGEpOwoKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewoKICAgICAgICAgICAgICB2YWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbiA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpOwoKICAgICAgICAgICAgICB2YXIgbWVzc2FnZVN0cnVjdHVyZSA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnNpZ25SU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG1lc3NhZ2VUb0hhc2gpKTsKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2lnbmF0dXJlKSB7CgogICAgICAgICAgICAgIHZhbHVlLnNpZ25hdHVyZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoc2lnbmF0dXJlKTsKCiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVySGVsbG9Nc2cgPSB7CiAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJywKICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHZhbHVlKSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHJlY2VpdmVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdzZW5kZXJDZXJ0aWZpY2F0ZSc6CgogICAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVyQ2VydGlmaWNhdGUnKTsKICAgICAgICAgICAgdmFyIHJlY2VpdmVkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CgogICAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIC8vVE9ETyB2ZXJpZnkgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWRQTVMgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuYXNzeW1ldHJpY0VuY3J5cHRpb24pOwogICAgICAgICAgICAgIHZhciBzZW5kZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmNvbnRlbnRzLm5vbmNlKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjsKICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gc2VuZGVyUHVibGljS2V5OwogICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby51c2VySUQgPSB2YWx1ZS5jb250ZW50cy5lbWFpbDsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIGVuY3J5cHRlZFBNUyk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICAgICAgICByZWplY3QoJ0Vycm9yIGR1cmluZyBhdXRoZW50aWNhdGlvbiBvZiBpZGVudGl0eScpOwoKICAgICAgICAgICAgICAvL29idGFpbiB0aGUgUHJlbWFzdGVyS2V5IHVzaW5nIHRoZSBwcml2YXRlIGtleQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwbXMpIHsKCiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBuZXcgVWludDhBcnJheShwbXMpOwoKICAgICAgICAgICAgICB2YXIgc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnNpZ25hdHVyZSk7CgogICAgICAgICAgICAgIHZhciByZWNlaXZlZG1zZ1RvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHJlY2VpdmVkbXNnVG9IYXNoKSwgc2lnbmF0dXJlKTsKCiAgICAgICAgICAgICAgLy8gdmFsaWRhdGVzIHRoZSBzaWduYXR1cmUgcmVjZWl2ZWQKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2lnblZhbGlkYXRpb25SZXN1bHQpIHsKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpZ25hdHVyZSB2YWxpZGF0aW9uIHJlc3VsdCAnLCBzaWduVmFsaWRhdGlvblJlc3VsdCk7CiAgICAgICAgICAgICAgdmFyIGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMua2V5cy50b1JhbmRvbSwgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgbWFzdGVyIGtleXMgZnJvbSB0aGUgUHJlbWFzdGVyIGtleSBhbmQgdGhlIHJhbmRvbXMKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAobWFzdGVyS2V5KSB7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7CgogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgc3ltbWV0cmljIGVuY3J5cHRpb24KICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cykgewogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1swXSk7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7CiAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTsKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5pdik7CiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uKTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7CiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpOwoKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckNlcnRpZmljYXRlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTsKCiAgICAgICAgICAgICAgdmFyIGhhc2hSZWNlaXZlZCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5oYXNoKTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZGVjcnlwdGVkRGF0YSArIGl2LCBoYXNoUmVjZWl2ZWQpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2ZXJpZmllZEhhc2gpIHsKCiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7CgogICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwoKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEnLCBpdik7CgogICAgICAgICAgICAgIC8vIFRPRE8gYXBwbHkgaGFzaCwganVzdCBsaWtlIGlzIGRvbmUgaW4gdGhlIHByZXZpb3VzIHN0ZXAgbWVzc2FnZQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7CiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gewogICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh2YWx1ZSkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSc6CgogICAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnKTsKICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7CgogICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKCiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5pdik7CiAgICAgICAgICAgIHZhciBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS52YWx1ZSk7CgogICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWREYXRhKSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTsKCiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGFuIGluaXRpYWwgbWVzc2FnZSB0aGF0IHdhcyBibG9ja2VkIGFuZCBzZW5kIGl0CiAgICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbE1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlLmJvZHkudmFsdWUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyBUT0RPIGFwcGx5IGhhc2gsIGp1c3QgbGlrZSBpcyBkb25lIGluIHRoZSBwcmV2aW91cyBzdGVwIG1lc3NhZ2UKCiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogaW5pdGlhbE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKCiAgICAgICAgICAgICAgICAvL3NlbmRzIHRoZSBzZXNzaW9uS2V5IHRvIHRoZSBzdWJzY3JpYmVyIGh5cGVydHkKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdyZXBvcnRlclNlc3Npb25LZXknOgoKICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyU2Vzc2lvbktleScpOwoKICAgICAgICAgICAgdmFyIHZhbHVlSVZhbmRIYXNoID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICB2YXIgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2guaGFzaCk7CiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5pdik7CiAgICAgICAgICAgIHZhciBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2gudmFsdWUpOwogICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgICAgIHZhciBzZXNzaW9uS2V5ID0gdm9pZCAwOwogICAgICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHZvaWQgMDsKICAgICAgICAgICAgdmFyIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cgPSB2b2lkIDA7CgogICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7CiAgICAgICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHBhcnNlZFZhbHVlLmRhdGFPYmplY3RVUkw7CgogICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CgogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIG1lc3NhZ2VUb0hhc2gsIGhhc2gpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoUmVzdWx0KSB7CgogICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTsKCiAgICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdID0geyBzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZSB9OwoKICAgICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2shIScsIGl2KTsKICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZyA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJBY2tub3dsZWRnZScKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpOwogICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgbWVzc2FnZVRvSGFzaCk7CiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2hlZE1lc3NhZ2UpIHsKICAgICAgICAgICAgICB2YXIgZmluYWxWYWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXYgfSkpOwoKICAgICAgICAgICAgICByZWNlaXZlckFja25vd2xlZGdlTXNnLmJvZHkudmFsdWUgPSBmaW5hbFZhbHVlOwogICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiByZWNlaXZlckFja25vd2xlZGdlTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlICdyZWNlaXZlckFja25vd2xlZGdlJzoKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckFja25vd2xlZGdlJyk7CgogICAgICAgICAgICB2YXIgcmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaCA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTsKICAgICAgICAgICAgdmFyIHJlY2VpdmVkSGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5oYXNoKTsKICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaXYpOwogICAgICAgICAgICB2YXIgcmVjZWl2ZWRFbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC52YWx1ZSk7CgogICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWRWYWx1ZSkgewoKICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCByZWNlaXZlZEhhc2gpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoUmVzdWx0KSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2hhc2hSZXN1bHQgJywgaGFzaFJlc3VsdCk7CiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY2hhdEtleXMuY2FsbGJhY2s7CiAgICAgICAgICAgICAgY2FsbGJhY2soJ2hhbmRTaGFrZUVuZCcpOwogICAgICAgICAgICAgIHJlc29sdmUoJ2hhbmRTaGFrZUVuZCcpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmVqZWN0KG1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRSZXBvcnRlclNlc3Npb25LZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBzZXNzaW9uS2V5QnVuZGxlID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2NoYXRLZXlzLmRhdGFPYmplY3RVUkxdOwogICAgICB2YXIgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnID0gdm9pZCAwOwogICAgICB2YXIgdmFsdWVUb0VuY3J5cHQgPSB2b2lkIDA7CiAgICAgIHZhciBzZXNzaW9uS2V5ID0gdm9pZCAwOwogICAgICB2YXIgaXYgPSB2b2lkIDA7CiAgICAgIHZhciB2YWx1ZSA9IHt9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vaWYgdGhlcmUgaXMgbm90IHlldCBhIHNlc3Npb24gS2V5LCBnZW5lcmF0ZXMgYSBuZXcgb25lCiAgICAgICAgaWYgKCFzZXNzaW9uS2V5QnVuZGxlKSB7CiAgICAgICAgICBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7CiAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF0gPSB7IHNlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlIH07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlc3Npb25LZXkgPSBzZXNzaW9uS2V5QnVuZGxlLnNlc3Npb25LZXk7CiAgICAgICAgfQoKICAgICAgICB2YWx1ZVRvRW5jcnlwdCA9ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh7IHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKHNlc3Npb25LZXkpLCBkYXRhT2JqZWN0VVJMOiBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMIH0pOwoKICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7CiAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgdmFsdWVUb0VuY3J5cHQsIGl2KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWRWYWx1ZSkgewoKICAgICAgICAgIHJlcG9ydGVyU2Vzc2lvbktleU1zZyA9IHsKICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlcG9ydGVyU2Vzc2lvbktleScsCiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpCiAgICAgICAgICAgIH0KICAgICAgICAgIH07CgogICAgICAgICAgdmFyIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlcG9ydGVyU2Vzc2lvbktleU1zZywgdmFsdWVUb0VuY3J5cHQgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaGVkTWVzc2FnZSkgewoKICAgICAgICAgIHZhciB2YWx1ZVdpdGhIYXNoID0gYnRvYSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoeyB2YWx1ZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLmJvZHkudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdiB9KSk7CgogICAgICAgICAgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLmJvZHkudmFsdWUgPSB2YWx1ZVdpdGhIYXNoOwogICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHJlcG9ydGVyU2Vzc2lvbktleU1zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogcmV0dXJucyB0aGUgcmVwb3J0ZXIgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdCBVUkwKICAgICogQHBhcmFtICAge1N0cmluZ30gICBkYXRhT2JqZWN0VVJMICAgICAgICAgZGF0YU9iamVjdCB1cmwKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICByZXBvcnRlciAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmwgcmVwb3J0ZXIKICAgICovCgogIH0sIHsKICAgIGtleTogJ19nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBzcGxpdGVkVVJMID0gZGF0YU9iamVjdFVSTC5zcGxpdCgnLycpOwogICAgICAgIHZhciBmaW5hbFVSTCA9IHNwbGl0ZWRVUkxbMF0gKyAnLy8nICsgc3BsaXRlZFVSTFsyXSArICcvJyArIHNwbGl0ZWRVUkxbM107CgogICAgICAgIC8vIGNoZWNrIGlmIGlzIHRoZSBjcmVhdG9yIG9mIHRoZSBoeXBlcnR5CiAgICAgICAgdmFyIHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGZpbmFsVVJMKTsKCiAgICAgICAgaWYgKHJlcG9ydGVyVVJMKSB7CiAgICAgICAgICByZXNvbHZlKHJlcG9ydGVyVVJMKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhbiBhc3NvY2lhdGlvbiBmcm9tIGFuIGh5cGVydHlVUkwgdG8gdGhlIGRhdGFPYmplY3QKICAgICAgICAgIHZhciBzdG9yZWRSZXBvcnRlclVSTCA9IF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdOwoKICAgICAgICAgIGlmIChzdG9yZWRSZXBvcnRlclVSTCkgewogICAgICAgICAgICByZXNvbHZlKHN0b3JlZFJlcG9ydGVyVVJMKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBoeXBlcnR5IHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdFVSTAogICAgICAgICAgICB2YXIgc3Vic2NyaWJlckh5cGVydHkgPSBfdGhpcy5yZWdpc3RyeS5nZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkoZGF0YU9iamVjdFVSTCk7CgogICAgICAgICAgICBpZiAoc3Vic2NyaWJlckh5cGVydHkpIHsKICAgICAgICAgICAgICByZXNvbHZlKHN1YnNjcmliZXJIeXBlcnR5KTsKICAgICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgICAgLy8gc2VhcmNoIGluIGRvbWFpbiByZWdpc3RyeSBmb3IgdGhlIGh5cGVydHkgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdAogICAgICAgICAgICAgIC8vIHNlYXJjaCBpbiBjYXNlIGlzIGEgc3Vic2NyaWJlciB3aG8gd2FudHMgdG8ga25vdyB0aGUgcmVwb3J0ZXIKICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeS5kaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwoZmluYWxVUkwsIHNwbGl0ZWRVUkxbMl0pLnRoZW4oZnVuY3Rpb24gKGRhdGFPYmplY3QpIHsKICAgICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdID0gZGF0YU9iamVjdC5yZXBvcnRlcjsKICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZQogICAgKiBAcGFyYW0ge01lc3NhZ2V9ICBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZQogICAgKiBAcGFyYW0ge1N0cmluZ30gIGRlY3J5cHRlZFZhbHVlIChPcHRpb25hbCkgICAgdmFsdWUgZnJvbSBib2R5LnZhbHVlIGluIGNhc2UgaXQgb3JpZ2luYWxseSBjb21lcyBlbmNyeXB0ZWQKICAgICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2UKICAgICogQHJldHVybiB7TWVzc2FnZX0gIG5ldyBtZXNzYWdlIGZpbHRlcmVkCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfZmlsdGVyTWVzc2FnZVRvSGFzaCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUsIGlkZW50aXR5KSB7CgogICAgICByZXR1cm4gewogICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZSwKICAgICAgICBmcm9tOiBtZXNzYWdlLmZyb20sCiAgICAgICAgdG86IG1lc3NhZ2UudG8sCiAgICAgICAgYm9keTogewogICAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5IHx8IG1lc3NhZ2UuYm9keS5pZGVudGl0eSwKICAgICAgICAgIHZhbHVlOiBkZWNyeXB0ZWRWYWx1ZSB8fCBtZXNzYWdlLmJvZHkudmFsdWUsCiAgICAgICAgICBoYW5kc2hha2VQaGFzZTogbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlCiAgICAgICAgfQogICAgICB9OwogICAgfQoKICAgIC8qKgogICAgKiBnZW5lcmF0ZXMgdGhlIGluaXRpYWwgc3RydWN0dXJlIGZvciB0aGUga2V5cyBiZXR3ZWVuIHR3byB1c2VycwogICAgKiBAcGFyYW0ge0pTT059ICAgIG1lc3NhZ2UgICAgICAgICAgICAgIGluaXRpYWwgbWVzc2FnZSB0aGF0IHRyaWdnZXJzIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24KICAgICogQHBhcmFtIHtTdHJpbmd9ICB1c2VyVVJMICAgICAgICAgICAgICB1c2VyVVJMCiAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjZWl2ZXIoT3B0aW9uYWwpICBpbmRpY2F0ZXMgaWYgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdGhhdCBjcmVhdGVzIGEgbmV3IGNoYXQgY3J5cHRvCiAgICAqIEByZXR1cm4ge0pTT059IG5ld0NoYXRDcnlwdG8gIG5ldyBKU09OIHN0cnVjdHVyZSBmb3IgdGhlIGNoYXQgY3J5cHRvCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfbmV3Q2hhdENyeXB0bycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgcmVjZWl2ZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vY2hlY2sgd2hldGhlciBpcyB0aGUgc2VuZGVyIG9yIHRoZSByZWNlaXZlciB0byBjcmVhdGUgYSBuZXcgY2hhdENyeXB0bwogICAgICAvL3RvIG1hbnRhaW4gY29uc2lzdGVuY3kgb24gdGhlIGtleXMgaWYgdGhlIHJlY2VpdmVyIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvLAogICAgICAvL3RoZW4gaW52ZXJ0IHRoZSBmaWVsZHMKICAgICAgdmFyIGZyb20gPSByZWNlaXZlciA/IG1lc3NhZ2UudG8gOiBtZXNzYWdlLmZyb207CiAgICAgIHZhciB0byA9IHJlY2VpdmVyID8gbWVzc2FnZS5mcm9tIDogbWVzc2FnZS50bzsKCiAgICAgIHZhciB1c2VySW5mbyA9IF90aGlzLmdldElkZW50aXR5KHVzZXJVUkwpOwoKICAgICAgdmFyIG5ld0NoYXRDcnlwdG8gPSB7CiAgICAgICAgaHlwZXJ0eUZyb206IHsKICAgICAgICAgIGh5cGVydHk6IGZyb20sCiAgICAgICAgICB1c2VySUQ6IHVzZXJJbmZvLm1lc3NhZ2VJbmZvLnVzZXJQcm9maWxlLnVzZXJuYW1lLAogICAgICAgICAgcHJpdmF0ZUtleTogdXNlckluZm8ua2V5UGFpci5wcml2YXRlLAogICAgICAgICAgcHVibGljS2V5OiB1c2VySW5mby5rZXlQYWlyLnB1YmxpYywKICAgICAgICAgIGFzc2VydGlvbjogdXNlckluZm8uYXNzZXJ0aW9uLAogICAgICAgICAgbWVzc2FnZUluZm86IHVzZXJJbmZvLm1lc3NhZ2VJbmZvCiAgICAgICAgfSwKICAgICAgICBoeXBlcnR5VG86IHsKICAgICAgICAgIGh5cGVydHk6IHRvLAogICAgICAgICAgdXNlcklEOiB1bmRlZmluZWQsCiAgICAgICAgICBwdWJsaWNLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGFzc2VydGlvbjogdW5kZWZpbmVkCiAgICAgICAgfSwKICAgICAgICBrZXlzOiB7CiAgICAgICAgICBoeXBlcnR5VG9TZXNzaW9uS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBoeXBlcnR5RnJvbVNlc3Npb25LZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGh5cGVydHlUb0hhc2hLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIGh5cGVydHlGcm9tSGFzaEtleTogdW5kZWZpbmVkLAogICAgICAgICAgdG9SYW5kb206IHVuZGVmaW5lZCwKICAgICAgICAgIGZyb21SYW5kb206IHVuZGVmaW5lZCwKICAgICAgICAgIHByZW1hc3RlcktleTogdW5kZWZpbmVkLAogICAgICAgICAgbWFzdGVyS2V5OiB1bmRlZmluZWQKICAgICAgICB9LAogICAgICAgIGhhbmRzaGFrZUhpc3Rvcnk6IHsKICAgICAgICAgIHNlbmRlckhlbGxvOiB1bmRlZmluZWQsCiAgICAgICAgICByZWNlaXZlckhlbGxvOiB1bmRlZmluZWQsCiAgICAgICAgICBzZW5kZXJDZXJ0aWZpY2F0ZTogdW5kZWZpbmVkLAogICAgICAgICAgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U6IHVuZGVmaW5lZAogICAgICAgIH0sCiAgICAgICAgaW5pdGlhbE1lc3NhZ2U6IG1lc3NhZ2UuYm9keS5pZ25vcmUgPyB1bmRlZmluZWQgOiBtZXNzYWdlLAogICAgICAgIGNhbGxiYWNrOiBtZXNzYWdlLmNhbGxiYWNrLAogICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLAogICAgICAgIGRhdGFPYmplY3RVUkw6IG1lc3NhZ2UuZGF0YU9iamVjdFVSTAogICAgICB9OwoKICAgICAgcmV0dXJuIG5ld0NoYXRDcnlwdG87CiAgICB9CiAgfSwgewogICAga2V5OiAnbWVzc2FnZUJ1cycsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzOwogICAgfQoKICAgIC8qKgogICAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzCiAgICAqLwogICAgLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobWVzc2FnZUJ1cykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CiAgICB9CgogICAgLyoqCiAgICAqIHJldHVybiB0aGUgcmVnaXN0cnkgaW4gdGhpcyBpZE1vZHVsZQogICAgKiBAcGFyYW0ge3JlZ2lzdHJ5fSAgICAgICAgICAgcmVnaXN0cnkKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdHJ5JywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3JlZ2lzdHJ5OwogICAgfQoKICAgIC8qKgogICAgKiBTZXQgdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGUKICAgICogQHBhcmFtIHtyZWdpc3RyeX0gICAgIHJlZwogICAgKi8KICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KHJlZ2lzdHJ5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5OwogICAgfQogIH1dKTsKICByZXR1cm4gSWRlbnRpdHlNb2R1bGU7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IElkZW50aXR5TW9kdWxlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscy5qcyI6NDE2LCIuL0NyeXB0byI6Mzk0LCIuL0lkZW50aXR5IjozOTUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6Mjk3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MzA1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjMwNywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjozMDh9XSwzOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBDb250ZXh0KCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQ29udGV4dCk7CgogICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IENvbnRleHQpIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2FuIG5vdCBjb25zdHJ1Y3QgYWJzdHJhY3QgY2xhc3MuJyk7CiAgICB9CiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQ29udGV4dC5wcm90b3R5cGUuY29uc3RydWN0b3IpIHsKICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGxlYXNlIGltcGxlbWVudCBhYnN0cmFjdCBtZXRob2QgY29uc3RydWN0b3IuJyk7CiAgICB9CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShDb250ZXh0LCBudWxsLCBbewogICAga2V5OiAnbG9hZFBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUG9saWNpZXMoKSB7CiAgICAgIGlmICh0aGlzID09PSBDb250ZXh0KSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2FuIG5vdCBjYWxsIHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgbG9hZFBvbGljaWVzLicpOwogICAgICB9IGVsc2UgaWYgKHRoaXMubG9hZFBvbGljaWVzID09PSBDb250ZXh0LmxvYWRQb2xpY2llcykgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1BsZWFzZSBpbXBsZW1lbnQgc3RhdGljIGFic3RyYWN0IG1ldGhvZCBsb2FkUG9saWNpZXMuJyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRG8gbm90IGNhbGwgc3RhdGljIGFic3RyYWN0IG1ldGhvZCBsb2FkUG9saWNpZXMgZnJvbSBjaGlsZC4nKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2FkZFN1YnNjcmlwdGlvblBvbGljeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3Vic2NyaXB0aW9uUG9saWN5KCkgewogICAgICBpZiAodGhpcyA9PT0gQ29udGV4dCkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGFkZFN1YnNjcmlwdGlvblBvbGljeS4nKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFkZFN1YnNjcmlwdGlvblBvbGljeSA9PT0gQ29udGV4dC5hZGRTdWJzY3JpcHRpb25Qb2xpY3kpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgaW1wbGVtZW50IHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgYWRkU3Vic2NyaXB0aW9uUG9saWN5LicpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RvIG5vdCBjYWxsIHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgYWRkU3Vic2NyaXB0aW9uUG9saWN5IGZyb20gY2hpbGQuJyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdpc1RvVmVyaWZ5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvVmVyaWZ5KCkgewogICAgICBpZiAodGhpcyA9PT0gQ29udGV4dCkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGlzVG9WZXJpZnkuJyk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1RvVmVyaWZ5ID09PSBDb250ZXh0LmlzVG9WZXJpZnkpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgaW1wbGVtZW50IHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgaXNUb1ZlcmlmeS4nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEbyBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGlzVG9WZXJpZnkgZnJvbSBjaGlsZC4nKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldEFwcGxpY2FibGVQb2xpY2llcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXBwbGljYWJsZVBvbGljaWVzKCkgewogICAgICBpZiAodGhpcyA9PT0gQ29udGV4dCkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGdldEFwcGxpY2FibGVQb2xpY2llcy4nKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmdldEFwcGxpY2FibGVQb2xpY2llcyA9PT0gQ29udGV4dC5nZXRBcHBsaWNhYmxlUG9saWNpZXMpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgaW1wbGVtZW50IHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgZ2V0QXBwbGljYWJsZVBvbGljaWVzLicpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RvIG5vdCBjYWxsIHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgZ2V0QXBwbGljYWJsZVBvbGljaWVzIGZyb20gY2hpbGQuJyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdhcHBseVBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseVBvbGljaWVzKCkgewogICAgICBpZiAodGhpcyA9PT0gQ29udGV4dCkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGFwcGx5UG9saWNpZXMuJyk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcHBseVBvbGljaWVzID09PSBDb250ZXh0LmFwcGx5UG9saWNpZXMpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgaW1wbGVtZW50IHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgYXBwbHlQb2xpY2llcy4nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEbyBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGFwcGx5UG9saWNpZXMgZnJvbSBjaGlsZC4nKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKCkgewogICAgICBpZiAodGhpcyA9PT0gQ29udGV4dCkgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBub3QgY2FsbCBzdGF0aWMgYWJzdHJhY3QgbWV0aG9kIGF1dGhvcmlzZS4nKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmF1dGhvcmlzZSA9PT0gQ29udGV4dC5hdXRob3Jpc2UpIHsKICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQbGVhc2UgaW1wbGVtZW50IHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgYXV0aG9yaXNlLicpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RvIG5vdCBjYWxsIHN0YXRpYyBhYnN0cmFjdCBtZXRob2QgYXV0aG9yaXNlIGZyb20gY2hpbGQuJyk7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIENvbnRleHQ7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IENvbnRleHQ7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDM5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBPcGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gT3BlcmF0b3JzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgT3BlcmF0b3JzKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMub3BlcmF0b3JzID0gX3RoaXMuc2V0T3BlcmF0b3JzKCk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShPcGVyYXRvcnMsIFt7CiAgICBrZXk6ICdzZXRPcGVyYXRvcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldE9wZXJhdG9ycygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIG9wZXJhdG9ycyA9IHsKICAgICAgICBiZXR3ZWVuOiBmdW5jdGlvbiBiZXR3ZWVuKHBhcmFtcykgewogICAgICAgICAgcmV0dXJuIF90aGlzLmlzQmV0d2VlbihwYXJhbXNbMF1bMF0sIHBhcmFtc1swXVsxXSwgcGFyYW1zWzFdKTsKICAgICAgICB9LAogICAgICAgIGluOiBmdW5jdGlvbiBfaW4ocGFyYW1zKSB7CiAgICAgICAgICByZXR1cm4gcGFyYW1zWzBdLmluZGV4T2YocGFyYW1zWzFdKSA+IC0xOwogICAgICAgIH0sCiAgICAgICAgZXF1YWxzOiBmdW5jdGlvbiBlcXVhbHMocGFyYW1zKSB7CiAgICAgICAgICByZXR1cm4gcGFyYW1zWzBdWzBdID09PSAnKicgfHwgcGFyYW1zWzBdWzBdID09PSBwYXJhbXNbMV07CiAgICAgICAgfSwKCiAgICAgICAgb3I6IGZ1bmN0aW9uIG9yKHBhcmFtcykgewogICAgICAgICAgcmV0dXJuIHBhcmFtc1swXSB8fCBwYXJhbXNbMV07CiAgICAgICAgfSwKICAgICAgICBhbmQ6IGZ1bmN0aW9uIGFuZChwYXJhbXMpIHsKICAgICAgICAgIHJldHVybiBwYXJhbXNbMF0gJiYgcGFyYW1zWzFdOwogICAgICAgIH0sCiAgICAgICAgbm90OiBmdW5jdGlvbiBub3QocGFyYW1zKSB7CiAgICAgICAgICByZXR1cm4gIXBhcmFtc1swXTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHJldHVybiBvcGVyYXRvcnM7CiAgICB9CgogICAgLyoqCiAgICAqIFZlcmlmaWVzIGlmIHRoZSBjdXJyZW50IHRpbWUgaXMgYmV0d2VlbiB0aGUgZ2l2ZW4gc3RhcnQgYW5kIGVuZCB0aW1lcy4KICAgICogQHBhcmFtIHtOdW1iZXJ9ICAgICBzdGFydAogICAgKiBAcGFyYW0ge051bWJlcn0gICAgIGVuZAogICAgKiBAcmV0dXJuIHtCb29sZWFufSAgIGJvb2xlYW4KICAgICovCgogIH0sIHsKICAgIGtleTogJ2lzQmV0d2VlbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNCZXR3ZWVuKHN0YXJ0LCBlbmQsIG5vdykgewogICAgICBzdGFydCA9IHBhcnNlSW50KHN0YXJ0KTsKICAgICAgZW5kID0gcGFyc2VJbnQoZW5kKTsKCiAgICAgIGlmIChlbmQgPCBzdGFydCkgewogICAgICAgIG5vdyA9IG5vdyA8IHN0YXJ0ID8gbm93ICs9IDI0MDAgOiBub3c7CiAgICAgICAgZW5kICs9IDI0MDA7CiAgICAgIH0KCiAgICAgIHJldHVybiBub3cgPiBzdGFydCAmJiBub3cgPCBlbmQ7CiAgICB9CiAgfV0pOwogIHJldHVybiBPcGVyYXRvcnM7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IE9wZXJhdG9yczsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4fV0sMzk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpOwoKdmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfT3BlcmF0b3JzID0gcmVxdWlyZSgnLi9PcGVyYXRvcnMnKTsKCnZhciBfT3BlcmF0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09wZXJhdG9ycyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogVGhlIFBvbGljeSBEZWNpc2lvbiBQb2ludCAoUERQKSBkZWNpZGVzIGlmIGEgbWVzc2FnZSBpcyB0byBiZSBhdXRob3Jpc2VkIGJ5IGNoZWNraW5nIGEgc2V0IG9mCiogcG9saWNpZXMuIFRoZSByZXNvdXJjZSB0byBiZSB2ZXJpZmllZCBpcyBzcGVjaWZpZWQgaW4gdGhlIGZpcnN0IHdvcmQgb2YgdGhlICdjb25kaXRpb24nIGZpZWxkIG9mCiogYSBQb2xpY3kgb2JqZWN0LiBUaGUgaW1wbGVtZW50YXRpb24gdGhhdCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBjb21wbGlhbnQgd2l0aCBhIHBvbGljeSBpcwoqIHNwZWNpZmllZCBpbiBhIGhhc2h0YWJsZSB0byBhbGxvdyBkeW5hbWljIGRlZmluaXRpb24gb2YgdGhlIGltcGxlbWVudGF0aW9uLCBwcm92aWRpbmcKKiBleHRlbnNpYmlsaXR5IHRvIHRoZSBQb2xpY3kgRW5naW5lIGZ1bmN0aW9uYWxpdGllcy4KKi8KCnZhciBQRFAgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBieSB0aGUgUG9saWN5IEVuZ2luZSBhbmQgaW5zdGFudGlhdGVzIHRoZSBQb2xpY3kgRGVjaXNpb24gUG9pbnQuIEl0CiAgKiBpbml0aWFsaXNlcyBvciBsb2FkcyBmcm9tIHRoZSBQZXJzaXN0ZW5jZSBNYW5hZ2VyIHRoZSBvYmplY3QgJ215R3JvdXBzJyB0byBzdG9yZSB0aGUgdXNlcidzCiAgKiBncm91cHMuCiAgKiBAcGFyYW0gIHtSZWdpc3RyeX0gICAgbXVjaHJ1bnRpbWVSZWdpc3RyeQogICovCgogIGZ1bmN0aW9uIFBEUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRFApOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIF90aGlzLm9wZXJhdG9ycyA9IG5ldyBfT3BlcmF0b3JzMi5kZWZhdWx0KGNvbnRleHQpOwogIH0KCiAgLyoqCiAgKiBWZXJpZmllcyBpZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpcyBjb21wbGlhbnQgd2l0aCB0aGUgZ2l2ZW4gcG9saWNpZXMuIElmIG9uZSBvZiB0aGUgcG9saWNpZXMKICAqIGV2YWx1YXRlcyB0byAnZmFsc2UnLCB0aGVuIHRoZSBtZXNzYWdlIGlzIG5vdCBhdXRob3Jpc2VkLiBSZXR1cm5zIHRoZSBmaW5hbCBhdXRob3Jpc2F0aW9uCiAgKiBkZWNpc2lvbiBhbmQgYSBzZXQgb2YgYWN0aW9ucyB0aGF0IHBvbGljaWVzIG1heSByZXF1aXJlLgogICogQHBhcmFtIHtNZXNzYWdlfSAgbWVzc2FnZQogICogQHBhcmFtIHtVUkx9ICAgICAgaHlwZXJ0eVRvVmVyaWZ5CiAgKiBAcGFyYW0ge0FycmF5fSAgICBwb2xpY2llcwogICogQHJldHVybiB7QXJyYXl9ICAgW2F1dGhEZWNpc2lvbiwgYWN0aW9uc10KICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUERQLCBbewogICAga2V5OiAnZXZhbHVhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV2YWx1YXRlKG1lc3NhZ2UsIHBvbGljaWVzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciByZXN1bHRzID0gW3RydWVdOwogICAgICB2YXIgYWN0aW9ucyA9IFtdOwogICAgICBmb3IgKHZhciBpIGluIHBvbGljaWVzKSB7CiAgICAgICAgdmFyIHBvbGljeSA9IHBvbGljaWVzW2ldOwogICAgICAgIHZhciBjb25kaXRpb24gPSBwb2xpY3kuY29uZGl0aW9uOwogICAgICAgIHZhciB2ZXJpZmllc0NvbmRpdGlvbiA9IGZhbHNlOwogICAgICAgIGlmICgodHlwZW9mIGNvbmRpdGlvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjb25kaXRpb24pKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgIHZlcmlmaWVzQ29uZGl0aW9uID0gX3RoaXMudmVyaWZpZXNBZHZhbmNlZENvbmRpdGlvbihjb25kaXRpb25bMF0sIGNvbmRpdGlvblsxXSwgY29uZGl0aW9uWzJdLCBwb2xpY3kuc2NvcGUsIG1lc3NhZ2UpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2ZXJpZmllc0NvbmRpdGlvbiA9IF90aGlzLnZlcmlmaWVzU2ltcGxlQ29uZGl0aW9uKGNvbmRpdGlvbiwgcG9saWN5LnNjb3BlLCBtZXNzYWdlKTsKICAgICAgICB9CgogICAgICAgIGlmICh2ZXJpZmllc0NvbmRpdGlvbikgewogICAgICAgICAgcmVzdWx0cy5wdXNoKHBvbGljeS5hdXRob3Jpc2UpOwogICAgICAgIH0KICAgICAgICBpZiAocG9saWN5LmFjdGlvbnMgIT09IFtdKSB7CiAgICAgICAgICBmb3IgKHZhciBfaSBpbiBwb2xpY3kuYWN0aW9ucykgewogICAgICAgICAgICB2YXIgbmV3QWN0aW9uID0gewogICAgICAgICAgICAgIG1ldGhvZDogcG9saWN5LmFjdGlvbnNbX2ldLm1ldGhvZCwKICAgICAgICAgICAgICBwYXJhbXM6IG1lc3NhZ2UKICAgICAgICAgICAgfTsKICAgICAgICAgICAgYWN0aW9ucy5wdXNoKG5ld0FjdGlvbik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgYXV0aERlY2lzaW9uID0gcmVzdWx0cy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7CiAgICAgIHJldHVybiBbYXV0aERlY2lzaW9uLCBhY3Rpb25zXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd2ZXJpZmllc1NpbXBsZUNvbmRpdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmVyaWZpZXNTaW1wbGVDb25kaXRpb24oY29uZGl0aW9uLCBzY29wZSwgbWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgc3BsaXRDb25kaXRpb24gPSBjb25kaXRpb24uc3BsaXQoJyAnKTsKICAgICAgdmFyIHZhcmlhYmxlID0gc3BsaXRDb25kaXRpb25bMF07CiAgICAgIHZhciBvcGVyYXRvciA9IHNwbGl0Q29uZGl0aW9uWzFdOwoKICAgICAgdmFyIHBhcmFtcyA9IHZvaWQgMDsKICAgICAgaWYgKG9wZXJhdG9yID09PSAnaW4nKSB7CiAgICAgICAgX3RoaXMuY29udGV4dC5ncm91cCA9IHsgc2NvcGU6IHNjb3BlLCBncm91cDogc3BsaXRDb25kaXRpb25bMl0sIGRlc3RpbmF0aW9uOiBtZXNzYWdlLnRvIH07CiAgICAgICAgcGFyYW1zID0gX3RoaXMuY29udGV4dC5ncm91cDsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXJhbXMgPSBzcGxpdENvbmRpdGlvbi5zbGljZSgyKTsKICAgICAgfQogICAgICBfdGhpcy5jb250ZXh0W3ZhcmlhYmxlXSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9OwogICAgICB2YXIgdmFsdWUgPSBfdGhpcy5jb250ZXh0W3ZhcmlhYmxlXTsKICAgICAgcmV0dXJuIF90aGlzLm9wZXJhdG9ycy5vcGVyYXRvcnNbb3BlcmF0b3JdKFtwYXJhbXMsIHZhbHVlXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAndmVyaWZpZXNBZHZhbmNlZENvbmRpdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gdmVyaWZpZXNBZHZhbmNlZENvbmRpdGlvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQsIHNjb3BlLCBtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHdoaWxlICgodHlwZW9mIGxlZnQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkobGVmdCkpID09PSAnb2JqZWN0JykgewogICAgICAgIGxlZnQgPSBfdGhpcy52ZXJpZmllc0FkdmFuY2VkQ29uZGl0aW9uKGxlZnRbMF0sIGxlZnRbMV0sIGxlZnRbMl0sIHNjb3BlLCBtZXNzYWdlKTsKICAgICAgfQogICAgICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHdoaWxlICgodHlwZW9mIHJpZ2h0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJpZ2h0KSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICByaWdodCA9IF90aGlzLnZlcmlmaWVzQWR2YW5jZWRDb25kaXRpb24ocmlnaHRbMF0sIHJpZ2h0WzFdLCByaWdodFsyXSwgc2NvcGUsIG1lc3NhZ2UpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIHJlc3VsdExlZnQgPSB0eXBlb2YgbGVmdCA9PT0gJ2Jvb2xlYW4nID8gbGVmdCA6IF90aGlzLnZlcmlmaWVzU2ltcGxlQ29uZGl0aW9uKGxlZnQsIHNjb3BlLCBtZXNzYWdlKTsKCiAgICAgIHZhciByZXN1bHRSaWdodCA9IHZvaWQgMDsKICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXN1bHRSaWdodCA9IHR5cGVvZiByaWdodCA9PT0gJ2Jvb2xlYW4nID8gcmlnaHQgOiBfdGhpcy52ZXJpZmllc1NpbXBsZUNvbmRpdGlvbihyaWdodCwgc2NvcGUsIG1lc3NhZ2UpOwogICAgICB9CgogICAgICByZXR1cm4gX3RoaXMub3BlcmF0b3JzLm9wZXJhdG9yc1tvcGVyYXRvcl0oW3Jlc3VsdExlZnQsIHJlc3VsdFJpZ2h0XSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBQRFA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBEUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9PcGVyYXRvcnMiOjM5OCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mIjozMTF9XSw0MDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUEVQID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBFUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRVApOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBFUCwgW3sKICAgIGtleTogImVuZm9yY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuZm9yY2UocmVzdWx0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBhdXRoRGVjaXNpb24gPSByZXN1bHRbMF07CiAgICAgIHZhciBhY3Rpb25zID0gcmVzdWx0WzFdOwoKICAgICAgZm9yICh2YXIgaSBpbiBhY3Rpb25zKSB7CiAgICAgICAgX3RoaXMuY29udGV4dFthY3Rpb25zW2ldLm1ldGhvZF0oYWN0aW9uc1tpXS5wYXJhbXMsIGF1dGhEZWNpc2lvbik7CiAgICAgIH0KICAgIH0KCiAgICAvKnNlbmRBdXRvbWF0aWNNZXNzYWdlKCkge30KICAgICBmb3J3YXJkVG9JRCgpIHt9CiAgICAgZm9yd2FyZFRvSHlwZXJ0eSgpIHt9Ki8KCiAgfV0pOwogIHJldHVybiBQRVA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBFUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4fV0sNDAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpOwoKdmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfUEVQID0gcmVxdWlyZSgnLi9QRVAnKTsKCnZhciBfUEVQMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BFUCk7Cgp2YXIgX1BEUCA9IHJlcXVpcmUoJy4vUERQJyk7Cgp2YXIgX1BEUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QRFApOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIFRoZSBQb2xpY3kgRW5naW5lIGludGVyY2VwdHMgYWxsIHRoZSBtZXNzYWdlcyBzZW50IHRocm91Z2ggdGhlIE1lc3NhZ2UgQnVzIGFuZCBhcHBsaWVzIHRoZQoqIHBvbGljaWVzIGRlZmluZWQgYnkgdGhlIHNlcnZpY2UgcHJvdmlkZXIgYW5kIHRoZSB1c2VyLgoqLwovL2pzaGludCBicm93c2VyOnRydWUsIGpxdWVyeTogdHJ1ZQoKLy9pbXBvcnQgcGVyc2lzdGVuY2VNYW5hZ2VyIGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvUGVyc2lzdGVuY2VNYW5hZ2VyJzsKCnZhciBQb2xpY3lFbmdpbmUgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBieSB0aGUgUnVudGltZVVBIGFuZCBpbnN0YW50aWF0ZXMgdGhlIFBvbGljeSBFbmdpbmUuIEEgUG9saWN5IERlY2lzaW9uCiAgKiBQb2ludCAoUERQKSBhbmQgYSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkgYXJlIGluaXRpYWxpc2VkIGZvciB0aGUgZXZhbHVhdGlvbiBvZiBwb2xpY2llcwogICogYW5kIHRoZSBlbmZvcmNlbWVudCBvZiBhZGRpdGlvbmFsIGFjdGlvbnMsIHJlc3BlY3RpdmVseS4KICAqIEBwYXJhbSAge0lkZW50aXR5TW9kdWxlfSAgICBpZGVudGl0eU1vZHVsZQogICogQHBhcmFtICB7UmVnaXN0cnl9ICAgICAgICAgIHJ1bnRpbWVSZWdpc3RyeQogICovCgogIGZ1bmN0aW9uIFBvbGljeUVuZ2luZShjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb2xpY3lFbmdpbmUpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIF90aGlzLmNvbnRleHQucGRwID0gbmV3IF9QRFAyLmRlZmF1bHQoY29udGV4dCk7CiAgICBfdGhpcy5jb250ZXh0LnBlcCA9IG5ldyBfUEVQMi5kZWZhdWx0KGNvbnRleHQpOwogIH0KCiAgLyoqCiAgKiBBc3NvY2lhdGVzIHRoZSBnaXZlbiBwb2xpY2llcyB3aXRoIGEgc2NvcGUuIFRoZSBwb3NzaWJsZSBzY29wZXMgYXJlICdnbG9iYWwnLCAnaHlwZXJ0eScgYW5kCiAgKiAndXNlcicuCiAgKiBAcGFyYW0gIHtQb2xpY3lbXX0gIHBvbGljaWVzCiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgIHNjb3BlCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBvbGljeUVuZ2luZSwgW3sKICAgIGtleTogJ2FkZFBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQb2xpY2llcyhuZXdQb2xpY2llcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG15UG9saWNpZXMgPSBfdGhpcy5jb250ZXh0LnBvbGljaWVzOwogICAgICBpZiAobXlQb2xpY2llcyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbXlQb2xpY2llcyA9IHt9OwogICAgICB9CgogICAgICBmb3IgKHZhciBpIGluIG5ld1BvbGljaWVzKSB7CiAgICAgICAgdmFyIG5ld1BvbGljeSA9IG5ld1BvbGljaWVzW2ldOwogICAgICAgIHZhciBzY29wZSA9IG5ld1BvbGljeS5zY29wZTsKICAgICAgICBpZiAobXlQb2xpY2llc1tzY29wZV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgbXlQb2xpY2llc1tzY29wZV0gPSBbXTsKICAgICAgICB9CiAgICAgICAgZm9yICh2YXIgaiBpbiBteVBvbGljaWVzW3Njb3BlXSkgewogICAgICAgICAgdmFyIGV4aXN0aW5nUG9saWN5ID0gbXlQb2xpY2llc1tzY29wZV1bal07CiAgICAgICAgICBpZiAoZXhpc3RpbmdQb2xpY3kuY29uZGl0aW9uID09PSBuZXdQb2xpY3kuY29uZGl0aW9uKSB7CiAgICAgICAgICAgIF90aGlzLnJlbW92ZVBvbGljaWVzKG5ld1BvbGljaWVzW2ldLmNvbmRpdGlvbik7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBteVBvbGljaWVzW3Njb3BlXS5wdXNoKG5ld1BvbGljaWVzW2ldKTsKICAgICAgfQoKICAgICAgX3RoaXMuY29udGV4dC5wb2xpY2llcyA9IG15UG9saWNpZXM7CiAgICB9CgogICAgLyoqCiAgICAqIFJlbW92ZXMgdGhlIHBvbGljeSB3aXRoIHRoZSBnaXZlbiBJRCBmcm9tIHRoZSBnaXZlbiBzY29wZS4gSWYgcG9saWN5SUQgaXMgJyonLCByZW1vdmVzIGFsbCBwb2xpY2llcyBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIHNjb3BlLgogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBwb2xpY3lJRAogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBzY29wZQogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVtb3ZlUG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZVBvbGljaWVzKHNjb3BlLCBjb25kaXRpb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIG15UG9saWNpZXMgPSBfdGhpcy5jb250ZXh0LnBvbGljaWVzOwoKICAgICAgaWYgKHNjb3BlICE9PSAnKicpIHsKCiAgICAgICAgaWYgKHNjb3BlIGluIG15UG9saWNpZXMpIHsKICAgICAgICAgIGlmIChjb25kaXRpb24gIT09ICcqJykgewogICAgICAgICAgICB2YXIgcG9saWNpZXMgPSBteVBvbGljaWVzW3Njb3BlXTsKICAgICAgICAgICAgdmFyIHR5cGVPZkNvbmRpdGlvbiA9IHR5cGVvZiBjb25kaXRpb24gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY29uZGl0aW9uKTsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwb2xpY2llcykgewogICAgICAgICAgICAgIHZhciB0eXBlT2ZQb2xpY3lDb25kaXRpb24gPSAoMCwgX3R5cGVvZjMuZGVmYXVsdCkocG9saWNpZXNbaV0uY29uZGl0aW9uKTsKICAgICAgICAgICAgICBpZiAodHlwZU9mQ29uZGl0aW9uID09PSB0eXBlT2ZQb2xpY3lDb25kaXRpb24pIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlT2ZDb25kaXRpb24gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgIGlmIChwb2xpY2llc1tpXS5jb25kaXRpb24gPT09IGNvbmRpdGlvbikgewogICAgICAgICAgICAgICAgICAgIHBvbGljaWVzLnNwbGljZShpLCAxKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgLy90eXBlb2YgY29uZGl0aW9uID0gb2JqZWN0IChhZHZhbmNlZCBwb2xpY3kpCiAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hcmVFcXVhbEFycmF5cyhwb2xpY2llc1tpXS5jb25kaXRpb24sIGNvbmRpdGlvbikpIHsKICAgICAgICAgICAgICAgICAgICBwb2xpY2llcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlbGV0ZSBteVBvbGljaWVzW3Njb3BlXTsKICAgICAgICAgIH0KCiAgICAgICAgICBfdGhpcy5jb250ZXh0LnBvbGljaWVzID0gbXlQb2xpY2llczsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgX3RoaXMuY29udGV4dC5wb2xpY2llcyA9IHt9OwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnYXJlRXF1YWxBcnJheXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFyZUVxdWFsQXJyYXlzKGFycmF5MSwgYXJyYXkyKSB7CiAgICAgIGlmIChhcnJheTEubGVuZ3RoICE9PSBhcnJheTIubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CgogICAgICB2YXIgbnVtRWxlbWVudHMgPSBhcnJheTEubGVuZ3RoOwogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpKyspIHsKICAgICAgICBpZiAoYXJyYXkxW2ldIGluc3RhbmNlb2YgQXJyYXkgJiYgYXJyYXkyW2ldIGluc3RhbmNlb2YgQXJyYXkpIHsKICAgICAgICAgIGlmICghYXJyYXkxW2ldLmVxdWFscyhhcnJheTJbaV0pKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8qKgogICAgKiBUaGlzIG1ldGhvZCBpcyBleGVjdXRlZCB3aGVuIGEgbWVzc2FnZSBpcyBpbnRlcmNlcHRlZCBpbiB0aGUgTWVzc2FnZSBCdXMuIFRoZSBmaXJzdCBzdGVwIGlzIHRoZQogICAgKiBhc3NpZ25tZW50IG9mIHRoZSBpZGVudGl0eSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2UuIFRoZSBzZWNvbmQgc3RlcCBpcyB0aGUgZXZhbHVhdGlvbiBvZiB0aGUKICAgICogYXBwbGljYWJsZSBwb2xpY2llcyBpbiBvcmRlciB0byBvYnRhaW4gYW4gYXV0aG9yaXNhdGlvbiBkZWNpc2lvbjogaWYgYSBwb2xpY3kgZXZhbHVhdGVzIHRvCiAgICAqIGZhbHNlLCB0aGVuIHRoZSBtZXNzYWdlIGlzIHVuYXV0aG9yaXNlZC4gVGhlIHRoaXJkIHN0ZXAgaXMgdGhlIGVuZm9yY2VtZW50IG9mIHRoZSBhY3Rpb25zIHRoYXQKICAgICogcG9saWNpZXMgbWF5IHJlcXVpcmUuIEZpbmFsbHksIHRoZSBtZXNzYWdlIGlzIHN0YW1wZWQgYXMgYXV0aG9yaXNlZCBvciBub3QgYW5kIGlzIHJldHVybmVkIHRvCiAgICAqIHRoZSBNZXNzYWdlIEJ1cywgd2hlcmUgaXQgd2lsbCBiZSBmb3J3YXJkZWQgb3IgYmxvY2tlZC4KICAgICogQHBhcmFtICB7TWVzc2FnZX0gIG1lc3NhZ2UKICAgICovCgogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLmNvbnRleHQuYXV0aG9yaXNlKG1lc3NhZ2UpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldEdyb3Vwc05hbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRHcm91cHNOYW1lcyhzY29wZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgbXlHcm91cHMgPSBfdGhpcy5jb250ZXh0Lmdyb3VwczsKICAgICAgdmFyIGdyb3Vwc05hbWVzID0gW107CiAgICAgIGlmIChteUdyb3Vwc1tzY29wZV0gIT09IHt9KSB7CiAgICAgICAgZm9yICh2YXIgZ3JvdXBOYW1lIGluIG15R3JvdXBzW3Njb3BlXSkgewogICAgICAgICAgZ3JvdXBzTmFtZXMucHVzaChncm91cE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZ3JvdXBzTmFtZXM7CiAgICB9CgogICAgLyoqCiAgICAqIFJldHJpZXZlcyB0aGUgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gZ3JvdXAgbmFtZSBmcm9tIHRoZSBQRFAuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZQogICAgKiBAcmV0dXJuIHtBcnJheX0gICBncm91cAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0TGlzdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlzdChzY29wZSwgZ3JvdXBOYW1lKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBteUdyb3VwcyA9IF90aGlzLmNvbnRleHQuZ3JvdXBzOwogICAgICB2YXIgbWVtYmVycyA9IFtdOwogICAgICBpZiAobXlHcm91cHNbc2NvcGVdICE9PSB1bmRlZmluZWQgJiYgbXlHcm91cHNbc2NvcGVdW2dyb3VwTmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIG1lbWJlcnMgPSBteUdyb3Vwc1tzY29wZV1bZ3JvdXBOYW1lXTsKICAgICAgfQogICAgICByZXR1cm4gbWVtYmVyczsKICAgIH0KCiAgICAvKioKICAgICogQ3JlYXRlcyBhIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnY3JlYXRlTGlzdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTGlzdChzY29wZSwgdHlwZSwgZ3JvdXBOYW1lKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbXlHcm91cHMgPSBfdGhpcy5jb250ZXh0Lmdyb3VwczsKICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbXlHcm91cHNbc2NvcGVdID0ge307CiAgICAgIH0KICAgICAgbXlHcm91cHNbc2NvcGVdW2dyb3VwTmFtZV0gPSBbXTsKCiAgICAgIHZhciBwb2xpY3kgPSB7CiAgICAgICAgYXV0aG9yaXNlOiBmYWxzZSwKICAgICAgICBjb25kaXRpb246IHR5cGUgKyAnIGluICcgKyBncm91cE5hbWUsCiAgICAgICAgc2NvcGU6IHNjb3BlLAogICAgICAgIGFjdGlvbnM6IFtdCiAgICAgIH07CiAgICAgIF90aGlzLmFkZFBvbGljaWVzKFtwb2xpY3ldKTsKCiAgICAgIHJldHVybiBteUdyb3VwczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGVHcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlR3JvdXAoc2NvcGUsIGdyb3VwTmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG15R3JvdXBzID0gX3RoaXMuY29udGV4dC5ncm91cHM7CiAgICAgIGRlbGV0ZSBteUdyb3Vwc1tzY29wZV1bZ3JvdXBOYW1lXTsKCiAgICAgIHZhciBteVBvbGljaWVzID0gX3RoaXMuY29udGV4dC5wb2xpY2llczsKCiAgICAgIHZhciBwb2xpY2llcyA9IG15UG9saWNpZXNbc2NvcGVdOwogICAgICBmb3IgKHZhciBpIGluIHBvbGljaWVzKSB7CiAgICAgICAgdmFyIGNvbmRpdGlvbiA9IHBvbGljaWVzW2ldLmNvbmRpdGlvbi5zcGxpdCgnICcpOwogICAgICAgIGNvbmRpdGlvbi5zaGlmdCgpOwogICAgICAgIHZhciBncm91cEluUG9saWN5ID0gY29uZGl0aW9uLmpvaW4oJyAnKTsKICAgICAgICBpZiAoZ3JvdXBJblBvbGljeSA9PT0gZ3JvdXBOYW1lKSB7CiAgICAgICAgICBkZWxldGUgcG9saWNpZXNbaV07CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogQWRkcyB0aGUgZ2l2ZW4gdXNlciBlbWFpbCB0byB0aGUgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4KICAgICogQHBhcmFtICB7U3RyaW5nfSAgdXNlckVtYWlsCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnYWRkVG9MaXN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRUb0xpc3Qoc2NvcGUsIHR5cGUsIGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbXlHcm91cHMgPSBfdGhpcy5jb250ZXh0Lmdyb3VwczsKICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgbXlHcm91cHNbc2NvcGVdID0ge307CiAgICAgIH0KICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXVtncm91cE5hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICBteUdyb3VwcyA9IF90aGlzLmNyZWF0ZUxpc3Qoc2NvcGUsIHR5cGUsIGdyb3VwTmFtZSk7CiAgICAgIH0KICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXVtncm91cE5hbWVdLmluZGV4T2YodXNlckVtYWlsKSA9PT0gLTEpIHsKICAgICAgICBteUdyb3Vwc1tzY29wZV1bZ3JvdXBOYW1lXS5wdXNoKHVzZXJFbWFpbCk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gdXNlciBlbWFpbCBmcm9tIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLgogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICB1c2VyRW1haWwKICAgICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZW1vdmVGcm9tR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUZyb21Hcm91cChzY29wZSwgZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBteUdyb3VwcyA9IF90aGlzLmNvbnRleHQuZ3JvdXBzOwogICAgICB2YXIgZ3JvdXAgPSBteUdyb3Vwc1tzY29wZV1bZ3JvdXBOYW1lXTsKCiAgICAgIGZvciAodmFyIGkgaW4gZ3JvdXApIHsKICAgICAgICBpZiAoZ3JvdXBbaV0gPT09IHVzZXJFbWFpbCkgewogICAgICAgICAgZ3JvdXAuc3BsaWNlKGksIDEpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0VGltZXNsb3RzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaW1lc2xvdHMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBwb2xpY2llcyA9IF90aGlzLmNvbnRleHQucG9saWNpZXMudXNlcjsKICAgICAgdmFyIHRpbWVSZXN0cmljdGlvbnMgPSBbXTsKICAgICAgZm9yICh2YXIgaSBpbiBwb2xpY2llcykgewogICAgICAgIGlmIChwb2xpY2llc1tpXS5jb25kaXRpb24uc3BsaXQoJyAnKVswXSA9PT0gJ3RpbWUnKSB7CiAgICAgICAgICB0aW1lUmVzdHJpY3Rpb25zLnB1c2gocG9saWNpZXNbaV0uY29uZGl0aW9uKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRpbWVSZXN0cmljdGlvbnM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0VGltZXNsb3RCeUlkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaW1lc2xvdEJ5SWQoY29uZGl0aW9uKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBwb2xpY2llcyA9IF90aGlzLmNvbnRleHQucG9saWNpZXMudXNlcjsKICAgICAgZm9yICh2YXIgaSBpbiBwb2xpY2llcykgewogICAgICAgIGlmIChwb2xpY2llc1tpXS5jb25kaXRpb24gPT09IGNvbmRpdGlvbikgewogICAgICAgICAgcmV0dXJuIHBvbGljaWVzW2ldOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH1dKTsKICByZXR1cm4gUG9saWN5RW5naW5lOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBQb2xpY3lFbmdpbmU7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4vUERQIjozOTksIi4vUEVQIjo0MDAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZiI6MzExfV0sNDAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX0NvbnRleHQyID0gcmVxdWlyZSgnLi4vQ29udGV4dCcpOwoKdmFyIF9Db250ZXh0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbnRleHQyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91dGlscycpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8vaW1wb3J0IHBlcnNpc3RlbmNlTWFuYWdlciBmcm9tICcuLi8uLi9wZXJzaXN0ZW5jZS9QZXJzaXN0ZW5jZU1hbmFnZXInOwoKdmFyIENvbW1vbkN0eCA9IGZ1bmN0aW9uIChfQ29udGV4dCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKENvbW1vbkN0eCwgX0NvbnRleHQpOwoKICBmdW5jdGlvbiBDb21tb25DdHgoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDb21tb25DdHgpOwoKICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKENvbW1vbkN0eCkuY2FsbCh0aGlzKSk7CgogICAgdmFyIF90aGlzID0gX3RoaXMyOwogICAgX3RoaXMucG9saWNpZXMgPSBfdGhpcy5sb2FkUG9saWNpZXMoKTsKICAgIF90aGlzLmdyb3VwcyA9IHt9OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENvbW1vbkN0eCwgW3sKICAgIGtleTogJ2FwcGx5UG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5UG9saWNpZXMobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgcG9saWNpZXNSZXN1bHQgPSBbdHJ1ZSwgW11dOwogICAgICB2YXIgYXBwbGljYWJsZVBvbGljaWVzID0gX3RoaXMuZ2V0QXBwbGljYWJsZVBvbGljaWVzKG1lc3NhZ2UpOwogICAgICBwb2xpY2llc1Jlc3VsdCA9IF90aGlzLnBkcC5ldmFsdWF0ZShtZXNzYWdlLCBhcHBsaWNhYmxlUG9saWNpZXMpOwogICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGFwcGxpY2FibGVQb2xpY2llcy5sZW5ndGggIT09IDA7CiAgICAgIF90aGlzLnBlcC5lbmZvcmNlKHBvbGljaWVzUmVzdWx0KTsKICAgICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSwgcG9saWNpZXNSZXN1bHQ6IHBvbGljaWVzUmVzdWx0IH07CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldERhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXREYXRlKCkgewogICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpOwogICAgICBpZiAoZGF5Lmxlbmd0aCA9PT0gMSkgewogICAgICAgIGRheSA9ICcwJyArIGRheTsKICAgICAgfQoKICAgICAgdmFyIG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpOwogICAgICBpZiAobW9udGgubGVuZ3RoID09PSAxKSB7CiAgICAgICAgbW9udGggPSAnMCcgKyBtb250aDsKICAgICAgfQoKICAgICAgcmV0dXJuIGRheSArICcvJyArIG1vbnRoICsgJy8nICsgZGF0ZS5nZXRGdWxsWWVhcigpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRMaXN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TGlzdChzY29wZSwgZ3JvdXBOYW1lKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBteUdyb3VwcyA9IF90aGlzLmdyb3VwczsKICAgICAgdmFyIG1lbWJlcnMgPSBbXTsKICAgICAgaWYgKG15R3JvdXBzW3Njb3BlXSAhPT0gdW5kZWZpbmVkICYmIG15R3JvdXBzW3Njb3BlXVtncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBtZW1iZXJzID0gbXlHcm91cHNbc2NvcGVdW2dyb3VwTmFtZV07CiAgICAgIH0KICAgICAgcmV0dXJuIG1lbWJlcnM7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFRpbWUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRUaW1lKCkgewogICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTsKICAgICAgdmFyIG1pbnV0ZXMgPSBTdHJpbmcobm93LmdldE1pbnV0ZXMoKSk7CiAgICAgIGlmIChtaW51dGVzLmxlbmd0aCA9PT0gMSkgewogICAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzOwogICAgICB9CiAgICAgIHJldHVybiBwYXJzZUludChTdHJpbmcobm93LmdldEhvdXJzKCkpICsgbWludXRlcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFdlZWtEYXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRXZWVrRGF5KCkgewogICAgICByZXR1cm4gU3RyaW5nKG5ldyBEYXRlKCkuZ2V0RGF5KCkpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RhdGUnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm93KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIGlmICghbm93Lm1lc3NhZ2UpIHsKICAgICAgICBfdGhpcy5fZGF0ZUF0dHJpYnV0ZSA9IHR5cGVvZiBub3cgPT09ICdzdHJpbmcnID8gbm93IDogX3RoaXMuX2dldERhdGUoKTsKICAgICAgfQogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2RhdGVBdHRyaWJ1dGU7CiAgICB9CiAgfSwgewogICAga2V5OiAnZG9tYWluJywKICAgIHNldDogZnVuY3Rpb24gc2V0KHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fZG9tYWluQXR0cmlidXRlID0gKDAsIF91dGlscy5kaXZpZGVFbWFpbCkocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZSkuZG9tYWluOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2RvbWFpbkF0dHJpYnV0ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzb3VyY2UnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9zb3VyY2VBdHRyaWJ1dGUgPSBwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lOwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3NvdXJjZUF0dHJpYnV0ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd0aW1lJywKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIW5vdy5tZXNzYWdlKSB7CiAgICAgICAgX3RoaXMuX3RpbWVBdHRyaWJ1dGUgPSBub3cgPyBub3cgOiBfdGhpcy5fZ2V0VGltZSgpOwogICAgICB9CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fdGltZUF0dHJpYnV0ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd3ZWVrZGF5JywKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIW5vdy5tZXNzYWdlKSB7CiAgICAgICAgX3RoaXMuX3dlZWtkYXlBdHRyaWJ1dGUgPSBub3cgPyBub3cgOiBfdGhpcy5fZ2V0V2Vla0RheSgpOwogICAgICB9CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fd2Vla2RheUF0dHJpYnV0ZTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIENvbW1vbkN0eDsKfShfQ29udGV4dDMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBDb21tb25DdHg7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uLy4uL3V0aWxzL3V0aWxzIjo0MTYsIi4uL0NvbnRleHQiOjM5NywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjozMDEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjozMDksImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjozMTB9XSw0MDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX0NvbW1vbkN0eDIgPSByZXF1aXJlKCcuL0NvbW1vbkN0eCcpOwoKdmFyIF9Db21tb25DdHgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29tbW9uQ3R4Mik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUnVudGltZUNvcmVDdHggPSBmdW5jdGlvbiAoX0NvbW1vbkN0eCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4LCBfQ29tbW9uQ3R4KTsKCiAgZnVuY3Rpb24gUnVudGltZUNvcmVDdHgoaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUnVudGltZUNvcmVDdHgpOwoKICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4KS5jYWxsKHRoaXMpKTsKCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7CiAgICBfdGhpcy5pZE1vZHVsZSA9IGlkTW9kdWxlOwogICAgX3RoaXMucnVudGltZVJlZ2lzdHJ5ID0gcnVudGltZVJlZ2lzdHJ5OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4LCBbewogICAga2V5OiAnbG9hZFBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkUG9saWNpZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLnN1YnNQb2xpY2llcykgewogICAgICAgIHZhciBwb2xpY3kgPSB7CiAgICAgICAgICBzY29wZTogJ2dsb2JhbCcsCiAgICAgICAgICBjb25kaXRpb246ICdzdWJzY3JpcHRpb24gZXF1YWxzIConLAogICAgICAgICAgYXV0aG9yaXNlOiB0cnVlLAogICAgICAgICAgYWN0aW9uczogW3sgbWV0aG9kOiAncmVnaXN0ZXJTdWJzY3JpYmVyJyB9LCB7IG1ldGhvZDogJ2RvTXV0dWFsQXV0aGVudGljYXRpb24nIH1dCiAgICAgICAgfTsKICAgICAgICBfdGhpcy5zdWJzUG9saWNpZXMgPSB7fTsKICAgICAgICBfdGhpcy5zdWJzUG9saWNpZXNbcG9saWN5LnNjb3BlXSA9IHBvbGljeTsKICAgICAgfQoKICAgICAgcmV0dXJuIHt9OwogICAgfQogIH0sIHsKICAgIGtleTogJ19pc0Zyb21SZW1vdGVTTScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzRnJvbVJlbW90ZVNNKGZyb20pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHNwbGl0RnJvbSA9IGZyb20uc3BsaXQoJzovLycpOwogICAgICByZXR1cm4gc3BsaXRGcm9tWzBdID09PSAncnVudGltZScgJiYgZnJvbSAhPT0gX3RoaXMucnVudGltZVJlZ2lzdHJ5LnJ1bnRpbWVVUkwgKyAnL3NtJzsKICAgIH0KCiAgICAvKioKICAgICogUmV0dXJucyB0aGUgcG9saWNpZXMgYXNzb2NpYXRlZCB3aXRoIGEgc2NvcGUuCiAgICAqIEBwYXJhbSAgIHtTdHJpbmd9IHNjb3BlCiAgICAqIEByZXR1cm4gIHtBcnJheX0gIHBvbGljaWVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRBcHBsaWNhYmxlUG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFwcGxpY2FibGVQb2xpY2llcyhtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBteVBvbGljaWVzID0gX3RoaXMucG9saWNpZXM7CiAgICAgIHZhciBwb2xpY2llcyA9IFtdOwoKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZScgJiYgX3RoaXMuX2lzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSkpIHsKICAgICAgICB2YXIgZGF0YU9iamVjdCA9IG1lc3NhZ2UuYm9keS5yZXNvdXJjZTsKICAgICAgICBpZiAoX3RoaXMuc3Vic1BvbGljaWVzW2RhdGFPYmplY3RdKSB7CiAgICAgICAgICBwb2xpY2llcy5wdXNoKF90aGlzLnN1YnNQb2xpY2llc1tkYXRhT2JqZWN0XSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhciBoeXBlcnR5TmFtZSA9IF90aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShfdGhpcy5fZ2V0VVJMKG1lc3NhZ2UudG8pKTsKICAgICAgICAgIGlmIChfdGhpcy5zdWJzUG9saWNpZXNbaHlwZXJ0eU5hbWVdKSB7CiAgICAgICAgICAgIHBvbGljaWVzLnB1c2goX3RoaXMuc3Vic1BvbGljaWVzW2h5cGVydHlOYW1lXSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL1RPRE86IGNoYW5nZSBuYW1lCiAgICAgICAgICAgIHZhciBoeXBlcnR5ID0gX3RoaXMucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhfdGhpcy5fZ2V0VVJMKG1lc3NhZ2UudG8pKTsKICAgICAgICAgICAgdmFyIG93bmVyID0gX3RoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5KTsKICAgICAgICAgICAgaWYgKF90aGlzLnN1YnNQb2xpY2llc1tvd25lcl0pIHsKICAgICAgICAgICAgICBwb2xpY2llcy5wdXNoKF90aGlzLnN1YnNQb2xpY2llc1tvd25lcl0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBvbGljaWVzLnB1c2goX3RoaXMuc3Vic1BvbGljaWVzLmdsb2JhbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgLypsZXQgaWQgPSBtZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWU7CiAgICAgIGxldCBoeXBlcnR5TmFtZSA9IF90aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShtZXNzYWdlLmZyb20pOwogICAgICAgaWYgKG15UG9saWNpZXNbaWRdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBwb2xpY2llcy5wdXNoLmFwcGx5KHBvbGljaWVzLCBteVBvbGljaWVzW2lkXSk7CiAgICAgIH0KICAgICAgIGlmIChteVBvbGljaWVzW2h5cGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcG9saWNpZXMucHVzaC5hcHBseShwb2xpY2llcywgbXlQb2xpY2llc1toeXBlcnR5TmFtZV0pOwogICAgICB9CiAgICAgICBpZiAobXlQb2xpY2llcy5nbG9iYWwgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHBvbGljaWVzLnB1c2guYXBwbHkocG9saWNpZXMsIG15UG9saWNpZXMuZ2xvYmFsKTsKICAgICAgfSovCgogICAgICBmb3IgKHZhciBpIGluIG15UG9saWNpZXMpIHsKICAgICAgICBwb2xpY2llcy5wdXNoLmFwcGx5KHBvbGljaWVzLCBteVBvbGljaWVzW2ldKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHBvbGljaWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNvbnNvbGUubG9nKCctLS0gUG9saWN5IEVuZ2luZSAtLS0nKTsKICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTsKICAgICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307CiAgICAgICAgdmFyIHJlc3VsdCA9IHZvaWQgMDsKICAgICAgICB2YXIgaXNUb1ZlcmlmeSA9IF90aGlzLmlzVG9WZXJpZnkobWVzc2FnZSk7CiAgICAgICAgdmFyIGlzSW5jb21pbmdNZXNzYWdlID0gX3RoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgIHZhciBpc1RvQ3lwaGVyID0gX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSk7CiAgICAgICAgaWYgKGlzVG9WZXJpZnkpIHsKICAgICAgICAgIGlmIChpc0luY29taW5nTWVzc2FnZSkgewogICAgICAgICAgICBpZiAoaXNUb0N5cGhlcikgewogICAgICAgICAgICAgIF90aGlzLmRlY3J5cHQobWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuYXBwbHlQb2xpY2llcyhtZXNzYWdlKTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlQWNjZXB0ZWQgPSByZXN1bHQucG9saWNpZXNSZXN1bHRbMF07CiAgICAgICAgICAgICAgICBtZXNzYWdlID0gcmVzdWx0Lm1lc3NhZ2U7CiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUFjY2VwdGVkKSB7CiAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZWplY3QoJ01lc3NhZ2UgYmxvY2tlZCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXN1bHQgPSBfdGhpcy5hcHBseVBvbGljaWVzKG1lc3NhZ2UpOwogICAgICAgICAgICAgIHZhciBtZXNzYWdlQWNjZXB0ZWQgPSByZXN1bHQucG9saWNpZXNSZXN1bHRbMF07CiAgICAgICAgICAgICAgbWVzc2FnZSA9IHJlc3VsdC5tZXNzYWdlOwogICAgICAgICAgICAgIGlmIChtZXNzYWdlQWNjZXB0ZWQpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgaXNUb1NldElEID0gX3RoaXMuX2lzVG9TZXRJRChtZXNzYWdlKTsKICAgICAgICAgICAgaWYgKGlzVG9TZXRJRCkgewogICAgICAgICAgICAgIF90aGlzLmdldElkZW50aXR5KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGlkZW50aXR5KSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuaWRlbnRpdHkgPSBpZGVudGl0eTsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmFwcGx5UG9saWNpZXMobWVzc2FnZSk7CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZUFjY2VwdGVkID0gcmVzdWx0LnBvbGljaWVzUmVzdWx0WzBdOwogICAgICAgICAgICAgICAgbWVzc2FnZSA9IHJlc3VsdC5tZXNzYWdlOwogICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VBY2NlcHRlZCkgewogICAgICAgICAgICAgICAgICBpZiAoaXNUb0N5cGhlcikgewogICAgICAgICAgICAgICAgICAgIF90aGlzLmVuY3J5cHQobWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVqZWN0KCdNZXNzYWdlIGJsb2NrZWQnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuYXBwbHlQb2xpY2llcyhtZXNzYWdlKTsKICAgICAgICAgICAgICB2YXIgX21lc3NhZ2VBY2NlcHRlZCA9IHJlc3VsdC5wb2xpY2llc1Jlc3VsdFswXTsKICAgICAgICAgICAgICBtZXNzYWdlID0gcmVzdWx0Lm1lc3NhZ2U7CiAgICAgICAgICAgICAgaWYgKF9tZXNzYWdlQWNjZXB0ZWQpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZSBibG9ja2VkJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaXNUb1NldElEJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNUb1NldElEKG1lc3NhZ2UpIHsKICAgICAgdmFyIHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluLWlkcCcsICdydW50aW1lJywgJ2RvbWFpbiddOwogICAgICB2YXIgc3BsaXRGcm9tID0gbWVzc2FnZS5mcm9tLnNwbGl0KCc6Ly8nKTsKICAgICAgdmFyIGZyb21TY2hlbWEgPSBzcGxpdEZyb21bMF07CgogICAgICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YoZnJvbVNjaGVtYSkgPT09IC0xOwogICAgfQogIH0sIHsKICAgIGtleTogJ19pc0luY29taW5nTWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpIHsKICAgICAgcmV0dXJuIG1lc3NhZ2UuYm9keS5pZGVudGl0eSA/IHRydWUgOiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfZ2V0VVJMJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VVJMKHVybCkgewogICAgICB2YXIgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJy8nKTsKICAgICAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107CiAgICB9CgogICAgLy9UT0RPOiB2ZXJpZnkgaWYgaXMgaHlwZXJ0eSBvciBkYXRhIG9iamVjdAoKICB9LCB7CiAgICBrZXk6ICdnZXRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWRlbnRpdHkobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICByZXR1cm4gX3RoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkobWVzc2FnZS5ib2R5LnNvdXJjZSk7CiAgICAgIH0KCiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdyZXNwb25zZScgJiYgbWVzc2FnZS5ib2R5LnNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuYm9keS5zb3VyY2UpOwogICAgICB9CgogICAgICB2YXIgZnJvbSA9IF90aGlzLl9nZXRVUkwobWVzc2FnZS5mcm9tKTsKICAgICAgcmV0dXJuIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KF90aGlzLl9nZXRVUkwoZnJvbSkpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2lzVG9WZXJpZnknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGlzVG9WZXJpZnkobWVzc2FnZSkgewogICAgICB2YXIgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4taWRwJywgJ3J1bnRpbWUnLCAnZG9tYWluJ107CiAgICAgIHZhciBzcGxpdEZyb20gPSBtZXNzYWdlLmZyb20uc3BsaXQoJzovLycpOwogICAgICB2YXIgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTsKICAgICAgdmFyIHNwbGl0VG8gPSBtZXNzYWdlLnRvLnNwbGl0KCc6Ly8nKTsKICAgICAgdmFyIHRvU2NoZW1hID0gc3BsaXRUb1swXTsKICAgICAgaWYgKGZyb21TY2hlbWEgPT09IG1lc3NhZ2UuZnJvbSB8fCB0b1NjaGVtYSA9PT0gbWVzc2FnZS50bykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YoZnJvbVNjaGVtYSkgPT09IC0xIHx8IHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKHRvU2NoZW1hKSA9PT0gLTE7CiAgICB9CgogICAgLy9UT0RPIHVzZSBzY2hlbWFzVG9JZ25vcmUgaW5zdGVhZAoKICB9LCB7CiAgICBrZXk6ICdfaXNUb0N5cGhlck1vZHVsZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkgewogICAgICB2YXIgaXNDcmVhdGUgPSBtZXNzYWdlLnR5cGUgPT09ICdjcmVhdGUnOwogICAgICB2YXIgaXNGcm9tSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JzsKICAgICAgdmFyIGlzVG9IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JzsKICAgICAgdmFyIGlzVG9EYXRhT2JqZWN0ID0gKDAsIF91dGlscy5pc0RhdGFPYmplY3RVUkwpKG1lc3NhZ2UudG8pOwogICAgICB2YXIgaXNIYW5kc2hha2UgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnOwoKICAgICAgcmV0dXJuIGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkgfHwgaXNDcmVhdGUgJiYgaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCB8fCBpc0hhbmRzaGFrZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0KG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLmlkTW9kdWxlLmRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgcmVzb2x2ZShtc2cpOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZW5jcnlwdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZW5jcnlwdChtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5pZE1vZHVsZS5lbmNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgIHJlc29sdmUobXNnKTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vIFRPRE86IGluc3RlYWQgb2YgdmVyaWZ5aW5nIG1lc3NhZ2UgdHlwZSwgbG9hZCBpdCBpbiBQb2xpY3lFbmdpbmUuYXBwbGljYWJsZVBvbGljaWVzKCkgaWYgaXQgaXMgYSBzdWJzY3JpcHRpb24gdG8gYSBkYXRhIG9iamVjdAoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclN1YnNjcmliZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaWJlcihtZXNzYWdlLCBhdXRoRGVjaXNpb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHRvID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICB2YXIgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gdG9bNF0gPT09ICdzdWJzY3JpcHRpb24nOwoKICAgICAgaWYgKGF1dGhEZWNpc2lvbiAmJiBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24pIHsKICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTsKICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpOwogICAgICAgIGRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMWzBdICsgJy8vJyArIGRhdGFPYmplY3RVUkxbMl0gKyAnLycgKyBkYXRhT2JqZWN0VVJMWzNdOwogICAgICAgIF90aGlzLnJ1bnRpbWVSZWdpc3RyeS5yZWdpc3RlclN1YnNjcmliZXIoZGF0YU9iamVjdFVSTCwgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnZG9NdXR1YWxBdXRoZW50aWNhdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlLCBhdXRoRGVjaXNpb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHRvID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICB2YXIgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gdG9bNF0gPT09ICdzdWJzY3JpcHRpb24nOwoKICAgICAgaWYgKGF1dGhEZWNpc2lvbiAmJiBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24pIHsKICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTsKICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpOwogICAgICAgIGRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMWzBdICsgJy8vJyArIGRhdGFPYmplY3RVUkxbMl0gKyAnLycgKyBkYXRhT2JqZWN0VVJMWzNdOwogICAgICAgIF90aGlzLmlkTW9kdWxlLmRvTXV0dWFsQXV0aGVudGljYXRpb24oZGF0YU9iamVjdFVSTCwgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldExhc3RDb21wb25lbnRPZlVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldExhc3RDb21wb25lbnRPZlVSTCh1cmwpIHsKICAgICAgdmFyIHNwbGl0ID0gdXJsLnNwbGl0KCcvJyk7CiAgICAgIHJldHVybiBzcGxpdFtzcGxpdC5sZW5ndGggLSAxXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdncm91cCcsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwYXJhbXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKHBhcmFtcy5ncm91cCA9PT0gJ3ByZWF1dGhvcmlzZWQnKSB7CiAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSBwYXJhbXMuZGVzdGluYXRpb24uc3BsaXQoJy8nKTsKICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpOwogICAgICAgIGRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMWzBdICsgJy8vJyArIGRhdGFPYmplY3RVUkxbMl07CiAgICAgICAgX3RoaXMuZ3JvdXBBdHRyaWJ1dGUgPSBfdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpOwogICAgICB9IGVsc2UgewogICAgICAgIF90aGlzLmdyb3VwQXR0cmlidXRlID0gX3RoaXMuX2dldExpc3QocGFyYW1zLnNjb3BlLCBwYXJhbXMuZ3JvdXApOwogICAgICB9CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5ncm91cEF0dHJpYnV0ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzdWJzY3JpcHRpb24nLAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLnN1YnNjcmlwdGlvbkF0dHJpYnV0ZSA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjsKICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLnN1YnNjcmlwdGlvbkF0dHJpYnV0ZTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFJ1bnRpbWVDb3JlQ3R4Owp9KF9Db21tb25DdHgzLmRlZmF1bHQpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUnVudGltZUNvcmVDdHg7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uLy4uL3V0aWxzL3V0aWxzIjo0MTYsIi4vQ29tbW9uQ3R4Ijo0MDIsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6MzAxLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MzA1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjMwNywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjozMDgsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MzA5LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MzEwfV0sNDA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwovLyBpbXBvcnQgTWVzc2FnZUZhY3RvcnkgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL01lc3NhZ2VGYWN0b3J5JzsKCi8qKgogKiBDbGFzcyB3aWxsIGFzayB0byB0aGUgbWVzc2FnZSBub2RlIGZvciBhZGRyZXNzZXMKICovCgp2YXIgQWRkcmVzc0FsbG9jYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQogIF91cmw6IFVSTAogIF9idXM6IE1pbmlCdXMKICAqLwoKICAvKioKICAgKiBDcmVhdGUgYW4gQWRkcmVzcyBBbGxvY2F0aW9uCiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZQogICAqIEBwYXJhbSAge01pbmlCdXN9ICAgICAgYnVzIC0gTWluaUJ1cyB1c2VkIGZvciBhZGRyZXNzIGFsbG9jYXRpb24KICAgKi8KCiAgZnVuY3Rpb24gQWRkcmVzc0FsbG9jYXRpb24odXJsLCBidXMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEFkZHJlc3NBbGxvY2F0aW9uKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIC8vIGxldCBtZXNzYWdlRmFjdG9yeSA9IG5ldyBNZXNzYWdlRmFjdG9yeSgpOwogICAgLy8KICAgIC8vIF90aGlzLl9tZXNzYWdlRmFjdG9yeSA9IG1lc3NhZ2VGYWN0b3J5OwogICAgX3RoaXMuX3VybCA9IHVybDsKICAgIF90aGlzLl9idXMgPSBidXM7CiAgfQoKICAvKioKICAgKiBnZXQgdGhlIFVSTCB2YWx1ZQogICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTsKICAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFkZHJlc3NBbGxvY2F0aW9uLCBbewogICAga2V5OiAnY3JlYXRlJywKCgogICAgLyoqCiAgICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIEh5cGVydHkgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS4KICAgICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuCiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdAogICAgICogQHJldHVybnMge1Byb21pc2U8SHlwZXJ0eVVSTD59ICBBIGxpc3Qgb2YgSHlwZXJ0eVVSTCdzCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoZG9tYWluLCBudW1iZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIGxldCBtZXNzYWdlRmFjdG9yeSA9IF90aGlzLl9tZXNzYWdlRmFjdG9yeTsKCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgIGJvZHk6IHsgdmFsdWU6IHsgbnVtYmVyOiBudW1iZXIgfSB9CiAgICAgIH07CgogICAgICAvLyBUT0RPOiBBcHBseSB0aGUgbWVzc2FnZSBmYWN0b3J5CiAgICAgIC8vIFRoZSBtc2ctbm9kZS12ZXJ0eCBzaG91bGQgYmUgY2hhbmdlZCB0aGUgYm9keSBmaWVsZCB0byByZWNlaXZlCiAgICAgIC8vIHRoZSBmb2xsb3dpbmcgZm9ybWF0IGJvZHk6IHt2YWx1ZToge251bWJlcjogbnVtYmVyfX0gYmVjYXVzZQogICAgICAvLyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgaW4gdGhhdCB3YXkgYnkgdGhlIG1lc3NhZ2UgZmFjdG9yeTsKICAgICAgLy8gbGV0IG1zZyA9IG1lc3NhZ2VGYWN0b3J5LmNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KF90aGlzLl91cmwsICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9oeXBlcnR5LWFkZHJlc3MtYWxsb2NhdGlvbicsICcnLCB7bnVtYmVyOiBudW1iZXJ9KTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvLyBUT0RPOiBjaGFuZ2UgdGhpcyByZXNwb25zZSBNZXNzYWdlIHVzaW5nIHRoZSBNZXNzYWdlRmFjdG9yeQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUuYWxsb2NhdGVkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogU2VuZCBhIHJlcXVlc3QgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUsIHRvIGRlYWxsb2NhdGUgb25lIG9yIG1vcmUgYWRkcmVzc2VzCiAgICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuCiAgICAqIEBwYXJhbSAge2FkZHJlc3Nlc30gYWRkcmVzc2VzIHRvIHJlcXVlc3QgdGhlIGRlYWxsb2NhdGlvbgogICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gIHRoZSByZXNwb25zZSBieSB0aGUgbWVzc2FnZSBub2RlCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWxldGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoZG9tYWluLCBhZGRyZXNzZXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0gewogICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IGNoaWxkcmVuUmVzb3VyY2VzOiBhZGRyZXNzZXMgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVwbHknLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LmNvZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEFkZHJlc3NBbGxvY2F0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBZGRyZXNzQWxsb2NhdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjMwNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4fV0sNDA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX1JlZ2lzdHJ5RGF0YU1vZGVsMiA9IHJlcXVpcmUoJy4vUmVnaXN0cnlEYXRhTW9kZWwnKTsKCnZhciBfUmVnaXN0cnlEYXRhTW9kZWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnaXN0cnlEYXRhTW9kZWwyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpCiogICBIeXBlcnR5SW5zdGFuY2UgRGF0YSBNb2RlbCB1c2VkIHRvIG1vZGVsIGluc3RhbmNlcyBvZiBIeXBlcnRpZXMgcnVubmluZyBpbiBkZXZpY2VzIGFuZCBzZXJ2ZXJzLgoqLwoKdmFyIEh5cGVydHlJbnN0YW5jZSA9IGZ1bmN0aW9uIChfUmVnaXN0cnlEYXRhTW9kZWwpIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShIeXBlcnR5SW5zdGFuY2UsIF9SZWdpc3RyeURhdGFNb2RlbCk7CgogIGZ1bmN0aW9uIEh5cGVydHlJbnN0YW5jZShpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBoeXBlcnR5VVJMLCB1c2VyLCBndWlkLCBydW50aW1lLCBjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBIeXBlcnR5SW5zdGFuY2UpOwoKICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSkuY2FsbCh0aGlzLCBpZCwgdXJsLCBkZXNjcmlwdG9yVVJMKSk7CgogICAgdmFyIF90aGlzID0gX3RoaXMyOwogICAgX3RoaXMuX2Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yOwogICAgX3RoaXMuX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMOwogICAgX3RoaXMuX3VzZXIgPSB1c2VyOwogICAgX3RoaXMuX2d1aWQgPSBndWlkOwogICAgX3RoaXMuX3J1bnRpbWUgPSBydW50aW1lOwogICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSwgW3sKICAgIGtleTogJ3VzZXInLAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaWRlbnRpdHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMudXNlciA9IGlkZW50aXR5OwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3VzZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAnaHlwZXJ0eVVSTCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9oeXBlcnR5VVJMOwogICAgfQogIH0sIHsKICAgIGtleTogJ2Rlc2NyaXB0b3InLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvYmplY3ROYW1lJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3IuX29iamVjdE5hbWU7CiAgICB9CiAgfV0pOwogIHJldHVybiBIeXBlcnR5SW5zdGFuY2U7Cn0oX1JlZ2lzdHJ5RGF0YU1vZGVsMy5kZWZhdWx0KTsgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEFwaXplZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgoKZXhwb3J0cy5kZWZhdWx0ID0gSHlwZXJ0eUluc3RhbmNlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL1JlZ2lzdHJ5RGF0YU1vZGVsIjo0MDcsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6MzAxLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjMwNywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjozMDgsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MzA5LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MzEwfV0sNDA2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTsKCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7Cgp2YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpOwoKdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOwoKdmFyIF9FdmVudEVtaXR0ZXIyID0gcmVxdWlyZSgnLi4vdXRpbHMvRXZlbnRFbWl0dGVyJyk7Cgp2YXIgX0V2ZW50RW1pdHRlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FdmVudEVtaXR0ZXIyKTsKCnZhciBfQWRkcmVzc0FsbG9jYXRpb24gPSByZXF1aXJlKCcuL0FkZHJlc3NBbGxvY2F0aW9uJyk7Cgp2YXIgX0FkZHJlc3NBbGxvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FkZHJlc3NBbGxvY2F0aW9uKTsKCnZhciBfT2JqZWN0QWxsb2NhdGlvbiA9IHJlcXVpcmUoJy4uL3N5bmNoZXIvT2JqZWN0QWxsb2NhdGlvbicpOwoKdmFyIF9PYmplY3RBbGxvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdEFsbG9jYXRpb24pOwoKdmFyIF9IeXBlcnR5SW5zdGFuY2UgPSByZXF1aXJlKCcuL0h5cGVydHlJbnN0YW5jZScpOwoKdmFyIF9IeXBlcnR5SW5zdGFuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHlwZXJ0eUluc3RhbmNlKTsKCnZhciBfTWVzc2FnZUZhY3RvcnkgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Jyk7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMuanMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKmltcG9ydCBJZGVudGl0eU1hbmFnZXIgZnJvbSAnLi9JZGVudGl0eU1hbmFnZXInOwppbXBvcnQgRGlzY292ZXJ5IGZyb20gJy4vRGlzY292ZXJ5JzsqLwoKLyoqCiogUnVudGltZSBSZWdpc3RyeSBJbnRlcmZhY2UKKi8KLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgUmVnaXN0cnkgPSBmdW5jdGlvbiAoX0V2ZW50RW1pdHRlcikgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJlZ2lzdHJ5LCBfRXZlbnRFbWl0dGVyKTsKCgogIC8qKgogICogVG8gaW5pdGlhbGlzZSB0aGUgUnVudGltZSBSZWdpc3RyeSB3aXRoIHRoZSBSdW50aW1lVVJMIHRoYXQgd2lsbCBiZSB0aGUgYmFzaXMgdG8gZGVyaXZlIHRoZSBpbnRlcm5hbCBydW50aW1lIGFkZHJlc3NlcyB3aGVuIGFsbG9jYXRpbmcgYWRkcmVzc2VzIHRvIGludGVybmFsIHJ1bnRpbWUgY29tcG9uZW50LiBJbiBhZGRpdGlvbiwgdGhlIFJlZ2lzdHJ5IGRvbWFpbiBiYWNrLWVuZCB0byBiZSB1c2VkIHRvIHJlbW90ZWx5IHJlZ2lzdGVyIFJ1bnRpbWUgY29tcG9uZW50cywgaXMgYWxzbyBwYXNzZWQgYXMgaW5wdXQgcGFyYW1ldGVyLgogICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1cwogICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkwKICAqIEBwYXJhbSAge0FwcFNhbmRib3h9ICAgICAgICAgIGFwcFNhbmRib3ggICAgICAgICAgICBhcHBTYW5kYm94CiAgKiBAcGFyYW0gIHtydW50aW1lQ2F0YWxvZ3VlfSAgICBydW50aW1lQ2F0YWxvZ3VlICAgICAgcnVudGltZUNhdGFsb2d1ZQogICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgcmVtb3RlUmVnaXN0cnkgICAgICAgIHJlbW90ZVJlZ2lzdHJ5CiAgKi8KCiAgZnVuY3Rpb24gUmVnaXN0cnkocnVudGltZVVSTCwgYXBwU2FuZGJveCwgaWRlbnRpdHlNb2R1bGUsIHJ1bnRpbWVDYXRhbG9ndWUsIHJlbW90ZVJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZWdpc3RyeSk7CgoKICAgIC8vIGhvdyBzb21lIGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBwYXJhbWV0ZXJzIGZvciBleGFtcGxlOgogICAgLy8gbmV3IFJlZ2lzdHJ5KCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJywgYXBwU2FuZGJveCwgaWRNb2R1bGUsIHJlbW90ZVJlZ2lzdHJ5KTsKICAgIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVyU3R1YihzYW5kYm94LCAnc3AxJyk7CiAgICAvLyByZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoc2FuZEJveCwgJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTsKICAgIC8vIHJlZ2lzdHJ5LnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShSZWdpc3RyeSkuY2FsbCh0aGlzKSk7CgogICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ3J1bnRpbWVVUkwgaXMgbWlzc2luZy4nKTsKICAgIC8qaWYgKCFyZW1vdGVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdyZW1vdGVSZWdpc3RyeSBpcyBtaXNzaW5nJyk7Ki8KCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7CgogICAgX3RoaXMucmVnaXN0cnlVUkwgPSBydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nOwogICAgX3RoaXMuYXBwU2FuZGJveCA9IGFwcFNhbmRib3g7CiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUgPSBydW50aW1lQ2F0YWxvZ3VlOwogICAgX3RoaXMucmVtb3RlUmVnaXN0cnkgPSByZW1vdGVSZWdpc3RyeTsKICAgIF90aGlzLmlkTW9kdWxlID0gaWRlbnRpdHlNb2R1bGU7CiAgICBfdGhpcy5pZGVudGlmaWVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKCiAgICAvLyB0aGUgZXhwaXJlcyBpbiAzNjAwLCByZXByZXNlbnRzIDEgaG91cgogICAgLy90aGUgZXhwaXJlcyBpcyBpbiBzZWNvbmRzLCB1bml0IG9mIG1lYXN1cmUgcmVjZWl2ZWQgYnkgdGhlIGRvbWFpbiByZWdpc3RyeQogICAgX3RoaXMuZXhwaXJlc1RpbWUgPSAzNjAwOwoKICAgIF90aGlzLmh5cGVydGllc0xpc3RUb1JlbW92ZSA9IHt9OwogICAgX3RoaXMuaHlwZXJ0aWVzTGlzdCA9IFtdOwogICAgX3RoaXMucHJvdG9zdHVic0xpc3QgPSB7fTsKICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IHt9OwogICAgX3RoaXMuZGF0YU9iamVjdExpc3QgPSB7fTsKICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdCA9IHt9OwogICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHsgc2FuZGJveDoge30sIGFwcFNhbmRib3g6IHt9IH07CiAgICBfdGhpcy5wZXBMaXN0ID0ge307CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5yZWdpc3RyeVVSTCkuZG9tYWluOwogICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDsKICAgIHZhciBtc2dGYWN0b3J5ID0gbmV3IF9NZXNzYWdlRmFjdG9yeS5NZXNzYWdlRmFjdG9yeSgnZmFsc2UnLCAne30nKTsKICAgIF90aGlzLm1lc3NhZ2VGYWN0b3J5ID0gbXNnRmFjdG9yeTsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICAvKioKICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5CiAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlZ2lzdHJ5LCBbewogICAga2V5OiAnX2dldElkZW50aXR5QXNzb2NpYXRlZCcsCgoKICAgIC8qbGV0IGRpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkoX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMpOwogICAgX3RoaXMuZGlzY292ZXJ5ID0gZGlzY292ZXJ5OwogICAgIGxldCBpZGVudGl0eU1hbmFnZXIgPSBuZXcgSWRlbnRpdHlNYW5hZ2VyKCdoeXBlcnR5Oi8vbG9jYWxob3N0LzgzM2E2ZTUyLTUxNWItNDk4Yi1hNTdiLWUzZGFlZWNlNDhkMicsIF90aGlzLnJ1bnRpbWVVUkwsIG1lc3NhZ2VCdXMpOwogICAgX3RoaXMuaWRlbnRpdHlNYW5hZ2VyID0gaWRlbnRpdHlNYW5hZ2VyOyovCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldElkZW50aXR5QXNzb2NpYXRlZCh0eXBlLCBoeXBlcnR5VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBmb3IgKHZhciBoeXBlcnR5IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHsKICAgICAgICB2YXIgdmFsdWUgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2h5cGVydHldOwogICAgICAgIGlmICh2YWx1ZS5faHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkgewogICAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICAgIGNhc2UgJ3VzZXJuYW1lJzoKICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIudXNlcm5hbWU7CiAgICAgICAgICAgIGNhc2UgJ2NuJzoKICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIuY247CiAgICAgICAgICAgIGNhc2UgJ2xvY2FsZSc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmxvY2FsZTsKICAgICAgICAgICAgY2FzZSAnYXZhdGFyJzoKICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIuYXZhdGFyOwogICAgICAgICAgICBjYXNlICd1c2VyVVJMJzoKICAgICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIudXNlclVSTDsKICAgICAgICAgICAgY2FzZSAnLic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuICcnOwogICAgfQoKICAgIC8qKgogICAgKiBxdWVyeSB0aGUgZG9tYWluIHJlZ2lzdHJ5IGZvciBpbmZvcm1hdGlvbiBmcm9tIGEgZGF0YU9iamVjdCBVUkwKICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHVybCAgICAgICAgICAgIGRhdGFPYmplY3QgVVJMCiAgICAqIEByZXR1cm4ge0pTT059ICAgICBkYXRhT2JqZWN0ICAgICBkYXRhIG9iamVjdAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwodXJsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuX2RvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiB1cmwsIHNlYXJjaDogJ2RhdGFPYmplY3RQZXJVUkwnIH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIGZ1bmN0aW9uIChyZXBseSkgewoKICAgICAgICAgIHZhciBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTsKCiAgICAgICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSB3aGVyZSB0aGUgQXBwbGljYXRpb24gaXMgZXhlY3V0aW5nLiBJdCBpcyBhc3N1bWVkIHRoZXJlIGlzIGp1c3Qgb25lIEFwcCBwZXIgUnVudGltZSBpbnN0YW5jZS4KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldEFwcFNhbmRib3gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFwcFNhbmRib3goKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5hcHBTYW5kYm94OwogICAgfQoKICAgIC8qKgogICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHVzZXIgYXNzb2NpYXRlZCB0byB0aGUgaHlwZXJ0eSBVUkwKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGh5cGVydHlVUkwgICAgICBoeXBlcnR5IFVSTAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgdXNlclVSTCAgICAgICAgIHVzZXIgVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRIeXBlcnR5T3duZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKSB7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgdXNlclVSTCA9IHZvaWQgMDsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHsKICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIHVzZXJVUkwgPSBoeXBlcnR5LnVzZXIudXNlclVSTDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHVzZXJVUkw7CiAgICB9CgogICAgLyoqCiAgICAqIHJldHVybnMgdGhlIGh5cGVydHkgTmFtZSBmcm9tIGEgZ2l2ZW4gdXJsLiBUaGlzIHVybCBjb3VsZCBiZSBmcm9tIGEgZGF0YU9iamVjdCBvciBoeXBlcnR5CiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICB1cmwgICAgICBoeXBlcnR5IG9yIGRhdGFPYmplY3QgVVJMCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBoeXBlcnR5TmFtZSAgICAgaHlwZXJ0eSBOYW1lCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRIeXBlcnR5TmFtZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SHlwZXJ0eU5hbWUodXJsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXNIeXBlcnR5VVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCkudHlwZSA9PT0gJ2h5cGVydHknOwoKICAgICAgLy92YWx1ZSB0byBiZSByZXR1cm5lZCBpbiB0aGUgZW5kCiAgICAgIHZhciBoeXBlcnR5TmFtZSA9IHZvaWQgMDsKCiAgICAgIC8vaWYgaXMgbm90IGFuIGh5cGVydHksIGNoZWNrIGlmIGlzIGEgZGF0YU9iamVjdCBhbmQgb2J0YWluIGhpcyByZXBvcnRlcgogICAgICB2YXIgaHlwZXJ0eVVSTCA9IGlzSHlwZXJ0eVVSTCA/IGh5cGVydHlVUkwgPSB1cmwgOiBfdGhpcy5nZXRSZXBvcnRlclVSTFN5bmNob25vdXModXJsKTsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHsKICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIGh5cGVydHlOYW1lID0gaHlwZXJ0eS5vYmplY3ROYW1lOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBoeXBlcnR5TmFtZTsKICAgIH0KCiAgICAvKioKICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMCiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0UmVwb3J0ZXJVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcG9ydGVyVVJMKGRhdGFPYmplY3RVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCdObyByZXBvcnRlciB3YXMgZm91bmQnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwuIG5vIHByb21pc2UgcmV0dXJuZWQKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkwKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICAgICByZXBvcnRlclVSTCAgICAgIHJlcG9ydGVyVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRSZXBvcnRlclVSTFN5bmNob25vdXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgcmV0dXJuIGRhdGFPYmplY3QgPyBkYXRhT2JqZWN0LnJlcG9ydGVyIDogdW5kZWZpbmVkOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IFVSTCB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3QKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICB1cmwgICAgICAgICAgICB1cmwgZm9ybWF0CiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBIeXBlcnR5IFVSTCBzdWJzY3JpYmVkIHRvIHRoZSBVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJIeXBlcnR5KHVybCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFt1cmxdOwogICAgfQoKICAgIC8qKgogICAgKiByZWdpc3RlciBhIGRlc2lyZWQgZGF0YU9iamVjdCB0byBzdWJzY3JpYmUKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRhdGFPYmplY3RVUkwgICAgICBkYXRhT2JqZWN0IFVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJTdWJzY3JpYmVkRGF0YU9iamVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJTdWJzY3JpYmVkRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMLCBoeXBlcnR5VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIGlmIChfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGh5cGVydHlVUkw7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBsaXN0IG9mIHByZSBhdXRob3Jpc2VkIHVzZXJzIHJlY2VpdmVkIGluIHRoZSBjcmVhdGlvbiBvZiBhIGRhdGEgb2JqZWN0CiAgICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTAogICAgKiBAcmV0dXJuICAge0FycmF5PFN0cmluZz59ICAgICBwcmVBdXRoICAgICAgICAgTGlzdCBvZiBwcmUgYXV0aG9yaXNlZCB1c2VycwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0UHJlQXV0aFN1YnNjcmliZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwogICAgICB2YXIgcHJlQXV0aCA9IFtdOwoKICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICBwcmVBdXRoID0gZGF0YU9iamVjdC5wcmVBdXRoOwogICAgICB9CiAgICAgIHJldHVybiBwcmVBdXRoOwogICAgfQoKICAgIC8qKgogICAgKiBzZW5kIHJlcXVlc3RzIHRvIHVucmVnaXN0ZXIgYWxsIGh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeQogICAgKiBAcmV0dXJuICAge1Byb21pc2V9ICAgICByZXR1cm4gYSBwcm9taXNlIGlmIHRoZSByZXN1bHQgb2YgdW5yZWdpc3RyYXRpb24gYWxsIGh5cGVydGllcwogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3RlckFsbEh5cGVydGllcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlckFsbEh5cGVydGllcygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciB1bnJlZ2lzdGVyUmVzdWx0cyA9IFtdOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHsKICAgICAgICAgIHZhciBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07CiAgICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMudW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZShoeXBlcnR5LnVzZXIudXNlclVSTCwgaHlwZXJ0eS5oeXBlcnR5VVJMKTsKICAgICAgICAgIHVucmVnaXN0ZXJSZXN1bHRzLnB1c2gocmVzdWx0KTsKICAgICAgICB9CgogICAgICAgIF9wcm9taXNlMi5kZWZhdWx0LmFsbCh1bnJlZ2lzdGVyUmVzdWx0cykudGhlbihmdW5jdGlvbiAoKSB7CgogICAgICAgICAgcmVzb2x2ZSgnc3VjY2Vzc2Z1bGx5IHVucmVnaXN0ZXJlZCBhbGwgaHlwZXJ0aWVzJyk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgYW4gaHlwZXJ0eUluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnkKICAgICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgdXNlciAgICAgICAgdXNlciB1cmwKICAgICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmwKICAgICoKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2UodXNlciwgaHlwZXJ0eUluc3RhbmNlKSB7CiAgICAgIC8vVE9ETyB3b3JraW5nIGJ1dCB0aGUgdXNlcgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLAogICAgICAgIGJvZHk6IHsgdmFsdWU6IHsgdXNlcjogdXNlciwgaHlwZXJ0eVVSTDogaHlwZXJ0eUluc3RhbmNlIH0gfSB9OwoKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgY29uc29sZS5sb2coJ3VucmVnaXN0ZXIgaHlwZXJ0eSBSZXBseScsIHJlcGx5KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gZGF0YU9iamVjdEluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnkKICAgICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgIG5hbWUgICAgICBEYXRhT2JqZWN0TmFtZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlRGF0YU9iamVjdEluc3RhbmNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UobmFtZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLAogICAgICAgIGJvZHk6IHsgdmFsdWU6IHsgbmFtZTogbmFtZSB9IH0gfTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHknLCByZXBseSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byB1cGRhdGUgYW4gSHlwZXJ0eQogICAgKi8KCiAgfSwgewogICAga2V5OiAndXBkYXRlSHlwZXJ0eUluc3RhbmNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVIeXBlcnR5SW5zdGFuY2UocmVzb3VyY2UsIHZhbHVlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbWVzc2FnZSA9IHsgdHlwZTogJ1VQREFURScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLAogICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsCiAgICAgICAgYm9keTogeyByZXNvdXJjZTogcmVzb3VyY2UsIHZhbHVlOiB2YWx1ZSB9IH07CgogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGVkIGh5cGVydHkgcmVwbHknLCByZXBseSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiByZWdpc3RlciBhIG5ldyBzdWJzY3JpYmVyIGluIHRoZSBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQKICAgICogQHBhcmFtICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkwKICAgICogQHBhcmFtICB7U3RyaW5nfSAgIHN1YnNjcmliZXJVUkwgICAgc3Vic2NyaWJlciBVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyU3Vic2NyaWJlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIHN1YnNjcmliZXJVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKCiAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgZGF0YU9iamVjdC5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXJVUkwpOwogICAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gZGF0YU9iamVjdDsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgKiBnZXQgdGhlIHN1YnNjcmliZXJzIHJlZ2lzdGVyZWQgd2l0aGluIGEgZGF0YU9iamVjdAogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkwKICAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gICBTdWJzdHJpYmVycyBMaXN0CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERhdGFPYmplY3RTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CgogICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgIHJldHVybiBkYXRhT2JqZWN0LnN1YnNjcmliZXJzOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93ICdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCc7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgRGF0YSBPYmplY3QgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgZGF0YU9iamVjdFVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBEYXRhIE9iamVjdC4KICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGlkZW50aWZpZXIgICAgICAgICAgICBpZGVudGlmaWVyCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0c2NoZW1hICAgICAgICAgICAgZGF0YU9iamVjdHNjaGVtYQogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFVybCAgICAgICAgZGF0YU9iamVjdFVybAogICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFJlcG9ydGVyICAgICAgICAgZGF0YU9iamVjdFJlcG9ydGVyCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlckRhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyRGF0YU9iamVjdChpZGVudGlmaWVyLCBkYXRhT2JqZWN0c2NoZW1hLCBkYXRhT2JqZWN0VXJsLCBkYXRhT2JqZWN0UmVwb3J0ZXIsIGF1dGhvcmlzZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5CiAgICAgICAgdmFyIG1lc3NhZ2VWYWx1ZSA9IHsgbmFtZTogaWRlbnRpZmllciwgc2NoZW1hOiBkYXRhT2JqZWN0c2NoZW1hLCB1cmw6IGRhdGFPYmplY3RVcmwsIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLCByZXBvcnRlcjogZGF0YU9iamVjdFJlcG9ydGVyLCBwcmVBdXRoOiBhdXRob3Jpc2UsIHN1YnNjcmliZXJzOiBbXSB9OwoKICAgICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VXJsXSA9IG1lc3NhZ2VWYWx1ZTsKCiAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChfdGhpcy5yZWdpc3RyeVVSTCwgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgbWVzc2FnZVZhbHVlLCAncG9saWN5Jyk7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJz09PT4gcmVnaXN0ZXJEYXRhT2JqZWN0IFJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZSgnb2snKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVnaXN0ZXIgRGF0YU9iamVjdCcpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSHlwZXJ0eSBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBIeXBlcnR5VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IEh5cGVydHkuCiAgICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgICAgICAgIHNhbmRib3ggICAgICAgICAgICAgICBzYW5kYm94CiAgICAqIEBwYXJhbSAge0h5cGVydHlDYXRhbG9ndWVVUkx9IEh5cGVydHlDYXRhbG9ndWVVUkwgICBkZXNjcmlwdG9yCiAgICAqIEByZXR1cm4ge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVySHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vYXNzdW1pbmcgZGVzY3JpcHRvciBjb21lIGluIHRoaXMgZm9ybWF0LCB0aGUgc2VydmljZS1wcm92aWRlci1kb21haW4gdXJsIGlzIHJldHJpZXZlZCBieSBhIHNwbGl0IGluc3RydWN0aW9uCiAgICAgIC8vaHlwZXJ0eS1jYXRhbG9ndWU6Ly88c2VydmljZS1wcm92aWRlci1kb21haW4+LzxjYXRhbG9ndWUtb2JqZWN0LWlkZW50aWZpZXI+CiAgICAgIHZhciBkb21haW5VcmwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoZGVzY3JpcHRvclVSTCkuZG9tYWluOwoKICAgICAgaWYgKGRvbWFpblVybC5pbmNsdWRlcygnY2F0YWxvZ3VlJykpIHsKICAgICAgICBkb21haW5VcmwgPSBkb21haW5VcmwucmVwbGFjZSgnY2F0YWxvZ3VlLicsICcnKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uKCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICB2YXIgdXNlclByb2ZpbGUgPSByZXN1bHQudXNlclByb2ZpbGU7CiAgICAgICAgICB2YXIgaWRlbnRpdHlVUkwgPSB1c2VyUHJvZmlsZS51c2VyVVJMOwoKICAgICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvL2NhbGwgY2hlY2sgaWYgdGhlIHByb3Rvc3R1YiBleGlzdAogICAgICAgICAgICBfdGhpcy5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly8nICsgZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlEb21haW4gPSBkb21haW5Vcmw7CgogICAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBpbXBsZW1lbnRlZCB3aXRoIGFkZHJlc3NlcyBwb2xsCiAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlIHdlIHdpbGwgcmVxdWVzdCBhbmQgcmV0dXJuIG9ubHkgb25lCiAgICAgICAgICAgICAgLy8gYWRkcmVzcwogICAgICAgICAgICAgIHZhciBudW1iZXJPZkFkZHJlc3NlcyA9IDE7CiAgICAgICAgICAgICAgX3RoaXMuYWRkcmVzc0FsbG9jYXRpb24uY3JlYXRlKGRvbWFpblVybCwgbnVtYmVyT2ZBZGRyZXNzZXMpLnRoZW4oZnVuY3Rpb24gKGFkZGVyZXNzTGlzdCkgewoKICAgICAgICAgICAgICAgIGFkZGVyZXNzTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhZGRyZXNzKSB7CgogICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihhZGRyZXNzICsgJy9zdGF0dXMnLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ01lc3NhZ2UgYWRkTGlzdGVuZXIgZm9yIDogJywgYWRkcmVzcyArICcvc3RhdHVzIC0+ICcgKyBtc2cpOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHZhciBoeXBlcnR5ID0gbmV3IF9IeXBlcnR5SW5zdGFuY2UyLmRlZmF1bHQoX3RoaXMuaWRlbnRpZmllciwgX3RoaXMucmVnaXN0cnlVUkwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZGVyZXNzTGlzdFswXSwgdXNlclByb2ZpbGUpOwoKICAgICAgICAgICAgICAgIF90aGlzLmh5cGVydGllc0xpc3QucHVzaChoeXBlcnR5KTsKCiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhlIHJlY2VpdmVkIHNhbmJveCBlIEFwcGxpY2F0aW9uU2FuZGJveCBvciBhIG5vcm1hbCBzYW5kYm94CiAgICAgICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnYXBwJykgewogICAgICAgICAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbYWRkZXJlc3NMaXN0WzBdXSA9IHNhbmRib3g7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNhbmRib3gudHlwZSA9PT0gJ25vcm1hbCcpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2FkZGVyZXNzTGlzdFswXV0gPSBzYW5kYm94OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmVqZWN0KCdXcm9uZyBTYW5kYm94VHlwZScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciByZXNvdXJjZXMgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGh5cGVydHkgcmVzb3VyY2VzIGlzIGEgdmVjdG9yIG9yIGEgc3RyaW5nCiAgICAgICAgICAgICAgICAvLyBUT0RPIGRlbGV0ZSBsYXRlciB3aGVuIGNhdGFsb2d1ZSBpcyBmaXhlZAogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXNjcmlwdG9yLmh5cGVydHlUeXBlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBbXTsKICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLnB1c2goZGVzY3JpcHRvci5oeXBlcnR5VHlwZSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBkZXNjcmlwdG9yLmh5cGVydHlUeXBlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yRGF0YVNjaGVtYSA9IGRlc2NyaXB0b3IuZGF0YU9iamVjdHM7CiAgICAgICAgICAgICAgICB2YXIgZGF0YVNjaGVtYXNBcnJheSA9IFtdOwoKICAgICAgICAgICAgICAgIC8vdGhpcyB3aWxsIGNyZWF0ZSBhIGFycmF5IHdpdGggYSBQcm9taXNlIGluIGVhY2ggcG9zaXRpb24KICAgICAgICAgICAgICAgIGZvciAodmFyIGluZGV4IGluIGRlc2NyaXB0b3JEYXRhU2NoZW1hKSB7CiAgICAgICAgICAgICAgICAgIGRhdGFTY2hlbWFzQXJyYXkucHVzaChfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGRlc2NyaXB0b3JEYXRhU2NoZW1hW2luZGV4XSkpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vIGFzIHNvb24gYXMgdGhlIHByZXZpb3VzIGFycmF5IGlzIGNvbXBsZXRlZCwgdGhpcyB3aWxsIHdhaXQgZm9yIHRoZSByZXNvbHZlIG9mIGFsbCBwcm9taXNlcyBpbiB0aGUgYXJyYXkKICAgICAgICAgICAgICAgIF9wcm9taXNlMi5kZWZhdWx0LmFsbChkYXRhU2NoZW1hc0FycmF5KS50aGVuKGZ1bmN0aW9uIChkYXRhU2NoZW1hcykgewoKICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkRGF0YVNjaGVtYXMgPSBbXTsKICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2luZGV4IGluIGRhdGFTY2hlbWFzKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFTY2hlbWEgPSBkYXRhU2NoZW1hc1tfaW5kZXhdOwogICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YVNjaGVtYXMucHVzaChkYXRhU2NoZW1hLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCk7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5CiAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVmFsdWUgPSB7IHVzZXI6IGlkZW50aXR5VVJMLCBoeXBlcnR5RGVzY3JpcHRvclVSTDogZGVzY3JpcHRvclVSTCwgaHlwZXJ0eVVSTDogYWRkZXJlc3NMaXN0WzBdLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBmaWx0ZXJlZERhdGFTY2hlbWFzIH07CgogICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KF90aGlzLnJlZ2lzdHJ5VVJMLCAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBtZXNzYWdlVmFsdWUsICdwb2xpY3knKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IFJlZ2lzdGVySHlwZXJ0eSBSZXBseTogJywgcmVwbHkpOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlCiAgICAgICAgICAgICAgICAgIC8vIHRoZSB0aW1lIGlzIGRlZmluZWQgYnkgYSBsaXR0bGUgbGVzcyB0aGFuIGhhbGYgb2YgdGhlIGV4cGlyZXMgdGltZSBkZWZpbmVkCiAgICAgICAgICAgICAgICAgIHZhciBrZWVwQWxpdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChfdGhpcy5yZWdpc3RyeVVSTCwgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgbWVzc2FnZVZhbHVlLCAncG9saWN5Jyk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gS2VlcEFsaXZlIFJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0sIF90aGlzLmV4cGlyZXNUaW1lIC8gMS4xIC8gMiAqIDEwMDApOwoKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0h5cGVydHkgU2NoZW1hcycsIGZpbHRlcmVkRGF0YVNjaGVtYXMpOwogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSHlwZXJ0eSByZXNvdXJjZXMnLCByZXNvdXJjZXMpOwoKICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhZGRlcmVzc0xpc3RbMF0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FkZHJlc3MgUmVhc29uOiAnLCByZWFzb24pOwogICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIG9idGFpbiBhbiBpZGVudGl0eScpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5CiAgICAqIEBwYXJhbSAge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkwgdXJsICAgICAgICB1cmwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVySHlwZXJ0eSh1cmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTsKICAgICAgICB2YXIgaW5kZXggPSAwOwoKICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBfdGhpcy5oeXBlcnRpZXNMaXN0Lmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIGlmIChoeXBlcnR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gdXJsKSB7CiAgICAgICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoZm91bmQgPT09IGZhbHNlKSB7CiAgICAgICAgICByZWplY3QoJ0h5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIHJlc29sdmUoJ0h5cGVydHkgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUbyBkaXNjb3ZlciBwcm90b2NvbCBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBwcm90b2NvbCBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVycyAoZG8gd2UgbmVlZCBzb21ldGhpbmcgc2ltaWxhciBmb3IgSHlwZXJ0aWVzPykuCiAgICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybAogICAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZGlzY292ZXJQcm90b3N0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVyUHJvdG9zdHViKHVybCkgewogICAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpOwogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXF1ZXN0ID0gX3RoaXMucHJvdG9zdHVic0xpc3RbdXJsXTsKCiAgICAgICAgaWYgKHJlcXVlc3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdyZXF1ZXN0VXBkYXRlIGNvdWxkblwndCBnZXQgdGhlIFByb3Rvc3R1YlVSTCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUbyByZWdpc3RlciBhIG5ldyBQcm90b2NvbCBTdHViIGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi4KICAgICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3gKICAgICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpbgogICAgICogQHJldHVybiB7UnVudGltZVByb3RvU3R1YlVSTH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclN0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3R1YihzYW5kYm94LCBkb21haW5VUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSB2b2lkIDA7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90CiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgfQoKICAgICAgICAvL1RPRE8gaW1wbGVtZW50IGEgdW5pcXVlIG51bWJlciBmb3IgdGhlIHByb3Rvc3R1YlVSTAogICAgICAgIGlmICghZG9tYWluVVJMLmluZGV4T2YoJ21zZy1ub2RlLicpKSB7CiAgICAgICAgICBkb21haW5VUkwgPSBkb21haW5VUkwuc3Vic3RyaW5nKGRvbWFpblVSTC5pbmRleE9mKCcuJykgKyAxKTsKICAgICAgICB9CgogICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSAnbXNnLW5vZGUuJyArIGRvbWFpblVSTCArICcvcHJvdG9zdHViLycgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCArIDEpOwoKICAgICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzCiAgICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3J1bnRpbWVQcm90b1N0dWJVUkxdID0gc2FuZGJveDsKCiAgICAgICAgLy8gc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykgewogICAgICAgIC8vICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAvLyB9KTsKCiAgICAgICAgcmVzb2x2ZShydW50aW1lUHJvdG9TdHViVVJMKTsKCiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIocnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgaWYgKG1zZy5yZXNvdXJjZSA9PT0gbXNnLnRvICsgJy9zdGF0dXMnKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSdW50aW1lUHJvdG9zdHViVVJML3N0YXR1cyBtZXNzYWdlOiAnLCBtc2cuYm9keS52YWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIHByb3RvY29sIHN0dWIKICAgICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwgICAgIGh5cGVydHlSdW50aW1lVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVyU3R1YicsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3RlclN0dWIoaHlwZXJ0eVJ1bnRpbWVVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSB2b2lkIDA7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5wcm90b3N0dWJzTGlzdFtoeXBlcnR5UnVudGltZVVSTF07CgogICAgICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5wcm90b3N0dWJzTGlzdFtoeXBlcnR5UnVudGltZVVSTF07CiAgICAgICAgICByZXNvbHZlKCdQcm90b3N0dWJVUkwgcmVtb3ZlZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBUbyByZWdpc3RlciBhIG5ldyBJZGVudGl0eSBQcm92aWRlciBwcm94eSBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBEb21haW5VUkwgdGhhdCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgc3R1Yiwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQcm90b2NvbFN0dWIuCiAgICAgKiBAcGFyYW0ge1NhbmRib3h9ICAgICAgICBTYW5kYm94CiAgICAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICBEb21haW5VUkwgc2VydmljZSBwcm92aWRlciBkb21haW4KICAgICAqIEByZXR1cm4ge1J1bnRpbWVJZHBQcm94eVVSTH0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlcklkcFByb3h5JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpblVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaWRwUHJveHlTdHViVVJMID0gdm9pZCAwOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdAogICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpOwogICAgICAgIH0KCiAgICAgICAgaWRwUHJveHlTdHViVVJMID0gJ2RvbWFpbi1pZHA6Ly8nICsgZG9tYWluVVJMICsgJy9zdHViLycgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCArIDEpOwoKICAgICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzCiAgICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVSTF0gPSBpZHBQcm94eVN0dWJVUkw7CiAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2lkcFByb3h5U3R1YlVSTF0gPSBzYW5kYm94OwoKICAgICAgICAvLyBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7CiAgICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgIC8vIH0pOwoKICAgICAgICByZXNvbHZlKGlkcFByb3h5U3R1YlVSTCk7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGlkcFByb3h5U3R1YlVSTCArICcvc3RhdHVzJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgaWYgKG1zZy5yZXNvdXJjZSA9PT0gbXNnLnRvICsgJy9zdGF0dXMnKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIGRpc2NvdmVyIGlkcFByb3h5IHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIGlkcFByb3h5IHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzCiAgICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybAogICAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTCAgICAgICAgIGlkcFByb3h5VXJsCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3ZlcklkcFByb3h5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3ZlcklkcFByb3h5KHVybCkgewogICAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpOwogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXF1ZXN0ID0gX3RoaXMuaWRwUHJveHlMaXN0W3VybF07CgogICAgICAgIGlmIChyZXF1ZXN0ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgncmVxdWVzdFVwZGF0ZSBjb3VsZG5cJ3QgZ2V0IHRoZSBpZHBQcm94eVVSTCcpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFBvbGljeSBFbmZvcmNlciBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBIeXBlcnR5VVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgUEVQLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFBvbGljeSBFbmZvcmNlciBjb21wb25lbnQuCiAgICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2UKICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCAgICAgICAgICAgIGh5cGVydHkKICAgICogQHJldHVybiB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyUEVQJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclBFUChwb3N0TWVzc2FnZSwgaHlwZXJ0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgLy9UT0RPIGNoZWNrIHdoYXQgcGFyYW1ldGVyIGluIHRoZSBwb3N0TWVzc2FnZSB0aGUgcGVwIGlzLgogICAgICAgIF90aGlzLnBlcExpc3RbaHlwZXJ0eV0gPSBwb3N0TWVzc2FnZTsKICAgICAgICByZXNvbHZlKCdQRVAgcmVnaXN0ZXJlZCB3aXRoIHN1Y2Nlc3MnKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YgogICAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTCAgICAgSHlwZXJ0eVJ1bnRpbWVVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJQRVAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQRVAoSHlwZXJ0eVJ1bnRpbWVVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07CgogICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdQZXAgTm90IGZvdW5kLicpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gcmVjZWl2ZSBzdGF0dXMgZXZlbnRzIGZyb20gY29tcG9uZW50cyByZWdpc3RlcmVkIGluIHRoZSBSZWdpc3RyeS4KICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgTWVzc2FnZS5NZXNzYWdlICAgICAgIGV2ZW50CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdvbkV2ZW50JywKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkV2ZW50KGV2ZW50KSB7fQogICAgLy8gVE9ETyBib2R5Li4uCgoKICAgIC8qKgogICAgKiBUbyBkaXNjb3ZlciBzYW5kYm94ZXMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBVQSB0byBhdm9pZCBtb3JlIHRoYW4gb25lIHNhbmRib3ggZm9yIHRoZSBzYW1lIGRvbWFpbi4KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSBEb21haW5VUkwgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3gKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldFNhbmRib3gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNhbmRib3godXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIGNvbnNvbGUubG9nKCdnZXRTYW5kYm94OiAnLCB1cmwpOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXF1ZXN0ID0gdm9pZCAwOwoKICAgICAgICAvL2ZpcnN0IHRyeSB0byBmaW5kIHRoZSB1cmwgaW4gdGhlIGFwcFNhbmRib3ggbGlzdAogICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbdXJsXTsKCiAgICAgICAgLy9pZiBubyBhcHBTYW5kYm94IHdhcyBmb3VuZCwgdHJ5IHRvIHNlYXJjaCBpbiB0aGUgbm9ybWFsIHNhbmRib3hlcyBsaXN0CiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7CiAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3VybF07CgogICAgICAgICAgaWYgKCFyZXF1ZXN0KSB7CgogICAgICAgICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCkuZG9tYWluOwoKICAgICAgICAgICAgLy8gc2VhcmNoIGluIHRoZSBzYW5kYm94ZXMgbGlzdCBmb3IgYSBlbnRyeSBjb250YWluaW5nIHRoZSBkb21haW4gZ2l2ZW4KICAgICAgICAgICAgZm9yICh2YXIgc2FuZGJveCBpbiBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3gpIHsKICAgICAgICAgICAgICBpZiAoc2FuZGJveC5pbmNsdWRlcyhkb21haW4pKSB7CiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3NhbmRib3hdOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlcXVlc3QpIHsKICAgICAgICAgIHJlamVjdCgnbm8gc2FuZGJveCBmb3VuZCBmb3I6ICcgKyB1cmwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHZlcmlmeSBpZiBzb3VyY2UgaXMgdmFsaWQgYW5kIHRvIHJlc29sdmUgdGFyZ2V0IHJ1bnRpbWUgdXJsIGFkZHJlc3MgaWYgbmVlZGVkIChlZyBwcm90b3N0dWIgcnVudGltZSB1cmwgaW4gY2FzZSB0aGUgbWVzc2FnZSBpcyB0byBiZSBkaXNwYXRjaGVkIHRvIGEgcmVtb3RlIGVuZHBvaW50KS4KICAgICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmwKICAgICogQHJldHVybiB7UHJvbWlzZTxVUkwuVVJMPn0gICAgICAgICAgICAgICAgIFByb21pc2UgPFVSTC5VUkw+CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZXNvbHZlJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHVybCkgewogICAgICBjb25zb2xlLmxvZygncmVzb2x2ZSAnICsgdXJsKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczoKICAgICAgLy8iaHlwZXJ0eS1ydW50aW1lOi8vc3AxL3Byb3Rvc3R1Yi8xMjMiLAogICAgICB2YXIgZGl2aWRlZFVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKSh1cmwpOwogICAgICB2YXIgZG9tYWluVXJsID0gZGl2aWRlZFVSTC5kb21haW47CiAgICAgIHZhciB0eXBlID0gZGl2aWRlZFVSTC50eXBlOwoKICAgICAgLy8gcmVzb2x2ZSB0aGUgZG9tYWluIHByb3Rvc3R1YiBpbiBjYXNlIG9mIGEgbWVzc2FnZSB0byBnbG9iYWwgcmVnaXN0cnkKICAgICAgaWYgKHVybC5pbmNsdWRlcygnZ2xvYmFsOi8vcmVnaXN0cnknKSkgewogICAgICAgIGRvbWFpblVybCA9IF90aGlzLl9kb21haW47CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAoIWRvbWFpblVybC5pbmRleE9mKCdtc2ctbm9kZS4nKSB8fCAhZG9tYWluVXJsLmluZGV4T2YoJ3JlZ2lzdHJ5LicpKSB7CiAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5Vcmwuc3Vic3RyaW5nKGRvbWFpblVybC5pbmRleE9mKCcuJykgKyAxKTsKICAgICAgICB9CgogICAgICAgIHZhciByZXF1ZXN0ID0gdm9pZCAwOwogICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHsKICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVxdWVzdCA9IF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF07CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKCdydW50aW1lOnN0dWJMb2FkZWQnLCBmdW5jdGlvbiAoZG9tYWluVXJsKSB7CiAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXTsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQgUHJvdG9zdHViOiAnLCByZXF1ZXN0KTsKICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3J1bnRpbWU6aWRwUHJveHlMb2FkZWQnLCBmdW5jdGlvbiAoZG9tYWluVXJsKSB7CiAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF07CiAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIElEUFByb3h5OiAnLCByZXF1ZXN0KTsKICAgICAgICAgIHJlc29sdmUocmVxdWVzdCk7CiAgICAgICAgfSk7CgogICAgICAgIGlmIChyZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQ6ICcsIHJlcXVlc3QpOwogICAgICAgICAgcmVzb2x2ZShyZXF1ZXN0KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykgewogICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdydW50aW1lOmxvYWRJZHBQcm94eScsIGRvbWFpblVybCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfdGhpcy50cmlnZ2VyKCdydW50aW1lOmxvYWRTdHViJywgZG9tYWluVXJsKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ21lc3NhZ2VCdXMnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1czsKICAgIH0KCiAgICAvKioKICAgICogU2V0IHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkKICAgICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICAgKi8KICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KG1lc3NhZ2VCdXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzOwoKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMucmVnaXN0cnlVUkwsIGZ1bmN0aW9uIChtc2cpIHsKCiAgICAgICAgdmFyIHVzZXJVcmwgPSBfdGhpcy5fZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYSk7CgogICAgICAgIHZhciByZXBseSA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHsgcmVzb3VyY2U6IHVzZXJVcmwgfSB9OwogICAgICAgIHJlcGx5LmJvZHkuY29kZSA9IHVzZXJVcmwgPyAyMDAgOiA0MDQ7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5KTsKICAgICAgfSk7CgogICAgICAvLyBhbHNvIHNldCB1cCBtZXNzYWdlQnVzIGluIHRoZSBJZGVudGl0eU1vZHVsZSBjb21wb25lbnQKICAgICAgLy8gVE9ETyByZWRlZmluZSBhIGJldHRlciB3YXkgdG8gYWRkIHRoZSBtZXNzYWdlQnVzIGluIHRoZSBJZE1vZHVsZQogICAgICBfdGhpcy5pZE1vZHVsZS5tZXNzYWdlQnVzID0gbWVzc2FnZUJ1czsKCiAgICAgIC8vIEluc3RhbGwgQWRkcmVzc0FsbG9jYXRpb24KICAgICAgdmFyIGFkZHJlc3NBbGxvY2F0aW9uID0gbmV3IF9BZGRyZXNzQWxsb2NhdGlvbjIuZGVmYXVsdChfdGhpcy5yZWdpc3RyeVVSTCwgbWVzc2FnZUJ1cyk7CiAgICAgIF90aGlzLmFkZHJlc3NBbGxvY2F0aW9uID0gYWRkcmVzc0FsbG9jYXRpb247CgogICAgICAvL0luc3RhbGwgT2JqZWN0QWxsb2NhdGlvbgogICAgICB2YXIgb2JqZWN0QWxsb2NhdGlvbiA9IG5ldyBfT2JqZWN0QWxsb2NhdGlvbjIuZGVmYXVsdChfdGhpcy5yZWdpc3RyeVVSTCArICcvb2JqZWN0LWFsbG9jYXRpb24nLCBtZXNzYWdlQnVzKTsKICAgICAgX3RoaXMub2JqZWN0QWxsb2NhdGlvbiA9IG9iamVjdEFsbG9jYXRpb247CiAgICB9CiAgfV0pOwogIHJldHVybiBSZWdpc3RyeTsKfShfRXZlbnRFbWl0dGVyMy5kZWZhdWx0KTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lzdHJ5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9zeW5jaGVyL09iamVjdEFsbG9jYXRpb24iOjQwOSwiLi4vdXRpbHMvRXZlbnRFbWl0dGVyIjo0MTQsIi4uL3V0aWxzL3V0aWxzLmpzIjo0MTYsIi4vQWRkcmVzc0FsbG9jYXRpb24iOjQwNCwiLi9IeXBlcnR5SW5zdGFuY2UiOjQwNSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjozMDEsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjozMDUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjozMDksImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjozMTAsInNlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnkiOjM5MH1dLDQwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwovKioKKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpCiogICBSZWdpc3RyeSBEYXRhIE1vZGVsIGluY2x1ZGVzIGFsbCBPYmplY3RzIHRvIGJlIGhhbmRsZWQgYnkgdGhlIFJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgaW5jbHVkaW5nCiovCgp2YXIgUmVnaXN0cnlEYXRhTW9kZWwgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmVnaXN0cnlEYXRhTW9kZWwoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQsIHN0YXR1cywgc3R1YnMsIHN0dWJzQ29uZmlndXJhdGlvbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVnaXN0cnlEYXRhTW9kZWwpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX2lkID0gaWQ7CiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2Rlc2NyaXB0b3JVUkwgPSBkZXNjcmlwdG9yVVJMOwogICAgX3RoaXMuX3N0YXJ0aW5nVGltZSA9IHN0YXJ0aW5nVGltZTsKICAgIF90aGlzLl9sYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWQ7CiAgICBfdGhpcy5fc3RhdHVzID0gc3RhdHVzOwogICAgX3RoaXMuX3N0dWJzID0gc3R1YnM7CiAgICBfdGhpcy5fc3R1YnNDb25maWd1cmF0aW9uID0gc3R1YnNDb25maWd1cmF0aW9uOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUmVnaXN0cnlEYXRhTW9kZWwsIFt7CiAgICBrZXk6ICJpZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9pZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1cmwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fdXJsOwogICAgfQogIH0sIHsKICAgIGtleTogImRlc2NyaXB0b3IiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvclVSTDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFJlZ2lzdHJ5RGF0YU1vZGVsOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSZWdpc3RyeURhdGFNb2RlbDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4fV0sNDA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpOwoKdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnJlcXVpcmUoJ2JhYmVsLXBvbHlmaWxsJyk7Cgp2YXIgX1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi4vcmVnaXN0cnkvUmVnaXN0cnknKTsKCnZhciBfUmVnaXN0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnaXN0cnkpOwoKdmFyIF9JZGVudGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlJyk7Cgp2YXIgX0lkZW50aXR5TW9kdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lkZW50aXR5TW9kdWxlKTsKCnZhciBfUG9saWN5RW5naW5lID0gcmVxdWlyZSgnLi4vcG9saWN5L1BvbGljeUVuZ2luZScpOwoKdmFyIF9Qb2xpY3lFbmdpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9saWN5RW5naW5lKTsKCnZhciBfTWVzc2FnZUJ1cyA9IHJlcXVpcmUoJy4uL2J1cy9NZXNzYWdlQnVzJyk7Cgp2YXIgX01lc3NhZ2VCdXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVzc2FnZUJ1cyk7Cgp2YXIgX1N5bmNoZXJNYW5hZ2VyID0gcmVxdWlyZSgnLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlcicpOwoKdmFyIF9TeW5jaGVyTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jaGVyTWFuYWdlcik7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4ID0gcmVxdWlyZSgnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnKTsKCnZhciBfUnVudGltZUNvcmVDdHgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVudGltZUNvcmVDdHgpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiAqIFJ1bnRpbWUgVXNlciBBZ2VudCBJbnRlcmZhY2Ugd2lsbCBwcm9jZXNzIGFsbCB0aGUgZGVwZW5kZWNpZXMgb2YgdGhlIGNvcmUgcnVudGltZTsKICogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XQogKiBAdmVyc2lvbiAwLjQuMAogKgogKiBAcHJvcGVydHkge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzOwogKiBAcHJvcGVydHkge1J1bnRpbWVDYXRhbG9ndWV9IHJ1bnRpbWVDYXRhbG9ndWUgLSBDYXRhbG9ndWUgb2YgY29tcG9uZW50cyBjYW4gYmUgaW5zdGFsbGVkOwogKiBAcHJvcGVydHkge3J1bnRpbWVVUkx9IHJ1bnRpbWVVUkwgLSBUaGlzIGlkZW50aWZ5IHRoZSBjb3JlIHJ1bnRpbWUsIHNob3VsZCBiZSB1bmlxdWU7CiAqIEBwcm9wZXJ0eSB7SWRlbnRpdHlNb2R1bGV9IGlkZW50aXR5TW9kdWxlIC0gSWRlbnRpdHkgTW9kdWxlOwogKiBAcHJvcGVydHkge1BvbGljeUVuZ2luZX0gcG9saWN5RW5naW5lIC0gUG9saWN5IEVuZ2luZSBNb2R1bGU7CiAqIEBwcm9wZXJ0eSB7UmVnaXN0cnl9IHJlZ2lzdHJ5IC0gUmVnaXN0cnkgTW9kdWxlOwogKiBAcHJvcGVydHkge01lc3NhZ2VCdXN9IG1lc3NhZ2VCdXMgLSBNZXNzYWdlIEJ1cyBpcyB1c2VkIGxpa2UgYSByb3V0ZXIgdG8gcmVkaXJlY3QgdGhlIG1lc3NhZ2VzIGZyb20gb25lIGNvbXBvbmVudCB0byBvdGhlcihzKQogKiBAcHJvcGVydHkge0dyYXBoQ29ubmVjdG9yfSBncmFwaENvbm5lY3RvciAtIEdyYXBoIENvbm5lY3RvciBoYW5kbGluZyBHVUlEIGFuZCBjb250YWN0cwogKi8KLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgUnVudGltZVVBID0gZnVuY3Rpb24gKCkgewoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50CiAgICogQHBhcmFtIHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb3JlIHJ1bnRpbWUgd2lsbCBydW47CiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTsKICAgKi8KCiAgZnVuY3Rpb24gUnVudGltZVVBKHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJ1bnRpbWVVQSk7CgoKICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKICAgIGlmICghZG9tYWluKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRoZSBkb21haW4gb2YgcnVudGltZScpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUgPSBydW50aW1lRmFjdG9yeS5jcmVhdGVSdW50aW1lQ2F0YWxvZ3VlKCk7CgogICAgLy8gVE9ETzogcG9zdCBhbmQgcmV0dXJuIHJlZ2lzdHJ5L2h5cGVydHlSdW50aW1lSW5zdGFuY2UgdG8gYW5kIGZyb20gQmFjay1lbmQgU2VydmljZQogICAgLy8gdGhlIHJlc3BvbnNlIGlzIGxpa2U6IHJ1bnRpbWU6Ly9zcDEvMTIzCgogICAgdmFyIHJ1bnRpbWVVUkwgPSAncnVudGltZTovLycgKyBkb21haW4gKyAnLycgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCArIDEpOwogICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5kb21haW4gPSBkb21haW47CgogICAgLy8gVE9ETzogY2hlY2sgaWYgcnVudGltZSBjYXRhbG9ndWUgbmVlZCB0aGUgcnVudGltZVVSTDsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CgogICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZQogICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgX0lkZW50aXR5TW9kdWxlMi5kZWZhdWx0KHJ1bnRpbWVVUkwpOwoKICAgIC8vIFVzZSB0aGUgc2FuZGJveCBmYWN0b3J5IHRvIGNyZWF0ZSBhbiBBcHBTYW5kYm94OwogICAgLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgZGVjaWRlZCBieSBwb2xpY3lFbmdpbmUgaWYgd2UgbmVlZAogICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7CiAgICB2YXIgYXBwU2FuZGJveCA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTsKCiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUmVnaXN0cnkgTW9kdWxlCiAgICBfdGhpcy5yZWdpc3RyeSA9IG5ldyBfUmVnaXN0cnkyLmRlZmF1bHQocnVudGltZVVSTCwgYXBwU2FuZGJveCwgX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUpOwoKICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1cwogICAgX3RoaXMubWVzc2FnZUJ1cyA9IG5ldyBfTWVzc2FnZUJ1czIuZGVmYXVsdChfdGhpcy5yZWdpc3RyeSk7CgogICAgLy8gSW5zdGFudGlhdGUgdGhlIFBvbGljeSBFbmdpbmUKICAgIF90aGlzLnBvbGljeUVuZ2luZSA9IG5ldyBfUG9saWN5RW5naW5lMi5kZWZhdWx0KG5ldyBfUnVudGltZUNvcmVDdHgyLmRlZmF1bHQoX3RoaXMuaWRlbnRpdHlNb2R1bGUsIF90aGlzLnJlZ2lzdHJ5KSk7CgogICAgX3RoaXMubWVzc2FnZUJ1cy5waXBlbGluZS5oYW5kbGVycyA9IFsKCiAgICAvLyBQb2xpY3kgbWVzc2FnZSBhdXRob3Jpc2UKICAgIGZ1bmN0aW9uIChjdHgpIHsKICAgICAgX3RoaXMucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKGZ1bmN0aW9uIChjaGFuZ2VkTWdzKSB7CiAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7CiAgICAgICAgY3R4Lm5leHQoKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTsKICAgICAgICBjdHguZmFpbChyZWFzb24pOwogICAgICB9KTsKICAgIH1dOwoKICAgIC8vIEFkZCB0byBBcHAgU2FuZGJveCB0aGUgbGlzdGVuZXI7CiAgICBhcHBTYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICB9KTsKCiAgICAvLyBSZWdpc3RlciBtZXNzYWdlQnVzIG9uIFJlZ2lzdHJ5CiAgICBfdGhpcy5yZWdpc3RyeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1czsKCiAgICAvLyBSZWdpc3RlciByZWdpc3RyeSBvbiBJZGVudGl0eU1vZHVsZQogICAgX3RoaXMuaWRlbnRpdHlNb2R1bGUucmVnaXN0cnkgPSBfdGhpcy5yZWdpc3RyeTsKCiAgICBfdGhpcy5yZWdpc3RyeS5hZGRFdmVudExpc3RlbmVyKCdydW50aW1lOmxvYWRTdHViJywgZnVuY3Rpb24gKGRvbWFpblVSTCkgewogICAgICBfdGhpcy5sb2FkU3R1Yihkb21haW5VUkwpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnJlZ2lzdHJ5LnRyaWdnZXIoJ3J1bnRpbWU6c3R1YkxvYWRlZCcsIGRvbWFpblVSTCk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZGVwbG95IHRoZSBQcm90b2NvbFN0dWIgY29tcG9uZW50ICcsIHJlYXNvbik7CiAgICAgIH0pOwogICAgfSk7CgogICAgX3RoaXMucmVnaXN0cnkuYWRkRXZlbnRMaXN0ZW5lcigncnVudGltZTpsb2FkSWRwUHJveHknLCBmdW5jdGlvbiAoZG9tYWluVVJMKSB7CiAgICAgIF90aGlzLmxvYWRJZHBQcm94eShkb21haW5VUkwpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLnJlZ2lzdHJ5LnRyaWdnZXIoJ3J1bnRpbWU6aWRwUHJveHlMb2FkZWQnLCBkb21haW5VUkwpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGRlcGxveSB0aGUgSURQIFByb3h5IGNvbXBvbmVudCAnLCByZWFzb24pOwogICAgICB9KTsKICAgIH0pOwoKICAgIC8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHMKICAgIC8vIGFuZCBzZXQgdGhlIG1lc3NhZ2UgYnVzIHRvIHRoZSBmYWN0b3J5CiAgICBydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1czsKCiAgICAvLyBJbnN0YW5jaWF0ZSB0aGUgU3luY2hlck1hbmFnZXI7CiAgICBfdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBfU3luY2hlck1hbmFnZXIyLmRlZmF1bHQoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cywgX3RoaXMucmVnaXN0cnksIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUpOwoKICAgIC8vIEluc3RhbnRpYXRlIHRoZSBHcmFwaCBDb25uZWN0b3IKICAgIC8vIF90aGlzLmdyYXBoQ29ubmVjdG9yID0gbmV3IEdyYXBoQ29ubmVjdG9yKF90aGlzLnJ1bnRpbWVVUkwsIF90aGlzLm1lc3NhZ2VCdXMpOwogIH0KCiAgLyoqCiAgKiBBY2NvbW9kYXRlIGludGVyb3BlcmFiaWxpdHkgaW4gSDJIIGFuZCBwcm90byBvbiB0aGUgZmx5IGZvciBuZXdseSBkaXNjb3ZlcmVkIGRldmljZXMgaW4gTTJNCiAgKiBAcGFyYW0gIHtDYXRhbG9ndWVEYXRhT2JqZWN0Lkh5cGVydHlEZXNjcmlwdG9yfSAgIGRlc2NyaXB0b3IgICAgZGVzY3JpcHRvcgogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lVUEsIFt7CiAgICBrZXk6ICdkaXNjb3ZlckhpcGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySGlwZXJ0eShkZXNjcmlwdG9yKSB7fQogICAgLy8gQm9keS4uLgoKCiAgICAvKioKICAgICogUmVnaXN0ZXIgSHlwZXJ0eSBkZXBsb3llZCBieSB0aGUgQXBwIHRoYXQgaXMgcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci4gVG8gYmUgdXNlZCB3aGVuIEFwcCBhbmQgSHlwZXJ0aWVzIGFyZSBmcm9tIHRoZSBzYW1lIGRvbWFpbiBvdGhlcndpc2UgdGhlIFJ1bnRpbWVVQSB3aWxsIHJhaXNlIGFuIGV4Y2VwdGlvbiBhbmQgdGhlIEFwcCBoYXMgdG8gdXNlIHRoZSBsb2FkSHlwZXJ0eSguLikgZnVuY3Rpb24uCiAgICAqIEBwYXJhbSAge09iamVjdH0gT2JqZWN0ICAgICAgICAgICAgICAgICAgIGh5cGVydHlJbnN0YW5jZQogICAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgICAgICBkZXNjcmlwdG9yICAgICAgZGVzY3JpcHRvcgogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3Rlckh5cGVydHkoaHlwZXJ0eUluc3RhbmNlLCBkZXNjcmlwdG9yKSB7fQogICAgLy8gQm9keS4uLgoKCiAgICAvKioKICAgICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMCiAgICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDsKICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHRocm93IG5ldyBFcnJvcignSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIF9oeXBlcnR5VVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfaHlwZXJ0eVNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9oeXBlcnR5RGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX2h5cGVydHlTb3VyY2VQYWNrYWdlID0gdm9pZCAwOwoKICAgICAgICB2YXIgZXJyb3JSZWFzb24gPSBmdW5jdGlvbiBlcnJvclJlYXNvbihyZWFzb24pIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBoeXBlcnR5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvcgogICAgICAgIC8vIFRPRE86IHRoZSByZXF1ZXN0IE1vZHVsZSBzaG91bGQgYmUgY2hhbmdlZCwKICAgICAgICAvLyBiZWNhdXNlIGF0IHRoaXMgbW9tZW50IGl0IGlzIGluY29tcGF0aWJsZSB3aXRoIG5vZGVqczsKICAgICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlczsKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLSBIeXBlcnR5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpOwogICAgICAgIGNvbnNvbGUuaW5mbygnR2V0IGh5cGVydHkgZGVzY3JpcHRvciBmb3IgOicsIGh5cGVydHlEZXNjcmlwdG9yVVJMKTsKICAgICAgICByZXR1cm4gX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5RGVzY3JpcHRvclVSTCkudGhlbihmdW5jdGlvbiAoaHlwZXJ0eURlc2NyaXB0b3IpIHsKICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkICJzdGVwIDIgYW5kIDMiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMTogcmV0dXJuIGh5cGVydHkgZGVzY3JpcHRvcicsIGh5cGVydHlEZXNjcmlwdG9yKTsKCiAgICAgICAgICAvLyBoeXBlcnR5IGNvbnRhaW5zIHRoZSBmdWxsIHBhdGggb2YgdGhlIGNhdGFsb2d1ZSBVUkwsIGUuZy4KICAgICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi4KICAgICAgICAgIF9oeXBlcnR5RGVzY3JpcHRvciA9IGh5cGVydHlEZXNjcmlwdG9yOwoKICAgICAgICAgIHZhciBzb3VyY2VQYWNrYWdlVVJMID0gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDsKCiAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykgewogICAgICAgICAgICByZXR1cm4gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGUKICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVBhY2thZ2UpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMjogcmV0dXJuIGh5cGVydHkgc291cmNlIGNvZGUnKTsKCiAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB3ZSBoYXZlIGNvbXBsZXRlZCAic3RlcCA0IGFuZCA1IiBhcyBzaG93biBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kCgogICAgICAgICAgX2h5cGVydHlTb3VyY2VQYWNrYWdlID0gc291cmNlUGFja2FnZTsKCiAgICAgICAgICAvLwogICAgICAgICAgLy8gc3RlcHMgNiAtLSA5IGFyZSBza2lwcGVkLgogICAgICAgICAgLy8gVE9ETzogb24gcmVsZWFzZSBvZiBjb3JlIDAuMjsKICAgICAgICAgIC8vIFRPRE86IFByb21pc2UgdG8gY2hlY2sgdGhlIHBvbGljeSBlbmdpbmUKCiAgICAgICAgICAvLyBtb2NrLXVwIGNvZGU7CiAgICAgICAgICAvLyB0ZW1wb3JhcnkgY29kZSwgb25seQogICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CgogICAgICAgICAgcmV0dXJuIHBvbGljeTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY3lSZXN1bHQpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMzogcmV0dXJuIHBvbGljeSBlbmdpbmUgcmVzdWx0OiAnLCBwb2xpY3lSZXN1bHQpOwoKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNiB0byA5IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgLy8KICAgICAgICAgIC8vIFN0ZXBzIDYgLS0gOQogICAgICAgICAgLy8gQXMgYSByZXN1bHQgb2YgdGhlIHNpcHBlZCBzdGVwcywgd2Uga25vdyBhdCB0aGlzIHBvaW50IGlmIHdlIGV4ZWN1dGUKICAgICAgICAgIC8vIGluU2FtZVNhbmRib3ggb3Igbm90LgogICAgICAgICAgLy8KCiAgICAgICAgICAvLyBGb3IgdGVzdGluZywganVzdCBhc3N1bWUgd2UgZXhlY3V0ZSBpbiBzYW1lIFNhbmRib3guCiAgICAgICAgICB2YXIgaW5TYW1lU2FuZGJveCA9IHRydWU7CiAgICAgICAgICB2YXIgc2FuZGJveCA9IHZvaWQgMDsKCiAgICAgICAgICBpZiAoaW5TYW1lU2FuZGJveCkgewoKICAgICAgICAgICAgLy8gdGhpcyBkb24ndCBuZWVkIGJlIGEgUHJvbWlzZTsKICAgICAgICAgICAgc2FuZGJveCA9IF90aGlzLnJlZ2lzdHJ5LmdldEFwcFNhbmRib3goKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTEgaGVyZS4KICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpLmRvbWFpbjsKCiAgICAgICAgICAgICAgLy8gZ2V0U2FuZGJveCwgdGhpcyB3aWxsIHJldHVybiBhIHByb21pc2U7CiAgICAgICAgICAgICAgc2FuZGJveCA9IF90aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDsKICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNDogcmV0dXJuIHRoZSBzYW5kYm94Jywgc2FuZGJveCk7CgogICAgICAgICAgLy8gUmV0dXJuIHRoZSBzYW5kYm94IGluZGVwZW50ZWx5IGlmIGl0IHJ1bm5pbmcgaW4gdGhlIHNhbWUgc2FuZGJveCBvciBub3QKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS4KICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJzQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3ggJywgcmVhc29uKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsOwogICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKICAgICAgICAgIHZhciBzYW5kYm94ID0gX3RoaXMucnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveCgpOwoKICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNTogcmV0dXJuIHNhbmRib3ggYW5kIHJlZ2lzdGVyJyk7CgogICAgICAgICAgX2h5cGVydHlTYW5kYm94ID0gc2FuZGJveDsKCiAgICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5CiAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGh5cGVydHlEZXNjcmlwdG9yVVJMLCBfaHlwZXJ0eURlc2NyaXB0b3IpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGh5cGVydHlVUkwpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNjogSHlwZXJ0eSB1cmwsIGFmdGVyIHJlZ2lzdGVyIGh5cGVydHknLCBoeXBlcnR5VVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE2IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMOwoKICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgaWYgKCEoMCwgX3V0aWxzLmVtcHR5T2JqZWN0KShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7CiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IF90aGlzLnJ1bnRpbWVVUkw7CgogICAgICAgICAgLy8gV2Ugd2lsbCBkZXBsb3kgdGhlIGNvbXBvbmVudCAtIHN0ZXAgMTcgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuCiAgICAgICAgICByZXR1cm4gX2h5cGVydHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfaHlwZXJ0eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX2h5cGVydHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRlcGxveUNvbXBvbmVudFN0YXR1cykgewogICAgICAgICAgY29uc29sZS5pbmZvKCc3OiBEZXBsb3kgY29tcG9uZW50IHN0YXR1cyBmb3IgaHlwZXJ0eTogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE5IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgoKICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIgdG8gdGhlIGFwcFNhbmRib3ggb3IgaHlwZXJ0U2FuZGJveDsKICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX2h5cGVydHlVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgX2h5cGVydHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIwIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgdmFyIGh5cGVydHkgPSB7CiAgICAgICAgICAgIHJ1bnRpbWVIeXBlcnR5VVJMOiBfaHlwZXJ0eVVSTCwKICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgIH07CgogICAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7CiAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRGVwbG95IFN0dWIgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmwKICAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW4KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkU3R1Yihwcm90b3N0dWJVUkwpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXByb3Rvc3R1YlVSTCkgdGhyb3cgbmV3IEVycm9yKCdkb21haW4gcGFyYW1ldGVyIGlzIG5lZWRlZCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocHJvdG9zdHViVVJMKS5kb21haW47CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3N0dWJTYW5kYm94ID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YkRlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9ydW50aW1lUHJvdG9TdHViVVJMID0gdm9pZCAwOwogICAgICAgIHZhciBfc3R1YlNvdXJjZVBhY2thZ2UgPSB2b2lkIDA7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIHByb3RvY29sc3R1YjogJywgcmVhc29uKTsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH07CgogICAgICAgIC8vIERpc2NvdmVyIFByb3RvY29sIFN0dWIKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gUHJvdG9TdHViIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgY29uc29sZS5pbmZvKCdEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7CiAgICAgICAgX3RoaXMucmVnaXN0cnkuZGlzY292ZXJQcm90b3N0dWIoZG9tYWluKS50aGVuKGZ1bmN0aW9uIChydW50aW1lUHJvdG9TdHViVVJMKSB7CiAgICAgICAgICAvLyBJcyByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUHJvdG8gU3R1YiBEaXNjb3ZlcmVkOiAnLCBydW50aW1lUHJvdG9TdHViVVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7CiAgICAgICAgICB2YXIgc3R1YiA9IHsKICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTDogcnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICAgICAgc3RhdHVzOiAnZGVwbG95ZWQnCiAgICAgICAgICB9OwoKICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewoKICAgICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUHJvdG8gU3R1YiBub3QgZm91bmQ6JywgcmVhc29uKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgX3RoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpLnRoZW4oZnVuY3Rpb24gKHN0dWJEZXNjcmlwdG9yKSB7CgogICAgICAgICAgICBjb25zb2xlLmluZm8oJzIuIHJldHVybiB0aGUgUHJvdG9TdHViIGRlc2NyaXB0b3I6Jywgc3R1YkRlc2NyaXB0b3IpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICBfc3R1YkRlc2NyaXB0b3IgPSBzdHViRGVzY3JpcHRvcjsKCiAgICAgICAgICAgIHZhciBzb3VyY2VQYWNrYWdlVVJMID0gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDsKCiAgICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHN0dWJEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pLnRoZW4oZnVuY3Rpb24gKHN0dWJTb3VyY2VQYWNrYWdlKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGU6ICcsIHN0dWJTb3VyY2VQYWNrYWdlKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU291cmNlUGFja2FnZSA9IHN0dWJTb3VyY2VQYWNrYWdlOwoKICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDsKICAgICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHsKICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc3R1YlNhbmRib3gpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCAnLCBzdHViU2FuZGJveCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNS4gU2FuZGJveCB3YXMgbm90IGZvdW5kLCBjcmVhdGluZyBhIG5ldyBvbmUgJywgcmVhc29uKTsKCiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIHN0dWIgZGVzY3JpcHRvciB1cmw7CiAgICAgICAgICAgIC8vIE1ha2UgU3RlcHMgeHh4IC0tLSB4eHgKICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKICAgICAgICAgICAgdmFyIHNhbmRib3ggPSBfdGhpcy5ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KCk7CiAgICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgICBjb25zb2xlLmluZm8oJzYuIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSBhbmQgcmVnaXN0ZXInLCBzYW5kYm94LCAndG8gZG9tYWluICcsIGRvbWFpbik7CgogICAgICAgICAgICBfc3R1YlNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocnVudGltZVByb3RvU3R1YlVSTCkgewoKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsKCiAgICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uID0ge307CiAgICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7CiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIEpTT04ucGFyc2UoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTsKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAogICAgICAgICAgICByZXR1cm4gX3N0dWJTYW5kYm94LmRlcGxveUNvbXBvbmVudChfc3R1YlNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgcnVudGltZVByb3RvU3R1YlVSTCwgY29uZmlndXJhdGlvbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkZXBsb3lDb21wb25lbnRTdGF0dXMpIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIKICAgICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZVByb3RvU3R1YlVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgLy8gTG9hZCBTdHViIGZ1bmN0aW9uIHJlc29sdmVkIHdpdGggc3VjY2VzczsKICAgICAgICAgICAgdmFyIHN0dWIgPSB7CiAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTDogX3J1bnRpbWVQcm90b1N0dWJVUkwsCiAgICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICAgIH0pLmNhdGNoKGVycm9yUmVhc29uKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsCiAgICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdsb2FkSWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkgewoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaWRwUHJveHlVUkwpLmRvbWFpbjsKCiAgICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICAgIGRvbWFpbiA9IGlkcFByb3h5VVJMOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9wcm94eVNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9wcm94eURlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9ydW50aW1lSWRwUHJveHlVUkwgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9wcm94eVNvdXJjZVBhY2thZ2UgPSB2b2lkIDA7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRGlzY292ZXIgSURQUHJveHkKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicpOwogICAgICAgIGNvbnNvbGUuaW5mbygnRGlzY292ZXIgb3IgQ3JlYXRlIGEgbmV3IElkcFByb3h5IGZvciBkb21haW4vVVJMOiAnLCBkb21haW4pOwogICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5kaXNjb3ZlcklkcFByb3h5KGRvbWFpbikudGhlbihmdW5jdGlvbiAocnVudGltZUlkcFByb3h5VVJMKSB7CiAgICAgICAgICAvLyBJcyByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSURQUHJveHkgRGlzY292ZXJlZDogJywgcnVudGltZUlkcFByb3h5VVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7CiAgICAgICAgICB2YXIgaWRwUHJveHkgPSB7CiAgICAgICAgICAgIHJ1bnRpbWVJZHBQcm94eVVSTDogcnVudGltZUlkcFByb3h5VVJMLAogICAgICAgICAgICBzdGF0dXM6ICdkZXBsb3llZCcKICAgICAgICAgIH07CgogICAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7CiAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewoKICAgICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSWRwUHJveHkgbm90IGZvdW5kOicsIHJlYXNvbik7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBkZXNjcmlwdG9yIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKS50aGVuKGZ1bmN0aW9uIChwcm94eURlc2NyaXB0b3IpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMi4gUmV0dXJuIHRoZSBJRFBQcm94eSBkZXNjcmlwdG9yOicsIHByb3h5RGVzY3JpcHRvcik7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBwcm94eURlc2NyaXB0b3I7CgogICAgICAgICAgICB2YXIgc291cmNlUGFja2FnZVVSTCA9IHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHsKICAgICAgICAgICAgICByZXR1cm4gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSkuY2F0Y2goZXJyb3JSZWFzb24pLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVBhY2thZ2UpIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCczLiByZXR1cm4gdGhlIElEUFByb3h5IHNvdXJjZSBwYWNrYWdlOiAnLCBzb3VyY2VQYWNrYWdlKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9wcm94eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlOwoKICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDsKICAgICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwb2xpY3kpIHsKICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gX3RoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJveHlTYW5kYm94KSB7CgogICAgICAgICAgICBjb25zb2xlLmluZm8oJzQuIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVyZWQgdGhlbiByZXR1cm4gdGhlIHNhbmRib3gnLCBwcm94eVNhbmRib3gpOwoKICAgICAgICAgICAgX3Byb3h5U2FuZGJveCA9IHByb3h5U2FuZGJveDsKICAgICAgICAgICAgcmV0dXJuIHByb3h5U2FuZGJveDsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZScsIHJlYXNvbik7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBwcm94eSBkZXNjcmlwdG9yIHVybDsKICAgICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveAogICAgICAgICAgICB2YXIgc2FuZGJveCA9IF90aGlzLnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goKTsKICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzYW5kYm94KSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTsKCiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5yZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChydW50aW1lSWRwUHJveHlVUkwpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNy4gUmV0dXJuIHRoZSBydW50aW1lIElkcCBQcm94eSBVUkw6ICcsIHJ1bnRpbWVJZHBQcm94eVVSTCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9ydW50aW1lSWRwUHJveHlVUkwgPSBydW50aW1lSWRwUHJveHlVUkw7CgogICAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgICBpZiAoISgwLCBfdXRpbHMuZW1wdHlPYmplY3QpKF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHsKICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgSlNPTi5wYXJzZShfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTsKICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAogICAgICAgICAgICByZXR1cm4gX3Byb3h5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3Byb3h5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lSWRwUHJveHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGVwbG95Q29tcG9uZW50U3RhdHVzKSB7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnODogcmV0dXJuIGRlcGxveSBjb21wb25lbnQgZm9yIHNhbmRib3ggc3RhdHVzOiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyCiAgICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVJZHBQcm94eVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF9wcm94eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7CiAgICAgICAgICAgIHZhciBpZHBQcm94eSA9IHsKICAgICAgICAgICAgICBydW50aW1lSWRwUHJveHlVUkw6IF9ydW50aW1lSWRwUHJveHlVUkwsCiAgICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgICB9KS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBVc2VkIHRvIGNoZWNrIGZvciB1cGRhdGVzIGFib3V0IGNvbXBvbmVudHMgaGFuZGxlZCBpbiB0aGUgQ2F0YWxvZ3VlIGluY2x1ZGluZyBwcm90b2NvbCBzdHVicyBhbmQgSHlwZXJ0aWVzLiBjaGVjayByZWxhdGlvbnNoaXAgd2l0aCBsaWZlY3ljbGUgbWFuYWdlbWVudCBwcm92aWRlZCBieSBTZXJ2aWNlIFdvcmtlcnMKICAgICogQHBhcmFtICB7Q2F0YWxvZ3VlVVJMfSAgICAgICB1cmwgdXJsCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjaGVja0ZvclVwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGUodXJsKSB7CiAgICAgIC8vIEJvZHkuLi4KICAgIH0KICB9XSk7CiAgcmV0dXJuIFJ1bnRpbWVVQTsKfSgpOwovLyBpbXBvcnQgR3JhcGhDb25uZWN0b3IgZnJvbSAnLi4vZ3JhcGhjb25uZWN0b3IvR3JhcGhDb25uZWN0b3InOwoKLy9NYWluIGRlcGVuZGVjaWVzCgoKZXhwb3J0cy5kZWZhdWx0ID0gUnVudGltZVVBOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9idXMvTWVzc2FnZUJ1cyI6MzkyLCIuLi9pZGVudGl0eS9JZGVudGl0eU1vZHVsZSI6Mzk2LCIuLi9wb2xpY3kvUG9saWN5RW5naW5lIjo0MDEsIi4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Ijo0MDMsIi4uL3JlZ2lzdHJ5L1JlZ2lzdHJ5Ijo0MDYsIi4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXIiOjQxMywiLi4vdXRpbHMvdXRpbHMiOjQxNiwiYmFiZWwtcG9seWZpbGwiOjEsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduIjoyOTgsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjozMDUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDQwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KCnZhciBPYmplY3RBbGxvY2F0aW9uID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfdXJsOiBVUkwKICBfYnVzOiBNaW5pQnVzCiAgKi8KCiAgLyoqCiAgICogQ3JlYXRlIGFuIE9iamVjdCBBbGxvY2F0aW9uCiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZQogICAqIEBwYXJhbSAge01pbmlCdXN9ICAgICAgYnVzIC0gTWluaUJ1cyB1c2VkIGZvciBhZGRyZXNzIGFsbG9jYXRpb24KICAgKi8KCiAgZnVuY3Rpb24gT2JqZWN0QWxsb2NhdGlvbih1cmwsIGJ1cykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgT2JqZWN0QWxsb2NhdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fdXJsID0gdXJsOwogICAgX3RoaXMuX2J1cyA9IGJ1czsKICB9CgogIC8qKgogICAqIGdldCB0aGUgVVJMIHZhbHVlCiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgdXJsIHZhbHVlOwogICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT2JqZWN0QWxsb2NhdGlvbiwgW3sKICAgIGtleTogJ2NyZWF0ZScsCgoKICAgIC8qKgogICAgICogQXNrIGZvciBjcmVhdGlvbiBvZiBhIG51bWJlciBvZiBPYmplY3QgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS4KICAgICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuCiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdAogICAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0VVJMPn0gIEEgbGlzdCBvZiBPYmplY3RVUkwncwogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBPYmplY3RBbGxvY2F0aW9uTWFuYWdlciBjb21wb25lbnQKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IHNjaGVtZTogc2NoZW1lLCB2YWx1ZTogeyBudW1iZXI6IG51bWJlciB9IH0KICAgICAgfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkudmFsdWUuYWxsb2NhdGVkKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd1cmwnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl91cmw7CiAgICB9CiAgfV0pOwogIHJldHVybiBPYmplY3RBbGxvY2F0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBPYmplY3RBbGxvY2F0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MzA1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjMwNywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjozMDh9XSw0MTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9TdWJzY3JpcHRpb24gPSByZXF1aXJlKCcuL1N1YnNjcmlwdGlvbicpOwoKdmFyIF9TdWJzY3JpcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3Vic2NyaXB0aW9uKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgT2JzZXJ2ZXJPYmplY3QgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gT2JzZXJ2ZXJPYmplY3QocGFyZW50LCB1cmwsIGNoaWxkcmVucykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgT2JzZXJ2ZXJPYmplY3QpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fY2hpbGRyZW5zID0gY2hpbGRyZW5zOwoKICAgIF90aGlzLl9idXMgPSBwYXJlbnQuX2J1czsKICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShPYnNlcnZlck9iamVjdCwgW3sKICAgIGtleTogJ2FkZFN1YnNjcmlwdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldID0gbmV3IF9TdWJzY3JpcHRpb24yLmRlZmF1bHQoX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3JlbW92ZVN1YnNjcmlwdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoaHlwZXJ0eSkuZG9tYWluOwogICAgICB2YXIgb2JqVVJMU3Vic2NyaXB0aW9uID0gX3RoaXMuX3VybCArICcvc3Vic2NyaXB0aW9uJzsKCiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTsKICAgICAgaWYgKHN1YnNjcmlwdGlvbikgewogICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlVW5TdWJzY3JpYmUKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbiwKICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwgfQogICAgICAgIH0pOwoKICAgICAgICAvL1RPRE86IHNob3VsZCBJIHdhaXQgZm9yIHJlc3BvbnNlIGJlZm9yZSB1bnN1YnNjcmliZSBvbiBtc2ctbm9kZQogICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJywKICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH0KICAgICAgICB9KTsKCiAgICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBPYnNlcnZlck9iamVjdDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gT2JzZXJ2ZXJPYmplY3Q7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL3V0aWxzL3V0aWxzIjo0MTYsIi4vU3Vic2NyaXB0aW9uIjo0MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDQxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTsKCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJzY3JpcHRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZXBvcnRlck9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZXBvcnRlck9iamVjdChwYXJlbnQsIG93bmVyLCB1cmwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlcG9ydGVyT2JqZWN0KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7CiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjsKICAgIF90aGlzLl91cmwgPSB1cmw7CgogICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzOwoKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkob3duZXIpLmRvbWFpbjsKICAgIF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7CgogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTsKICAgIF90aGlzLl9jaGlsZHJlbnMgPSBbXTsKICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOwoKICAgIF90aGlzLl9mb3J3YXJkcyA9IHt9OwoKICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUmVwb3J0ZXJPYmplY3QsIFt7CiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGxvY2F0ZUxpc3RlbmVycygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vYWRkIHN1YnNjcmlwdGlvbiBsaXN0ZW5lci4uLgogICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIGNvbnNvbGUubG9nKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCArICctUkNWOiAnLCBtc2cpOwogICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsKICAgICAgICAgIGNhc2UgJ3N1YnNjcmliZSc6CiAgICAgICAgICAgIF90aGlzLl9vblJlbW90ZVN1YnNjcmliZShtc2cpO2JyZWFrOwogICAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOgogICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVVblN1YnNjcmliZShtc2cpO2JyZWFrOwogICAgICAgICAgY2FzZSAncmVzcG9uc2UnOgogICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVSZXNwb25zZShtc2cpO2JyZWFrOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICB2YXIgY2hhbmdlVVJMID0gX3RoaXMuX3VybCArICcvY2hhbmdlcyc7CiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGFuZ2VzPwogICAgICAgIGNvbnNvbGUubG9nKCdTeW5jaGVyTWFuYWdlci0nICsgY2hhbmdlVVJMICsgJy1SQ1Y6ICcsIG1zZyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19yZWxlYXNlTGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVsZWFzZUxpc3RlbmVycygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25MaXN0ZW5lci5yZW1vdmUoKTsKCiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKTsKCiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjbCkgewogICAgICAgIGNsLnJlbW92ZSgpOwogICAgICB9KTsKCiAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoX3RoaXMuX2ZvcndhcmRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfdGhpcy5mb3J3YXJkVW5TdWJzY3JpYmUoa2V5KTsKICAgICAgfSk7CgogICAgICAvL3JlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucwogICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9zdWJzY3JpcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1trZXldLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgZm9yd2FyZGVkIHRvIHRoZSByZXBvcnRlciBvYmplY3QKICAgICAqIEBwYXJhbSAge3N0cmluZ30gYWRkcmVzcyAtIFVSTCB0byByZWdpc3RlciB0aGUgbGlzdGVuZXJzCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm4gUHJvbWlzZSBPSyBvciBlcnJvcgogICAgICovCgogIH0sIHsKICAgIGtleTogJ2ZvcndhcmRTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmRTdWJzY3JpYmUoYWRkcmVzc2VzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgIHZhciBub2RlU3Vic2NyaWJlTXNnID0gewogICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJywKICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogYWRkcmVzc2VzLCBzb3VyY2U6IF90aGlzLl9vd25lciB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2ZvcndhcmQtc3Vic2NyaWJlLXJlc3BvbnNlKHJlcG9ydGVyKTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBuZXdGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKF90aGlzLl91cmwsIF90aGlzLl9vd25lcik7CiAgICAgICAgICAgIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzZXNbMF1dID0gbmV3Rm9yd2FyZDsKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFVuUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgcmVtb3ZlZCBmcm9tIGZvcndhcmQKICAgICAqIEBwYXJhbSAge3N0cmluZ30gYWRkcmVzcyAtIFVSTCB0byB1bi1yZWdpc3RlciB0aGUgbGlzdGVuZXJzCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZm9yd2FyZFVuU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkVW5TdWJzY3JpYmUoYWRkcmVzcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdLnJlbW92ZSgpOwogICAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdOwoKICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICB2YXIgbm9kZVVuU3Vic2NyaWJlTXNnID0gewogICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLAogICAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBbYWRkcmVzc10sIHNvdXJjZTogX3RoaXMuX293bmVyIH0KICAgICAgfTsKCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVVuU3Vic2NyaWJlTXNnKTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgYSBsaXN0IG9mIGNoaWxkcmVucy4gUHVibGljIGNoYW5uZWxzIHVzZWQgdG8gdHJhbnNtaXQgbWVzc2FnZXMuCiAgICAgKiBAcGFyYW0gIHtzdHJpbmdbXX0gY2hpbGRyZW5zIC0gY2hhbm5lbHMgdG8gcmVnaXN0ZXIKICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYWRkQ2hpbGRyZW5zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDaGlsZHJlbnMoY2hpbGRyZW5zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAoY2hpbGRyZW5zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGNoaWxkQmFzZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoaWxkcmVuLyc7CiAgICAgICAgX3RoaXMuX2NoaWxkcmVucy5wdXNoKGNoaWxkcmVucyk7CgogICAgICAgIC8qCiAgICAgICAgX3RoaXMuX2NoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4gewogICAgICAgICAgbGV0IGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsKICAgICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpOwogICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpOwogICAgICAgIH0pOyovCgogICAgICAgIHZhciBzdWJzY3JpcHRpb25zID0gW107CiAgICAgICAgY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICAgIHZhciBub2RlU3Vic2NyaWJlTXNnID0gewogICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLAogICAgICAgICAgYm9keTogeyBzdWJzY3JpYmU6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogX3RoaXMuX293bmVyIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKHJlcG9ydGVyKTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CgogICAgICAgICAgICAvL2FkZCBjaGlsZHJlbiBsaXN0ZW5lcnMgb24gbG9jYWwgLi4uCiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRVUkwpIHsKICAgICAgICAgICAgICB2YXIgY2hpbGRMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hpbGRVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hpbGRyZW5zPwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGlsZFVSTCArICctUkNWOiAnLCBtc2cpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkTGlzdGVuZXIpOwoKICAgICAgICAgICAgICB2YXIgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRVUkwsIF90aGlzLl9vd25lcik7CiAgICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGVsZXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKF90aGlzLl9vd25lcikuZG9tYWluOwoKICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IGRpcmVjdGx5IHRvIGFsbCBzdWJzY3JpYmVycyBvZiB0aGUgcmVwb3J0ZXIKICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgdG86IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnCiAgICAgIH0pOwoKICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBPYmplY3RBbGxvY2F0aW9uTWFuYWdlciBjb21wb25lbnQKICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9CiAgICAgIH0pOwoKICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgZGVsZXRlIF90aGlzLl9wYXJlbnQuX3JlcG9ydGVyc1tfdGhpcy5fdXJsXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfb25SZW1vdGVSZXNwb25zZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVtb3RlUmVzcG9uc2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBfdGhpcy5fdXJsLAogICAgICAgIGJvZHk6IHsgY29kZTogbXNnLmJvZHkuY29kZSwgc291cmNlOiBtc2cuZnJvbSB9CiAgICAgIH0pOwogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFN5bmNoZXIgLT4gc3Vic2NyaWJlCgogIH0sIHsKICAgIGtleTogJ19vblJlbW90ZVN1YnNjcmliZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVtb3RlU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7CgogICAgICAvL3ZhbGlkYXRlIGlmIHN1YnNjcmlwdGlvbiBhbHJlYWR5IGV4aXN0cz8KICAgICAgaWYgKF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7CiAgICAgICAgdmFyIGVycm9yTXNnID0gewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgIGJvZHk6IHsgY29kZTogNTAwLCBkZXNjOiAnU3Vic2NyaXB0aW9uIGZvciAoJyArIF90aGlzLl91cmwgKyAnIDogJyArIGh5cGVydHlVUkwgKyAnKSBhbHJlYWR5IGV4aXN0cyEnIH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGVycm9yTXNnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vYXNrIHRvIHN1YnNjcmliZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpCiAgICAgIC8vVE9ETzogZ2V0IG1vZGUgZnJvbSBvYmplY3QhCiAgICAgIHZhciBtb2RlID0gJ3N1Yi9wdWInOwoKICAgICAgaWYgKG1vZGUgPT09ICdzdWIvcHViJykgewogICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBsb2NhbCBoeXBlcnR5IGFkZHJlc3MgU3luY2hlciAtPiBfb25Gb3J3YXJkCiAgICAgICAgdmFyIGZvcndhcmRNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnZm9yd2FyZCcsIGZyb206IF90aGlzLl91cmwsIHRvOiBfdGhpcy5fb3duZXIsCiAgICAgICAgICBib2R5OiB7IHR5cGU6IG1zZy50eXBlLCBmcm9tOiBoeXBlcnR5VVJMLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGZvcndhcmRNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2ZvcndhcmQtcmVwbHk6ICcsIHJlcGx5KTsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSA9IG5ldyBfU3Vic2NyaXB0aW9uMi5kZWZhdWx0KF90aGlzLl9idXMsIF90aGlzLl9vd25lciwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgdHJ1ZSk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb24KCiAgfSwgewogICAga2V5OiAnX29uUmVtb3RlVW5TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7CgogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHsKICAgICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CgogICAgICAgIC8vVE9ETzogc2VuZCB1bi1zdWJzY3JpYmUgbWVzc2FnZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpCiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFJlcG9ydGVyT2JqZWN0Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSZXBvcnRlck9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQxNiwiLi9TdWJzY3JpcHRpb24iOjQxMiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjozMDMsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjozMDUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDQxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGJ1cywgb3duZXIsIHVybCwgY2hpbGRyZW5zLCBpc1JlcG9ydGVyKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdWJzY3JpcHRpb24pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICB2YXIgY2hpbGRCYXNlVVJMID0gdXJsICsgJy9jaGlsZHJlbi8nOwogICAgdmFyIGNoYW5nZVVSTCA9IHVybCArICcvY2hhbmdlcyc7CgogICAgLy9wcm9jZXNzIGRlbGV0ZSBtZXNzYWdlCiAgICBfdGhpcy5fZGVsZXRlTGlzdGVuZXIgPSBidXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgIGlmIChtc2cudHlwZSA9PT0gJ2RlbGV0ZScpIHsKICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uLURFTEVURTogJywgbXNnKTsKCiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIGFsbCBzdWJzY3JpYmVycwogICAgICAgIHZhciBkZWxldGVNZXNzYWdlVG9IeXBlcnR5ID0gewogICAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IG1zZy5mcm9tLCB0bzogb3duZXIsCiAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiB1cmwgfQogICAgICAgIH07CgogICAgICAgIC8vc2VuZCBkZWxldGUgdG8gaHlwZXJ0eQogICAgICAgIGJ1cy5wb3N0TWVzc2FnZShkZWxldGVNZXNzYWdlVG9IeXBlcnR5LCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFLVJFUExZOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgLy9hZGQgY2hhbmdlIHB1Ymxpc2ggYWRkcmVzcyBvciBmb3J3YXJkCiAgICBpZiAoaXNSZXBvcnRlcikgewogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBidXMuYWRkUHVibGlzaChjaGFuZ2VVUkwpOwogICAgfSBlbHNlIHsKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQoY2hhbmdlVVJMLCBvd25lcik7CiAgICB9CgogICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107CiAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgdmFyIGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsKCiAgICAgIC8vYWRkIGNoaWxkcmVuIHB1Ymxpc2ggYWRkcmVzcwogICAgICB2YXIgY2hpbGRyZW5Gb3J3YXJkID0gYnVzLmFkZFB1Ymxpc2goY2hpbGRJZCk7CiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkcmVuRm9yd2FyZCk7CgogICAgICAvL2FkZCBzZWxmIGZvcndhcmQgaWYgYW4gb2JzZXJ2ZXIKICAgICAgaWYgKCFpc1JlcG9ydGVyKSB7CiAgICAgICAgdmFyIHNlbGZGb3J3YXJkID0gYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpOwogICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTsKICAgICAgfQogICAgfSk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTdWJzY3JpcHRpb24sIFt7CiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbGVhc2VMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZGVsZXRlTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZm9yd2FyZCkgewogICAgICAgIGZvcndhcmQucmVtb3ZlKCk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gU3Vic2NyaXB0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBTdWJzY3JpcHRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MzA3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjMwOH1dLDQxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCnZhciBfT2JqZWN0QWxsb2NhdGlvbiA9IHJlcXVpcmUoJy4vT2JqZWN0QWxsb2NhdGlvbicpOwoKdmFyIF9PYmplY3RBbGxvY2F0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX09iamVjdEFsbG9jYXRpb24pOwoKdmFyIF9SZXBvcnRlck9iamVjdCA9IHJlcXVpcmUoJy4vUmVwb3J0ZXJPYmplY3QnKTsKCnZhciBfUmVwb3J0ZXJPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVwb3J0ZXJPYmplY3QpOwoKdmFyIF9PYnNlcnZlck9iamVjdCA9IHJlcXVpcmUoJy4vT2JzZXJ2ZXJPYmplY3QnKTsKCnZhciBfT2JzZXJ2ZXJPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JzZXJ2ZXJPYmplY3QpOwoKdmFyIF90diA9IHJlcXVpcmUoJy4uL3V0aWxzL3R2NCcpOwoKdmFyIF90djIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90dik7Cgp2YXIgX01lc3NhZ2VGYWN0b3J5ID0gcmVxdWlyZSgnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeScpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgogKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiAqIENvcmUgU3luY3Jvbml6YXRpb24gc3lzdGVtLgogKi8KLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgU3luY2hlck1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHJpdmF0ZQogIF91cmw6IFVSTAogIF9idXM6IE1pbmlCdXMKICBfcmVnaXN0cnk6IFJlZ2lzdHJ5CiAgX2FsbG9jYXRvcjogT2JqZWN0QWxsb2NhdGlvbgogICBfcmVwb3J0ZXJzOiB7IE9iamVjdFVSTDogUmVwb3J0ZXJPYmplY3QgfQogIF9vYnNlcnZlcnM6IHsgT2JqZWN0VVJMOiBPYnNlcnZlck9iamVjdCB9CiAgKi8KCiAgZnVuY3Rpb24gU3luY2hlck1hbmFnZXIocnVudGltZVVSTCwgYnVzLCByZWdpc3RyeSwgY2F0YWxvZywgYWxsb2NhdG9yKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jaGVyTWFuYWdlcik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fYnVzID0gYnVzOwogICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgICBfdGhpcy5fY2F0YWxvZyA9IGNhdGFsb2c7CgogICAgLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lPwogICAgX3RoaXMuX3VybCA9IHJ1bnRpbWVVUkwgKyAnL3NtJzsKICAgIF90aGlzLl9vYmplY3RVUkwgPSBydW50aW1lVVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbic7CgogICAgX3RoaXMuX3JlcG9ydGVycyA9IHt9OwogICAgX3RoaXMuX29ic2VydmVycyA9IHt9OwoKICAgIC8vVE9ETzogdGhpcyBzaG91bGQgbm90IGJlIGhhcmRjb2RlZCEKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocnVudGltZVVSTCkuZG9tYWluOwoKICAgIF90aGlzLl9tZiA9IG5ldyBfTWVzc2FnZUZhY3RvcnkuTWVzc2FnZUZhY3RvcnkoZmFsc2UsIHt9KTsKCiAgICBpZiAoYWxsb2NhdG9yKSB7CiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBhbGxvY2F0b3I7CiAgICB9IGVsc2UgewogICAgICBfdGhpcy5fYWxsb2NhdG9yID0gbmV3IF9PYmplY3RBbGxvY2F0aW9uMi5kZWZhdWx0KF90aGlzLl9vYmplY3RVUkwsIGJ1cyk7CiAgICB9CgogICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTsKICAgICAgc3dpdGNoIChtc2cudHlwZSkgewogICAgICAgIGNhc2UgJ2NyZWF0ZSc6CiAgICAgICAgICBfdGhpcy5fb25DcmVhdGUobXNnKTticmVhazsKICAgICAgICBjYXNlICdkZWxldGUnOgogICAgICAgICAgX3RoaXMuX29uRGVsZXRlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzoKICAgICAgICAgIF90aGlzLl9vbkxvY2FsU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOgogICAgICAgICAgX3RoaXMuX29uTG9jYWxVblN1YnNjcmliZShtc2cpO2JyZWFrOwogICAgICB9CiAgICB9KTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFN5bmNoZXJNYW5hZ2VyLCBbewogICAga2V5OiAnX29uQ3JlYXRlJywKCgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGUKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DcmVhdGUobXNnKSB7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgb3duZXIgPSBtc2cuZnJvbTsKICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtc2cuZnJvbSkuZG9tYWluOwoKICAgICAgaWYgKG1zZy5ib2R5LnJlc291cmNlKSB7CiAgICAgICAgX3RoaXMuX2F1dGhvcmlzZShtc2csIG1zZy5ib2R5LnJlc291cmNlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKHNjaGVtZSwgY2hpbGRyZW4pCiAgICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbihmdW5jdGlvbiAoZGVzY3JpcHRvcikgewoKICAgICAgICB2YXIgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7CiAgICAgICAgdmFyIHNjaGVtZSA9IHByb3BlcnRpZXMuc2NoZW1lID8gcHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQgOiAncmVzb3VyY2UnOwogICAgICAgIHZhciBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdOwoKICAgICAgICBjb25zb2xlLmxvZygnU2NoZW1lOiAnLCBzY2hlbWUpOwoKICAgICAgICAvLyBzY2hlbWEgdmFsaWRhdGlvbgogICAgICAgIGNvbnNvbGUubG9nKCJydW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uIik7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBvYmogPSBtc2cuYm9keS52YWx1ZTsKICAgICAgICAgIHZhciBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTsKICAgICAgICAgIHZhciByZXN1bHQgPSBfdHYyLmRlZmF1bHQudmFsaWRhdGVNdWx0aXBsZShvYmosIHNjaGVtYSk7CgogICAgICAgICAgLy8gY2hlY2sgcmVzdWx0IGFuZCB0aHJvdyBlcnJvciBpZiBpbnZhbGlkCiAgICAgICAgICBpZiAoIXJlc3VsdC52YWxpZCkgewogICAgICAgICAgICBjb25zb2xlLndhcm4oIm9iamVjdCB2YWxpZGF0aW9uIGZhaWxlZCEiLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkocmVzdWx0LmVycm9ycywgbnVsbCwgMikpOwogICAgICAgICAgICBjb25zb2xlLmRlYnVnKCJvYmplY3Q6IiwgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG9iaiwgbnVsbCwgMiksICJcclxuc2NoZW1hOiIsICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShzY2hlbWEsIG51bGwsIDIpKTsKCiAgICAgICAgICAgIC8vIFRPRE8gdGhpcyBzaG91bGQgdGhyb3cgYW4gZXJyb3IKICAgICAgICAgICAgLy90aHJvdyBuZXcgRXJyb3IoIm9iamVjdCB2YWxpZGF0aW9uIGZhaWxlZDoiLCByZXN1bHQuZXJyb3IubWVzc2FnZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJvYmplY3QgdmFsaWRhdGlvbiBzdWNjZWVkZWQiLCByZXN1bHQpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgY29uc29sZS53YXJuKCJFcnJvciBkdXJpbmcgb2JqZWN0IHZhbGlkYXRpb246IiwgZSk7CiAgICAgICAgfQoKICAgICAgICAvL3JlcXVlc3QgYWRkcmVzcyBhbGxvY2F0aW9uIG9mIGEgbmV3IG9iamVjdCBmcm9tIHRoZSBtc2ctbm9kZQogICAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgc2NoZW1lLCAxKS50aGVuKGZ1bmN0aW9uIChhbGxvY2F0ZWQpIHsKICAgICAgICAgIHZhciBvYmpVUkwgPSBhbGxvY2F0ZWRbMF07CgogICAgICAgICAgY29uc29sZS5sb2coJ0FMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTsKCiAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24gVVJMJywgc3Vic2NyaXB0aW9uVVJMKTsKCiAgICAgICAgICAvL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnkKICAgICAgICAgIF90aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS5hdXRob3Jpc2UpLnRoZW4oZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3Qgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQnLCByZXNvbHZlKTsKCiAgICAgICAgICAgIC8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzCiAgICAgICAgICAgIHZhciByZXBvcnRlciA9IG5ldyBfUmVwb3J0ZXJPYmplY3QyLmRlZmF1bHQoX3RoaXMsIG93bmVyLCBvYmpVUkwpOwogICAgICAgICAgICByZXBvcnRlci5mb3J3YXJkU3Vic2NyaWJlKFtvYmpVUkwsIHN1YnNjcmlwdGlvblVSTF0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHJlcG9ydGVyLmFkZENoaWxkcmVucyhjaGlsZHJlbnMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7CgogICAgICAgICAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZQogICAgICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG93bmVyLAogICAgICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgcmVzb3VyY2U6IG9ialVSTCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvL3NlbmQgY3JlYXRlIHRvIGFsbCBvYnNlcnZlcnMsIHJlc3BvbnNlcyB3aWxsIGJlIGRlbGl2ZXIgdG8gdGhlIEh5cGVydHkgb3duZXI/CiAgICAgICAgICAgICAgICAvL3NjaGVkdWxlIGZvciBuZXh0IGN5Y2xlIG5lZWRlZCwgYmVjYXVzZSB0aGUgUmVwb3J0ZXIgc2hvdWxkIGJlIGF2YWlsYWJsZS4KICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAvL3dpbGwgaW52aXRlIG90aGVyIGh5cGVydGllcwogICAgICAgICAgICAgICAgICBfdGhpcy5fYXV0aG9yaXNlKG1zZywgb2JqVVJMKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgLy9GTE9XLU9VVDogZXJyb3IgbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZQogICAgICAgIHZhciByZXNwb25zZU1zZyA9IHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG93bmVyLAogICAgICAgICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6IHJlYXNvbiB9CiAgICAgICAgfTsKCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXNwb25zZU1zZyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19hdXRob3Jpc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hdXRob3Jpc2UobXNnLCBvYmpVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIG9ialN1YnNjcmlwdG9yVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgbXNnLmJvZHkuYXV0aG9yaXNlLmZvckVhY2goZnVuY3Rpb24gKGh5cGVydHlVUkwpIHsKICAgICAgICAvL0ZMT1ctT1VUOiBzZW5kIGludml0ZXMgdG8gbGlzdCBvZiByZW1vdGUgU3luY2hlciAtPiBfb25SZW1vdGVDcmVhdGUgLT4gb25Ob3RpZmljYXRpb24KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBvYmpTdWJzY3JpcHRvclVSTCwgdG86IGh5cGVydHlVUkwsCiAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc291cmNlOiBtc2cuZnJvbSwgdmFsdWU6IG1zZy5ib2R5LnZhbHVlLCBzY2hlbWE6IG1zZy5ib2R5LnNjaGVtYSB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIERhdGFPYmplY3RSZXBvcnRlciAtPiBkZWxldGUKCiAgfSwgewogICAga2V5OiAnX29uRGVsZXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25EZWxldGUobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7CgogICAgICB2YXIgb2JqZWN0ID0gX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdOwogICAgICBpZiAob2JqZWN0KSB7CiAgICAgICAgLy9UT0RPOiBpcyB0aGVyZSBhbnkgcG9saWN5IHZlcmlmaWNhdGlvbiBiZWZvcmUgZGVsZXRlPwogICAgICAgIG9iamVjdC5kZWxldGUoKTsKCiAgICAgICAgLy9UT0RPOiB1bnJlZ2lzdGVyIG9iamVjdD8KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gbG9jYWwgU3luY2hlciAtPiBzdWJzY3JpYmUKCiAgfSwgewogICAga2V5OiAnX29uTG9jYWxTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkxvY2FsU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tOwogICAgICB2YXIgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7CiAgICAgIHZhciBvYmpVUkxTdWJzY3JpcHRpb24gPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7CiAgICAgIHZhciBjaGlsZEJhc2VVUkwgPSBvYmpVUkwgKyAnL2NoaWxkcmVuLyc7CgogICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG9ialVSTCkuZG9tYWluOwoKICAgICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoY2hpbGRyZW4pCiAgICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbihmdW5jdGlvbiAoZGVzY3JpcHRvcikgewogICAgICAgIHZhciBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllczsKICAgICAgICB2YXIgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTsKCiAgICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXMKICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwogICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChvYmpVUkwgKyAnL2NoYW5nZXMnKTsKICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpOwogICAgICAgIH0pOwoKICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byB0aGUgbXNnLW5vZGUsIHJlZ2lzdGVyaW5nIGxpc3RlbmVycyBvbiB0aGUgYnJva2VyCiAgICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc3Vic2NyaWJlOiBzdWJzY3JpcHRpb25zLCBzb3VyY2U6IGh5cGVydHlVUkwgfQogICAgICAgIH07CgogICAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdub2RlLXN1YnNjcmliZS1yZXNwb25zZShvYnNlcnZlcik6ICcsIHJlcGx5KTsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewoKICAgICAgICAgICAgLy9GTE9XLU9VVDogcmVwbHkgd2l0aCBwcm92aXNpb25hbCByZXNwb25zZQogICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMTAwLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlCiAgICAgICAgICAgIHZhciBvYmpTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl91cmwsIHRvOiBvYmpVUkxTdWJzY3JpcHRpb24sCiAgICAgICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbm9kZVN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vc3Vic2NyaWJlIHRvIHJlcG9ydGVyIFNNCiAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uob2JqU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVwb3J0ZXItc3Vic2NyaWJlLXJlc3BvbnNlOiAnLCByZXBseSk7CiAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CgogICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICAgICAgICAgICAgaWYgKCFvYnNlcnZlcikgewogICAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBfT2JzZXJ2ZXJPYmplY3QyLmRlZmF1bHQoX3RoaXMsIG9ialVSTCwgY2hpbGRyZW5zKTsKICAgICAgICAgICAgICAgICAgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy9yZWdpc3RlciBoeXBlcnR5IHN1YnNjcmlwdGlvbgogICAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpOwoKICAgICAgICAgICAgICAgIC8vZm9yd2FyZCB0byBoeXBlcnR5OgogICAgICAgICAgICAgICAgcmVwbHkuaWQgPSBtc2cuaWQ7CiAgICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDsKICAgICAgICAgICAgICAgIHJlcGx5LnRvID0gaHlwZXJ0eVVSTDsKICAgICAgICAgICAgICAgIF90aGlzMi5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZAogICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHkKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25Mb2NhbFVuU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Mb2NhbFVuU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuZnJvbTsKICAgICAgdmFyIG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlOwoKICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICBpZiAob2JzZXJ2ZXIpIHsKICAgICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/CiAgICAgICAgb2JzZXJ2ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpOwoKICAgICAgICAvL1RPRE86IGRlc3Ryb3kgb2JqZWN0IGluIHRoZSByZWdpc3RyeT8KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfQogICAgICAgIH0pOwoKICAgICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/CiAgICAgICAgLy9kZWxldGUgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAndXJsJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdXJsOwogICAgfQogIH1dKTsKICByZXR1cm4gU3luY2hlck1hbmFnZXI7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNoZXJNYW5hZ2VyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy90djQiOjQxNSwiLi4vdXRpbHMvdXRpbHMiOjQxNiwiLi9PYmplY3RBbGxvY2F0aW9uIjo0MDksIi4vT2JzZXJ2ZXJPYmplY3QiOjQxMCwiLi9SZXBvcnRlck9iamVjdCI6NDExLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjI5NywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjozMDcsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MzA4LCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5IjozOTB9XSw0MTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KLyoqCiAqIEV2ZW50RW1pdHRlcgogKiBBbGwgY2xhc3NlcyB3aGljaCBleHRlbmRzIHRoaXMsIGNhbiBoYXZlIGFkZEV2ZW50TGlzdGVuZXIgYW5kIHRyaWdnZXIgZXZlbnRzOwogKi8KCnZhciBFdmVudEVtaXR0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRXZlbnRFbWl0dGVyKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEV2ZW50RW1pdHRlciwgW3sKICAgIGtleTogImFkZEV2ZW50TGlzdGVuZXIiLAoKCiAgICAvKioKICAgICAqIGFkZEV2ZW50TGlzdGVuZXIgbGlzdGVuIGZvciBhbiBldmVudFR5cGUKICAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICBldmVudFR5cGUgLSBsaXN0ZW5pbmcgZm9yIHRoaXMgdHlwZSBvZiBldmVudAogICAgICogQHBhcmFtICB7RnVuY3Rpb259ICAgICAgIGNiICAgICAgICAtIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXQgaXMgaW52b2tlZAogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNiKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzW2V2ZW50VHlwZV0gPSBjYjsKICAgIH0KCiAgICAvKioKICAgICAqIEludm9rZSB0aGUgZXZlbnRUeXBlCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHdpbGwgYmUgaW52b2tlZAogICAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbXMgLSBwYXJhbWV0ZXJzIHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBhZGRFdmVudExpc3RlbmVyCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAidHJpZ2dlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcihldmVudFR5cGUsIHBhcmFtcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKF90aGlzW2V2ZW50VHlwZV0pIHsKICAgICAgICBfdGhpc1tldmVudFR5cGVdKHBhcmFtcyk7CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIEV2ZW50RW1pdHRlcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRFbWl0dGVyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjMwNywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjozMDh9XSw0MTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Jyk7Cgp2YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTsKCnZhciBfaXNGcm96ZW4gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2lzLWZyb3plbicpOwoKdmFyIF9pc0Zyb3plbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0Zyb3plbik7Cgp2YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlJyk7Cgp2YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpOwoKdmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7Cgp2YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTsKCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKgogQXV0aG9yOiBHZXJhaW50IEx1ZmYgYW5kIG90aGVycwogWWVhcjogMjAxMwoKIFRoaXMgY29kZSBpcyByZWxlYXNlZCBpbnRvIHRoZSAicHVibGljIGRvbWFpbiIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS4KCiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBtYWtlIGFuIGltcHJvdmVtZW50LCBpdCB3b3VsZCBiZSBjb3VydGVvdXMgdG8gbGV0IHRoZSBhdXRob3Iga25vdywgYnV0IGl0IGlzIG5vdCBjb21wdWxzb3J5LgogKi8KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXM/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRk9iamVjdCUyRmtleXMKaWYgKCFfa2V5czIuZGVmYXVsdCkgewogICAgT2JqZWN0LmtleXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSwKICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAheyB0b1N0cmluZzogbnVsbCB9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLAogICAgICAgICAgICBkb250RW51bXMgPSBbJ3RvU3RyaW5nJywgJ3RvTG9jYWxlU3RyaW5nJywgJ3ZhbHVlT2YnLCAnaGFzT3duUHJvcGVydHknLCAnaXNQcm90b3R5cGVPZicsICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICdjb25zdHJ1Y3RvciddLAogICAgICAgICAgICBkb250RW51bXNMZW5ndGggPSBkb250RW51bXMubGVuZ3RoOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgICBpZiAoKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkob2JqKSkgIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCcpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikgewogICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9udEVudW1zTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGRvbnRFbnVtc1tpXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9OwogICAgfSgpOwp9Ci8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGUKaWYgKCFfY3JlYXRlMi5kZWZhdWx0KSB7CiAgICBPYmplY3QuY3JlYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGZ1bmN0aW9uIEYoKSB7fQoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG8pIHsKICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0LmNyZWF0ZSBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBGLnByb3RvdHlwZSA9IG87CiAgICAgICAgICAgIHJldHVybiBuZXcgRigpOwogICAgICAgIH07CiAgICB9KCk7Cn0KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpc0FycmF5CmlmICghQXJyYXkuaXNBcnJheSkgewogICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uICh2QXJnKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gIltvYmplY3QgQXJyYXldIjsKICAgIH07Cn0KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaW5kZXhPZj9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpbmRleE9mCmlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHsKICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLykgewogICAgICAgIGlmICh0aGlzID09PSBudWxsKSB7CiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTsKICAgICAgICB9CiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7CiAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwOwoKICAgICAgICBpZiAobGVuID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICAgICAgdmFyIG4gPSAwOwogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7CiAgICAgICAgICAgIGlmIChuICE9PSBuKSB7CiAgICAgICAgICAgICAgICAvLyBzaG9ydGN1dCBmb3IgdmVyaWZ5aW5nIGlmIGl0J3MgTmFOCiAgICAgICAgICAgICAgICBuID0gMDsKICAgICAgICAgICAgfSBlbHNlIGlmIChuICE9PSAwICYmIG4gIT09IEluZmluaXR5ICYmIG4gIT09IC1JbmZpbml0eSkgewogICAgICAgICAgICAgICAgbiA9IChuID4gMCB8fCAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobiA+PSBsZW4pIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICB2YXIgayA9IG4gPj0gMCA/IG4gOiBNYXRoLm1heChsZW4gLSBNYXRoLmFicyhuKSwgMCk7CiAgICAgICAgZm9yICg7IGsgPCBsZW47IGsrKykgewogICAgICAgICAgICBpZiAoayBpbiB0ICYmIHRba10gPT09IHNlYXJjaEVsZW1lbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBrOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAtMTsKICAgIH07Cn0KCi8vIEdydW5nZXkgT2JqZWN0LmlzRnJvemVuIGhhY2sKaWYgKCFfaXNGcm96ZW4yLmRlZmF1bHQpIHsKICAgIE9iamVjdC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmopIHsKICAgICAgICB2YXIga2V5ID0gInR2NF90ZXN0X2Zyb3plbl9rZXkiOwogICAgICAgIHdoaWxlIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgewogICAgICAgICAgICBrZXkgKz0gTWF0aC5yYW5kb20oKTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgb2JqW2tleV0gPSB0cnVlOwogICAgICAgICAgICBkZWxldGUgb2JqW2tleV07CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH07Cn0KLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXJhaW50bHVmZi91cmktdGVtcGxhdGVzLCBidXQgd2l0aCBhbGwgdGhlIGRlLXN1YnN0aXR1dGlvbiBzdHVmZiByZW1vdmVkCgp2YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7CiAgICAiKyI6IHRydWUsCiAgICAiIyI6IHRydWUsCiAgICAiLiI6IHRydWUsCiAgICAiLyI6IHRydWUsCiAgICAiOyI6IHRydWUsCiAgICAiPyI6IHRydWUsCiAgICAiJiI6IHRydWUKfTsKdmFyIHVyaVRlbXBsYXRlU3VmZmljZXMgPSB7CiAgICAiKiI6IHRydWUKfTsKCmZ1bmN0aW9uIG5vdFJlYWxseVBlcmNlbnRFbmNvZGUoc3RyaW5nKSB7CiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cmluZykucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLCBmdW5jdGlvbiAoZG91YmxlRW5jb2RlZCkgewogICAgICAgIHJldHVybiAiJSIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTsKICAgIH0pOwp9CgpmdW5jdGlvbiB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKSB7CiAgICB2YXIgbW9kaWZpZXIgPSAiIjsKICAgIGlmICh1cmlUZW1wbGF0ZUdsb2JhbE1vZGlmaWVyc1tzcGVjLmNoYXJBdCgwKV0pIHsKICAgICAgICBtb2RpZmllciA9IHNwZWMuY2hhckF0KDApOwogICAgICAgIHNwZWMgPSBzcGVjLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHZhciBzZXBhcmF0b3IgPSAiIjsKICAgIHZhciBwcmVmaXggPSAiIjsKICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlOwogICAgdmFyIHNob3dWYXJpYWJsZXMgPSBmYWxzZTsKICAgIHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTsKICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7CiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAiLiIpIHsKICAgICAgICBwcmVmaXggPSAiLiI7CiAgICAgICAgc2VwYXJhdG9yID0gIi4iOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gIi8iKSB7CiAgICAgICAgcHJlZml4ID0gIi8iOwogICAgICAgIHNlcGFyYXRvciA9ICIvIjsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcjJykgewogICAgICAgIHByZWZpeCA9ICIjIjsKICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc7JykgewogICAgICAgIHByZWZpeCA9ICI7IjsKICAgICAgICBzZXBhcmF0b3IgPSAiOyI7CiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7CiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc/JykgewogICAgICAgIHByZWZpeCA9ICI/IjsKICAgICAgICBzZXBhcmF0b3IgPSAiJiI7CiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnJicpIHsKICAgICAgICBwcmVmaXggPSAiJiI7CiAgICAgICAgc2VwYXJhdG9yID0gIiYiOwogICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlOwogICAgfQoKICAgIHZhciB2YXJOYW1lcyA9IFtdOwogICAgdmFyIHZhckxpc3QgPSBzcGVjLnNwbGl0KCIsIik7CiAgICB2YXIgdmFyU3BlY3MgPSBbXTsKICAgIHZhciB2YXJTcGVjTWFwID0ge307CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhckxpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdmFyTmFtZSA9IHZhckxpc3RbaV07CiAgICAgICAgdmFyIHRydW5jYXRlID0gbnVsbDsKICAgICAgICBpZiAodmFyTmFtZS5pbmRleE9mKCI6IikgIT09IC0xKSB7CiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHZhck5hbWUuc3BsaXQoIjoiKTsKICAgICAgICAgICAgdmFyTmFtZSA9IHBhcnRzWzBdOwogICAgICAgICAgICB0cnVuY2F0ZSA9IHBhcnNlSW50KHBhcnRzWzFdLCAxMCk7CiAgICAgICAgfQogICAgICAgIHZhciBzdWZmaWNlcyA9IHt9OwogICAgICAgIHdoaWxlICh1cmlUZW1wbGF0ZVN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldKSB7CiAgICAgICAgICAgIHN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldID0gdHJ1ZTsKICAgICAgICAgICAgdmFyTmFtZSA9IHZhck5hbWUuc3Vic3RyaW5nKDAsIHZhck5hbWUubGVuZ3RoIC0gMSk7CiAgICAgICAgfQogICAgICAgIHZhciB2YXJTcGVjID0gewogICAgICAgICAgICB0cnVuY2F0ZTogdHJ1bmNhdGUsCiAgICAgICAgICAgIG5hbWU6IHZhck5hbWUsCiAgICAgICAgICAgIHN1ZmZpY2VzOiBzdWZmaWNlcwogICAgICAgIH07CiAgICAgICAgdmFyU3BlY3MucHVzaCh2YXJTcGVjKTsKICAgICAgICB2YXJTcGVjTWFwW3Zhck5hbWVdID0gdmFyU3BlYzsKICAgICAgICB2YXJOYW1lcy5wdXNoKHZhck5hbWUpOwogICAgfQogICAgdmFyIHN1YkZ1bmN0aW9uID0gZnVuY3Rpb24gc3ViRnVuY3Rpb24odmFsdWVGdW5jdGlvbikgewogICAgICAgIHZhciByZXN1bHQgPSAiIjsKICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJTcGVjcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgdmFyU3BlYyA9IHZhclNwZWNzW2ldOwogICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUZ1bmN0aW9uKHZhclNwZWMubmFtZSk7CiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCB8fCAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHZhbHVlKSkgPT09ICdvYmplY3QnICYmICgwLCBfa2V5czIuZGVmYXVsdCkodmFsdWUpLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgc3RhcnRJbmRleCsrOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXgpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwcmVmaXg7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2VwYXJhdG9yIHx8ICIsIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArICI9IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IHNlcGFyYXRvciB8fCAiLCIgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnN1ZmZpY2VzWycqJ10gJiYgc2hvd1ZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArICI9IjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVbal0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzICYmICF2YXJTcGVjLnN1ZmZpY2VzWycqJ10pIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgIj0iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IHNlcGFyYXRvciB8fCAiLCIgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgIiUyMSIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZShrZXkpOwogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAnPScgOiAiLCI7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtrZXldKS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVba2V5XSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmltRW1wdHlTdHJpbmcgfHwgdmFsdWUgIT09ICIiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAiPSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHZhclNwZWMudHJ1bmNhdGUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhclNwZWMudHJ1bmNhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvIS9nLCAiJTIxIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIHN1YkZ1bmN0aW9uLnZhck5hbWVzID0gdmFyTmFtZXM7CiAgICByZXR1cm4gewogICAgICAgIHByZWZpeDogcHJlZml4LAogICAgICAgIHN1YnN0aXR1dGlvbjogc3ViRnVuY3Rpb24KICAgIH07Cn0KCmZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7CiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7CiAgICAgICAgcmV0dXJuIG5ldyBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSk7CiAgICB9CiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdCgieyIpOwogICAgdmFyIHRleHRQYXJ0cyA9IFtwYXJ0cy5zaGlmdCgpXTsKICAgIHZhciBwcmVmaXhlcyA9IFtdOwogICAgdmFyIHN1YnN0aXR1dGlvbnMgPSBbXTsKICAgIHZhciB2YXJOYW1lcyA9IFtdOwogICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgcGFydCA9IHBhcnRzLnNoaWZ0KCk7CiAgICAgICAgdmFyIHNwZWMgPSBwYXJ0LnNwbGl0KCJ9IilbMF07CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHBhcnQuc3Vic3RyaW5nKHNwZWMubGVuZ3RoICsgMSk7CiAgICAgICAgdmFyIGZ1bmNzID0gdXJpVGVtcGxhdGVTdWJzdGl0dXRpb24oc3BlYyk7CiAgICAgICAgc3Vic3RpdHV0aW9ucy5wdXNoKGZ1bmNzLnN1YnN0aXR1dGlvbik7CiAgICAgICAgcHJlZml4ZXMucHVzaChmdW5jcy5wcmVmaXgpOwogICAgICAgIHRleHRQYXJ0cy5wdXNoKHJlbWFpbmRlcik7CiAgICAgICAgdmFyTmFtZXMgPSB2YXJOYW1lcy5jb25jYXQoZnVuY3Muc3Vic3RpdHV0aW9uLnZhck5hbWVzKTsKICAgIH0KICAgIHRoaXMuZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZUZ1bmN0aW9uKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9IHRleHRQYXJ0c1swXTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbnNbaV07CiAgICAgICAgICAgIHJlc3VsdCArPSBzdWJzdGl0dXRpb24odmFsdWVGdW5jdGlvbik7CiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0UGFydHNbaSArIDFdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKICAgIHRoaXMudmFyTmFtZXMgPSB2YXJOYW1lczsKICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTsKfQoKVXJpVGVtcGxhdGUucHJvdG90eXBlID0gewogICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlOwogICAgfSwKICAgIGZpbGxGcm9tT2JqZWN0OiBmdW5jdGlvbiBmaWxsRnJvbU9iamVjdChvYmopIHsKICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBvYmpbdmFyTmFtZV07CiAgICAgICAgfSk7CiAgICB9Cn07CnZhciBWYWxpZGF0b3JDb250ZXh0ID0gZnVuY3Rpb24gVmFsaWRhdG9yQ29udGV4dChwYXJlbnQsIGNvbGxlY3RNdWx0aXBsZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgIHRoaXMubWlzc2luZyA9IFtdOwogICAgdGhpcy5taXNzaW5nTWFwID0ge307CiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnMgPSBwYXJlbnQgPyAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkocGFyZW50LmZvcm1hdFZhbGlkYXRvcnMpIDoge307CiAgICB0aGlzLnNjaGVtYXMgPSBwYXJlbnQgPyAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkocGFyZW50LnNjaGVtYXMpIDoge307CiAgICB0aGlzLmNvbGxlY3RNdWx0aXBsZSA9IGNvbGxlY3RNdWx0aXBsZTsKICAgIHRoaXMuZXJyb3JzID0gW107CiAgICB0aGlzLmhhbmRsZUVycm9yID0gY29sbGVjdE11bHRpcGxlID8gdGhpcy5jb2xsZWN0RXJyb3IgOiB0aGlzLnJldHVybkVycm9yOwogICAgaWYgKGNoZWNrUmVjdXJzaXZlKSB7CiAgICAgICAgdGhpcy5jaGVja1JlY3Vyc2l2ZSA9IHRydWU7CiAgICAgICAgdGhpcy5zY2FubmVkID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcyA9IFtdOwogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnMgPSBbXTsKICAgICAgICB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkgPSAndHY0X3ZhbGlkYXRpb25faWQnOwogICAgICAgIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSA9ICd0djRfdmFsaWRhdGlvbl9lcnJvcnNfaWQnOwogICAgfQogICAgaWYgKHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMgPSB0cnVlOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgfQogICAgdGhpcy5lcnJvclJlcG9ydGVyID0gZXJyb3JSZXBvcnRlciB8fCBkZWZhdWx0RXJyb3JSZXBvcnRlcignZW4nKTsKICAgIGlmICh0eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyID09PSAnc3RyaW5nJykgewogICAgICAgIHRocm93IG5ldyBFcnJvcignZGVidWcnKTsKICAgIH0KICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzID0ge307CiAgICBpZiAocGFyZW50KSB7CiAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmVudC5kZWZpbmVkS2V5d29yZHMpIHsKICAgICAgICAgICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XSA9IHBhcmVudC5kZWZpbmVkS2V5d29yZHNba2V5XS5zbGljZSgwKTsKICAgICAgICB9CiAgICB9Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmRlZmluZUtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCwga2V5d29yZEZ1bmN0aW9uKSB7CiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXSA9IHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdIHx8IFtdOwogICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0ucHVzaChrZXl3b3JkRnVuY3Rpb24pOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzLCBkYXRhLCBzY2hlbWEpIHsKICAgIHZhciBlcnJvciA9IG5ldyBWYWxpZGF0aW9uRXJyb3IoY29kZSwgbWVzc2FnZVBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycyk7CiAgICBlcnJvci5tZXNzYWdlID0gdGhpcy5lcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpOwogICAgcmV0dXJuIGVycm9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXR1cm5FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgewogICAgcmV0dXJuIGVycm9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5jb2xsZWN0RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHsKICAgIGlmIChlcnJvcikgewogICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnByZWZpeEVycm9ycyA9IGZ1bmN0aW9uIChzdGFydEluZGV4LCBkYXRhUGF0aCwgc2NoZW1hUGF0aCkgewogICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0aGlzLmVycm9ycy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMuZXJyb3JzW2ldID0gdGhpcy5lcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUGF0aCwgc2NoZW1hUGF0aCk7CiAgICB9CiAgICByZXR1cm4gdGhpczsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuYmFuVW5rbm93blByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7CiAgICBmb3IgKHZhciB1bmtub3duUGF0aCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlVOS05PV05fUFJPUEVSVFksIHsgcGF0aDogdW5rbm93blBhdGggfSwgdW5rbm93blBhdGgsICIiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0LCB2YWxpZGF0b3IpIHsKICAgIGlmICgodHlwZW9mIGZvcm1hdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShmb3JtYXQpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gZm9ybWF0KSB7CiAgICAgICAgICAgIHRoaXMuYWRkRm9ybWF0KGtleSwgZm9ybWF0W2tleV0pOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgIH0KICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tmb3JtYXRdID0gdmFsaWRhdG9yOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXNvbHZlUmVmcyA9IGZ1bmN0aW9uIChzY2hlbWEsIHVybEhpc3RvcnkpIHsKICAgIGlmIChzY2hlbWFbJyRyZWYnXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdXJsSGlzdG9yeSA9IHVybEhpc3RvcnkgfHwge307CiAgICAgICAgaWYgKHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQ0lSQ1VMQVJfUkVGRVJFTkNFLCB7IHVybHM6ICgwLCBfa2V5czIuZGVmYXVsdCkodXJsSGlzdG9yeSkuam9pbignLCAnKSB9LCAnJywgJycsIG51bGwsIHVuZGVmaW5lZCwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgdXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0gPSB0cnVlOwogICAgICAgIHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYVsnJHJlZiddLCB1cmxIaXN0b3J5KTsKICAgIH0KICAgIHJldHVybiBzY2hlbWE7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHsKICAgIHZhciBzY2hlbWE7CiAgICBpZiAodGhpcy5zY2hlbWFzW3VybF0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdOwogICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7CiAgICB9CiAgICB2YXIgYmFzZVVybCA9IHVybDsKICAgIHZhciBmcmFnbWVudCA9ICIiOwogICAgaWYgKHVybC5pbmRleE9mKCcjJykgIT09IC0xKSB7CiAgICAgICAgZnJhZ21lbnQgPSB1cmwuc3Vic3RyaW5nKHVybC5pbmRleE9mKCIjIikgKyAxKTsKICAgICAgICBiYXNlVXJsID0gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZigiIyIpKTsKICAgIH0KICAgIGlmICgoMCwgX3R5cGVvZjMuZGVmYXVsdCkodGhpcy5zY2hlbWFzW2Jhc2VVcmxdKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbYmFzZVVybF07CiAgICAgICAgdmFyIHBvaW50ZXJQYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGZyYWdtZW50KTsKICAgICAgICBpZiAocG9pbnRlclBhdGggPT09ICIiKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7CiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyUGF0aC5jaGFyQXQoMCkgIT09ICIvIikgewogICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KICAgICAgICB2YXIgcGFydHMgPSBwb2ludGVyUGF0aC5zcGxpdCgiLyIpLnNsaWNlKDEpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHBhcnRzW2ldLnJlcGxhY2UoL34xL2csICIvIikucmVwbGFjZSgvfjAvZywgIn4iKTsKICAgICAgICAgICAgaWYgKHNjaGVtYVtjb21wb25lbnRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdOwogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTsKICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLm1pc3NpbmcucHVzaChiYXNlVXJsKTsKICAgICAgICB0aGlzLm1pc3NpbmdbYmFzZVVybF0gPSBiYXNlVXJsOwogICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7CiAgICB9Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHsKICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpOwogICAgICAgIH0KICAgIH0gZWxzZSBpZiAoc2NoZW1hICYmICh0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHNjaGVtYSkpID09PSAib2JqZWN0IikgewogICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmlkID09PSAic3RyaW5nIikgewogICAgICAgICAgICBpZiAoaXNUcnVzdGVkVXJsKHVybCwgc2NoZW1hLmlkKSkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7CiAgICAgICAgICAgIGlmIChrZXkgIT09ICJlbnVtIikgewogICAgICAgICAgICAgICAgaWYgKCgwLCBfdHlwZW9mMy5kZWZhdWx0KShzY2hlbWFba2V5XSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtrZXldLCB1cmwpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICIkcmVmIikgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmkgPSBnZXREb2N1bWVudFVyaShzY2hlbWFba2V5XSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHVyaSAmJiB0aGlzLnNjaGVtYXNbdXJpXSA9PT0gdW5kZWZpbmVkICYmIHRoaXMubWlzc2luZ01hcFt1cmldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5taXNzaW5nTWFwW3VyaV0gPSB1cmk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRTY2hlbWEgPSBmdW5jdGlvbiAodXJsLCBzY2hlbWEpIHsKICAgIC8vb3ZlcmxvYWQKICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJykgewogICAgICAgIGlmICgodHlwZW9mIHVybCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh1cmwpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHVybC5pZCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgc2NoZW1hID0gdXJsOwogICAgICAgICAgICB1cmwgPSBzY2hlbWEuaWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0KICAgIGlmICh1cmwgPT09IGdldERvY3VtZW50VXJpKHVybCkgKyAiIyIpIHsKICAgICAgICAvLyBSZW1vdmUgZW1wdHkgZnJhZ21lbnQKICAgICAgICB1cmwgPSBnZXREb2N1bWVudFVyaSh1cmwpOwogICAgfQogICAgdGhpcy5zY2hlbWFzW3VybF0gPSBzY2hlbWE7CiAgICBkZWxldGUgdGhpcy5taXNzaW5nTWFwW3VybF07CiAgICBub3JtU2NoZW1hKHNjaGVtYSwgdXJsKTsKICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWEsIHVybCk7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWFNYXAgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgbWFwID0ge307CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zY2hlbWFzKSB7CiAgICAgICAgbWFwW2tleV0gPSB0aGlzLnNjaGVtYXNba2V5XTsKICAgIH0KICAgIHJldHVybiBtYXA7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRTY2hlbWFVcmlzID0gZnVuY3Rpb24gKGZpbHRlclJlZ0V4cCkgewogICAgdmFyIGxpc3QgPSBbXTsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHsKICAgICAgICBpZiAoIWZpbHRlclJlZ0V4cCB8fCBmaWx0ZXJSZWdFeHAudGVzdChrZXkpKSB7CiAgICAgICAgICAgIGxpc3QucHVzaChrZXkpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBsaXN0Owp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0TWlzc2luZ1VyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7CiAgICB2YXIgbGlzdCA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIHRoaXMubWlzc2luZ01hcCkgewogICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHsKICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGxpc3Q7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kcm9wU2NoZW1hcyA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuc2NoZW1hcyA9IHt9OwogICAgdGhpcy5yZXNldCgpOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMubWlzc2luZyA9IFtdOwogICAgdGhpcy5taXNzaW5nTWFwID0ge307CiAgICB0aGlzLmVycm9ycyA9IFtdOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbGwgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBkYXRhUGF0aFBhcnRzLCBzY2hlbWFQYXRoUGFydHMsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIHRvcExldmVsOwogICAgc2NoZW1hID0gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEpOwogICAgaWYgKCFzY2hlbWEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yKSB7CiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChzY2hlbWEpOwogICAgICAgIHJldHVybiBzY2hlbWE7CiAgICB9CgogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBmcm96ZW5JbmRleCwKICAgICAgICBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSBudWxsLAogICAgICAgIHNjYW5uZWRTY2hlbWFzSW5kZXggPSBudWxsOwogICAgaWYgKHRoaXMuY2hlY2tSZWN1cnNpdmUgJiYgZGF0YSAmJiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZGF0YSkpID09PSAnb2JqZWN0JykgewogICAgICAgIHRvcExldmVsID0gIXRoaXMuc2Nhbm5lZC5sZW5ndGg7CiAgICAgICAgaWYgKGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkgewogICAgICAgICAgICB2YXIgc2NoZW1hSW5kZXggPSBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZihzY2hlbWEpOwogICAgICAgICAgICBpZiAoc2NoZW1hSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2NoZW1hSW5kZXhdKTsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICgoMCwgX2lzRnJvemVuMi5kZWZhdWx0KShkYXRhKSkgewogICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpOwogICAgICAgICAgICBpZiAoZnJvemVuSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICB2YXIgZnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5pbmRleE9mKHNjaGVtYSk7CiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bZnJvemVuU2NoZW1hSW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTsKICAgICAgICBpZiAoKDAsIF9pc0Zyb3plbjIuZGVmYXVsdCkoZGF0YSkpIHsKICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ID09PSAtMSkgewogICAgICAgICAgICAgICAgZnJvemVuSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoOwogICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuLnB1c2goZGF0YSk7CiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmxlbmd0aDsKICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHNjaGVtYTsKICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IFtdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICghZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKGRhdGEsIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKGRhdGEsIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSwgewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgIC8vSUUgNy84IHdvcmthcm91bmQKICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0gPSBbXTsKICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDsKICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gc2NoZW1hOwogICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBbXTsKICAgICAgICB9CiAgICB9CgogICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVOdW1lcmljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlRm9ybWF0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwoKICAgIGlmICh0b3BMZXZlbCkgewogICAgICAgIHdoaWxlICh0aGlzLnNjYW5uZWQubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5zY2FubmVkLnBvcCgpOwogICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldOwogICAgICAgIH0KICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107CiAgICB9CgogICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkgewogICAgICAgIHdoaWxlIChkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoIHx8IHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBkYXRhUGFydCA9IGRhdGFQYXRoUGFydHMgJiYgZGF0YVBhdGhQYXJ0cy5sZW5ndGggPyAiIiArIGRhdGFQYXRoUGFydHMucG9wKCkgOiBudWxsOwogICAgICAgICAgICB2YXIgc2NoZW1hUGFydCA9IHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoID8gIiIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsOwogICAgICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IucHJlZml4V2l0aChkYXRhUGFydCwgc2NoZW1hUGFydCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5wcmVmaXhFcnJvcnMoZXJyb3JDb3VudCwgZGF0YVBhcnQsIHNjaGVtYVBhcnQpOwogICAgICAgIH0KICAgIH0KCiAgICBpZiAoc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ICE9PSBudWxsKSB7CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7CiAgICB9IGVsc2UgaWYgKHNjYW5uZWRTY2hlbWFzSW5kZXggIT09IG51bGwpIHsKICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpOwogICAgfQoKICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIHNjaGVtYS5mb3JtYXQgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0pIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0uY2FsbChudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSB9LCAnJywgJy9mb3JtYXQnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfSBlbHNlIGlmIChlcnJvck1lc3NhZ2UgJiYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZXJyb3JNZXNzYWdlKSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZS5tZXNzYWdlIHx8ICI/IiB9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8ICIvZm9ybWF0IiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgZm9yICh2YXIga2V5IGluIHRoaXMuZGVmaW5lZEtleXdvcmRzKSB7CiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfQogICAgICAgIHZhciB2YWxpZGF0aW9uRnVuY3Rpb25zID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbGlkYXRpb25GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGZ1bmMgPSB2YWxpZGF0aW9uRnVuY3Rpb25zW2ldOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYyhkYXRhLCBzY2hlbWFba2V5XSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpOwogICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT00sIHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQKICAgICAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGtleSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICYmICh0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJlc3VsdCkpID09PSAnb2JqZWN0JykgewogICAgICAgICAgICAgICAgdmFyIGNvZGUgPSByZXN1bHQuY29kZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIUVycm9yQ29kZXNbY29kZV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmRlZmluZWQgZXJyb3IgY29kZSAodXNlIGRlZmluZUVycm9yKTogJyArIGNvZGUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjb2RlID0gRXJyb3JDb2Rlc1tjb2RlXTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT007CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZVBhcmFtcyA9ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShyZXN1bHQubWVzc2FnZSkgPT09ICdvYmplY3QnID8gcmVzdWx0Lm1lc3NhZ2UgOiB7CiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2UgfHwgIj8iCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIHNjaGVtYVBhdGggPSByZXN1bHQuc2NoZW1hUGF0aCB8fCAiLyIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cLy9nLCAnfjEnKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpmdW5jdGlvbiByZWN1cnNpdmVDb21wYXJlKEEsIEIpIHsKICAgIGlmIChBID09PSBCKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAoQSAmJiBCICYmICh0eXBlb2YgQSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShBKSkgPT09ICJvYmplY3QiICYmICh0eXBlb2YgQiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShCKSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShBKSkgewogICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtpXSwgQltpXSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIga2V5OwogICAgICAgICAgICBmb3IgKGtleSBpbiBBKSB7CiAgICAgICAgICAgICAgICBpZiAoQltrZXldID09PSB1bmRlZmluZWQgJiYgQVtrZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChrZXkgaW4gQikgewogICAgICAgICAgICAgICAgaWYgKEFba2V5XSA9PT0gdW5kZWZpbmVkICYmIEJba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHsKICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICByZXR1cm4gZmFsc2U7Cn0KClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQmFzaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCAidHlwZSIpOwogICAgfQogICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgInR5cGUiKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVUeXBlID0gZnVuY3Rpb24gdmFsaWRhdGVUeXBlKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHNjaGVtYS50eXBlID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBkYXRhVHlwZSA9IHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpOwogICAgaWYgKGRhdGEgPT09IG51bGwpIHsKICAgICAgICBkYXRhVHlwZSA9ICJudWxsIjsKICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkgewogICAgICAgIGRhdGFUeXBlID0gImFycmF5IjsKICAgIH0KICAgIHZhciBhbGxvd2VkVHlwZXMgPSBzY2hlbWEudHlwZTsKICAgIGlmICghQXJyYXkuaXNBcnJheShhbGxvd2VkVHlwZXMpKSB7CiAgICAgICAgYWxsb3dlZFR5cGVzID0gW2FsbG93ZWRUeXBlc107CiAgICB9CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxvd2VkVHlwZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgdHlwZSA9IGFsbG93ZWRUeXBlc1tpXTsKICAgICAgICBpZiAodHlwZSA9PT0gZGF0YVR5cGUgfHwgdHlwZSA9PT0gImludGVnZXIiICYmIGRhdGFUeXBlID09PSAibnVtYmVyIiAmJiBkYXRhICUgMSA9PT0gMCkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLklOVkFMSURfVFlQRSwgewogICAgICAgIHR5cGU6IGRhdGFUeXBlLAogICAgICAgIGV4cGVjdGVkOiBhbGxvd2VkVHlwZXMuam9pbigiLyIpCiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hWyJlbnVtIl0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWFbImVudW0iXS5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBlbnVtVmFsID0gc2NoZW1hWyJlbnVtIl1baV07CiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5FTlVNX01JU01BVENILCB7IHZhbHVlOiB0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcgPyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZGF0YSkgOiBkYXRhIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKdmFyIENMT1NFX0VOT1VHSF9MT1cgPSBNYXRoLnBvdygyLCAtNTEpOwp2YXIgQ0xPU0VfRU5PVUdIX0hJR0ggPSAxIC0gQ0xPU0VfRU5PVUdIX0xPVzsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIG11bHRpcGxlT2YgPSBzY2hlbWEubXVsdGlwbGVPZiB8fCBzY2hlbWEuZGl2aXNpYmxlQnk7CiAgICBpZiAobXVsdGlwbGVPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICJudW1iZXIiKSB7CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IGRhdGEgLyBtdWx0aXBsZU9mICUgMTsKICAgICAgICBpZiAocmVtYWluZGVyID49IENMT1NFX0VOT1VHSF9MT1cgJiYgcmVtYWluZGVyIDwgQ0xPU0VfRU5PVUdIX0hJR0gpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogbXVsdGlwbGVPZgogICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBkYXRhICE9PSAibnVtYmVyIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKHNjaGVtYS5taW5pbXVtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YSA8IHNjaGVtYS5taW5pbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU0sIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbmltdW0KICAgICAgICAgICAgfSwgJycsICcvbWluaW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgICAgIGlmIChzY2hlbWEuZXhjbHVzaXZlTWluaW11bSAmJiBkYXRhID09PSBzY2hlbWEubWluaW11bSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bQogICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNaW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoc2NoZW1hLm1heGltdW0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhID4gc2NoZW1hLm1heGltdW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bQogICAgICAgICAgICB9LCAnJywgJy9tYXhpbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtICYmIGRhdGEgPT09IHNjaGVtYS5tYXhpbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtCiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOYU4gPSBmdW5jdGlvbiB2YWxpZGF0ZU5hTihkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gIm51bWJlciIpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChpc05hTihkYXRhKSA9PT0gdHJ1ZSB8fCBkYXRhID09PSBJbmZpbml0eSB8fCBkYXRhID09PSAtSW5maW5pdHkpIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9OT1RfQV9OVU1CRVIsIHsgdmFsdWU6IGRhdGEgfSwgJycsICcvdHlwZScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJzdHJpbmciKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAoc2NoZW1hLm1pbkxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkxlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfU0hPUlQsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluTGVuZ3RoCiAgICAgICAgICAgIH0sICcnLCAnL21pbkxlbmd0aCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhMZW5ndGggIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfTEVOR1RIX0xPTkcsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4TGVuZ3RoCiAgICAgICAgICAgIH0sICcnLCAnL21heExlbmd0aCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ1BhdHRlcm4gPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJzdHJpbmciIHx8IHR5cGVvZiBzY2hlbWEucGF0dGVybiAhPT0gInN0cmluZyIgJiYgIShzY2hlbWEucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciByZWdleHA7CiAgICBpZiAoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgICByZWdleHAgPSBzY2hlbWEucGF0dGVybjsKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGJvZHksCiAgICAgICAgICAgIGZsYWdzID0gJyc7CiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFscwogICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTcuOC41CiAgICAgICAgdmFyIGxpdGVyYWwgPSBzY2hlbWEucGF0dGVybi5tYXRjaCgvXlwvKC4rKVwvKFtpbWddKikkLyk7CiAgICAgICAgaWYgKGxpdGVyYWwpIHsKICAgICAgICAgICAgYm9keSA9IGxpdGVyYWxbMV07CiAgICAgICAgICAgIGZsYWdzID0gbGl0ZXJhbFsyXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBib2R5ID0gc2NoZW1hLnBhdHRlcm47CiAgICAgICAgfQogICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoYm9keSwgZmxhZ3MpOwogICAgfQogICAgaWYgKCFyZWdleHAudGVzdChkYXRhKSkgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX1BBVFRFUk4sIHsgcGF0dGVybjogc2NoZW1hLnBhdHRlcm4gfSwgJycsICcvcGF0dGVybicsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXkgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIGVycm9yOwogICAgaWYgKHNjaGVtYS5taW5JdGVtcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9TSE9SVCwgewogICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5JdGVtcwogICAgICAgICAgICB9LCAnJywgJy9taW5JdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhJdGVtcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heEl0ZW1zKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9MT05HLCB7CiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heEl0ZW1zCiAgICAgICAgICAgIH0sICcnLCAnL21heEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEpIHsKICAgIGlmIChzY2hlbWEudW5pcXVlSXRlbXMpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZGF0YS5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YVtpXSwgZGF0YVtqXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfVU5JUVVFLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMTogaSwKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gyOiBqCiAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvdW5pcXVlSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFycmF5SXRlbXMgPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5SXRlbXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEuaXRlbXMgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9yLCBpOwogICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkgewogICAgICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmIChpIDwgc2NoZW1hLml0ZW1zLmxlbmd0aCkgewogICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXNbaV0sIFtpXSwgWyJpdGVtcyIsIGldLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEuYWRkaXRpb25hbEl0ZW1zICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbEl0ZW1zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0FERElUSU9OQUxfSVRFTVMsIHt9LCAnLycgKyBpLCAnL2FkZGl0aW9uYWxJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtpXSwgc2NoZW1hLmFkZGl0aW9uYWxJdGVtcywgW2ldLCBbImFkZGl0aW9uYWxJdGVtcyJdLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXMsIFtpXSwgWyJpdGVtcyJdLCBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBpKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGRhdGEpKSAhPT0gIm9iamVjdCIgfHwgZGF0YSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSkgewogICAgdmFyIGtleXMgPSAoMCwgX2tleXMyLmRlZmF1bHQpKGRhdGEpOwogICAgdmFyIGVycm9yOwogICAgaWYgKHNjaGVtYS5taW5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykgewogICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLCB7CiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzCiAgICAgICAgICAgIH0sICcnLCAnL21pblByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIGlmIChzY2hlbWEubWF4UHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gc2NoZW1hLm1heFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwgewogICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudDoga2V5cy5sZW5ndGgsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4UHJvcGVydGllcwogICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hLnJlcXVpcmVkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldOwogICAgICAgICAgICBpZiAoZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUkVRVUlSRUQsIHsga2V5OiBrZXkgfSwgJycsICcvcmVxdWlyZWQvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIGVycm9yOwogICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsKICAgICAgICB2YXIga2V5UG9pbnRlclBhdGggPSBkYXRhUG9pbnRlclBhdGggKyAiLyIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cLy9nLCAnfjEnKTsKICAgICAgICB2YXIgZm91bmRNYXRjaCA9IGZhbHNlOwogICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0sIFtrZXldLCBbInByb3BlcnRpZXMiLCBrZXldLCBrZXlQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKHBhdHRlcm5LZXkpOwogICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGtleSkpIHsKICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5LZXldLCBba2V5XSwgWyJwYXR0ZXJuUHJvcGVydGllcyIsIHBhdHRlcm5LZXldLCBrZXlQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoIWZvdW5kTWF0Y2gpIHsKICAgICAgICAgICAgaWYgKHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gImJvb2xlYW4iKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUywgeyBrZXk6IGtleSB9LCAnJywgJy9hZGRpdGlvbmFsUHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChrZXksIG51bGwpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcywgW2tleV0sIFsiYWRkaXRpb25hbFByb3BlcnRpZXMiXSwga2V5UG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzICYmICF0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0pIHsKICAgICAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7CiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHZhciBlcnJvcjsKICAgIGlmIChzY2hlbWEuZGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBmb3IgKHZhciBkZXBLZXkgaW4gc2NoZW1hLmRlcGVuZGVuY2llcykgewogICAgICAgICAgICBpZiAoZGF0YVtkZXBLZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIHZhciBkZXAgPSBzY2hlbWEuZGVwZW5kZW5jaWVzW2RlcEtleV07CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlcCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtkZXBdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IGRlcAogICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgImRlcGVuZGVuY2llcyIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZXApKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkS2V5ID0gZGVwW2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtyZXF1aXJlZEtleV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBkZXBLZXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogcmVxdWlyZWRLZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sICcnLCAnLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwgZGVwS2V5KS5wcmVmaXhXaXRoKG51bGwsICJkZXBlbmRlbmNpZXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBkZXAsIFtdLCBbImRlcGVuZGVuY2llcyIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlT25lT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbE9mID0gZnVuY3Rpb24gdmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5hbGxPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3I7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbGxPZi5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYWxsT2ZbaV07CiAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbImFsbE9mIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEuYW55T2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9ycyA9IFtdOwogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIHZhciBlcnJvckF0RW5kID0gdHJ1ZTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFueU9mLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgfQogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEuYW55T2ZbaV07CgogICAgICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJhbnlPZiIsIGldLCBkYXRhUG9pbnRlclBhdGgpOwoKICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKCiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNvbnRpbnVlIGxvb3Bpbmcgc28gd2UgY2F0Y2ggYWxsIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucywgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yCiAgICAgICAgICAgICAgICBlcnJvckF0RW5kID0gZmFsc2U7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsICIiICsgaSkucHJlZml4V2l0aChudWxsLCAiYW55T2YiKSk7CiAgICAgICAgfQogICAgfQogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGlmIChlcnJvckF0RW5kKSB7CiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpKTsKICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BTllfT0ZfTUlTU0lORywge30sICIiLCAiL2FueU9mIiwgZXJyb3JzLCBkYXRhLCBzY2hlbWEpOwogICAgfQp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPbmVPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlT25lT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmIChzY2hlbWEub25lT2YgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIHZhbGlkSW5kZXggPSBudWxsOwogICAgdmFyIGVycm9ycyA9IFtdOwogICAgdmFyIHN0YXJ0RXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLm9uZU9mLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgfQogICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEub25lT2ZbaV07CgogICAgICAgIHZhciBlcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJvbmVPZiIsIGldLCBkYXRhUG9pbnRlclBhdGgpOwoKICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICB2YWxpZEluZGV4ID0gaTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01VTFRJUExFLCB7CiAgICAgICAgICAgICAgICAgICAgaW5kZXgxOiB2YWxpZEluZGV4LAogICAgICAgICAgICAgICAgICAgIGluZGV4MjogaQogICAgICAgICAgICAgICAgfSwgIiIsICIvb25lT2YiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykgewogICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgaWYgKHZhbGlkSW5kZXggPT09IG51bGwpIHsKICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCkpOwogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NSVNTSU5HLCB7fSwgIiIsICIvb25lT2YiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7CiAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5ub3QgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIG9sZEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9OwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICB9CiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7CiAgICB2YXIgbm90RXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2Uob2xkRXJyb3JDb3VudCk7CiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIG9sZEVycm9yQ291bnQpOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRoczsKICAgIH0KICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBub3RFcnJvcnMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OT1RfUEFTU0VELCB7fSwgIiIsICIvbm90IiwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVIeXBlcm1lZGlhID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmICghc2NoZW1hLmxpbmtzKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3I7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5saW5rcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBsZG8gPSBzY2hlbWEubGlua3NbaV07CiAgICAgICAgaWYgKGxkby5yZWwgPT09ICJkZXNjcmliZWRieSIpIHsKICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTsKICAgICAgICAgICAgdmFyIGFsbFByZXNlbnQgPSB0cnVlOwogICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXBsYXRlLnZhck5hbWVzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkgewogICAgICAgICAgICAgICAgICAgIGFsbFByZXNlbnQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoYWxsUHJlc2VudCkgewogICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpOwogICAgICAgICAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHsgIiRyZWYiOiBzY2hlbWFVcmwgfTsKICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgWyJsaW5rcyIsIGldLCBkYXRhUG9pbnRlclBhdGgpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9OwoKLy8gcGFyc2VVUkkoKSBhbmQgcmVzb2x2ZVVybCgpIGFyZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwODg4NTAKLy8gICAtICByZWxlYXNlZCBhcyBwdWJsaWMgZG9tYWluIGJ5IGF1dGhvciAoIllhZmZsZSIpIC0gc2VlIGNvbW1lbnRzIG9uIGdpc3QKCmZ1bmN0aW9uIHBhcnNlVVJJKHVybCkgewogICAgdmFyIG0gPSBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpLm1hdGNoKC9eKFteOlwvPyNdKzopPyhcL1wvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcLz8jXSopKD86OihcZCopKT8pKT8oW14/I10qKShcP1teI10qKT8oI1tcc1xTXSopPy8pOwogICAgLy8gYXV0aG9yaXR5ID0gJy8vJyArIHVzZXIgKyAnOicgKyBwYXNzICdAJyArIGhvc3RuYW1lICsgJzonIHBvcnQKICAgIHJldHVybiBtID8gewogICAgICAgIGhyZWY6IG1bMF0gfHwgJycsCiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsCiAgICAgICAgYXV0aG9yaXR5OiBtWzJdIHx8ICcnLAogICAgICAgIGhvc3Q6IG1bM10gfHwgJycsCiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsCiAgICAgICAgcG9ydDogbVs1XSB8fCAnJywKICAgICAgICBwYXRobmFtZTogbVs2XSB8fCAnJywKICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsCiAgICAgICAgaGFzaDogbVs4XSB8fCAnJwogICAgfSA6IG51bGw7Cn0KCmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZSwgaHJlZikgewogICAgLy8gUkZDIDM5ODYKCiAgICBmdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyhpbnB1dCkgewogICAgICAgIHZhciBvdXRwdXQgPSBbXTsKICAgICAgICBpbnB1dC5yZXBsYWNlKC9eKFwuXC4/KFwvfCQpKSsvLCAnJykucmVwbGFjZSgvXC8oXC4oXC98JCkpKy9nLCAnLycpLnJlcGxhY2UoL1wvXC5cLiQvLCAnLy4uLycpLnJlcGxhY2UoL1wvP1teXC9dKi9nLCBmdW5jdGlvbiAocCkgewogICAgICAgICAgICBpZiAocCA9PT0gJy8uLicpIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHApOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKS5yZXBsYWNlKC9eXC8vLCBpbnB1dC5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnKTsKICAgIH0KCiAgICBocmVmID0gcGFyc2VVUkkoaHJlZiB8fCAnJyk7CiAgICBiYXNlID0gcGFyc2VVUkkoYmFzZSB8fCAnJyk7CgogICAgcmV0dXJuICFocmVmIHx8ICFiYXNlID8gbnVsbCA6IChocmVmLnByb3RvY29sIHx8IGJhc2UucHJvdG9jb2wpICsgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgPyBocmVmLmF1dGhvcml0eSA6IGJhc2UuYXV0aG9yaXR5KSArIHJlbW92ZURvdFNlZ21lbnRzKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgfHwgaHJlZi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyA/IGhyZWYucGF0aG5hbWUgOiBocmVmLnBhdGhuYW1lID8gKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUgOiBiYXNlLnBhdGhuYW1lKSArIChocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUgPyBocmVmLnNlYXJjaCA6IGhyZWYuc2VhcmNoIHx8IGJhc2Uuc2VhcmNoKSArIGhyZWYuaGFzaDsKfQoKZnVuY3Rpb24gZ2V0RG9jdW1lbnRVcmkodXJpKSB7CiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07Cn0KCmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7CiAgICBpZiAoc2NoZW1hICYmICh0eXBlb2Ygc2NoZW1hID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHNjaGVtYSkpID09PSAib2JqZWN0IikgewogICAgICAgIGlmIChiYXNlVXJpID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgYmFzZVVyaSA9IHNjaGVtYS5pZDsKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEuaWQgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGJhc2VVcmkgPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYS5pZCk7CiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7CiAgICAgICAgfQogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2ldLCBiYXNlVXJpKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hWyckcmVmJ10gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzY2hlbWFbJyRyZWYnXSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2NoZW1hWyckcmVmJ10pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHsKICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICJlbnVtIikgewogICAgICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2tleV0sIGJhc2VVcmkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgpmdW5jdGlvbiBkZWZhdWx0RXJyb3JSZXBvcnRlcihsYW5ndWFnZSkgewogICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCAnZW4nOwoKICAgIHZhciBlcnJvck1lc3NhZ2VzID0gbGFuZ3VhZ2VzW2xhbmd1YWdlXTsKCiAgICByZXR1cm4gZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgdmFyIG1lc3NhZ2VUZW1wbGF0ZSA9IGVycm9yTWVzc2FnZXNbZXJyb3IuY29kZV0gfHwgRXJyb3JNZXNzYWdlc0RlZmF1bHRbZXJyb3IuY29kZV07CiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlVGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHJldHVybiAiVW5rbm93biBlcnJvciBjb2RlICIgKyBlcnJvci5jb2RlICsgIjogIiArICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShlcnJvci5tZXNzYWdlUGFyYW1zKTsKICAgICAgICB9CiAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSBlcnJvci5wYXJhbXM7CiAgICAgICAgLy8gQWRhcHRlZCBmcm9tIENyb2NrZm9yZCdzIHN1cHBsYW50KCkKICAgICAgICByZXR1cm4gbWVzc2FnZVRlbXBsYXRlLnJlcGxhY2UoL1x7KFtee31dKilcfS9nLCBmdW5jdGlvbiAod2hvbGUsIHZhck5hbWUpIHsKICAgICAgICAgICAgdmFyIHN1YlZhbHVlID0gbWVzc2FnZVBhcmFtc1t2YXJOYW1lXTsKICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7CiAgICAgICAgfSk7CiAgICB9Owp9Cgp2YXIgRXJyb3JDb2RlcyA9IHsKICAgIElOVkFMSURfVFlQRTogMCwKICAgIEVOVU1fTUlTTUFUQ0g6IDEsCiAgICBBTllfT0ZfTUlTU0lORzogMTAsCiAgICBPTkVfT0ZfTUlTU0lORzogMTEsCiAgICBPTkVfT0ZfTVVMVElQTEU6IDEyLAogICAgTk9UX1BBU1NFRDogMTMsCiAgICAvLyBOdW1lcmljIGVycm9ycwogICAgTlVNQkVSX01VTFRJUExFX09GOiAxMDAsCiAgICBOVU1CRVJfTUlOSU1VTTogMTAxLAogICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsCiAgICBOVU1CRVJfTUFYSU1VTTogMTAzLAogICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAxMDQsCiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsCiAgICAvLyBTdHJpbmcgZXJyb3JzCiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAyMDAsCiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSwKICAgIFNUUklOR19QQVRURVJOOiAyMDIsCiAgICAvLyBPYmplY3QgZXJyb3JzCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiAzMDEsCiAgICBPQkpFQ1RfUkVRVUlSRUQ6IDMwMiwKICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMywKICAgIE9CSkVDVF9ERVBFTkRFTkNZX0tFWTogMzA0LAogICAgLy8gQXJyYXkgZXJyb3JzCiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCwKICAgIEFSUkFZX0xFTkdUSF9MT05HOiA0MDEsCiAgICBBUlJBWV9VTklRVUU6IDQwMiwKICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMywKICAgIC8vIEN1c3RvbS91c2VyLWRlZmluZWQgZXJyb3JzCiAgICBGT1JNQVRfQ1VTVE9NOiA1MDAsCiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLAogICAgLy8gU2NoZW1hIHN0cnVjdHVyZQogICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiA2MDAsCiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zCiAgICBVTktOT1dOX1BST1BFUlRZOiAxMDAwCn07CnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTsKZm9yICh2YXIga2V5IGluIEVycm9yQ29kZXMpIHsKICAgIEVycm9yQ29kZUxvb2t1cFtFcnJvckNvZGVzW2tleV1dID0ga2V5Owp9CnZhciBFcnJvck1lc3NhZ2VzRGVmYXVsdCA9IHsKICAgIElOVkFMSURfVFlQRTogIkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KSIsCiAgICBFTlVNX01JU01BVENIOiAiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX0iLAogICAgQU5ZX09GX01JU1NJTkc6ICJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJhbnlPZlwiIiwKICAgIE9ORV9PRl9NSVNTSU5HOiAiRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFwib25lT2ZcIiIsCiAgICBPTkVfT0ZfTVVMVElQTEU6ICJEYXRhIGlzIHZhbGlkIGFnYWluc3QgbW9yZSB0aGFuIG9uZSBzY2hlbWEgZnJvbSBcIm9uZU9mXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9IiwKICAgIE5PVF9QQVNTRUQ6ICJEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gXCJub3RcIiIsCiAgICAvLyBOdW1lcmljIGVycm9ycwogICAgTlVNQkVSX01VTFRJUExFX09GOiAiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSBtdWx0aXBsZSBvZiB7bXVsdGlwbGVPZn0iLAogICAgTlVNQkVSX01JTklNVU06ICJWYWx1ZSB7dmFsdWV9IGlzIGxlc3MgdGhhbiBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6ICJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBOVU1CRVJfTUFYSU1VTTogIlZhbHVlIHt2YWx1ZX0gaXMgZ3JlYXRlciB0aGFuIG1heGltdW0ge21heGltdW19IiwKICAgIE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTogIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1heGltdW0ge21heGltdW19IiwKICAgIE5VTUJFUl9OT1RfQV9OVU1CRVI6ICJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlciIsCiAgICAvLyBTdHJpbmcgZXJyb3JzCiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6ICJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX0iLAogICAgU1RSSU5HX1BBVFRFUk46ICJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59IiwKICAgIC8vIE9iamVjdCBlcnJvcnMKICAgIE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06ICJUb28gZmV3IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWluaW11bSB7bWluaW11bX0iLAogICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogIlRvbyBtYW55IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWF4aW11bSB7bWF4aW11bX0iLAogICAgT0JKRUNUX1JFUVVJUkVEOiAiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX0iLAogICAgT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzogIkFkZGl0aW9uYWwgcHJvcGVydGllcyBub3QgYWxsb3dlZCIsCiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6ICJEZXBlbmRlbmN5IGZhaWxlZCAtIGtleSBtdXN0IGV4aXN0OiB7bWlzc2luZ30gKGR1ZSB0byBrZXk6IHtrZXl9KSIsCiAgICAvLyBBcnJheSBlcnJvcnMKICAgIEFSUkFZX0xFTkdUSF9TSE9SVDogIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBBUlJBWV9MRU5HVEhfTE9ORzogIkFycmF5IGlzIHRvbyBsb25nICh7bGVuZ3RofSksIG1heGltdW0ge21heGltdW19IiwKICAgIEFSUkFZX1VOSVFVRTogIkFycmF5IGl0ZW1zIGFyZSBub3QgdW5pcXVlIChpbmRpY2VzIHttYXRjaDF9IGFuZCB7bWF0Y2gyfSkiLAogICAgQVJSQVlfQURESVRJT05BTF9JVEVNUzogIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWQiLAogICAgLy8gRm9ybWF0IGVycm9ycwogICAgRk9STUFUX0NVU1RPTTogIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KSIsCiAgICBLRVlXT1JEX0NVU1RPTTogIktleXdvcmQgZmFpbGVkOiB7a2V5fSAoe21lc3NhZ2V9KSIsCiAgICAvLyBTY2hlbWEgc3RydWN0dXJlCiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6ICJDaXJjdWxhciAkcmVmczoge3VybHN9IiwKICAgIC8vIE5vbi1zdGFuZGFyZCB2YWxpZGF0aW9uIG9wdGlvbnMKICAgIFVOS05PV05fUFJPUEVSVFk6ICJVbmtub3duIHByb3BlcnR5IChub3QgaW4gc2NoZW1hKSIKfTsKCmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHsKICAgIEVycm9yLmNhbGwodGhpcyk7CiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBlcnJvciBjb2RlIHN1cHBsaWVkOiAiICsgc2NoZW1hUGF0aCk7CiAgICB9CiAgICB0aGlzLm1lc3NhZ2UgPSAnJzsKICAgIHRoaXMucGFyYW1zID0gcGFyYW1zOwogICAgdGhpcy5jb2RlID0gY29kZTsKICAgIHRoaXMuZGF0YVBhdGggPSBkYXRhUGF0aCB8fCAiIjsKICAgIHRoaXMuc2NoZW1hUGF0aCA9IHNjaGVtYVBhdGggfHwgIiI7CiAgICB0aGlzLnN1YkVycm9ycyA9IHN1YkVycm9ycyB8fCBudWxsOwoKICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTsKICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7CiAgICBpZiAoIXRoaXMuc3RhY2spIHsKICAgICAgICB0cnkgewogICAgICAgICAgICB0aHJvdyBlcnI7CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7CiAgICAgICAgfQogICAgfQp9CgpWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKEVycm9yLnByb3RvdHlwZSk7ClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7ClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InOwoKVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5wcmVmaXhXaXRoID0gZnVuY3Rpb24gKGRhdGFQcmVmaXgsIHNjaGVtYVByZWZpeCkgewogICAgaWYgKGRhdGFQcmVmaXggIT09IG51bGwpIHsKICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csICJ+MCIpLnJlcGxhY2UoL1wvL2csICJ+MSIpOwogICAgICAgIHRoaXMuZGF0YVBhdGggPSAiLyIgKyBkYXRhUHJlZml4ICsgdGhpcy5kYXRhUGF0aDsKICAgIH0KICAgIGlmIChzY2hlbWFQcmVmaXggIT09IG51bGwpIHsKICAgICAgICBzY2hlbWFQcmVmaXggPSBzY2hlbWFQcmVmaXgucmVwbGFjZSgvfi9nLCAifjAiKS5yZXBsYWNlKC9cLy9nLCAifjEiKTsKICAgICAgICB0aGlzLnNjaGVtYVBhdGggPSAiLyIgKyBzY2hlbWFQcmVmaXggKyB0aGlzLnNjaGVtYVBhdGg7CiAgICB9CiAgICBpZiAodGhpcy5zdWJFcnJvcnMgIT09IG51bGwpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3ViRXJyb3JzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMuc3ViRXJyb3JzW2ldLnByZWZpeFdpdGgoZGF0YVByZWZpeCwgc2NoZW1hUHJlZml4KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpczsKfTsKCmZ1bmN0aW9uIGlzVHJ1c3RlZFVybChiYXNlVXJsLCB0ZXN0VXJsKSB7CiAgICBpZiAodGVzdFVybC5zdWJzdHJpbmcoMCwgYmFzZVVybC5sZW5ndGgpID09PSBiYXNlVXJsKSB7CiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHRlc3RVcmwuc3Vic3RyaW5nKGJhc2VVcmwubGVuZ3RoKTsKICAgICAgICBpZiAodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09ICIvIiB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSAiIyIgfHwgcmVtYWluZGVyLmNoYXJBdCgwKSA9PT0gIj8iKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQoKdmFyIGxhbmd1YWdlcyA9IHt9OwoKZnVuY3Rpb24gY3JlYXRlQXBpKGxhbmd1YWdlKSB7CiAgICB2YXIgZ2xvYmFsQ29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KCk7CiAgICB2YXIgY3VycmVudExhbmd1YWdlOwogICAgdmFyIGN1c3RvbUVycm9yUmVwb3J0ZXI7CiAgICB2YXIgYXBpID0gewogICAgICAgIHNldEVycm9yUmVwb3J0ZXI6IGZ1bmN0aW9uIHNldEVycm9yUmVwb3J0ZXIocmVwb3J0ZXIpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjdXN0b21FcnJvclJlcG9ydGVyID0gcmVwb3J0ZXI7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0sCiAgICAgICAgYWRkRm9ybWF0OiBmdW5jdGlvbiBhZGRGb3JtYXQoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBsYW5ndWFnZTogZnVuY3Rpb24gbGFuZ3VhZ2UoY29kZSkgewogICAgICAgICAgICBpZiAoIWNvZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50TGFuZ3VhZ2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbY29kZV0pIHsKICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07IC8vIGZhbGwgYmFjayB0byBiYXNlIGxhbmd1YWdlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxhbmd1YWdlc1tjb2RlXSkgewogICAgICAgICAgICAgICAgY3VycmVudExhbmd1YWdlID0gY29kZTsKICAgICAgICAgICAgICAgIHJldHVybiBjb2RlOyAvLyBzbyB5b3UgY2FuIHRlbGwgaWYgZmFsbC1iYWNrIGhhcyBoYXBwZW5lZAogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9LAogICAgICAgIGFkZExhbmd1YWdlOiBmdW5jdGlvbiBhZGRMYW5ndWFnZShjb2RlLCBtZXNzYWdlTWFwKSB7CiAgICAgICAgICAgIHZhciBrZXk7CiAgICAgICAgICAgIGZvciAoa2V5IGluIEVycm9yQ29kZXMpIHsKICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTWFwW2tleV0gJiYgIW1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSkgewogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSA9IG1lc3NhZ2VNYXBba2V5XTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcm9vdENvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07CiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW3Jvb3RDb2RlXSkgewogICAgICAgICAgICAgICAgLy8gdXNlIGZvciBiYXNlIGxhbmd1YWdlIGlmIG5vdCB5ZXQgZGVmaW5lZAogICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdID0gbWVzc2FnZU1hcDsKICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV0gPSBtZXNzYWdlTWFwOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKGxhbmd1YWdlc1tyb290Q29kZV0pOwogICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbWVzc2FnZU1hcCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzW3Jvb3RDb2RlXVtrZXldID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXVtrZXldID0gbWVzc2FnZU1hcFtrZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgIH0sCiAgICAgICAgZnJlc2hBcGk6IGZ1bmN0aW9uIGZyZXNoQXBpKGxhbmd1YWdlKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcGkoKTsKICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7CiAgICAgICAgICAgICAgICByZXN1bHQubGFuZ3VhZ2UobGFuZ3VhZ2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gdmFsaWRhdGUoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7CiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0gOiBkZWY7CiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgZmFsc2UsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgc2NoZW1hID0geyAiJHJlZiI6IHNjaGVtYSB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKCIiLCBzY2hlbWEpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgIiIpOwogICAgICAgICAgICBpZiAoIWVycm9yICYmIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBlcnJvciA9IGNvbnRleHQuYmFuVW5rbm93blByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7CiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IGNvbnRleHQubWlzc2luZzsKICAgICAgICAgICAgdGhpcy52YWxpZCA9IGVycm9yID09PSBudWxsOwogICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZDsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiB2YWxpZGF0ZVJlc3VsdCgpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICB0aGlzLnZhbGlkYXRlLmFwcGx5KHJlc3VsdCwgYXJndW1lbnRzKTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlTXVsdGlwbGU6IGZ1bmN0aW9uIHZhbGlkYXRlTXVsdGlwbGUoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7CiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0gOiBkZWY7CiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgdHJ1ZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzY2hlbWEgPSB7ICIkcmVmIjogc2NoZW1hIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGV4dC5hZGRTY2hlbWEoIiIsIHNjaGVtYSk7CiAgICAgICAgICAgIGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCAiIik7CiAgICAgICAgICAgIGlmIChiYW5Vbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTsKICAgICAgICAgICAgcmVzdWx0LmVycm9ycyA9IGNvbnRleHQuZXJyb3JzOwogICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZzsKICAgICAgICAgICAgcmVzdWx0LnZhbGlkID0gcmVzdWx0LmVycm9ycy5sZW5ndGggPT09IDA7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfSwKICAgICAgICBhZGRTY2hlbWE6IGZ1bmN0aW9uIGFkZFNjaGVtYSgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuYWRkU2NoZW1hLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWE6IGZ1bmN0aW9uIGdldFNjaGVtYSgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWFNYXA6IGZ1bmN0aW9uIGdldFNjaGVtYU1hcCgpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hTWFwLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRTY2hlbWFVcmlzOiBmdW5jdGlvbiBnZXRTY2hlbWFVcmlzKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBnZXRNaXNzaW5nVXJpczogZnVuY3Rpb24gZ2V0TWlzc2luZ1VyaXMoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldE1pc3NpbmdVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBkcm9wU2NoZW1hczogZnVuY3Rpb24gZHJvcFNjaGVtYXMoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZHJvcFNjaGVtYXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGRlZmluZUtleXdvcmQ6IGZ1bmN0aW9uIGRlZmluZUtleXdvcmQoKSB7CiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZGVmaW5lS2V5d29yZC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZGVmaW5lRXJyb3I6IGZ1bmN0aW9uIGRlZmluZUVycm9yKGNvZGVOYW1lLCBjb2RlTnVtYmVyLCBkZWZhdWx0TWVzc2FnZSkgewogICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOYW1lICE9PSAnc3RyaW5nJyB8fCAhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChjb2RlTmFtZSkpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTnVtYmVyICE9PSAnbnVtYmVyJyB8fCBjb2RlTnVtYmVyICUgMSAhPT0gMCB8fCBjb2RlTnVtYmVyIDwgMTAwMDApIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZXNbY29kZU5hbWVdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBFcnJvckNvZGVzW2NvZGVOYW1lXSA9IGNvZGVOdW1iZXI7CiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lOwogICAgICAgICAgICBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTmFtZV0gPSBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTnVtYmVyXSA9IGRlZmF1bHRNZXNzYWdlOwogICAgICAgICAgICBmb3IgKHZhciBsYW5nQ29kZSBpbiBsYW5ndWFnZXMpIHsKICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07CiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VbY29kZU5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VbY29kZU51bWJlcl0gPSBsYW5ndWFnZVtjb2RlTnVtYmVyXSB8fCBsYW5ndWFnZVtjb2RlTmFtZV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHsKICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5yZXNldCgpOwogICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDsKICAgICAgICAgICAgdGhpcy5taXNzaW5nID0gW107CiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlOwogICAgICAgIH0sCiAgICAgICAgbWlzc2luZzogW10sCiAgICAgICAgZXJyb3I6IG51bGwsCiAgICAgICAgdmFsaWQ6IHRydWUsCiAgICAgICAgbm9ybVNjaGVtYTogbm9ybVNjaGVtYSwKICAgICAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLAogICAgICAgIGdldERvY3VtZW50VXJpOiBnZXREb2N1bWVudFVyaSwKICAgICAgICBlcnJvckNvZGVzOiBFcnJvckNvZGVzCiAgICB9OwogICAgYXBpLmxhbmd1YWdlKGxhbmd1YWdlIHx8ICdlbicpOwogICAgcmV0dXJuIGFwaTsKfQoKLy9leHBvcnQgZnVuY3Rpb24gdmFsaWRhdG9yKCkgewp2YXIgdHY0ID0gY3JlYXRlQXBpKCk7CnR2NC5hZGRMYW5ndWFnZSgnZW4tZ2InLCBFcnJvck1lc3NhZ2VzRGVmYXVsdCk7CgovL2xlZ2FjeSBwcm9wZXJ0eQp0djQudHY0ID0gdHY0OwovL3JldHVybiB0djQ7CmV4cG9ydHMuZGVmYXVsdCA9IHR2NDsKLy99Cgptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjI5NywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUiOjI5OSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjMwMCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4iOjMwMiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjozMDMsImJhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YiOjMxMX1dLDQxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfc3RyaW5naWZ5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5Jyk7Cgp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOwoKdmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7Cgp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7CgpleHBvcnRzLmRpdmlkZVVSTCA9IGRpdmlkZVVSTDsKZXhwb3J0cy5kaXZpZGVFbWFpbCA9IGRpdmlkZUVtYWlsOwpleHBvcnRzLmVtcHR5T2JqZWN0ID0gZW1wdHlPYmplY3Q7CmV4cG9ydHMuZGVlcENsb25lID0gZGVlcENsb25lOwpleHBvcnRzLmdldFVzZXJVUkxGcm9tRW1haWwgPSBnZXRVc2VyVVJMRnJvbUVtYWlsOwpleHBvcnRzLmdldFVzZXJFbWFpbEZyb21VUkwgPSBnZXRVc2VyRW1haWxGcm9tVVJMOwpleHBvcnRzLmNvbnZlcnRUb1VzZXJVUkwgPSBjb252ZXJ0VG9Vc2VyVVJMOwpleHBvcnRzLmlzRGF0YU9iamVjdFVSTCA9IGlzRGF0YU9iamVjdFVSTDsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KLyoqCiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWwKICogQG1vZHVsZSB1dGlscwogKi8KCi8qKgogKiBAdHlwZWRlZiBkaXZpZGVVUkwKICogQHR5cGUgT2JqZWN0CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTAogKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMCiAqLwoKLyoqCiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzcwogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMCiAqLwpmdW5jdGlvbiBkaXZpZGVVUkwodXJsKSB7CgogIGlmICghdXJsKSB0aHJvdyBFcnJvcignVVJMIGlzIG5lZWRlZCB0byBzcGxpdCcpOwoKICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKSooXC9bXC9cZFx3XC4tXSopKig/OltcP10pKiguKykqL2dpOwogIHZhciByZSA9IC8oW2EtekEtWi1dKik6XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOwogIHZhciBzdWJzdCA9ICckMSwkMiwkMyc7CiAgdmFyIHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpOwoKICAvLyBJZiB0aGUgdXJsIGhhcyBubyBwcm90b2NvbCwgdGhlIGRlZmF1bHQgcHJvdG9jb2wgc2V0IGlzIGh0dHBzCiAgaWYgKHBhcnRzWzBdID09PSB1cmwpIHsKICAgIHBhcnRzWzBdID0gJ2h0dHBzJzsKICAgIHBhcnRzWzFdID0gdXJsOwogIH0KCiAgdmFyIHJlc3VsdCA9IHsKICAgIHR5cGU6IHBhcnRzWzBdLAogICAgZG9tYWluOiBwYXJ0c1sxXSwKICAgIGlkZW50aXR5OiBwYXJ0c1syXQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGRpdmlkZUVtYWlsKGVtYWlsKSB7CiAgdmFyIGluZGV4T2ZBdCA9IGVtYWlsLmluZGV4T2YoJ0AnKTsKCiAgdmFyIHJlc3VsdCA9IHsKICAgIHVzZXJuYW1lOiBlbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KSwKICAgIGRvbWFpbjogZW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIGVtYWlsLmxlbmd0aCkKICB9OwoKICByZXR1cm4gcmVzdWx0Owp9CgovKioKICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5CiAqIEBwYXJhbSAge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBiZSBjaGVja2VkCiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIHN0YXR1cyBvZiBPYmplY3QsIGVtcHR5IG9yIG5vdCAodHJ1ZXxmYWxzZSk7CiAqLwpmdW5jdGlvbiBlbXB0eU9iamVjdChvYmplY3QpIHsKICByZXR1cm4gKDAsIF9rZXlzMi5kZWZhdWx0KShvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7Cn0KCi8qKgogKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YQogKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkCiAqIEByZXR1cm4ge09iamVjdH0KICovCmZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHsKICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uCiAgaWYgKG9iaikgcmV0dXJuIEpTT04ucGFyc2UoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG9iaikpOwp9CgovKioKICogT2J0YWlucyB0aGUgdXNlciBVUkwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIGVtYWlsCiAqIEBwYXJhbSAge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsCiAqIEByZXR1cm4ge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMCiAqLwpmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkgewogIHZhciBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpOwogIHJldHVybiAndXNlcjovLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIHVzZXJFbWFpbC5sZW5ndGgpICsgJy8nICsgdXNlckVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpOwp9CgovKioKICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMCiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMCiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsCiAqLwpmdW5jdGlvbiBnZXRVc2VyRW1haWxGcm9tVVJMKHVzZXJVUkwpIHsKICB2YXIgdXJsID0gZGl2aWRlVVJMKHVzZXJVUkwpOwogIHJldHVybiB1cmwuaWRlbnRpdHkucmVwbGFjZSgnLycsICcnKSArICdAJyArIHVybC5kb21haW47IC8vIGlkZW50aXR5IGZpZWxkIGhhcyAnL2V4YW1wbGVJRCcgaW5zdGVhZCBvZiAnZXhhbXBsZUlEJwp9CgovKioKICogQ2hlY2sgaWYgdGhlIHVzZXIgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSBVUkwgZm9ybWF0LCBpZiBub3QsIGNvbnZlcnQgdG8gVVJMIGZvcm1hdAogKiBAcGFyYW0gIHtzdHJpbmd9ICAgaWRlbnRpZmllciAgdXNlciBpZGVudGlmaWVyCiAqIEByZXR1cm4ge3N0cmluZ30gICB1c2VyVVJMICAgIHRoZSB1c2VyIFVSTAogKi8KZnVuY3Rpb24gY29udmVydFRvVXNlclVSTChpZGVudGlmaWVyKSB7CgogIC8vIGNoZWNrIGlmIHRoZSBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIHVybCBmb3JtYXQKICBpZiAoaWRlbnRpZmllci5zdWJzdHJpbmcoMCwgNykgPT09ICd1c2VyOi8vJykgewogICAgdmFyIGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaWRlbnRpZmllcik7CgogICAgLy9jaGVjayBpZiB0aGUgdXJsIGlzIHdlbGwgZm9ybWF0ZWQKICAgIGlmIChkaXZpZGVkVVJMLmRvbWFpbiAmJiBkaXZpZGVkVVJMLmlkZW50aXR5KSB7CiAgICAgIHJldHVybiBpZGVudGlmaWVyOwogICAgfSBlbHNlIHsKICAgICAgdGhyb3cgJ3VzZXJVUkwgd2l0aCB3cm9uZyBmb3JtYXQnOwogICAgfQoKICAgIC8vaWYgbm90LCBjb252ZXJ0IHRoZSB1c2VyIGVtYWlsIHRvIFVSTCBmb3JtYXQKICB9IGVsc2UgewogICAgICByZXR1cm4gZ2V0VXNlclVSTEZyb21FbWFpbChpZGVudGlmaWVyKTsKICAgIH0KfQoKZnVuY3Rpb24gaXNEYXRhT2JqZWN0VVJMKHVybCkgewogIHZhciBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nLCAnaHlwZXJ0eSddOwogIHZhciBzcGxpdFVSTCA9IHVybC5zcGxpdCgnOi8vJyk7CiAgdmFyIHVybFNjaGVtYSA9IHNwbGl0VVJMWzBdOwoKICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodXJsU2NoZW1hKSA9PT0gLTE7Cn0KCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjI5NywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjozMDN9XX0se30sWzQwOF0pKDQwOCkKfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2YkdsaUwybHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJadUwzSmxaMlY0Y0M5bGMyTmhjR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVMxbWRXNWpkR2x2Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5aExXNTFiV0psY2kxMllXeDFaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVc0dGFXNXpkR0Z1WTJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZllXNHRiMkpxWldOMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFdOdmNIa3RkMmwwYUdsdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFdacGJHd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZWEp5WVhrdFpuSnZiUzFwZEdWeVlXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTloY25KaGVTMXBibU5zZFdSbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxdFpYUm9iMlJ6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMWEpsWkhWalpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxemNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFhOd1pXTnBaWE10WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMkpwYm1RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkyeGhjM052Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5amIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZMjlzYkdWamRHbHZiaTF6ZEhKdmJtY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZMjlzYkdWamRHbHZiaTEwYnkxcWMyOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMk52Ykd4bFkzUnBiMjR0ZDJWaGF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWpiMnhzWldOMGFXOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMk52Y21VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkzSmxZWFJsTFhCeWIzQmxjblI1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJOMGVDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWtZWFJsTFhSdkxYQnlhVzFwZEdsMlpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWtaV1pwYm1Wa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyUmxjMk55YVhCMGIzSnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlJ2YlMxamNtVmhkR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWlc1MWJTMWlkV2N0YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWxiblZ0TFd0bGVYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyWmhhV3h6TFdsekxYSmxaMlY0Y0M1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5bVlXbHNjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTltYVhndGNtVXRkMnR6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJac1lXZHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlp2Y2kxdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOW5iRzlpWVd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFHRnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmhwWkdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFIUnRiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlwWlRndFpHOXRMV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBibWhsY21sMExXbG1MWEpsY1hWcGNtVmtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmx1ZG05clpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBiMkpxWldOMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgybHpMV0Z5Y21GNUxXbDBaWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVhNdFlYSnlZWGt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVhNdGFXNTBaV2RsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGN5MXZZbXBsWTNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFYTXRjbVZuWlhod0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgybDBaWEl0WTJGc2JDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBkR1Z5TFdOeVpXRjBaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlwZEdWeUxXUmxabWx1WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGRHVnlMV1JsZEdWamRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBkR1Z5TFhOMFpYQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZhWFJsY21GMGIzSnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMnRsZVc5bUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyeHBZbkpoY25rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmJXRjBhQzFsZUhCdE1TNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXRZWFJvTFd4dlp6RndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjFoZEdndGMybG5iaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl0WlhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyMWxkR0ZrWVhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyMXBZM0p2ZEdGemF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXZZbXBsWTNRdFlYTnphV2R1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExXUndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjlpYW1WamRDMWtjSE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1p2Y21ObFpDMXdZVzB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0dRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHNHRaWGgwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5jRzh1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV3RsZVhNdGFXNTBaWEp1WVd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExYQnBaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2WW1wbFkzUXRjMkZ3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzEwYnkxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2ZDI0dGEyVjVjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl3WVhKelpTMW1iRzloZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYSnpaUzFwYm5RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmNHRnlkR2xoYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYUm9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0J5YjNCbGNuUjVMV1JsYzJNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmNtVmtaV1pwYm1VdFlXeHNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0psWkdWbWFXNWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0psY0d4aFkyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM05oYldVdGRtRnNkV1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzJWMExYQnliM1J2TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNObGRDMXpjR1ZqYVdWekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTmxkQzEwYnkxemRISnBibWN0ZEdGbkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTm9ZWEpsWkMxclpYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjMmhoY21Wa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjM1J5YVdOMExXMWxkR2h2WkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5emRISnBibWN0WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFdOdmJuUmxlSFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzNSeWFXNW5MV2gwYld3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFhCaFpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXpkSEpwYm1jdGNtVndaV0YwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTEwY21sdExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzTjBjbWx1WnkxM2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBZWE5yTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNSdkxXbHVaR1Y0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNSdkxXbHVkR1ZuWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmRHOHRhVzlpYW1WamRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBieTFzWlc1bmRHZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkRzh0YjJKcVpXTjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM1J2TFhCeWFXMXBkR2wyWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5MGVYQmxaQzFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBlWEJsWkMxaWRXWm1aWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmZEhsd1pXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkV2xrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNkcmN5MWtaV1pwYm1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmQydHpMV1Y0ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5M2EzTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWpiM0psTG1kbGRDMXBkR1Z5WVhSdmNpMXRaWFJvYjJRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5amIzSmxMbWx6TFdsMFpYSmhZbXhsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WTI5eVpTNXlaV2RsZUhBdVpYTmpZWEJsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1OdmNIa3RkMmwwYUdsdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtVjJaWEo1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1acGJHd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWxzZEdWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnBibVF0YVc1a1pYZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWx1WkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWIzSXRaV0ZqYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWNtOXRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWx1WkdWNExXOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWx6TFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbWwwWlhKaGRHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbXB2YVc0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWJHRnpkQzFwYm1SbGVDMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV0WVhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjbVZrZFdObExYSnBaMmgwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5KbFpIVmpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV6YkdsalpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXpiMjFsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG5OdmNuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VjM0JsWTJsbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTVrWVhSbExtNXZkeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFdsemJ5MXpkSEpwYm1jdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXFjMjl1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGNISnBiV2wwYVhabExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbVJoZEdVdWRHOHRjM1J5YVc1bkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbVoxYm1OMGFXOXVMbUpwYm1RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVablZ1WTNScGIyNHVhR0Z6TFdsdWMzUmhibU5sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtWjFibU4wYVc5dUxtNWhiV1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZV052YzJndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1aGMybHVhQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbUYwWVc1b0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVkySnlkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbU5zZWpNeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVkyOXphQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbVY0Y0cweExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVpuSnZkVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1YUhsd2IzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNXBiWFZzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1Ykc5bk1UQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNXNiMmN4Y0M1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG14dlp6SXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNXphV2R1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1YzJsdWFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xuUmhibWd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzUwY25WdVl5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVZMjl1YzNSeWRXTjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1Wd2MybHNiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1sekxXWnBibWwwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWFYTXRhVzUwWldkbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV1ZFcxaVpYSXVhWE10Ym1GdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXBjeTF6WVdabExXbHVkR1ZuWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtMWhlQzF6WVdabExXbHVkR1ZuWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtMXBiaTF6WVdabExXbHVkR1ZuWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxuQmhjbk5sTFdac2IyRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV3WVhKelpTMXBiblF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG5SdkxXWnBlR1ZrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MXdjbVZqYVhOcGIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbUZ6YzJsbmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEdsbGN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW1jbVZsZW1VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMXVZVzFsY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWFYTXRaWGgwWlc1emFXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YVhNdFpuSnZlbVZ1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1cGN5MXpaV0ZzWldRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVyWlhsekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXdjbVYyWlc1MExXVjRkR1Z1YzJsdmJuTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbk5sWVd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuUnZMWE4wY21sdVp5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV3WVhKelpTMW1iRzloZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXdZWEp6WlMxcGJuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y0hKdmJXbHpaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1Gd2NHeDVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WTI5dWMzUnlkV04wTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpHVnNaWFJsTFhCeWIzQmxjblI1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpXNTFiV1Z5WVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1kbGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWhoY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtbHpMV1Y0ZEdWdWMybGliR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1dmQyNHRhMlY1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExuQnlaWFpsYm5RdFpYaDBaVzV6YVc5dWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbk5sZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzV6WlhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xtTnZibk4wY25WamRHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzVtYkdGbmN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXViV0YwWTJndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuSmxjR3hoWTJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZuWlhod0xuTmxZWEpqYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXlaV2RsZUhBdWMzQnNhWFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG5SdkxYTjBjbWx1Wnk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpaWFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1GdVkyaHZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1WW1sbkxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWliR2x1YXk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVltOXNaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1WTI5a1pTMXdiMmx1ZEMxaGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VaVzVrY3kxM2FYUm9MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVtYVhobFpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VabTl1ZEdOdmJHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVtYjI1MGMybDZaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1Wm5KdmJTMWpiMlJsTFhCdmFXNTBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVwYm1Oc2RXUmxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSaGJHbGpjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG14cGJtc3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbkpoZHk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWNtVndaV0YwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1emJXRnNiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNSaGNuUnpMWGRwZEdndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjBjbWxyWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWMzVmlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV6ZFhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuUnlhVzB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG1GeWNtRjVMV0oxWm1abGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNWtZWFJoTFhacFpYY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVabXh2WVhRek1pMWhjbkpoZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1bWJHOWhkRFkwTFdGeWNtRjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbWx1ZERFMkxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG1sdWRETXlMV0Z5Y21GNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkRGd0WVhKeVlYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERFMkxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG5WcGJuUXpNaTFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNTFhVzUwT0MxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzUxYVc1ME9DMWpiR0Z0Y0dWa0xXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuZGxZV3N0YldGd0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbmRsWVdzdGMyVjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG1GeWNtRjVMbWx1WTJ4MVpHVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG1GellYQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1WlhKeWIzSXVhWE10WlhKeWIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YldGd0xuUnZMV3B6YjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3ViV0YwYUM1cFlXUmthQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dFlYUm9MbWx0ZFd4b0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWFYTjFZbWd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzUxYlhWc2FDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVaR1ZtYVc1bExXZGxkSFJsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdVpHVm1hVzVsTFhObGRIUmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1Wlc1MGNtbGxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdWJHOXZhM1Z3TFdkbGRIUmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1Ykc5dmEzVndMWE5sZEhSbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVkbUZzZFdWekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYzJWeWRtRmliR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1a1pXWnBibVV0YldWMFlXUmhkR0V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1a1pXeGxkR1V0YldWMFlXUmhkR0V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1blpYUXRiV1YwWVdSaGRHRXRhMlY1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF0WlhSaFpHRjBZUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXZkMjR0YldWMFlXUmhkR0V0YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWRsZEMxdmQyNHRiV1YwWVdSaGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzVvWVhNdGJXVjBZV1JoZEdFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjbVZtYkdWamRDNW9ZWE10YjNkdUxXMWxkR0ZrWVhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXViV1YwWVdSaGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YzJWMExuUnZMV3B6YjI0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y0c5c2VXWnBiR3d2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxtRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5OMGNtbHVaeTV0WVhSamFDMWhiR3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5CaFpDMWxibVF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5CaFpDMXpkR0Z5ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF3YjJ4NVptbHNiQzl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWRISnBiUzFzWldaMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhCdmJIbG1hV3hzTDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbk4wY21sdVp5NTBjbWx0TFhKcFoyaDBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzVoYzNsdVl5MXBkR1Z5WVhSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3ViMkp6WlhKMllXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXdiMng1Wm1sc2JDOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1emVYTjBaVzB1WjJ4dlltRnNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYQnZiSGxtYVd4c0wyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZkMlZpTG1SdmJTNXBkR1Z5WVdKc1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxd2IyeDVabWxzYkM5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwzZGxZaTVwYlcxbFpHbGhkR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjRzlzZVdacGJHd3ZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTkzWldJdWRHbHRaWEp6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEJ2YkhsbWFXeHNMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDNOb2FXMHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDJwemIyNHZjM1J5YVc1bmFXWjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WVhOemFXZHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJsekxXWnliM3BsYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwydGxlWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXdjbTl0YVhObExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl6ZVcxaWIyd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amNtVmhkR1ZEYkdGemN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12YVc1b1pYSnBkSE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwzQnZjM05wWW14bFEyOXVjM1J5ZFdOMGIzSlNaWFIxY200dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMM1I1Y0dWdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5aGMzTnBaMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YVhNdFpuSnZlbVZ1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbUZrWkMxMGJ5MTFibk5qYjNCaFlteGxjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbUZ1TFc5aWFtVmpkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbU5zWVhOemIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdkpDNWpiM0psTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMeVF1WTNSNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdVpHVnpZM0pwY0hSdmNuTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdkpDNWtiMjB0WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVaVzUxYlMxclpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVaWGh3YjNKMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdVptOXlMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMeVF1WjJWMExXNWhiV1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMeVF1YUdsa1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtaDBiV3d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzVwYjJKcVpXTjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVhWE10WVhKeVlYa3RhWFJsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG1sekxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMeVF1YVhSbGNpMWpZV3hzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMeVF1YVhSbGNpMWpjbVZoZEdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1cGRHVnlMV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtbDBaWEl0WkdWMFpXTjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdkpDNXJaWGx2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG14cFluSmhjbmt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzV0YVdOeWIzUmhjMnN1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzV2WW1wbFkzUXRZWE56YVdkdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdWIySnFaV04wTFhOaGNDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xuSmxaR1ZtYVc1bExXRnNiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbkpsWkdWbWFXNWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVjMlYwTFhCeWIzUnZMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVjMlYwTFhOd1pXTnBaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzV6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbk5vWVhKbFpDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xuTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdkpDNXpkSEpwWTNRdGJtVjNMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVjM1J5YVc1bkxXRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVkR0Z6YXk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeThrTG5SdkxXbHZZbXBsWTNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1MGJ5MXNaVzVuZEdndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1MGJ5MXZZbXBsWTNRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1M2EzTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlkyOXlaUzVuWlhRdGFYUmxjbUYwYjNJdGJXVjBhRzlrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbUZ6YzJsbmJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1cGN5MW1jbTk2Wlc0dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1clpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVjMlYwTFhCeWIzUnZkSGx3WlMxdlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExuUnZMWE4wY21sdVp5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjSEp2YldselpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXplVzFpYjJ3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12ZDJWaUxtUnZiUzVwZEdWeVlXSnNaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTl3Y205alpYTnpMMkp5YjNkelpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjbVZuWlc1bGNtRjBiM0l0Y25WdWRHbHRaUzl5ZFc1MGFXMWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM05sY25acFkyVXRabkpoYldWM2IzSnJMMlJwYzNRdlRXVnpjMkZuWlVaaFkzUnZjbmt1YW5NaUxDSnpjbU12WW5WekwwSjFjeTVxY3lJc0luTnlZeTlpZFhNdlRXVnpjMkZuWlVKMWN5NXFjeUlzSW5OeVl5OWlkWE12VUdsd1pXeHBibVV1YW5NaUxDSnpjbU12YVdSbGJuUnBkSGt2UTNKNWNIUnZMbXB6SWl3aWMzSmpMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVMbXB6SWl3aWMzSmpMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVUVzlrZFd4bExtcHpJaXdpYzNKakwzQnZiR2xqZVM5RGIyNTBaWGgwTG1weklpd2ljM0pqTDNCdmJHbGplUzlQY0dWeVlYUnZjbk11YW5NaUxDSnpjbU12Y0c5c2FXTjVMMUJFVUM1cWN5SXNJbk55WXk5d2IyeHBZM2t2VUVWUUxtcHpJaXdpYzNKakwzQnZiR2xqZVM5UWIyeHBZM2xGYm1kcGJtVXVhbk1pTENKemNtTXZjRzlzYVdONUwyTnZiblJsZUhRdlEyOXRiVzl1UTNSNExtcHpJaXdpYzNKakwzQnZiR2xqZVM5amIyNTBaWGgwTDFKMWJuUnBiV1ZEYjNKbFEzUjRMbXB6SWl3aWMzSmpMM0psWjJsemRISjVMMEZrWkhKbGMzTkJiR3h2WTJGMGFXOXVMbXB6SWl3aWMzSmpMM0psWjJsemRISjVMMGg1Y0dWeWRIbEpibk4wWVc1alpTNXFjeUlzSW5OeVl5OXlaV2RwYzNSeWVTOVNaV2RwYzNSeWVTNXFjeUlzSW5OeVl5OXlaV2RwYzNSeWVTOVNaV2RwYzNSeWVVUmhkR0ZOYjJSbGJDNXFjeUlzSW5OeVl5OXlkVzUwYVcxbEwxSjFiblJwYldWVlFTNXFjeUlzSW5OeVl5OXplVzVqYUdWeUwwOWlhbVZqZEVGc2JHOWpZWFJwYjI0dWFuTWlMQ0p6Y21NdmMzbHVZMmhsY2k5UFluTmxjblpsY2s5aWFtVmpkQzVxY3lJc0luTnlZeTl6ZVc1amFHVnlMMUpsY0c5eWRHVnlUMkpxWldOMExtcHpJaXdpYzNKakwzTjVibU5vWlhJdlUzVmljMk55YVhCMGFXOXVMbXB6SWl3aWMzSmpMM041Ym1Ob1pYSXZVM2x1WTJobGNrMWhibUZuWlhJdWFuTWlMQ0p6Y21NdmRYUnBiSE12UlhabGJuUkZiV2wwZEdWeUxtcHpJaXdpYzNKakwzVjBhV3h6TDNSMk5DNXFjeUlzSW5OeVl5OTFkR2xzY3k5MWRHbHNjeTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZETDBKQk8wRkJRMEU3TzBGRFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU42UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0JDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6TkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNelFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOMFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRemxKUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOc1JrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRjRVpCTzBGQlEwRTdPMEZEUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMjVDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5PUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXpRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdPMEZEUVVFN1FVRkRRVHRCUVVOQk96dEJRMFpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFprRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUczdRVU5HUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnlSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkNRVHRCUVVOQk8wRkJRMEU3TzBGRFJrRTdPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOd1JFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMjVGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFFTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1pEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5tUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOYVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVObVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUczdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JDUVRzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU12UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU40UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6ZENRVHRCUVVOQk96dEJRMFJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUdWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYkZKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRla0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5pUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMkpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJwRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU16UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjBRa0U3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRE0wSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFlrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjRRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNwQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOa1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFSQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5xU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJwQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3TzBGRFJrRTdRVUZEUVR0QlFVTkJPenRCUTBaQk8wRkJRMEU3UVVGRFFUczdRVU5HUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdPMEZEUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPenRCUTBaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRelZUUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4wUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM2hDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5PUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyaENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRha0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bERRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRlRVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTllRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnFRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRkRTFCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5tUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNM1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3TzBGRFFVRTdPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF5OUxRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUczdRVU5CUVRzN1FVTkJRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzUkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUczdRVU5FUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk96dEJRMFJCTzBGQlEwRTdPMEZEUkVFN1FVRkRRVHM3UVVORVFUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPenM3TzBGRFJrRTdPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTJaQk8wRkJRMEU3TzBGRFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMjVDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZETjBOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN1FVTnVRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUczdPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMXBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnFSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdRVU53UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGREwwUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5vUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCT3pzN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRNVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGFrTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHM3UVVOR1FUczdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9VMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnNUMEU3UVVGRFFUdEJRVU5CT3p0QlEwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlF6bEdRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN08wRkROWEJDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUTBaTkxFYzdPenM3T3pzN08wRkJWVW9zYVVKQlFXTTdRVUZCUVRzN1FVRkRXaXhSUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVMHNUVUZCVGl4SFFVRmxMRU5CUVdZN1FVRkRRU3hWUVVGTkxHTkJRVTRzUjBGQmRVSXNSVUZCZGtJN08wRkJSVUVzVlVGQlRTeG5Ra0ZCVGl4SFFVRjVRaXhKUVVGNlFpeERPMEZCUTBFc1ZVRkJUU3hyUWtGQlRpeEhRVUV5UWl4RlFVRXpRanM3UVVGRlFTeFZRVUZOTEhsQ1FVRk9PMEZCUTBRN096czdPenM3T3pzN096czdaME5CVTFjc1J5eEZRVUZMTEZFc1JVRkJWVHRCUVVONlFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxFOUJRVThzU1VGQlNTeFhRVUZLTEVOQlFXZENMRTFCUVUwc1kwRkJkRUlzUlVGQmMwTXNSMEZCZEVNc1JVRkJNa01zVVVGQk0wTXNRMEZCV0R0QlFVTkJMRlZCUVVrc1YwRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJc1EwRkJaanRCUVVOQkxGVkJRVWtzUTBGQlF5eFJRVUZNTEVWQlFXVTdRVUZEWWl4dFFrRkJWeXhGUVVGWU8wRkJRMEVzWTBGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFbEJRVFJDTEZGQlFUVkNPMEZCUTBRN08wRkJSVVFzWlVGQlV5eEpRVUZVTEVOQlFXTXNTVUZCWkR0QlFVTkJMR0ZCUVU4c1NVRkJVRHRCUVVORU96czdPenM3T3pzN096czdPM2REUVZWdFFpeEhMRVZCUVVzc1N5eEZRVUZQTEdkQ0xFVkJRV3RDTzBGQlEyaEVMRmRCUVVzc2EwSkJRVXdzUTBGQmQwSXNUVUZCVFN4TFFVRTVRaXhKUVVGMVF5eG5Ra0ZCZGtNN1FVRkRSRHM3T3pzN096czdPenN5UTBGUGMwSXNSeXhGUVVGTExFc3NSVUZCVHp0QlFVTnFReXhoUVVGUExFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1RVRkJUU3hMUVVFNVFpeERRVUZRTzBGQlEwUTdPenM3T3pzN096dDVRMEZOYjBJc1J5eEZRVUZMTzBGQlEzaENMR0ZCUVU4c1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVkQlFYQkNMRU5CUVZBN1FVRkRSRHM3T3pzN096czdPenM3TzNsQ1FWTkpMRTBzUlVGQlVTeExMRVZCUVU4c1RTeEZRVUZSTzBGQlFVRTdPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1dVRkJXU3hOUVVGTkxGZEJRVTRzUTBGQmEwSXNUVUZCYkVJc1JVRkJNRUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEYWtRc1pVRkJUeXhYUVVGUUxFTkJRVzFDTEVkQlFXNUNPMEZCUTBRc1QwRkdaU3hEUVVGb1FqczdRVUZKUVN4VlFVRkpMR05CUVdNc1QwRkJUeXhYUVVGUUxFTkJRVzFDTEV0QlFXNUNMRVZCUVRCQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyNUVMR05CUVUwc1YwRkJUaXhEUVVGclFpeEhRVUZzUWp0QlFVTkVMRTlCUm1sQ0xFTkJRV3hDT3p0QlFVbEJMR0ZCUVU4N1FVRkRUQ3h6UWtGQll5eFRRVVJVTzBGQlJVd3NkMEpCUVdkQ0xGZEJSbGc3UVVGSFRDeG5Ra0ZCVVN4clFrRkJUVHRCUVVOYUxHbENRVUZMTEZsQlFVd3NRMEZCYTBJc1RVRkJiRUk3UVVGRFFTeHBRa0ZCU3l4alFVRk1MRU5CUVc5Q0xFMUJRWEJDTzBGQlEwUTdRVUZPU1N4UFFVRlFPMEZCVVVRN096czdPenR6UTBGSGFVSXNSeXhGUVVGTE96dEJRVVZ5UWl4VlFVRkpMRmRCUVZjc1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVkQlFYQkNMRU5CUVdZN1FVRkRRU3hWUVVGSkxGRkJRVW9zUlVGQll6dEJRVU5hTEdGQlFVc3NWVUZCVEN4RFFVRm5RaXhSUVVGb1FpeEZRVUV3UWl4SFFVRXhRanRCUVVORU8wRkJRMFk3T3pzN096c3JRa0ZIVlN4UkxFVkJRVlVzUnl4RlFVRkxPMEZCUTNoQ0xHVkJRVk1zVDBGQlZDeERRVUZwUWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVONFFpeFpRVUZKTEZOQlFVb3NRMEZCWXl4SFFVRmtPMEZCUTBRc1QwRkdSRHRCUVVkRU96czdjME5CUldsQ0xFc3NSVUZCVHl4blFpeEZRVUZyUWp0QlFVTjZReXhWUVVGSkxGRkJRVkVzU1VGQldqczdPMEZCUjBFc1ZVRkJTU3huUWtGQlNpeEZRVUZ6UWp0QlFVRkJPMEZCUTNCQ0xHTkJRVWtzWVVGQllTeE5RVUZOTEVsQlFVNHNSMEZCWVN4TlFVRk5MRVZCUVhCRE8wRkJRMEVzWjBKQlFVMHNhMEpCUVU0c1EwRkJlVUlzVlVGQmVrSXNTVUZCZFVNc1owSkJRWFpET3p0QlFVVkJMSEZDUVVGWExGbEJRVTA3UVVGRFppeG5Ra0ZCU1N4alFVRmpMRTFCUVUwc2EwSkJRVTRzUTBGQmVVSXNWVUZCZWtJc1EwRkJiRUk3UVVGRFFTeHRRa0ZCVHl4TlFVRk5MR3RDUVVGT0xFTkJRWGxDTEZWQlFYcENMRU5CUVZBN08wRkJSVUVzWjBKQlFVa3NWMEZCU2l4RlFVRnBRanRCUVVObUxHdENRVUZKTEZkQlFWYzdRVUZEWWl4dlFrRkJTU3hOUVVGTkxFVkJSRWNzUlVGRFF5eE5RVUZOTEZWQlJGQTdRVUZGWWl4elFrRkJUU3hGUVVGRkxFMUJRVTBzUjBGQlVpeEZRVUZoTEUxQlFVMHNiVUpCUVc1Q0xFVkJRWGRETEU5QlFVOHNTMEZCTDBNN1FVRkdUeXhsUVVGbU96dEJRVXRCTERCQ1FVRlpMRkZCUVZvN1FVRkRSRHRCUVVOR0xGZEJXa1FzUlVGWlJ5eE5RVUZOTEdkQ1FWcFVPMEZCU205Q08wRkJhVUp5UWp0QlFVTkdPenM3WjBOQlJWY3NSeXhGUVVGTE8wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hKUVVGSkxFbEJRVW9zUzBGQllTeFZRVUZxUWl4RlFVRTJRanRCUVVNelFpeFpRVUZKTEdGQlFXRXNTVUZCU1N4RlFVRktMRWRCUVZNc1NVRkJTU3hGUVVFNVFqdEJRVU5CTEZsQlFVa3NZMEZCWXl4TlFVRk5MR3RDUVVGT0xFTkJRWGxDTEZWQlFYcENMRU5CUVd4Q096czdRVUZIUVN4WlFVRkpMRWxCUVVrc1NVRkJTaXhEUVVGVExFbEJRVlFzU1VGQmFVSXNSMEZCY2tJc1JVRkJNRUk3UVVGRGVFSXNhVUpCUVU4c1RVRkJUU3hyUWtGQlRpeERRVUY1UWl4VlFVRjZRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4WFFVRktMRVZCUVdsQ08wRkJRMllzYzBKQlFWa3NSMEZCV2p0QlFVTkJMR2xDUVVGUExFbEJRVkE3UVVGRFJEdEJRVU5HT3p0QlFVVkVMR0ZCUVU4c1MwRkJVRHRCUVVORU96czdPenM3SzBKQlIxVXNSeXhGUVVGTE8wRkJRMlFzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hEUVVGRExFMUJRVTBzVjBGQlRpeERRVUZyUWl4SFFVRnNRaXhEUVVGTUxFVkJRVFpDTzBGQlF6TkNMRmxCUVVrc1YwRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNTVUZCU1N4RlFVRjZRaXhEUVVGbU8wRkJRMEVzV1VGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2l4blFrRkJUU3hWUVVGT0xFTkJRV2xDTEZGQlFXcENMRVZCUVRKQ0xFZEJRVE5DTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c1owSkJRVTBzYVVKQlFVNHNRMEZCZDBJc1IwRkJlRUk3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenN5UWtGRlRTeExMRVZCUVU4N096czdPMEZCUzFvc1ZVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlVDeEpRVUZoTEUxQlFVMHNSVUZCVGl4TFFVRmhMRU5CUVRsQ0xFVkJRV2xETzBGQlF5OUNMR0ZCUVVzc1RVRkJURHRCUVVOQkxHTkJRVTBzUlVGQlRpeEhRVUZYTEV0QlFVc3NUVUZCYUVJN1FVRkRSRHRCUVVOR096czdPenM3T3pzN096czdPMmREUVZWWExFc3NSVUZCVHl4blFpeEZRVUZyUWl4RFFVRkhPenM3T3pzN096czdPMjFEUVU5NlFpeEhMRVZCUVVzc1EwRkJNa1FzUXpzN096czdPenM3T3pzN1owUkJVVzVFTEVNc2JVWkJRWFZHT3pzN096dEpRVWt2Unl4WE96czdPenM3TzBGQlQwb3NkVUpCUVZrc1lVRkJXaXhGUVVFeVFpeEhRVUV6UWl4RlFVRm5ReXhSUVVGb1F5eEZRVUV3UXp0QlFVRkJPenRCUVVONFF5eFJRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGTkxHTkJRVTRzUjBGQmRVSXNZVUZCZGtJN1FVRkRRU3hWUVVGTkxFbEJRVTRzUjBGQllTeEhRVUZpTzBGQlEwRXNWVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwUTdPenM3T3pzN096czJRa0ZQVVR0QlFVTlFMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NUMEZCVHl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVFVGQlRTeEpRVUV6UWl4RFFVRllPMEZCUTBFc1ZVRkJTU3hKUVVGS0xFVkJRVlU3UVVGRFVpeFpRVUZKTEZGQlFWRXNTMEZCU3l4UFFVRk1MRU5CUVdFc1MwRkJZaXhEUVVGYU8wRkJRMEVzWVVGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RlFVRnRRaXhEUVVGdVFqczdPMEZCUjBFc1dVRkJTU3hMUVVGTExFMUJRVXdzUzBGQlowSXNRMEZCY0VJc1JVRkJkVUk3UVVGRGNrSXNhVUpCUVU4c1RVRkJUU3hqUVVGT0xFTkJRWEZDTEUxQlFVMHNTVUZCTTBJc1EwRkJVRHRCUVVORU8wRkJRMFk3UVVGRFJqczdPM2RDUVd4Q1V6dEJRVUZGTEdGQlFVOHNTMEZCU3l4SlFVRmFPMEZCUVcxQ096czdPenRyUWtGeFFteENMRWM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU12VUdZN096czdRVUZEUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUVU5TkxGVTdPenM3T3pzN096czdPenM3UVVGWlNpeHpRa0ZCV1N4UlFVRmFMRVZCUVhOQ08wRkJRVUU3TzBGQlFVRTdPMEZCUlhCQ0xGZEJRVXNzVTBGQlRDeEhRVUZwUWl4UlFVRnFRanRCUVVOQkxGZEJRVXNzVTBGQlRDeEhRVUZwUWl4RlFVRnFRanM3UVVGRlFTeFhRVUZMTEZOQlFVd3NSMEZCYVVJc2RVSkJRV0VzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEZGtNc1kwRkJVU3hIUVVGU0xFTkJRVmtzYTBKQlFWb3NSVUZCWjBNc2VVSkJRV1VzUzBGQlppeERRVUZvUXp0QlFVTkVMRXRCUm1kQ0xFTkJRV3BDTzBGQlRHOUNPMEZCVVhKQ096czdPenM3T3pzN096czdPMmREUVZkWExFc3NSVUZCVHl4blFpeEZRVUZyUWp0QlFVTnVReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MRTFCUVU0c1EwRkJZU3hMUVVGaU96dEJRVVZCTEZsQlFVMHNVMEZCVGl4RFFVRm5RaXhQUVVGb1FpeERRVUYzUWl4TFFVRjRRaXhGUVVFclFpeFZRVUZETEVkQlFVUXNSVUZCVXpzN1FVRkZkRU1zWTBGQlRTeHBRa0ZCVGl4RFFVRjNRaXhMUVVGNFFpeEZRVUVyUWl4blFrRkJMMEk3TzBGQlJVRXNXVUZCU1N4RFFVRkRMRTFCUVUwc1YwRkJUaXhEUVVGclFpeEhRVUZzUWl4RFFVRk1MRVZCUVRaQ08wRkJRek5DTEdOQlFVa3NWMEZCVnl4TlFVRk5MR05CUVU0c1EwRkJjVUlzU1VGQlNTeEZRVUY2UWl4RFFVRm1PMEZCUTBFc1kwRkJTU3hSUVVGS0xFVkJRV003TzBGQlJWb3NhMEpCUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RlFVRXlRaXhIUVVFelFqdEJRVU5FTEZkQlNFUXNUVUZIVHpzN1FVRkZUQ3hyUWtGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ08wRkJRMFE3UVVGRFJqdEJRVU5HTEU5QlpFUTdPMEZCWjBKQkxHRkJRVThzVFVGQlRTeEZRVUZpTzBGQlEwUTdPenM3T3pzN096czdLMEpCVDFVc1NTeEZRVUZOTzBGQlFVRTdPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83T3p0QlFVZEJMRlZCUVVrc1YwRkJWeXhOUVVGTkxGTkJRVTRzUTBGQlowSXNTVUZCYUVJc1EwRkJaanRCUVVOQkxGVkJRVWtzUTBGQlF5eFJRVUZNTEVWQlFXVTdRVUZEWWl4WlFVRkpMR3RDUVVGclFpeE5RVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUlVGQmQwSXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRja1FzYTBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGdFFpeEpRVUZ1UWl4SFFVRXdRaXhKUVVGMFF6dEJRVU5CTEdkQ1FVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSTdRVUZEUkN4VFFVaHhRaXhEUVVGMFFqczdRVUZMUVN4dFFrRkJWenRCUVVOVUxHMUNRVUZUTEVOQlJFRTdRVUZGVkN4alFVRkpMR1ZCUmtzN1FVRkhWQ3hyUWtGQlVTeHJRa0ZCVFR0QlFVTmFMRzFDUVVGTExFOUJRVXc3UVVGRFFTeG5Ra0ZCU1N4UFFVRkxMRTlCUVV3c1MwRkJhVUlzUTBGQmNrSXNSVUZCZDBJN1FVRkRkRUlzY1VKQlFVc3NSVUZCVEN4RFFVRlJMRTFCUVZJN1FVRkRRU3h4UWtGQlR5eE5RVUZOTEZOQlFVNHNRMEZCWjBJc1NVRkJhRUlzUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZVVVN4VFFVRllPenRCUVZsRUxHTkJRVTBzVTBGQlRpeERRVUZuUWl4SlFVRm9RaXhKUVVGM1FpeFJRVUY0UWp0QlFVTkVPenRCUVVWRUxHVkJRVk1zVDBGQlZEdEJRVU5CTEdGQlFVOHNVVUZCVUR0QlFVTkJPenM3T3pzN096czdPeXRDUVU5WExFa3NSVUZCVFN4RkxFVkJRVWs3UVVGRGJrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUlVGQmQwSXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRkRU1zWjBKQlFWRXNSMEZCVWl4RFFVRlpMRzFDUVVGdFFpeEpRVUZ1UWl4SFFVRXdRaXhOUVVFeFFpeEhRVUZ0UXl4RlFVRnVReXhIUVVGM1F5eEpRVUZ3UkR0QlFVTkJMR05CUVUwc1QwRkJUaXhEUVVGakxFVkJRV1FzUlVGQmEwSXNSMEZCYkVJN1FVRkRSQ3hQUVVoTkxFTkJRVkE3UVVGSlJEczdPenM3T3pzN096czBRa0ZQVHl4SExFVkJRVXNzUnl4RlFVRkxPMEZCUTJoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1YwRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNSMEZCY2tJc1EwRkJaanRCUVVOQkxGVkJRVWtzVVVGQlNpeEZRVUZqTzBGQlExb3NZMEZCVFN4VlFVRk9MRU5CUVdsQ0xGRkJRV3BDTEVWQlFUSkNMRWRCUVROQ08wRkJRMFE3UVVGRFJqczdPenM3TzIxRFFVZGpMRWNzUlVGQlN6dEJRVU5zUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3TzBGQlIwRXNXVUZCVFN4VFFVRk9MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRWxCUVVrc1JVRkJOVUlzUlVGQlowTXNTVUZCYUVNc1EwRkJjVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZET1VNc1kwRkJUU3hQUVVGT0xFTkJRV01zUzBGQlpDeEZRVUZ4UWl4SFFVRnlRanRCUVVORUxFOUJSa1FzUlVGRlJ5eExRVVpJTEVOQlJWTXNWVUZCVXl4RFFVRlVMRVZCUVZrN1FVRkRia0lzWjBKQlFWRXNSMEZCVWl4RFFVRlpMR2xDUVVGYUxFVkJRU3RDTEVOQlFTOUNPMEZCUTBRc1QwRktSRHRCUVV0RU96czdkMEpCTVVkaE8wRkJRVVVzWVVGQlR5eExRVUZMTEZOQlFWbzdRVUZCZDBJN096czdPMnRDUVRaSE5VSXNWVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlEzSkpWQ3hST3pzN096czdRVUZOU2l4dlFrRkJXU3hQUVVGYUxFVkJRWEZDTzBGQlFVRTdPMEZCUTI1Q0xGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVUwc1VVRkJUaXhIUVVGcFFpeEZRVUZxUWp0QlFVTkJMRlZCUVUwc1RVRkJUaXhIUVVGbExFOUJRV1k3UVVGRFJEczdPenM3T3pzN096czdORUpCVDA4c1J5eEZRVUZMTEZNc1JVRkJWenRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxFMUJRVTBzVVVGQlRpeERRVUZsTEUxQlFXWXNSMEZCZDBJc1EwRkJOVUlzUlVGQkswSTdRVUZETjBJc1dVRkJTU3hQUVVGUExFbEJRVWtzVVVGQlNpeERRVUZoTEUxQlFVMHNVVUZCYmtJc1EwRkJXRHRCUVVOQkxHRkJRVXNzU1VGQlRDeERRVUZWTEVsQlFVa3NWMEZCU2l4RFFVRm5RaXhMUVVGb1FpeEZRVUYxUWl4SlFVRjJRaXhGUVVFMlFpeEhRVUUzUWl4RlFVRnJReXhUUVVGc1F5eERRVUZXTzBGQlEwUXNUMEZJUkN4TlFVZFBPMEZCUTB3c2EwSkJRVlVzUjBGQlZqdEJRVU5FTzBGQlEwWTdPenM3T3pzN096czdPenRKUVZGSExGYzdPenM3T3pzN08wRkJVMG9zZFVKQlFWa3NVVUZCV2l4RlFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4SFFVRTFRaXhGUVVGcFF5eFRRVUZxUXl4RlFVRTBRenRCUVVGQk96dEJRVU14UXl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1MwRkJhRUk3TzBGQlJVRXNWVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwRXNWVUZCVFN4TFFVRk9MRWRCUVdNc1NVRkJaRHRCUVVOQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUVN4VlFVRk5MRlZCUVU0c1IwRkJiVUlzVTBGQmJrSTdRVUZEUkRzN096czdPenM3T3pKQ1FWVk5PMEZCUTB3c1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVUwc1QwRkJXQ3hGUVVGdlFqdEJRVU5zUWl4WlFVRkpMRTFCUVUwc1MwRkJUaXhEUVVGWkxFOUJRV2hDTEVWQlFYbENPMEZCUTNaQ0xHZENRVUZOTEV0QlFVNHNRMEZCV1N4SlFVRmFMRU5CUVdsQ0xFdEJRV3BDTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c1owSkJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRk5MRWxCUVhaQ08wRkJRMFE3UVVGRFJqdEJRVU5HT3pzN096czdPenM0UWtGTFV6dEJRVU5TTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hEUVVGRExFMUJRVTBzVDBGQldDeEZRVUZ2UWp0QlFVTnNRaXhqUVVGTkxFOUJRVTRzUjBGQlowSXNTVUZCYUVJN1FVRkRRU3hqUVVGTkxGVkJRVTRzUTBGQmFVSXNUVUZCVFN4SlFVRjJRanRCUVVORU8wRkJRMFk3T3pzN096czdPenQ1UWtGTlNTeExMRVZCUVU4N1FVRkRWaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUU3hQUVVGWUxFVkJRVzlDTzBGQlEyeENMR05CUVUwc1QwRkJUaXhIUVVGblFpeEpRVUZvUWp0QlFVTkJMRmxCUVVrc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEUxQlFYQkNMRVZCUVRSQ08wRkJRekZDTEdkQ1FVRk5MRk5CUVU0c1EwRkJaMElzVFVGQmFFSXNRMEZCZFVJc1MwRkJka0k3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenQzUWtFMVEyTTdRVUZCUlN4aFFVRlBMRXRCUVVzc1UwRkJXanRCUVVGM1FqczdPM2RDUVVVdlFqdEJRVUZGTEdGQlFVOHNTMEZCU3l4SlFVRmFPMEZCUVcxQ0xFczdjMEpCUTNaQ0xFc3NSVUZCVHp0QlFVRkZMRmRCUVVzc1NVRkJUQ3hIUVVGWkxFdEJRVm83UVVGQmIwSTdPenM3TzBsQk5FTnFReXhST3pzN096czdRVUZOU2l4dlFrRkJXU3hMUVVGYUxFVkJRVzFDTzBGQlFVRTdPMEZCUTJwQ0xGTkJRVXNzVFVGQlRDeEhRVUZqTEVOQlFVTXNRMEZCWmp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFdEJRV1E3UVVGRFJEczdPenQzUWtGRllUdEJRVU5hTEdGQlFVOHNTMEZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQldpeEhRVUZ4UWl4RFFVRXhRenRCUVVORU96czdkMEpCUlZVN1FVRkRWQ3hYUVVGTExFMUJRVXc3UVVGRFFTeGhRVUZQTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVVzc1RVRkJha0lzUTBGQlVEdEJRVU5FT3pzN096dHJRa0ZIV1N4Uk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEpRMjVLVkN4Tk8wRkJSVW9zYjBKQlFXTTdRVUZCUVRzN1FVRkRXaXhSUVVGSkxGRkJRVkVzU1VGQldqdEJRVVZFT3pzN096czdPenM3T3pzeVFrRlBUU3hMTEVWQlFVODdRVUZEV2l4aFFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGUU8wRkJRMFE3T3pzN096czdPenM3TWtKQlQwMHNTeXhGUVVGUE8wRkJRMW9zWVVGQlR5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRXRCUVV3c1EwRkJWeXhOUVVGTkxFdEJRVXNzUzBGQlRDeERRVUZPTEVkQlFXOUNMRWRCUVM5Q0xFTkJRV1lzUTBGQlVEdEJRVU5FT3pzN0swSkJSVlVzVFN4RlFVRlJMRWtzUlVGQlRUdEJRVU4yUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGpRVUZOTEc5Q1FVRk9MRU5CUVRKQ0xFbEJRVWtzVlVGQlNpeERRVUZsTEUxQlFXWXNRMEZCTTBJc1JVRkJiVVFzU1VGQmJrUXNRMEZCZDBRc1ZVRkJVeXhUUVVGVUxFVkJRVzlDT3p0QlFVVXhSU3hwUWtGQlR5eE5RVUZRTEVOQlFXTXNUMEZCWkN4RFFVTkpPMEZCUTBVc2EwSkJRVTA3UVVGRVVpeFhRVVJLTEVWQlNVa3NVMEZLU2l4Rk8wRkJTMGtzWXp0QlFVeEtMRmxCVDBNc1NVRlFSQ3hEUVU5TkxGVkJRVk1zVTBGQlZDeEZRVUZ2UWpzN08wRkJSM2hDTEc5Q1FVRlJMRWxCUVVrc1ZVRkJTaXhEUVVGbExGTkJRV1lzUTBGQlVqdEJRVVZFTEZkQldrUXNSVUZaUnl4TFFWcElMRU5CV1ZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhTEVWQlFXbERMRWRCUVdwRE8wRkJRMEVzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCWmtRN1FVRnBRa1FzVTBGdVFrUTdRVUZ4UWtRc1QwRjBRazBzUTBGQlVEdEJRWGRDUkRzN095dENRVVZWTEU4c1JVRkJVeXhKTEVWQlFVMDdRVUZEZUVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNZMEZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhKUVVGd1F5eERRVUY1UXl4VlFVRlRMRlZCUVZRc1JVRkJjVUk3TzBGQlJUVkVMR2xDUVVGUExFMUJRVkFzUTBGQll5eFBRVUZrTEVOQlEwazdRVUZEUlN4clFrRkJUVHRCUVVSU0xGZEJSRW9zUlVGSlNTeFZRVXBLTEVVN1FVRkxTU3hqTzBGQlRFb3NXVUZQUXl4SlFWQkVMRU5CVDAwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDT3p0QlFVVjRRaXhuUWtGQlNTeG5Ra0ZCWjBJc1NVRkJTU3hWUVVGS0xFTkJRV1VzVTBGQlppeERRVUZ3UWpzN08wRkJSMEVzYjBKQlFWRXNZVUZCVWp0QlFVVkVMRmRCWkVRc1JVRmpSeXhMUVdSSUxFTkJZMU1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEcxQ1FVRmFMRVZCUVdsRExFZEJRV3BETzBGQlEwRXNiVUpCUVU4c1IwRkJVRHRCUVVORUxGZEJha0pFTzBGQmEwSkVMRk5CY0VKRU8wRkJjMEpFTEU5QmRrSk5MRU5CUVZBN1FVRjNRa1E3T3pzMFFrRkZUeXhQTEVWQlFWTXNTU3hGUVVGTk8wRkJRM0pDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzYVVKQlFVNHNRMEZCZDBJc1QwRkJlRUlzUlVGQmFVTXNTVUZCYWtNc1EwRkJjME1zVlVGQlV5eFZRVUZVTEVWQlFYRkNPenRCUVVWNlJDeHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1NVRkJaQ3hEUVVOSk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUktMRVZCU1Vrc1ZVRktTaXhGTzBGQlMwa3NaMEpCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RE8wRkJURW9zV1VGUFF5eEpRVkJFTEVOQlQwMHNWVUZCVXl4VFFVRlVMRVZCUVc5Q096czdRVUZIZUVJc2IwSkJRVkVzU1VGQlNTeFZRVUZLTEVOQlFXVXNVMEZCWml4RFFVRlNPMEZCUlVRc1YwRmFSQ3hGUVZsSExFdEJXa2dzUTBGWlV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeEhRVUZTTEVOQlFWa3NaMEpCUVZvc1JVRkJPRUlzUjBGQk9VSTdRVUZEUVN4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGbVJEdEJRV2xDUkN4VFFXNUNSRHRCUVhGQ1JDeFBRWFJDVFN4RFFVRlFPMEZCZFVKRU96czdPRUpCUlZNc1RTeEZRVUZSTEVrc1JVRkJUU3hUTEVWQlFWYzdRVUZEYWtNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNZMEZCVFN4dFFrRkJUaXhEUVVFd1FpeE5RVUV4UWl4RlFVRnJReXhKUVVGc1F5eERRVUYxUXl4VlFVRlRMRk5CUVZRc1JVRkJiMEk3TzBGQlJYcEVMR2xDUVVGUExFMUJRVkFzUTBGQll5eE5RVUZrTEVOQlEwazdRVUZEUlN4clFrRkJUVHRCUVVSU0xGZEJSRW9zUlVGSlNTeFRRVXBLTEVVN1FVRkxTU3h0UWtGTVNpeEZPMEZCVFVrc1owSkJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhETzBGQlRrb3NXVUZSUXl4SlFWSkVMRU5CVVUwc1ZVRkJVeXhQUVVGVUxFVkJRV3RDT3pzN1FVRkhkRUlzYjBKQlFWRXNUMEZCVWp0QlFVVkVMRmRCWWtRc1JVRmhSeXhMUVdKSUxFTkJZVk1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVdkRExFZEJRV2hETzBGQlEwRXNiVUpCUVU4c1IwRkJVRHRCUVVORUxGZEJhRUpFTzBGQmEwSkVMRk5CY0VKRU8wRkJjMEpFTEU5QmRrSk5MRU5CUVZBN1FVRjNRa1E3T3pzclFrRkZWU3hITEVWQlFVc3NTU3hGUVVGTkxFVXNSVUZCU1R0QlFVTjRRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MR0ZCUVU0c1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1NVRkJla0lzUTBGQk9FSXNWVUZCVXl4TlFVRlVMRVZCUVdsQ096dEJRVVUzUXl4cFFrRkJUeXhOUVVGUUxFTkJRV01zVDBGQlpDeERRVU5KTzBGQlEwVXNhMEpCUVUwc1UwRkVVanM3TzBGQlNVVXNaMEpCUVVrN1FVRktUaXhYUVVSS0xFVkJUMGtzVFVGUVNpeEZPMEZCVVVrc1owSkJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhETzBGQlVrb3NXVUZWUXl4SlFWWkVMRU5CVlUwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDT3pzN1FVRkhlRUlzYjBKQlFWRXNTVUZCU1N4VlFVRktMRU5CUVdVc1UwRkJaaXhEUVVGU08wRkJSVVFzVjBGbVJDeEZRV1ZITEV0QlprZ3NRMEZsVXl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVFpeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2JVSkJRVm9zUlVGQmFVTXNSMEZCYWtNN1FVRkRRU3h0UWtGQlR5eEhRVUZRTzBGQlEwUXNWMEZzUWtRN1FVRnZRa1FzVTBGMFFrUTdRVUYzUWtRc1QwRjZRazBzUTBGQlVEdEJRVEJDUkRzN095dENRVVZWTEVjc1JVRkJTeXhKTEVWQlFVMHNSU3hGUVVGSk8wRkJRM2hDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzWVVGQlRpeERRVUZ2UWl4SFFVRndRaXhGUVVGNVFpeEpRVUY2UWl4RFFVRTRRaXhWUVVGVExFMUJRVlFzUlVGQmFVSTdPMEZCUlRkRExHbENRVUZQTEUxQlFWQXNRMEZCWXl4UFFVRmtMRU5CUTBrN1FVRkRSU3hyUWtGQlRTeFRRVVJTTzBGQlJVVXNaMEpCUVVrN1FVRkdUaXhYUVVSS0xFVkJTMGtzVFVGTVNpeEZPMEZCVFVrc1l6dEJRVTVLTEZsQlVVTXNTVUZTUkN4RFFWRk5MRlZCUVZNc1UwRkJWQ3hGUVVGdlFqczdRVUZGZUVJc1owSkJRVWtzWTBGQll5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJTU3hWUVVGS0xFTkJRV1VzVTBGQlppeERRVUZzUWl4RFFVRnNRanM3UVVGRlFTeHZRa0ZCVVN4WFFVRlNPMEZCUlVRc1YwRmtSQ3hGUVdOSExFdEJaRWdzUTBGalV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeEhRVUZTTEVOQlFWa3NiVUpCUVZvc1JVRkJhVU1zUjBGQmFrTTdRVUZEUVN4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGcVFrUTdRVUZ0UWtRc1UwRnlRa1E3UVVGMVFrUXNUMEY0UWswc1EwRkJVRHRCUVhsQ1JEczdPenM3T3pzN096czdOa0pCVVZFc1J5eEZRVUZMTEVrc1JVRkJUVHRCUVVOc1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnBRaXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU1zWTBGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFVkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xGVkJRVk1zVDBGQlZDeEZRVUZyUWpzN1FVRkZMME1zYVVKQlFVOHNUVUZCVUN4RFFVRmpMRWxCUVdRc1EwRkRRVHRCUVVORkxHdENRVUZOTzBGQlJGSXNWMEZFUVN4RlFVbEJMRTlCU2tFc1JUdEJRVXRCTEdkQ1FVRk5MRmRCUVU0c1EwRkJhMElzU1VGQmJFSXNRenRCUVV4QkxGbEJUME1zU1VGUVJDeERRVTlOTEZWQlFWTXNVMEZCVkN4RlFVRnZRanM3T3p0QlFVbDRRaXh2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVdKRUxFVkJZVWNzUzBGaVNDeERRV0ZUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4cFFrRkJXaXhGUVVFclFpeEhRVUV2UWp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV2hDUkR0QlFXbENSQ3hUUVc1Q1JEdEJRVzlDUkN4UFFYUkNUU3hEUVVGUU8wRkJkVUpFT3pzN096czdPenM3T3pzN0swSkJVMVVzUnl4RlFVRkxMRWtzUlVGQlRTeFRMRVZCUVZjN1FVRkRMMElzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdPMEZCUlRGRExHTkJRVTBzWTBGQlRpeERRVUZ4UWl4SFFVRnlRaXhGUVVFd1FpeEpRVUV4UWl4RFFVRXJRaXhWUVVGVExFOUJRVlFzUlVGQmEwSTdPMEZCUlM5RExHbENRVUZQTEUxQlFWQXNRMEZCWXl4TlFVRmtMRU5CUTBVN1FVRkRSU3hyUWtGQlRUdEJRVVJTTEZkQlJFWXNSVUZKUlN4UFFVcEdMRVU3UVVGTFJTeHRRa0ZNUml4Rk8wRkJUVVVzWjBKQlFVMHNWMEZCVGl4RFFVRnJRaXhKUVVGc1FpeERPMEZCVGtZc1dVRlJReXhKUVZKRUxFTkJVVTBzVlVGQlV5eFBRVUZVTEVWQlFXdENPenM3UVVGSGNrSXNiVUpCUVVRc1IwRkJXU3hSUVVGUkxFOUJRVklzUTBGQldpeEhRVUVyUWl4UFFVRlBMRTlCUVZBc1EwRkJMMEk3UVVGRlJDeFhRV0pFTEVWQllVY3NTMEZpU0N4RFFXRlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEc5Q1FVRlJMRXRCUVZJc1EwRkJZeXh0UWtGQlpDeEZRVUZ0UXl4SFFVRnVRenRCUVVOQkxHMUNRVUZQTEVkQlFWQTdRVUZEUkN4WFFXaENSRHRCUVd0Q1JDeFRRWEJDUkR0QlFYRkNSQ3hQUVhaQ1RTeERRVUZRTzBGQmQwSkVPenM3T3pzN096czdlVU5CVFc5Q08wRkJRMjVDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hWUVVGVkxFVkJRV1E3TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNaVUZCVHl4TlFVRlFMRU5CUVdNc1YwRkJaQ3hEUVVOQk8wRkJRMFVzWjBKQlFVMHNVMEZFVWp0QlFVVkZMSGxDUVVGbExFbEJSbXBDTEVVN1FVRkhSU3d3UWtGQlowSXNTVUZCU1N4VlFVRktMRU5CUVdVc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNRMEZCWml4RFFVaHNRanRCUVVsRkxHZENRVUZOTEVWQlFVTXNUVUZCVFN4VFFVRlFMRVU3UVVGS1VpeFRRVVJCTEVWQlQwRXNTVUZRUVN4Rk8wRkJVVUVzVTBGQlF5eE5RVUZFTEVWQlFWTXNVVUZCVkN4RE96dEJRVkpCTEZWQlZVVXNTVUZXUml4RFFWVlBMRlZCUVZNc1IwRkJWQ3hGUVVGak96czdPMEZCU1c1Q0xHbENRVUZQTEUxQlFWQXNRMEZCWXl4VFFVRmtMRU5CUTBVc1RVRkVSaXhGTzBGQlJVVXNZMEZCU1N4VE8wRkJSazRzV1VGSFJTeEpRVWhHTEVOQlIwOHNWVUZCVXl4VFFVRlVMRVZCUVc5Q096dEJRVVY2UWl4dlFrRkJVU3hOUVVGU0xFZEJRV3RDTEVsQlFVa3NWVUZCU2l4RFFVRmxMRk5CUVdZc1EwRkJiRUk3UVVGRFFTeHRRa0ZCVHl4UFFVRlBMRTFCUVZBc1EwRkJZeXhUUVVGa0xFTkJRMHdzVDBGRVN5eEZPMEZCUlV3c1owSkJRVWtzVlR0QlFVWkRMR0ZCUVZBN1FVRkpSQ3hYUVZaRUxFVkJWVWNzU1VGV1NDeERRVlZSTEZWQlFWTXNWVUZCVkN4RlFVRnhRanRCUVVNelFpeHZRa0ZCVVN4UFFVRlNMRWRCUVcxQ0xFbEJRVWtzVlVGQlNpeERRVUZsTEZWQlFXWXNRMEZCYmtJN096dEJRVWRCTEc5Q1FVRlJMRTlCUVZJN1FVRkZSQ3hYUVdoQ1JDeEZRV2RDUnl4TFFXaENTQ3hEUVdkQ1V5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRVzVDUkR0QlFYRkNSQ3hUUVc1RFJDeEZRVzFEUnl4TFFXNURTQ3hEUVcxRFV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXhyUWtGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRWFJEUkR0QlFYVkRSQ3hQUVhoRFRTeERRVUZRTzBGQmVVTkVPenM3T3pzN096czdhVU5CVFZrN1FVRkRXQ3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRkZCUVZFc1NVRkJTeXhWUVVGTUxFTkJRV2RDTEVWQlFXaENMRU5CUVZvN1FVRkRRU3hoUVVGUExHVkJRVkFzUTBGQmRVSXNTMEZCZGtJN08wRkJSVUVzWVVGQlR5eExRVUZRTzBGQlEwUTdPenM3T3pzN096czdjVU5CVDJkQ08wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hSUVVGUkxFbEJRVXNzVlVGQlRDeERRVUZuUWl4RlFVRm9RaXhEUVVGYU8wRkJRMEVzWVVGQlR5eGxRVUZRTEVOQlFYVkNMRXRCUVhaQ096dEJRVVZCTEZWQlFVa3NUMEZCVHl4TFFVRkxMRWRCUVV3c1JVRkJXRHRCUVVOQkxGVkJRVWtzWTBGQll5eE5RVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUTBGQmJFSTdPenRCUVVkQkxGVkJRVWtzV1VGQldTeFpRVUZaTEV0QlFWb3NRMEZCYTBJc1dVRkJXU3hOUVVGYUxFZEJRWEZDTEVOQlFYWkRMRVZCUVRCRExGbEJRVmtzVFVGQmRFUXNRMEZCYUVJN096dEJRVWRCTEZkQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeERRVUZ3UWl4RlFVRjFRaXhIUVVGMlFpeEZRVUUwUWp0QlFVRkZMR05CUVUwc1EwRkJUaXhKUVVGWExGVkJRVlVzUTBGQlZpeERRVUZZTzBGQlFUQkNPMEZCUTNoRUxHRkJRVThzUzBGQlVEdEJRVU5FT3pzN096czdPenM3YTBOQlRXRTdRVUZEV2l4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEZGQlFWRXNTVUZCU1N4VlFVRktMRU5CUVdVc1JVRkJaaXhEUVVGYU8wRkJRMEVzWVVGQlR5eGxRVUZRTEVOQlFYVkNMRXRCUVhaQ08wRkJRMEVzWVVGQlR5eExRVUZRTzBGQlEwUTdPenM3T3pzN096czdlVU5CVDI5Q0xFOHNSVUZCVXl4SkxFVkJRVTA3UVVGRGJFTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zV1VGQlNTeE5RVUZOTEVsQlFVa3NWVUZCU2l4RFFVRmxMRVZCUVdZc1EwRkJWanRCUVVOQkxGbEJRVWtzVDBGQlR5eEpRVUZZT3p0QlFVVkJMR05CUVUwc1QwRkJUaXhEUVVGakxFOUJRV1FzUlVGQmRVSXNTVUZCZGtJc1EwRkJORUlzVlVGQlF5eFhRVUZFTEVWQlFXbENPenRCUVVVelF5eG5Ra0ZCVFN4UlFVRk9MRU5CUVdVc1YwRkJaaXhGUVVFMFFpeEpRVUUxUWl4RlFVRnJReXhKUVVGc1F5eERRVUYxUXl4VlFVRlRMRkZCUVZRc1JVRkJiVUk3T3p0QlFVZDRSQ3hwUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFVkJRWEJDTEVWQlFYZENMRWRCUVhoQ0xFVkJRVFpDTzBGQlFVVXNhMEpCUVVrc1EwRkJTaXhKUVVGVExGTkJRVk1zUTBGQlZDeERRVUZVTzBGQlFYVkNPMEZCUTNSRUxHMUNRVUZQTEUxQlFVMHNVVUZCVGl4RFFVRmxMRmRCUVdZc1JVRkJORUlzVDBGQlR5eFJRVUZ1UXl4RFFVRlFPMEZCUlVRc1YwRk9SQ3hGUVUxSExFbEJUa2dzUTBGTlVTeFZRVUZUTEZGQlFWUXNSVUZCYlVJN096dEJRVWQ2UWl4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRVZCUVhCQ0xFVkJRWGRDTEVkQlFYaENMRVZCUVRaQ08wRkJRVVVzYTBKQlFVa3NTVUZCU1N4RlFVRlNMRWxCUVdNc1UwRkJVeXhEUVVGVUxFTkJRV1E3UVVGQk5FSTdPMEZCUlRORUxHOUNRVUZSTEVkQlFWSTdRVUZGUkN4WFFXSkVMRVZCWVVjc1MwRmlTQ3hEUVdGVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMRzlDUVVGUkxFZEJRVklzUTBGQldTdzJRa0ZCV2l4RlFVRXlReXhIUVVFelF6dEJRVU5CTEcxQ1FVRlBMRWRCUVZBN1FVRkRSQ3hYUVdoQ1JEdEJRV2xDUkN4VFFXNUNSRHRCUVhGQ1JDeFBRWHBDVFN4RFFVRlFPMEZCTUVKRU96czdPenM3T3pzN096czdhVU5CVTFrc1R5eEZRVUZUTEVrc1JVRkJUVHRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zV1VGQlNTeE5RVUZOTEVWQlFWWTdRVUZEUVN4WlFVRkpMRTlCUVU4c1NVRkJXRHM3TzBGQlIwRXNZMEZCVFN4UlFVRk9MRU5CUVdVc1QwRkJaaXhGUVVGM1FpeEpRVUY0UWl4RlFVRTRRaXhKUVVFNVFpeERRVUZ0UXl4VlFVRlRMRkZCUVZRc1JVRkJiVUk3UVVGRGNFUXNZMEZCU1N4SlFVRktMRU5CUVZNc1VVRkJWRHRCUVVOQkxHbENRVUZQTEUxQlFVMHNVVUZCVGl4RFFVRmxMRTlCUVdZc1JVRkJkMElzVDBGQlR5eFJRVUV2UWl4RFFVRlFPMEZCUlVRc1UwRktSQ3hGUVVsSExFbEJTa2dzUTBGSlVTeFZRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRla0lzWTBGQlNTeEpRVUZLTEVOQlFWTXNVVUZCVkR0QlFVTkJMR2xDUVVGUExFMUJRVTBzVVVGQlRpeERRVUZsTEU5QlFXWXNSVUZCZDBJc1QwRkJUeXhSUVVFdlFpeERRVUZRTzBGQlJVUXNVMEZTUkN4RlFWRkhMRWxCVWtnc1EwRlJVU3hWUVVGVExGRkJRVlFzUlVGQmJVSTdRVUZEZWtJc1kwRkJTU3hKUVVGS0xFTkJRVk1zVVVGQlZEdEJRVU5CTEdsQ1FVRlBMRTFCUVUwc1VVRkJUaXhEUVVGbExFOUJRV1lzUlVGQmQwSXNUMEZCVHl4UlFVRXZRaXhEUVVGUU8wRkJSVVFzVTBGYVJDeEZRVmxITEVsQldrZ3NRMEZaVVN4VlFVRlRMRkZCUVZRc1JVRkJiVUk3UVVGRGVrSXNZMEZCU1N4SlFVRktMRU5CUVZNc1VVRkJWRHM3TzBGQlIwRXNhMEpCUVZFc1IwRkJVanRCUVVWRUxGTkJiRUpFTEVWQmEwSkhMRXRCYkVKSUxFTkJhMEpUTEZWQlFWTXNSMEZCVkN4RlFVRmpPenRCUVVWeVFpeHBRa0ZCVHl4SFFVRlFPMEZCUTBRc1UwRnlRa1E3T3p0QlFYZENSQ3hQUVRsQ1RTeERRVUZRTzBGQkswSkVPenM3YzBOQlJXbENMRThzUlVGQlV6dEJRVU42UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGxRVUZQTEUxQlFWQXNRMEZCWXl4VFFVRmtMRU5CUTBrc1QwRkVTaXhGTzBGQlJVa3NaVUZHU2l4RlFVZEpMRVU3UVVGRFJTeG5Ra0ZCVFN4dFFrRkVVanRCUVVWRkxHZENRVUZOTEVWQlFVTXNUVUZCVFN4VFFVRlFMRVU3UVVGR1VpeFRRVWhLTEVWQlQwa3NTVUZRU2l4Rk8wRkJVVWtzVTBGQlF5eE5RVUZFTEVNN1FVRlNTaXhWUVZWRExFbEJWa1FzUTBGVlRTeFZRVUZUTEZWQlFWUXNSVUZCY1VJN096dEJRVWQ2UWl4clFrRkJVU3hWUVVGU08wRkJSVVFzVTBGbVJDeEZRV1ZITEV0QlprZ3NRMEZsVXl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVFpeHJRa0ZCVVN4TFFVRlNMRU5CUVdNc01FSkJRV1FzUlVGQk1FTXNSMEZCTVVNN1FVRkRRU3hwUWtGQlR5eEhRVUZRTzBGQlEwUXNVMEZzUWtRN1FVRnRRa1FzVDBGd1FrMHNRMEZCVUR0QlFYRkNSRHM3TzNkRFFVVnRRaXhOTEVWQlFWRTdRVUZETVVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNaVUZCVHl4TlFVRlFMRU5CUVdNc1UwRkJaQ3hEUVVOSkxFMUJSRW9zUlR0QlFVVkpMR05CUmtvc1JVRkhTU3hGTzBGQlEwVXNaMEpCUVUwc2JVSkJSRkk3UVVGRlJTeG5Ra0ZCVFN4RlFVRkRMRTFCUVUwc1UwRkJVQ3hGTzBGQlJsSXNVMEZJU2l4RlFVOUpMRWxCVUVvc1JUdEJRVkZKTEZOQlFVTXNVVUZCUkN4RE8wRkJVa29zVlVGVlF5eEpRVlpFTEVOQlZVMHNWVUZCVXl4VFFVRlVMRVZCUVc5Q096czdRVUZIZUVJc2EwSkJRVkVzVTBGQlVqdEJRVVZFTEZOQlprUXNSVUZsUnl4TFFXWklMRU5CWlZNc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRGNrSXNhMEpCUVZFc1MwRkJVaXhEUVVGakxEUkNRVUZrTEVWQlFUUkRMRWRCUVRWRE8wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CYkVKRU8wRkJiVUpFTEU5QmNFSk5MRU5CUVZBN1FVRnhRa1E3T3p0NVEwRkZiMElzVFN4RlFVRlJPMEZCUXpOQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMR1ZCUVU4c1RVRkJVQ3hEUVVGakxGTkJRV1FzUTBGRFNTeE5RVVJLTEVVN1FVRkZTU3hqUVVaS0xFVkJSMGtzUlR0QlFVTkZMR2RDUVVGTkxGVkJSRkk3UVVGRlJTeG5Ra0ZCVFN4RlFVRkRMRTFCUVUwc1UwRkJVQ3hGTzBGQlJsSXNVMEZJU2l4RlFVOUpMRWxCVUVvc1JUdEJRVkZKTEZOQlFVTXNVMEZCUkN4RE96dEJRVkpLTEZWQlYwTXNTVUZZUkN4RFFWZE5MRlZCUVZNc1UwRkJWQ3hGUVVGdlFqczdPMEZCUjNoQ0xHdENRVUZSTEZOQlFWSTdRVUZGUkN4VFFXaENSQ3hGUVdkQ1J5eExRV2hDU0N4RFFXZENVeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UWl4clFrRkJVU3hMUVVGU0xFTkJRV01zTmtKQlFXUXNSVUZCTmtNc1IwRkJOME03UVVGRFFTeHBRa0ZCVHl4SFFVRlFPMEZCUTBRc1UwRnVRa1E3UVVGdlFrUXNUMEZ5UWswc1EwRkJVRHRCUVhOQ1JEczdPM2xEUVVWdlFpeFBMRVZCUVZNN1FVRkROVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1pVRkJUeXhOUVVGUUxFTkJRV01zVTBGQlpDeERRVU5KTEU5QlJFb3NSVHRCUVVWSkxHVkJSa29zUlVGSFNTeEZPMEZCUTBVc1owSkJRVTBzVlVGRVVqdEJRVVZGTEdkQ1FVRk5MRVZCUVVNc1RVRkJUU3hUUVVGUUxFVTdRVUZHVWl4VFFVaEtMRVZCVDBrc1NVRlFTaXhGTzBGQlVVa3NVMEZCUXl4VFFVRkVMRU03TzBGQlVrb3NWVUZYUXl4SlFWaEVMRU5CVjAwc1ZVRkJVeXhWUVVGVUxFVkJRWEZDT3pzN1FVRkhla0lzYTBKQlFWRXNWVUZCVWp0QlFVVkVMRk5CYUVKRUxFVkJaMEpITEV0QmFFSklMRU5CWjBKVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMR3RDUVVGUkxFdEJRVklzUTBGQll5dzJRa0ZCWkN4RlFVRTJReXhIUVVFM1F6dEJRVU5CTEdsQ1FVRlBMRWRCUVZBN1FVRkRSQ3hUUVc1Q1JEdEJRVzlDUkN4UFFYSkNUU3hEUVVGUU8wRkJjMEpFT3pzN2VVTkJSVzlDTEVjc1JVRkJTeXhSTEVWQlFWVXNWU3hGUVVGWk8wRkJRemxETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVjBGQlZ5eEpRVUZKTEZWQlFVb3NRMEZCWlN4SlFVRkpMRTFCUVVvc1IwRkJZU3hUUVVGVExFMUJRWFJDTEVkQlFTdENMRmRCUVZjc1RVRkJla1FzUTBGQlpqczdPMEZCUjBFc1YwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRWxCUVVrc1RVRkJlRUlzUlVGQlowTXNSMEZCYUVNc1JVRkJjVU03UVVGRGJrTXNhVUpCUVZNc1EwRkJWQ3hKUVVGakxFbEJRVWtzUTBGQlNpeERRVUZrTzBGQlEwUTdPenRCUVVkRUxGZEJRVXNzU1VGQlNTeExRVUZKTEVOQlFXSXNSVUZCWjBJc1MwRkJTU3hUUVVGVExFMUJRVGRDTEVWQlFYRkRMRWxCUVhKRExFVkJRVEJETzBGQlEzaERMR2xDUVVGVExFdEJRVWtzU1VGQlNTeE5RVUZxUWl4SlFVRXlRaXhKUVVGSkxFVkJRVW9zUTBGQk0wSTdRVUZEUkRzN08wRkJSMFFzVjBGQlN5eEpRVUZKTEUxQlFVa3NRMEZCWWl4RlFVRm5RaXhOUVVGSkxGZEJRVmNzVFVGQkwwSXNSVUZCZFVNc1MwRkJka01zUlVGQk5FTTdRVUZETVVNc2FVSkJRVk1zVFVGQlNTeEpRVUZKTEUxQlFWSXNSMEZCYVVJc1UwRkJVeXhOUVVGdVF5eEpRVUUyUXl4SlFVRkpMRWRCUVVvc1EwRkJOME03UVVGRFJEczdRVUZGUkN4aFFVRlBMRkZCUVZBN1FVRkRSRHM3TzNsRFFVVnZRanRCUVVOdVFpeFZRVUZKTEZGQlFWRXNTVUZCU3l4VlFVRk1MRU5CUVdkQ0xFVkJRV2hDTEVOQlFWbzdRVUZEUVN4aFFVRlBMR1ZCUVZBc1EwRkJkVUlzUzBGQmRrSTdPMEZCUlVFc1lVRkJUeXhMUVVGUU8wRkJRMFE3T3pzN096czdPenM3YlVOQlQyTXNWeXhGUVVGaE8wRkJRekZDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eGpRVUZOTEU5QlFVNHNRMEZCWXl4WFFVRmtMRVZCUVRKQ0xFbEJRVE5DTEVOQlFXZERMRlZCUVVNc1IwRkJSQ3hGUVVGVE96dEJRVVYyUXl4cFFrRkJUeXhOUVVGUUxFTkJRV01zVTBGQlpDeERRVU5CTEV0QlJFRXNSVHRCUVVWQkxHRkJSa0VzUlVGSFFTeEZPMEZCUTBVc2EwSkJRVTBzVFVGRVVqdEJRVVZGTEd0Q1FVRk5MRVZCUVVNc1RVRkJUU3hUUVVGUUxFVkJSbElzUlR0QlFVZEZMRzlDUVVGUkxFYzdRVUZJVml4WFFVaEJMRVZCVVVFc1NVRlNRU3hGTzBGQlUwRXNWMEZCUXl4TlFVRkVMRVZCUVZNc1VVRkJWQ3hETzBGQlZFRXNXVUZWUlN4SlFWWkdMRU5CVlU4c1ZVRkJVeXhIUVVGVUxFVkJRV003T3p0QlFVZHVRaXh2UWtGQlVTeEhRVUZTTzBGQlEwUXNWMEZrUkN4RlFXVkRMRXRCWmtRc1EwRmxUeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU51UWl4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGcVFrUTdRVUZyUWtRc1UwRndRa1E3UVVGeFFrUXNUMEYyUWswc1EwRkJVRHRCUVhkQ1JEczdPelJDUVVWUExFc3NSVUZCVHp0QlFVTmlMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEdWQlFVOHNUVUZCVUN4RFFVRmpMRTFCUVdRc1EwRkRTVHRCUVVORkxHZENRVUZOTzBGQlJGSXNVMEZFU2l4RlFVbEpMRXM3UVVGS1NpeFZRVTFETEVsQlRrUXNRMEZOVFN4VlFVRlRMRWxCUVZRc1JVRkJaVHM3TzBGQlIyNUNMR3RDUVVGUkxFbEJRVWtzVlVGQlNpeERRVUZsTEVsQlFXWXNRMEZCVWp0QlFVTkVMRk5CVmtRc1JVRlhReXhMUVZoRUxFTkJWMDhzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEYmtJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEVkQlFXUTdRVUZEUVN4cFFrRkJUeXhIUVVGUU8wRkJRMFFzVTBGa1JEdEJRV2RDUkN4UFFXcENUU3hEUVVGUU8wRkJhMEpFT3pzN2EwTkJSV0VzVnl4RlFVRmhPMEZCUTNwQ0xHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHVkJRVThzVFVGQlVDeERRVUZqTEZOQlFXUXNRMEZEU1N4TFFVUktMRVU3UVVGRlNTeHRRa0ZHU2l4RlFVZEpMRVU3UVVGRFJTeG5Ra0ZCVFR0QlFVUlNMRk5CU0Vvc1JVRk5TU3hKUVU1S0xFVTdRVUZQU1N4VFFVRkRMRk5CUVVRc1JVRkJXU3hUUVVGYUxFTTdRVUZRU2l4VlFWTkRMRWxCVkVRc1EwRlRUU3hWUVVGVExFZEJRVlFzUlVGQll6czdPMEZCUjJ4Q0xHdENRVUZSTEVkQlFWSTdRVUZEUkN4VFFXSkVMRVZCWTBNc1MwRmtSQ3hEUVdOUExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEyNUNMR3RDUVVGUkxFdEJRVklzUTBGQll5eHhRa0ZCWkN4RlFVRnhReXhIUVVGeVF6dEJRVU5CTEdsQ1FVRlBMRWRCUVZBN1FVRkRSQ3hUUVdwQ1JEdEJRV3RDUkN4UFFXNUNUU3hEUVVGUU8wRkJiMEpFT3pzN1owTkJSVmNzUXl4RlFVRkhPMEZCUTJJc1lVRkJUeXhKUVVGSkxGZEJRVW9zUTBGQlowSXNUMEZCYUVJc1JVRkJlVUlzVFVGQmVrSXNRMEZCWjBNc1EwRkJhRU1zUTBGQlVEdEJRVU5FT3pzN1owTkJSVmNzUXl4RlFVRkhPMEZCUTJJc1lVRkJUeXhKUVVGSkxGZEJRVW9zUTBGQlowSXNUMEZCYUVJc1JVRkJlVUlzVFVGQmVrSXNRMEZCWjBNc1EwRkJhRU1zUTBGQlVEdEJRVU5FT3pzN096dHJRa0ZIV1N4Tk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBsRGFuRkNWQ3hSTzBGQlJVb3NiMEpCUVZrc1NVRkJXaXhGUVVGclFpeEpRVUZzUWl4RlFVRjNRanRCUVVGQk96dEJRVU4wUWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SlFVRmlPMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzU1VGQllqdEJRVU5CTEZWQlFVMHNaVUZCVGl4SFFVRjNRaXhGUVVGNFFqdEJRVVZFT3pzN08yZERRVVZYTEZVc1JVRkJXVHRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2MwSkJRWE5DTzBGQlEzaENMSEZDUVVGaExFVkJSRmM3UVVGRmVFSXNkMEpCUVdkQ0xFVkJSbEU3UVVGSGVFSXNORUpCUVc5Q0xFVkJTRWs3UVVGSmVFSXNNa0pCUVcxQ0xFVkJTa3M3UVVGTGVFSXNjVUpCUVdFN1FVRk1WeXhQUVVFeFFqdEJRVTlCTEZsQlFVMHNaVUZCVGl4RFFVRnpRaXhWUVVGMFFpeEpRVUZ2UXl4dFFrRkJjRU03UVVGRFJEczdPMjFEUVVWakxGVXNSVUZCV1N4VExFVkJRVmNzUnl4RlFVRkxMRXNzUlVGQlR6dEJRVU5vUkN4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEdsQ1FVRnBRaXhKUVVGSkxGZEJRVW9zUTBGQlowSXNVMEZCYUVJc1JVRkJNa0lzUjBGQk0wSXNSVUZCWjBNc1MwRkJhRU1zUTBGQmNrSTdPMEZCUlVFc1dVRkJUU3hsUVVGT0xFTkJRWE5DTEVsQlFYUkNMRU5CUVRKQ0xHTkJRVE5DTzBGQlEwUTdPenM3TzBsQlIwY3NWeXhIUVVWS0xIRkNRVUZaTEZOQlFWb3NSVUZCZFVJc1IwRkJka0lzUlVGQk5FSXNTMEZCTlVJc1JVRkJiVU03UVVGQlFUczdRVUZEYWtNc1RVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNVVUZCVFN4VFFVRk9MRWRCUVd0Q0xGTkJRV3hDTzBGQlEwRXNVVUZCVFN4SFFVRk9MRWRCUVZrc1IwRkJXanRCUVVOQkxGRkJRVTBzUzBGQlRpeEhRVUZqTEV0QlFXUTdRVUZEUkN4RE96dEpRVWxITEZrN1FVRkZTaXgzUWtGQldTeFJRVUZhTEVWQlFYTkNMRkZCUVhSQ0xFVkJRV2RETzBGQlFVRTdPMEZCUXpsQ0xGRkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGRkJRV3BDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGRkJRV3BDTzBGQlEwUTdPenM3T0VKQlJWTXNVU3hGUVVGVkxGRXNSVUZCVlRzN08wRkJSemRDT3pzN096dHJRa0ZIV1N4Uk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZEVaanM3UVVGRFFUczdPenRCUVVOQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlFUaENUU3hqT3pzN096czdRVUZMU2l3d1FrRkJXU3hWUVVGYUxFVkJRWGRDTzBGQlFVRTdPMEZCUTNSQ0xGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRkZCUVVrc1EwRkJReXhWUVVGTUxFVkJRV2xDTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2QwSkJRVllzUTBGQlRqczdRVUZGYWtJc1ZVRkJUU3hYUVVGT0xFZEJRVzlDTEZWQlFYQkNPMEZCUTBFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEdGQlFXRXNUVUZCTjBJN08wRkJSVUVzVlVGQlRTeFBRVUZPTEVkQlFXZENMSE5DUVVGVkxFMUJRVTBzVjBGQmFFSXNSVUZCTmtJc1RVRkJOME03T3p0QlFVZEJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMRkZCUVVrc1kwRkJZeXgxUWtGQllTeE5RVUZpTEVWQlFXOUNMRTlCUVhCQ0xFTkJRV3hDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGZEJRV3BDTzBGQlEwRXNWVUZCVFN4TlFVRk9MRWRCUVdVc2MwSkJRV1k3T3p0QlFVZEJMRlZCUVUwc2JVSkJRVTRzUjBGQk5FSXNSVUZCTlVJN096dEJRVWRCTEZWQlFVMHNVVUZCVGl4SFFVRnBRaXhGUVVGcVFqczdPMEZCUjBFc1ZVRkJUU3h4UWtGQlRpeEhRVUU0UWl4RlFVRTVRanM3TzBGQlIwRXNWVUZCVFN4cFFrRkJUaXhIUVVFd1FpeEpRVUV4UWpzN096czdRVUZOUkRzN096czdPenM3T3pzN096czdPenM3YjBOQk1rTmxPMEZCUTJRc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNWVUZCWWp0QlFVTkVPenM3T3pzN096czdPMmREUVU5WExFOHNSVUZCVXp0QlFVTnVRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WFFVRkxMRWxCUVVrc1MwRkJWQ3hKUVVGclFpeE5RVUZOTEZWQlFYaENMRVZCUVc5RE96dEJRVVZzUXl4WlFVRkpMRmRCUVZjc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEV0QlFXcENMRU5CUVdZN1FVRkRRU3haUVVGSkxGTkJRVk1zVVVGQlZDeExRVUZ6UWl4UFFVRXhRaXhGUVVGdFF6dEJRVU5xUXl4cFFrRkJUeXhSUVVGUU8wRkJRMFE3UVVGRFJqczdRVUZGUkN4WlFVRk5MRzlDUVVGT08wRkJRMFE3T3p0NVEwRkZiMElzVlN4RlFVRlpPMEZCUXk5Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMRmxCUVVrc1YwRkJWeXhYUVVGWExFdEJRVmdzUTBGQmFVSXNTMEZCYWtJc1EwRkJaanRCUVVOQkxGbEJRVWtzVTBGQlV5eERRVUZVTEUxQlFXZENMRk5CUVhCQ0xFVkJRU3RDTzBGQlF6ZENMR2RDUVVGTkxIbENRVUZPTEVOQlFXZERMRlZCUVdoRExFVkJRVFJETEVsQlFUVkRMRU5CUVdsRUxGVkJRVU1zVlVGQlJDeEZRVUZuUWp0QlFVTXZSQ3huUWtGQlNTeFZRVUZWTEUxQlFVMHNVVUZCVGl4RFFVRmxMR1ZCUVdZc1EwRkJLMElzVlVGQkwwSXNRMEZCWkR0QlFVTkJMR2RDUVVGSkxFOUJRVW9zUlVGQllUczdRVUZGV0N4dFFrRkJTeXhKUVVGSkxFdEJRVlFzU1VGQmEwSXNUVUZCVFN4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUXl4dlFrRkJTU3hYUVVGWExFMUJRVTBzVlVGQlRpeERRVUZwUWl4TFFVRnFRaXhEUVVGbU8wRkJRMEVzYjBKQlFVa3NVMEZCVXl4UlFVRlVMRXRCUVhOQ0xFOUJRVEZDTEVWQlFXMURPMEZCUTJwRExIbENRVUZQTEZGQlFWRXNVMEZCVXl4WFFVRnFRaXhEUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5HTEdGQlVrUXNUVUZSVHp0QlFVTk1MSEZDUVVGUExFOUJRVThzZFVKQlFWQXNRMEZCVUR0QlFVTkVPMEZCUTBZc1YwRmlSRHRCUVdORUxGTkJaa1FzVFVGbFR6dEJRVU5NTEdOQlFVa3NWVUZCVlN4TlFVRk5MRkZCUVU0c1EwRkJaU3hsUVVGbUxFTkJRU3RDTEZWQlFTOUNMRU5CUVdRN1FVRkRRU3hqUVVGSkxFOUJRVW9zUlVGQllUczdRVUZGV0N4cFFrRkJTeXhKUVVGSkxFdEJRVlFzU1VGQmEwSXNUVUZCVFN4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUXl4clFrRkJTU3hYUVVGWExFMUJRVTBzVlVGQlRpeERRVUZwUWl4TFFVRnFRaXhEUVVGbU8wRkJRMEVzYTBKQlFVa3NVMEZCVXl4UlFVRlVMRXRCUVhOQ0xFOUJRVEZDTEVWQlFXMURPMEZCUTJwRExIVkNRVUZQTEZGQlFWRXNVMEZCVXl4WFFVRnFRaXhEUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5HTEZkQlVrUXNUVUZSVHp0QlFVTk1MRzFDUVVGUExFOUJRVThzZDBKQlFWQXNRMEZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSaXhQUVM5Q1RTeERRVUZRTzBGQlowTkVPenM3T3pzN096czdPenRuUTBGUlZ5eFhMRVZCUVdFN1FVRkRka0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRkZCUVZFc1JVRkJXanM3TzBGQlIwRXNWVUZCU1N4WlFVRmhMRmRCUVVRc1owTkJRWE5ETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUVVNc1pVRkJUeXhMUVVGUU8wRkJRV01zVDBGQmFFWTdPMEZCUlVFc1YwRkJTeXhKUVVGSkxFdEJRVlFzU1VGQmEwSXNUVUZCVFN4VlFVRjRRaXhGUVVGdlF6dEJRVU5zUXl4WlFVRkpMRmRCUVZjc1RVRkJUU3hWUVVGT0xFTkJRV2xDTEV0QlFXcENMRU5CUVdZN1FVRkRRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFZRVUZWTEZOQlFWTXNVVUZCYmtJc1EwRkJXRHRCUVVORU8wRkJRMFFzWVVGQlR5eExRVUZRTzBGQlEwUTdPenM3T3pzN096dDVRMEZOYjBJN1FVRkRia0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1pVRkJZanRCUVVORU96czdPenM3T3pzN2RVTkJUV3RDTEZFc1JVRkJWVHRCUVVNelFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRmxCUVUwc1pVRkJUaXhIUVVGM1FpeFJRVUY0UWp0QlFVTkVPenM3T3pzN096czdiVU5CVFdNc1R5eEZRVUZUTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZkQlFVc3NTVUZCU1N4UlFVRlVMRWxCUVhGQ0xFMUJRVTBzVlVGQk0wSXNSVUZCZFVNN1FVRkRja01zV1VGQlNTeE5RVUZOTEZWQlFVNHNRMEZCYVVJc1VVRkJha0lzUlVGQk1rSXNVVUZCTTBJc1MwRkJkME1zVDBGQk5VTXNSVUZCY1VRN1FVRkRia1FzWjBKQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGcVFpeERRVUYzUWl4UlFVRjRRaXhGUVVGclF5eERRVUZzUXp0QlFVTkVPMEZCUTBZN1FVRkRSanM3T3pzN096czdPMjFEUVUxakxGTXNSVUZCVnp0QlFVTjRRaXhWUVVGSkxFTkJRVU1zVTBGQlRDeEZRVUZuUWp0QlFVTmtMR1ZCUVU4c2VVSkJRVkE3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4bFFVRlBMR3RDUVVGclFpeFRRVUY2UWp0QlFVTkVPMEZCUTBZN096czdPenM3T3pzN096dG5RMEZUVnl4VkxFVkJRVmtzU3l4RlFVRlBPMEZCUXpkQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3pzN1FVRkhNME1zWTBGQlRTeGxRVUZPTEVkQlFYZENMRk5CUVhoQ08wRkJRMEVzWTBGQlRTeHZRa0ZCVGl4RFFVRXlRaXhaUVVFelFpeEZRVUY1UXl4UlFVRjZReXhGUVVGdFJDeE5RVUZ1UkN4RlFVRXlSQ3hWUVVFelJDeEZRVUYxUlN4SlFVRjJSU3hEUVVFMFJTeFZRVUZUTEV0QlFWUXNSVUZCWjBJN1FVRkRNVVlzYTBKQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVZvN1FVRkRRU3hyUWtGQlVTeExRVUZTTzBGQlEwUXNVMEZJUkN4RlFVZEhMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRMllzYTBKQlFWRXNSMEZCVWl4RFFVRlpMR2xDUVVGYU8wRkJRMEVzYVVKQlFVOHNSMEZCVUR0QlFVTkVMRk5CVGtRN1FVRlBSQ3hQUVZoTkxFTkJRVkE3UVVGWlJEczdPenM3T3pzN096dDVRMEZQYjBJc1ZTeEZRVUZaTEUwc1JVRkJVU3haTEVWQlFXTXNVeXhGUVVGWE8wRkJRMmhGTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVdsQ0xFMUJRV3BDTEVWQlFYbENPenRCUVVVeFF5eFpRVUZKTEUxQlFVMHNaVUZCVGl4TFFVRXdRaXhUUVVFNVFpeEZRVUY1UXpzN08wRkJSM1pETEdsQ1FVRlBMRkZCUVZFc1RVRkJUU3hsUVVGa0xFTkJRVkE3UVVGRFJDeFRRVXBFTEUxQlNVODdPenM3TzBGQlMwd3NZMEZCU1R0QlFVTkdMR2RDUVVGSkxFMUJRVW9zUlVGQldUdEJRVUZCT3p0QlFVVldMRzlDUVVGSkxHdENRVUZLTzBGQlEwRXNiMEpCUVVrc2IwSkJRVW83T3p0QlFVZEJMSE5DUVVGTkxFMUJRVTRzUTBGQllTeHJRa0ZCWWl4SFFVRnJReXhKUVVGc1F5eERRVUYxUXl4VlFVRlRMRTlCUVZRc1JVRkJhMEk3TzBGQlJYWkVMRGhDUVVGWkxFdEJRVXNzVVVGQlVTeE5RVUZpTEVOQlFWbzdRVUZEUVN4blEwRkJZeXhQUVVGa08wRkJRMEVzZVVKQlFVOHNUVUZCVFN4cFFrRkJUaXhEUVVGM1FpeFRRVUY0UWl4RlFVRnRReXhOUVVGdVF5eEZRVUV5UXl4RlFVRXpReXhGUVVFclF5eFhRVUV2UXl4RlFVRTBSQ3hUUVVFMVJDeERRVUZRTzBGQlJVUXNhVUpCVGtRc1JVRk5SeXhKUVU1SUxFTkJUVkVzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY0VJc2VVSkJRVThzVFVGQlRTeHBRa0ZCVGl4RFFVRjNRaXhUUVVGNFFpeEZRVUZ0UXl4TlFVRnVReXhGUVVFeVF5eEhRVUV6UXl4RlFVRm5SQ3hYUVVGb1JDeEZRVUUyUkN4VFFVRTNSQ3hEUVVGUU8wRkJSVVFzYVVKQlZFUXNSVUZUUnl4SlFWUklMRU5CVTFFc1ZVRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlEzUkNMSE5DUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5VTERSQ1FVRlJMRXRCUVZJN1FVRkRSQ3h0UWtGR1JDeE5RVVZQTzBGQlEwd3NNa0pCUVU4c05rSkJRVkE3UVVGRFJEdEJRVU5HTEdsQ1FXWkVMRVZCWlVjc1MwRm1TQ3hEUVdWVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMREJDUVVGUkxFZEJRVklzUTBGQldTeEhRVUZhTzBGQlEwRXNlVUpCUVU4c1IwRkJVRHRCUVVORUxHbENRV3hDUkR0QlFVNVZPMEZCZVVKWU8wRkJRMFlzVjBFelFrUXNRMEV5UWtVc1QwRkJUeXhMUVVGUUxFVkJRV003UVVGRFpDeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVTkJRVm83UVVGRFFTeG5Ra0ZCU1N4bFFVRmxMRXRCUVVzc1MwRkJUQ3hEUVVGWkxFdEJRVXNzVFVGQlRDeExRVUZuUWl4TFFVRnFRaXhIUVVFd1FpeERRVUZ5UXl4RFFVRnVRanRCUVVOQkxHZENRVUZKTEdsQ1FVRnBRanRCUVVOdVFpeDVRa0ZCVnl4WFFVUlJPMEZCUlc1Q0xHMUNRVUZKTEZGQlJtVTdRVUZIYmtJc01rSkJRV0U3UVVGRFlpeDNRa0ZCVVN3NFJrRkVTenRCUVVWaUxHOUNRVUZKTEdGQlJsTTdRVUZIWWl3d1FrRkJWU3haUVVGWkxGbEJRVm9zUjBGQk1rSXNZVUZJZUVJN1FVRkpZaXg1UWtGQlV5dzRRa0ZCT0VJN1FVRktNVUlzWlVGSVRTeEZRVUZ5UWp0QlFWTkJMR3RDUVVGTkxHVkJRVTRzUjBGQmQwSXNZMEZCZUVJN1FVRkRRU3hyUWtGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFTkJRWE5DTEdOQlFYUkNPMEZCUTBFc2JVSkJRVThzVVVGQlVTeGpRVUZTTEVOQlFWQTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRjJSRTBzUTBGQlVEdEJRWGRFUkRzN096czdPenM3T3pzN096czdjME5CVjJsQ0xGRXNSVUZCVlN4TkxFVkJRVkVzV1N4RlFVRmpMRThzUlVGQlV5eFRMRVZCUVZjN1FVRkRjRVVzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRk5CUVZNc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZOQlFYSkNMRU5CUVdJN1FVRkRRU3hWUVVGSkxHZENRVUZLT3p0QlFVVkJMR05CUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXbENMRTFCUVdwQ0xFVkJRWGxDT3p0QlFVVXhReXhyUWtGQlZTeEZRVUZETEUxQlFVc3NVMEZCVGl4RlFVRnBRaXhKUVVGSkxFMUJRWEpDTEVWQlFUWkNMRTFCUVUwc1RVRkJUU3hQUVVGNlF5eEZRVUZyUkN4TlFVRk5MRVZCUVVNc1ZVRkJWU3hWUVVGWUxFVkJRWFZDTEZGQlFWRXNiVUpCUVM5Q0xFVkJRVzlFTEZGQlFWRXNSVUZCUXl4VlFVRlZMRkZCUVZnc1JVRkJjVUlzVVVGQlVTeE5RVUUzUWl4RlFVRnhReXhqUVVGakxGbEJRVzVFTEVWQlFUVkVMRVZCUVhoRUxFVkJRVlk3TzBGQlJVRXNZMEZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVRsQ0xFVkJRWFZETEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUXpsRExHTkJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRjBRanM3UVVGRlFTeGpRVUZKTEU5QlFVOHNVVUZCV0N4RlFVRnhRanRCUVVGQk96dEJRVVZ1UWl4clFrRkJTU3hOUVVGTkxFOUJRVThzU1VGQlVDeERRVUZaTEU5QlFVOHNVVUZCYmtJc1JVRkJOa0lzWlVGQk4wSXNSVUZCT0VNc2RVSkJRVGxETEVOQlFWWTdRVUZEUVN4clFrRkJTU3hQUVVGUExFOUJRVmdzUlVGQmIwSTdRVUZEYkVJc2IwSkJRVWtzWjBKQlFVb3NRMEZCY1VJc1YwRkJja0lzUlVGQmEwTXNWVUZCVXl4RFFVRlVMRVZCUVZrN1FVRkROVU1zYzBKQlFVa3NUVUZCVFN4RlFVRkZMRWRCUVZvN1FVRkRRU3h6UWtGQlNTeFBRVUZQTEdWQlFXVXNTVUZCWml4RFFVRnZRaXhIUVVGd1FpeERRVUZZTzBGQlEwRXNjMEpCUVVrc1VVRkJVU3huUWtGQlowSXNTVUZCYUVJc1EwRkJjVUlzUjBGQmNrSXNRMEZCV2pzN1FVRkZRU3h6UWtGQlNTeFJRVUZSTEV0QlFWb3NSVUZCYlVJN1FVRkRha0lzZDBKQlFVa3NTMEZCU2p0QlFVTkJMRFJDUVVGUkxFZEJRVkk3UVVGRFJEdEJRVU5HTEdsQ1FWUkVPMEZCVlVRc1pVRllSQ3hOUVZkUE8wRkJRVUU3UVVGRFRDeHpRa0ZCU1N4WlFVRlpMRmxCUVZrc1dVRkJWenRCUVVOeVF5eDNRa0ZCU1R0QlFVTkdMREJDUVVGSkxFbEJRVWtzVFVGQlVpeEZRVUZuUWp0QlFVTmtMQ3RDUVVGUExHbEVRVUZRTzBGQlEwRXNjME5CUVdNc1UwRkJaRHRCUVVORU96dEJRVVZFTERCQ1FVRkpMRWxCUVVrc1VVRkJTaXhEUVVGaExFZEJRV0lzUTBGQmFVSXNUMEZCYWtJc1EwRkJlVUlzVlVGQmVrSXNUVUZCZVVNc1EwRkJReXhEUVVFeFF5eEpRVUVyUXl4SlFVRkpMRkZCUVVvc1EwRkJZU3hIUVVGaUxFTkJRV2xDTEU5QlFXcENMRU5CUVhsQ0xGTkJRVk1zVFVGQmJFTXNUVUZCT0VNc1EwRkJReXhEUVVGc1J5eEZRVUZ4Unp0QlFVTnVSeXdyUWtGQlR5eGhRVUZRTEVOQlFYRkNMRk5CUVhKQ08wRkJRMEVzTkVKQlFVa3NUVUZCVVN4SlFVRkpMRkZCUVVvc1EwRkJZU3hIUVVGNlFqczdRVUZGUVN3MFFrRkJTU3hMUVVGS08wRkJRMEVzWjBOQlFWRXNSMEZCVWp0QlFVTkVPMEZCUTBZc2NVSkJZa1FzUTBGaFJTeFBRVUZQTEVOQlFWQXNSVUZCVlRzN1FVRkZXRHRCUVVOR0xHMUNRV3BDWlN4RlFXbENZaXhIUVdwQ1lTeERRVUZvUWp0QlFVUkxPMEZCYlVKT08wRkJha05yUWp0QlFXdERjRUlzVjBGc1EwUXNUVUZyUTA4c1NVRkJTU3hOUVVGS0xFVkJRVms3TzBGQlJXcENMR2RDUVVGSkxHdENRVUZyUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExFOUJRVThzVTBGQldpeERRVUZZTEVOQlFYUkNPMEZCUTBFc1owSkJRVWtzWjBKQlFVbzdPenRCUVVkQkxHZENRVUZKTEdkQ1FVRm5RaXhYUVVGd1FpeEZRVUZwUXp0QlFVTXZRaXgzUWtGQlZTeG5Ra0ZCWjBJc1YwRkJNVUk3UVVGRFJDeGhRVVpFTEUxQlJVODdRVUZEVEN4M1FrRkJWU3hsUVVGV08wRkJRMFE3TzBGQlJVUXNaMEpCUVVrc1QwRkJTaXhGUVVGaE8wRkJRMWdzY1VKQlFVOHNVVUZCVUN4SFFVRnJRaXhuUTBGQmIwSXNVVUZCVVN4TFFVRTFRaXhEUVVGc1FqczdRVUZGUVN4dlFrRkJUU3hSUVVGT0xFTkJRV1VzVjBGQlppeERRVUV5UWl4TlFVRXpRanM3TzBGQlIwRXNhMEpCUVVrc1dVRkJZU3hQUVVGUExGTkJRVklzUjBGQmNVSXNUMEZCVHl4VFFVRTFRaXhIUVVGM1F5eEZRVUY0UkR0QlFVTkJMR3RDUVVGSkxHOUNRVUZ2UWl4RlFVRkRMRlZCUVZVc1VVRkJVU3hMUVVGdVFpeEZRVUV3UWl4SlFVRkpMRkZCUVZFc1NVRkJkRU1zUlVGQk5FTXNVVUZCVVN4VlFVRlZMRTlCUVRsRUxFVkJRWFZGTEZGQlFWRXNWVUZCVlN4TlFVRjZSaXhGUVVGcFJ5eFRRVUZUTEdkRFFVRnZRaXhSUVVGUkxFdEJRVFZDTEVOQlFURkhMRVZCUVhoQ096czdRVUZIUVN4clFrRkJTU3hqUVVGakxFVkJRVU1zWVVGQllTeHBRa0ZCWkN4RlFVRnBReXhMUVVGTExFOUJRVThzUjBGQlVDeERRVUZYTEUxQlFXcEVMRVZCUVhsRUxGZEJRVmNzVDBGQlR5eFRRVUV6UlN4RlFVRnNRanRCUVVOQkxIRkNRVUZQTEZkQlFWQXNSMEZCY1VJc1YwRkJja0k3UVVGRFFTeHhRa0ZCVHl4UFFVRlFMRWRCUVdsQ0xFOUJRV3BDT3p0QlFVVkJMRzlDUVVGTkxHVkJRVTRzUjBGQmQwSXNWMEZCZUVJN1FVRkRRU3h2UWtGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFTkJRWE5DTEUxQlFYUkNPMEZCUTBFc2MwSkJRVkVzVjBGQlVqdEJRVVZFTzBGQlEwWXNWMEV2UWswc1RVRXJRa0U3UVVGRFRDeHRRa0ZCVHl4NVEwRkJVRHRCUVVORU8wRkJSVVlzVTBGNFJVUTdRVUY1UlVRc1QwRTNSVTBzUTBGQlVEdEJRVGhGUkRzN096czdPenM3T3pzN096czdPenR6UTBGaGFVSXNVeXhGUVVGWExFMHNSVUZCVVN4VExFVkJRVmM3UVVGRE9VTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFRRVUZUTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhUUVVGeVFpeERRVUZpT3p0QlFVVkJMRlZCUVVrc1ZVRkJWU3hGUVVGRExFMUJRVXNzVTBGQlRpeEZRVUZwUWl4SlFVRkpMRTFCUVhKQ0xFVkJRVFpDTEUxQlFVMHNUVUZCVFN4UFFVRjZReXhGUVVGclJDeE5RVUZOTEVWQlFVTXNWVUZCVlN4VlFVRllMRVZCUVhWQ0xGRkJRVkVzYlVKQlFTOUNPMEZCUXk5RUxHdENRVUZSTEVWQlFVTXNWMEZCVnl4VFFVRmFMRVZCUVhWQ0xGRkJRVkVzVFVGQkwwSXNSVUZFZFVRc1JVRkJlRVFzUlVGQlpEczdRVUZIUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRha1FzWTBGQlNTeFBRVUZQTEVsQlFWQXNRMEZCV1N4SlFVRmFMRXRCUVhGQ0xFZEJRWHBDTEVWQlFUaENPMEZCUXpWQ0xHOUNRVUZSTEU5QlFVOHNTVUZCVUN4RFFVRlpMRXRCUVhCQ08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c1QwRkJVQ3hGUVVGblFpeFBRVUZQTEVsQlFWQXNRMEZCV1N4SlFVRTFRanRCUVVORU8wRkJRMFlzVTBGT1JEdEJRVTlFTEU5QlVrMHNRMEZCVUR0QlFWTkVPenM3YlVOQlJXTXNUeXhGUVVGVE8wRkJRM1JDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHTkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExGbEJRVWtzYTBKQlFXdENMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFhRVUYyUXpzN08wRkJSMEVzV1VGQlNTeERRVUZETEUxQlFVMHNhVUpCUVZBc1NVRkJORUlzUTBGQlF5eGxRVUZxUXl4RlFVRnJSRHRCUVVOb1JDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2NVSkJRVm83UVVGRFFTeHBRa0ZCVHl4UlFVRlJMRTlCUVZJc1EwRkJVRHRCUVVORU96dEJRVVZFTEZsQlFVa3NaVUZCWlN4UlFVRlJMRVZCUVZJc1EwRkJWeXhMUVVGWUxFTkJRV2xDTEVkQlFXcENMRU5CUVc1Q08wRkJRMEVzV1VGQlNTeG5Ra0ZCWjBJc1lVRkJZU3hEUVVGaUxFbEJRV3RDTEVsQlFXeENMRWRCUVhsQ0xHRkJRV0VzUTBGQllpeERRVUY2UWl4SFFVRXlReXhIUVVFelF5eEhRVUZwUkN4aFFVRmhMRU5CUVdJc1EwRkJja1U3TzBGQlJVRXNXVUZCU1N4cFFrRkJhVUlzTkVKQlFXZENMR0ZCUVdoQ0xFTkJRWEpDTzBGQlEwRXNXVUZCU1N4blFrRkJaMElzYzBKQlFWVXNVVUZCVVN4SlFVRnNRaXhGUVVGM1FpeEpRVUY0UWl4TFFVRnBReXhUUVVGeVJEdEJRVU5CTEZsQlFVa3NZMEZCWXl4elFrRkJWU3hSUVVGUkxFVkJRV3hDTEVWQlFYTkNMRWxCUVhSQ0xFdEJRU3RDTEZOQlFXcEVPenRCUVVkQkxGbEJRVWtzYVVKQlFXbENMRmRCUVhKQ0xFVkJRV3RETzBGQlEyaERMR05CUVVrc1ZVRkJWU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNaVUZCYUVJc1EwRkJaME1zVVVGQlVTeEpRVUY0UXl4RFFVRmtPMEZCUTBFc1kwRkJTU3hQUVVGS0xFVkJRV0U3T3p0QlFVZFlMR2RDUVVGSkxGZEJRVmNzVFVGQlRTeFJRVUZPTEVOQlFXVXNVVUZCVVN4SlFVRlNMRWRCUVdVc1MwRkJaaXhIUVVGMVFpeFJRVUZSTEVWQlFUbERMRU5CUVdZN1FVRkRRU3huUWtGQlNTeERRVUZETEZGQlFVd3NSVUZCWlR0QlFVTmlMSGxDUVVGWExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4UFFVRnlRaXhGUVVFNFFpeFBRVUU1UWl4RFFVRllPMEZCUTBFc2MwSkJRVkVzUjBGQlVpeERRVUZaTEhWQ1FVRmFMRVZCUVhGRExGRkJRVkVzU1VGQlVpeEhRVUZsTEZGQlFWRXNSVUZCTlVRN1FVRkRRU3h2UWtGQlRTeFJRVUZPTEVOQlFXVXNVVUZCVVN4SlFVRlNMRWRCUVdVc1MwRkJaaXhIUVVGMVFpeFJRVUZSTEVWQlFUbERMRWxCUVc5RUxGRkJRWEJFTzBGQlEwRXNjMEpCUVZFc1NVRkJVaXhEUVVGaExHTkJRV0lzUjBGQk9FSXNaMEpCUVRsQ08wRkJRMFE3TzBGQlJVUXNaMEpCUVVrc1UwRkJVeXhoUVVGVUxFbEJRVEJDTEVOQlFVTXNaVUZCTDBJc1JVRkJaMFE3UVVGQlFUczdPMEZCUnpsRExHOUNRVUZKTEV0QlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGVU8wRkJRMEVzYzBKQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNjVUpCUVhSRExFVkJRVFpFTEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVRGRkxFVkJRV2xHTEVWQlFXcEdMRVZCUVhGR0xFbEJRWEpHTEVOQlFUQkdMREJDUVVGclFqdEJRVU14Unl4elFrRkJTU3hSUVVGUkxFVkJRVU1zU1VGQlNTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFVkJRWEJDTEVOQlFVd3NSVUZCT0VJc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVhCQ0xFTkJRWEpETEVWQlFWbzdRVUZEUVN3d1FrRkJVU3hKUVVGU0xFTkJRV0VzUzBGQllpeEhRVUZ4UWl4TFFVRkxMSGxDUVVGbExFdEJRV1lzUTBGQlRDeERRVUZ5UWp0QlFVTkJMREJDUVVGUkxFOUJRVkk3UVVGRFJDeHBRa0ZLUkRzN08wRkJTamhETzBGQlZ5OURMR0ZCV0VRc1RVRlhUeXhKUVVGSkxHVkJRVW9zUlVGQmNVSTdRVUZETVVJc2QwSkJRVkVzVDBGQlVqczdPMEZCUjBRc1pVRktUU3hOUVVsQk8wRkJRMHdzZDBKQlFVMHNhVUpCUVU0c1EwRkJkMElzVDBGQmVFSXNSVUZCYVVNc1VVRkJha01zUlVGQk1rTXNTVUZCTTBNc1EwRkJaMFFzVlVGQlV5eExRVUZVTEVWQlFXZENPMEZCUXpsRUxEQkNRVUZOTEZGQlFVNHNRMEZCWlN4UlFVRlJMRWxCUVZJc1IwRkJaU3hMUVVGbUxFZEJRWFZDTEZGQlFWRXNSVUZCT1VNc1NVRkJiMFFzVFVGQlRTeFJRVUV4UkRzN1FVRkZRU3d3UWtGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNUMEZCY0VNN1FVRkRRU3d5UWtGQlR5eHRRMEZCVUR0QlFVTkVMRzFDUVV4RU8wRkJUVVE3UVVGRFJqczdPMEZCUjBZc1UwRjJRMFFzVFVGMVEwOHNTVUZCU1N4cFFrRkJhVUlzWTBGQmNrSXNSVUZCY1VNN1FVRkRNVU1zYjBKQlFWRXNSMEZCVWl4RFFVRlpMQ3RDUVVGYUxFVkJRVFpETEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVRGRU96dEJRVVZCTEdkQ1FVRkpMR2RDUVVGblFpeE5RVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVOQlFYQkNPenM3UVVGSFFTeG5Ra0ZCU1N4RFFVRkRMR0ZCUVV3c1JVRkJiMEk3UVVGRGJFSXNhMEpCUVVrc2IwSkJRVzlDTEUxQlFVMHNVVUZCVGl4RFFVRmxMSGRDUVVGbUxFTkJRWGRETEdGQlFYaERMRU5CUVhoQ096czdRVUZIUVN4clFrRkJTU3h4UWtGQmNVSXNjMEpCUVhOQ0xGRkJRVkVzU1VGQmRrUXNSVUZCTmtRN08wRkJSVE5FTEc5Q1FVRkpMR0ZCUVdFc1RVRkJUU3hOUVVGT0xFTkJRV0VzWTBGQllpeEZRVUZxUWp0QlFVTkJMSE5DUVVGTkxIRkNRVUZPTEVOQlFUUkNMR0ZCUVRWQ0xFbEJRVFpETEVWQlFVTXNXVUZCV1N4VlFVRmlMRVZCUVhsQ0xHRkJRV0VzU1VGQmRFTXNSVUZCTjBNN08wRkJSVUVzWjBOQlFXZENMRTFCUVUwc2NVSkJRVTRzUTBGQk5FSXNZVUZCTlVJc1EwRkJhRUk3UVVGRFJEdEJRVU5HT3pzN1FVRkhSQ3huUWtGQlNTeGhRVUZLTEVWQlFXMUNPenM3UVVGSGFrSXNhMEpCUVVrc1kwRkJZeXhYUVVGc1FpeEZRVUVyUWp0QlFVRkJPMEZCUXpkQ0xITkNRVUZKTEV0QlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGVU96dEJRVVZCTEhkQ1FVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEdOQlFXTXNWVUZCZEVNc1JVRkJhMFFzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXg1UWtGQlpTeFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRTFRaXhEUVVGd1FpeERRVUZzUkN4RlFVRXlSeXhGUVVFelJ5eEZRVUVyUnl4SlFVRXZSeXhEUVVGdlNDd3dRa0ZCYTBJN08wRkJSWEJKTEhkQ1FVRkpMRmRCUVZjc1MwRkJTeXg1UWtGQlpTeEZRVUZETEU5QlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZ3UWl4RFFVRlNMRVZCUVRaRExFbEJRVWtzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhGUVVGd1FpeERRVUZxUkN4RlFVRm1MRU5CUVV3c1EwRkJaanM3TzBGQlIwRXNORUpCUVZFc1NVRkJVaXhEUVVGaExFdEJRV0lzUjBGQmNVSXNVVUZCY2tJN1FVRkRRU3cwUWtGQlVTeFBRVUZTTzBGQlEwUXNiVUpCVUVRN096dEJRVWcyUWp0QlFXRTVRaXhsUVdKRUxFMUJZVTg3UVVGRFRDd3dRa0ZCVVN4UFFVRlNPMEZCUTBRN096dEJRVWRHTEdGQmNrSkVMRTFCY1VKUE8wRkJRMHdzZFVKQlFVOHNNRUpCUVZBN1FVRkRSRHRCUVVOR08wRkJRMFlzVDBGeVIwMHNRMEZCVUR0QlFYTkhSRHM3TzIxRFFVVmpMRThzUlVGQlV6dEJRVU4wUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGpRVUZSTEVkQlFWSXNRMEZCV1N4clFrRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eFpRVUZKTEd0Q1FVRnJRaXhSUVVGUkxFbEJRVklzUzBGQmFVSXNWMEZCZGtNN096dEJRVWRCTEZsQlFVa3NRMEZCUXl4TlFVRk5MR2xDUVVGUUxFbEJRVFJDTEVOQlFVTXNaVUZCYWtNc1JVRkJhMFE3UVVGRGFFUXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxIRkNRVUZhTzBGQlEwRXNhVUpCUVU4c1VVRkJVU3hQUVVGU0xFTkJRVkE3UVVGRFJEczdRVUZGUkN4WlFVRkpMR1ZCUVdVc1VVRkJVU3hGUVVGU0xFTkJRVmNzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhEUVVGdVFqdEJRVU5CTEZsQlFVa3NaMEpCUVdkQ0xHRkJRV0VzUTBGQllpeEpRVUZyUWl4SlFVRnNRaXhIUVVGNVFpeGhRVUZoTEVOQlFXSXNRMEZCZWtJc1IwRkJNa01zUjBGQk0wTXNSMEZCYVVRc1lVRkJZU3hEUVVGaUxFTkJRWEpGT3p0QlFVVkJMRmxCUVVrc2FVSkJRV2xDTERSQ1FVRm5RaXhoUVVGb1FpeERRVUZ5UWp0QlFVTkJMRmxCUVVrc1owSkJRV2RDTEhOQ1FVRlZMRkZCUVZFc1NVRkJiRUlzUlVGQmQwSXNTVUZCZUVJc1MwRkJhVU1zVTBGQmNrUTdRVUZEUVN4WlFVRkpMR05CUVdNc2MwSkJRVlVzVVVGQlVTeEZRVUZzUWl4RlFVRnpRaXhKUVVGMFFpeExRVUVyUWl4VFFVRnFSRHM3TzBGQlNVRXNXVUZCU1N4cFFrRkJhVUlzVjBGQmNrSXNSVUZCYTBNN08wRkJSV2hETEdOQlFVa3NWVUZCVlN4TlFVRk5MRk5CUVU0c1EwRkJaMElzWlVGQmFFSXNRMEZCWjBNc1VVRkJVU3hGUVVGNFF5eERRVUZrTzBGQlEwRXNZMEZCU1N4UFFVRktMRVZCUVdFN08wRkJSVmdzWjBKQlFVa3NWMEZCVnl4TlFVRk5MRkZCUVU0c1EwRkJaU3hSUVVGUkxFVkJRVklzUjBGQllTeExRVUZpTEVkQlFYRkNMRkZCUVZFc1NVRkJOVU1zUTBGQlpqdEJRVU5CTEdkQ1FVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMklzZVVKQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xFOUJRWEpDTEVWQlFUaENMRTlCUVRsQ0xFVkJRWFZETEZOQlFYWkRMRU5CUVZnN1FVRkRRU3h2UWtGQlRTeFJRVUZPTEVOQlFXVXNVVUZCVVN4RlFVRlNMRWRCUVdFc1MwRkJZaXhIUVVGeFFpeFJRVUZSTEVsQlFUVkRMRWxCUVc5RUxGRkJRWEJFTzBGQlEwUTdPMEZCUlVRc1owSkJRVWtzVTBGQlV5eGhRVUZVTEVsQlFUQkNMRU5CUVVNc1pVRkJMMElzUlVGQlowUTdRVUZET1VNc2EwSkJRVWtzVVVGQlVTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJRV3hDTEVOQlFWZ3NRMEZCV2p0QlFVTkJMR3RDUVVGSkxFdEJRVXNzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhOUVVGTkxFVkJRVEZDTEVOQlFWUTdRVUZEUVN4clFrRkJTU3hQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1RVRkJUU3hMUVVFeFFpeERRVUZZTzBGQlEwRXNiMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMRWxCUVRORUxFVkJRV2xGTEVWQlFXcEZMRVZCUVhGRkxFbEJRWEpGTEVOQlFUQkZMSGxDUVVGcFFqdEJRVU42Uml4M1FrRkJVU3hIUVVGU0xFTkJRVmtzYTBKQlFWb3NSVUZCWjBNc1lVRkJhRU03UVVGRFFTeDNRa0ZCVVN4SlFVRlNMRU5CUVdFc1MwRkJZaXhIUVVGeFFpeGhRVUZ5UWp0QlFVTkJMSGRDUVVGUkxFOUJRVkk3UVVGRFJDeGxRVXBFTzBGQlRVUXNZVUZXUkN4TlFWVlBMRWxCUVVrc1pVRkJTaXhGUVVGeFFqdEJRVU14UWl4dlFrRkJUU3hwUWtGQlRpeERRVUYzUWl4UFFVRjRRaXhGUVVGcFF5eFJRVUZxUXl4RlFVRXlReXhKUVVFelF5eERRVUZuUkN4VlFVRlRMRXRCUVZRc1JVRkJaMEk3T3p0QlFVYzVSQ3h2UWtGQlNTeFZRVUZWTEdOQlFXUXNSVUZCT0VJN1FVRkROVUlzZVVKQlFVOHNiVU5CUVZBN096dEJRVWRFTEdsQ1FVcEVMRTFCU1U4N1FVRkRUQ3d3UWtGQlRTeFJRVUZPTEVOQlFXVXNVVUZCVVN4RlFVRlNMRWRCUVdFc1MwRkJZaXhIUVVGeFFpeFJRVUZSTEVsQlFUVkRMRWxCUVc5RUxFMUJRVTBzVVVGQk1VUTdRVUZEUVN3d1FrRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFMUJRVTBzVDBGQmNFTTdRVUZEUVN3eVFrRkJUeXh0UTBGQlVEdEJRVU5FTzBGQlEwWXNaVUZhUkR0QlFXRkVMR0ZCWkUwc1RVRmpRVHRCUVVOTUxIRkNRVUZQTERCQ1FVRlFPMEZCUTBRN1FVRkRSaXhYUVc1RFJDeE5RVzFEVHp0QlFVTk1MRzFDUVVGUExEQkNRVUZRTzBGQlEwUTdPenRCUVVkR0xGTkJNME5FTEUxQk1rTlBMRWxCUVVrc2FVSkJRV2xDTEdOQlFYSkNMRVZCUVhGRE8wRkJRekZETEc5Q1FVRlJMRWRCUVZJc1EwRkJXU3dyUWtGQldpeEZRVUUyUXl4UlFVRlJMRWxCUVhKRU96dEJRVVZCTEdkQ1FVRkpMR2RDUVVGblFpeE5RVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVOQlFYQkNPenRCUVVWQkxHZENRVUZKTEdGQlFVb3NSVUZCYlVJN096dEJRVWRxUWl4clFrRkJTU3hqUVVGakxGZEJRV3hDTEVWQlFTdENPMEZCUXpkQ0xHOUNRVUZKTEdOQlFXTXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUZzUWl4RFFVRllMRU5CUVd4Q08wRkJRMEVzYjBKQlFVa3NUVUZCU3l4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEZsQlFWa3NSVUZCYUVNc1EwRkJWRHRCUVVOQkxHOUNRVUZKTEdsQ1FVRnBRaXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRmxCUVZrc1MwRkJhRU1zUTBGQmNrSTdPMEZCUlVFc2MwSkJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1kwRkJZeXhWUVVGMFF5eEZRVUZyUkN4alFVRnNSQ3hGUVVGclJTeEhRVUZzUlN4RlFVRnpSU3hKUVVGMFJTeERRVUV5UlN3d1FrRkJhMEk3UVVGRE0wWXNjMEpCUVVrc1kwRkJZeXhMUVVGTExFdEJRVXdzUTBGQlZ5eExRVUZMTEdOQlFVd3NRMEZCV0N4RFFVRnNRanRCUVVOQkxEQkNRVUZSTEVkQlFWSXNRMEZCV1N4clFrRkJXaXhGUVVGblF5eFhRVUZvUXp0QlFVTkJMREJDUVVGUkxFbEJRVklzUTBGQllTeExRVUZpTEVkQlFYRkNMRmRCUVhKQ08wRkJRMEVzTUVKQlFWRXNUMEZCVWp0QlFVTkVMR2xDUVV4RU96czdRVUZSUkN4bFFXSkVMRTFCWVU4N1FVRkRUQ3d3UWtGQlVTeFBRVUZTTzBGQlEwUTdRVUZGUml4aFFYQkNSQ3hOUVc5Q1R6dEJRVU5NTEhOQ1FVRlJMRTlCUVZJN096dEJRVWRFTzBGQlJVWXNWMEV2UWswc1RVRXJRa0U3UVVGRFRDeHhRa0ZCVHl3d1FrRkJVRHRCUVVORU8wRkJSVVlzVDBGb1IwMHNRMEZCVUR0QlFXbEhSRHM3T3pKRFFVVnpRaXhOTEVWQlFWRXNVU3hGUVVGVk8wRkJRM1pETEdOQlFWRXNSMEZCVWl4RFFVRlpMREJDUVVGYUxFVkJRWGRETEUxQlFYaERMRVZCUVdkRUxGRkJRV2hFTzBGQlEwRXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxITkNRVUZLT3pzN1FVRkhRU3hWUVVGSkxHTkJRV01zVFVGQlRTeFJRVUZPTEVOQlFXVXNkMEpCUVdZc1EwRkJkME1zVFVGQmVFTXNRMEZCYkVJN1FVRkRRU3hWUVVGSkxGZEJRVW9zUlVGQmFVSTdRVUZEWml4M1FrRkJaMElzVFVGQmFFSTdRVUZEUVN4cFFrRkJVeXhYUVVGVU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4TlFVRk5PMEZCUTFJc1dVRkJTU3hSUVVSSk8wRkJSVklzWTBGQlRTeE5RVVpGTzBGQlIxSXNhMEpCUVZVc1UwRklSanRCUVVsU0xHTkJRVTBzUlVGQlF5eG5Ra0ZCWjBJc1owSkJRV3BDTEVWQlFXMURMRkZCUVZFc1pVRkJNME03UVVGS1JTeFBRVUZXT3p0QlFVOUJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhaUVVGSkxFTkJRVU1zVFVGQlJDeEpRVUZYTEVOQlFVTXNVVUZCYUVJc1JVRkJNRUk3UVVGRGVFSXNhVUpCUVU4c1QwRkJUeXh6UkVGQlVDeERRVUZRTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3hYUVVGWExFMUJRVTBzVVVGQlRpeERRVUZsTEZOQlFWTXNTMEZCVkN4SFFVRnBRaXhSUVVGb1F5eERRVUZtTzBGQlEwRXNXVUZCU1N4VlFVRlZMRTFCUVUwc1UwRkJUaXhEUVVGblFpeGxRVUZvUWl4RFFVRm5ReXhOUVVGb1F5eERRVUZrT3p0QlFVVkJMRmxCUVVrc1QwRkJTaXhGUVVGaE96dEJRVVZZTEdOQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVN08wRkJSV0lzWjBKQlFVa3NWMEZCVnl4VFFVRllMRkZCUVZjc1EwRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlF6ZENMSE5DUVVGUkxFZEJRVklzUTBGQldTeHBRa0ZCV2l4RlFVRXJRaXhMUVVFdlFqdEJRVU5CTEhOQ1FVRlJMRXRCUVZJN1FVRkRSQ3hoUVVoRU8wRkJTVUVzWjBKQlFVa3NVVUZCU2l4SFFVRmxMRkZCUVdZN1FVRkRRU3huUWtGQlNTeGhRVUZLTEVkQlFXOUNMR0ZCUVhCQ096dEJRVVZCTEhWQ1FVRlhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhQUVVFeFFpeERRVUZZTzBGQlEwRXNhMEpCUVUwc1VVRkJUaXhEUVVGbExGTkJRVk1zUzBGQlZDeEhRVUZwUWl4UlFVRm9ReXhKUVVFMFF5eFJRVUUxUXp0QlFVTkVPenRCUVVWRUxHTkJRVWtzVTBGQlV5eGhRVUZpTEVWQlFUUkNPenRCUVVVeFFpeG5Ra0ZCU1N3d1FrRkJNRUk3UVVGRE5VSXNhMEpCUVVrc1RVRkVkMEk3UVVGRk5VSXNiMEpCUVUwN1FVRkdjMElzWVVGQk9VSTdRVUZKUVN4eFFrRkJVeXhoUVVGVUxFZEJRWGxDTEdGQlFYcENPMEZCUTBFc2EwSkJRVTBzZFVKQlFVNHNRMEZCT0VJc2RVSkJRVGxDTEVWQlFYVkVMRkZCUVhaRUxFVkJRV2xGTEVsQlFXcEZMRU5CUVhORkxHbENRVUZUT3p0QlFVVTNSU3h2UWtGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNUMEZCY0VNN1FVRkRRU3h6UWtGQlVTeDFRMEZCVWp0QlFVTkVMR0ZCU2tRN1FVRkxSQ3hYUVZwRUxFMUJXVTg3TzBGQlJVd3NhMEpCUVUwc2FVSkJRVTRzUTBGQmQwSXNSMEZCZUVJc1JVRkJOa0lzVVVGQk4wSTdRVUZEUkR0QlFVTkdMRk5CTDBKRUxFMUJLMEpQTzBGQlEwd3NhVUpCUVU4c2FVTkJRVkE3UVVGRFJEdEJRVU5HTEU5Qk0wTk5MRU5CUVZBN1FVRTJRMFE3T3p0elEwRkZhVUlzVHl4RlFVRlRMRkVzUlVGQlZUdEJRVU51UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3T3p0QlFVbEJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXbENMRTFCUVdwQ0xFVkJRWGxDT3p0QlFVVXhReXhaUVVGSkxHZENRVUZuUWl4UlFVRlJMRWxCUVZJc1EwRkJZU3hqUVVGcVF6dEJRVU5CTEZsQlFVa3NWMEZCU2p0QlFVTkJMRmxCUVVrc1VVRkJVU3hGUVVGYU8wRkJRMEVzWjBKQlFWRXNZVUZCVWpzN1FVRkZSU3hsUVVGTExHZENRVUZNTzBGQlEwVXNjVUpCUVZNc1NVRkJWQ3hEUVVGakxGVkJRV1FzUjBGQk1rSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1kwRkJZaXhGUVVFelFqczdRVUZGUVN4blFrRkJTU3h2UWtGQmIwSTdRVUZEZEVJc2IwSkJRVTBzVjBGRVowSTdRVUZGZEVJc2EwSkJRVWtzVVVGQlVTeEZRVVpWTzBGQlIzUkNMRzlDUVVGTkxGRkJRVkVzU1VGSVVUdEJRVWwwUWl4dlFrRkJUVHRCUVVOS0xHZERRVUZuUWl4aFFVUmFPMEZCUlVvc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhUUVVGVExFbEJRVlFzUTBGQll5eFZRVUZzUXp0QlFVWklPMEZCU21kQ0xHRkJRWGhDTzBGQlUwRXNjVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNWMEZCTVVJc1IwRkJkME1zVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhwUWtGQk0wSXNSVUZCT0VNc1UwRkJPVU1zUlVGQmVVUXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRVGxGTEVOQlFYaERPenM3TzBGQlNVRXNaMEpCUVVrc1UwRkJVeXhqUVVGaUxFVkJRVFpDTzBGQlFVTXNjMEpCUVZFc1JVRkJReXhUUVVGVExHbENRVUZXTEVWQlFUWkNMRlZCUVZVc1VVRkJka01zUlVGQlVqdEJRVU0zUWl4aFFVUkVMRTFCUTA4N1FVRkRUQ3h2UWtGQlRTeFJRVUZPTEVOQlFXVXNVVUZCVVN4SlFVRlNMRWRCUVdVc1MwRkJaaXhIUVVGMVFpeFJRVUZSTEVWQlFUbERMRWxCUVc5RUxGRkJRWEJFTzBGQlEwRXNiMEpCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhwUWtGQk9VSTdRVUZEUkRzN1FVRkZTRHRCUVVOQkxHVkJRVXNzWVVGQlREczdRVUZGUlN4dlFrRkJVU3hIUVVGU0xFTkJRVmtzWVVGQldqdEJRVU5CTEhGQ1FVRlRMR2RDUVVGVUxFTkJRVEJDTEZkQlFURkNMRWRCUVhkRExFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUTBGQmVFTTdRVUZEUVN4eFFrRkJVeXhKUVVGVUxFTkJRV01zVlVGQlpDeEhRVUV5UWl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRXRCUVdwRExFTkJRVE5DTzBGQlEwRXNjVUpCUVZNc1NVRkJWQ3hEUVVGakxGRkJRV1FzUjBGQmVVSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1kwRkJZaXhGUVVGNlFqczdRVUZGUVN4blFrRkJTU3hwUWtGQmFVSTdRVUZEYmtJc2IwSkJRVTBzVjBGRVlUdEJRVVZ1UWl4clFrRkJTU3hSUVVGUkxFbEJSazg3UVVGSGJrSXNiMEpCUVUwc1VVRkJVU3hGUVVoTE8wRkJTVzVDTEc5Q1FVRk5PMEZCUTBvc1owTkJRV2RDTEdWQlJGbzdRVUZGU2l4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRk5CUVZNc1NVRkJWQ3hEUVVGakxGRkJRV3hETzBGQlJrZzdRVUZLWVN4aFFVRnlRanRCUVZOQkxIRkNRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xHRkJRVEZDTEVkQlFUQkRMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNZMEZCTTBJc1JVRkJNa01zVTBGQk0wTXNSVUZCYzBRc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFUTkZMRU5CUVRGRE8wRkJRMEVzYjBKQlFWRXNSVUZCUXl4VFFVRlRMR05CUVZZc1JVRkJNRUlzVlVGQlZTeFJRVUZ3UXl4RlFVRlNPenRCUVVWR08wRkJRMEVzWlVGQlN5eGxRVUZNT3p0QlFVVkZMRzlDUVVGUkxFZEJRVklzUTBGQldTeGxRVUZhTzBGQlEwRXNjVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNZVUZCTVVJc1IwRkJNRU1zVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeERRVUV4UXpzN1FVRkZRU3hyUWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFYTkNMRk5CUVRsRExFVkJRWGxFTEVsQlFYcEVMRU5CUVRoRUxGVkJRVU1zUzBGQlJDeEZRVUZYT3p0QlFVVjJSU3hyUWtGQlNTeHZRa0ZCYjBJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4TlFVRk5MRkZCUVU0c1EwRkJaU3hMUVVGdVF5eERRVUY0UWp0QlFVTkJMR3RDUVVGSkxHdENRVUZyUWl4TlFVRk5MRTFCUVU0c1EwRkJZU3hYUVVGaUxFVkJRWFJDTzBGQlEwRXNhMEpCUVVrc1YwRkJWeXhSUVVGUkxFbEJRVklzUTBGQllTeExRVUUxUWp0QlFVTkJMSFZDUVVGVExGTkJRVlFzUTBGQmJVSXNVMEZCYmtJc1IwRkJLMElzVVVGQlVTeEpRVUZTTEVOQlFXRXNVVUZCWWl4RFFVRnpRaXhUUVVGeVJEdEJRVU5CTEhWQ1FVRlRMRk5CUVZRc1EwRkJiVUlzVTBGQmJrSXNSMEZCSzBJc2FVSkJRUzlDTzBGQlEwRXNkVUpCUVZNc1UwRkJWQ3hEUVVGdFFpeE5RVUZ1UWl4SFFVRXJRaXhOUVVGTkxGRkJRVTRzUTBGQlpTeExRVUU1UXp0QlFVTkJMSFZDUVVGVExFbEJRVlFzUTBGQll5eFJRVUZrTEVkQlFUQkNMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNVVUZCY0VJc1EwRkJNVUk3UVVGRFFTeDFRa0ZCVXl4SlFVRlVMRU5CUVdNc1dVRkJaQ3hIUVVFMlFpeGxRVUUzUWpzN1FVRkZRU3hyUWtGQlNTeFpRVUZaTEUxQlFVMHNUVUZCVGl4RFFVRmhMRzlDUVVGaUxFTkJRV3RETEdWQlFXeERMRVZCUVcxRUxGTkJRVk1zU1VGQlZDeERRVUZqTEZGQlFXcEZMRVZCUVRKRkxGTkJRVk1zU1VGQlZDeERRVUZqTEZWQlFYcEdMRU5CUVdoQ096dEJRVVZCTEhGQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExHOUNRVUZpTEVOQlFXdERMRk5CUVd4RExFVkJRVFpETEc5Q1FVRnZRaXhUUVVGVExFbEJRVlFzUTBGQll5eFJRVUZzUXl4SFFVRTJReXhUUVVGVExFbEJRVlFzUTBGQll5eFZRVUY0Unl4RFFVRlFPenM3UVVGSFJDeGhRV2hDUkN4RlFXZENSeXhKUVdoQ1NDeERRV2RDVVN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOeVFpeDFRa0ZCVXl4SlFVRlVMRU5CUVdNc1UwRkJaQ3hIUVVFd1FpeFRRVUV4UWpzN1FVRkZRU3h4UWtGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4WlFVRmlMRU5CUVRCQ0xGTkJRVEZDTEVWQlFYRkRMR3RDUVVGclFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRm9ReXhIUVVFeVF5eFRRVUZUTEVsQlFWUXNRMEZCWXl4VlFVRTVSaXhEUVVGUU96czdRVUZIUkN4aFFYUkNSQ3hGUVhOQ1J5eEpRWFJDU0N4RFFYTkNVU3hWUVVGRExFbEJRVVFzUlVGQlZUczdRVUZGYUVJc2RVSkJRVk1zU1VGQlZDeERRVUZqTEcxQ1FVRmtMRWRCUVc5RExFbEJRVWtzVlVGQlNpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVhCRE8wRkJRMEVzZFVKQlFWTXNTVUZCVkN4RFFVRmpMSEZDUVVGa0xFZEJRWE5ETEVsQlFVa3NWVUZCU2l4RFFVRmxMRXRCUVVzc1EwRkJUQ3hEUVVGbUxFTkJRWFJETzBGQlEwRXNkVUpCUVZNc1NVRkJWQ3hEUVVGakxHZENRVUZrTEVkQlFXbERMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUTBGQlRDeERRVUZtTEVOQlFXcERPMEZCUTBFc2RVSkJRVk1zU1VGQlZDeERRVUZqTEd0Q1FVRmtMRWRCUVcxRExFbEJRVWtzVlVGQlNpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVc1RE8wRkJRMEVzYlVKQlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhGUVVGTU8wRkJRMEVzYjBKQlFVMHNSVUZCVGl4SFFVRlhMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNSVUZCY0VJc1EwRkJXRHM3T3p0QlFVbEJMSEZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJVeXhKUVVGVUxFTkJRV01zYTBKQlFYQkRMRVZCUVhkRUxFOUJRVThzUlVGQkwwUXNRMEZCVUR0QlFVTkVMR0ZCYkVORUxFVkJhME5ITEVsQmJFTklMRU5CYTBOUkxGVkJRVU1zU1VGQlJDeEZRVUZWTzBGQlEyaENMRzlDUVVGTkxFbEJRVTRzUjBGQllTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFbEJRWEJDTEVOQlFXSTdPenRCUVVkQkxIRkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNjVUpCUVhSRExFVkJRVFpFTEVsQlFUZEVMRVZCUVcxRkxFVkJRVzVGTEVOQlFWQTdRVUZEUkN4aFFYWkRSQ3hGUVhWRFJ5eEpRWFpEU0N4RFFYVkRVU3hWUVVGRExHRkJRVVFzUlVGQmJVSTdRVUZEZWtJc2IwSkJRVTBzYTBKQlFVNHNSMEZCTWtJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4aFFVRndRaXhEUVVFelFqczdRVUZGUVN4eFFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUV6UXl4RlFVRnpSQ3hUUVVGVExFbEJRVlFzUTBGQll5eFpRVUZ3UlN4RFFVRlFPMEZCUlVRc1lVRTFRMFFzUlVFMFEwY3NTVUUxUTBnc1EwRTBRMUVzVlVGQlF5eGpRVUZFTEVWQlFXOUNPenRCUVVVeFFpeHZRa0ZCVFN4dlFrRkJUaXhIUVVFMlFpeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHTkJRWEJDTEVOQlFUZENPenRCUVVWQkxHdENRVUZKTEcxQ1FVRnRRanRCUVVOeVFpeHpRa0ZCVFN4WFFVUmxPMEZCUlhKQ0xHOUNRVUZKTEZGQlFWRXNTVUZHVXp0QlFVZHlRaXh6UWtGQlRTeFJRVUZSTEVWQlNFODdRVUZKY2tJc2MwSkJRVTA3UVVGRFNpeHJRMEZCWjBJN1FVRkVXanRCUVVwbExHVkJRWFpDT3p0QlFWTkJMR3RDUVVGSkxHZENRVUZuUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEdkQ1FVRXpRaXhGUVVFMlF5eFRRVUZUTEVsQlFWUXNRMEZCWXl4WlFVRXpSQ3hGUVVGNVJTeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1YwRkJPVVlzUTBGQmNFSTdPMEZCUlVFc2NVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUMEZCWWl4RFFVRnhRaXhUUVVGVExGZEJRVlFzUTBGQmNVSXNWVUZCTVVNc1JVRkJjMFFzZVVKQlFXVXNVMEZCVXl4blFrRkJlRUlzU1VGQk5FTXNlVUpCUVdVc1lVRkJaaXhEUVVGc1J5eERRVUZRTzBGQlJVUXNZVUUzUkVRc1JVRTJSRWNzU1VFM1JFZ3NRMEUyUkZFc2NVSkJRV0U3TzBGQlJXNUNMRzlDUVVGTkxGTkJRVTRzUjBGQmEwSXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeFRRVUZ3UWl4RFFVRnNRanM3UVVGRlFTeHJRa0ZCU1N4dFFrRkJiVUk3UVVGRGNrSXNjMEpCUVUwc1YwRkVaVHRCUVVWeVFpeHZRa0ZCU1N4UlFVRlJMRWxCUmxNN1FVRkhja0lzYzBKQlFVMHNVVUZCVVN4RlFVaFBPMEZCU1hKQ0xITkNRVUZOTzBGQlEwb3NhME5CUVdkQ0xHMUNRVVJhTzBGQlJVb3NlVUpCUVU4c1MwRkJTeXg1UWtGQlpTeExRVUZtTEVOQlFVdzdRVUZHU0R0QlFVcGxMR1ZCUVhaQ08wRkJVMEVzZFVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRWRCUVRoRExFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1owSkJRVE5DTEVWQlFUWkRMRTlCUVU4c1JVRkJjRVFzUlVGQmQwUXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRVGRGTEVOQlFUbERPenRCUVVWQkxITkNRVUZSTEVWQlFVTXNVMEZCVXl4blFrRkJWaXhGUVVFMFFpeFZRVUZWTEZGQlFYUkRMRVZCUVZJN1FVRkZSQ3hoUVRsRlJDeEZRVGhGUnp0QlFVRkJMSEZDUVVGVExFOUJRVThzUzBGQlVDeERRVUZVTzBGQlFVRXNZVUU1UlVnN08wRkJaMFpHTzBGQlEwRXNaVUZCU3l4dFFrRkJURHM3UVVGRlJTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2JVSkJRVm83UVVGRFFTeG5Ra0ZCU1N4blFrRkJaMElzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4UlFVRlJMRWxCUVZJc1EwRkJZU3hMUVVGc1FpeERRVUZZTEVOQlFYQkNPenRCUVVWQkxHdENRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1UwRkJPVU1zUlVGQmVVUXNTVUZCZWtRc1EwRkJPRVFzVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUlhaRkxHdENRVUZKTEdWQlFXVXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZqTEc5Q1FVRnNReXhEUVVGdVFqdEJRVU5CTEd0Q1FVRkpMR3RDUVVGclFpeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFMUJRVTBzVVVGQlRpeERRVUZsTEV0QlFXNURMRU5CUVhSQ08wRkJRMEVzZFVKQlFWTXNVMEZCVkN4RFFVRnRRaXhUUVVGdVFpeEhRVUVyUWl4UlFVRlJMRWxCUVZJc1EwRkJZU3hSUVVGaUxFTkJRWE5DTEZOQlFYSkVPMEZCUTBFc2RVSkJRVk1zVTBGQlZDeERRVUZ0UWl4VFFVRnVRaXhIUVVFclFpeGxRVUV2UWp0QlFVTkJMSFZDUVVGVExGTkJRVlFzUTBGQmJVSXNUVUZCYmtJc1IwRkJLMElzVFVGQlRTeFJRVUZPTEVOQlFXVXNTMEZCT1VNN08wRkJSVUVzY1VKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1ZVRkJOME1zUlVGQmVVUXNXVUZCZWtRc1EwRkJVRHRCUVVWRUxHRkJWa1FzUlVGVlJ5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTmFMSE5DUVVGUkxFZEJRVklzUTBGQldTeExRVUZhTzBGQlEwRXNjVUpCUVU4c2VVTkJRVkE3T3p0QlFVZEVMR0ZCWmtRc1JVRmxSeXhKUVdaSUxFTkJaVkVzWlVGQlR6czdRVUZGWWl4MVFrRkJVeXhKUVVGVUxFTkJRV01zV1VGQlpDeEhRVUUyUWl4SlFVRkpMRlZCUVVvc1EwRkJaU3hIUVVGbUxFTkJRVGRDT3p0QlFVVkJMR3RDUVVGSkxGbEJRVmtzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGakxGTkJRV3hETEVOQlFXaENPenRCUVVWQkxHdENRVUZKTEc5Q1FVRnZRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEZOQlFWTXNTVUZCVkN4RFFVRmpMRmxCUVd4RUxFTkJRWGhDT3p0QlFVVkJMSEZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZOQlFXSXNRMEZCZFVJc1UwRkJVeXhUUVVGVUxFTkJRVzFDTEZOQlFURkRMRVZCUVhGRUxIbENRVUZsTEZOQlFWTXNaMEpCUVhoQ0xFbEJRVFJETEhsQ1FVRmxMR2xDUVVGbUxFTkJRV3BITEVWQlFXOUpMRk5CUVhCSkxFTkJRVkE3T3p0QlFVZEVMR0ZCTVVKRUxFVkJNRUpITEVsQk1VSklMRU5CTUVKUkxHZERRVUYzUWpzN1FVRkZPVUlzYzBKQlFWRXNSMEZCVWl4RFFVRlpMRGhDUVVGYUxFVkJRVFJETEc5Q1FVRTFRenRCUVVOQkxHdENRVUZKTEZsQlFWa3NUVUZCVFN4TlFVRk9MRU5CUVdFc2IwSkJRV0lzUTBGQmEwTXNVMEZCVXl4SlFVRlVMRU5CUVdNc1dVRkJhRVFzUlVGQk9FUXNVMEZCVXl4SlFVRlVMRU5CUVdNc1VVRkJOVVVzUlVGQmMwWXNVMEZCVXl4SlFVRlVMRU5CUVdNc1ZVRkJjRWNzUTBGQmFFSTdPMEZCUlVFc2NVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNiMEpCUVdJc1EwRkJhME1zVTBGQmJFTXNSVUZCTmtNc2IwSkJRVzlDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRkZCUVd4RExFZEJRVFpETEZOQlFWTXNTVUZCVkN4RFFVRmpMRlZCUVhoSExFTkJRVkE3T3p0QlFVZEVMR0ZCYkVORUxFVkJhME5ITEVsQmJFTklMRU5CYTBOUkxIRkNRVUZoTzBGQlEyNUNMSFZDUVVGVExFbEJRVlFzUTBGQll5eFRRVUZrTEVkQlFUQkNMRk5CUVRGQ096dEJRVVZCTEhGQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGbEJRV0lzUTBGQk1FSXNVMEZCTVVJc1JVRkJjVU1zYTBKQlFXdENMRk5CUVZNc1NVRkJWQ3hEUVVGakxGRkJRV2hETEVkQlFUSkRMRk5CUVZNc1NVRkJWQ3hEUVVGakxGVkJRVGxHTEVOQlFWQTdPenRCUVVkRUxHRkJlRU5FTEVWQmQwTkhMRWxCZUVOSUxFTkJkME5STEdkQ1FVRlJPMEZCUTJRc2RVSkJRVk1zU1VGQlZDeERRVUZqTEhGQ1FVRmtMRWRCUVhORExFbEJRVWtzVlVGQlNpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVhSRE8wRkJRMEVzZFVKQlFWTXNTVUZCVkN4RFFVRmpMRzFDUVVGa0xFZEJRVzlETEVsQlFVa3NWVUZCU2l4RFFVRmxMRXRCUVVzc1EwRkJUQ3hEUVVGbUxFTkJRWEJETzBGQlEwRXNkVUpCUVZNc1NVRkJWQ3hEUVVGakxHdENRVUZrTEVkQlFXMURMRWxCUVVrc1ZVRkJTaXhEUVVGbExFdEJRVXNzUTBGQlRDeERRVUZtTEVOQlFXNURPMEZCUTBFc2RVSkJRVk1zU1VGQlZDeERRVUZqTEdkQ1FVRmtMRWRCUVdsRExFbEJRVWtzVlVGQlNpeERRVUZsTEV0QlFVc3NRMEZCVEN4RFFVRm1MRU5CUVdwRE8wRkJRMEVzYlVKQlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZqTEVWQlFXeERMRU5CUVV3N1FVRkRRU3hyUWtGQlNTeFBRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWTBGQll5eHJRa0ZCYkVNc1EwRkJXRHM3UVVGRlFTeHhRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRzFDUVVGMFF5eEZRVUV5UkN4SlFVRXpSQ3hGUVVGcFJTeEZRVUZxUlN4RFFVRlFPMEZCUlVRc1lVRnNSRVFzUlVGclJFY3NTVUZzUkVnc1EwRnJSRkVzZVVKQlFXbENPenM3UVVGSGRrSXNkVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNhVUpCUVRGQ0xFZEJRVGhETEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1owSkJRV2RDTEVWQlFYQkVMRU5CUVRsRE96dEJRVVZCTEd0Q1FVRkpMR1ZCUVdVc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4alFVRmpMRWxCUVd4RExFTkJRVzVDT3p0QlFVVkJMSEZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHZENRVUZuUWl4RlFVRjRSU3hGUVVFMFJTeFpRVUUxUlN4RFFVRlFPMEZCUlVRc1lVRXpSRVFzUlVFeVJFY3NTVUV6UkVnc1EwRXlSRkVzZDBKQlFXbENPenM3TzBGQlNYWkNMRzFDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNSVUZCVER0QlFVTkJMRzlDUVVGTkxFVkJRVTRzUjBGQlZ5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFVkJRWEJDTEVOQlFWZzdPMEZCUlVFc2NVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eHhRa0ZCZEVNc1JVRkJOa1FzUzBGQk4wUXNSVUZCYjBVc1JVRkJjRVVzUTBGQlVEczdPMEZCUjBRc1lVRnlSVVFzUlVGeFJVY3NTVUZ5UlVnc1EwRnhSVkVzTUVKQlFXdENPMEZCUTNoQ0xHOUNRVUZOTEV0QlFVNHNSMEZCWXl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEdOQlFYQkNMRU5CUVdRN1FVRkRRU3hyUWtGQlNTd3dRa0ZCTUVJN1FVRkROVUlzYzBKQlFVMHNWMEZFYzBJN1FVRkZOVUlzYjBKQlFVa3NVVUZCVVN4SlFVWm5RanRCUVVjMVFpeHpRa0ZCVFN4UlFVRlJMRVZCU0dNN1FVRkpOVUlzYzBKQlFVMDdRVUZEU2l4clEwRkJaMElzZVVKQlJGbzdRVUZGU2l4NVFrRkJUeXhMUVVGTExIbENRVUZsTEV0QlFXWXNRMEZCVER0QlFVWklPMEZCU25OQ0xHVkJRVGxDT3p0QlFWVkJMSFZDUVVGVExHZENRVUZVTEVOQlFUQkNMSFZDUVVFeFFpeEhRVUZ2UkN4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEhWQ1FVRXpRaXhGUVVGdlJDeFJRVUZSTEVWQlFUVkVMRVZCUVdkRkxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRnlSaXhEUVVGd1JEdEJRVU5CTEhWQ1FVRlRMR0ZCUVZRc1IwRkJlVUlzU1VGQmVrSTdRVUZEUVN4elFrRkJVU3hGUVVGRExGTkJRVk1zZFVKQlFWWXNSVUZCYlVNc1ZVRkJWU3hSUVVFM1F5eEZRVUZTTzBGQlEwUXNZVUZ3UmtRN08wRkJjMFpHTzBGQlEwRXNaVUZCU3l4NVFrRkJURHM3UVVGRlJTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2VVSkJRVm83UVVGRFFTeHhRa0ZCVXl4aFFVRlVMRWRCUVhsQ0xFbEJRWHBDT3p0QlFVVkJMRzlDUVVGUkxFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NVVUZCVVN4SlFVRlNMRU5CUVdFc1MwRkJiRUlzUTBGQldDeERRVUZTT3p0QlFVVkJMR2xDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1RVRkJUU3hGUVVFeFFpeERRVUZNTzBGQlEwRXNaMEpCUVVrc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRTFCUVUwc1MwRkJNVUlzUTBGQldEczdRVUZGUVN4clFrRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXh0UWtGQmRFTXNSVUZCTWtRc1NVRkJNMFFzUlVGQmFVVXNSVUZCYWtVc1JVRkJjVVVzU1VGQmNrVXNRMEZCTUVVc2VVSkJRV2xDTzBGQlEzcEdMSE5DUVVGUkxFZEJRVklzUTBGQldTeGxRVUZhTEVWQlFUWkNMR0ZCUVRkQ08wRkJRMEVzZFVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzZFVKQlFURkNMRWRCUVc5RUxFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNaMEpCUVdkQ0xFVkJRWEJFTEVOQlFYQkVPenM3UVVGSFFTeHJRa0ZCU1N4VFFVRlRMR05CUVdJc1JVRkJOa0k3UVVGRE0wSXNiMEpCUVVrc2FVSkJRV2xDTzBGQlEyNUNMSGRDUVVGTkxGRkJSR0U3UVVGRmJrSXNjMEpCUVVrc1VVRkJVU3hKUVVaUE8wRkJSMjVDTEhkQ1FVRk5MRkZCUVZFc1JVRklTenRCUVVsdVFpeDNRa0ZCVFR0QlFVTktMREpDUVVGUExGTkJRVk1zWTBGQlZDeERRVUYzUWl4SlFVRjRRaXhEUVVFMlFqdEJRVVJvUXp0QlFVcGhMR2xDUVVGeVFqczdPenRCUVZkQkxIZENRVUZSTEVWQlFVTXNVMEZCVXl4alFVRldMRVZCUVRCQ0xGVkJRVlVzVVVGQmNFTXNSVUZCVWpzN08wRkJSMFFzWlVGbVJDeE5RV1ZQTzBGQlEwd3NkMEpCUVUwc2RVSkJRVTRzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVVVGQmRrTXNSVUZCYVVRc1NVRkJha1FzUTBGQmMwUXNhVUpCUVZNN1FVRkROMFFzTkVKQlFWRXNTMEZCVWp0QlFVTkVMRzFDUVVaRU8wRkJSMFE3UVVGRFJpeGhRWHBDUkRzN1FVRXlRa1k3UVVGRFFTeGxRVUZMTEc5Q1FVRk1PenRCUVVWRkxHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dlFrRkJXanM3UVVGRlFTeG5Ra0ZCU1N4cFFrRkJhVUlzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4UlFVRlJMRWxCUVZJc1EwRkJZU3hMUVVGc1FpeERRVUZZTEVOQlFYSkNPMEZCUTBFc1owSkJRVWtzVDBGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHVkJRV1VzU1VGQmJrTXNRMEZCV0R0QlFVTkJMR2xDUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1pVRkJaU3hGUVVGdVF5eERRVUZNTzBGQlEwRXNaMEpCUVVrc2FVSkJRV2xDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWlVGQlpTeExRVUZ1UXl4RFFVRnlRanRCUVVOQkxHZENRVUZKTEc5Q1FVRktPMEZCUTBFc1owSkJRVWtzYlVKQlFVbzdRVUZEUVN4blFrRkJTU3h6UWtGQlNqdEJRVU5CTEdkQ1FVRkpMQ3RDUVVGS096dEJRVVZCTEd0Q1FVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRzFDUVVGMFF5eEZRVUV5UkN4alFVRXpSQ3hGUVVFeVJTeEZRVUV6UlN4RlFVRXJSU3hKUVVFdlJTeERRVUZ2Uml3d1FrRkJhMEk3TzBGQlJYQkhMRFJDUVVGakxFdEJRVXNzUzBGQlRDeERRVUZYTEdOQlFWZ3NRMEZCWkR0QlFVTkJMREpDUVVGaExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1dVRkJXU3hMUVVGb1F5eERRVUZpTzBGQlEwRXNPRUpCUVdkQ0xGbEJRVmtzWVVGQk5VSTdPMEZCUlVFc2EwSkJRVWtzWjBKQlFXZENMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNUMEZCTTBJc1JVRkJiME1zYVVKQlFXbENMRVZCUVhKRUxFTkJRWEJDT3p0QlFVVkJMSEZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHRkJRWGhFTEVWQlFYVkZMRWxCUVhaRkxFTkJRVkE3UVVGRlJDeGhRVlpFTEVWQlZVY3NTVUZXU0N4RFFWVlJMSE5DUVVGak96czdPMEZCU1hCQ0xHOUNRVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVsQlFUaERMRVZCUVVNc1dVRkJXU3hWUVVGaUxFVkJRWGxDTEdGQlFXRXNTVUZCZEVNc1JVRkJPVU03TzBGQlJVRXNiVUpCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZNTzBGQlEwRXNiMEpCUVUwc1JVRkJUaXhIUVVGWExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1JVRkJjRUlzUTBGQldEczdRVUZGUVN4eFFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxIRkNRVUYwUXl4RlFVRTJSQ3hOUVVFM1JDeEZRVUZ4UlN4RlFVRnlSU3hEUVVGUU8wRkJRMFFzWVVGd1FrUXNSVUZ2UWtjc1NVRndRa2dzUTBGdlFsRXNNRUpCUVd0Q096dEJRVVY0UWl4MVEwRkJlVUk3UVVGRGRrSXNjMEpCUVUwc1YwRkVhVUk3UVVGRmRrSXNiMEpCUVVrc1VVRkJVU3hKUVVaWE8wRkJSM1pDTEhOQ1FVRk5MRkZCUVZFc1JVRklVenRCUVVsMlFpeHpRa0ZCVFR0QlFVTktMR3REUVVGblFqdEJRVVJhTzBGQlNtbENMR1ZCUVhwQ096dEJRVk5CTEc5Q1FVRk5MRXRCUVU0c1IwRkJZeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVhCQ0xFTkJRV1E3UVVGRFFTeHJRa0ZCU1N4blFrRkJaMElzVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXh6UWtGQk0wSXNSVUZCYlVRc1UwRkJVeXhGUVVFMVJDeEZRVUZuUlN4VFFVRlRMRmRCUVZRc1EwRkJjVUlzVjBGQmNrWXNRMEZCY0VJN08wRkJSVUVzY1VKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1VVRkJZaXhEUVVGelFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4clFrRkJjRU1zUlVGQmQwUXNZVUZCZUVRc1EwRkJVRHRCUVVORUxHRkJia05FTEVWQmJVTkhMRWxCYmtOSUxFTkJiVU5STEhsQ1FVRnBRanRCUVVOMlFpeHJRa0ZCU1N4aFFVRmhMRXRCUVVzc2VVSkJRV1VzUlVGQlF5eFBRVUZQTEUxQlFVMHNTMEZCWkN4RlFVRnhRaXhOUVVGTkxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1lVRkJjRUlzUTBGQk0wSXNSVUZCSzBRc1NVRkJTU3hOUVVGTkxFVkJRWHBGTEVWQlFXWXNRMEZCVEN4RFFVRnFRanM3UVVGRlFTeHhRMEZCZFVJc1NVRkJka0lzUTBGQk5FSXNTMEZCTlVJc1IwRkJiME1zVlVGQmNFTTdRVUZEUVN4elFrRkJVU3hGUVVGRExGTkJRVk1zYzBKQlFWWXNSVUZCYTBNc1ZVRkJWU3hSUVVFMVF5eEZRVUZTTzBGQlEwUXNZVUY0UTBRN08wRkJNRU5HTzBGQlEwRXNaVUZCU3l4eFFrRkJURHM3UVVGRlJTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2NVSkJRVm83TzBGQlJVRXNaMEpCUVVrc2VVSkJRWGxDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQmJFSXNRMEZCV0N4RFFVRTNRanRCUVVOQkxHZENRVUZKTEdWQlFXVXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeDFRa0ZCZFVJc1NVRkJNME1zUTBGQmJrSTdRVUZEUVN4cFFrRkJTeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMSFZDUVVGMVFpeEZRVUV6UXl4RFFVRk1PMEZCUTBFc1owSkJRVWtzZVVKQlFYbENMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNkVUpCUVhWQ0xFdEJRVE5ETEVOQlFUZENPenRCUVVWQkxHdENRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEcxQ1FVRjBReXhGUVVFeVJDeHpRa0ZCTTBRc1JVRkJiVVlzUlVGQmJrWXNSVUZCZFVZc1NVRkJka1lzUTBGQk5FWXNNRUpCUVd0Q096dEJRVVUxUnl4clFrRkJTU3hyUWtGQmEwSXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeFBRVUV6UWl4RlFVRnZReXhwUWtGQmFVSXNSVUZCY2tRc1EwRkJkRUk3UVVGRFFTeHhRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hWUVVGaUxFTkJRWGRDTEZOQlFWTXNTVUZCVkN4RFFVRmpMR2RDUVVGMFF5eEZRVUYzUkN4bFFVRjRSQ3hGUVVGNVJTeFpRVUY2UlN4RFFVRlFPMEZCUTBRc1lVRktSQ3hGUVVsSExFbEJTa2dzUTBGSlVTeHpRa0ZCWXp0QlFVTndRaXh6UWtGQlVTeEhRVUZTTEVOQlFWa3NZVUZCV2l4RlFVRXlRaXhWUVVFelFqdEJRVU5CTEd0Q1FVRkpMRmRCUVZjc1UwRkJVeXhSUVVGNFFqdEJRVU5CTEhWQ1FVRlRMR05CUVZRN1FVRkRRU3h6UWtGQlVTeGpRVUZTTzBGQlEwUXNZVUZVUkRzN1FVRlhSanRCUVVOQk8wRkJRMFVzYlVKQlFVOHNUMEZCVUR0QlFXNVdTanRCUVhGV1JDeFBRVEZXVFN4RFFVRlFPMEZCTWxaRU96czdORU5CUlhWQ0xFOHNSVUZCVXl4UkxFVkJRVlU3UVVGRGVrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxHMUNRVUZ0UWl4TlFVRk5MSEZDUVVGT0xFTkJRVFJDTEZOQlFWTXNZVUZCY2tNc1EwRkJka0k3UVVGRFFTeFZRVUZKTERoQ1FVRktPMEZCUTBFc1ZVRkJTU3gxUWtGQlNqdEJRVU5CTEZWQlFVa3NiVUpCUVVvN1FVRkRRU3hWUVVGSkxGZEJRVW83UVVGRFFTeFZRVUZKTEZGQlFWRXNSVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN08wRkJSek5ETEZsQlFVa3NRMEZCUXl4blFrRkJUQ3hGUVVGMVFqdEJRVU55UWl4MVFrRkJZU3hOUVVGTkxFMUJRVTRzUTBGQllTeGpRVUZpTEVWQlFXSTdRVUZEUVN4blFrRkJUU3h4UWtGQlRpeERRVUUwUWl4VFFVRlRMR0ZCUVhKRExFbEJRWE5FTEVWQlFVTXNXVUZCV1N4VlFVRmlMRVZCUVhsQ0xHRkJRV0VzU1VGQmRFTXNSVUZCZEVRN1FVRkRSQ3hUUVVoRUxFMUJSMDg3UVVGRFRDeDFRa0ZCWVN4cFFrRkJhVUlzVlVGQk9VSTdRVUZEUkRzN1FVRkZSQ3g1UWtGQmFVSXNlVUpCUVdVc1JVRkJReXhQUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1ZVRkJjRUlzUTBGQlVpeEZRVUY1UXl4bFFVRmxMRk5CUVZNc1lVRkJha1VzUlVGQlppeERRVUZxUWpzN1FVRkZRU3hoUVVGTExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNSVUZCVER0QlFVTkJMR05CUVUwc1JVRkJUaXhIUVVGWExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1JVRkJjRUlzUTBGQldEdEJRVU5CTEdOQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNjVUpCUVhSRExFVkJRVFpFTEdOQlFUZEVMRVZCUVRaRkxFVkJRVGRGTEVWQlFXbEdMRWxCUVdwR0xFTkJRWE5HTERCQ1FVRnJRanM3UVVGRmRFY3NhME5CUVhkQ08wRkJRM1JDTEd0Q1FVRk5MRmRCUkdkQ08wRkJSWFJDTEdkQ1FVRkpMRkZCUVZFc1NVRkdWVHRCUVVkMFFpeHJRa0ZCVFN4UlFVRlJMRVZCU0ZFN1FVRkpkRUlzYTBKQlFVMDdRVUZEU2l3NFFrRkJaMElzYjBKQlJGbzdRVUZGU2l4eFFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVhCQ08wRkJSa2c3UVVGS1owSXNWMEZCZUVJN08wRkJWVUVzWTBGQlNTeHJRa0ZCYTBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4eFFrRkJNMElzUlVGQmEwUXNhVUpCUVdsQ0xFVkJRVzVGTEVWQlFYVkZMRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeFhRVUUxUml4RFFVRjBRanM3UVVGRlFTeHBRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hSUVVGaUxFTkJRWE5DTEZOQlFWTXNTVUZCVkN4RFFVRmpMR3RDUVVGd1F5eEZRVUYzUkN4bFFVRjRSQ3hEUVVGUU8wRkJRMFFzVTBGbVJDeEZRV1ZITEVsQlprZ3NRMEZsVVN4NVFrRkJhVUk3TzBGQlJYWkNMR05CUVVrc1owSkJRV2RDTEV0QlFVc3NlVUpCUVdVc1JVRkJReXhQUVVGUExITkNRVUZ6UWl4SlFVRjBRaXhEUVVFeVFpeExRVUZ1UXl4RlFVRXdReXhOUVVGTkxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1lVRkJjRUlzUTBGQmFFUXNSVUZCYjBZc1NVRkJTU3hOUVVGTkxFVkJRVGxHTEVWQlFXWXNRMEZCVEN4RFFVRndRanM3UVVGRlFTeG5RMEZCYzBJc1NVRkJkRUlzUTBGQk1rSXNTMEZCTTBJc1IwRkJiVU1zWVVGQmJrTTdRVUZEUVN4clFrRkJVU3hGUVVGRExGTkJRVk1zY1VKQlFWWXNSVUZCYVVNc1ZVRkJWU3hSUVVFelF5eEZRVUZTTzBGQlEwUXNVMEZ5UWtRN1FVRnpRa1FzVDBGd1EwMHNRMEZCVUR0QlFYRkRSRHM3T3pzN096czdPenM0UTBGUGVVSXNZU3hGUVVGbE8wRkJRM1pETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPenRCUVVVelF5eFpRVUZKTEdGQlFXRXNZMEZCWXl4TFFVRmtMRU5CUVc5Q0xFZEJRWEJDTEVOQlFXcENPMEZCUTBFc1dVRkJTU3hYUVVGWExGZEJRVmNzUTBGQldDeEpRVUZuUWl4SlFVRm9RaXhIUVVGMVFpeFhRVUZYTEVOQlFWZ3NRMEZCZGtJc1IwRkJkVU1zUjBGQmRrTXNSMEZCTmtNc1YwRkJWeXhEUVVGWUxFTkJRVFZFT3pzN1FVRkhRU3haUVVGSkxHTkJRV01zVFVGQlRTeFJRVUZPTEVOQlFXVXNkMEpCUVdZc1EwRkJkME1zVVVGQmVFTXNRMEZCYkVJN08wRkJSVUVzV1VGQlNTeFhRVUZLTEVWQlFXbENPMEZCUTJZc2EwSkJRVkVzVjBGQlVqdEJRVU5FTEZOQlJrUXNUVUZGVHpzN1FVRkZUQ3hqUVVGSkxHOUNRVUZ2UWl4TlFVRk5MRzFDUVVGT0xFTkJRVEJDTEZGQlFURkNMRU5CUVhoQ096dEJRVVZCTEdOQlFVa3NhVUpCUVVvc1JVRkJkVUk3UVVGRGNrSXNiMEpCUVZFc2FVSkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdPMEZCUlV3c1owSkJRVWtzYjBKQlFXOUNMRTFCUVUwc1VVRkJUaXhEUVVGbExEaENRVUZtTEVOQlFUaERMR0ZCUVRsRExFTkJRWGhDT3p0QlFVVkJMR2RDUVVGSkxHbENRVUZLTEVWQlFYVkNPMEZCUTNKQ0xITkNRVUZSTEdsQ1FVRlNPMEZCUTBRc1lVRkdSQ3hOUVVWUE96czdPMEZCU1V3c2IwSkJRVTBzVVVGQlRpeERRVUZsTEhkQ1FVRm1MRU5CUVhkRExGRkJRWGhETEVWQlFXdEVMRmRCUVZjc1EwRkJXQ3hEUVVGc1JDeEZRVUZwUlN4SlFVRnFSU3hEUVVGelJTeHpRa0ZCWXp0QlFVTnNSaXh6UWtGQlRTeHRRa0ZCVGl4RFFVRXdRaXhSUVVFeFFpeEpRVUZ6UXl4WFFVRlhMRkZCUVdwRU8wRkJRMEVzZDBKQlFWRXNWMEZCVnl4UlFVRnVRanRCUVVORUxHVkJTRVFzUlVGSFJ5eGxRVUZQTzBGQlExSXNkVUpCUVU4c1IwRkJVRHRCUVVORUxHVkJURVE3UVVGTlJEdEJRVU5HTzBGQlEwWTdRVUZEUml4UFFXNURUU3hEUVVGUU8wRkJiME5FT3pzN096czdPenM3T3pzN2VVTkJVMjlDTEU4c1JVRkJVeXhqTEVWQlFXZENMRkVzUlVGQlZUczdRVUZGZEVRc1lVRkJUenRCUVVOTUxHTkJRVTBzVVVGQlVTeEpRVVJVTzBGQlJVd3NZMEZCVFN4UlFVRlJMRWxCUmxRN1FVRkhUQ3haUVVGTkxGRkJRVkVzUlVGSVZEdEJRVWxNTEdOQlFVMDdRVUZEU2l4dlFrRkJWU3haUVVGWkxGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlJDOUNPMEZCUlVvc2FVSkJRVThzYTBKQlFXdENMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJSbXhETzBGQlIwb3NNRUpCUVdkQ0xGRkJRVkVzU1VGQlVpeERRVUZoTzBGQlNIcENPMEZCU2tRc1QwRkJVRHRCUVZWRU96czdPenM3T3pzN096czdiVU5CVTJNc1R5eEZRVUZUTEU4c1JVRkJVeXhSTEVWQlFWVTdRVUZEZWtNc1ZVRkJTU3hSUVVGUkxFbEJRVm83T3pzN08wRkJTMEVzVlVGQlNTeFBRVUZSTEZGQlFVUXNSMEZCWVN4UlFVRlJMRVZCUVhKQ0xFZEJRVEJDTEZGQlFWRXNTVUZCTjBNN1FVRkRRU3hWUVVGSkxFdEJRVTBzVVVGQlJDeEhRVUZoTEZGQlFWRXNTVUZCY2tJc1IwRkJORUlzVVVGQlVTeEZRVUUzUXpzN1FVRkZRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeFhRVUZPTEVOQlFXdENMRTlCUVd4Q0xFTkJRV1k3TzBGQlJVRXNWVUZCU1N4blFrRkRTanRCUVVORkxIRkNRVU5CTzBGQlEwVXNiVUpCUVZNc1NVRkVXRHRCUVVWRkxHdENRVUZSTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhYUVVGeVFpeERRVUZwUXl4UlFVWXpRenRCUVVkRkxITkNRVUZaTEZOQlFWTXNUMEZCVkN4RFFVRnBRaXhQUVVndlFqdEJRVWxGTEhGQ1FVRlhMRk5CUVZNc1QwRkJWQ3hEUVVGcFFpeE5RVW81UWp0QlFVdEZMSEZDUVVGWExGTkJRVk1zVTBGTWRFSTdRVUZOUlN4MVFrRkJZU3hUUVVGVE8wRkJUbmhDTEZOQlJrWTdRVUZWUlN4dFFrRkRRVHRCUVVORkxHMUNRVUZUTEVWQlJGZzdRVUZGUlN4clFrRkJVU3hUUVVaV08wRkJSMFVzY1VKQlFWY3NVMEZJWWp0QlFVbEZMSEZDUVVGWE8wRkJTbUlzVTBGWVJqdEJRV2xDUlN4alFVTkJPMEZCUTBVc0swSkJRWEZDTEZOQlJIWkNPMEZCUlVVc2FVTkJRWFZDTEZOQlJucENPMEZCUjBVc05FSkJRV3RDTEZOQlNIQkNPMEZCU1VVc09FSkJRVzlDTEZOQlNuUkNPMEZCUzBVc2IwSkJRVlVzVTBGTVdqdEJRVTFGTEhOQ1FVRlpMRk5CVG1RN1FVRlBSU3gzUWtGQll5eFRRVkJvUWp0QlFWRkZMSEZDUVVGWE8wRkJVbUlzVTBGc1FrWTdRVUUwUWtVc01FSkJRV3RDTzBGQlEyaENMSFZDUVVGaExGTkJSRWM3UVVGRmFFSXNlVUpCUVdVc1UwRkdRenRCUVVkb1FpdzJRa0ZCYlVJc1UwRklTRHRCUVVsb1FpeHRRMEZCZVVJN1FVRktWQ3hUUVRWQ2NFSTdRVUZyUTBVc2QwSkJRV2xDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdRc1IwRkJkMElzVTBGQmVFSXNSMEZCYjBNc1QwRnNRM1JFTzBGQmJVTkZMR3RDUVVGVkxGRkJRVkVzVVVGdVEzQkNPMEZCYjBORkxIVkNRVUZsTEV0QmNFTnFRanRCUVhGRFJTeDFRa0ZCWlN4UlFVRlJPMEZCY2tONlFpeFBRVVJCT3p0QlFYbERRU3hoUVVGUExHRkJRVkE3UVVGRFJEczdPM2RDUVd4eFEyZENPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNWMEZCWWp0QlFVTkVPenM3T3pzN08zTkNRVTFqTEZVc1JVRkJXVHRCUVVONlFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRmxCUVUwc1YwRkJUaXhIUVVGdlFpeFZRVUZ3UWp0QlFVTkVPenM3T3pzN096czdkMEpCVFdNN1FVRkRZaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4VFFVRmlPMEZCUTBRN096czdPenM3YzBKQlRWa3NVU3hGUVVGVk8wRkJRM0pDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1dVRkJUU3hUUVVGT0xFZEJRV3RDTEZGQlFXeENPMEZCUTBRN096czdPMnRDUVhWdlExa3NZenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VOcWRrTlVMRTg3UVVGRlNpeHhRa0ZCWXp0QlFVRkJPenRCUVVOYUxGRkJRVWtzUzBGQlN5eFhRVUZNTEV0QlFYRkNMRTlCUVhwQ0xFVkJRV3RETzBGQlEyaERMRmxCUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zYlVOQlFXUXNRMEZCVGp0QlFVTkVPMEZCUTBRc1VVRkJTU3hMUVVGTExGZEJRVXdzUzBGQmNVSXNVVUZCVVN4VFFVRlNMRU5CUVd0Q0xGZEJRVE5ETEVWQlFYZEVPMEZCUTNSRUxGbEJRVTBzU1VGQlNTeFRRVUZLTEVOQlFXTXNLME5CUVdRc1EwRkJUanRCUVVORU8wRkJRMFk3T3pzN2JVTkJSWEZDTzBGQlEzQkNMRlZCUVVrc1UwRkJVeXhQUVVGaUxFVkJRWE5DTzBGQlEzQkNMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zYlVSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSkxFdEJRVXNzV1VGQlRDeExRVUZ6UWl4UlFVRlJMRmxCUVd4RExFVkJRV2RFTzBGQlEzSkVMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zZFVSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmswc1RVRkZRVHRCUVVOTUxHTkJRVTBzU1VGQlNTeFRRVUZLTEVOQlFXTXNOa1JCUVdRc1EwRkJUanRCUVVORU8wRkJRMFk3T3pzMFEwRkZPRUk3UVVGRE4wSXNWVUZCU1N4VFFVRlRMRTlCUVdJc1JVRkJjMEk3UVVGRGNFSXNZMEZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXcwUkVGQlpDeERRVUZPTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVrc1MwRkJTeXh4UWtGQlRDeExRVUVyUWl4UlFVRlJMSEZDUVVFelF5eEZRVUZyUlR0QlFVTjJSU3hqUVVGTkxFbEJRVWtzVTBGQlNpeERRVUZqTEdkRlFVRmtMRU5CUVU0N1FVRkRSQ3hQUVVaTkxFMUJSVUU3UVVGRFRDeGpRVUZOTEVsQlFVa3NVMEZCU2l4RFFVRmpMSE5GUVVGa0xFTkJRVTQ3UVVGRFJEdEJRVU5HT3pzN2FVTkJSVzFDTzBGQlEyeENMRlZCUVVrc1UwRkJVeXhQUVVGaUxFVkJRWE5DTzBGQlEzQkNMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zYVVSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSkxFdEJRVXNzVlVGQlRDeExRVUZ2UWl4UlFVRlJMRlZCUVdoRExFVkJRVFJETzBGQlEycEVMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zY1VSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmswc1RVRkZRVHRCUVVOTUxHTkJRVTBzU1VGQlNTeFRRVUZLTEVOQlFXTXNNa1JCUVdRc1EwRkJUanRCUVVORU8wRkJRMFk3T3pzMFEwRkZPRUk3UVVGRE4wSXNWVUZCU1N4VFFVRlRMRTlCUVdJc1JVRkJjMEk3UVVGRGNFSXNZMEZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXcwUkVGQlpDeERRVUZPTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVrc1MwRkJTeXh4UWtGQlRDeExRVUVyUWl4UlFVRlJMSEZDUVVFelF5eEZRVUZyUlR0QlFVTjJSU3hqUVVGTkxFbEJRVWtzVTBGQlNpeERRVUZqTEdkRlFVRmtMRU5CUVU0N1FVRkRSQ3hQUVVaTkxFMUJSVUU3UVVGRFRDeGpRVUZOTEVsQlFVa3NVMEZCU2l4RFFVRmpMSE5GUVVGa0xFTkJRVTQ3UVVGRFJEdEJRVU5HT3pzN2IwTkJSWE5DTzBGQlEzSkNMRlZCUVVrc1UwRkJVeXhQUVVGaUxFVkJRWE5DTzBGQlEzQkNMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zYjBSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmtRc1RVRkZUeXhKUVVGSkxFdEJRVXNzWVVGQlRDeExRVUYxUWl4UlFVRlJMR0ZCUVc1RExFVkJRV3RFTzBGQlEzWkVMR05CUVUwc1NVRkJTU3hUUVVGS0xFTkJRV01zZDBSQlFXUXNRMEZCVGp0QlFVTkVMRTlCUmswc1RVRkZRVHRCUVVOTUxHTkJRVTBzU1VGQlNTeFRRVUZLTEVOQlFXTXNPRVJCUVdRc1EwRkJUanRCUVVORU8wRkJRMFk3T3p0blEwRkZhMEk3UVVGRGFrSXNWVUZCU1N4VFFVRlRMRTlCUVdJc1JVRkJjMEk3UVVGRGNFSXNZMEZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXhuUkVGQlpDeERRVUZPTzBGQlEwUXNUMEZHUkN4TlFVVlBMRWxCUVVrc1MwRkJTeXhUUVVGTUxFdEJRVzFDTEZGQlFWRXNVMEZCTDBJc1JVRkJNRU03UVVGREwwTXNZMEZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXh2UkVGQlpDeERRVUZPTzBGQlEwUXNUMEZHVFN4TlFVVkJPMEZCUTB3c1kwRkJUU3hKUVVGSkxGTkJRVW9zUTBGQll5d3dSRUZCWkN4RFFVRk9PMEZCUTBRN1FVRkRSanM3T3pzN2EwSkJTVmtzVHpzN096czdPenM3T3pzN096czdPenM3T3pzN1NVTjZSVlFzVXp0QlFVVktMSFZDUVVGak8wRkJRVUU3TzBGQlExb3NVVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGTkxGTkJRVTRzUjBGQmEwSXNUVUZCVFN4WlFVRk9MRVZCUVd4Q08wRkJRMFE3T3pzN2JVTkJSV003UVVGRFlpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1dVRkJXVHRCUVVOa0xHbENRVUZUTEdsQ1FVRkRMRTFCUVVRc1JVRkJXVHRCUVVGRkxHbENRVUZQTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhQUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQlFXaENMRVZCUVRoQ0xFOUJRVThzUTBGQlVDeEZRVUZWTEVOQlFWWXNRMEZCT1VJc1JVRkJORU1zVDBGQlR5eERRVUZRTEVOQlFUVkRMRU5CUVZBN1FVRkJaMFVzVTBGRWVrVTdRVUZGWkN4WlFVRkpMR0ZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRVVVzYVVKQlFVOHNUMEZCVHl4RFFVRlFMRVZCUVZVc1QwRkJWaXhEUVVGclFpeFBRVUZQTEVOQlFWQXNRMEZCYkVJc1NVRkJLMElzUTBGQlF5eERRVUYyUXp0QlFVRXlReXhUUVVZdlF6dEJRVWRrTEdkQ1FVRlJMR2RDUVVGRExFMUJRVVFzUlVGQldUdEJRVUZGTEdsQ1FVRlBMRTlCUVU4c1EwRkJVQ3hGUVVGVkxFTkJRVllzVFVGQmFVSXNSMEZCYWtJc1NVRkJkMElzVDBGQlR5eERRVUZRTEVWQlFWVXNRMEZCVml4TlFVRnBRaXhQUVVGUExFTkJRVkFzUTBGQmFFUTdRVUZCTkVRc1UwRkljRVU3TzBGQlMyUXNXVUZCU1N4WlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVGRkxHbENRVUZQTEU5QlFVOHNRMEZCVUN4TFFVRmhMRTlCUVU4c1EwRkJVQ3hEUVVGd1FqdEJRVUZuUXl4VFFVeHdRenRCUVUxa0xHRkJRVXNzWVVGQlF5eE5RVUZFTEVWQlFWazdRVUZCUlN4cFFrRkJUeXhQUVVGUExFTkJRVkFzUzBGQllTeFBRVUZQTEVOQlFWQXNRMEZCY0VJN1FVRkJaME1zVTBGT2NrTTdRVUZQWkN4aFFVRkxMR0ZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRVVVzYVVKQlFVOHNRMEZCUXl4UFFVRlBMRU5CUVZBc1EwRkJVanRCUVVGdlFqdEJRVkI2UWl4UFFVRm9RanRCUVZOQkxHRkJRVThzVTBGQlVEdEJRVU5FT3pzN096czdPenM3T3pzNFFrRlJVeXhMTEVWQlFVOHNSeXhGUVVGTExFY3NSVUZCU3p0QlFVTjZRaXhqUVVGUkxGTkJRVk1zUzBGQlZDeERRVUZTTzBGQlEwRXNXVUZCVFN4VFFVRlRMRWRCUVZRc1EwRkJUanM3UVVGRlFTeFZRVUZKTEUxQlFVMHNTMEZCVml4RlFVRnBRanRCUVVObUxHTkJRVThzVFVGQlRTeExRVUZRTEVkQlFXZENMRTlCUVU4c1NVRkJka0lzUjBGQk9FSXNSMEZCY0VNN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFJEczdRVUZGUkN4aFFVRlJMRTFCUVUwc1MwRkJUaXhKUVVGbExFMUJRVTBzUjBGQk4wSTdRVUZEUkRzN096czdhMEpCU1Zrc1V6czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNwRFpqczdPenM3T3pzN096czdPenM3U1VGVFRTeEhPenM3T3pzN096czdRVUZSU2l4bFFVRlpMRTlCUVZvc1JVRkJjVUk3UVVGQlFUczdRVUZEYmtJc1VVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1QwRkJhRUk3UVVGRFFTeFZRVUZOTEZOQlFVNHNSMEZCYTBJc2QwSkJRV01zVDBGQlpDeERRVUZzUWp0QlFVTkVPenM3T3pzN096czdPenM3T3pzN05rSkJWMUVzVHl4RlFVRlRMRkVzUlVGQlZUdEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzVlVGQlZTeERRVUZETEVsQlFVUXNRMEZCWkR0QlFVTkJMRlZCUVVrc1ZVRkJWU3hGUVVGa08wRkJRMEVzVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4UlFVRmtMRVZCUVhkQ08wRkJRM1JDTEZsQlFVa3NVMEZCVXl4VFFVRlRMRU5CUVZRc1EwRkJZanRCUVVOQkxGbEJRVWtzV1VGQldTeFBRVUZQTEZOQlFYWkNPMEZCUTBFc1dVRkJTU3h2UWtGQmIwSXNTMEZCZUVJN1FVRkRRU3haUVVGSkxGRkJRVThzVTBGQlVDeDFSRUZCVHl4VFFVRlFMRTlCUVhGQ0xGRkJRWHBDTEVWQlFXMURPMEZCUTJwRExEaENRVUZ2UWl4TlFVRk5MSGxDUVVGT0xFTkJRV2RETEZWQlFWVXNRMEZCVml4RFFVRm9ReXhGUVVFNFF5eFZRVUZWTEVOQlFWWXNRMEZCT1VNc1JVRkJORVFzVlVGQlZTeERRVUZXTEVOQlFUVkVMRVZCUVRCRkxFOUJRVThzUzBGQmFrWXNSVUZCZDBZc1QwRkJlRVlzUTBGQmNFSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3c0UWtGQmIwSXNUVUZCVFN4MVFrRkJUaXhEUVVFNFFpeFRRVUU1UWl4RlFVRjVReXhQUVVGUExFdEJRV2hFTEVWQlFYVkVMRTlCUVhaRUxFTkJRWEJDTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3hwUWtGQlNpeEZRVUYxUWp0QlFVTnlRaXhyUWtGQlVTeEpRVUZTTEVOQlFXRXNUMEZCVHl4VFFVRndRanRCUVVORU8wRkJRMFFzV1VGQlNTeFBRVUZQTEU5QlFWQXNTMEZCYlVJc1JVRkJka0lzUlVGQk1rSTdRVUZEZWtJc1pVRkJTeXhKUVVGSkxFVkJRVlFzU1VGQll5eFBRVUZQTEU5QlFYSkNMRVZCUVRoQ08wRkJRelZDTEdkQ1FVRkpMRmxCUVZrN1FVRkRaQ3h6UWtGQlVTeFBRVUZQTEU5QlFWQXNRMEZCWlN4RlFVRm1MRVZCUVd0Q0xFMUJSRm83UVVGRlpDeHpRa0ZCVVR0QlFVWk5MR0ZCUVdoQ08wRkJTVUVzYjBKQlFWRXNTVUZCVWl4RFFVRmhMRk5CUVdJN1FVRkRSRHRCUVVOR08wRkJRMFk3TzBGQlJVUXNWVUZCU1N4bFFVRmxMRkZCUVZFc1QwRkJVaXhEUVVGblFpeExRVUZvUWl4TlFVRXlRaXhEUVVGRExFTkJRUzlETzBGQlEwRXNZVUZCVHl4RFFVRkRMRmxCUVVRc1JVRkJaU3hQUVVGbUxFTkJRVkE3UVVGRFJEczdPelJEUVVWMVFpeFRMRVZCUVZjc1N5eEZRVUZQTEU4c1JVRkJVenRCUVVOcVJDeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2FVSkJRV2xDTEZWQlFWVXNTMEZCVml4RFFVRm5RaXhIUVVGb1FpeERRVUZ5UWp0QlFVTkJMRlZCUVVrc1YwRkJWeXhsUVVGbExFTkJRV1lzUTBGQlpqdEJRVU5CTEZWQlFVa3NWMEZCVnl4bFFVRmxMRU5CUVdZc1EwRkJaanM3UVVGRlFTeFZRVUZKTEdWQlFVbzdRVUZEUVN4VlFVRkpMR0ZCUVdFc1NVRkJha0lzUlVGQmRVSTdRVUZEY2tJc1kwRkJUU3hQUVVGT0xFTkJRV01zUzBGQlpDeEhRVUZ6UWl4RlFVRkRMRTlCUVU4c1MwRkJVaXhGUVVGbExFOUJRVThzWlVGQlpTeERRVUZtTEVOQlFYUkNMRVZCUVhsRExHRkJRV0VzVVVGQlVTeEZRVUU1UkN4RlFVRjBRanRCUVVOQkxHbENRVUZUTEUxQlFVMHNUMEZCVGl4RFFVRmpMRXRCUVhaQ08wRkJRMFFzVDBGSVJDeE5RVWRQTzBGQlEwd3NhVUpCUVZNc1pVRkJaU3hMUVVGbUxFTkJRWEZDTEVOQlFYSkNMRU5CUVZRN1FVRkRSRHRCUVVORUxGbEJRVTBzVDBGQlRpeERRVUZqTEZGQlFXUXNTVUZCTUVJc1JVRkJReXhUUVVGVExFOUJRVllzUlVGQk1VSTdRVUZEUVN4VlFVRkpMRkZCUVZFc1RVRkJUU3hQUVVGT0xFTkJRV01zVVVGQlpDeERRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRk5CUVU0c1EwRkJaMElzVTBGQmFFSXNRMEZCTUVJc1VVRkJNVUlzUlVGQmIwTXNRMEZCUXl4TlFVRkVMRVZCUVZNc1MwRkJWQ3hEUVVGd1F5eERRVUZRTzBGQlEwUTdPenM0UTBGRmVVSXNVU3hGUVVGVkxFa3NSVUZCVFN4TExFVkJRVThzU3l4RlFVRlBMRThzUlVGQlV6dEJRVU12UkN4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVVVGQlR5eEpRVUZRTEhWRVFVRlBMRWxCUVZBc1QwRkJaMElzVVVGQmRrSXNSVUZCYVVNN1FVRkRMMElzWlVGQlR5eE5RVUZOTEhsQ1FVRk9MRU5CUVdkRExFdEJRVXNzUTBGQlRDeERRVUZvUXl4RlFVRjVReXhMUVVGTExFTkJRVXdzUTBGQmVrTXNSVUZCYTBRc1MwRkJTeXhEUVVGTUxFTkJRV3hFTEVWQlFUSkVMRXRCUVRORUxFVkJRV3RGTEU5QlFXeEZMRU5CUVZBN1FVRkRSRHRCUVVORUxGVkJRVWtzVlVGQlZTeFRRVUZrTEVWQlFYbENPMEZCUTNaQ0xHVkJRVThzVVVGQlR5eExRVUZRTEhWRVFVRlBMRXRCUVZBc1QwRkJhVUlzVVVGQmVFSXNSVUZCYTBNN1FVRkRhRU1zYTBKQlFWRXNUVUZCVFN4NVFrRkJUaXhEUVVGblF5eE5RVUZOTEVOQlFVNHNRMEZCYUVNc1JVRkJNRU1zVFVGQlRTeERRVUZPTEVOQlFURkRMRVZCUVc5RUxFMUJRVTBzUTBGQlRpeERRVUZ3UkN4RlFVRTRSQ3hMUVVFNVJDeEZRVUZ4UlN4UFFVRnlSU3hEUVVGU08wRkJRMFE3UVVGRFJqczdRVUZGUkN4VlFVRkpMR0ZCUVdNc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZOQlFXcENMRWRCUVRoQ0xFbEJRVGxDTEVkQlFYRkRMRTFCUVUwc2RVSkJRVTRzUTBGQk9FSXNTVUZCT1VJc1JVRkJiME1zUzBGQmNFTXNSVUZCTWtNc1QwRkJNME1zUTBGQmRFUTdPMEZCUlVFc1ZVRkJTU3h2UWtGQlNqdEJRVU5CTEZWQlFVa3NWVUZCVlN4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEhOQ1FVRmxMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeFRRVUZzUWl4SFFVRXJRaXhMUVVFdlFpeEhRVUYxUXl4TlFVRk5MSFZDUVVGT0xFTkJRVGhDTEV0QlFUbENMRVZCUVhGRExFdEJRWEpETEVWQlFUUkRMRTlCUVRWRExFTkJRWEpFTzBGQlEwUTdPMEZCUlVRc1lVRkJUeXhOUVVGTkxGTkJRVTRzUTBGQlowSXNVMEZCYUVJc1EwRkJNRUlzVVVGQk1VSXNSVUZCYjBNc1EwRkJReXhWUVVGRUxFVkJRV0VzVjBGQllpeERRVUZ3UXl4RFFVRlFPMEZCUTBRN096czdPMnRDUVVkWkxFYzdPenM3T3pzN096czdPenM3T3pzN096czdPMGxEZUVkVUxFYzdRVUZGU2l4bFFVRlpMRTlCUVZvc1JVRkJjVUk3UVVGQlFUczdRVUZEYmtJc1VVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1QwRkJhRUk3UVVGRFJEczdPenMwUWtGRlR5eE5MRVZCUVZFN1FVRkRaQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NaVUZCWlN4UFFVRlBMRU5CUVZBc1EwRkJia0k3UVVGRFFTeFZRVUZKTEZWQlFWVXNUMEZCVHl4RFFVRlFMRU5CUVdRN08wRkJSVUVzVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4UFFVRmtMRVZCUVhWQ08wRkJRM0pDTEdOQlFVMHNUMEZCVGl4RFFVRmpMRkZCUVZFc1EwRkJVaXhGUVVGWExFMUJRWHBDTEVWQlFXbERMRkZCUVZFc1EwRkJVaXhGUVVGWExFMUJRVFZETEVWQlFXOUVMRmxCUVhCRU8wRkJRMFE3UVVGRFJqczdPenM3T3pzN096dHJRa0ZWV1N4SE96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY2tKbU96czdPMEZCUTBFN096czdPenM3T3pzN096czdPMGxCVFUwc1dUczdPenM3T3pzN096dEJRVk5LTEhkQ1FVRlpMRTlCUVZvc1JVRkJjVUk3UVVGQlFUczdRVUZEYmtJc1VVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1QwRkJhRUk3UVVGRFFTeFZRVUZOTEU5QlFVNHNRMEZCWXl4SFFVRmtMRWRCUVc5Q0xHdENRVUZSTEU5QlFWSXNRMEZCY0VJN1FVRkRRU3hWUVVGTkxFOUJRVTRzUTBGQll5eEhRVUZrTEVkQlFXOUNMR3RDUVVGUkxFOUJRVklzUTBGQmNFSTdRVUZEUkRzN096czdPenM3T3pzN08yZERRVkZYTEZjc1JVRkJZVHRCUVVOMlFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxHRkJRV0VzVFVGQlRTeFBRVUZPTEVOQlFXTXNVVUZCTDBJN1FVRkRRU3hWUVVGSkxHVkJRV1VzVTBGQmJrSXNSVUZCT0VJN1FVRkROVUlzY1VKQlFXRXNSVUZCWWp0QlFVTkVPenRCUVVWRUxGZEJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNWMEZCWkN4RlFVRXlRanRCUVVONlFpeFpRVUZKTEZsQlFWa3NXVUZCV1N4RFFVRmFMRU5CUVdoQ08wRkJRMEVzV1VGQlNTeFJRVUZSTEZWQlFWVXNTMEZCZEVJN1FVRkRRU3haUVVGSkxGZEJRVmNzUzBGQldDeE5RVUZ6UWl4VFFVRXhRaXhGUVVGeFF6dEJRVU51UXl4eFFrRkJWeXhMUVVGWUxFbEJRVzlDTEVWQlFYQkNPMEZCUTBRN1FVRkRSQ3hoUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEZkQlFWY3NTMEZCV0N4RFFVRmtMRVZCUVdsRE8wRkJReTlDTEdOQlFVa3NhVUpCUVdsQ0xGZEJRVmNzUzBGQldDeEZRVUZyUWl4RFFVRnNRaXhEUVVGeVFqdEJRVU5CTEdOQlFVa3NaVUZCWlN4VFFVRm1MRXRCUVRaQ0xGVkJRVlVzVTBGQk0wTXNSVUZCYzBRN1FVRkRjRVFzYTBKQlFVMHNZMEZCVGl4RFFVRnhRaXhaUVVGWkxFTkJRVm9zUlVGQlpTeFRRVUZ3UXp0QlFVTkJPMEZCUTBRN1FVRkRSanRCUVVORUxHMUNRVUZYTEV0QlFWZ3NSVUZCYTBJc1NVRkJiRUlzUTBGQmRVSXNXVUZCV1N4RFFVRmFMRU5CUVhaQ08wRkJRMFE3TzBGQlJVUXNXVUZCVFN4UFFVRk9MRU5CUVdNc1VVRkJaQ3hIUVVGNVFpeFZRVUY2UWp0QlFVTkVPenM3T3pzN096czdPMjFEUVU5akxFc3NSVUZCVHl4VExFVkJRVmM3UVVGREwwSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxHRkJRV0VzVFVGQlRTeFBRVUZPTEVOQlFXTXNVVUZCTDBJN08wRkJSVUVzVlVGQlNTeFZRVUZWTEVkQlFXUXNSVUZCYlVJN08wRkJSV3BDTEZsQlFVa3NVMEZCVXl4VlFVRmlMRVZCUVhsQ08wRkJRM1pDTEdOQlFVa3NZMEZCWXl4SFFVRnNRaXhGUVVGMVFqdEJRVU55UWl4blFrRkJTU3hYUVVGWExGZEJRVmNzUzBGQldDeERRVUZtTzBGQlEwRXNaMEpCUVVrc2VVSkJRWGxDTEZOQlFYcENMSFZFUVVGNVFpeFRRVUY2UWl4RFFVRktPMEZCUTBFc2FVSkJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNVVUZCWkN4RlFVRjNRanRCUVVOMFFpeHJRa0ZCU1N3NFEwRkJLMElzVTBGQlV5eERRVUZVTEVWQlFWa3NVMEZCTTBNc1EwRkJTanRCUVVOQkxHdENRVUZKTEc5Q1FVRnZRaXh4UWtGQmVFSXNSVUZCSzBNN1FVRkROME1zYjBKQlFVa3NiMEpCUVc5Q0xGRkJRWGhDTEVWQlFXdERPMEZCUTJoRExITkNRVUZKTEZOQlFWTXNRMEZCVkN4RlFVRlpMRk5CUVZvc1MwRkJNRUlzVTBGQk9VSXNSVUZCZVVNN1FVRkRka01zTmtKQlFWTXNUVUZCVkN4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4RFFVRnVRanRCUVVOQk8wRkJRMFE3UVVGRFJpeHBRa0ZNUkN4TlFVdFBPenRCUVVOTUxITkNRVUZKTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhUUVVGVExFTkJRVlFzUlVGQldTeFRRVUZxUXl4RlFVRTBReXhUUVVFMVF5eERRVUZLTEVWQlFUUkVPMEZCUXpGRUxEWkNRVUZUTEUxQlFWUXNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNRMEZCYmtJN1FVRkRSRHRCUVVOR08wRkJRMFk3UVVGRFJqdEJRVU5HTEZkQmJFSkVMRTFCYTBKUE8wRkJRMHdzYlVKQlFVOHNWMEZCVnl4TFFVRllMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeG5Ra0ZCVFN4UFFVRk9MRU5CUVdNc1VVRkJaQ3hIUVVGNVFpeFZRVUY2UWp0QlFVTkVPMEZCUlVZc1QwRTFRa1FzVFVFMFFrODdRVUZEVEN4alFVRk5MRTlCUVU0c1EwRkJZeXhSUVVGa0xFZEJRWGxDTEVWQlFYcENPMEZCUTBRN1FVRkRSanM3TzIxRFFVVmpMRTBzUlVGQlVTeE5MRVZCUVZFN1FVRkROMElzVlVGQlNTeFBRVUZQTEUxQlFWQXNTMEZCYTBJc1QwRkJUeXhOUVVFM1FpeEZRVUZ4UXp0QlFVTnVReXhsUVVGUExFdEJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRkpMR05CUVdNc1QwRkJUeXhOUVVGNlFqdEJRVU5CTEZkQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFhRVUZ3UWl4RlFVRnBReXhIUVVGcVF5eEZRVUZ6UXp0QlFVTndReXhaUVVGSkxFOUJRVThzUTBGQlVDeGhRVUZ4UWl4TFFVRnlRaXhKUVVFNFFpeFBRVUZQTEVOQlFWQXNZVUZCY1VJc1MwRkJka1FzUlVGQk9FUTdRVUZETlVRc1kwRkJTU3hEUVVGRExFOUJRVThzUTBGQlVDeEZRVUZWTEUxQlFWWXNRMEZCYVVJc1QwRkJUeXhEUVVGUUxFTkJRV3BDTEVOQlFVd3NSVUZCYTBNN1FVRkRhRU1zYlVKQlFVOHNTMEZCVUR0QlFVTkVPMEZCUTBZc1UwRktSQ3hOUVVsUExFbEJRVWtzVDBGQlR5eERRVUZRTEUxQlFXTXNUMEZCVHl4RFFVRlFMRU5CUVd4Q0xFVkJRVFpDTzBGQlEyeERMR2xDUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwUXNZVUZCVHl4SlFVRlFPMEZCUTBRN096czdPenM3T3pzN096czdPemhDUVZkVExFOHNSVUZCVXp0QlFVTnFRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4UFFVRk9MRU5CUVdNc1UwRkJaQ3hEUVVGM1FpeFBRVUY0UWl4RFFVRlFPMEZCUTBRN096dHRRMEZGWXl4TExFVkJRVTg3UVVGRGNFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeFBRVUZPTEVOQlFXTXNUVUZCTjBJN1FVRkRRU3hWUVVGSkxHTkJRV01zUlVGQmJFSTdRVUZEUVN4VlFVRkpMRk5CUVZNc1MwRkJWQ3hOUVVGdlFpeEZRVUY0UWl4RlFVRTBRanRCUVVNeFFpeGhRVUZMTEVsQlFVa3NVMEZCVkN4SlFVRnpRaXhUUVVGVExFdEJRVlFzUTBGQmRFSXNSVUZCZFVNN1FVRkRja01zYzBKQlFWa3NTVUZCV2l4RFFVRnBRaXhUUVVGcVFqdEJRVU5FTzBGQlEwWTdRVUZEUkN4aFFVRlBMRmRCUVZBN1FVRkRSRHM3T3pzN096czdPenMwUWtGUFR5eExMRVZCUVU4c1V5eEZRVUZYTzBGQlEzaENMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeFhRVUZYTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTFCUVRkQ08wRkJRMEVzVlVGQlNTeFZRVUZWTEVWQlFXUTdRVUZEUVN4VlFVRkpMRk5CUVZNc1MwRkJWQ3hOUVVGdlFpeFRRVUZ3UWl4SlFVRnBReXhUUVVGVExFdEJRVlFzUlVGQlowSXNVMEZCYUVJc1RVRkJLMElzVTBGQmNFVXNSVUZCSzBVN1FVRkROMFVzYTBKQlFWVXNVMEZCVXl4TFFVRlVMRVZCUVdkQ0xGTkJRV2hDTEVOQlFWWTdRVUZEUkR0QlFVTkVMR0ZCUVU4c1QwRkJVRHRCUVVORU96czdPenM3T3pzN0swSkJUVlVzU3l4RlFVRlBMRWtzUlVGQlRTeFRMRVZCUVZjN1FVRkRha01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hYUVVGWExFMUJRVTBzVDBGQlRpeERRVUZqTEUxQlFUZENPMEZCUTBFc1ZVRkJTU3hUUVVGVExFdEJRVlFzVFVGQmIwSXNVMEZCZUVJc1JVRkJiVU03UVVGRGFrTXNhVUpCUVZNc1MwRkJWQ3hKUVVGclFpeEZRVUZzUWp0QlFVTkVPMEZCUTBRc1pVRkJVeXhMUVVGVUxFVkJRV2RDTEZOQlFXaENMRWxCUVRaQ0xFVkJRVGRDT3p0QlFVVkJMRlZCUVVrc1UwRkJVenRCUVVOWUxHMUNRVUZYTEV0QlJFRTdRVUZGV0N4dFFrRkJWeXhQUVVGUExFMUJRVkFzUjBGQlowSXNVMEZHYUVJN1FVRkhXQ3hsUVVGUExFdEJTRWs3UVVGSldDeHBRa0ZCVXp0QlFVcEZMRTlCUVdJN1FVRk5RU3haUVVGTkxGZEJRVTRzUTBGQmEwSXNRMEZCUXl4TlFVRkVMRU5CUVd4Q096dEJRVVZCTEdGQlFVOHNVVUZCVUR0QlFVTkVPenM3WjBOQlJWY3NTeXhGUVVGUExGTXNSVUZCVnp0QlFVTTFRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRmRCUVZjc1RVRkJUU3hQUVVGT0xFTkJRV01zVFVGQk4wSTdRVUZEUVN4aFFVRlBMRk5CUVZNc1MwRkJWQ3hGUVVGblFpeFRRVUZvUWl4RFFVRlFPenRCUVVWQkxGVkJRVWtzWVVGQllTeE5RVUZOTEU5QlFVNHNRMEZCWXl4UlFVRXZRanM3UVVGRlFTeFZRVUZKTEZkQlFWY3NWMEZCVnl4TFFVRllMRU5CUVdZN1FVRkRRU3hYUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEZGQlFXUXNSVUZCZDBJN1FVRkRkRUlzV1VGQlNTeFpRVUZaTEZOQlFWTXNRMEZCVkN4RlFVRlpMRk5CUVZvc1EwRkJjMElzUzBGQmRFSXNRMEZCTkVJc1IwRkJOVUlzUTBGQmFFSTdRVUZEUVN4clFrRkJWU3hMUVVGV08wRkJRMEVzV1VGQlNTeG5Ra0ZCWjBJc1ZVRkJWU3hKUVVGV0xFTkJRV1VzUjBGQlppeERRVUZ3UWp0QlFVTkJMRmxCUVVrc2EwSkJRV3RDTEZOQlFYUkNMRVZCUVdsRE8wRkJReTlDTEdsQ1FVRlBMRk5CUVZNc1EwRkJWQ3hEUVVGUU8wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenM3T3pzN096czdPRUpCVDFNc1N5eEZRVUZQTEVrc1JVRkJUU3hUTEVWQlFWY3NVeXhGUVVGWE8wRkJRek5ETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzVjBGQlZ5eE5RVUZOTEU5QlFVNHNRMEZCWXl4TlFVRTNRanRCUVVOQkxGVkJRVWtzVTBGQlV5eExRVUZVTEUxQlFXOUNMRk5CUVhoQ0xFVkJRVzFETzBGQlEycERMR2xDUVVGVExFdEJRVlFzU1VGQmEwSXNSVUZCYkVJN1FVRkRSRHRCUVVORUxGVkJRVWtzVTBGQlV5eExRVUZVTEVWQlFXZENMRk5CUVdoQ0xFMUJRU3RDTEZOQlFXNURMRVZCUVRoRE8wRkJRelZETEcxQ1FVRlhMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeExRVUZxUWl4RlFVRjNRaXhKUVVGNFFpeEZRVUU0UWl4VFFVRTVRaXhEUVVGWU8wRkJRMFE3UVVGRFJDeFZRVUZKTEZOQlFWTXNTMEZCVkN4RlFVRm5RaXhUUVVGb1FpeEZRVUV5UWl4UFFVRXpRaXhEUVVGdFF5eFRRVUZ1UXl4TlFVRnJSQ3hEUVVGRExFTkJRWFpFTEVWQlFUQkVPMEZCUTNoRUxHbENRVUZUTEV0QlFWUXNSVUZCWjBJc1UwRkJhRUlzUlVGQk1rSXNTVUZCTTBJc1EwRkJaME1zVTBGQmFFTTdRVUZEUkR0QlFVVkdPenM3T3pzN096czdPMjlEUVU5bExFc3NSVUZCVHl4VExFVkJRVmNzVXl4RlFVRlhPMEZCUXpORExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1YwRkJWeXhOUVVGTkxFOUJRVTRzUTBGQll5eE5RVUUzUWp0QlFVTkJMRlZCUVVrc1VVRkJVU3hUUVVGVExFdEJRVlFzUlVGQlowSXNVMEZCYUVJc1EwRkJXanM3UVVGRlFTeFhRVUZMTEVsQlFVa3NRMEZCVkN4SlFVRmpMRXRCUVdRc1JVRkJjVUk3UVVGRGJrSXNXVUZCU1N4TlFVRk5MRU5CUVU0c1RVRkJZU3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXhuUWtGQlRTeE5RVUZPTEVOQlFXRXNRMEZCWWl4RlFVRm5RaXhEUVVGb1FqdEJRVU5CTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3YlVOQlJXTTdRVUZEWWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzVjBGQlZ5eE5RVUZOTEU5QlFVNHNRMEZCWXl4UlFVRmtMRU5CUVhWQ0xFbEJRWFJETzBGQlEwRXNWVUZCU1N4dFFrRkJiVUlzUlVGQmRrSTdRVUZEUVN4WFFVRkxMRWxCUVVrc1EwRkJWQ3hKUVVGakxGRkJRV1FzUlVGQmQwSTdRVUZEZEVJc1dVRkJTU3hUUVVGVExFTkJRVlFzUlVGQldTeFRRVUZhTEVOQlFYTkNMRXRCUVhSQ0xFTkJRVFJDTEVkQlFUVkNMRVZCUVdsRExFTkJRV3BETEUxQlFYZERMRTFCUVRWRExFVkJRVzlFTzBGQlEyeEVMREpDUVVGcFFpeEpRVUZxUWl4RFFVRnpRaXhUUVVGVExFTkJRVlFzUlVGQldTeFRRVUZzUXp0QlFVTkVPMEZCUTBZN1FVRkRSQ3hoUVVGUExHZENRVUZRTzBGQlEwUTdPenR2UTBGRlpTeFRMRVZCUVZjN1FVRkRla0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRmRCUVZjc1RVRkJUU3hQUVVGT0xFTkJRV01zVVVGQlpDeERRVUYxUWl4SlFVRjBRenRCUVVOQkxGZEJRVXNzU1VGQlNTeERRVUZVTEVsQlFXTXNVVUZCWkN4RlFVRjNRanRCUVVOMFFpeFpRVUZKTEZOQlFWTXNRMEZCVkN4RlFVRlpMRk5CUVZvc1MwRkJNRUlzVTBGQk9VSXNSVUZCZVVNN1FVRkRka01zYVVKQlFVOHNVMEZCVXl4RFFVRlVMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFk3T3pzN08ydENRVWxaTEZrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRemRSWmpzN096dEJRVU5CT3pzN096czdTVUZKVFN4VE96czdRVUZGU2l4MVFrRkJZenRCUVVGQk96dEJRVUZCT3p0QlFVVmFMRkZCUVVrc1kwRkJTanRCUVVOQkxGVkJRVTBzVVVGQlRpeEhRVUZwUWl4TlFVRk5MRmxCUVU0c1JVRkJha0k3UVVGRFFTeFZRVUZOTEUxQlFVNHNSMEZCWlN4RlFVRm1PMEZCU2xrN1FVRkxZanM3T3p0clEwRkZZU3hQTEVWQlFWTTdRVUZEY2tJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZKTEdsQ1FVRnBRaXhEUVVGRExFbEJRVVFzUlVGQlR5eEZRVUZRTEVOQlFYSkNPMEZCUTBFc1ZVRkJTU3h4UWtGQmNVSXNUVUZCVFN4eFFrRkJUaXhEUVVFMFFpeFBRVUUxUWl4RFFVRjZRanRCUVVOQkxIVkNRVUZwUWl4TlFVRk5MRWRCUVU0c1EwRkJWU3hSUVVGV0xFTkJRVzFDTEU5QlFXNUNMRVZCUVRSQ0xHdENRVUUxUWl4RFFVRnFRanRCUVVOQkxHTkJRVkVzU1VGQlVpeERRVUZoTEVsQlFXSXNSMEZCYjBJc2JVSkJRVzFDTEUxQlFXNUNMRXRCUVRoQ0xFTkJRV3hFTzBGQlEwRXNXVUZCVFN4SFFVRk9MRU5CUVZVc1QwRkJWaXhEUVVGclFpeGpRVUZzUWp0QlFVTkJMR0ZCUVU4c1JVRkJSU3hUUVVGVExFOUJRVmdzUlVGQmIwSXNaMEpCUVdkQ0xHTkJRWEJETEVWQlFWQTdRVUZEUkRzN095dENRVEJFVlR0QlFVTlVMRlZCUVVrc1QwRkJUeXhKUVVGSkxFbEJRVW9zUlVGQldEdEJRVU5CTEZWQlFVa3NUVUZCVFN4UFFVRlBMRXRCUVVzc1QwRkJUQ3hGUVVGUUxFTkJRVlk3UVVGRFFTeFZRVUZKTEVsQlFVa3NUVUZCU2l4TFFVRmxMRU5CUVc1Q0xFVkJRWE5DTzBGQlEzQkNMR05CUVUwc1RVRkJUU3hIUVVGYU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4UlFVRlJMRTlCUVU4c1MwRkJTeXhSUVVGTUxFdEJRV3RDTEVOQlFYcENMRU5CUVZvN1FVRkRRU3hWUVVGSkxFMUJRVTBzVFVGQlRpeExRVUZwUWl4RFFVRnlRaXhGUVVGM1FqdEJRVU4wUWl4blFrRkJVU3hOUVVGTkxFdEJRV1E3UVVGRFJEczdRVUZGUkN4aFFVRlBMRTFCUVUwc1IwRkJUaXhIUVVGWkxFdEJRVm9zUjBGQmIwSXNSMEZCY0VJc1IwRkJNRUlzUzBGQlN5eFhRVUZNTEVWQlFXcERPMEZCUTBRN096czJRa0ZGVVN4TExFVkJRVThzVXl4RlFVRlhPMEZCUTNwQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4WFFVRlhMRTFCUVUwc1RVRkJja0k3UVVGRFFTeFZRVUZKTEZWQlFWVXNSVUZCWkR0QlFVTkJMRlZCUVVrc1UwRkJVeXhMUVVGVUxFMUJRVzlDTEZOQlFYQkNMRWxCUVdsRExGTkJRVk1zUzBGQlZDeEZRVUZuUWl4VFFVRm9RaXhOUVVFclFpeFRRVUZ3UlN4RlFVRXJSVHRCUVVNM1JTeHJRa0ZCVlN4VFFVRlRMRXRCUVZRc1JVRkJaMElzVTBGQmFFSXNRMEZCVmp0QlFVTkVPMEZCUTBRc1lVRkJUeXhQUVVGUU8wRkJRMFE3T3pzclFrRkZWVHRCUVVOVUxGVkJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVb3NSVUZCVmp0QlFVTkJMRlZCUVVrc1ZVRkJWU3hQUVVGUExFbEJRVWtzVlVGQlNpeEZRVUZRTEVOQlFXUTdRVUZEUVN4VlFVRkpMRkZCUVZFc1RVRkJVaXhMUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVONFFpeHJRa0ZCVlN4TlFVRk5MRTlCUVdoQ08wRkJRMFE3UVVGRFJDeGhRVUZQTEZOQlFWTXNUMEZCVHl4SlFVRkpMRkZCUVVvc1JVRkJVQ3hKUVVGNVFpeFBRVUZzUXl4RFFVRlFPMEZCUTBRN096dHJRMEZGWVR0QlFVTmFMR0ZCUVU4c1QwRkJUeXhKUVVGSkxFbEJRVW9zUjBGQlZ5eE5RVUZZTEVWQlFWQXNRMEZCVUR0QlFVTkVPenM3YzBKQk5VWlJMRWNzUlVGQlN6dEJRVU5hTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hEUVVGRExFbEJRVWtzVDBGQlZDeEZRVUZyUWp0QlFVTm9RaXhqUVVGTkxHTkJRVTRzUjBGQmQwSXNUMEZCVHl4SFFVRlFMRXRCUVdVc1VVRkJhRUlzUjBGQk5FSXNSMEZCTlVJc1IwRkJhME1zVFVGQlRTeFJRVUZPTEVWQlFYcEVPMEZCUTBRN1FVRkRSaXhMTzNkQ1FUQkNWVHRCUVVOVUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MR05CUVdJN1FVRkRSRHM3TzNOQ1FUTkNWU3hOTEVWQlFWRTdRVUZEYWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFpRVUZOTEdkQ1FVRk9MRWRCUVhsQ0xIZENRVUZaTEU5QlFVOHNUMEZCVUN4RFFVRmxMRWxCUVdZc1EwRkJiMElzVVVGQmNFSXNRMEZCTmtJc1YwRkJOMElzUTBGQmVVTXNVVUZCY2tRc1JVRkJLMFFzVFVGQmVFWTdRVUZEUkN4TE8zZENRVEJDV1R0QlFVTllMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEdkQ1FVRmlPMEZCUTBRN096dHpRa0V6UWxVc1RTeEZRVUZSTzBGQlEycENMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzV1VGQlRTeG5Ra0ZCVGl4SFFVRjVRaXhQUVVGUExFOUJRVkFzUTBGQlpTeEpRVUZtTEVOQlFXOUNMRkZCUVhCQ0xFTkJRVFpDTEZkQlFUZENMRU5CUVhsRExGRkJRV3hGTzBGQlEwUXNTenQzUWtFd1FsazdRVUZEV0N4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzVFVGQlRTeG5Ra0ZCWWp0QlFVTkVPenM3YzBKQk0wSlJMRWNzUlVGQlN6dEJRVU5hTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hEUVVGRExFbEJRVWtzVDBGQlZDeEZRVUZyUWp0QlFVTm9RaXhqUVVGTkxHTkJRVTRzUjBGQmQwSXNSMEZCUkN4SFFVRlJMRWRCUVZJc1IwRkJZeXhOUVVGTkxGRkJRVTRzUlVGQmNrTTdRVUZEUkR0QlFVTkdMRXM3ZDBKQmQwSlZPMEZCUTFRc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNZMEZCWWp0QlFVTkVPenM3YzBKQmVrSlhMRWNzUlVGQlN6dEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hEUVVGRExFbEJRVWtzVDBGQlZDeEZRVUZyUWp0QlFVTm9RaXhqUVVGTkxHbENRVUZPTEVkQlFUSkNMRWRCUVVRc1IwRkJVU3hIUVVGU0xFZEJRV01zVFVGQlRTeFhRVUZPTEVWQlFYaERPMEZCUTBRN1FVRkRSaXhMTzNkQ1FYTkNZVHRCUVVOYUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MR2xDUVVGaU8wRkJRMFE3T3pzN08ydENRVEJEV1N4VE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGVFaG1PenM3TzBGQlEwRTdPenM3U1VGRlRTeGpPenM3UVVGRlNpd3dRa0ZCV1N4UlFVRmFMRVZCUVhOQ0xHVkJRWFJDTEVWQlFYVkRPMEZCUVVFN08wRkJRVUU3TzBGQlJYSkRMRkZCUVVrc1kwRkJTanRCUVVOQkxGVkJRVTBzVVVGQlRpeEhRVUZwUWl4UlFVRnFRanRCUVVOQkxGVkJRVTBzWlVGQlRpeEhRVUYzUWl4bFFVRjRRanRCUVVweFF6dEJRVXQwUXpzN096dHRRMEZGWXp0QlFVTmlMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NRMEZCUXl4TlFVRk5MRmxCUVZnc1JVRkJlVUk3UVVGRGRrSXNXVUZCU1N4VFFVRlRPMEZCUTFnc2FVSkJRVThzVVVGRVNUdEJRVVZZTEhGQ1FVRlhMSFZDUVVaQk8wRkJSMWdzY1VKQlFWY3NTVUZJUVR0QlFVbFlMRzFDUVVGVExFTkJRVU1zUlVGQlF5eFJRVUZSTEc5Q1FVRlVMRVZCUVVRc1JVRkJhVU1zUlVGQlF5eFJRVUZQTEhkQ1FVRlNMRVZCUVdwRE8wRkJTa1VzVTBGQllqdEJRVTFCTEdOQlFVMHNXVUZCVGl4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTEdOQlFVMHNXVUZCVGl4RFFVRnRRaXhQUVVGUExFdEJRVEZDTEVsQlFXMURMRTFCUVc1RE8wRkJRMFE3TzBGQlJVUXNZVUZCVHl4RlFVRlFPMEZCUTBRN096dHZRMEZGWlN4SkxFVkJRVTA3UVVGRGNFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxGbEJRVmtzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCV0N4RFFVRm9RanRCUVVOQkxHRkJRVThzVlVGQlZTeERRVUZXTEUxQlFXbENMRk5CUVdwQ0xFbEJRVGhDTEZOQlFWTXNUVUZCVFN4bFFVRk9MRU5CUVhOQ0xGVkJRWFJDTEVkQlFXMURMRXRCUVdwR08wRkJRMFE3T3pzN096czdPenM3TUVOQlQzRkNMRThzUlVGQlV6dEJRVU0zUWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzWVVGQllTeE5RVUZOTEZGQlFYWkNPMEZCUTBFc1ZVRkJTU3hYUVVGWExFVkJRV1k3TzBGQlJVRXNWVUZCU1N4UlFVRlJMRWxCUVZJc1MwRkJhVUlzVjBGQmFrSXNTVUZCWjBNc1RVRkJUU3hsUVVGT0xFTkJRWE5DTEZGQlFWRXNTVUZCT1VJc1EwRkJjRU1zUlVGQmVVVTdRVUZEZGtVc1dVRkJTU3hoUVVGaExGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlFUbENPMEZCUTBFc1dVRkJTU3hOUVVGTkxGbEJRVTRzUTBGQmJVSXNWVUZCYmtJc1EwRkJTaXhGUVVGdlF6dEJRVU5zUXl4dFFrRkJVeXhKUVVGVUxFTkJRV01zVFVGQlRTeFpRVUZPTEVOQlFXMUNMRlZCUVc1Q0xFTkJRV1E3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4alFVRkpMR05CUVdNc1RVRkJUU3hsUVVGT0xFTkJRWE5DTEdOQlFYUkNMRU5CUVhGRExFMUJRVTBzVDBGQlRpeERRVUZqTEZGQlFWRXNSVUZCZEVJc1EwRkJja01zUTBGQmJFSTdRVUZEUVN4alFVRkpMRTFCUVUwc1dVRkJUaXhEUVVGdFFpeFhRVUZ1UWl4RFFVRktMRVZCUVhGRE8wRkJRMjVETEhGQ1FVRlRMRWxCUVZRc1EwRkJZeXhOUVVGTkxGbEJRVTRzUTBGQmJVSXNWMEZCYmtJc1EwRkJaRHRCUVVORUxGZEJSa1FzVFVGRlR6czdRVUZGVEN4blFrRkJTU3hWUVVGVkxFMUJRVTBzWlVGQlRpeERRVUZ6UWl4M1FrRkJkRUlzUTBGQkswTXNUVUZCVFN4UFFVRk9MRU5CUVdNc1VVRkJVU3hGUVVGMFFpeERRVUV2UXl4RFFVRmtPMEZCUTBFc1owSkJRVWtzVVVGQlVTeE5RVUZOTEdWQlFVNHNRMEZCYzBJc1pVRkJkRUlzUTBGQmMwTXNUMEZCZEVNc1EwRkJXanRCUVVOQkxHZENRVUZKTEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhMUVVGdVFpeERRVUZLTEVWQlFTdENPMEZCUXpkQ0xIVkNRVUZUTEVsQlFWUXNRMEZCWXl4TlFVRk5MRmxCUVU0c1EwRkJiVUlzUzBGQmJrSXNRMEZCWkR0QlFVTkVMR0ZCUmtRc1RVRkZUenRCUVVOTUxIVkNRVUZUTEVsQlFWUXNRMEZCWXl4TlFVRk5MRmxCUVU0c1EwRkJiVUlzVFVGQmFrTTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkRSanM3T3pzN096czdPenM3T3p0QlFXZENSQ3hYUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEZWQlFXUXNSVUZCTUVJN1FVRkRlRUlzYVVKQlFWTXNTVUZCVkN4RFFVRmpMRXRCUVdRc1EwRkJiMElzVVVGQmNFSXNSVUZCT0VJc1YwRkJWeXhEUVVGWUxFTkJRVGxDTzBGQlEwUTdPMEZCUlVRc1lVRkJUeXhSUVVGUU8wRkJRMFE3T3pzNFFrRkZVeXhQTEVWQlFWTTdRVUZEYWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPMEZCUTNSRExHZENRVUZSTEVkQlFWSXNRMEZCV1N4MVFrRkJXanRCUVVOQkxHZENRVUZSTEVkQlFWSXNRMEZCV1N4UFFVRmFPMEZCUTBFc1owSkJRVkVzU1VGQlVpeEhRVUZsTEZGQlFWRXNTVUZCVWl4SlFVRm5RaXhGUVVFdlFqdEJRVU5CTEZsQlFVa3NaVUZCU2p0QlFVTkJMRmxCUVVrc1lVRkJZU3hOUVVGTkxGVkJRVTRzUTBGQmFVSXNUMEZCYWtJc1EwRkJha0k3UVVGRFFTeFpRVUZKTEc5Q1FVRnZRaXhOUVVGTkxHdENRVUZPTEVOQlFYbENMRTlCUVhwQ0xFTkJRWGhDTzBGQlEwRXNXVUZCU1N4aFFVRmhMRTFCUVUwc2FVSkJRVTRzUTBGQmQwSXNUMEZCZUVJc1EwRkJha0k3UVVGRFFTeFpRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3hqUVVGSkxHbENRVUZLTEVWQlFYVkNPMEZCUTNKQ0xHZENRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3h2UWtGQlRTeFBRVUZPTEVOQlFXTXNUMEZCWkN4RlFVRjFRaXhKUVVGMlFpeERRVUUwUWl4dFFrRkJWenRCUVVOeVF5eDVRa0ZCVXl4TlFVRk5MR0ZCUVU0c1EwRkJiMElzVDBGQmNFSXNRMEZCVkR0QlFVTkJMRzlDUVVGSkxHdENRVUZyUWl4UFFVRlBMR05CUVZBc1EwRkJjMElzUTBGQmRFSXNRMEZCZEVJN1FVRkRRU3d3UWtGQlZTeFBRVUZQTEU5QlFXcENPMEZCUTBFc2IwSkJRVWtzWlVGQlNpeEZRVUZ4UWp0QlFVTnVRaXd3UWtGQlVTeFBRVUZTTzBGQlEwUXNhVUpCUmtRc1RVRkZUenRCUVVOTUxIbENRVUZQTEdsQ1FVRlFPMEZCUTBRN1FVRkRSaXhsUVZSRUxFVkJVMGNzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZCUlN4MVFrRkJUeXhMUVVGUU8wRkJRV2RDTEdWQlZHaERPMEZCVjBRc1lVRmFSQ3hOUVZsUE8wRkJRMHdzZFVKQlFWTXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFOUJRWEJDTEVOQlFWUTdRVUZEUVN4clFrRkJTU3hyUWtGQmEwSXNUMEZCVHl4alFVRlFMRU5CUVhOQ0xFTkJRWFJDTEVOQlFYUkNPMEZCUTBFc2QwSkJRVlVzVDBGQlR5eFBRVUZxUWp0QlFVTkJMR3RDUVVGSkxHVkJRVW9zUlVGQmNVSTdRVUZEYmtJc2QwSkJRVkVzVDBGQlVqdEJRVU5FTEdWQlJrUXNUVUZGVHp0QlFVTk1MSFZDUVVGUExHbENRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdMRmRCZGtKRUxFMUJkVUpQTzBGQlEwd3NaMEpCUVVrc1dVRkJXU3hOUVVGTkxGVkJRVTRzUTBGQmFVSXNUMEZCYWtJc1EwRkJhRUk3UVVGRFFTeG5Ra0ZCU1N4VFFVRktMRVZCUVdVN1FVRkRZaXh2UWtGQlRTeFhRVUZPTEVOQlFXdENMRTlCUVd4Q0xFVkJRVEpDTEVsQlFUTkNMRU5CUVdkRExHOUNRVUZaTzBGQlF6RkRMSGRDUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVkQlFYZENMRkZCUVhoQ08wRkJRMEVzZVVKQlFWTXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFOUJRWEJDTEVOQlFWUTdRVUZEUVN4dlFrRkJTU3hyUWtGQmEwSXNUMEZCVHl4alFVRlFMRU5CUVhOQ0xFTkJRWFJDTEVOQlFYUkNPMEZCUTBFc01FSkJRVlVzVDBGQlR5eFBRVUZxUWp0QlFVTkJMRzlDUVVGSkxHVkJRVW9zUlVGQmNVSTdRVUZEYmtJc2MwSkJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmtMREJDUVVGTkxFOUJRVTRzUTBGQll5eFBRVUZrTEVWQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEcxQ1FVRlhPMEZCUTNKRExEaENRVUZSTEU5QlFWSTdRVUZEUkN4eFFrRkdSQ3hGUVVWSExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlFVVXNOa0pCUVU4c1MwRkJVRHRCUVVGblFpeHhRa0ZHYUVNN1FVRkhSQ3h0UWtGS1JDeE5RVWxQTzBGQlEwd3NORUpCUVZFc1QwRkJVanRCUVVORU8wRkJRMFlzYVVKQlVrUXNUVUZSVHp0QlFVTk1MSGxDUVVGUExHbENRVUZRTzBGQlEwUTdRVUZEUml4bFFXaENSQ3hGUVdkQ1J5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVRkZMSFZDUVVGUExFdEJRVkE3UVVGQlowSXNaVUZvUW1oRE8wRkJhVUpFTEdGQmJFSkVMRTFCYTBKUE8wRkJRMHdzZFVKQlFWTXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFOUJRWEJDTEVOQlFWUTdRVUZEUVN4clFrRkJTU3h0UWtGQmEwSXNUMEZCVHl4alFVRlFMRU5CUVhOQ0xFTkJRWFJDTEVOQlFYUkNPMEZCUTBFc2QwSkJRVlVzVDBGQlR5eFBRVUZxUWp0QlFVTkJMR3RDUVVGSkxHZENRVUZLTEVWQlFYRkNPMEZCUTI1Q0xIZENRVUZSTEU5QlFWSTdRVUZEUkN4bFFVWkVMRTFCUlU4N1FVRkRUQ3gxUWtGQlR5eHBRa0ZCVUR0QlFVTkVPMEZCUTBZN1FVRkRSanRCUVVOR0xGTkJka1JFTEUxQmRVUlBPMEZCUTB3c2EwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNUMEZzUlUwc1EwRkJVRHRCUVcxRlJEczdPeXRDUVVWVkxFOHNSVUZCVXp0QlFVTnNRaXhWUVVGSkxHdENRVUZyUWl4RFFVRkRMRmxCUVVRc1JVRkJaU3hUUVVGbUxFVkJRVEJDTEZGQlFURkNMRU5CUVhSQ08wRkJRMEVzVlVGQlNTeFpRVUZoTEZGQlFWRXNTVUZCVkN4RFFVRmxMRXRCUVdZc1EwRkJjVUlzUzBGQmNrSXNRMEZCYUVJN1FVRkRRU3hWUVVGSkxHRkJRV0VzVlVGQlZTeERRVUZXTEVOQlFXcENPenRCUVVWQkxHRkJRVThzWjBKQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEZWQlFYaENMRTFCUVhkRExFTkJRVU1zUTBGQmFFUTdRVUZEUkRzN08zVkRRVFpDYTBJc1R5eEZRVUZUTzBGQlF6RkNMR0ZCUVZFc1VVRkJVU3hKUVVGU0xFTkJRV0VzVVVGQlpDeEhRVUV3UWl4SlFVRXhRaXhIUVVGcFF5eExRVUY0UXp0QlFVTkVPenM3TkVKQlJVOHNSeXhGUVVGTE8wRkJRMWdzVlVGQlNTeFhRVUZYTEVsQlFVa3NTMEZCU2l4RFFVRlZMRWRCUVZZc1EwRkJaanRCUVVOQkxHRkJRVThzVTBGQlV5eERRVUZVTEVsQlFXTXNTVUZCWkN4SFFVRnhRaXhUUVVGVExFTkJRVlFzUTBGQmNrSXNSMEZCYlVNc1IwRkJia01zUjBGQmVVTXNVMEZCVXl4RFFVRlVMRU5CUVdoRU8wRkJRMFE3T3pzN096dG5RMEZIVnl4UExFVkJRVk03UVVGRGJrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1VVRkJja0lzUlVGQkswSTdRVUZETjBJc1pVRkJUeXhOUVVGTkxGRkJRVTRzUTBGQlpTeHZRa0ZCWml4RFFVRnZReXhSUVVGUkxFbEJRVklzUTBGQllTeE5RVUZxUkN4RFFVRlFPMEZCUTBRN08wRkJSVVFzVlVGQlNTeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1ZVRkJha0lzU1VGQkswSXNVVUZCVVN4SlFVRlNMRU5CUVdFc1RVRkJZaXhMUVVGM1FpeFRRVUV6UkN4RlFVRnpSVHRCUVVOd1JTeGxRVUZQTEUxQlFVMHNVVUZCVGl4RFFVRmxMRzlDUVVGbUxFTkJRVzlETEZGQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdwRUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRkpMRTlCUVU4c1RVRkJUU3hQUVVGT0xFTkJRV01zVVVGQlVTeEpRVUYwUWl4RFFVRllPMEZCUTBFc1lVRkJUeXhOUVVGTkxGRkJRVTRzUTBGQlpTeHZRa0ZCWml4RFFVRnZReXhOUVVGTkxFOUJRVTRzUTBGQll5eEpRVUZrTEVOQlFYQkRMRU5CUVZBN1FVRkRSRHM3T3l0Q1FVVlZMRThzUlVGQlV6dEJRVU5zUWl4VlFVRkpMR3RDUVVGclFpeERRVUZETEZsQlFVUXNSVUZCWlN4VFFVRm1MRVZCUVRCQ0xGRkJRVEZDTEVOQlFYUkNPMEZCUTBFc1ZVRkJTU3haUVVGaExGRkJRVkVzU1VGQlZDeERRVUZsTEV0QlFXWXNRMEZCY1VJc1MwRkJja0lzUTBGQmFFSTdRVUZEUVN4VlFVRkpMR0ZCUVdFc1ZVRkJWU3hEUVVGV0xFTkJRV3BDTzBGQlEwRXNWVUZCU1N4VlFVRlhMRkZCUVZFc1JVRkJWQ3hEUVVGaExFdEJRV0lzUTBGQmJVSXNTMEZCYmtJc1EwRkJaRHRCUVVOQkxGVkJRVWtzVjBGQldTeFJRVUZSTEVOQlFWSXNRMEZCYUVJN1FVRkRRU3hWUVVGSkxHVkJRV1VzVVVGQlVTeEpRVUYyUWl4SlFVRXJRaXhoUVVGaExGRkJRVkVzUlVGQmVFUXNSVUZCTkVRN1FVRkRNVVFzWlVGQlR5eExRVUZRTzBGQlEwUTdRVUZEUkN4aFFVRlBMR2RDUVVGblFpeFBRVUZvUWl4RFFVRjNRaXhWUVVGNFFpeE5RVUYzUXl4RFFVRkRMRU5CUVhwRExFbEJRVGhETEdkQ1FVRm5RaXhQUVVGb1FpeERRVUYzUWl4UlFVRjRRaXhOUVVGelF5eERRVUZETEVOQlFUVkdPMEZCUTBRN096czdPenR6UTBGSGFVSXNUeXhGUVVGVE8wRkJRM3BDTEZWQlFVa3NWMEZCVnl4UlFVRlJMRWxCUVZJc1MwRkJhVUlzVVVGQmFFTTdRVUZEUVN4VlFVRkpMR2RDUVVGblFpeHpRa0ZCVlN4UlFVRlJMRWxCUVd4Q0xFVkJRWGRDTEVsQlFYaENMRXRCUVdsRExGTkJRWEpFTzBGQlEwRXNWVUZCU1N4alFVRmpMSE5DUVVGVkxGRkJRVkVzUlVGQmJFSXNSVUZCYzBJc1NVRkJkRUlzUzBGQkswSXNVMEZCYWtRN1FVRkRRU3hWUVVGSkxHbENRVUZwUWl3MFFrRkJaMElzVVVGQlVTeEZRVUY0UWl4RFFVRnlRanRCUVVOQkxGVkJRVWtzWTBGQll5eFJRVUZSTEVsQlFWSXNTMEZCYVVJc1YwRkJia003TzBGQlJVRXNZVUZCVVN4WlFVRlpMR0ZCUVZvc1NVRkJOa0lzVjBGQk9VSXNTVUZCSzBNc1dVRkJXU3hoUVVGYUxFbEJRVFpDTEdOQlFUVkZMRWxCUVN0R0xGZEJRWFJITzBGQlEwUTdPenMwUWtGRlR5eFBMRVZCUVZNN1FVRkRaaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqdEJRVU14UXl4alFVRk5MRkZCUVU0c1EwRkJaU3hqUVVGbUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExFbEJRWFpETEVOQlFUUkRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM2hFTEd0Q1FVRlJMRWRCUVZJN1FVRkRSQ3hUUVVaRUxFVkJSVWNzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEV2l4cFFrRkJUeXhMUVVGUU8wRkJRMFFzVTBGS1JEdEJRVXRFTEU5QlRrMHNRMEZCVUR0QlFVOUVPenM3TkVKQlJVOHNUeXhGUVVGVE8wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdRVUZETVVNc1kwRkJUU3hSUVVGT0xFTkJRV1VzWTBGQlppeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eEpRVUYyUXl4RFFVRTBReXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU51UkN4clFrRkJVU3hIUVVGU08wRkJRMFFzVTBGR1JDeEZRVVZITEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTFvc2FVSkJRVThzUzBGQlVEdEJRVU5FTEZOQlNrUTdRVUZMUkN4UFFVNU5MRU5CUVZBN1FVRlBSRHM3T3pzN08zVkRRVWRyUWl4UExFVkJRVk1zV1N4RlFVRmpPMEZCUTNoRExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4TFFVRkxMRkZCUVZFc1JVRkJVaXhEUVVGWExFdEJRVmdzUTBGQmFVSXNSMEZCYWtJc1EwRkJWRHRCUVVOQkxGVkJRVWtzTWtKQlFUSkNMRWRCUVVjc1EwRkJTQ3hOUVVGVkxHTkJRWHBET3p0QlFVVkJMRlZCUVVrc1owSkJRV2RDTEhkQ1FVRndRaXhGUVVFNFF6dEJRVU0xUXl4WlFVRkpMR2RDUVVGblFpeFJRVUZSTEVWQlFWSXNRMEZCVnl4TFFVRllMRU5CUVdsQ0xFZEJRV3BDTEVOQlFYQkNPMEZCUTBFc2MwSkJRV01zUjBGQlpEdEJRVU5CTEhkQ1FVRm5RaXhqUVVGakxFTkJRV1FzU1VGQmJVSXNTVUZCYmtJc1IwRkJNRUlzWTBGQll5eERRVUZrTEVOQlFURkNMRWRCUVRaRExFZEJRVGRETEVkQlFXMUVMR05CUVdNc1EwRkJaQ3hEUVVGdVJUdEJRVU5CTEdOQlFVMHNaVUZCVGl4RFFVRnpRaXhyUWtGQmRFSXNRMEZCZVVNc1lVRkJla01zUlVGQmQwUXNVVUZCVVN4SlFVRlNMRU5CUVdFc1ZVRkJja1U3UVVGRFJEdEJRVU5HT3pzN01rTkJSWE5DTEU4c1JVRkJVeXhaTEVWQlFXTTdRVUZETlVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZKTEV0QlFVc3NVVUZCVVN4RlFVRlNMRU5CUVZjc1MwRkJXQ3hEUVVGcFFpeEhRVUZxUWl4RFFVRlVPMEZCUTBFc1ZVRkJTU3d5UWtGQk1rSXNSMEZCUnl4RFFVRklMRTFCUVZVc1kwRkJla003TzBGQlJVRXNWVUZCU1N4blFrRkJaMElzZDBKQlFYQkNMRVZCUVRoRE8wRkJRelZETEZsQlFVa3NaMEpCUVdkQ0xGRkJRVkVzUlVGQlVpeERRVUZYTEV0QlFWZ3NRMEZCYVVJc1IwRkJha0lzUTBGQmNFSTdRVUZEUVN4elFrRkJZeXhIUVVGa08wRkJRMEVzZDBKQlFXZENMR05CUVdNc1EwRkJaQ3hKUVVGdFFpeEpRVUZ1UWl4SFFVRXdRaXhqUVVGakxFTkJRV1FzUTBGQk1VSXNSMEZCTmtNc1IwRkJOME1zUjBGQmJVUXNZMEZCWXl4RFFVRmtMRU5CUVc1Rk8wRkJRMEVzWTBGQlRTeFJRVUZPTEVOQlFXVXNjMEpCUVdZc1EwRkJjME1zWVVGQmRFTXNSVUZCY1VRc1VVRkJVU3hKUVVGU0xFTkJRV0VzVlVGQmJFVTdRVUZEUkR0QlFVTkdPenM3TWtOQlJYTkNMRWNzUlVGQlN6dEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJTU3hMUVVGS0xFTkJRVlVzUjBGQlZpeERRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRTFCUVUwc1RVRkJUaXhIUVVGbExFTkJRWEpDTEVOQlFWQTdRVUZEUkRzN08zTkNRV3BKVXl4TkxFVkJRVkU3UVVGRGFFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxFOUJRVThzUzBGQlVDeExRVUZwUWl4bFFVRnlRaXhGUVVGelF6dEJRVU53UXl4WlFVRkpMR2RDUVVGblFpeFBRVUZQTEZkQlFWQXNRMEZCYlVJc1MwRkJia0lzUTBGQmVVSXNSMEZCZWtJc1EwRkJjRUk3UVVGRFFTeHpRa0ZCWXl4SFFVRmtPMEZCUTBFc2QwSkJRV2RDTEdOQlFXTXNRMEZCWkN4SlFVRnRRaXhKUVVGdVFpeEhRVUV3UWl4alFVRmpMRU5CUVdRc1EwRkJNVU03UVVGRFFTeGpRVUZOTEdOQlFVNHNSMEZCZFVJc1RVRkJUU3hsUVVGT0xFTkJRWE5DTEhGQ1FVRjBRaXhEUVVFMFF5eGhRVUUxUXl4RFFVRjJRanRCUVVORUxFOUJURVFzVFVGTFR6dEJRVU5NTEdOQlFVMHNZMEZCVGl4SFFVRjFRaXhOUVVGTkxGRkJRVTRzUTBGQlpTeFBRVUZQTEV0QlFYUkNMRVZCUVRaQ0xFOUJRVThzUzBGQmNFTXNRMEZCZGtJN1FVRkRSRHRCUVVOR0xFczdkMEpCVDFjN1FVRkRWaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4alFVRmlPMEZCUTBRN096dHpRa0ZTWjBJc1RTeEZRVUZSTzBGQlEzWkNMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzV1VGQlRTeHhRa0ZCVGl4SFFVRTRRaXhQUVVGUExFOUJRVkFzUTBGQlpTeEpRVUZtTEVOQlFXOUNMRlZCUVd4RU8wRkJRMFFzU3p0M1FrRlBhMEk3UVVGRGFrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzY1VKQlFXSTdRVUZEUkRzN096czdhMEpCTWtkWkxHTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVTm9VbFFzYVVJN096czdPenM3T3pzN096dEJRVmRLTERaQ1FVRlpMRWRCUVZvc1JVRkJhVUlzUjBGQmFrSXNSVUZCYzBJN1FVRkJRVHM3UVVGRGNFSXNVVUZCU1N4UlFVRlJMRWxCUVZvN096czdPMEZCUzBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzUjBGQllqdEJRVU5CTEZWQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRSRHM3T3pzN096czdPenM3T3pzN096czdPekpDUVdOTkxFMHNSVUZCVVN4TkxFVkJRVkU3UVVGRGNrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN096czdRVUZKUVN4VlFVRkpMRTFCUVUwN1FVRkRVaXhqUVVGTkxGRkJSRVVzUlVGRFVTeE5RVUZOTEUxQlFVMHNTVUZFY0VJc1JVRkRNRUlzU1VGQlNTeDFRa0ZCZFVJc1RVRkJka0lzUjBGQlowTXNOa0pCUkRsRU8wRkJSVklzWTBGQlRTeEZRVUZETEU5QlFVOHNSVUZCUXl4UlFVRlJMRTFCUVZRc1JVRkJVanRCUVVaRkxFOUJRVlk3T3pzN096czdPMEZCVjBFc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ096czdRVUZIZEVNc1kwRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWl4SFFVRjJRaXhGUVVFMFFpeFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTnlReXhqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdRVUZETTBJc2IwSkJRVkVzVFVGQlRTeEpRVUZPTEVOQlFWY3NTMEZCV0N4RFFVRnBRaXhUUVVGNlFqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFXeENPMEZCUTBRN1FVRkRSaXhUUVU1RU8wRkJUMFFzVDBGV1RTeERRVUZRTzBGQlYwUTdPenM3T3pzN096czdPelJDUVZGTkxFMHNSVUZCVVN4VExFVkJRVmM3UVVGRGVFSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFZRVUZWTzBGQlExb3NZMEZCVFN4UlFVUk5MRVZCUTBrc1RVRkJUU3hOUVVGTkxFbEJSR2hDTEVWQlEzTkNMRWxCUVVrc2RVSkJRWFZDTEUxQlFYWkNMRWRCUVdkRExEWkNRVVF4UkR0QlFVVmFMR05CUVUwc1JVRkJReXh0UWtGQmJVSXNVMEZCY0VJN1FVRkdUU3hQUVVGa096dEJRVXRCTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhQUVVGMlFpeEZRVUZuUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVONlF5eHJRa0ZCVVN4SFFVRlNMRU5CUVZrc1QwRkJXaXhGUVVGeFFpeExRVUZ5UWp0QlFVTkJMR05CUVVrc1RVRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWl4dlFrRkJVU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZ1UWp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTUxHMUNRVUZQTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVd4Q08wRkJRMFE3UVVGRFJpeFRRVkJFTzBGQlVVUXNUMEZXVFN4RFFVRlFPMEZCV1VRN096dDNRa0V2UkZNN1FVRkJSU3hoUVVGUExFdEJRVXNzU1VGQldqdEJRVUZ0UWpzN096czdhMEpCYTBWc1FpeHBRanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGFFZG1PenM3T3pzN096czdPenRKUVUxTkxHVTdPenRCUVVWS0xESkNRVUZaTEVWQlFWb3NSVUZCWjBJc1IwRkJhRUlzUlVGQmNVSXNZVUZCY2tJc1JVRkJiVU1zVlVGQmJrTXNSVUZCSzBNc1ZVRkJMME1zUlVGQk1rUXNTVUZCTTBRc1JVRkJhVVVzU1VGQmFrVXNSVUZCZFVVc1QwRkJka1VzUlVGQlowWXNUMEZCYUVZc1JVRkJlVVk3UVVGQlFUczdRVUZCUVN3d1NFRkRha1lzUlVGRWFVWXNSVUZETjBVc1IwRkVOa1VzUlVGRGVFVXNZVUZFZDBVN08wRkJSWFpHTEZGQlFVa3NZMEZCU2p0QlFVTkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeFZRVUZ3UWp0QlFVTkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeFZRVUZ3UWp0QlFVTkJMRlZCUVUwc1MwRkJUaXhIUVVGakxFbEJRV1E3UVVGRFFTeFZRVUZOTEV0QlFVNHNSMEZCWXl4SlFVRmtPMEZCUTBFc1ZVRkJUU3hSUVVGT0xFZEJRV2xDTEU5QlFXcENPMEZCUTBFc1ZVRkJUU3hSUVVGT0xFZEJRV2xDTEU5QlFXcENPMEZCVW5WR08wRkJVM2hHT3pzN08zTkNRVVZSTEZFc1JVRkJWVHRCUVVOcVFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRmxCUVUwc1NVRkJUaXhIUVVGaExGRkJRV0k3UVVGRFJDeExPM2RDUVVWVk8wRkJRMVFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1MwRkJZanRCUVVORU96czdkMEpCUldkQ08wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1YwRkJZanRCUVVORU96czdkMEpCUldkQ08wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1YwRkJZanRCUVVORU96czdkMEpCUldkQ08wRkJRMllzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUY2UWp0QlFVTkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdhMEpCUjFrc1pUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZERaanM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVWQk96dEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVUZSVFN4Uk96czdPenM3T3pzN096czdPMEZCVlVvc2IwSkJRVmtzVlVGQldpeEZRVUYzUWl4VlFVRjRRaXhGUVVGdlF5eGpRVUZ3UXl4RlFVRnZSQ3huUWtGQmNFUXNSVUZCYzBVc1kwRkJkRVVzUlVGQmMwWTdRVUZCUVRzN096czdPenM3TzBGQlFVRTdPMEZCVlhCR0xGRkJRVWtzUTBGQlF5eFZRVUZNTEVWQlFXbENMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzZDBKQlFWWXNRMEZCVGpzN08wRkJSMnBDTEZGQlFVa3NZMEZCU2pzN1FVRkZRU3hWUVVGTkxGZEJRVTRzUjBGQmIwSXNZVUZCWVN4WlFVRnFRenRCUVVOQkxGVkJRVTBzVlVGQlRpeEhRVUZ0UWl4VlFVRnVRanRCUVVOQkxGVkJRVTBzVlVGQlRpeEhRVUZ0UWl4VlFVRnVRanRCUVVOQkxGVkJRVTBzWjBKQlFVNHNSMEZCZVVJc1owSkJRWHBDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xHTkJRWFpDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xHTkJRV3BDTzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xFdEJRVXNzUzBGQlRDeERRVUZaTEV0QlFVc3NUVUZCVEN4TFFVRm5RaXhMUVVGcVFpeEhRVUV3UWl4RFFVRnlReXhEUVVGdVFqczdPenRCUVVsQkxGVkJRVTBzVjBGQlRpeEhRVUZ2UWl4SlFVRndRanM3UVVGRlFTeFZRVUZOTEhGQ1FVRk9MRWRCUVRoQ0xFVkJRVGxDTzBGQlEwRXNWVUZCVFN4aFFVRk9MRWRCUVhOQ0xFVkJRWFJDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xFVkJRWFpDTzBGQlEwRXNWVUZCVFN4WlFVRk9MRWRCUVhGQ0xFVkJRWEpDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xFVkJRWFpDTzBGQlEwRXNWVUZCVFN4M1FrRkJUaXhIUVVGcFF5eEZRVUZxUXp0QlFVTkJMRlZCUVUwc1lVRkJUaXhIUVVGelFpeEZRVUZETEZOQlFWTXNSVUZCVml4RlFVRmpMRmxCUVZrc1JVRkJNVUlzUlVGQmRFSTdRVUZEUVN4VlFVRk5MRTlCUVU0c1IwRkJaMElzUlVGQmFFSTdPMEZCUlVFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEhOQ1FVRlZMRTFCUVUwc1YwRkJhRUlzUlVGQk5rSXNUVUZCTjBNN1FVRkRRU3hWUVVGTkxHRkJRVTRzUTBGQmIwSXNWVUZCY0VJc1EwRkJLMElzVlVGQkwwSXNTVUZCTmtNc1ZVRkJOME03UVVGRFFTeFJRVUZKTEdGQlFXRXNiVU5CUVcxQ0xFOUJRVzVDTEVWQlFUUkNMRWxCUVRWQ0xFTkJRV3BDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xGVkJRWFpDTzBGQmRrTnZSanRCUVhkRGNrWTdPenM3T3pzN096czdPenM3T3pzN01rTkJaMFJ6UWl4SkxFVkJRVTBzVlN4RlFVRlpPMEZCUTNaRExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmRCUVVzc1NVRkJTU3hQUVVGVUxFbEJRVzlDTEUxQlFVMHNZVUZCTVVJc1JVRkJlVU03UVVGRGRrTXNXVUZCU1N4UlFVRlJMRTFCUVUwc1lVRkJUaXhEUVVGdlFpeFBRVUZ3UWl4RFFVRmFPMEZCUTBFc1dVRkJTU3hOUVVGTkxGZEJRVTRzUzBGQmMwSXNWVUZCTVVJc1JVRkJjME03UVVGRGNFTXNhMEpCUVZFc1NVRkJVanRCUVVORkxHbENRVUZMTEZWQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeFJRVUZ1UWp0QlFVTkdMR2xDUVVGTExFbEJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVU0c1EwRkJXU3hGUVVGdVFqdEJRVU5HTEdsQ1FVRkxMRkZCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFVNHNRMEZCV1N4TlFVRnVRanRCUVVOR0xHbENRVUZMTEZGQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeE5RVUZ1UWp0QlFVTkdMR2xDUVVGTExGTkJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVU0c1EwRkJXU3hQUVVGdVFqdEJRVU5HTEdsQ1FVRkxMRWRCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFXSTdRVUZEUmp0QlFVTkZMSEZDUVVGUExFVkJRVkE3UVVGa1NqdEJRV2RDUkR0QlFVTkdPMEZCUTBRc1lVRkJUeXhGUVVGUU8wRkJRMFE3T3pzN096czdPenM3TmtOQlQzZENMRWNzUlVGQlN5eE5MRVZCUVZFN1FVRkRjRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMSEZDUVVGS096dEJRVVZCTEZWQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFN1FVRkRXQ3gxUWtGQlpTeE5RVUZOTEU5QlFYSkNPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzZFVKQlFXVXNUVUZCWmp0QlFVTkVPenRCUVVWRUxGVkJRVWtzVFVGQlRUdEJRVU5TTEdOQlFVMHNUVUZFUlN4RlFVTk5MRTFCUVUwc1RVRkJUU3hYUVVSc1FpeEZRVU1yUWl4SlFVRkpMSFZDUVVGMVFpeFpRVUYyUWl4SFFVRnpReXhIUVVSNlJTeEZRVU00UlN4TlFVRk5MRVZCUVVVc1ZVRkJWU3hIUVVGYUxFVkJRV2xDTEZGQlFVOHNhMEpCUVhoQ08wRkJSSEJHTEU5QlFWWTdPMEZCU1VFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExHTkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeEhRVUU1UWl4RlFVRnRReXhWUVVGRExFdEJRVVFzUlVGQlZ6czdRVUZGTlVNc1kwRkJTU3hoUVVGaExFMUJRVTBzU1VGQlRpeERRVUZYTEV0QlFUVkNPenRCUVVWQkxHTkJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmtMRzlDUVVGUkxGVkJRVkk3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXh6UWtGQlVEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV2swc1EwRkJVRHRCUVdGRU96czdPenM3T3p0dlEwRkxaVHRCUVVOa0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRlZCUVdJN1FVRkRSRHM3T3pzN096czdPenR2UTBGUFpTeFZMRVZCUVZrN08wRkJSVEZDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3huUWtGQlNqczdRVUZGUVN4WFFVRkxMRWxCUVVrc1MwRkJWQ3hKUVVGclFpeE5RVUZOTEdGQlFYaENMRVZCUVhWRE8wRkJRM0pETEZsQlFVa3NWVUZCVlN4TlFVRk5MR0ZCUVU0c1EwRkJiMElzUzBGQmNFSXNRMEZCWkR0QlFVTkJMRmxCUVVrc1VVRkJVU3hWUVVGU0xFdEJRWFZDTEZWQlFUTkNMRVZCUVhWRE8wRkJRM0pETEc5Q1FVRlZMRkZCUVZFc1NVRkJVaXhEUVVGaExFOUJRWFpDTzBGQlEwUTdRVUZEUmp0QlFVTkVMR0ZCUVU4c1QwRkJVRHRCUVVORU96czdPenM3T3pzN08yMURRVTlqTEVjc1JVRkJTenRCUVVOc1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxHVkJRV1VzYzBKQlFWVXNSMEZCVml4RlFVRmxMRWxCUVdZc1MwRkJkMElzVTBGQk0wTTdPenRCUVVkQkxGVkJRVWtzYjBKQlFVbzdPenRCUVVkQkxGVkJRVWtzWVVGQll5eFpRVUZFTEVkQlFXbENMR0ZCUVdFc1IwRkJPVUlzUjBGQmIwTXNUVUZCVFN4M1FrRkJUaXhEUVVFclFpeEhRVUV2UWl4RFFVRnlSRHM3UVVGRlFTeFhRVUZMTEVsQlFVa3NTMEZCVkN4SlFVRnJRaXhOUVVGTkxHRkJRWGhDTEVWQlFYVkRPMEZCUTNKRExGbEJRVWtzVlVGQlZTeE5RVUZOTEdGQlFVNHNRMEZCYjBJc1MwRkJjRUlzUTBGQlpEdEJRVU5CTEZsQlFVa3NVVUZCVVN4VlFVRlNMRXRCUVhWQ0xGVkJRVE5DTEVWQlFYVkRPMEZCUTNKRExIZENRVUZqTEZGQlFWRXNWVUZCZEVJN1FVRkRRVHRCUVVORU8wRkJRMFk3UVVGRFJDeGhRVUZQTEZkQlFWQTdRVUZEUkRzN096czdPenM3T3p0dFEwRlBZeXhoTEVWQlFXVTdRVUZETlVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eFpRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3hyUWtGQlVTeFhRVUZYTEZGQlFXNUNPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzYVVKQlFVOHNkVUpCUVZBN1FVRkRSRHRCUVVOR0xFOUJUazBzUTBGQlVEdEJRVTlFT3pzN096czdPenM3T3paRFFVOTNRaXhoTEVWQlFXVTdRVUZEZEVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeGhRVUZSTEZWQlFVUXNSMEZCWlN4WFFVRlhMRkZCUVRGQ0xFZEJRWEZETEZOQlFUVkRPMEZCUTBRN096czdPenM3T3pzN2JVUkJUemhDTEVjc1JVRkJTenRCUVVOc1F5eFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExFMUJRVTBzZDBKQlFVNHNRMEZCSzBJc1IwRkJMMElzUTBGQlVEdEJRVU5FT3pzN096czdPenM3YVVSQlRUUkNMR0VzUlVGQlpTeFZMRVZCUVZrN1FVRkRkRVFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRTFCUVUwc2QwSkJRVTRzUTBGQkswSXNZVUZCTDBJc1RVRkJhMFFzVTBGQmRFUXNSVUZCYVVVN1FVRkRMMFFzWTBGQlRTeDNRa0ZCVGl4RFFVRXJRaXhoUVVFdlFpeEpRVUZuUkN4VlFVRm9SRHRCUVVORU8wRkJRMFk3T3pzN096czdPenM3TUVOQlQzRkNMR0VzUlVGQlpUdEJRVU51UXl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzWVVGQllTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1lVRkJja0lzUTBGQmFrSTdRVUZEUVN4VlFVRkpMRlZCUVZVc1JVRkJaRHM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3hyUWtGQlZTeFhRVUZYTEU5QlFYSkNPMEZCUTBRN1FVRkRSQ3hoUVVGUExFOUJRVkE3UVVGRFJEczdPenM3T3pzN096WkRRVTEzUWp0QlFVTjJRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRzlDUVVGdlFpeEZRVUY0UWpzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnBRaXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU1zWVVGQlN5eEpRVUZKTEV0QlFWUXNTVUZCYTBJc1RVRkJUU3hoUVVGNFFpeEZRVUYxUXp0QlFVTnlReXhqUVVGSkxGVkJRVlVzVFVGQlRTeGhRVUZPTEVOQlFXOUNMRXRCUVhCQ0xFTkJRV1E3UVVGRFFTeGpRVUZKTEZOQlFWTXNUVUZCVFN4NVFrRkJUaXhEUVVGblF5eFJRVUZSTEVsQlFWSXNRMEZCWVN4UFFVRTNReXhGUVVGelJDeFJRVUZSTEZWQlFUbEVMRU5CUVdJN1FVRkRRU3cwUWtGQmEwSXNTVUZCYkVJc1EwRkJkVUlzVFVGQmRrSTdRVUZEUkRzN1FVRkZSQ3d3UWtGQlVTeEhRVUZTTEVOQlFWa3NhVUpCUVZvc1JVRkJLMElzU1VGQkwwSXNRMEZCYjBNc1dVRkJUVHM3UVVGRmVFTXNhMEpCUVZFc2VVTkJRVkk3UVVGRFJDeFRRVWhFTEVWQlIwY3NhVUpCUVZNN1FVRkJSU3hwUWtGQlR5eExRVUZRTzBGQlFXVXNVMEZJTjBJN1FVRkpSQ3hQUVZwTkxFTkJRVkE3UVVGaFJEczdPenM3T3pzN096czdPRU5CVVhsQ0xFa3NSVUZCVFN4bExFVkJRV2xDT3p0QlFVVXZReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRlZCUVZVc1JVRkJSU3hOUVVGTkxGRkJRVklzUlVGQmEwSXNUVUZCVFN4TlFVRk5MRmRCUVRsQ08wRkJRME1zV1VGQlNTeDFRa0ZCZFVJc1RVRkJUU3hQUVVFM1FpeEhRVUYxUXl4SFFVUTFRenRCUVVWRExHTkJRVTBzUlVGQlJTeFBRVUZQTEVWQlFVTXNUVUZCVFN4SlFVRlFMRVZCUVdFc1dVRkJXU3hsUVVGNlFpeEZRVUZVTEVWQlJsQXNSVUZCWkRzN1FVRkpRU3haUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGFFUXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxEQkNRVUZhTEVWQlFYZERMRXRCUVhoRE8wRkJRMFFzVDBGR1JEdEJRVWRFT3pzN096czdPenM3TmtOQlRYZENMRWtzUlVGQlRUdEJRVU0zUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEZWQlFWVXNSVUZCUlN4TlFVRk5MRkZCUVZJc1JVRkJhMElzVFVGQlRTeE5RVUZOTEZkQlFUbENPMEZCUTBNc1dVRkJTU3gxUWtGQmRVSXNUVUZCVFN4UFFVRTNRaXhIUVVGMVF5eEhRVVExUXp0QlFVVkRMR05CUVUwc1JVRkJSU3hQUVVGUExFVkJRVU1zVFVGQlRTeEpRVUZRTEVWQlFWUXNSVUZHVUN4RlFVRmtPenRCUVVsQkxGbEJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5vUkN4blFrRkJVU3hIUVVGU0xFTkJRVmtzTmtKQlFWb3NSVUZCTWtNc1MwRkJNME03UVVGRFJDeFBRVVpFTzBGQlIwUTdPenM3T3pzN096QkRRVXR4UWl4UkxFVkJRVlVzU3l4RlFVRlBPMEZCUTNKRExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1ZVRkJWU3hGUVVGRkxFMUJRVTBzVVVGQlVpeEZRVUZyUWl4TlFVRk5MRTFCUVUwc1YwRkJPVUk3UVVGRFJTeFpRVUZKTEhWQ1FVRjFRaXhOUVVGTkxFOUJRVGRDTEVkQlFYVkRMRWRCUkRkRE8wRkJSVVVzWTBGQlRTeEZRVUZGTEZWQlFWVXNVVUZCV2l4RlFVRnpRaXhQUVVGUExFdEJRVGRDTEVWQlJsSXNSVUZCWkRzN1FVRkpRU3haUVVGTkxGZEJRVTRzUTBGQmEwSXNTVUZCYkVJc1EwRkJkVUlzVjBGQmRrSXNRMEZCYlVNc1QwRkJia01zUlVGQk5FTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRja1FzWjBKQlFWRXNSMEZCVWl4RFFVRlpMSFZDUVVGYUxFVkJRWEZETEV0QlFYSkRPMEZCUTBRc1QwRkdSRHRCUVVkRU96czdPenM3T3pzN08zVkRRVTlyUWl4aExFVkJRV1VzWVN4RlFVRmxPMEZCUXk5RExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3h0UWtGQlZ5eFhRVUZZTEVOQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEdGQlFUVkNPMEZCUTBFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRWxCUVhORExGVkJRWFJETzBGQlEwUTdRVUZEUmpzN096czdPenM3T3pzMlEwRlBkMElzWVN4RlFVRmxPMEZCUTNSRExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3hsUVVGUExGZEJRVmNzVjBGQmJFSTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hqUVVGTkxIbENRVUZPTzBGQlEwUTdRVUZEUmpzN096czdPenM3T3pzN08zVkRRVk5yUWl4VkxFVkJRVmtzWjBJc1JVRkJhMElzWVN4RlFVRmxMR3RDTEVWQlFXOUNMRk1zUlVGQlZ6dEJRVU0zUml4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3TzBGQlJ6TkRMRmxCUVVrc1pVRkJaU3hGUVVGRExFMUJRVTBzVlVGQlVDeEZRVUZ0UWl4UlFVRlJMR2RDUVVFelFpeEZRVUUyUXl4TFFVRkxMR0ZCUVd4RUxFVkJRV2xGTEZOQlFWTXNUVUZCVFN4WFFVRm9SaXhGUVVFMlJpeFZRVUZWTEd0Q1FVRjJSeXhGUVVFeVNDeFRRVUZUTEZOQlFYQkpMRVZCUVN0SkxHRkJRV0VzUlVGQk5Vb3NSVUZCYmtJN08wRkJSVUVzWTBGQlRTeGpRVUZPTEVOQlFYRkNMR0ZCUVhKQ0xFbEJRWE5ETEZsQlFYUkRPenRCUVVWQkxGbEJRVWtzVlVGQlZTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc01FSkJRWEpDTEVOQlExb3NUVUZCVFN4WFFVUk5MRVZCUlZvc2RVSkJRWFZDTEUxQlFVMHNZMEZCTjBJc1IwRkJPRU1zUjBGR2JFTXNSVUZIV2l4WlFVaFpMRVZCU1Zvc1VVRktXU3hEUVVGa096dEJRVTlCTEdOQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTm9SQ3hyUWtGQlVTeEhRVUZTTEVOQlFWa3NhVU5CUVZvc1JVRkJLME1zUzBGQkwwTTdRVUZEUVN4alFVRkpMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNiMEpCUVZFc1NVRkJVanRCUVVORUxGZEJSa1FzVFVGRlR6dEJRVU5NTEcxQ1FVRlBMRGhDUVVGUU8wRkJRMFE3UVVGRFJpeFRRVkJFTzBGQlUwUXNUMEYyUWswc1EwRkJVRHRCUVhkQ1JEczdPenM3T3pzN096czdiME5CVVdVc1R5eEZRVUZUTEdFc1JVRkJaU3hWTEVWQlFWazdRVUZEYkVRc1ZVRkJTU3hSUVVGUkxFbEJRVm83T3pzN1FVRkpRU3hWUVVGSkxGbEJRVmtzYzBKQlFWVXNZVUZCVml4RlFVRjVRaXhOUVVGNlF6czdRVUZGUVN4VlFVRkpMRlZCUVZVc1VVRkJWaXhEUVVGdFFpeFhRVUZ1UWl4RFFVRktMRVZCUVhGRE8wRkJRMjVETEc5Q1FVRlpMRlZCUVZVc1QwRkJWaXhEUVVGclFpeFpRVUZzUWl4RlFVRm5ReXhGUVVGb1F5eERRVUZhTzBGQlEwUTdPMEZCUlVRc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExHTkJRVTBzVVVGQlRpeERRVUZsTEc5Q1FVRm1MRWRCUVhORExFbEJRWFJETEVOQlFUSkRMRlZCUVZNc1RVRkJWQ3hGUVVGcFFqdEJRVU14UkN4alFVRkpMR05CUVdNc1QwRkJUeXhYUVVGNlFqdEJRVU5CTEdOQlFVa3NZMEZCWXl4WlFVRlpMRTlCUVRsQ096dEJRVVZCTEdOQlFVa3NUVUZCVFN4WFFVRk9MRXRCUVhOQ0xGTkJRVEZDTEVWQlFYRkRPMEZCUTI1RExHMUNRVUZQTEhORFFVRlFPMEZCUTBRc1YwRkdSQ3hOUVVWUE96dEJRVVZNTEd0Q1FVRk5MRTlCUVU0c1EwRkJZeXgxUWtGQmRVSXNVMEZCY2tNc1JVRkJaMFFzU1VGQmFFUXNRMEZCY1VRc1dVRkJWenM3UVVGRk9VUXNiMEpCUVUwc1kwRkJUaXhIUVVGMVFpeFRRVUYyUWpzN096czdRVUZMUVN4clFrRkJTU3h2UWtGQmIwSXNRMEZCZUVJN1FVRkRRU3h2UWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhOUVVGNFFpeERRVUVyUWl4VFFVRXZRaXhGUVVFd1F5eHBRa0ZCTVVNc1JVRkJOa1FzU1VGQk4wUXNRMEZCYTBVc1ZVRkJVeXhaUVVGVUxFVkJRWFZDT3p0QlFVVjJSaXcyUWtGQllTeFBRVUZpTEVOQlFYRkNMRlZCUVZNc1QwRkJWQ3hGUVVGclFqczdRVUZGY2tNc2QwSkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeFZRVUZWTEZOQlFYaERMRVZCUVcxRUxGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlF6RkVMRFJDUVVGUkxFZEJRVklzUTBGQldTdzBRa0ZCV2l4RlFVRXdReXhWUVVGVkxHRkJRVllzUjBGQk1rSXNSMEZCY2tVN1FVRkRSQ3h0UWtGR1JEdEJRVWxFTEdsQ1FVNUVPenRCUVZGQkxHOUNRVUZKTEZWQlFWVXNPRUpCUVc5Q0xFMUJRVTBzVlVGQk1VSXNSVUZCYzBNc1RVRkJUU3hYUVVFMVF5eEZRVU5rTEdGQlJHTXNSVUZEUXl4VlFVUkVMRVZCUTJFc1lVRkJZU3hEUVVGaUxFTkJSR0lzUlVGRE9FSXNWMEZFT1VJc1EwRkJaRHM3UVVGSFFTeHpRa0ZCVFN4aFFVRk9MRU5CUVc5Q0xFbEJRWEJDTEVOQlFYbENMRTlCUVhwQ096czdRVUZIUVN4dlFrRkJTU3hSUVVGUkxFbEJRVklzUzBGQmFVSXNTMEZCY2tJc1JVRkJORUk3UVVGRE1VSXNkMEpCUVUwc1lVRkJUaXhEUVVGdlFpeFZRVUZ3UWl4RFFVRXJRaXhoUVVGaExFTkJRV0lzUTBGQkwwSXNTVUZCYTBRc1QwRkJiRVE3UVVGRFJDeHBRa0ZHUkN4TlFVVlBMRWxCUVVrc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZGQlFYSkNMRVZCUVN0Q08wRkJRM0JETEhkQ1FVRk5MR0ZCUVU0c1EwRkJiMElzVDBGQmNFSXNRMEZCTkVJc1lVRkJZU3hEUVVGaUxFTkJRVFZDTEVsQlFTdERMRTlCUVM5RE8wRkJRMFFzYVVKQlJrMHNUVUZGUVR0QlFVTk1MSGxDUVVGUExHMUNRVUZRTzBGQlEwUTdPMEZCUlVRc2IwSkJRVWtzYTBKQlFVbzdPenM3UVVGSlFTeHZRa0ZCU1N4UFFVRlJMRmRCUVZjc1YwRkJia0lzUzBGQmIwTXNVVUZCZUVNc1JVRkJhMFE3UVVGRGFFUXNPRUpCUVZrc1JVRkJXanRCUVVOQkxEUkNRVUZWTEVsQlFWWXNRMEZCWlN4WFFVRlhMRmRCUVRGQ08wRkJRMFFzYVVKQlNFUXNUVUZIVHp0QlFVTk1MRGhDUVVGWkxGZEJRVmNzVjBGQmRrSTdRVUZEUkRzN1FVRkZSQ3h2UWtGQlNTeDFRa0ZCZFVJc1YwRkJWeXhYUVVGMFF6dEJRVU5CTEc5Q1FVRkpMRzFDUVVGdFFpeEZRVUYyUWpzN08wRkJSMEVzY1VKQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xHOUNRVUZzUWl4RlFVRjNRenRCUVVOMFF5eHRRMEZCYVVJc1NVRkJha0lzUTBGQmMwSXNUVUZCVFN4blFrRkJUaXhEUVVGMVFpeDFRa0ZCZGtJc1EwRkJLME1zY1VKQlFYRkNMRXRCUVhKQ0xFTkJRUzlETEVOQlFYUkNPMEZCUTBRN096dEJRVWRFTEd0RFFVRlJMRWRCUVZJc1EwRkJXU3huUWtGQldpeEZRVUU0UWl4SlFVRTVRaXhEUVVGdFF5eFZRVUZUTEZkQlFWUXNSVUZCYzBJN08wRkJSWFpFTEhOQ1FVRkpMSE5DUVVGelFpeEZRVUV4UWp0QlFVTkJMSFZDUVVGTExFbEJRVWtzVFVGQlZDeEpRVUZyUWl4WFFVRnNRaXhGUVVFclFqdEJRVU0zUWl4M1FrRkJTU3hoUVVGaExGbEJRVmtzVFVGQldpeERRVUZxUWp0QlFVTkJMSGREUVVGdlFpeEpRVUZ3UWl4RFFVRjVRaXhYUVVGWExHRkJRVmdzUTBGQmVVSXNWVUZCZWtJc1EwRkJiME1zVlVGQmNFTXNRMEZCSzBNc1RVRkJMME1zUTBGQmMwUXNVVUZCTDBVN1FVRkRSRHM3TzBGQlIwUXNjMEpCUVVrc1pVRkJaU3hGUVVGRExFMUJRVTBzVjBGQlVDeEZRVUZ4UWl4elFrRkJjMElzWVVGQk0wTXNSVUZCTUVRc1dVRkJXU3hoUVVGaExFTkJRV0lzUTBGQmRFVXNSVUZCZFVZc1UwRkJVeXhOUVVGTkxGZEJRWFJITEVWQlFXMUlMRmRCUVZjc1UwRkJPVWdzUlVGQmVVa3NZVUZCWVN4dFFrRkJkRW9zUlVGQmJrSTdPMEZCUlVFc2MwSkJRVWtzVlVGQlZTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc01FSkJRWEpDTEVOQlExb3NUVUZCVFN4WFFVUk5MRVZCUlZvc2RVSkJRWFZDTEUxQlFVMHNZMEZCTjBJc1IwRkJPRU1zUjBGR2JFTXNSVUZIV2l4WlFVaFpMRVZCU1Zvc1VVRktXU3hEUVVGa096dEJRVTlCTEhkQ1FVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRhRVFzTkVKQlFWRXNSMEZCVWl4RFFVRlpMRGhDUVVGYUxFVkJRVFJETEV0QlFUVkRPMEZCUTBRc2JVSkJSa1E3T3pzN1FVRk5RU3h6UWtGQlNTeHBRa0ZCYVVJc1dVRkJXU3haUVVGWE96dEJRVVV4UXl4M1FrRkJTU3hWUVVGVkxFMUJRVTBzWTBGQlRpeERRVUZ4UWl3d1FrRkJja0lzUTBGRFdpeE5RVUZOTEZkQlJFMHNSVUZGV2l4MVFrRkJkVUlzVFVGQlRTeGpRVUUzUWl4SFFVRTRReXhIUVVac1F5eEZRVWRhTEZsQlNGa3NSVUZKV2l4UlFVcFpMRU5CUVdRN08wRkJUMEVzTUVKQlFVMHNWMEZCVGl4RFFVRnJRaXhYUVVGc1FpeERRVUU0UWl4UFFVRTVRaXhGUVVGMVF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTm9SQ3c0UWtGQlVTeEhRVUZTTEVOQlFWa3NkMEpCUVZvc1JVRkJjME1zUzBGQmRFTTdRVUZEUkN4eFFrRkdSRHRCUVVkRUxHMUNRVnB2UWl4RlFWbG9RaXhOUVVGTkxGZEJRVTRzUjBGQmIwSXNSMEZCY2tJc1IwRkJORUlzUTBGQk4wSXNSMEZCYTBNc1NVRmFhRUlzUTBGQmNrSTdPMEZCWTBFc01FSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFMRVZCUVN0Q0xHMUNRVUV2UWp0QlFVTkJMREJDUVVGUkxFZEJRVklzUTBGQldTeHRRa0ZCV2l4RlFVRnBReXhUUVVGcVF6czdRVUZGUVN3d1FrRkJVU3hoUVVGaExFTkJRV0lzUTBGQlVqdEJRVU5FTEdsQ1FURkRSRHRCUVRSRFJDeGxRWGhHUkN4RlFYZEdSeXhMUVhoR1NDeERRWGRHVXl4VlFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRGVFSXNkMEpCUVZFc1IwRkJVaXhEUVVGWkxHdENRVUZhTEVWQlFXZERMRTFCUVdoRE8wRkJRMEVzZFVKQlFVOHNUVUZCVUR0QlFVTkVMR1ZCTTBaRU8wRkJORVpFTEdGQmNFZEVPMEZCY1VkRU8wRkJRMFlzVTBFNVIwUXNSVUU0UjBjc1ZVRkJVeXhIUVVGVUxFVkJRV003UVVGRFppeHBRa0ZCVHl3NFFrRkJVRHRCUVVORUxGTkJhRWhFTzBGQmFVaEVMRTlCYmtoTkxFTkJRVkE3UVVGeFNFUTdPenM3T3pzN096dHpRMEZOYVVJc1J5eEZRVUZMTzBGQlEzSkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMRkZCUVZFc1MwRkJXanRCUVVOQkxGbEJRVWtzVVVGQlVTeERRVUZhT3p0QlFVVkJMR0ZCUVVzc1VVRkJVU3hEUVVGaUxFVkJRV2RDTEZGQlFWRXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFMUJRVFZETEVWQlFXOUVMRTlCUVhCRUxFVkJRVFpFTzBGQlF6TkVMR05CUVVrc1ZVRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNTMEZCY0VJc1EwRkJaRHRCUVVOQkxHTkJRVWtzV1VGQldTeFRRVUZvUWl4RlFVRXlRanRCUVVONlFpeG5Ra0ZCU1N4UlFVRlJMRlZCUVZJc1MwRkJkVUlzUjBGQk0wSXNSVUZCWjBNN1FVRkRPVUlzYzBKQlFWRXNTVUZCVWp0QlFVTkJPMEZCUTBRN1FVRkRSanRCUVVOR096dEJRVVZFTEZsQlFVa3NWVUZCVlN4TFFVRmtMRVZCUVhGQ08wRkJRMjVDTEdsQ1FVRlBMRzFDUVVGUU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhVUpCUVU4c1RVRkJUU3hoUVVGT0xFTkJRVzlDTEV0QlFYQkNMRU5CUVZBN1FVRkRRU3hyUWtGQlVTdzRRa0ZCVWp0QlFVTkVPMEZCUTBZc1QwRnlRazBzUTBGQlVEdEJRWFZDUkRzN096czdPenM3T3p0elEwRlBhVUlzUnl4RlFVRkxPMEZCUTNKQ0xGVkJRVWtzUTBGQlF5eEhRVUZNTEVWQlFWVXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3h6UWtGQlZpeERRVUZPTzBGQlExWXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEZsQlFVa3NWVUZCVlN4TlFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCWkRzN1FVRkZRU3haUVVGSkxGbEJRVmtzVTBGQmFFSXNSVUZCTWtJN1FVRkRla0lzYVVKQlFVOHNPRU5CUVZBN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHJRa0ZCVVN4UFFVRlNPMEZCUTBRN1FVRkRSaXhQUVZSTkxFTkJRVkE3UVVGWFJEczdPenM3T3pzN096czdhVU5CVVZrc1R5eEZRVUZUTEZNc1JVRkJWenRCUVVNdlFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc05FSkJRVW83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3T3p0QlFVY3hReXhaUVVGSkxFMUJRVTBzVjBGQlRpeExRVUZ6UWl4VFFVRXhRaXhGUVVGeFF6dEJRVU51UXl4cFFrRkJUeXh6UTBGQlVEdEJRVU5FT3pzN1FVRkhSQ3haUVVGSkxFTkJRVU1zVlVGQlZTeFBRVUZXTEVOQlFXdENMRmRCUVd4Q0xFTkJRVXdzUlVGQmNVTTdRVUZEYmtNc2MwSkJRVmtzVlVGQlZTeFRRVUZXTEVOQlFXOUNMRlZCUVZVc1QwRkJWaXhEUVVGclFpeEhRVUZzUWl4SlFVRjVRaXhEUVVFM1F5eERRVUZhTzBGQlEwUTdPMEZCUlVRc09FSkJRWE5DTEdOQlFXTXNVMEZCWkN4SFFVRXdRaXhoUVVFeFFpeEhRVUV3UXl4TFFVRkxMRXRCUVV3c1EwRkJXU3hMUVVGTExFMUJRVXdzUzBGQlowSXNTMEZCYWtJc1IwRkJNRUlzUTBGQmNrTXNRMEZCYUVVN096dEJRVWRCTEdOQlFVMHNZMEZCVGl4RFFVRnhRaXhUUVVGeVFpeEpRVUZyUXl4dFFrRkJiRU03UVVGRFFTeGpRVUZOTEdGQlFVNHNRMEZCYjBJc1QwRkJjRUlzUTBGQk5FSXNiVUpCUVRWQ0xFbEJRVzFFTEU5QlFXNUVPenM3T3pzN1FVRk5RU3huUWtGQlVTeHRRa0ZCVWpzN1FVRkZRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzYzBKQlFYTkNMRk5CUVhCRUxFVkJRU3RFTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTNSRkxHTkJRVWtzU1VGQlNTeFJRVUZLTEV0QlFXbENMRWxCUVVrc1JVRkJTaXhIUVVGVExGTkJRVGxDTEVWQlFYbERPMEZCUTNaRExHOUNRVUZSTEVkQlFWSXNRMEZCV1N4elEwRkJXaXhGUVVGdlJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRTNSRHRCUVVORU8wRkJRMFlzVTBGS1JEdEJRVXRFTEU5Qk4wSk5MRU5CUVZBN1FVRXJRa1E3T3pzN096czdPenR0UTBGTll5eHBRaXhGUVVGdFFqdEJRVU5vUXl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzTkVKQlFVbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdPMEZCUlRGRExGbEJRVWtzVDBGQlR5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc2FVSkJRWEpDTEVOQlFWZzdPMEZCUlVFc1dVRkJTU3hUUVVGVExGTkJRV0lzUlVGQmQwSTdRVUZEZEVJc2FVSkJRVThzTkVOQlFWQTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hwUWtGQlR5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc2FVSkJRWEpDTEVOQlFWQTdRVUZEUVN4clFrRkJVU3h6UWtGQlVqdEJRVU5FTzBGQlEwWXNUMEZXVFN4RFFVRlFPMEZCVjBRN096czdPenM3T3pzN08zRkRRVkZuUWl4UExFVkJRVk1zVXl4RlFVRlhPMEZCUTI1RExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4M1FrRkJTanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGcFFpeE5RVUZxUWl4RlFVRjVRanM3TzBGQlJ6RkRMRmxCUVVrc1RVRkJUU3hYUVVGT0xFdEJRWE5DTEZOQlFURkNMRVZCUVhGRE8wRkJRMjVETEdsQ1FVRlBMSE5EUVVGUU8wRkJRMFE3TzBGQlJVUXNNRUpCUVd0Q0xHdENRVUZyUWl4VFFVRnNRaXhIUVVFNFFpeFJRVUU1UWl4SFFVRjVReXhMUVVGTExFdEJRVXdzUTBGQldTeExRVUZMTEUxQlFVd3NTMEZCWjBJc1MwRkJha0lzUjBGQk1FSXNRMEZCY2tNc1EwRkJNMFE3T3p0QlFVZEJMR05CUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4SlFVRm5ReXhsUVVGb1F6dEJRVU5CTEdOQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4bFFVRTFRaXhKUVVFclF5eFBRVUV2UXpzN096czdPMEZCVFVFc1owSkJRVkVzWlVGQlVqczdRVUZGUVN4alFVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc2EwSkJRV3RDTEZOQlFXaEVMRVZCUVRKRUxGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyeEZMR05CUVVrc1NVRkJTU3hSUVVGS0xFdEJRV2xDTEVsQlFVa3NSVUZCU2l4SFFVRlRMRk5CUVRsQ0xFVkJRWGxETzBGQlEzWkRMRzlDUVVGUkxFZEJRVklzUTBGQldTeHJRMEZCV2l4RlFVRm5SQ3hKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUY2UkR0QlFVTkVPMEZCUTBZc1UwRktSRHRCUVV0RUxFOUJlRUpOTEVOQlFWQTdRVUY1UWtRN096czdPenM3T3pzN2NVTkJUMmRDTEVjc1JVRkJTenRCUVVOd1FpeFZRVUZKTEVOQlFVTXNSMEZCVEN4RlFVRlZMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzYzBKQlFWWXNRMEZCVGp0QlFVTldMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4WlFVRkpMRlZCUVZVc1RVRkJUU3haUVVGT0xFTkJRVzFDTEVkQlFXNUNMRU5CUVdRN08wRkJSVUVzV1VGQlNTeFpRVUZaTEZOQlFXaENMRVZCUVRKQ08wRkJRM3BDTEdsQ1FVRlBMRFpEUVVGUU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhMEpCUVZFc1QwRkJVanRCUVVORU8wRkJRMFlzVDBGVVRTeERRVUZRTzBGQlYwUTdPenM3T3pzN096czdPMmREUVZGWExGY3NSVUZCWVN4UExFVkJRVk03UVVGRGFFTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEdOQlFVMHNUMEZCVGl4RFFVRmpMRTlCUVdRc1NVRkJlVUlzVjBGQmVrSTdRVUZEUVN4blFrRkJVU3cyUWtGQlVqdEJRVU5FTEU5QlNrMHNRMEZCVUR0QlFVMUVPenM3T3pzN096czdhME5CVFdFc2FVSXNSVUZCYlVJN1FVRkRMMElzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdPMEZCUlRGRExGbEJRVWtzVTBGQlV5eE5RVUZOTEU5QlFVNHNRMEZCWXl4cFFrRkJaQ3hEUVVGaU96dEJRVVZCTEZsQlFVa3NWMEZCVnl4VFFVRm1MRVZCUVRCQ08wRkJRM2hDTEdsQ1FVRlBMR2RDUVVGUU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhMEpCUVZFc01rSkJRVkk3UVVGRFJEdEJRVU5HTEU5QlZFMHNRMEZCVUR0QlFWZEVPenM3T3pzN096czdORUpCVFU4c1N5eEZRVUZQTEVOQlJXUTdPenM3T3pzN096czdPenNyUWtGUFZTeEhMRVZCUVVzN1FVRkRaQ3hWUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2MwSkJRVllzUTBGQlRqdEJRVU5XTEdOQlFWRXNSMEZCVWl4RFFVRlpMR05CUVZvc1JVRkJORUlzUjBGQk5VSTdPMEZCUlVFc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGcFFpeE5RVUZxUWl4RlFVRjVRanM3UVVGRk1VTXNXVUZCU1N4blFrRkJTanM3TzBGQlIwRXNhMEpCUVZVc1RVRkJUU3hoUVVGT0xFTkJRVzlDTEZWQlFYQkNMRU5CUVN0Q0xFZEJRUzlDTEVOQlFWWTdPenRCUVVkQkxGbEJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTTdRVUZEV2l4dlFrRkJWU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNUMEZCY0VJc1EwRkJORUlzUjBGQk5VSXNRMEZCVmpzN1FVRkZRU3hqUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqT3p0QlFVVmFMR2RDUVVGSkxGTkJRVk1zYzBKQlFWVXNSMEZCVml4RlFVRmxMRTFCUVRWQ096czdRVUZIUVN4cFFrRkJTeXhKUVVGSkxFOUJRVlFzU1VGQmIwSXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFOUJRWGhETEVWQlFXbEVPMEZCUXk5RExHdENRVUZKTEZGQlFWRXNVVUZCVWl4RFFVRnBRaXhOUVVGcVFpeERRVUZLTEVWQlFUaENPMEZCUXpWQ0xEQkNRVUZWTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4UFFVRTFRaXhEUVVGV08wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3haUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqTzBGQlExb3NhVUpCUVU4c01rSkJRVEpDTEVkQlFXeERPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzYTBKQlFWRXNUMEZCVWp0QlFVTkVPMEZCUlVZc1QwRXZRazBzUTBGQlVEdEJRV2REUkRzN096czdPenM3T3pzMFFrRlBUeXhITEVWQlFVczdRVUZEV0N4alFVRlJMRWRCUVZJc1EwRkJXU3hoUVVGaExFZEJRWHBDTzBGQlEwRXNWVUZCU1N4UlFVRlJMRWxCUVZvN096czdRVUZKUVN4VlFVRkpMR0ZCUVdFc2MwSkJRVlVzUjBGQlZpeERRVUZxUWp0QlFVTkJMRlZCUVVrc1dVRkJXU3hYUVVGWExFMUJRVE5DTzBGQlEwRXNWVUZCU1N4UFFVRlBMRmRCUVZjc1NVRkJkRUk3T3p0QlFVZEJMRlZCUVVrc1NVRkJTU3hSUVVGS0xFTkJRV0VzYlVKQlFXSXNRMEZCU2l4RlFVRjFRenRCUVVOeVF5eHZRa0ZCV1N4TlFVRk5MRTlCUVd4Q08wRkJRMFE3TzBGQlJVUXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF5eFpRVUZKTEVOQlFVTXNWVUZCVlN4UFFVRldMRU5CUVd0Q0xGZEJRV3hDTEVOQlFVUXNTVUZCYlVNc1EwRkJReXhWUVVGVkxFOUJRVllzUTBGQmEwSXNWMEZCYkVJc1EwRkJlRU1zUlVGQmQwVTdRVUZEZEVVc2MwSkJRVmtzVlVGQlZTeFRRVUZXTEVOQlFXOUNMRlZCUVZVc1QwRkJWaXhEUVVGclFpeEhRVUZzUWl4SlFVRjVRaXhEUVVFM1F5eERRVUZhTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3huUWtGQlNqdEJRVU5CTEZsQlFVa3NVMEZCVXl4WlFVRmlMRVZCUVRKQ08wRkJRM3BDTEc5Q1FVRlhMRTFCUVUwc1dVRkJUaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRllPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzYjBKQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xGTkJRWEpDTEVOQlFWZzdRVUZEUkRzN1FVRkZSQ3hqUVVGTkxHZENRVUZPTEVOQlFYVkNMRzlDUVVGMlFpeEZRVUUyUXl4VlFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGREwwUXNiMEpCUVZjc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZOQlFYSkNMRU5CUVZnN1FVRkRRU3hyUWtGQlVTeEpRVUZTTEVOQlFXRXNjMEpCUVdJc1JVRkJjVU1zVDBGQmNrTTdRVUZEUVN4clFrRkJVU3hQUVVGU08wRkJRMFFzVTBGS1JEczdRVUZOUVN4alFVRk5MR2RDUVVGT0xFTkJRWFZDTEhkQ1FVRjJRaXhGUVVGcFJDeFZRVUZUTEZOQlFWUXNSVUZCYjBJN1FVRkRia1VzYjBKQlFWY3NUVUZCVFN4WlFVRk9MRU5CUVcxQ0xGTkJRVzVDTEVOQlFWZzdRVUZEUVN4clFrRkJVU3hKUVVGU0xFTkJRV0VzY1VKQlFXSXNSVUZCYjBNc1QwRkJjRU03UVVGRFFTeHJRa0ZCVVN4UFFVRlNPMEZCUTBRc1UwRktSRHM3UVVGTlFTeFpRVUZKTEZsQlFWa3NVMEZCYUVJc1JVRkJNa0k3UVVGRGVrSXNhMEpCUVZFc1NVRkJVaXhEUVVGaExGbEJRV0lzUlVGQk1rSXNUMEZCTTBJN1FVRkRRU3hyUWtGQlVTeFBRVUZTTzBGQlEwUXNVMEZJUkN4TlFVZFBPMEZCUTB3c1kwRkJTU3hUUVVGVExGbEJRV0lzUlVGQk1rSTdRVUZEZWtJc2EwSkJRVTBzVDBGQlRpeERRVUZqTEhOQ1FVRmtMRVZCUVhORExGTkJRWFJETzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB3c2EwSkJRVTBzVDBGQlRpeERRVUZqTEd0Q1FVRmtMRVZCUVd0RExGTkJRV3hETzBGQlEwUTdRVUZGUmp0QlFVVkdMRTlCY2tOTkxFTkJRVkE3UVVGelEwUTdPenQzUWtFemVrSm5RanRCUVVObUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRmRCUVdJN1FVRkRSRHM3T3pzN096dHpRa0ZOWXl4VkxFVkJRVms3UVVGRGVrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3haUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN08wRkJSVUVzV1VGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNWMEZCY0VNc1JVRkJhVVFzVlVGQlV5eEhRVUZVTEVWQlFXTTdPMEZCUlRkRUxGbEJRVWtzVlVGQlZTeE5RVUZOTEhOQ1FVRk9MRU5CUVRaQ0xFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYUkRMRVZCUVdkRUxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYcEVMRU5CUVdRN08wRkJSVUVzV1VGQlNTeFJRVUZSTEVWQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVZRc1JVRkJZU3hOUVVGTkxGVkJRVzVDTEVWQlFTdENMRWxCUVVrc1NVRkJTU3hKUVVGMlF5eEZRVUUyUXl4TlFVRk5MRWxCUVVrc1JVRkJka1FzUlVGQk1rUXNUVUZCVFN4RlFVRkRMRlZCUVZVc1QwRkJXQ3hGUVVGcVJTeEZRVUZhTzBGQlEwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hIUVVGdFFpeFBRVUZFTEVkQlFWa3NSMEZCV2l4SFFVRnJRaXhIUVVGd1F6czdRVUZGUVN4alFVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1MwRkJPVUk3UVVGRFJDeFBRVkpFT3pzN08wRkJXVUVzV1VGQlRTeFJRVUZPTEVOQlFXVXNWVUZCWml4SFFVRTBRaXhWUVVFMVFqczdPMEZCUjBFc1ZVRkJTU3h2UWtGQmIwSXNaME5CUVhOQ0xFMUJRVTBzVjBGQk5VSXNSVUZCZVVNc1ZVRkJla01zUTBGQmVFSTdRVUZEUVN4WlFVRk5MR2xDUVVGT0xFZEJRVEJDTEdsQ1FVRXhRanM3TzBGQlIwRXNWVUZCU1N4dFFrRkJiVUlzSzBKQlFYRkNMRTFCUVUwc1YwRkJUaXhIUVVGdlFpeHZRa0ZCZWtNc1JVRkJLMFFzVlVGQkwwUXNRMEZCZGtJN1FVRkRRU3haUVVGTkxHZENRVUZPTEVkQlFYbENMR2RDUVVGNlFqdEJRVTlFT3pzN096dHJRa0YxZUVKWkxGRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxEYWpSQ1ZDeHBRanRCUVVWS0xEWkNRVUZaTEVWQlFWb3NSVUZCWjBJc1IwRkJhRUlzUlVGQmNVSXNZVUZCY2tJc1JVRkJiME1zV1VGQmNFTXNSVUZCYTBRc1dVRkJiRVFzUlVGQlowVXNUVUZCYUVVc1JVRkJkMFVzUzBGQmVFVXNSVUZCSzBVc2EwSkJRUzlGTEVWQlFXMUhPMEZCUVVFN08wRkJRMnBITEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzUjBGQlRpeEhRVUZaTEVWQlFWbzdRVUZEUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hIUVVGaU8wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMR0ZCUVhaQ08wRkJRMEVzVlVGQlRTeGhRVUZPTEVkQlFYTkNMRmxCUVhSQ08wRkJRMEVzVlVGQlRTeGhRVUZPTEVkQlFYTkNMRmxCUVhSQ08wRkJRMEVzVlVGQlRTeFBRVUZPTEVkQlFXZENMRTFCUVdoQ08wRkJRMEVzVlVGQlRTeE5RVUZPTEVkQlFXVXNTMEZCWmp0QlFVTkJMRlZCUVUwc2JVSkJRVTRzUjBGQk5FSXNhMEpCUVRWQ08wRkJRMFE3T3pzN2QwSkJSVkU3UVVGRFVDeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c1RVRkJUU3hIUVVGaU8wRkJRMFE3T3p0M1FrRkZVenRCUVVOU0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRWxCUVdJN1FVRkRSRHM3TzNkQ1FVVm5RanRCUVVObUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MR05CUVdJN1FVRkRSRHM3T3pzN2EwSkJTVmtzYVVJN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJrTm1PenRCUVVkQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJSMEU3T3pzN1FVRkRRVHM3T3p0QlFVVkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlFXZENUU3hUT3pzN096czdPenRCUVU5S0xIRkNRVUZaTEdOQlFWb3NSVUZCTkVJc1RVRkJOVUlzUlVGQmIwTTdRVUZCUVRzN08wRkJSV3hETEZGQlFVa3NRMEZCUXl4alFVRk1MRVZCUVhGQ0xFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNNa05CUVZZc1EwRkJUanRCUVVOeVFpeFJRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzWjBOQlFWWXNRMEZCVGpzN1FVRkZZaXhSUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRk5MR05CUVU0c1IwRkJkVUlzWTBGQmRrSTdRVUZEUVN4VlFVRk5MR2RDUVVGT0xFZEJRWGxDTEdWQlFXVXNjMEpCUVdZc1JVRkJla0k3T3pzN08wRkJTMEVzVVVGQlNTeGhRVUZoTEdWQlFXVXNUVUZCWml4SFFVRjNRaXhIUVVGNFFpeEhRVUU0UWl4TFFVRkxMRXRCUVV3c1EwRkJXU3hMUVVGTExFMUJRVXdzUzBGQlowSXNTMEZCYWtJc1IwRkJNRUlzUTBGQmNrTXNRMEZCTDBNN1FVRkRRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNWVUZCYmtJN1FVRkRRU3hWUVVGTkxFMUJRVTRzUjBGQlpTeE5RVUZtT3pzN1FVRkhRU3hWUVVGTkxHZENRVUZPTEVOQlFYVkNMRlZCUVhaQ0xFZEJRVzlETEZWQlFYQkRPenM3UVVGSFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc05rSkJRVzFDTEZWQlFXNUNMRU5CUVhaQ096czdPenRCUVV0QkxGRkJRVWtzWVVGQllTeGxRVUZsTEdkQ1FVRm1MRVZCUVdwQ096czdRVUZIUVN4VlFVRk5MRkZCUVU0c1IwRkJhVUlzZFVKQlFXRXNWVUZCWWl4RlFVRjVRaXhWUVVGNlFpeEZRVUZ4UXl4TlFVRk5MR05CUVRORExFVkJRVEpFTEUxQlFVMHNaMEpCUVdwRkxFTkJRV3BDT3pzN1FVRkhRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNlVUpCUVdVc1RVRkJUU3hSUVVGeVFpeERRVUZ1UWpzN08wRkJSMEVzVlVGQlRTeFpRVUZPTEVkQlFYRkNMREpDUVVGcFFpdzJRa0ZCYlVJc1RVRkJUU3hqUVVGNlFpeEZRVUY1UXl4TlFVRk5MRkZCUVM5RExFTkJRV3BDTEVOQlFYSkNPenRCUVVWQkxGVkJRVTBzVlVGQlRpeERRVUZwUWl4UlFVRnFRaXhEUVVFd1FpeFJRVUV4UWl4SFFVRnhRenM3TzBGQlIyNURMR05CUVZNc1IwRkJWQ3hGUVVGak8wRkJRMW9zV1VGQlRTeFpRVUZPTEVOQlFXMUNMRk5CUVc1Q0xFTkJRVFpDTEVsQlFVa3NSMEZCYWtNc1JVRkJjME1zU1VGQmRFTXNRMEZCTWtNc1ZVRkJVeXhWUVVGVUxFVkJRWEZDTzBGQlF6bEVMRmxCUVVrc1IwRkJTaXhIUVVGVkxGVkJRVlk3UVVGRFFTeFpRVUZKTEVsQlFVbzdRVUZEUkN4UFFVaEVMRVZCUjBjc1MwRklTQ3hEUVVkVExGVkJRVk1zVFVGQlZDeEZRVUZwUWp0QlFVTjRRaXhuUWtGQlVTeExRVUZTTEVOQlFXTXNUVUZCWkR0QlFVTkJMRmxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVlE3UVVGRFJDeFBRVTVFTzBGQlQwUXNTMEZZYTBNc1EwRkJja003T3p0QlFXVkJMR1ZCUVZjc1YwRkJXQ3hEUVVGMVFpeEhRVUYyUWl4RlFVRTBRaXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU40UXl4WlFVRk5MRlZCUVU0c1EwRkJhVUlzVjBGQmFrSXNRMEZCTmtJc1IwRkJOMEk3UVVGRFJDeExRVVpFT3pzN1FVRkxRU3hWUVVGTkxGRkJRVTRzUTBGQlpTeFZRVUZtTEVkQlFUUkNMRTFCUVUwc1ZVRkJiRU03T3p0QlFVZEJMRlZCUVUwc1kwRkJUaXhEUVVGeFFpeFJRVUZ5UWl4SFFVRm5ReXhOUVVGTkxGRkJRWFJET3p0QlFVVkJMRlZCUVUwc1VVRkJUaXhEUVVGbExHZENRVUZtTEVOQlFXZERMR3RDUVVGb1F5eEZRVUZ2UkN4VlFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGRGRFVXNXVUZCVFN4UlFVRk9MRU5CUVdVc1UwRkJaaXhGUVVFd1FpeEpRVUV4UWl4RFFVRXJRaXhaUVVGWE8wRkJRM2hETEdOQlFVMHNVVUZCVGl4RFFVRmxMRTlCUVdZc1EwRkJkVUlzYjBKQlFYWkNMRVZCUVRaRExGTkJRVGRETzBGQlEwUXNUMEZHUkN4RlFVVkhMRXRCUmtnc1EwRkZVeXhWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEZUVJc1owSkJRVkVzUzBGQlVpeERRVUZqTERoRFFVRmtMRVZCUVRoRUxFMUJRVGxFTzBGQlEwUXNUMEZLUkR0QlFVMUVMRXRCVUVRN08wRkJVMEVzVlVGQlRTeFJRVUZPTEVOQlFXVXNaMEpCUVdZc1EwRkJaME1zYzBKQlFXaERMRVZCUVhkRUxGVkJRVk1zVTBGQlZDeEZRVUZ2UWp0QlFVTXhSU3haUVVGTkxGbEJRVTRzUTBGQmJVSXNVMEZCYmtJc1JVRkJPRUlzU1VGQk9VSXNRMEZCYlVNc1dVRkJWenRCUVVNMVF5eGpRVUZOTEZGQlFVNHNRMEZCWlN4UFFVRm1MRU5CUVhWQ0xIZENRVUYyUWl4RlFVRnBSQ3hUUVVGcVJEdEJRVU5FTEU5QlJrUXNSVUZGUnl4TFFVWklMRU5CUlZNc1ZVRkJVeXhOUVVGVUxFVkJRV2xDTzBGQlEzaENMR2RDUVVGUkxFdEJRVklzUTBGQll5d3lRMEZCWkN4RlFVRXlSQ3hOUVVFelJEdEJRVU5FTEU5QlNrUTdRVUZOUkN4TFFWQkVPenM3TzBGQlYwRXNiVUpCUVdVc1ZVRkJaaXhIUVVFMFFpeE5RVUZOTEZWQlFXeERPenM3UVVGSFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc05rSkJRVzFDTEUxQlFVMHNWVUZCZWtJc1JVRkJjVU1zVFVGQlRTeFZRVUV6UXl4RlFVRjFSQ3hOUVVGTkxGRkJRVGRFTEVWQlFYVkZMRTFCUVUwc1owSkJRVGRGTEVOQlFYWkNPenM3TzBGQlMwUTdPenM3T3pzN096czdiME5CVFdVc1ZTeEZRVUZaTEVOQlJUTkNPenM3T3pzN096czdPenM3YjBOQlQyVXNaU3hGUVVGcFFpeFZMRVZCUVZrc1EwRkZOVU03T3pzN096czdPenM3TzJkRFFVMVhMRzlDTEVWQlFYTkNPenRCUVVWb1F5eFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxFTkJRVU1zYjBKQlFVd3NSVUZCTWtJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzBRMEZCVml4RFFVRk9PenRCUVVVelFpeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNXVUZCU1N4dlFrRkJTanRCUVVOQkxGbEJRVWtzZDBKQlFVbzdRVUZEUVN4WlFVRkpMREpDUVVGS08wRkJRMEVzV1VGQlNTdzRRa0ZCU2pzN1FVRkZRU3haUVVGSkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFWTXNUVUZCVkN4RlFVRnBRanRCUVVOcVF5eHJRa0ZCVVN4TFFVRlNMRU5CUVdNc01FTkJRV1FzUlVGQk1FUXNUVUZCTVVRN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN096czdPMEZCVTBFc1owSkJRVkVzU1VGQlVpeERRVUZoTEhGRVFVRmlPMEZCUTBFc1owSkJRVkVzU1VGQlVpeERRVUZoTERoQ1FVRmlMRVZCUVRaRExHOUNRVUUzUXp0QlFVTkJMR1ZCUVU4c1RVRkJUU3huUWtGQlRpeERRVUYxUWl4dlFrRkJka0lzUTBGQk5FTXNiMEpCUVRWRExFVkJRV3RGTEVsQlFXeEZMRU5CUVhWRkxGVkJRVk1zYVVKQlFWUXNSVUZCTkVJN08wRkJSWGhITEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3c0UWtGQllpeEZRVUUyUXl4cFFrRkJOME03T3pzN1FVRkpRU3dyUWtGQmNVSXNhVUpCUVhKQ096dEJRVVZCTEdOQlFVa3NiVUpCUVcxQ0xHdENRVUZyUWl4blFrRkJla003TzBGQlJVRXNZMEZCU1N4eFFrRkJjVUlzWjBKQlFYcENMRVZCUVRKRE8wRkJRM3BETEcxQ1FVRlBMR3RDUVVGclFpeGhRVUY2UWp0QlFVTkVPenM3UVVGSFJDeHBRa0ZCVHl4TlFVRk5MR2RDUVVGT0xFTkJRWFZDTEhWQ1FVRjJRaXhEUVVFclF5eG5Ra0ZCTDBNc1EwRkJVRHRCUVVORUxGTkJhRUpOTEVWQmFVSk9MRWxCYWtKTkxFTkJhVUpFTEZWQlFWTXNZVUZCVkN4RlFVRjNRanRCUVVNMVFpeHJRa0ZCVVN4SlFVRlNMRU5CUVdFc0swSkJRV0k3T3pzN1FVRkpRU3hyUTBGQmQwSXNZVUZCZUVJN096czdPenM3T3p0QlFWTkJMR05CUVVrc1UwRkJVeXhKUVVGaU96dEJRVVZCTEdsQ1FVRlBMRTFCUVZBN1FVRkRSQ3hUUVd4RFRTeEZRVzFEVGl4SlFXNURUU3hEUVcxRFJDeFZRVUZUTEZsQlFWUXNSVUZCZFVJN1FVRkRNMElzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR3REUVVGaUxFVkJRV2xFTEZsQlFXcEVPenM3T3pzN096czdPMEZCVlVFc1kwRkJTU3huUWtGQlowSXNTVUZCY0VJN1FVRkRRU3hqUVVGSkxHZENRVUZLT3p0QlFVVkJMR05CUVVrc1lVRkJTaXhGUVVGdFFqczdPMEZCUjJwQ0xITkNRVUZWTEUxQlFVMHNVVUZCVGl4RFFVRmxMR0ZCUVdZc1JVRkJWanM3TzBGQlIwUXNWMEZPUkN4TlFVMVBPenRCUVVWTUxHdENRVUZKTEZOQlFWTXNjMEpCUVZVc2IwSkJRVllzUlVGQlowTXNUVUZCTjBNN096dEJRVWRCTEhkQ1FVRlZMRTFCUVUwc1VVRkJUaXhEUVVGbExGVkJRV1lzUTBGQk1FSXNUVUZCTVVJc1EwRkJWanRCUVVORU96czdRVUZIUkN4cFFrRkJUeXhQUVVGUU8wRkJRMFFzVTBGcVJVMHNSVUZwUlVvc1NVRnFSVWtzUTBGcFJVTXNWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM2hDTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUWtGQllpeEZRVUZ6UXl4UFFVRjBRenM3T3p0QlFVbEJMR2xDUVVGUExFOUJRVkE3UVVGRFJDeFRRWFpGVFN4RlFYVkZTaXhWUVVGVExFMUJRVlFzUlVGQmFVSTdRVUZEYkVJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEhGRFFVRmtMRVZCUVhGRUxFMUJRWEpFT3pzN096dEJRVXRCTEdOQlFVa3NWVUZCVlN4TlFVRk5MR05CUVU0c1EwRkJjVUlzWVVGQmNrSXNSVUZCWkRzN1FVRkZRU3hyUWtGQlVTeFhRVUZTTEVOQlFXOUNMRWRCUVhCQ0xFVkJRWGxDTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKRExHdENRVUZOTEZWQlFVNHNRMEZCYVVJc1YwRkJha0lzUTBGQk5rSXNSMEZCTjBJN1FVRkRSQ3hYUVVaRU96dEJRVWxCTEdsQ1FVRlBMRTlCUVZBN1FVRkRSQ3hUUVhCR1RTeEZRWEZHVGl4SlFYSkdUU3hEUVhGR1JDeFZRVUZUTEU5QlFWUXNSVUZCYTBJN1FVRkRkRUlzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR2REUVVGaU96dEJRVVZCTERSQ1FVRnJRaXhQUVVGc1FqczdPMEZCUjBFc2FVSkJRVThzVFVGQlRTeFJRVUZPTEVOQlFXVXNaVUZCWml4RFFVRXJRaXhQUVVFdlFpeEZRVUYzUXl4dlFrRkJlRU1zUlVGQk9FUXNhMEpCUVRsRUxFTkJRVkE3UVVGRFJDeFRRVFZHVFN4RlFUWkdUaXhKUVRkR1RTeERRVFpHUkN4VlFVRlRMRlZCUVZRc1JVRkJjVUk3UVVGRGVrSXNhMEpCUVZFc1NVRkJVaXhEUVVGaExIZERRVUZpTEVWQlFYVkVMRlZCUVhaRU96czdRVUZIUVN4M1FrRkJZeXhWUVVGa096czdRVUZIUVN4alFVRkpMR2RDUVVGblFpeEZRVUZ3UWp0QlFVTkJMR05CUVVrc1EwRkJReXgzUWtGQldTeHRRa0ZCYlVJc1lVRkJMMElzUTBGQlRDeEZRVUZ2UkR0QlFVTnNSQ3huUWtGQlNUdEJRVU5HTERoQ1FVRm5RaXh6UWtGQll5eEZRVUZrTEVWQlFXdENMRXRCUVVzc1MwRkJUQ3hEUVVGWExHMUNRVUZ0UWl4aFFVRTVRaXhEUVVGc1FpeERRVUZvUWp0QlFVTkVMR0ZCUmtRc1EwRkZSU3hQUVVGUExFTkJRVkFzUlVGQlZUdEJRVU5XTERoQ1FVRm5RaXh0UWtGQmJVSXNZVUZCYmtNN1FVRkRSRHRCUVVOR08wRkJRMFFzZDBKQlFXTXNWVUZCWkN4SFFVRXlRaXhOUVVGTkxGVkJRV3BET3pzN1FVRkhRU3hwUWtGQlR5eG5Ra0ZCWjBJc1pVRkJhRUlzUTBGQlowTXNjMEpCUVhOQ0xGVkJRWFJFTEVWQlFXdEZMRmRCUVd4RkxFVkJRU3RGTEdGQlFTOUZMRU5CUVZBN1FVRkRSQ3hUUVdoSVRTeEZRV2xJVGl4SlFXcElUU3hEUVdsSVJDeFZRVUZUTEhGQ1FVRlVMRVZCUVdkRE8wRkJRM0JETEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3d3UTBGQllpeEZRVUY1UkN4eFFrRkJla1E3T3pzN08wRkJTMEVzWjBKQlFVMHNWVUZCVGl4RFFVRnBRaXhYUVVGcVFpeERRVUUyUWl4WFFVRTNRaXhGUVVFd1F5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTjBSQ3cwUWtGQlowSXNWMEZCYUVJc1EwRkJORUlzUjBGQk5VSTdRVUZEUkN4WFFVWkVPenM3UVVGTFFTeGpRVUZKTEZWQlFWVTdRVUZEV2l3clFrRkJiVUlzVjBGRVVEdEJRVVZhTEc5Q1FVRlJPMEZCUmtrc1YwRkJaRHM3UVVGTFFTeHJRa0ZCVVN4UFFVRlNPenM3UVVGSFFTeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVUkJRVm83UVVGRFJDeFRRWEpKVFN4RlFYTkpUaXhMUVhSSlRTeERRWE5KUVN4WFFYUkpRU3hEUVVGUU8wRkJkMGxFTEU5Qk1VcE5MRU5CUVZBN1FVRTBTa1E3T3pzN096czdPenMyUWtGTlVTeFpMRVZCUVdNN08wRkJSWEpDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVWtzUTBGQlF5eFpRVUZNTEVWQlFXMUNMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTkVKQlFWWXNRMEZCVGpzN1FVRkZia0lzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN08wRkJSVE5ETEZsQlFVa3NVMEZCVXl4elFrRkJWU3haUVVGV0xFVkJRWGRDTEUxQlFYSkRPenRCUVVWQkxGbEJRVWtzUTBGQlF5eE5RVUZNTEVWQlFXRTdRVUZEV0N4dFFrRkJVeXhaUVVGVU8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4eFFrRkJTanRCUVVOQkxGbEJRVWtzZDBKQlFVbzdRVUZEUVN4WlFVRkpMRFpDUVVGS08wRkJRMEVzV1VGQlNTd3lRa0ZCU2pzN1FVRkZRU3haUVVGSkxHTkJRV01zVTBGQlpDeFhRVUZqTEVOQlFWTXNUVUZCVkN4RlFVRnBRanRCUVVOcVF5eHJRa0ZCVVN4TFFVRlNMRU5CUVdNc2EwUkJRV1FzUlVGQmEwVXNUVUZCYkVVN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN08wRkJUVUVzWjBKQlFWRXNTVUZCVWl4RFFVRmhMRFpFUVVGaU8wRkJRMEVzWjBKQlFWRXNTVUZCVWl4RFFVRmhMR2xFUVVGaUxFVkJRV2RGTEUxQlFXaEZPMEZCUTBFc1kwRkJUU3hSUVVGT0xFTkJRV1VzYVVKQlFXWXNRMEZCYVVNc1RVRkJha01zUlVGQmVVTXNTVUZCZWtNc1EwRkJPRU1zVlVGQlV5eHRRa0ZCVkN4RlFVRTRRanM3UVVGRk1VVXNhMEpCUVZFc1NVRkJVaXhEUVVGaExEUkNRVUZpTEVWQlFUSkRMRzFDUVVFelF6czdPenM3UVVGTFFTeGpRVUZKTEU5QlFVODdRVUZEVkN4cFEwRkJjVUlzYlVKQlJGbzdRVUZGVkN4dlFrRkJVVHRCUVVaRExGZEJRVmc3TzBGQlMwRXNhMEpCUVZFc1NVRkJVanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4MVJFRkJZanRCUVVORUxGTkJaRVFzUlVGbFF5eExRV1pFTEVOQlpVOHNWVUZCVXl4TlFVRlVMRVZCUVdsQ096czdRVUZIZEVJc2EwSkJRVkVzU1VGQlVpeERRVUZoTERCQ1FVRmlMRVZCUVhsRExFMUJRWHBET3pzN096dEJRVXRCTEdkQ1FVRk5MR2RDUVVGT0xFTkJRWFZDTEdsQ1FVRjJRaXhEUVVGNVF5eFpRVUY2UXl4RlFVTkRMRWxCUkVRc1EwRkRUU3hWUVVGVExHTkJRVlFzUlVGQmVVSTdPMEZCUlRkQ0xHOUNRVUZSTEVsQlFWSXNRMEZCWVN4eFEwRkJZaXhGUVVGdlJDeGpRVUZ3UkRzN08wRkJSMEVzT0VKQlFXdENMR05CUVd4Q096dEJRVVZCTEdkQ1FVRkpMRzFDUVVGdFFpeGxRVUZsTEdkQ1FVRjBRenM3UVVGRlFTeG5Ra0ZCU1N4eFFrRkJjVUlzWjBKQlFYcENMRVZCUVRKRE8wRkJRM3BETEhGQ1FVRlBMR1ZCUVdVc1lVRkJkRUk3UVVGRFJEczdPMEZCUjBRc2JVSkJRVThzVFVGQlRTeG5Ra0ZCVGl4RFFVRjFRaXgxUWtGQmRrSXNRMEZCSzBNc1owSkJRUzlETEVOQlFWQTdRVUZEUkN4WFFXaENSQ3hGUVdsQ1F5eExRV3BDUkN4RFFXbENUeXhYUVdwQ1VDeEZRV3RDUXl4SlFXeENSQ3hEUVd0Q1RTeFZRVUZUTEdsQ1FVRlVMRVZCUVRSQ08wRkJRMmhETEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUTBGQllpeEZRVUZ6UkN4cFFrRkJkRVE3T3pzN1FVRkpRU3hwUTBGQmNVSXNhVUpCUVhKQ096czdRVUZIUVN4blFrRkJTU3hUUVVGVExFbEJRV0k3UVVGRFFTeHRRa0ZCVHl4TlFVRlFPMEZCUTBRc1YwRTFRa1FzUlVFMlFrTXNTVUUzUWtRc1EwRTJRazBzVlVGQlV5eE5RVUZVTEVWQlFXbENPenRCUVVWeVFpeHRRa0ZCVHl4TlFVRk5MRkZCUVU0c1EwRkJaU3hWUVVGbUxFTkJRVEJDTEUxQlFURkNMRU5CUVZBN1FVRkRSQ3hYUVdoRFJDeEZRV2xEUXl4SlFXcERSQ3hEUVdsRFRTeFZRVUZUTEZkQlFWUXNSVUZCYzBJN08wRkJSVEZDTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3d3UkVGQllpeEZRVUY1UlN4WFFVRjZSVHM3T3p0QlFVbEJMREpDUVVGbExGZEJRV1k3UVVGRFFTeHRRa0ZCVHl4WFFVRlFPMEZCUTBRc1YwRjZRMFFzUlVFd1EwTXNTMEV4UTBRc1EwRXdRMDhzVlVGQlV5eE5RVUZVTEVWQlFXbENPMEZCUTNSQ0xHOUNRVUZSTEVsQlFWSXNRMEZCWVN3clEwRkJZaXhGUVVFNFJDeE5RVUU1UkRzN096czdRVUZMUVN4blFrRkJTU3hWUVVGVkxFMUJRVTBzWTBGQlRpeERRVUZ4UWl4aFFVRnlRaXhGUVVGa08wRkJRMEVzYjBKQlFWRXNWMEZCVWl4RFFVRnZRaXhIUVVGd1FpeEZRVUY1UWl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVF5eHZRa0ZCVFN4VlFVRk9MRU5CUVdsQ0xGZEJRV3BDTEVOQlFUWkNMRWRCUVRkQ08wRkJRMFFzWVVGR1JEczdRVUZKUVN4dFFrRkJUeXhQUVVGUU8wRkJRMFFzVjBGMFJFUXNSVUYxUkVNc1NVRjJSRVFzUTBGMVJFMHNWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM1JDTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3cyUTBGQllpeEZRVUUwUkN4UFFVRTFSQ3hGUVVGeFJTeFpRVUZ5UlN4RlFVRnRSaXhOUVVGdVJqczdRVUZGUVN3eVFrRkJaU3hQUVVGbU96czdRVUZIUVN4dFFrRkJUeXhOUVVGTkxGRkJRVTRzUTBGQlpTeFpRVUZtTEVOQlFUUkNMRmxCUVRWQ0xFVkJRVEJETEUxQlFURkRMRU5CUVZBN1FVRkRSQ3hYUVRsRVJDeEZRU3RFUXl4SlFTOUVSQ3hEUVN0RVRTeFZRVUZUTEcxQ1FVRlVMRVZCUVRoQ096dEJRVVZzUXl4dlFrRkJVU3hKUVVGU0xFTkJRV0VzZFVOQlFXSXNSVUZCYzBRc2JVSkJRWFJFT3pzN08wRkJTVUVzYlVOQlFYVkNMRzFDUVVGMlFqczdPMEZCUjBFc1owSkJRVWtzWjBKQlFXZENMRVZCUVhCQ08wRkJRMEVzWjBKQlFVa3NRMEZCUXl4M1FrRkJXU3huUWtGQlowSXNZVUZCTlVJc1EwRkJUQ3hGUVVGcFJEdEJRVU12UXl4clFrRkJTVHRCUVVOR0xHZERRVUZuUWl4elFrRkJZeXhGUVVGa0xFVkJRV3RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMR2RDUVVGblFpeGhRVUV6UWl4RFFVRnNRaXhEUVVGb1FqdEJRVU5FTEdWQlJrUXNRMEZGUlN4UFFVRlBMRU5CUVZBc1JVRkJWVHRCUVVOV0xHZERRVUZuUWl4blFrRkJaMElzWVVGQmFFTTdRVUZEUkR0QlFVTkdPenRCUVVWRUxEQkNRVUZqTEZWQlFXUXNSMEZCTWtJc1RVRkJUU3hWUVVGcVF6czdPMEZCUjBFc2JVSkJRVThzWVVGQllTeGxRVUZpTEVOQlFUWkNMRzFDUVVGdFFpeFZRVUZvUkN4RlFVRTBSQ3h0UWtGQk5VUXNSVUZCYVVZc1lVRkJha1lzUTBGQlVEdEJRVU5FTEZkQmNrWkVMRVZCYzBaRExFbEJkRVpFTEVOQmMwWk5MRlZCUVZNc2NVSkJRVlFzUlVGQlowTTdRVUZEY0VNc2IwSkJRVkVzU1VGQlVpeERRVUZoTEdsRVFVRmlMRVZCUVdkRkxIRkNRVUZvUlRzN096czdRVUZMUVN4clFrRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xHOUNRVUUzUWl4RlFVRnRSQ3hWUVVGVExFZEJRVlFzUlVGQll6dEJRVU12UkN3eVFrRkJZU3hYUVVGaUxFTkJRWGxDTEVkQlFYcENPMEZCUTBRc1lVRkdSRHM3T3pzN1FVRlBRU3huUWtGQlNTeFBRVUZQTzBGQlExUXNiVU5CUVhGQ0xHOUNRVVJhTzBGQlJWUXNjMEpCUVZFN1FVRkdReXhoUVVGWU96dEJRVXRCTEc5Q1FVRlJMRWxCUVZJN1FVRkRRU3h2UWtGQlVTeEpRVUZTTEVOQlFXRXNkVVJCUVdJN1FVRkZSQ3hYUVROSFJDeEZRVFJIUXl4TFFUVkhSQ3hEUVRSSFR5eFhRVFZIVUR0QlFUaEhSQ3hUUVhKSlJEdEJRWFZKUkN4UFFUVktUU3hEUVVGUU8wRkJPRXBFT3pzN096czdPenM3YVVOQlRWa3NWeXhGUVVGaE96dEJRVVY0UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEVOQlFVTXNWMEZCVEN4RlFVRnJRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhGRlFVRldMRU5CUVU0N08wRkJSV3hDTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXl4WlFVRkpMRk5CUVZNc2MwSkJRVlVzVjBGQlZpeEZRVUYxUWl4TlFVRndRenM3UVVGRlFTeFpRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2JVSkJRVk1zVjBGQlZEdEJRVU5FT3p0QlFVVkVMRmxCUVVrc2MwSkJRVW83UVVGRFFTeFpRVUZKTEhsQ1FVRktPMEZCUTBFc1dVRkJTU3cwUWtGQlNqdEJRVU5CTEZsQlFVa3NORUpCUVVvN08wRkJSVUVzV1VGQlNTeGpRVUZqTEZOQlFXUXNWMEZCWXl4RFFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRGFrTXNhMEpCUVZFc1MwRkJVaXhEUVVGakxEaERRVUZrTEVWQlFUaEVMRTFCUVRsRU8wRkJRMEVzYVVKQlFVOHNUVUZCVUR0QlFVTkVMRk5CU0VRN096dEJRVTFCTEdkQ1FVRlJMRWxCUVZJc1EwRkJZU3h2UlVGQllqdEJRVU5CTEdkQ1FVRlJMRWxCUVZJc1EwRkJZU3h2UkVGQllpeEZRVUZ0UlN4TlFVRnVSVHRCUVVOQkxHVkJRVThzVFVGQlRTeFJRVUZPTEVOQlFXVXNaMEpCUVdZc1EwRkJaME1zVFVGQmFFTXNSVUZCZDBNc1NVRkJlRU1zUTBGQk5rTXNWVUZCVXl4clFrRkJWQ3hGUVVFMlFqczdRVUZGTDBVc2EwSkJRVkVzU1VGQlVpeERRVUZoTERCQ1FVRmlMRVZCUVhsRExHdENRVUY2UXpzN096czdRVUZMUVN4alFVRkpMRmRCUVZjN1FVRkRZaXhuUTBGQmIwSXNhMEpCUkZBN1FVRkZZaXh2UWtGQlVUdEJRVVpMTEZkQlFXWTdPMEZCUzBFc2EwSkJRVkVzVVVGQlVqdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUkVGQllqdEJRVU5FTEZOQlpFMHNSVUZsVGl4TFFXWk5MRU5CWlVFc1ZVRkJVeXhOUVVGVUxFVkJRV2xDT3pzN1FVRkhkRUlzYTBKQlFWRXNTVUZCVWl4RFFVRmhMSGRDUVVGaUxFVkJRWFZETEUxQlFYWkRPenM3T3p0QlFVdEJMR2RDUVVGTkxHZENRVUZPTEVOQlFYVkNMSEZDUVVGMlFpeERRVUUyUXl4WFFVRTNReXhGUVVORExFbEJSRVFzUTBGRFRTeFZRVUZUTEdWQlFWUXNSVUZCTUVJN08wRkJSVGxDTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3h2UTBGQllpeEZRVUZ0UkN4bFFVRnVSRHM3TzBGQlIwRXNLMEpCUVcxQ0xHVkJRVzVDT3p0QlFVVkJMR2RDUVVGSkxHMUNRVUZ0UWl4blFrRkJaMElzWjBKQlFYWkRPenRCUVVWQkxHZENRVUZKTEhGQ1FVRnhRaXhuUWtGQmVrSXNSVUZCTWtNN1FVRkRla01zY1VKQlFVOHNaMEpCUVdkQ0xHRkJRWFpDTzBGQlEwUTdPenRCUVVkRUxHMUNRVUZQTEUxQlFVMHNaMEpCUVU0c1EwRkJkVUlzZFVKQlFYWkNMRU5CUVN0RExHZENRVUV2UXl4RFFVRlFPMEZCUTBRc1YwRm9Ra1FzUlVGcFFrTXNTMEZxUWtRc1EwRnBRazhzVjBGcVFsQXNSVUZyUWtNc1NVRnNRa1FzUTBGclFrMHNWVUZCVXl4aFFVRlVMRVZCUVhkQ08wRkJRelZDTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3g1UTBGQllpeEZRVUYzUkN4aFFVRjRSRHM3T3p0QlFVbEJMR3REUVVGelFpeGhRVUYwUWpzN08wRkJSMEVzWjBKQlFVa3NVMEZCVXl4SlFVRmlPMEZCUTBFc2JVSkJRVThzVFVGQlVEdEJRVU5FTEZkQk5VSkVMRVZCTmtKRExFbEJOMEpFTEVOQk5rSk5MRlZCUVZNc1RVRkJWQ3hGUVVGcFFqczdRVUZGY2tJc2JVSkJRVThzVFVGQlRTeFJRVUZPTEVOQlFXVXNWVUZCWml4RFFVRXdRaXhOUVVFeFFpeERRVUZRTzBGQlEwUXNWMEZvUTBRc1JVRnBRME1zU1VGcVEwUXNRMEZwUTAwc1ZVRkJVeXhaUVVGVUxFVkJRWFZDT3p0QlFVVXpRaXh2UWtGQlVTeEpRVUZTTEVOQlFXRXNlVVJCUVdJc1JVRkJkMFVzV1VGQmVFVTdPMEZCUlVFc05FSkJRV2RDTEZsQlFXaENPMEZCUTBFc2JVSkJRVThzV1VGQlVEdEJRVU5FTEZkQmRrTkVMRVZCZDBORExFdEJlRU5FTEVOQmQwTlBMRlZCUVZNc1RVRkJWQ3hGUVVGcFFqdEJRVU4wUWl4dlFrRkJVU3hKUVVGU0xFTkJRV0VzT0VOQlFXSXNSVUZCTmtRc1RVRkJOMFE3T3pzN08wRkJTMEVzWjBKQlFVa3NWVUZCVlN4TlFVRk5MR05CUVU0c1EwRkJjVUlzWVVGQmNrSXNSVUZCWkR0QlFVTkJMRzlDUVVGUkxGZEJRVklzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tNc2IwSkJRVTBzVlVGQlRpeERRVUZwUWl4WFFVRnFRaXhEUVVFMlFpeEhRVUUzUWp0QlFVTkVMR0ZCUmtRN08wRkJTVUVzYlVKQlFVOHNUMEZCVUR0QlFVTkVMRmRCY0VSRUxFVkJjVVJETEVsQmNrUkVMRU5CY1VSTkxGVkJRVk1zVDBGQlZDeEZRVUZyUWp0QlFVTjBRaXh2UWtGQlVTeEpRVUZTTEVOQlFXRXNOa05CUVdJc1JVRkJORVFzVDBGQk5VUXNSVUZCY1VVc1dVRkJja1VzUlVGQmJVWXNUVUZCYmtZN08wRkJSVUVzTkVKQlFXZENMRTlCUVdoQ096czdRVUZIUVN4dFFrRkJUeXhOUVVGTkxGRkJRVTRzUTBGQlpTeG5Ra0ZCWml4RFFVRm5ReXhQUVVGb1F5eEZRVUY1UXl4TlFVRjZReXhEUVVGUU8wRkJRMFFzVjBFMVJFUXNSVUUyUkVNc1NVRTNSRVFzUTBFMlJFMHNWVUZCVXl4clFrRkJWQ3hGUVVFMlFqczdRVUZGYWtNc2IwSkJRVkVzU1VGQlVpeERRVUZoTEhWRFFVRmlMRVZCUVhORUxHdENRVUYwUkRzN096dEJRVWxCTEd0RFFVRnpRaXhyUWtGQmRFSTdPenRCUVVkQkxHZENRVUZKTEdkQ1FVRm5RaXhGUVVGd1FqdEJRVU5CTEdkQ1FVRkpMRU5CUVVNc2QwSkJRVmtzYVVKQlFXbENMR0ZCUVRkQ0xFTkJRVXdzUlVGQmEwUTdRVUZEYUVRc2EwSkJRVWs3UVVGRFJpeG5RMEZCWjBJc2MwSkJRV01zUlVGQlpDeEZRVUZyUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhwUWtGQmFVSXNZVUZCTlVJc1EwRkJiRUlzUTBGQmFFSTdRVUZEUkN4bFFVWkVMRU5CUlVVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZpeG5RMEZCWjBJc2FVSkJRV2xDTEdGQlFXcERPMEZCUTBRN1FVRkRSanRCUVVORUxEQkNRVUZqTEZWQlFXUXNSMEZCTWtJc1RVRkJUU3hWUVVGcVF6czdPMEZCUjBFc2JVSkJRVThzWTBGQll5eGxRVUZrTEVOQlFUaENMRzlDUVVGdlFpeFZRVUZzUkN4RlFVRTRSQ3hyUWtGQk9VUXNSVUZCYTBZc1lVRkJiRVlzUTBGQlVEdEJRVU5FTEZkQmJFWkVMRVZCYlVaRExFbEJia1pFTEVOQmJVWk5MRlZCUVZNc2NVSkJRVlFzUlVGQlowTTdRVUZEY0VNc2IwSkJRVkVzU1VGQlVpeERRVUZoTEdsRVFVRmlMRVZCUVdkRkxIRkNRVUZvUlRzN096czdRVUZMUVN4clFrRkJUU3hWUVVGT0xFTkJRV2xDTEZkQlFXcENMRU5CUVRaQ0xHMUNRVUUzUWl4RlFVRnJSQ3hWUVVGVExFZEJRVlFzUlVGQll6dEJRVU01UkN3MFFrRkJZeXhYUVVGa0xFTkJRVEJDTEVkQlFURkNPMEZCUTBRc1lVRkdSRHM3T3pzN1FVRlBRU3huUWtGQlNTeFhRVUZYTzBGQlEySXNhME5CUVc5Q0xHMUNRVVJRTzBGQlJXSXNjMEpCUVZFN1FVRkdTeXhoUVVGbU96dEJRVXRCTEc5Q1FVRlJMRkZCUVZJN1FVRkRRU3h2UWtGQlVTeEpRVUZTTEVOQlFXRXNkVVJCUVdJN1FVRkZSQ3hYUVhoSFJDeEZRWGxIUXl4TFFYcEhSQ3hEUVhsSFR5eFhRWHBIVUR0QlFUSkhSQ3hUUVd4SlRTeERRVUZRTzBGQmIwbEVMRTlCZWtwTkxFTkJRVkE3UVVFeVNrUTdPenM3T3pzN096dHRRMEZOWXl4SExFVkJRVXM3TzBGQlJXNUNPenM3T3pzN096czdhMEpCU1Zrc1V6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdTVU53Y0VKVUxHZENPenM3T3pzN096czdPenM3UVVGWFNpdzBRa0ZCV1N4SFFVRmFMRVZCUVdsQ0xFZEJRV3BDTEVWQlFYTkNPMEZCUVVFN08wRkJRM0JDTEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hIUVVGaU8wRkJRMFE3T3pzN096czdPenM3T3pzN096czdPenN5UWtGalRTeE5MRVZCUVZFc1RTeEZRVUZSTEUwc1JVRkJVVHRCUVVNM1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN08wRkJSMEVzVlVGQlNTeE5RVUZOTzBGQlExSXNZMEZCVFN4UlFVUkZMRVZCUTFFc1RVRkJUU3hOUVVGTkxFbEJSSEJDTEVWQlF6QkNMRWxCUVVrc2RVSkJRWFZDTEUxQlFYWkNMRWRCUVdkRExEUkNRVVE1UkR0QlFVVlNMR05CUVUwc1JVRkJSU3hSUVVGUkxFMUJRVllzUlVGQmEwSXNUMEZCVHl4RlFVRkZMRkZCUVZFc1RVRkJWaXhGUVVGNlFqdEJRVVpGTEU5QlFWWTdPMEZCUzBFc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ08wRkJRM1JETEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzUjBGQmRrSXNSVUZCTkVJc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGNrTXNZMEZCU1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFdEJRVzlDTEVkQlFYaENMRVZCUVRaQ08wRkJRek5DTEc5Q1FVRlJMRTFCUVUwc1NVRkJUaXhEUVVGWExFdEJRVmdzUTBGQmFVSXNVMEZCZWtJN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFRDeHRRa0ZCVHl4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGc1FqdEJRVU5FTzBGQlEwWXNVMEZPUkR0QlFVOUVMRTlCVWswc1EwRkJVRHRCUVZORU96czdkMEpCTVVKVE8wRkJRVVVzWVVGQlR5eExRVUZMTEVsQlFWbzdRVUZCYlVJN096czdPMnRDUVRaQ2JFSXNaMEk3T3pzN096czdPenM3T3pzN096czdPenRCUTNwRlpqczdRVUZEUVRzN096czdPMGxCUlUwc1l6dEJRVVZLTERCQ1FVRlpMRTFCUVZvc1JVRkJiMElzUjBGQmNFSXNSVUZCZVVJc1UwRkJla0lzUlVGQmIwTTdRVUZCUVRzN1FVRkRiRU1zVVVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEUxQlFXaENPMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzUjBGQllqdEJRVU5CTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhUUVVGdVFqczdRVUZGUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hQUVVGUExFbEJRWEJDTzBGQlEwRXNWVUZCVFN4alFVRk9MRWRCUVhWQ0xFVkJRWFpDTzBGQlEwUTdPenM3YjBOQlJXVXNUeXhGUVVGVE8wRkJRM1pDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGbEJRVTBzWTBGQlRpeERRVUZ4UWl4UFFVRnlRaXhKUVVGblF5d3lRa0ZCYVVJc1RVRkJUU3hKUVVGMlFpeEZRVUUyUWl4UFFVRTNRaXhGUVVGelF5eE5RVUZOTEVsQlFUVkRMRVZCUVd0RUxFMUJRVTBzVlVGQmVFUXNSVUZCYjBVc1MwRkJjRVVzUTBGQmFFTTdRVUZEUkRzN08zVkRRVVZyUWl4UExFVkJRVk03UVVGRE1VSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFRRVUZUTEhOQ1FVRlZMRTlCUVZZc1JVRkJiVUlzVFVGQmFFTTdRVUZEUVN4VlFVRkpMSEZDUVVGeFFpeE5RVUZOTEVsQlFVNHNSMEZCWVN4bFFVRjBRenM3UVVGRlFTeFZRVUZKTEdWQlFXVXNUVUZCVFN4alFVRk9MRU5CUVhGQ0xFOUJRWEpDTEVOQlFXNUNPMEZCUTBFc1ZVRkJTU3haUVVGS0xFVkJRV3RDT3p0QlFVVm9RaXhqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHZENRVUZOTEdGQlJHVXNSVUZEUVN4TlFVRk5MRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJSSEJDTEVWQlF6QkNMRWxCUVVrc2EwSkJSRGxDTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVlVGQlZTeE5RVUZOTEVsQlFXeENPMEZCUm1Vc1UwRkJka0k3T3pzN1FVRlBRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHZENRVUZOTEdGQlJHVXNSVUZEUVN4TlFVRk5MRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJSSEJDTEVWQlF6QkNMRWxCUVVrc2RVSkJRWFZDTEUxQlFYWkNMRWRCUVdkRExFdEJSRGxFTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVlVGQlZTeE5RVUZOTEVsQlFXeENMRVZCUVhkQ0xHMUNRVUZ0UWl4TlFVRk5MRlZCUVdwRU8wRkJSbVVzVTBGQmRrSTdPMEZCUzBFc2NVSkJRV0VzYVVKQlFXSTdRVUZEUVN4bFFVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeFBRVUZ5UWl4RFFVRlFPMEZCUTBRN1FVRkRSanM3T3pzN2EwSkJTVmtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1JHWTdPMEZCUTBFN096czdPenRKUVVWTkxHTTdRVUZGU2l3d1FrRkJXU3hOUVVGYUxFVkJRVzlDTEV0QlFYQkNMRVZCUVRKQ0xFZEJRVE5DTEVWQlFXZERPMEZCUVVFN08wRkJRemxDTEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4TlFVRm9RanRCUVVOQkxGVkJRVTBzVFVGQlRpeEhRVUZsTEV0QlFXWTdRVUZEUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hIUVVGaU96dEJRVVZCTEZWQlFVMHNTVUZCVGl4SFFVRmhMRTlCUVU4c1NVRkJjRUk3TzBGQlJVRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xITkNRVUZWTEV0QlFWWXNSVUZCYVVJc1RVRkJha003UVVGRFFTeFZRVUZOTEd0Q1FVRk9MRWRCUVRKQ0xFMUJRVTBzU1VGQlRpeEhRVUZoTEdWQlFYaERPenRCUVVWQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGVkJRVTBzVlVGQlRpeEhRVUZ0UWl4RlFVRnVRanRCUVVOQkxGVkJRVTBzYTBKQlFVNHNSMEZCTWtJc1JVRkJNMEk3TzBGQlJVRXNWVUZCVFN4VFFVRk9MRWRCUVd0Q0xFVkJRV3hDT3p0QlFVVkJMRlZCUVUwc2EwSkJRVTQ3UVVGRFJEczdPenQ1UTBGRmIwSTdRVUZEYmtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83T3p0QlFVZEJMRmxCUVUwc2NVSkJRVTRzUjBGQk9FSXNUVUZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeE5RVUZOTEd0Q1FVRTNRaXhGUVVGcFJDeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTjBSaXhuUWtGQlVTeEhRVUZTTEVOQlFWa3NUVUZCVFN4clFrRkJUaXhIUVVFeVFpeFJRVUYyUXl4RlFVRnBSQ3hIUVVGcVJEdEJRVU5CTEdkQ1FVRlJMRWxCUVVrc1NVRkJXanRCUVVORkxHVkJRVXNzVjBGQlREdEJRVUZyUWl4clFrRkJUU3hyUWtGQlRpeERRVUY1UWl4SFFVRjZRaXhGUVVFclFqdEJRVU5xUkN4bFFVRkxMR0ZCUVV3N1FVRkJiMElzYTBKQlFVMHNiMEpCUVU0c1EwRkJNa0lzUjBGQk0wSXNSVUZCYVVNN1FVRkRja1FzWlVGQlN5eFZRVUZNTzBGQlFXbENMR3RDUVVGTkxHbENRVUZPTEVOQlFYZENMRWRCUVhoQ0xFVkJRVGhDTzBGQlNHcEVPMEZCUzBRc1QwRlFOa0lzUTBGQk9VSTdPMEZCVTBFc1ZVRkJTU3haUVVGWkxFMUJRVTBzU1VGQlRpeEhRVUZoTEZWQlFUZENPMEZCUTBFc1dVRkJUU3hsUVVGT0xFZEJRWGRDTEUxQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzVTBGQmRrSXNSVUZCYTBNc1ZVRkJReXhIUVVGRUxFVkJRVk03TzBGQlJXcEZMR2RDUVVGUkxFZEJRVklzUTBGQldTeHZRa0ZCYjBJc1UwRkJjRUlzUjBGQlowTXNVVUZCTlVNc1JVRkJjMFFzUjBGQmRFUTdRVUZEUkN4UFFVaDFRaXhEUVVGNFFqdEJRVWxFT3pzN2QwTkJSVzFDTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZsQlFVMHNjVUpCUVU0c1EwRkJORUlzVFVGQk5VSTdPMEZCUlVFc1dVRkJUU3hsUVVGT0xFTkJRWE5DTEUxQlFYUkNPenRCUVVWQkxGbEJRVTBzYTBKQlFVNHNRMEZCZVVJc1QwRkJla0lzUTBGQmFVTXNWVUZCUXl4RlFVRkVMRVZCUVZFN1FVRkRka01zVjBGQlJ5eE5RVUZJTzBGQlEwUXNUMEZHUkRzN1FVRkpRU3d3UWtGQldTeE5RVUZOTEZOQlFXeENMRVZCUVRaQ0xFOUJRVGRDTEVOQlFYRkRMRlZCUVVNc1IwRkJSQ3hGUVVGVE8wRkJRelZETEdOQlFVMHNhMEpCUVU0c1EwRkJlVUlzUjBGQmVrSTdRVUZEUkN4UFFVWkVPenM3UVVGTFFTd3dRa0ZCV1N4TlFVRk5MR05CUVd4Q0xFVkJRV3RETEU5QlFXeERMRU5CUVRCRExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEycEVMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhwUWtGQk1VSTdRVUZEUkN4UFFVWkVPMEZCUjBRN096czdPenM3T3pzN2NVTkJUMmRDTEZNc1JVRkJWenRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN08wRkJSMEVzVlVGQlNTeHRRa0ZCYlVJN1FVRkRja0lzWTBGQlRTeFhRVVJsTEVWQlEwWXNUVUZCVFN4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVSc1FpeEZRVU4zUWl4SlFVRkpMSFZDUVVGMVFpeE5RVUZOTEU5QlFUZENMRWRCUVhWRExFdEJSRzVGTzBGQlJYSkNMR05CUVUwc1JVRkJSU3hYUVVGWExGTkJRV0lzUlVGQmQwSXNVVUZCVVN4TlFVRk5MRTFCUVhSRE8wRkJSbVVzVDBGQmRrSTdPMEZCUzBFc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVhGQ08wRkJRM1JETEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzWjBKQlFYWkNMRVZCUVhsRExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlEyeEVMR3RDUVVGUkxFZEJRVklzUTBGQldTeDNRMEZCV2l4RlFVRnpSQ3hMUVVGMFJEdEJRVU5CTEdOQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpeG5Ra0ZCU1N4aFFVRmhMRTFCUVUwc1NVRkJUaXhEUVVGWExGVkJRVmdzUTBGQmMwSXNUVUZCVFN4SlFVRTFRaXhGUVVGclF5eE5RVUZOTEUxQlFYaERMRU5CUVdwQ08wRkJRMEVzYTBKQlFVMHNVMEZCVGl4RFFVRm5RaXhWUVVGVkxFTkJRVllzUTBGQmFFSXNTVUZCWjBNc1ZVRkJhRU03UVVGRFFUdEJRVU5FTEZkQlNrUXNUVUZKVHp0QlFVTk1MRzFDUVVGUExIRkRRVUZ4UXl4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGMlJEdEJRVU5FTzBGQlEwWXNVMEZVUkR0QlFWVkVMRTlCV0Uwc1EwRkJVRHRCUVZsRU96czdPenM3T3pzN2RVTkJUV3RDTEU4c1JVRkJVenRCUVVNeFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3haUVVGTkxGTkJRVTRzUTBGQlowSXNUMEZCYUVJc1JVRkJlVUlzVFVGQmVrSTdRVUZEUVN4aFFVRlBMRTFCUVUwc1UwRkJUaXhEUVVGblFpeFBRVUZvUWl4RFFVRlFPenM3UVVGSFFTeFZRVUZKTEhGQ1FVRnhRanRCUVVOMlFpeGpRVUZOTEdGQlJHbENMRVZCUTBZc1RVRkJUU3hOUVVGTkxFOUJRVTRzUTBGQll5eEpRVVJzUWl4RlFVTjNRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRk5MRTlCUVRkQ0xFZEJRWFZETEV0QlJHNUZPMEZCUlhaQ0xHTkJRVTBzUlVGQlJTeFhRVUZYTEVOQlFVTXNUMEZCUkN4RFFVRmlMRVZCUVhkQ0xGRkJRVkVzVFVGQlRTeE5RVUYwUXp0QlFVWnBRaXhQUVVGNlFqczdRVUZMUVN4WlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEd0Q1FVRjJRanRCUVVORU96czdPenM3T3pzN08ybERRVTlaTEZNc1JVRkJWenRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3UVVGRGRFTXNXVUZCU1N4VlFVRlZMRTFCUVZZc1MwRkJjVUlzUTBGQmVrSXNSVUZCTkVJN1FVRkRNVUk3UVVGRFFUdEJRVU5FT3p0QlFVVkVMRmxCUVVrc1pVRkJaU3hOUVVGTkxFbEJRVTRzUjBGQllTeFpRVUZvUXp0QlFVTkJMR05CUVUwc1ZVRkJUaXhEUVVGcFFpeEpRVUZxUWl4RFFVRnpRaXhUUVVGMFFqczdPenM3T3pzN08wRkJWVUVzV1VGQlNTeG5Ra0ZCWjBJc1JVRkJjRUk3UVVGRFFTeHJRa0ZCVlN4UFFVRldMRU5CUVd0Q0xGVkJRVU1zUzBGQlJEdEJRVUZCTEdsQ1FVRlhMR05CUVdNc1NVRkJaQ3hEUVVGdFFpeGxRVUZsTEV0QlFXeERMRU5CUVZnN1FVRkJRU3hUUVVGc1FqczdPMEZCUjBFc1dVRkJTU3h0UWtGQmJVSTdRVUZEY2tJc1owSkJRVTBzVjBGRVpTeEZRVU5HTEUxQlFVMHNUVUZCVFN4UFFVRk9MRU5CUVdNc1NVRkViRUlzUlVGRGQwSXNTVUZCU1N4MVFrRkJkVUlzVFVGQlRTeFBRVUUzUWl4SFFVRjFReXhMUVVSdVJUdEJRVVZ5UWl4blFrRkJUU3hGUVVGRkxGZEJRVmNzWVVGQllpeEZRVUUwUWl4UlFVRlJMRTFCUVUwc1RVRkJNVU03UVVGR1pTeFRRVUYyUWpzN1FVRkxRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMR2RDUVVGMlFpeEZRVUY1UXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOc1JDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2NVTkJRVm9zUlVGQmJVUXNTMEZCYmtRN1FVRkRRU3hqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdPenRCUVVjelFpd3dRa0ZCWXl4UFFVRmtMRU5CUVhOQ0xGVkJRVU1zVVVGQlJDeEZRVUZqTzBGQlEyeERMR3RDUVVGSkxHZENRVUZuUWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEZGQlFYWkNMRVZCUVdsRExGVkJRVU1zUjBGQlJDeEZRVUZUT3p0QlFVVTFSQ3gzUWtGQlVTeEhRVUZTTEVOQlFWa3NiMEpCUVc5Q0xGRkJRWEJDTEVkQlFTdENMRkZCUVRORExFVkJRWEZFTEVkQlFYSkVPMEZCUTBRc1pVRkliVUlzUTBGQmNFSTdRVUZKUVN4dlFrRkJUU3hyUWtGQlRpeERRVUY1UWl4SlFVRjZRaXhEUVVFNFFpeGhRVUU1UWpzN1FVRkZRU3hyUWtGQlNTeGpRVUZqTEUxQlFVMHNTVUZCVGl4RFFVRlhMRlZCUVZnc1EwRkJjMElzVVVGQmRFSXNSVUZCWjBNc1RVRkJUU3hOUVVGMFF5eERRVUZzUWp0QlFVTkJMRzlDUVVGTkxHdENRVUZPTEVOQlFYbENMRWxCUVhwQ0xFTkJRVGhDTEZkQlFUbENPMEZCUTBRc1lVRlVSRHM3UVVGWFFUdEJRVU5FTEZkQlprUXNUVUZsVHp0QlFVTk1MRzFDUVVGUExIRkRRVUZ4UXl4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGMlJEdEJRVU5FTzBGQlEwWXNVMEZ3UWtRN1FVRnhRa1FzVDBFdlEwMHNRMEZCVUR0QlFXZEVSRHM3T3poQ1FVVlJPMEZCUTFBc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFZRVUZKTEZOQlFWTXNjMEpCUVZVc1RVRkJUU3hOUVVGb1FpeEZRVUYzUWl4TlFVRnlRenM3TzBGQlIwRXNXVUZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4alFVRk5MRkZCUkdVc1JVRkRUQ3hOUVVGTkxFMUJRVTBzYTBKQlJGQXNSVUZETWtJc1NVRkJTU3hOUVVGTkxFbEJRVTRzUjBGQllUdEJRVVExUXl4UFFVRjJRanM3TzBGQlMwRXNXVUZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4alFVRk5MRkZCUkdVc1JVRkRUQ3hOUVVGTkxFMUJRVTBzVDBGQlRpeERRVUZqTEVsQlJHWXNSVUZEY1VJc1NVRkJTU3gxUWtGQmRVSXNUVUZCZGtJc1IwRkJaME1zTkVKQlJIcEVPMEZCUlhKQ0xHTkJRVTBzUlVGQlJTeFZRVUZWTEUxQlFVMHNTVUZCYkVJc1JVRkJkMElzYlVKQlFXMUNMRTFCUVUwc1ZVRkJha1E3UVVGR1pTeFBRVUYyUWpzN1FVRkxRU3haUVVGTkxHbENRVUZPTzBGQlEwRXNZVUZCVHl4TlFVRk5MRTlCUVU0c1EwRkJZeXhWUVVGa0xFTkJRWGxDTEUxQlFVMHNTVUZCTDBJc1EwRkJVRHRCUVVORU96czdjME5CUldsQ0xFY3NSVUZCU3p0QlFVTnlRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMRmxCUVVrc1NVRkJTU3hGUVVSaExFVkJRMVFzVFVGQlRTeFZRVVJITEVWQlExTXNUVUZCVFN4SlFVRkpMRVZCUkc1Q0xFVkJRM1ZDTEVsQlFVa3NUVUZCVFN4SlFVUnFRenRCUVVWeVFpeGpRVUZOTEVWQlFVVXNUVUZCVFN4SlFVRkpMRWxCUVVvc1EwRkJVeXhKUVVGcVFpeEZRVUYxUWl4UlFVRlJMRWxCUVVrc1NVRkJia003UVVGR1pTeFBRVUYyUWp0QlFVbEVPenM3T3pzN2RVTkJSMnRDTEVjc1JVRkJTenRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1lVRkJZU3hKUVVGSkxFbEJRVW9zUTBGQlV5eFZRVUV4UWpzN08wRkJSMEVzVlVGQlNTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1ZVRkJja0lzUTBGQlNpeEZRVUZ6UXp0QlFVTndReXhaUVVGSkxGZEJRVmM3UVVGRFlpeGpRVUZKTEVsQlFVa3NSVUZFU3l4RlFVTkVMRTFCUVUwc1ZVRkVUQ3hGUVVOcFFpeE5RVUZOTEVsQlFVa3NSVUZFTTBJc1JVRkRLMElzU1VGQlNTeFZRVVJ1UXp0QlFVVmlMR2RDUVVGTkxFVkJRVVVzVFVGQlRTeEhRVUZTTEVWQlFXRXNUVUZCVFN4MVFrRkJkVUlzVFVGQlRTeEpRVUUzUWl4SFFVRnZReXhMUVVGd1F5eEhRVUUyUXl4VlFVRTNReXhIUVVFd1JDeHRRa0ZCTjBVN1FVRkdUeXhUUVVGbU96dEJRVXRCTEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzVVVGQmRrSTdRVUZEUVR0QlFVTkVPenM3TzBGQlNVUXNWVUZCU1N4UFFVRlBMRk5CUVZnN08wRkJSVUVzVlVGQlNTeFRRVUZUTEZOQlFXSXNSVUZCZDBJN08wRkJSWFJDTEZsQlFVa3NZVUZCWVR0QlFVTm1MR2RDUVVGTkxGTkJSRk1zUlVGRFJTeE5RVUZOTEUxQlFVMHNTVUZFWkN4RlFVTnZRaXhKUVVGSkxFMUJRVTBzVFVGRU9VSTdRVUZGWml4blFrRkJUU3hGUVVGRkxFMUJRVTBzU1VGQlNTeEpRVUZhTEVWQlFXdENMRTFCUVUwc1ZVRkJlRUlzUlVGQmIwTXNTVUZCU1N4TlFVRk5MRWxCUVRsRExFVkJRVzlFTEZWQlFWVXNTVUZCU1N4SlFVRktMRU5CUVZNc1VVRkJka1U3UVVGR1V5eFRRVUZxUWpzN1FVRkxRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMRlZCUVhaQ0xFVkJRVzFETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUXpWRExHdENRVUZSTEVkQlFWSXNRMEZCV1N4cFFrRkJXaXhGUVVFclFpeExRVUV2UWp0QlFVTkJMR05CUVVrc1RVRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWl4clFrRkJUU3hqUVVGT0xFTkJRWEZDTEZWQlFYSkNMRWxCUVcxRExESkNRVUZwUWl4TlFVRk5MRWxCUVhaQ0xFVkJRVFpDTEUxQlFVMHNUVUZCYmtNc1JVRkJNa01zVFVGQlRTeEpRVUZxUkN4RlFVRjFSQ3hOUVVGTkxGVkJRVGRFTEVWQlFYbEZMRWxCUVhwRkxFTkJRVzVETzBGQlEwUTdPenRCUVVkRUxHZENRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEdkQ1FVRkpMRWxCUVVrc1JVRkVZU3hGUVVOVUxFMUJRVTBzVlVGRVJ5eEZRVU5UTEUxQlFVMHNTVUZCU1N4RlFVUnVRaXhGUVVOMVFpeEpRVUZKTEVsQlFVa3NTVUZFTDBJN1FVRkZja0lzYTBKQlFVMHNUVUZCVFR0QlFVWlRMRmRCUVhaQ08wRkJTMFFzVTBGYVJEdEJRV0ZFTzBGQlJVWTdPenM3T3p0NVEwRkhiMElzUnl4RlFVRkxPMEZCUTNoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRWxCUVVrc1NVRkJTaXhEUVVGVExGVkJRVEZDT3p0QlFVVkJMRlZCUVVrc1pVRkJaU3hOUVVGTkxHTkJRVTRzUTBGQmNVSXNWVUZCY2tJc1EwRkJia0k3UVVGRFFTeFZRVUZKTEZsQlFVb3NSVUZCYTBJN1FVRkRhRUlzY1VKQlFXRXNhVUpCUVdJN1FVRkRRU3hsUVVGUExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4VlFVRnlRaXhEUVVGUU96czdRVUZIUkR0QlFVVkdPenM3T3p0clFrRkpXU3hqT3pzN096czdPenM3T3pzN096czdPenM3T3p0SlEzSlJWQ3haTzBGQlJVb3NkMEpCUVZrc1IwRkJXaXhGUVVGcFFpeExRVUZxUWl4RlFVRjNRaXhIUVVGNFFpeEZRVUUyUWl4VFFVRTNRaXhGUVVGM1F5eFZRVUY0UXl4RlFVRnZSRHRCUVVGQk96dEJRVU5zUkN4UlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGRkJRVWtzWlVGQlpTeE5RVUZOTEZsQlFYcENPMEZCUTBFc1VVRkJTU3haUVVGWkxFMUJRVTBzVlVGQmRFSTdPenRCUVVkQkxGVkJRVTBzWlVGQlRpeEhRVUYzUWl4SlFVRkpMRmRCUVVvc1EwRkJaMElzVTBGQmFFSXNSVUZCTWtJc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRE1VUXNWVUZCU1N4SlFVRkpMRWxCUVVvc1MwRkJZU3hSUVVGcVFpeEZRVUV5UWp0QlFVTjZRaXhuUWtGQlVTeEhRVUZTTEVOQlFWa3NkVUpCUVZvc1JVRkJjVU1zUjBGQmNrTTdPenRCUVVkQkxGbEJRVWtzZVVKQlFYbENPMEZCUXpOQ0xHZENRVUZOTEZGQlJIRkNMRVZCUTFnc1RVRkJUU3hKUVVGSkxFbEJSRU1zUlVGRFN5eEpRVUZKTEV0QlJGUTdRVUZGTTBJc1owSkJRVTBzUlVGQlJTeFZRVUZWTEVkQlFWbzdRVUZHY1VJc1UwRkJOMEk3T3p0QlFVMUJMRmxCUVVrc1YwRkJTaXhEUVVGblFpeHpRa0ZCYUVJc1JVRkJkME1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYWtRc2EwSkJRVkVzUjBGQlVpeERRVUZaTERaQ1FVRmFMRVZCUVRKRExFdEJRVE5ETzBGQlEwRXNZMEZCU1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFdEJRVzlDTEVkQlFYaENMRVZCUVRaQ08wRkJRek5DTEd0Q1FVRk5MR2xDUVVGT08wRkJRMFE3UVVGRFJpeFRRVXhFTzBGQlRVUTdRVUZEUml4TFFXeENkVUlzUTBGQmVFSTdPenRCUVhGQ1FTeFJRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3haUVVGTkxHVkJRVTRzUjBGQmQwSXNTVUZCU1N4VlFVRktMRU5CUVdVc1UwRkJaaXhEUVVGNFFqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVUwc1pVRkJUaXhIUVVGM1FpeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRVZCUVRCQ0xFdEJRVEZDTEVOQlFYaENPMEZCUTBRN08wRkJSVVFzVlVGQlRTeHJRa0ZCVGl4SFFVRXlRaXhGUVVFelFqdEJRVU5CTEdOQlFWVXNUMEZCVml4RFFVRnJRaXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU16UWl4VlFVRkpMRlZCUVZVc1pVRkJaU3hMUVVFM1FqczdPMEZCUjBFc1ZVRkJTU3hyUWtGQmEwSXNTVUZCU1N4VlFVRktMRU5CUVdVc1QwRkJaaXhEUVVGMFFqdEJRVU5CTEZsQlFVMHNhMEpCUVU0c1EwRkJlVUlzU1VGQmVrSXNRMEZCT0VJc1pVRkJPVUk3T3p0QlFVZEJMRlZCUVVrc1EwRkJReXhWUVVGTUxFVkJRV2xDTzBGQlEyWXNXVUZCU1N4alFVRmpMRWxCUVVrc1ZVRkJTaXhEUVVGbExFOUJRV1lzUlVGQmQwSXNTMEZCZUVJc1EwRkJiRUk3UVVGRFFTeGpRVUZOTEd0Q1FVRk9MRU5CUVhsQ0xFbEJRWHBDTEVOQlFUaENMRmRCUVRsQ08wRkJRMFE3UVVGRFJpeExRVnBFTzBGQllVUTdPenM3ZDBOQlJXMUNPMEZCUTJ4Q0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmxCUVUwc1pVRkJUaXhEUVVGelFpeE5RVUYwUWpzN1FVRkZRU3haUVVGTkxHVkJRVTRzUTBGQmMwSXNUVUZCZEVJN08wRkJSVUVzV1VGQlRTeHJRa0ZCVGl4RFFVRjVRaXhQUVVGNlFpeERRVUZwUXl4VlFVRkRMRTlCUVVRc1JVRkJZVHRCUVVNMVF5eG5Ra0ZCVVN4TlFVRlNPMEZCUTBRc1QwRkdSRHRCUVVkRU96czdPenRyUWtGSldTeFpPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE0wTm1PenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJSVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRk5UU3hqT3pzN096czdPenM3TzBGQlYwb3NNRUpCUVZrc1ZVRkJXaXhGUVVGM1FpeEhRVUY0UWl4RlFVRTJRaXhSUVVFM1FpeEZRVUYxUXl4UFFVRjJReXhGUVVGblJDeFRRVUZvUkN4RlFVRXlSRHRCUVVGQk96dEJRVU42UkN4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SFFVRmlPMEZCUTBFc1ZVRkJUU3hUUVVGT0xFZEJRV3RDTEZGQlFXeENPMEZCUTBFc1ZVRkJUU3hSUVVGT0xFZEJRV2xDTEU5QlFXcENPenM3UVVGSFFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4aFFVRmhMRXRCUVRGQ08wRkJRMEVzVlVGQlRTeFZRVUZPTEVkQlFXMUNMR0ZCUVdFc2IwSkJRV2hET3p0QlFVVkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWp0QlFVTkJMRlZCUVUwc1ZVRkJUaXhIUVVGdFFpeEZRVUZ1UWpzN08wRkJSMEVzVlVGQlRTeFBRVUZPTEVkQlFXZENMSE5DUVVGVkxGVkJRVllzUlVGQmMwSXNUVUZCZEVNN08wRkJSVUVzVlVGQlRTeEhRVUZPTEVkQlFWa3NiVU5CUVcxQ0xFdEJRVzVDTEVWQlFUQkNMRVZCUVRGQ0xFTkJRVm83TzBGQlJVRXNVVUZCU1N4VFFVRktMRVZCUVdVN1FVRkRZaXhaUVVGTkxGVkJRVTRzUjBGQmJVSXNVMEZCYmtJN1FVRkRSQ3hMUVVaRUxFMUJSVTg3UVVGRFRDeFpRVUZOTEZWQlFVNHNSMEZCYlVJc0swSkJRWEZDTEUxQlFVMHNWVUZCTTBJc1JVRkJkVU1zUjBGQmRrTXNRMEZCYmtJN1FVRkRSRHM3UVVGRlJDeFJRVUZKTEZkQlFVb3NRMEZCWjBJc1RVRkJUU3hKUVVGMFFpeEZRVUUwUWl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOdVF5eGpRVUZSTEVkQlFWSXNRMEZCV1N4elFrRkJXaXhGUVVGdlF5eEhRVUZ3UXp0QlFVTkJMR05CUVZFc1NVRkJTU3hKUVVGYU8wRkJRMFVzWVVGQlN5eFJRVUZNTzBGQlFXVXNaMEpCUVUwc1UwRkJUaXhEUVVGblFpeEhRVUZvUWl4RlFVRnpRanRCUVVOeVF5eGhRVUZMTEZGQlFVdzdRVUZCWlN4blFrRkJUU3hUUVVGT0xFTkJRV2RDTEVkQlFXaENMRVZCUVhOQ08wRkJRM0pETEdGQlFVc3NWMEZCVER0QlFVRnJRaXhuUWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhIUVVGNFFpeEZRVUU0UWp0QlFVTm9SQ3hoUVVGTExHRkJRVXc3UVVGQmIwSXNaMEpCUVUwc2JVSkJRVTRzUTBGQk1FSXNSMEZCTVVJc1JVRkJaME03UVVGS2RFUTdRVUZOUkN4TFFWSkVPMEZCVTBRN096czdPenM3T0VKQlMxTXNSeXhGUVVGTE96dEJRVVZpTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hSUVVGUkxFbEJRVWtzU1VGQmFFSTdRVUZEUVN4VlFVRkpMRk5CUVZNc2MwSkJRVlVzU1VGQlNTeEpRVUZrTEVWQlFXOUNMRTFCUVdwRE96dEJRVVZCTEZWQlFVa3NTVUZCU1N4SlFVRktMRU5CUVZNc1VVRkJZaXhGUVVGMVFqdEJRVU55UWl4alFVRk5MRlZCUVU0c1EwRkJhVUlzUjBGQmFrSXNSVUZCYzBJc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQkwwSTdRVUZEUVR0QlFVTkVPenM3UVVGSFJDeFpRVUZOTEZGQlFVNHNRMEZCWlN4MVFrRkJaaXhEUVVGMVF5eEpRVUZKTEVsQlFVb3NRMEZCVXl4TlFVRm9SQ3hGUVVGM1JDeEpRVUY0UkN4RFFVRTJSQ3hWUVVGRExGVkJRVVFzUlVGQlowSTdPMEZCUlRORkxGbEJRVWtzWVVGQllTeFhRVUZYTEdGQlFWZ3NRMEZCZVVJc1ZVRkJla0lzUTBGQmIwTXNWVUZCY2tRN1FVRkRRU3haUVVGSkxGTkJRVk1zVjBGQlZ5eE5RVUZZTEVkQlFXOUNMRmRCUVZjc1RVRkJXQ3hEUVVGclFpeFJRVUYwUXl4SFFVRnBSQ3hWUVVFNVJEdEJRVU5CTEZsQlFVa3NXVUZCV1N4WFFVRlhMRkZCUVZnc1IwRkJjMElzVjBGQlZ5eFJRVUZZTEVOQlFXOUNMRkZCUVRGRExFZEJRWEZFTEVWQlFYSkZPenRCUVVWQkxHZENRVUZSTEVkQlFWSXNRMEZCV1N4VlFVRmFMRVZCUVhkQ0xFMUJRWGhDT3pzN1FVRkhRU3huUWtGQlVTeEhRVUZTTEVOQlFWa3NPRUpCUVZvN1FVRkRRU3haUVVGSk8wRkJRMFlzWTBGQlNTeE5RVUZOTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVc1Q08wRkJRMEVzWTBGQlNTeFRRVUZUTEZkQlFWY3NZVUZCV0N4RFFVRjVRaXhWUVVGMFF6dEJRVU5CTEdOQlFVa3NVMEZCVXl4aFFVRkpMR2RDUVVGS0xFTkJRWEZDTEVkQlFYSkNMRVZCUVRCQ0xFMUJRVEZDTEVOQlFXSTdPenRCUVVkQkxHTkJRVWtzUTBGQlF5eFBRVUZQTEV0QlFWb3NSVUZCYlVJN1FVRkRha0lzYjBKQlFWRXNTVUZCVWl4RFFVRmhMREpDUVVGaUxFVkJRVEJETEhsQ1FVRmxMRTlCUVU4c1RVRkJkRUlzUlVGQk9FSXNTVUZCT1VJc1JVRkJiME1zUTBGQmNFTXNRMEZCTVVNN1FVRkRRU3h2UWtGQlVTeExRVUZTTEVOQlFXTXNVMEZCWkN4RlFVRjVRaXg1UWtGQlpTeEhRVUZtTEVWQlFXOUNMRWxCUVhCQ0xFVkJRVEJDTEVOQlFURkNMRU5CUVhwQ0xFVkJRWFZFTEdGQlFYWkVMRVZCUVhORkxIbENRVUZsTEUxQlFXWXNSVUZCZFVJc1NVRkJka0lzUlVGQk5rSXNRMEZCTjBJc1EwRkJkRVU3T3pzN1FVRkpSQ3hYUVU1RUxFMUJUVTg3UVVGRFRDeHpRa0ZCVVN4SFFVRlNMRU5CUVZrc05rSkJRVm9zUlVGQk1rTXNUVUZCTTBNN1FVRkRSRHRCUVVOR0xGTkJaa1FzUTBGbFJTeFBRVUZQTEVOQlFWQXNSVUZCVlR0QlFVTldMR3RDUVVGUkxFbEJRVklzUTBGQllTeHBRMEZCWWl4RlFVRm5SQ3hEUVVGb1JEdEJRVU5FT3pzN1FVRkhSQ3hqUVVGTkxGVkJRVTRzUTBGQmFVSXNUVUZCYWtJc1EwRkJkMElzVFVGQmVFSXNSVUZCWjBNc1RVRkJhRU1zUlVGQmQwTXNRMEZCZUVNc1JVRkJNa01zU1VGQk0wTXNRMEZCWjBRc1ZVRkJReXhUUVVGRUxFVkJRV1U3UVVGRE4wUXNZMEZCU1N4VFFVRlRMRlZCUVZVc1EwRkJWaXhEUVVGaU96dEJRVVZCTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h0UWtGQldpeEZRVUZwUXl4VFFVRnFRenM3UVVGRlFTeGpRVUZKTEd0Q1FVRnJRaXhUUVVGVExHVkJRUzlDT3p0QlFVVkJMR3RDUVVGUkxFZEJRVklzUTBGQldTeHJRa0ZCV2l4RlFVRm5ReXhsUVVGb1F6czdPMEZCUjBFc1owSkJRVTBzVTBGQlRpeERRVUZuUWl4clFrRkJhRUlzUTBGQmJVTXNTVUZCU1N4SlFVRktMRU5CUVZNc1MwRkJWQ3hEUVVGbExFbEJRV3hFTEVWQlFYZEVMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVlFzUTBGQlpTeE5RVUYyUlN4RlFVRXJSU3hOUVVFdlJTeEZRVUYxUml4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGVUxFTkJRV1VzVVVGQmRFY3NSVUZCWjBnc1NVRkJTU3hKUVVGS0xFTkJRVk1zVTBGQmVrZ3NSVUZCYjBrc1NVRkJjRWtzUTBGQmVVa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q08wRkJRM3BLTEc5Q1FVRlJMRWRCUVZJc1EwRkJXU3h2UTBGQldpeEZRVUZyUkN4UFFVRnNSRHM3TzBGQlIwRXNaMEpCUVVrc1YwRkJWeXcyUWtGQmJVSXNTMEZCYmtJc1JVRkJNRUlzUzBGQk1VSXNSVUZCYVVNc1RVRkJha01zUTBGQlpqdEJRVU5CTEhGQ1FVRlRMR2RDUVVGVUxFTkJRVEJDTEVOQlFVTXNUVUZCUkN4RlFVRlJMR1ZCUVZJc1EwRkJNVUlzUlVGQmIwUXNTVUZCY0VRc1EwRkJlVVFzV1VGQlRUdEJRVU0zUkN4MVFrRkJVeXhaUVVGVUxFTkJRWE5DTEZOQlFYUkNMRVZCUVdsRExFbEJRV3BETEVOQlFYTkRMRmxCUVUwN1FVRkRNVU1zYzBKQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGcVFpeEpRVUV5UWl4UlFVRXpRanM3TzBGQlIwRXNjMEpCUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSTdRVUZEY2tJc2MwSkJRVWtzU1VGQlNTeEZRVVJoTEVWQlExUXNUVUZCVFN4VlFVUkhMRVZCUTFNc1RVRkJUU3hKUVVGSkxFVkJSRzVDTEVWQlEzVkNMRWxCUVVrc1MwRkVNMEk3UVVGRmNrSXNkMEpCUVUwc1JVRkJSU3hOUVVGTkxFZEJRVklzUlVGQllTeFZRVUZWTEUxQlFYWkNMRVZCUVN0Q0xHMUNRVUZ0UWl4VFFVRnNSRHRCUVVabExHbENRVUYyUWpzN096dEJRVTlCTERKQ1FVRlhMRmxCUVUwN08wRkJSV1lzZDBKQlFVMHNWVUZCVGl4RFFVRnBRaXhIUVVGcVFpeEZRVUZ6UWl4TlFVRjBRanRCUVVORUxHbENRVWhFTzBGQlNVUXNaVUZtUkR0QlFXZENSQ3hoUVdwQ1JEdEJRV3RDUkN4WFFYWkNSQ3hGUVhWQ1J5eFZRVUZUTEV0QlFWUXNSVUZCWjBJN1FVRkRha0lzYjBKQlFWRXNTMEZCVWl4RFFVRmpMRXRCUVdRN1FVRkRSQ3hYUVhwQ1JEdEJRVEpDUkN4VFFYSkRSRHRCUVhORFJDeFBRWEJGUkN4RlFXOUZSeXhMUVhCRlNDeERRVzlGVXl4VlFVRkRMRTFCUVVRc1JVRkJXVHM3UVVGRmJrSXNXVUZCU1N4alFVRmpPMEZCUTJoQ0xHTkJRVWtzU1VGQlNTeEZRVVJSTEVWQlEwb3NUVUZCVFN4VlFVUkdMRVZCUTJNc1RVRkJUU3hKUVVGSkxFVkJSSGhDTEVWQlF6UkNMRWxCUVVrc1MwRkVhRU03UVVGRmFFSXNaMEpCUVUwc1JVRkJSU3hOUVVGTkxFZEJRVklzUlVGQllTeE5RVUZOTEUxQlFXNUNPMEZCUmxVc1UwRkJiRUk3TzBGQlMwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeFhRVUYyUWp0QlFVTkVMRTlCTlVWRU8wRkJOa1ZFT3pzN0swSkJSVlVzUnl4RlFVRkxMRTBzUlVGQlVUdEJRVU4wUWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzYjBKQlFXOUNMRk5CUVZNc1pVRkJha003TzBGQlJVRXNWVUZCU1N4SlFVRktMRU5CUVZNc1UwRkJWQ3hEUVVGdFFpeFBRVUZ1UWl4RFFVRXlRaXhWUVVGRExGVkJRVVFzUlVGQlowSTdPMEZCUlhwRExHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0lzWjBKQlFVMHNVVUZFWlN4RlFVTk1MRTFCUVUwc2FVSkJSRVFzUlVGRGIwSXNTVUZCU1N4VlFVUjRRanRCUVVWeVFpeG5Ra0ZCVFN4RlFVRkZMRlZCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQmNrSXNSVUZCSzBJc1VVRkJVU3hKUVVGSkxFbEJRVE5ETEVWQlFXbEVMRTlCUVU4c1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQmFrVXNSVUZCZDBVc1VVRkJVU3hKUVVGSkxFbEJRVW9zUTBGQlV5eE5RVUY2Ump0QlFVWmxMRk5CUVhaQ08wRkJTVVFzVDBGT1JEdEJRVTlFT3pzN096czdPRUpCUjFNc1J5eEZRVUZMTzBGQlEySXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFRRVUZUTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhSQ096dEJRVVZCTEZWQlFVa3NVMEZCVXl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzVFVGQmFrSXNRMEZCWWp0QlFVTkJMRlZCUVVrc1RVRkJTaXhGUVVGWk96dEJRVVZXTEdWQlFVOHNUVUZCVURzN08wRkJSMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeGpRVUZKTEVsQlFVa3NSVUZFWVN4RlFVTlVMRTFCUVUwc1ZVRkVSeXhGUVVOVExFMUJRVTBzU1VGQlNTeEZRVVJ1UWl4RlFVTjFRaXhKUVVGSkxFbEJRVWtzU1VGRUwwSTdRVUZGY2tJc1owSkJRVTBzUlVGQlJTeE5RVUZOTEVkQlFWSTdRVUZHWlN4VFFVRjJRanRCUVVsRU8wRkJRMFk3T3pzN096dHpRMEZIYVVJc1J5eEZRVUZMTzBGQlFVRTdPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1lVRkJZU3hKUVVGSkxFbEJRWEpDTzBGQlEwRXNWVUZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRWFJDTzBGQlEwRXNWVUZCU1N4eFFrRkJjVUlzVTBGQlV5eGxRVUZzUXp0QlFVTkJMRlZCUVVrc1pVRkJaU3hUUVVGVExGbEJRVFZDT3p0QlFVVkJMRlZCUVVrc1UwRkJVeXh6UWtGQlZTeE5RVUZXTEVWQlFXdENMRTFCUVM5Q096czdRVUZIUVN4WlFVRk5MRkZCUVU0c1EwRkJaU3gxUWtGQlppeERRVUYxUXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVGb1JDeEZRVUYzUkN4SlFVRjRSQ3hEUVVFMlJDeFZRVUZETEZWQlFVUXNSVUZCWjBJN1FVRkRNMFVzV1VGQlNTeGhRVUZoTEZkQlFWY3NZVUZCV0N4RFFVRjVRaXhWUVVGNlFpeERRVUZ2UXl4VlFVRnlSRHRCUVVOQkxGbEJRVWtzV1VGQldTeFhRVUZYTEZGQlFWZ3NSMEZCYzBJc1YwRkJWeXhSUVVGWUxFTkJRVzlDTEZGQlFURkRMRWRCUVhGRUxFVkJRWEpGT3pzN1FVRkhRU3haUVVGSkxHZENRVUZuUWl4RlFVRndRanRCUVVOQkxITkNRVUZqTEVsQlFXUXNRMEZCYlVJc1UwRkJVeXhWUVVFMVFqdEJRVU5CTEd0Q1FVRlZMRTlCUVZZc1EwRkJhMElzVlVGQlF5eExRVUZFTzBGQlFVRXNhVUpCUVZjc1kwRkJZeXhKUVVGa0xFTkJRVzFDTEdWQlFXVXNTMEZCYkVNc1EwRkJXRHRCUVVGQkxGTkJRV3hDT3pzN1FVRkhRU3haUVVGSkxHMUNRVUZ0UWp0QlFVTnlRaXhuUWtGQlRTeFhRVVJsTEVWQlEwWXNUVUZCVFN4TlFVRk5MRWxCUkZZc1JVRkRaMElzU1VGQlNTeDFRa0ZCZFVJc1RVRkJka0lzUjBGQlowTXNTMEZFY0VRN1FVRkZja0lzWjBKQlFVMHNSVUZCUlN4VlFVRlZMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRWEpDTEVWQlFTdENMRmRCUVZjc1lVRkJNVU1zUlVGQmVVUXNVVUZCVVN4VlFVRnFSVHRCUVVabExGTkJRWFpDT3pzN1FVRk5RU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNMR2RDUVVGMlFpeEZRVUY1UXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOc1JDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2NVTkJRVm9zUlVGQmJVUXNTMEZCYmtRN1FVRkRRU3hqUVVGSkxFMUJRVTBzU1VGQlRpeERRVUZYTEVsQlFWZ3NTMEZCYjBJc1IwRkJlRUlzUlVGQk5rSTdPenRCUVVjelFpeHJRa0ZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFqdEJRVU55UWl4clFrRkJTU3hKUVVGSkxFVkJSR0VzUlVGRFZDeE5RVUZOTEZWQlJFY3NSVUZEVXl4TlFVRk5MRWxCUVVrc1JVRkVia0lzUlVGRGRVSXNTVUZCU1N4VlFVUXpRanRCUVVWeVFpeHZRa0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExHMUNRVUZ0UWl4VFFVRm9RenRCUVVabExHRkJRWFpDT3pzN1FVRk5RU3huUWtGQlNTeHJRa0ZCYTBJN1FVRkRjRUlzYjBKQlFVMHNWMEZFWXl4RlFVTkVMRTFCUVUwc1RVRkJUU3hKUVVSWUxFVkJRMmxDTEVsQlFVa3NhMEpCUkhKQ08wRkJSWEJDTEc5Q1FVRk5MRVZCUVVVc1ZVRkJWU3hwUWtGQmFVSXNTVUZCYWtJc1EwRkJjMElzVVVGQmJFTXNSVUZCTkVNc1dVRkJXU3hWUVVGNFJEdEJRVVpqTEdGQlFYUkNPenM3UVVGTlFTeHJRa0ZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeGxRVUYyUWl4RlFVRjNReXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5xUkN4elFrRkJVU3hIUVVGU0xFTkJRVmtzSzBKQlFWb3NSVUZCTmtNc1MwRkJOME03UVVGRFFTeHJRa0ZCU1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFdEJRVzlDTEVkQlFYaENMRVZCUVRaQ096dEJRVVV6UWl4dlFrRkJTU3hYUVVGWExFMUJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRnFRaXhEUVVGbU8wRkJRMEVzYjBKQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVN1FVRkRZaXcyUWtGQlZ5dzJRa0ZCYlVJc1MwRkJia0lzUlVGQk1FSXNUVUZCTVVJc1JVRkJhME1zVTBGQmJFTXNRMEZCV0R0QlFVTkJMSGRDUVVGTkxGVkJRVTRzUTBGQmFVSXNUVUZCYWtJc1NVRkJNa0lzVVVGQk0wSTdRVUZEUkRzN08wRkJSMFFzZVVKQlFWTXNaVUZCVkN4RFFVRjVRaXhWUVVGNlFqczdPMEZCUjBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEVsQlFVa3NSVUZCWmp0QlFVTkJMSE5DUVVGTkxFbEJRVTRzUjBGQllTeE5RVUZOTEVsQlFXNUNPMEZCUTBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEZWQlFWZzdRVUZEUVN4MVFrRkJTeXhKUVVGTUxFTkJRVlVzVjBGQlZpeERRVUZ6UWl4TFFVRjBRanRCUVVORU8wRkJRMFlzWVVGdVFrUTdRVUZ4UWtRc1YwRndRMFFzVFVGdlEwODdPMEZCUlV3c2EwSkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0lzYTBKQlFVa3NTVUZCU1N4RlFVUmhMRVZCUTFRc1RVRkJUU3hWUVVSSExFVkJRMU1zVFVGQlRTeEpRVUZKTEVWQlJHNUNMRVZCUTNWQ0xFbEJRVWtzVlVGRU0wSTdRVUZGY2tJc2IwSkJRVTBzVFVGQlRUdEJRVVpUTEdGQlFYWkNPMEZCU1VRN1FVRkRSaXhUUVRkRFJEdEJRVGhEUkN4UFFUbEVSRHRCUVN0RVJEczdPenM3TzNkRFFVZHRRaXhITEVWQlFVczdRVUZEZGtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4aFFVRmhMRWxCUVVrc1NVRkJja0k3UVVGRFFTeFZRVUZKTEZOQlFWTXNTVUZCU1N4SlFVRktMRU5CUVZNc1VVRkJkRUk3TzBGQlJVRXNWVUZCU1N4WFFVRlhMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeE5RVUZxUWl4RFFVRm1PMEZCUTBFc1ZVRkJTU3hSUVVGS0xFVkJRV003TzBGQlJWb3NhVUpCUVZNc2EwSkJRVlFzUTBGQk5FSXNWVUZCTlVJN096dEJRVWRCTEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSXNZMEZCU1N4SlFVRkpMRVZCUkdFc1JVRkRWQ3hOUVVGTkxGVkJSRWNzUlVGRFV5eE5RVUZOTEVsQlFVa3NSVUZFYmtJc1JVRkRkVUlzU1VGQlNTeEpRVUZKTEVsQlJDOUNPMEZCUlhKQ0xHZENRVUZOTEVWQlFVVXNUVUZCVFN4SFFVRlNPMEZCUm1Vc1UwRkJka0k3T3pzN1FVRlBSRHRCUVVOR096czdkMEpCYUU5VE8wRkJRVVVzWVVGQlR5eExRVUZMTEVsQlFWbzdRVUZCYlVJN096czdPMnRDUVc5UGJFSXNZenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VNelVsUXNXVHM3T3pzN096czdPenM3T3pzN2NVTkJUMkVzVXl4RlFVRlhMRVVzUlVGQlNUdEJRVU01UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGbEJRVTBzVTBGQlRpeEpRVUZ0UWl4RlFVRnVRanRCUVVORU96czdPenM3T3pzN096UkNRVTlQTEZNc1JVRkJWeXhOTEVWQlFWRTdRVUZEZWtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4TlFVRk5MRk5CUVU0c1EwRkJTaXhGUVVGelFqdEJRVU53UWl4alFVRk5MRk5CUVU0c1JVRkJhVUlzVFVGQmFrSTdRVUZEUkR0QlFVTkdPenM3T3p0clFrRkpXU3haT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNMVEyWXNTVUZCU1N4bFFVRktMRVZCUVd0Q08wRkJRMlFzVjBGQlR5eEpRVUZRTEVkQlFXVXNXVUZCV1R0QlFVTjJRaXhaUVVGSkxHbENRVUZwUWl4UFFVRlBMRk5CUVZBc1EwRkJhVUlzWTBGQmRFTTdXVUZEU1N4cFFrRkJhVUlzUTBGQlJTeEZRVUZETEZWQlFWVXNTVUZCV0N4RlFVRkVMRU5CUVcxQ0xHOUNRVUZ1UWl4RFFVRjNReXhWUVVGNFF5eERRVVIwUWp0WlFVVkpMRmxCUVZrc1EwRkRVaXhWUVVSUkxFVkJSVklzWjBKQlJsRXNSVUZIVWl4VFFVaFJMRVZCU1ZJc1owSkJTbEVzUlVGTFVpeGxRVXhSTEVWQlRWSXNjMEpCVGxFc1JVRlBVaXhoUVZCUkxFTkJSbWhDTzFsQlYwa3NhMEpCUVd0Q0xGVkJRVlVzVFVGWWFFTTdPMEZCWVVFc1pVRkJUeXhWUVVGVkxFZEJRVllzUlVGQlpUdEJRVU5zUWl4blFrRkJTU3hSUVVGUExFZEJRVkFzZFVSQlFVOHNSMEZCVUN4UFFVRmxMRkZCUVdZc1NVRkJNa0lzVDBGQlR5eEhRVUZRTEV0QlFXVXNWVUZCTVVNc1NVRkJkMFFzVVVGQlVTeEpRVUZ3UlN4RlFVRXdSVHRCUVVOMFJTeHpRa0ZCVFN4SlFVRkpMRk5CUVVvc1EwRkJZeXhyUTBGQlpDeERRVUZPTzBGQlEwZzdPMEZCUlVRc1owSkJRVWtzVTBGQlV5eEZRVUZpT3p0QlFVVkJMR2xDUVVGTExFbEJRVWtzU1VGQlZDeEpRVUZwUWl4SFFVRnFRaXhGUVVGelFqdEJRVU5zUWl4dlFrRkJTU3hsUVVGbExFbEJRV1lzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzU1VGQmVrSXNRMEZCU2l4RlFVRnZRenRCUVVOb1F5d3lRa0ZCVHl4SlFVRlFMRU5CUVZrc1NVRkJXanRCUVVOSU8wRkJRMG83TzBGQlJVUXNaMEpCUVVrc1kwRkJTaXhGUVVGdlFqdEJRVU5vUWl4eFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMR1ZCUVhCQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEhkQ1FVRkpMR1ZCUVdVc1NVRkJaaXhEUVVGdlFpeEhRVUZ3UWl4RlFVRjVRaXhWUVVGVkxFTkJRVllzUTBGQmVrSXNRMEZCU2l4RlFVRTBRenRCUVVONFF5d3JRa0ZCVHl4SlFVRlFMRU5CUVZrc1ZVRkJWU3hEUVVGV0xFTkJRVm83UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4dFFrRkJUeXhOUVVGUU8wRkJRMGdzVTBGeVFrUTdRVUZ6UWtnc1MwRndRMkVzUlVGQlpEdEJRWEZEU0RzN1FVRkZSQ3hKUVVGSkxHbENRVUZLTEVWQlFXOUNPMEZCUTJoQ0xGZEJRVThzVFVGQlVDeEhRVUZwUWl4WlFVRlpPMEZCUTNwQ0xHbENRVUZUTEVOQlFWUXNSMEZCWVN4RFFVTmFPenRCUVVWRUxHVkJRVThzVlVGQlZTeERRVUZXTEVWQlFXRTdRVUZEYUVJc1owSkJRVWtzVlVGQlZTeE5RVUZXTEV0QlFYRkNMRU5CUVhwQ0xFVkJRVFJDTzBGQlEzaENMSE5DUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERCRVFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxHTkJRVVVzVTBGQlJpeEhRVUZqTEVOQlFXUTdRVUZEUVN4dFFrRkJUeXhKUVVGSkxFTkJRVW9zUlVGQlVEdEJRVU5JTEZOQlRrUTdRVUZQU0N4TFFWaGxMRVZCUVdoQ08wRkJXVWc3TzBGQlJVUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1QwRkJXQ3hGUVVGdlFqdEJRVU5vUWl4VlFVRk5MRTlCUVU0c1IwRkJaMElzVlVGQlZTeEpRVUZXTEVWQlFXZENPMEZCUXpWQ0xHVkJRVThzVDBGQlR5eFRRVUZRTEVOQlFXbENMRkZCUVdwQ0xFTkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xFbEJRUzlDTEUxQlFYbERMR2RDUVVGb1JEdEJRVU5JTEV0QlJrUTdRVUZIU0RzN1FVRkZSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeFRRVUZPTEVOQlFXZENMRTlCUVhKQ0xFVkJRVGhDTzBGQlF6RkNMRlZCUVUwc1UwRkJUaXhEUVVGblFpeFBRVUZvUWl4SFFVRXdRaXhWUVVGVkxHRXNhVUpCUVZZc1JVRkJNRU03UVVGRGFFVXNXVUZCU1N4VFFVRlRMRWxCUVdJc1JVRkJiVUk3UVVGRFppeHJRa0ZCVFN4SlFVRkpMRk5CUVVvc1JVRkJUanRCUVVOSU8wRkJRMFFzV1VGQlNTeEpRVUZKTEU5QlFVOHNTVUZCVUN4RFFVRlNPMEZCUTBFc1dVRkJTU3hOUVVGTkxFVkJRVVVzVFVGQlJpeExRVUZoTEVOQlFYWkNPenRCUVVWQkxGbEJRVWtzVVVGQlVTeERRVUZhTEVWQlFXVTdRVUZEV0N4dFFrRkJUeXhEUVVGRExFTkJRVkk3UVVGRFNEdEJRVU5FTEZsQlFVa3NTVUZCU1N4RFFVRlNPMEZCUTBFc1dVRkJTU3hWUVVGVkxFMUJRVllzUjBGQmJVSXNRMEZCZGtJc1JVRkJNRUk3UVVGRGRFSXNaMEpCUVVrc1QwRkJUeXhWUVVGVkxFTkJRVllzUTBGQlVDeERRVUZLTzBGQlEwRXNaMEpCUVVrc1RVRkJUU3hEUVVGV0xFVkJRV0U3TzBGQlExUXNiMEpCUVVrc1EwRkJTanRCUVVOSUxHRkJSa1FzVFVGRlR5eEpRVUZKTEUxQlFVMHNRMEZCVGl4SlFVRlhMRTFCUVUwc1VVRkJha0lzU1VGQk5rSXNUVUZCVFN4RFFVRkRMRkZCUVhoRExFVkJRV3RFTzBGQlEzSkVMRzlDUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZLTEVsQlFWTXNRMEZCUXl4RFFVRllMRWxCUVdkQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NSMEZCVEN4RFFVRlRMRU5CUVZRc1EwRkJXQ3hEUVVGd1FqdEJRVU5JTzBGQlEwbzdRVUZEUkN4WlFVRkpMRXRCUVVzc1IwRkJWQ3hGUVVGak8wRkJRMVlzYlVKQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBnN1FVRkRSQ3haUVVGSkxFbEJRVWtzUzBGQlN5eERRVUZNTEVkQlFWTXNRMEZCVkN4SFFVRmhMRXRCUVVzc1IwRkJUQ3hEUVVGVExFMUJRVTBzUzBGQlN5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RFFVRm1MRVZCUVRSQ0xFTkJRVFZDTEVOQlFYSkNPMEZCUTBFc1pVRkJUeXhKUVVGSkxFZEJRVmdzUlVGQlowSXNSMEZCYUVJc1JVRkJjVUk3UVVGRGFrSXNaMEpCUVVrc1MwRkJTeXhEUVVGTUxFbEJRVlVzUlVGQlJTeERRVUZHTEUxQlFWTXNZVUZCZGtJc1JVRkJjME03UVVGRGJFTXNkVUpCUVU4c1EwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeGxRVUZQTEVOQlFVTXNRMEZCVWp0QlFVTklMRXRCTjBKRU8wRkJPRUpJT3pzN1FVRkhSQ3hKUVVGSkxHMUNRVUZLTEVWQlFYTkNPMEZCUTJ4Q0xGZEJRVThzVVVGQlVDeEhRVUZyUWl4VlFVRlZMRWRCUVZZc1JVRkJaVHRCUVVNM1FpeFpRVUZKTEUxQlFVMHNjVUpCUVZZN1FVRkRRU3hsUVVGUExFbEJRVWtzWTBGQlNpeERRVUZ0UWl4SFFVRnVRaXhEUVVGUUxFVkJRV2RETzBGQlF6VkNMRzFDUVVGUExFdEJRVXNzVFVGQlRDeEZRVUZRTzBGQlEwZzdRVUZEUkN4WlFVRkpPMEZCUTBFc1owSkJRVWtzUjBGQlNpeEpRVUZYTEVsQlFWZzdRVUZEUVN4dFFrRkJUeXhKUVVGSkxFZEJRVW9zUTBGQlVEdEJRVU5CTEcxQ1FVRlBMRXRCUVZBN1FVRkRTQ3hUUVVwRUxFTkJTVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVWl4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNpeExRVnBFTzBGQllVZzdPenRCUVVkRUxFbEJRVWtzTmtKQlFUWkNPMEZCUXpkQ0xGTkJRVXNzU1VGRWQwSTdRVUZGTjBJc1UwRkJTeXhKUVVaM1FqdEJRVWMzUWl4VFFVRkxMRWxCU0hkQ08wRkJTVGRDTEZOQlFVc3NTVUZLZDBJN1FVRkxOMElzVTBGQlN5eEpRVXgzUWp0QlFVMDNRaXhUUVVGTExFbEJUbmRDTzBGQlR6ZENMRk5CUVVzN1FVRlFkMElzUTBGQmFrTTdRVUZUUVN4SlFVRkpMSE5DUVVGelFqdEJRVU4wUWl4VFFVRkxPMEZCUkdsQ0xFTkJRVEZDT3p0QlFVbEJMRk5CUVZNc2MwSkJRVlFzUTBGQlowTXNUVUZCYUVNc1JVRkJkME03UVVGRGNFTXNWMEZCVHl4VlFVRlZMRTFCUVZZc1JVRkJhMElzVDBGQmJFSXNRMEZCTUVJc1owSkJRVEZDTEVWQlFUUkRMRlZCUVZVc1lVRkJWaXhGUVVGNVFqdEJRVU40UlN4bFFVRlBMRTFCUVUwc1kwRkJZeXhUUVVGa0xFTkJRWGRDTEVOQlFYaENMRU5CUVdJN1FVRkRTQ3hMUVVaTkxFTkJRVkE3UVVGSFNEczdRVUZGUkN4VFFVRlRMSFZDUVVGVUxFTkJRV2xETEVsQlFXcERMRVZCUVhWRE8wRkJRMjVETEZGQlFVa3NWMEZCVnl4RlFVRm1PMEZCUTBFc1VVRkJTU3d5UWtGQk1rSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1EwRkJXaXhEUVVFelFpeERRVUZLTEVWQlFXZEVPMEZCUXpWRExHMUNRVUZYTEV0QlFVc3NUVUZCVEN4RFFVRlpMRU5CUVZvc1EwRkJXRHRCUVVOQkxHVkJRVThzUzBGQlN5eFRRVUZNTEVOQlFXVXNRMEZCWml4RFFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxGbEJRVmtzUlVGQmFFSTdRVUZEUVN4UlFVRkpMRk5CUVZNc1JVRkJZanRCUVVOQkxGRkJRVWtzWlVGQlpTeEpRVUZ1UWp0QlFVTkJMRkZCUVVrc1owSkJRV2RDTEV0QlFYQkNPMEZCUTBFc1VVRkJTU3hyUWtGQmEwSXNTMEZCZEVJN1FVRkRRU3hSUVVGSkxHRkJRV0VzUjBGQmFrSXNSVUZCYzBJN1FVRkRiRUlzZFVKQlFXVXNTMEZCWmp0QlFVTklMRXRCUmtRc1RVRkZUeXhKUVVGSkxHRkJRV0VzUjBGQmFrSXNSVUZCYzBJN1FVRkRla0lzYVVKQlFWTXNSMEZCVkR0QlFVTkJMRzlDUVVGWkxFZEJRVm83UVVGRFNDeExRVWhOTEUxQlIwRXNTVUZCU1N4aFFVRmhMRWRCUVdwQ0xFVkJRWE5DTzBGQlEzcENMR2xDUVVGVExFZEJRVlE3UVVGRFFTeHZRa0ZCV1N4SFFVRmFPMEZCUTBnc1MwRklUU3hOUVVkQkxFbEJRVWtzWVVGQllTeEhRVUZxUWl4RlFVRnpRanRCUVVONlFpeHBRa0ZCVXl4SFFVRlVPMEZCUTBFc2RVSkJRV1VzUzBGQlpqdEJRVU5JTEV0QlNFMHNUVUZIUVN4SlFVRkpMR0ZCUVdFc1IwRkJha0lzUlVGQmMwSTdRVUZEZWtJc2FVSkJRVk1zUjBGQlZEdEJRVU5CTEc5Q1FVRlpMRWRCUVZvN1FVRkRRU3gzUWtGQlowSXNTVUZCYUVJN1FVRkRRU3d3UWtGQmEwSXNTVUZCYkVJN1FVRkRTQ3hMUVV4TkxFMUJTMEVzU1VGQlNTeGhRVUZoTEVkQlFXcENMRVZCUVhOQ08wRkJRM3BDTEdsQ1FVRlRMRWRCUVZRN1FVRkRRU3h2UWtGQldTeEhRVUZhTzBGQlEwRXNkMEpCUVdkQ0xFbEJRV2hDTzBGQlEwZ3NTMEZLVFN4TlFVbEJMRWxCUVVrc1lVRkJZU3hIUVVGcVFpeEZRVUZ6UWp0QlFVTjZRaXhwUWtGQlV5eEhRVUZVTzBGQlEwRXNiMEpCUVZrc1IwRkJXanRCUVVOQkxIZENRVUZuUWl4SlFVRm9RanRCUVVOSU96dEJRVVZFTEZGQlFVa3NWMEZCVnl4RlFVRm1PMEZCUTBFc1VVRkJTU3hWUVVGVkxFdEJRVXNzUzBGQlRDeERRVUZYTEVkQlFWZ3NRMEZCWkR0QlFVTkJMRkZCUVVrc1YwRkJWeXhGUVVGbU8wRkJRMEVzVVVGQlNTeGhRVUZoTEVWQlFXcENPMEZCUTBFc1UwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRkZCUVZFc1RVRkJOVUlzUlVGQmIwTXNSMEZCY0VNc1JVRkJlVU03UVVGRGNrTXNXVUZCU1N4VlFVRlZMRkZCUVZFc1EwRkJVaXhEUVVGa08wRkJRMEVzV1VGQlNTeFhRVUZYTEVsQlFXWTdRVUZEUVN4WlFVRkpMRkZCUVZFc1QwRkJVaXhEUVVGblFpeEhRVUZvUWl4TlFVRjVRaXhEUVVGRExFTkJRVGxDTEVWQlFXbERPMEZCUXpkQ0xHZENRVUZKTEZGQlFWRXNVVUZCVVN4TFFVRlNMRU5CUVdNc1IwRkJaQ3hEUVVGYU8wRkJRMEVzYzBKQlFWVXNUVUZCVFN4RFFVRk9MRU5CUVZZN1FVRkRRU3gxUWtGQlZ5eFRRVUZUTEUxQlFVMHNRMEZCVGl4RFFVRlVMRVZCUVcxQ0xFVkJRVzVDTEVOQlFWZzdRVUZEU0R0QlFVTkVMRmxCUVVrc1YwRkJWeXhGUVVGbU8wRkJRMEVzWlVGQlR5eHZRa0ZCYjBJc1VVRkJVU3hOUVVGU0xFTkJRV1VzVVVGQlVTeE5RVUZTTEVkQlFXbENMRU5CUVdoRExFTkJRWEJDTEVOQlFWQXNSVUZCWjBVN1FVRkROVVFzY1VKQlFWTXNVVUZCVVN4TlFVRlNMRU5CUVdVc1VVRkJVU3hOUVVGU0xFZEJRV2xDTEVOQlFXaERMRU5CUVZRc1NVRkJLME1zU1VGQkwwTTdRVUZEUVN4elFrRkJWU3hSUVVGUkxGTkJRVklzUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUlzVVVGQlVTeE5RVUZTTEVkQlFXbENMRU5CUVhSRExFTkJRVlk3UVVGRFNEdEJRVU5FTEZsQlFVa3NWVUZCVlR0QlFVTldMSE5DUVVGVkxGRkJSRUU3UVVGRlZpeHJRa0ZCVFN4UFFVWkpPMEZCUjFZc2MwSkJRVlU3UVVGSVFTeFRRVUZrTzBGQlMwRXNhVUpCUVZNc1NVRkJWQ3hEUVVGakxFOUJRV1E3UVVGRFFTeHRRa0ZCVnl4UFFVRllMRWxCUVhOQ0xFOUJRWFJDTzBGQlEwRXNhVUpCUVZNc1NVRkJWQ3hEUVVGakxFOUJRV1E3UVVGRFNEdEJRVU5FTEZGQlFVa3NZMEZCWXl4VFFVRmtMRmRCUVdNc1EwRkJWU3hoUVVGV0xFVkJRWGxDTzBGQlEzWkRMRmxCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzV1VGQlNTeGhRVUZoTEVOQlFXcENPMEZCUTBFc1lVRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRk5CUVZNc1RVRkJOMElzUlVGQmNVTXNSMEZCY2tNc1JVRkJNRU03UVVGRGRFTXNaMEpCUVVrc1ZVRkJWU3hUUVVGVExFTkJRVlFzUTBGQlpEdEJRVU5CTEdkQ1FVRkpMRkZCUVZFc1kwRkJZeXhSUVVGUkxFbEJRWFJDTEVOQlFWbzdRVUZEUVN4blFrRkJTU3hWUVVGVkxFbEJRVllzU1VGQmEwSXNWVUZCVlN4VFFVRTFRaXhKUVVFd1F5eE5RVUZOTEU5QlFVNHNRMEZCWXl4TFFVRmtMRXRCUVhkQ0xFMUJRVTBzVFVGQlRpeExRVUZwUWl4RFFVRnVSaXhKUVVFd1JpeFJRVUZQTEV0QlFWQXNkVVJCUVU4c1MwRkJVQ3hQUVVGcFFpeFJRVUZxUWl4SlFVRTJRaXh2UWtGQldTeExRVUZhTEVWQlFXMUNMRTFCUVc1Q0xFdEJRVGhDTEVOQlFYcEtMRVZCUVRaS08wRkJRM3BLTzBGQlEwRTdRVUZEU0R0QlFVTkVMR2RDUVVGSkxFMUJRVTBzVlVGQlZpeEZRVUZ6UWp0QlFVTnNRaXd3UWtGQlZTeE5RVUZXTzBGQlEwZ3NZVUZHUkN4TlFVVlBPMEZCUTBnc01FSkJRVmNzWVVGQllTeEhRVUY0UWp0QlFVTklPMEZCUTBRc1owSkJRVWtzVFVGQlRTeFBRVUZPTEVOQlFXTXNTMEZCWkN4RFFVRktMRVZCUVRCQ08wRkJRM1JDTEc5Q1FVRkpMR0ZCUVVvc1JVRkJiVUk3UVVGRFppdzRRa0ZCVlN4UlFVRlJMRWxCUVZJc1IwRkJaU3hIUVVGNlFqdEJRVU5JTzBGQlEwUXNjVUpCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4TlFVRk5MRTFCUVRGQ0xFVkJRV3RETEVkQlFXeERMRVZCUVhWRE8wRkJRMjVETEhkQ1FVRkpMRWxCUVVrc1EwRkJVaXhGUVVGWE8wRkJRMUFzYTBOQlFWVXNVVUZCVVN4UlFVRlNMRU5CUVdsQ0xFZEJRV3BDTEVsQlFYbENMR0ZCUVdFc1IwRkJkRU1zUjBGQk5rTXNSMEZCZGtRN1FVRkRRU3cwUWtGQlNTeFJRVUZSTEZGQlFWSXNRMEZCYVVJc1IwRkJha0lzUzBGQmVVSXNZVUZCTjBJc1JVRkJORU03UVVGRGVFTXNjME5CUVZVc1VVRkJVU3hKUVVGU0xFZEJRV1VzUjBGQmVrSTdRVUZEU0R0QlFVTktPMEZCUTBRc09FSkJRVlVzWlVGQlpTeHRRa0ZCYlVJc1RVRkJUU3hEUVVGT0xFTkJRVzVDTEVWQlFUWkNMRTlCUVRkQ0xFTkJRWEZETEVsQlFYSkRMRVZCUVRKRExFdEJRVE5ETEVOQlFXWXNSMEZCYlVVc2RVSkJRWFZDTEUxQlFVMHNRMEZCVGl4RFFVRjJRaXhEUVVFM1JUdEJRVU5JTzBGQlEwb3NZVUZpUkN4TlFXRlBMRWxCUVVrc1VVRkJUeXhMUVVGUUxIVkVRVUZQTEV0QlFWQXNUMEZCYVVJc1VVRkJja0lzUlVGQkswSTdRVUZEYkVNc2IwSkJRVWtzYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hSUVVGU0xFTkJRV2xDTEVkQlFXcENMRU5CUVhSQ0xFVkJRVFpETzBGQlEzcERMRGhDUVVGVkxGRkJRVkVzU1VGQlVpeEhRVUZsTEVkQlFYcENPMEZCUTBnN1FVRkRSQ3h2UWtGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4eFFrRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNTMEZCYUVJc1JVRkJkVUk3UVVGRGJrSXNkMEpCUVVrc1EwRkJReXhMUVVGTUxFVkJRVms3UVVGRFVpeHJRMEZCVlN4UlFVRlJMRkZCUVZJc1EwRkJhVUlzUjBGQmFrSXNTVUZCZVVJc1lVRkJZU3hIUVVGMFF5eEhRVUUyUXl4SFFVRjJSRHRCUVVOSU8wRkJRMFFzTkVKQlFWRXNTMEZCVWp0QlFVTkJMRGhDUVVGVkxHVkJRV1VzYlVKQlFXMUNMRWRCUVc1Q0xFVkJRWGRDTEU5QlFYaENMRU5CUVdkRExFbEJRV2hETEVWQlFYTkRMRXRCUVhSRExFTkJRV1lzUjBGQk9FUXNkVUpCUVhWQ0xFZEJRWFpDTEVOQlFYaEZPMEZCUTBFc09FSkJRVlVzVVVGQlVTeFJRVUZTTEVOQlFXbENMRWRCUVdwQ0xFbEJRWGRDTEVkQlFYaENMRWRCUVRoQ0xFZEJRWGhETzBGQlEwRXNPRUpCUVZVc1pVRkJaU3h0UWtGQmJVSXNUVUZCVFN4SFFVRk9MRU5CUVc1Q0xFVkJRU3RDTEU5QlFTOUNMRU5CUVhWRExFbEJRWFpETEVWQlFUWkRMRXRCUVRkRExFTkJRV1lzUjBGQmNVVXNkVUpCUVhWQ0xFMUJRVTBzUjBGQlRpeERRVUYyUWl4RFFVRXZSVHRCUVVOSU8wRkJRMG9zWVVGa1RTeE5RV05CTzBGQlEwZ3NiMEpCUVVrc1lVRkJTaXhGUVVGdFFqdEJRVU5tTERoQ1FVRlZMRkZCUVZFc1NVRkJiRUk3UVVGRFFTeDNRa0ZCU1N4RFFVRkRMR1ZCUVVRc1NVRkJiMElzVlVGQlZTeEZRVUZzUXl4RlFVRnpRenRCUVVOc1F5eHJRMEZCVlN4SFFVRldPMEZCUTBnN1FVRkRTanRCUVVORUxHOUNRVUZKTEZGQlFWRXNVVUZCVWl4SlFVRnZRaXhKUVVGNFFpeEZRVUU0UWp0QlFVTXhRaXcwUWtGQlVTeE5RVUZOTEZOQlFVNHNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNVVUZCVVN4UlFVRXpRaXhEUVVGU08wRkJRMGc3UVVGRFJDd3dRa0ZCVlN4bFFVRmxMRzFDUVVGdFFpeExRVUZ1UWl4RlFVRXdRaXhQUVVFeFFpeERRVUZyUXl4SlFVRnNReXhGUVVGM1F5eExRVUY0UXl4RFFVRm1MRWRCUVdkRkxIVkNRVUYxUWl4TFFVRjJRaXhEUVVFeFJUdEJRVU5JTzBGQlEwbzdRVUZEUkN4bFFVRlBMRTFCUVZBN1FVRkRTQ3hMUVhoRVJEdEJRWGxFUVN4blFrRkJXU3hSUVVGYUxFZEJRWFZDTEZGQlFYWkNPMEZCUTBFc1YwRkJUenRCUVVOSUxHZENRVUZSTEUxQlJFdzdRVUZGU0N4elFrRkJZenRCUVVaWUxFdEJRVkE3UVVGSlNEczdRVUZGUkN4VFFVRlRMRmRCUVZRc1EwRkJjVUlzVVVGQmNrSXNSVUZCSzBJN1FVRkRNMElzVVVGQlNTeEZRVUZGTEdkQ1FVRm5RaXhYUVVGc1FpeERRVUZLTEVWQlFXOURPMEZCUTJoRExHVkJRVThzU1VGQlNTeFhRVUZLTEVOQlFXZENMRkZCUVdoQ0xFTkJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NVVUZCVVN4VFFVRlRMRXRCUVZRc1EwRkJaU3hIUVVGbUxFTkJRVm83UVVGRFFTeFJRVUZKTEZsQlFWa3NRMEZCUXl4TlFVRk5MRXRCUVU0c1JVRkJSQ3hEUVVGb1FqdEJRVU5CTEZGQlFVa3NWMEZCVnl4RlFVRm1PMEZCUTBFc1VVRkJTU3huUWtGQlowSXNSVUZCY0VJN1FVRkRRU3hSUVVGSkxGZEJRVmNzUlVGQlpqdEJRVU5CTEZkQlFVOHNUVUZCVFN4TlFVRk9MRWRCUVdVc1EwRkJkRUlzUlVGQmVVSTdRVUZEY2tJc1dVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlRpeEZRVUZZTzBGQlEwRXNXVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExFZEJRVmdzUlVGQlowSXNRMEZCYUVJc1EwRkJXRHRCUVVOQkxGbEJRVWtzV1VGQldTeExRVUZMTEZOQlFVd3NRMEZCWlN4TFFVRkxMRTFCUVV3c1IwRkJZeXhEUVVFM1FpeERRVUZvUWp0QlFVTkJMRmxCUVVrc1VVRkJVU3gzUWtGQmQwSXNTVUZCZUVJc1EwRkJXanRCUVVOQkxITkNRVUZqTEVsQlFXUXNRMEZCYlVJc1RVRkJUU3haUVVGNlFqdEJRVU5CTEdsQ1FVRlRMRWxCUVZRc1EwRkJZeXhOUVVGTkxFMUJRWEJDTzBGQlEwRXNhMEpCUVZVc1NVRkJWaXhEUVVGbExGTkJRV1k3UVVGRFFTeHRRa0ZCVnl4VFFVRlRMRTFCUVZRc1EwRkJaMElzVFVGQlRTeFpRVUZPTEVOQlFXMUNMRkZCUVc1RExFTkJRVmc3UVVGRFNEdEJRVU5FTEZOQlFVc3NTVUZCVEN4SFFVRlpMRlZCUVZVc1lVRkJWaXhGUVVGNVFqdEJRVU5xUXl4WlFVRkpMRk5CUVZNc1ZVRkJWU3hEUVVGV0xFTkJRV0k3UVVGRFFTeGhRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzWTBGQll5eE5RVUZzUXl4RlFVRXdReXhIUVVFeFF5eEZRVUVyUXp0QlFVTXpReXhuUWtGQlNTeGxRVUZsTEdOQlFXTXNRMEZCWkN4RFFVRnVRanRCUVVOQkxITkNRVUZWTEdGQlFXRXNZVUZCWWl4RFFVRldPMEZCUTBFc2MwSkJRVlVzVlVGQlZTeEpRVUZKTEVOQlFXUXNRMEZCVmp0QlFVTklPMEZCUTBRc1pVRkJUeXhOUVVGUU8wRkJRMGdzUzBGU1JEdEJRVk5CTEZOQlFVc3NVVUZCVEN4SFFVRm5RaXhSUVVGb1FqdEJRVU5CTEZOQlFVc3NVVUZCVEN4SFFVRm5RaXhSUVVGb1FqdEJRVU5JT3p0QlFVVkVMRmxCUVZrc1UwRkJXaXhIUVVGM1FqdEJRVU53UWl4alFVRlZMRzlDUVVGWk8wRkJRMnhDTEdWQlFVOHNTMEZCU3l4UlFVRmFPMEZCUTBnc1MwRkliVUk3UVVGSmNFSXNiMEpCUVdkQ0xIZENRVUZWTEVkQlFWWXNSVUZCWlR0QlFVTXpRaXhsUVVGUExFdEJRVXNzU1VGQlRDeERRVUZWTEZWQlFWVXNUMEZCVml4RlFVRnRRanRCUVVOb1F5eHRRa0ZCVHl4SlFVRkpMRTlCUVVvc1EwRkJVRHRCUVVOSUxGTkJSazBzUTBGQlVEdEJRVWRJTzBGQlVtMUNMRU5CUVhoQ08wRkJWVUVzU1VGQlNTeHRRa0ZCYlVJc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4TlFVRXhRaXhGUVVGclF5eGxRVUZzUXl4RlFVRnRSQ3hoUVVGdVJDeEZRVUZyUlN4alFVRnNSU3hGUVVGclJpeHpRa0ZCYkVZc1JVRkJNRWM3UVVGRE4wZ3NVMEZCU3l4UFFVRk1MRWRCUVdVc1JVRkJaanRCUVVOQkxGTkJRVXNzVlVGQlRDeEhRVUZyUWl4RlFVRnNRanRCUVVOQkxGTkJRVXNzWjBKQlFVd3NSMEZCZDBJc1UwRkJVeXh6UWtGQll5eFBRVUZQTEdkQ1FVRnlRaXhEUVVGVUxFZEJRV3RFTEVWQlFURkZPMEZCUTBFc1UwRkJTeXhQUVVGTUxFZEJRV1VzVTBGQlV5eHpRa0ZCWXl4UFFVRlBMRTlCUVhKQ0xFTkJRVlFzUjBGQmVVTXNSVUZCZUVRN1FVRkRRU3hUUVVGTExHVkJRVXdzUjBGQmRVSXNaVUZCZGtJN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwRXNVMEZCU3l4WFFVRk1MRWRCUVcxQ0xHdENRVUZyUWl4TFFVRkxMRmxCUVhaQ0xFZEJRWE5ETEV0QlFVc3NWMEZCT1VRN1FVRkRRU3hSUVVGSkxHTkJRVW9zUlVGQmIwSTdRVUZEYUVJc1lVRkJTeXhqUVVGTUxFZEJRWE5DTEVsQlFYUkNPMEZCUTBFc1lVRkJTeXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEdGQlFVc3NZVUZCVEN4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTEdGQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEUVN4aFFVRkxMRFpDUVVGTUxFZEJRWEZETEVWQlFYSkRPMEZCUTBFc1lVRkJTeXh0UWtGQlRDeEhRVUV5UWl4dFFrRkJNMEk3UVVGRFFTeGhRVUZMTEcxQ1FVRk1MRWRCUVRKQ0xEQkNRVUV6UWp0QlFVTklPMEZCUTBRc1VVRkJTU3h6UWtGQlNpeEZRVUUwUWp0QlFVTjRRaXhoUVVGTExITkNRVUZNTEVkQlFUaENMRWxCUVRsQ08wRkJRMEVzWVVGQlN5eHJRa0ZCVEN4SFFVRXdRaXhGUVVFeFFqdEJRVU5CTEdGQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEU0R0QlFVTkVMRk5CUVVzc1lVRkJUQ3hIUVVGeFFpeHBRa0ZCYVVJc2NVSkJRWEZDTEVsQlFYSkNMRU5CUVhSRE8wRkJRMEVzVVVGQlNTeFBRVUZQTEV0QlFVc3NZVUZCV2l4TFFVRTRRaXhSUVVGc1F5eEZRVUUwUXp0QlFVTjRReXhqUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEU5QlFWWXNRMEZCVGp0QlFVTklPMEZCUTBRc1UwRkJTeXhsUVVGTUxFZEJRWFZDTEVWQlFYWkNPMEZCUTBFc1VVRkJTU3hOUVVGS0xFVkJRVms3UVVGRFVpeGhRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhQUVVGUExHVkJRWFpDTEVWQlFYZERPMEZCUTNCRExHbENRVUZMTEdWQlFVd3NRMEZCY1VJc1IwRkJja0lzU1VGQk5FSXNUMEZCVHl4bFFVRlFMRU5CUVhWQ0xFZEJRWFpDTEVWQlFUUkNMRXRCUVRWQ0xFTkJRV3RETEVOQlFXeERMRU5CUVRWQ08wRkJRMGc3UVVGRFNqdEJRVU5LTEVOQmFFTkVPMEZCYVVOQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeGhRVUV6UWl4SFFVRXlReXhWUVVGVkxFOUJRVllzUlVGQmJVSXNaVUZCYmtJc1JVRkJiME03UVVGRE0wVXNVMEZCU3l4bFFVRk1MRU5CUVhGQ0xFOUJRWEpDTEVsQlFXZERMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeFBRVUZ5UWl4TFFVRnBReXhGUVVGcVJUdEJRVU5CTEZOQlFVc3NaVUZCVEN4RFFVRnhRaXhQUVVGeVFpeEZRVUU0UWl4SlFVRTVRaXhEUVVGdFF5eGxRVUZ1UXp0QlFVTklMRU5CU0VRN1FVRkpRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVjBGQk0wSXNSMEZCZVVNc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTEdGQlFXaENMRVZCUVN0Q0xGRkJRUzlDTEVWQlFYbERMRlZCUVhwRExFVkJRWEZFTEZOQlFYSkVMRVZCUVdkRkxFbEJRV2hGTEVWQlFYTkZMRTFCUVhSRkxFVkJRVGhGTzBGQlEyNUlMRkZCUVVrc1VVRkJVU3hKUVVGSkxHVkJRVW9zUTBGQmIwSXNTVUZCY0VJc1JVRkJNRUlzWVVGQk1VSXNSVUZCZVVNc1VVRkJla01zUlVGQmJVUXNWVUZCYmtRc1JVRkJLMFFzVTBGQkwwUXNRMEZCV2p0QlFVTkJMRlZCUVUwc1QwRkJUaXhIUVVGblFpeExRVUZMTEdGQlFVd3NRMEZCYlVJc1MwRkJia0lzUlVGQk1FSXNTVUZCTVVJc1JVRkJaME1zVFVGQmFFTXNRMEZCYUVJN1FVRkRRU3hYUVVGUExFdEJRVkE3UVVGRFNDeERRVXBFTzBGQlMwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmRCUVROQ0xFZEJRWGxETEZWQlFWVXNTMEZCVml4RlFVRnBRanRCUVVOMFJDeFhRVUZQTEV0QlFWQTdRVUZEU0N4RFFVWkVPMEZCUjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGbEJRVE5DTEVkQlFUQkRMRlZCUVZVc1MwRkJWaXhGUVVGcFFqdEJRVU4yUkN4UlFVRkpMRXRCUVVvc1JVRkJWenRCUVVOUUxHRkJRVXNzVFVGQlRDeERRVUZaTEVsQlFWb3NRMEZCYVVJc1MwRkJha0k3UVVGRFNEdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CVEVRN1FVRk5RU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzV1VGQk0wSXNSMEZCTUVNc1ZVRkJWU3hWUVVGV0xFVkJRWE5DTEZGQlFYUkNMRVZCUVdkRExGVkJRV2hETEVWQlFUUkRPMEZCUTJ4R0xGTkJRVXNzU1VGQlNTeEpRVUZKTEZWQlFXSXNSVUZCZVVJc1NVRkJTU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUY2UXl4RlFVRnBSQ3hIUVVGcVJDeEZRVUZ6UkR0QlFVTnNSQ3hoUVVGTExFMUJRVXdzUTBGQldTeERRVUZhTEVsQlFXbENMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFTkJRVm9zUlVGQlpTeFZRVUZtTEVOQlFUQkNMRkZCUVRGQ0xFVkJRVzlETEZWQlFYQkRMRU5CUVdwQ08wRkJRMGc3UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFVeEVPMEZCVFVFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xHOUNRVUV6UWl4SFFVRnJSQ3hWUVVGVkxFbEJRVllzUlVGQlowSXNUVUZCYUVJc1JVRkJkMEk3UVVGRGRFVXNVMEZCU3l4SlFVRkpMRmRCUVZRc1NVRkJkMElzUzBGQlN5eHZRa0ZCTjBJc1JVRkJiVVE3UVVGREwwTXNXVUZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdkQ1FVRTFRaXhGUVVFNFF5eEZRVUZETEUxQlFVMHNWMEZCVUN4RlFVRTVReXhGUVVGdFJTeFhRVUZ1UlN4RlFVRm5SaXhGUVVGb1JpeEZRVUZ2Uml4SlFVRndSaXhGUVVFd1JpeEpRVUV4Uml4RlFVRm5SeXhOUVVGb1J5eERRVUZhTzBGQlEwRXNXVUZCU1N4VFFVRlRMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRmlPMEZCUTBFc1dVRkJTU3hOUVVGS0xFVkJRVms3UVVGRFVpeHRRa0ZCVHl4TlFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGTkJRVE5DTEVkQlFYVkRMRlZCUVZVc1RVRkJWaXhGUVVGclFpeFRRVUZzUWl4RlFVRTJRanRCUVVOb1JTeFJRVUZKTEZGQlFVOHNUVUZCVUN4MVJFRkJUeXhOUVVGUUxFOUJRV3RDTEZGQlFYUkNMRVZCUVdkRE8wRkJRelZDTEdGQlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTNCQ0xHbENRVUZMTEZOQlFVd3NRMEZCWlN4SFFVRm1MRVZCUVc5Q0xFOUJRVThzUjBGQlVDeERRVUZ3UWp0QlFVTklPMEZCUTBRc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFRRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFMUJRWFJDTEVsQlFXZERMRk5CUVdoRE8wRkJRMGdzUTBGU1JEdEJRVk5CTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4WFFVRXpRaXhIUVVGNVF5eFZRVUZWTEUxQlFWWXNSVUZCYTBJc1ZVRkJiRUlzUlVGQk9FSTdRVUZEYmtVc1VVRkJTU3hQUVVGUExFMUJRVkFzVFVGQmJVSXNVMEZCZGtJc1JVRkJhME03UVVGRE9VSXNjVUpCUVdFc1kwRkJZeXhGUVVFelFqdEJRVU5CTEZsQlFVa3NWMEZCVnl4UFFVRlBMRTFCUVZBc1EwRkJXQ3hEUVVGS0xFVkJRV2RETzBGQlF6VkNMRzFDUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMR3RDUVVFMVFpeEZRVUZuUkN4RlFVRkRMRTFCUVUwc2IwSkJRVmtzVlVGQldpeEZRVUYzUWl4SlFVRjRRaXhEUVVFMlFpeEpRVUUzUWl4RFFVRlFMRVZCUVdoRUxFVkJRVFJHTEVWQlFUVkdMRVZCUVdkSExFVkJRV2hITEVWQlFXOUhMRWxCUVhCSExFVkJRVEJITEZOQlFURkhMRVZCUVhGSUxFMUJRWEpJTEVOQlFWQTdRVUZEU0R0QlFVTkVMRzFDUVVGWExFOUJRVThzVFVGQlVDeERRVUZZTEVsQlFUWkNMRWxCUVRkQ08wRkJRMEVzYVVKQlFWTXNTMEZCU3l4VFFVRk1MRU5CUVdVc1QwRkJUeXhOUVVGUUxFTkJRV1lzUlVGQkswSXNWVUZCTDBJc1EwRkJWRHRCUVVOSU8wRkJRMFFzVjBGQlR5eE5RVUZRTzBGQlEwZ3NRMEZXUkR0QlFWZEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhUUVVFelFpeEhRVUYxUXl4VlFVRlZMRWRCUVZZc1JVRkJaU3hWUVVGbUxFVkJRVEpDTzBGQlF6bEVMRkZCUVVrc1RVRkJTanRCUVVOQkxGRkJRVWtzUzBGQlN5eFBRVUZNTEVOQlFXRXNSMEZCWWl4TlFVRnpRaXhUUVVFeFFpeEZRVUZ4UXp0QlFVTnFReXhwUWtGQlV5eExRVUZMTEU5QlFVd3NRMEZCWVN4SFFVRmlMRU5CUVZRN1FVRkRRU3hsUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4TlFVRnFRaXhGUVVGNVFpeFZRVUY2UWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxGVkJRVlVzUjBGQlpEdEJRVU5CTEZGQlFVa3NWMEZCVnl4RlFVRm1PMEZCUTBFc1VVRkJTU3hKUVVGSkxFOUJRVW9zUTBGQldTeEhRVUZhTEUxQlFYRkNMRU5CUVVNc1EwRkJNVUlzUlVGQk5rSTdRVUZEZWtJc2JVSkJRVmNzU1VGQlNTeFRRVUZLTEVOQlFXTXNTVUZCU1N4UFFVRktMRU5CUVZrc1IwRkJXaXhKUVVGdFFpeERRVUZxUXl4RFFVRllPMEZCUTBFc2EwSkJRVlVzU1VGQlNTeFRRVUZLTEVOQlFXTXNRMEZCWkN4RlFVRnBRaXhKUVVGSkxFOUJRVW9zUTBGQldTeEhRVUZhTEVOQlFXcENMRU5CUVZZN1FVRkRTRHRCUVVORUxGRkJRVWtzYzBKQlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1QwRkJZaXhEUVVGUUxFMUJRV2xETEZGQlFYSkRMRVZCUVN0RE8wRkJRek5ETEdsQ1FVRlRMRXRCUVVzc1QwRkJUQ3hEUVVGaExFOUJRV0lzUTBGQlZEdEJRVU5CTEZsQlFVa3NZMEZCWXl4dFFrRkJiVUlzVVVGQmJrSXNRMEZCYkVJN1FVRkRRU3haUVVGSkxHZENRVUZuUWl4RlFVRndRaXhGUVVGM1FqdEJRVU53UWl4dFFrRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNUVUZCYWtJc1JVRkJlVUlzVlVGQmVrSXNRMEZCVUR0QlFVTklMRk5CUmtRc1RVRkZUeXhKUVVGSkxGbEJRVmtzVFVGQldpeERRVUZ0UWl4RFFVRnVRaXhOUVVFd1FpeEhRVUU1UWl4RlFVRnRRenRCUVVOMFF5eHRRa0ZCVHl4VFFVRlFPMEZCUTBnN1FVRkRSQ3haUVVGSkxGRkJRVkVzV1VGQldTeExRVUZhTEVOQlFXdENMRWRCUVd4Q0xFVkJRWFZDTEV0QlFYWkNMRU5CUVRaQ0xFTkJRVGRDTEVOQlFWbzdRVUZEUVN4aFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUVUZCVFN4TlFVRXhRaXhGUVVGclF5eEhRVUZzUXl4RlFVRjFRenRCUVVOdVF5eG5Ra0ZCU1N4WlFVRlpMRTFCUVUwc1EwRkJUaXhGUVVGVExFOUJRVlFzUTBGQmFVSXNTMEZCYWtJc1JVRkJkMElzUjBGQmVFSXNSVUZCTmtJc1QwRkJOMElzUTBGQmNVTXNTMEZCY2tNc1JVRkJORU1zUjBGQk5VTXNRMEZCYUVJN1FVRkRRU3huUWtGQlNTeFBRVUZQTEZOQlFWQXNUVUZCYzBJc1UwRkJNVUlzUlVGQmNVTTdRVUZEYWtNc2VVSkJRVk1zVTBGQlZEdEJRVU5CTzBGQlEwZzdRVUZEUkN4eFFrRkJVeXhQUVVGUExGTkJRVkFzUTBGQlZEdEJRVU5JTzBGQlEwUXNXVUZCU1N4WFFVRlhMRk5CUVdZc1JVRkJNRUk3UVVGRGRFSXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRVZCUVhsQ0xGVkJRWHBDTEVOQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBRc1VVRkJTU3hMUVVGTExFOUJRVXdzUTBGQllTeFBRVUZpTEUxQlFUQkNMRk5CUVRsQ0xFVkJRWGxETzBGQlEzSkRMR0ZCUVVzc1QwRkJUQ3hEUVVGaExFbEJRV0lzUTBGQmEwSXNUMEZCYkVJN1FVRkRRU3hoUVVGTExFOUJRVXdzUTBGQllTeFBRVUZpTEVsQlFYZENMRTlCUVhoQ08wRkJRMEVzWVVGQlN5eFZRVUZNTEVOQlFXZENMRTlCUVdoQ0xFbEJRVEpDTEU5QlFUTkNPMEZCUTBnN1FVRkRTaXhEUVhSRFJEdEJRWFZEUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1lVRkJNMElzUjBGQk1rTXNWVUZCVlN4TlFVRldMRVZCUVd0Q0xFZEJRV3hDTEVWQlFYVkNPMEZCUXpsRUxGRkJRVWtzVFVGQlRTeFBRVUZPTEVOQlFXTXNUVUZCWkN4RFFVRktMRVZCUVRKQ08wRkJRM1pDTEdGQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEUxQlFUTkNMRVZCUVcxRExFZEJRVzVETEVWQlFYZERPMEZCUTNCRExHbENRVUZMTEdGQlFVd3NRMEZCYlVJc1QwRkJUeXhEUVVGUUxFTkJRVzVDTEVWQlFUaENMRWRCUVRsQ08wRkJRMGc3UVVGRFNpeExRVXBFTEUxQlNVOHNTVUZCU1N4VlFVRlZMRkZCUVU4c1RVRkJVQ3gxUkVGQlR5eE5RVUZRTEU5QlFXdENMRkZCUVdoRExFVkJRVEJETzBGQlF6ZERMRmxCUVVrc1QwRkJUeXhQUVVGUExFVkJRV1FzUzBGQmNVSXNVVUZCZWtJc1JVRkJiVU03UVVGREwwSXNaMEpCUVVrc1lVRkJZU3hIUVVGaUxFVkJRV3RDTEU5QlFVOHNSVUZCZWtJc1EwRkJTaXhGUVVGclF6dEJRVU01UWl4dlFrRkJTU3hMUVVGTExFOUJRVXdzUTBGQllTeFBRVUZQTEVWQlFYQkNMRTFCUVRSQ0xGTkJRV2hETEVWQlFUSkRPMEZCUTNaRExIbENRVUZMTEU5QlFVd3NRMEZCWVN4UFFVRlBMRVZCUVhCQ0xFbEJRVEJDTEUxQlFURkNPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzWVVGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1RVRkJhRUlzUlVGQmQwSTdRVUZEY0VJc1owSkJRVWtzVVVGQlVTeE5RVUZhTEVWQlFXOUNPMEZCUTJoQ0xHOUNRVUZKTEhOQ1FVRlBMRTlCUVU4c1IwRkJVQ3hEUVVGUUxFMUJRWFZDTEZGQlFUTkNMRVZCUVhGRE8wRkJRMnBETEhsQ1FVRkxMR0ZCUVV3c1EwRkJiVUlzVDBGQlR5eEhRVUZRTEVOQlFXNUNMRVZCUVdkRExFZEJRV2hETzBGQlEwZ3NhVUpCUmtRc1RVRkZUeXhKUVVGSkxGRkJRVkVzVFVGQldpeEZRVUZ2UWp0QlFVTjJRaXgzUWtGQlNTeE5RVUZOTEdWQlFXVXNUMEZCVHl4SFFVRlFMRU5CUVdZc1EwRkJWanRCUVVOQkxIZENRVUZKTEU5QlFVOHNTMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhOUVVGelFpeFRRVUUzUWl4SlFVRXdReXhMUVVGTExGVkJRVXdzUTBGQlowSXNSMEZCYUVJc1RVRkJlVUlzVTBGQmRrVXNSVUZCYTBZN1FVRkRPVVVzTmtKQlFVc3NWVUZCVEN4RFFVRm5RaXhIUVVGb1FpeEpRVUYxUWl4SFFVRjJRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LTzBGQlEwbzdRVUZEU2l4RFFURkNSRHRCUVRKQ1FTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNVMEZCTTBJc1IwRkJkVU1zVlVGQlZTeEhRVUZXTEVWQlFXVXNUVUZCWml4RlFVRjFRanM3UVVGRk1VUXNVVUZCU1N4UFFVRlBMRWRCUVZBc1MwRkJaU3hSUVVGbUxFbEJRVEpDTEU5QlFVOHNUVUZCVUN4TFFVRnJRaXhYUVVGcVJDeEZRVUU0UkR0QlFVTXhSQ3haUVVGSkxGRkJRVThzUjBGQlVDeDFSRUZCVHl4SFFVRlFMRTlCUVdVc1VVRkJaaXhKUVVFeVFpeFBRVUZQTEVsQlFVa3NSVUZCV0N4TFFVRnJRaXhSUVVGcVJDeEZRVUV5UkR0QlFVTjJSQ3h4UWtGQlV5eEhRVUZVTzBGQlEwRXNhMEpCUVUwc1QwRkJUeXhGUVVGaU8wRkJRMGdzVTBGSVJDeE5RVWxMTzBGQlEwUTdRVUZEU0R0QlFVTktPMEZCUTBRc1VVRkJTU3hSUVVGUkxHVkJRV1VzUjBGQlppeEpRVUZ6UWl4SFFVRnNReXhGUVVGMVF6czdRVUZGYmtNc1kwRkJUU3hsUVVGbExFZEJRV1lzUTBGQlRqdEJRVU5JTzBGQlEwUXNVMEZCU3l4UFFVRk1MRU5CUVdFc1IwRkJZaXhKUVVGdlFpeE5RVUZ3UWp0QlFVTkJMRmRCUVU4c1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVkQlFXaENMRU5CUVZBN1FVRkRRU3hsUVVGWExFMUJRVmdzUlVGQmJVSXNSMEZCYmtJN1FVRkRRU3hUUVVGTExHRkJRVXdzUTBGQmJVSXNUVUZCYmtJc1JVRkJNa0lzUjBGQk0wSTdRVUZEU0N4RFFXNUNSRHM3UVVGeFFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmxCUVROQ0xFZEJRVEJETEZsQlFWazdRVUZEYkVRc1VVRkJTU3hOUVVGTkxFVkJRVlk3UVVGRFFTeFRRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhMUVVGTExFOUJRWEpDTEVWQlFUaENPMEZCUXpGQ0xGbEJRVWtzUjBGQlNpeEpRVUZYTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1EwRkJXRHRCUVVOSU8wRkJRMFFzVjBGQlR5eEhRVUZRTzBGQlEwZ3NRMEZPUkRzN1FVRlJRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1ZVRkJWU3haUVVGV0xFVkJRWGRDTzBGQlF5OUVMRkZCUVVrc1QwRkJUeXhGUVVGWU8wRkJRMEVzVTBGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1MwRkJTeXhQUVVGeVFpeEZRVUU0UWp0QlFVTXhRaXhaUVVGSkxFTkJRVU1zV1VGQlJDeEpRVUZwUWl4aFFVRmhMRWxCUVdJc1EwRkJhMElzUjBGQmJFSXNRMEZCY2tJc1JVRkJOa003UVVGRGVrTXNhVUpCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVlk3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVlVGQlZTeFpRVUZXTEVWQlFYZENPMEZCUTJoRkxGRkJRVWtzVDBGQlR5eEZRVUZZTzBGQlEwRXNVMEZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzUzBGQlN5eFZRVUZ5UWl4RlFVRnBRenRCUVVNM1FpeFpRVUZKTEVOQlFVTXNXVUZCUkN4SlFVRnBRaXhoUVVGaExFbEJRV0lzUTBGQmEwSXNSMEZCYkVJc1EwRkJja0lzUlVGQk5rTTdRVUZEZWtNc2FVSkJRVXNzU1VGQlRDeERRVUZWTEVkQlFWWTdRVUZEU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGU1JEczdRVUZWUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNXVUZCV1R0QlFVTnFSQ3hUUVVGTExFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlEwRXNVMEZCU3l4TFFVRk1PMEZCUTBnc1EwRklSRHRCUVVsQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeExRVUV6UWl4SFFVRnRReXhaUVVGWk8wRkJRek5ETEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTExFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwZ3NRMEZLUkRzN1FVRk5RU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzVjBGQk0wSXNSMEZCZVVNc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ0xHRkJRWGhDTEVWQlFYVkRMR1ZCUVhaRExFVkJRWGRFTEdWQlFYaEVMRVZCUVhsRk8wRkJRemxITEZGQlFVa3NVVUZCU2p0QlFVTkJMR0ZCUVZNc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRU5CUVZRN1FVRkRRU3hSUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExUXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRkdSQ3hOUVVWUExFbEJRVWtzYTBKQlFXdENMR1ZCUVhSQ0xFVkJRWFZETzBGQlF6RkRMR0ZCUVVzc1RVRkJUQ3hEUVVGWkxFbEJRVm9zUTBGQmFVSXNUVUZCYWtJN1FVRkRRU3hsUVVGUExFMUJRVkE3UVVGRFNEczdRVUZGUkN4UlFVRkpMR3RDUVVGclFpeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnNRenRCUVVOQkxGRkJRVWtzVjBGQlNqdFJRVUZwUWl3eVFrRkJNa0lzU1VGQk5VTTdVVUZCYTBRc2MwSkJRWE5DTEVsQlFYaEZPMEZCUTBFc1VVRkJTU3hMUVVGTExHTkJRVXdzU1VGQmRVSXNTVUZCZGtJc1NVRkJLMElzVVVGQlR5eEpRVUZRTEhWRVFVRlBMRWxCUVZBc1QwRkJaMElzVVVGQmJrUXNSVUZCTmtRN1FVRkRla1FzYlVKQlFWY3NRMEZCUXl4TFFVRkxMRTlCUVV3c1EwRkJZU3hOUVVGNlFqdEJRVU5CTEZsQlFVa3NTMEZCU3l4TFFVRkxMRzFDUVVGV0xFTkJRVW9zUlVGQmIwTTdRVUZEYUVNc1owSkJRVWtzWTBGQll5eExRVUZMTEV0QlFVc3NiVUpCUVZZc1JVRkJLMElzVDBGQkwwSXNRMEZCZFVNc1RVRkJka01zUTBGQmJFSTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNRMEZCUXl4RFFVRnlRaXhGUVVGM1FqdEJRVU53UWl4eFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCV2l4RFFVRnRRaXhMUVVGTExFdEJRVXNzYlVKQlFWWXNSVUZCSzBJc1YwRkJMMElzUTBGQmJrSXNRMEZCWkR0QlFVTkJMSFZDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNXVUZCU1N4M1FrRkJaMElzU1VGQmFFSXNRMEZCU2l4RlFVRXlRanRCUVVOMlFpd3dRa0ZCWXl4TFFVRkxMR0ZCUVV3c1EwRkJiVUlzVDBGQmJrSXNRMEZCTWtJc1NVRkJNMElzUTBGQlpEdEJRVU5CTEdkQ1FVRkpMR2RDUVVGblFpeERRVUZETEVOQlFYSkNMRVZCUVhkQ08wRkJRM0JDTEc5Q1FVRkpMRzlDUVVGdlFpeExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xGZEJRVEZDTEVWQlFYVkRMRTlCUVhaRExFTkJRU3RETEUxQlFTOURMRU5CUVhoQ08wRkJRMEVzYjBKQlFVa3NjMEpCUVhOQ0xFTkJRVU1zUTBGQk0wSXNSVUZCT0VJN1FVRkRNVUlzZVVKQlFVc3NUVUZCVEN4SFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRVm9zUTBGQmJVSXNTMEZCU3l3MlFrRkJUQ3hEUVVGdFF5eFhRVUZ1UXl4RlFVRm5SQ3hwUWtGQmFFUXNRMEZCYmtJc1EwRkJaRHRCUVVOQkxESkNRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSQ3hoUVVGTExFOUJRVXdzUTBGQllTeEpRVUZpTEVOQlFXdENMRWxCUVd4Q08wRkJRMEVzV1VGQlNTeDNRa0ZCWjBJc1NVRkJhRUlzUTBGQlNpeEZRVUV5UWp0QlFVTjJRaXhuUWtGQlNTeG5Ra0ZCWjBJc1EwRkJReXhEUVVGeVFpeEZRVUYzUWp0QlFVTndRaXc0UWtGQll5eExRVUZMTEdGQlFVd3NRMEZCYlVJc1RVRkJha003UVVGRFFTeHhRa0ZCU3l4aFFVRk1MRU5CUVcxQ0xFbEJRVzVDTEVOQlFYZENMRWxCUVhoQ08wRkJRMEVzY1VKQlFVc3NiMEpCUVV3c1EwRkJNRUlzU1VGQk1VSXNRMEZCSzBJc1JVRkJMMEk3UVVGRFNEdEJRVU5FTEhWRFFVRXlRaXhMUVVGTExHOUNRVUZNTEVOQlFUQkNMRmRCUVRGQ0xFVkJRWFZETEUxQlFXeEZPMEZCUTBFc2FVSkJRVXNzYjBKQlFVd3NRMEZCTUVJc1YwRkJNVUlzUlVGQmRVTXNkMEpCUVhaRExFbEJRVzFGTEUxQlFXNUZPMEZCUTBFc2FVSkJRVXNzTmtKQlFVd3NRMEZCYlVNc1YwRkJia01zUlVGQlowUXNkMEpCUVdoRUxFbEJRVFJGTEVWQlFUVkZPMEZCUTBnc1UwRlVSQ3hOUVZOUE8wRkJRMGdzWjBKQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVVzc2JVSkJRVllzUTBGQlRDeEZRVUZ4UXp0QlFVTnFReXh2UWtGQlNUdEJRVU5CTEd0RVFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4TFFVRkxMRzFDUVVGcVF5eEZRVUZ6UkR0QlFVTnNSQ3dyUWtGQlR5eEZRVVF5UXp0QlFVVnNSQ3h6UTBGQll6dEJRVVp2UXl4eFFrRkJkRVE3UVVGSlFTeHJSRUZCYzBJc1NVRkJkRUlzUlVGQk5FSXNTMEZCU3l4dFFrRkJha01zUlVGQmMwUTdRVUZEYkVRc0swSkJRVThzUlVGRU1rTTdRVUZGYkVRc2MwTkJRV003UVVGR2IwTXNjVUpCUVhSRU8wRkJTVWdzYVVKQlZFUXNRMEZUUlN4UFFVRlBMRU5CUVZBc1JVRkJWVHM3UVVGRlVpeDVRa0ZCU3l4TFFVRkxMRzFDUVVGV0xFbEJRV2xETEVWQlFXcERPMEZCUTBFc2VVSkJRVXNzUzBGQlN5eHRRa0ZCVml4SlFVRnBReXhGUVVGcVF6dEJRVU5JTzBGQlEwbzdRVUZEUkN4clEwRkJjMElzUzBGQlN5eExRVUZMTEcxQ1FVRldMRVZCUVN0Q0xFMUJRWEpFTzBGQlEwRXNhVUpCUVVzc1MwRkJTeXh0UWtGQlZpeEZRVUVyUWl4dFFrRkJMMElzU1VGQmMwUXNUVUZCZEVRN1FVRkRRU3hwUWtGQlN5eExRVUZMTEcxQ1FVRldMRVZCUVN0Q0xHMUNRVUV2UWl4SlFVRnpSQ3hGUVVGMFJEdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1VVRkJTU3hoUVVGaExFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFUZENPMEZCUTBFc1VVRkJTU3hSUVVGUkxFdEJRVXNzWVVGQlRDeERRVUZ0UWl4SlFVRnVRaXhGUVVGNVFpeE5RVUY2UWl4RlFVRnBReXhsUVVGcVF5eExRVU5NTEV0QlFVc3NaVUZCVEN4RFFVRnhRaXhKUVVGeVFpeEZRVUV5UWl4TlFVRXpRaXhGUVVGdFF5eGxRVUZ1UXl4RFFVUkxMRWxCUlV3c1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFMUJRVEZDTEVWQlFXdERMR1ZCUVd4RExFTkJSa3NzU1VGSFRDeExRVUZMTEdGQlFVd3NRMEZCYlVJc1NVRkJia0lzUlVGQmVVSXNUVUZCZWtJc1JVRkJhVU1zWlVGQmFrTXNRMEZJU3l4SlFVbE1MRXRCUVVzc1kwRkJUQ3hEUVVGdlFpeEpRVUZ3UWl4RlFVRXdRaXhOUVVFeFFpeEZRVUZyUXl4bFFVRnNReXhEUVVwTExFbEJTMHdzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhKUVVFeFFpeEZRVUZuUXl4TlFVRm9ReXhGUVVGM1F5eGxRVUY0UXl4RFFVeExMRWxCVFV3c1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4SlFVRjRRaXhGUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhsUVVGMFF5eERRVTVMTEVsQlQwd3NTMEZCU3l4alFVRk1MRU5CUVc5Q0xFbEJRWEJDTEVWQlFUQkNMRTFCUVRGQ0xFVkJRV3RETEdWQlFXeERMRU5CVUVzc1NVRlJUQ3hMUVVGTExIVkNRVUZNTEVOQlFUWkNMRWxCUVRkQ0xFVkJRVzFETEUxQlFXNURMRVZCUVRKRExHVkJRVE5ETEVOQlVrc3NTVUZUVEN4SlFWUlFPenRCUVZkQkxGRkJRVWtzVVVGQlNpeEZRVUZqTzBGQlExWXNaVUZCVHl4TFFVRkxMRTlCUVV3c1EwRkJZU3hOUVVGd1FpeEZRVUUwUWp0QlFVTjRRaXhuUWtGQlNTeFBRVUZQTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1JVRkJXRHRCUVVOQkxHMUNRVUZQTEV0QlFVc3NTMEZCU3l4dFFrRkJWaXhEUVVGUU8wRkJRMGc3UVVGRFJDeGhRVUZMTEdGQlFVd3NSMEZCY1VJc1JVRkJja0k3UVVGRFFTeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwZzdPMEZCUlVRc1VVRkJTU3hUUVVGVExHVkJRV1VzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCZUVNc1JVRkJaMFE3UVVGRE5VTXNaVUZCVVN4cFFrRkJhVUlzWTBGQll5eE5RVUZvUXl4SlFVRTBReXh0UWtGQmJVSXNaMEpCUVdkQ0xFMUJRWFJHTEVWQlFTdEdPMEZCUXpOR0xHZENRVUZKTEZkQlFWa3NhVUpCUVdsQ0xHTkJRV01zVFVGQmFFTXNSMEZCTUVNc1MwRkJTeXhqUVVGakxFZEJRV1FzUlVGQkwwTXNSMEZCY1VVc1NVRkJjRVk3UVVGRFFTeG5Ra0ZCU1N4aFFVRmpMRzFDUVVGdFFpeG5Ra0ZCWjBJc1RVRkJjRU1zUjBGQk9FTXNTMEZCU3l4blFrRkJaMElzUjBGQmFFSXNSVUZCYmtRc1IwRkJNa1VzU1VGQk5VWTdRVUZEUVN4blFrRkJTU3hMUVVGS0xFVkJRVmM3UVVGRFVDeDNRa0ZCVVN4TlFVRk5MRlZCUVU0c1EwRkJhVUlzVVVGQmFrSXNSVUZCTWtJc1ZVRkJNMElzUTBGQlVqdEJRVU5JTzBGQlEwUXNhVUpCUVVzc1dVRkJUQ3hEUVVGclFpeFZRVUZzUWl4RlFVRTRRaXhSUVVFNVFpeEZRVUYzUXl4VlFVRjRRenRCUVVOSU8wRkJRMG83TzBGQlJVUXNVVUZCU1N3MlFrRkJOa0lzU1VGQmFrTXNSVUZCZFVNN1FVRkRia01zWVVGQlN5dzJRa0ZCVEN4RFFVRnRReXhYUVVGdVF5eEZRVUZuUkN4M1FrRkJhRVFzU1VGQk5FVXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeGxRVUZzUWl4RFFVRTFSVHRCUVVOSUxFdEJSa1FzVFVGRlR5eEpRVUZKTEhkQ1FVRjNRaXhKUVVFMVFpeEZRVUZyUXp0QlFVTnlReXhoUVVGTExFdEJRVXNzYlVKQlFWWXNSVUZCSzBJc2JVSkJRUzlDTEVsQlFYTkVMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUTBGQmEwSXNaVUZCYkVJc1EwRkJkRVE3UVVGRFNEczdRVUZGUkN4WFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRlFPMEZCUTBnc1EwRjJSMFE3UVVGM1IwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR05CUVROQ0xFZEJRVFJETEZWQlFWVXNTVUZCVml4RlFVRm5RaXhOUVVGb1FpeEZRVUYzUWp0QlFVTm9SU3hSUVVGSkxFOUJRVThzVDBGQlR5eE5RVUZrTEV0QlFYbENMRkZCUVhwQ0xFbEJRWEZETEVOQlFVTXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeFBRVUZQTEUxQlFUZENMRU5CUVRGRExFVkJRV2RHTzBGQlF6VkZMR1ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeGxRVUZsTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzVDBGQlR5eE5RVUUzUWl4RlFVRnhReXhKUVVGeVF5eERRVUV3UXl4SlFVRXhReXhGUVVGblJDeEpRVUZvUkN4RlFVRnpSQ3hOUVVGMFJDeERRVUZ1UWp0QlFVTkJMRkZCUVVrc1QwRkJUeXhaUVVGUUxFdEJRWGRDTEZGQlFYaENMRWxCUVc5RExFOUJRVThzV1VGQlVDeExRVUYzUWl4UlFVRm9SU3hGUVVFd1JUdEJRVU4wUlN4bFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdGQlFUVkNMRVZCUVRKRExFVkJRVU1zVTBGQlV5eFpRVUZXTEVWQlFUTkRMRVZCUVc5RkxFVkJRWEJGTEVWQlFYZEZMRk5CUVhoRkxFVkJRVzFHTEVsQlFXNUdMRVZCUVhsR0xFbEJRWHBHTEVWQlFTdEdMRTFCUVM5R0xFTkJRVkE3UVVGRFNDeExRVVpFTEUxQlJVOHNTVUZCU1N4blFrRkJaMElzVVVGQlR5eFpRVUZRTEhWRVFVRlBMRmxCUVZBc1QwRkJkMElzVVVGQk5VTXNSVUZCYzBRN1FVRkRla1FzWlVGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhoUVVFMVFpeEZRVUV5UXl4RlFVRkRMRk5CUVZNc1lVRkJZU3hQUVVGaUxFbEJRWGRDTEVkQlFXeERMRVZCUVRORExFVkJRVzFHTEdGQlFXRXNVVUZCWWl4SlFVRjVRaXhGUVVFMVJ5eEZRVUZuU0N4aFFVRmhMRlZCUVdJc1NVRkJNa0lzVTBGQk0wa3NSVUZCYzBvc1NVRkJkRW9zUlVGQk5Fb3NTVUZCTlVvc1JVRkJhMHNzVFVGQmJFc3NRMEZCVUR0QlFVTklPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGWVJEdEJRVmxCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4MVFrRkJNMElzUjBGQmNVUXNWVUZCVlN4SlFVRldMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENMR1ZCUVhoQ0xFVkJRWGxETzBGQlF6RkdMRk5CUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEV0QlFVc3NaVUZCY2tJc1JVRkJjME03UVVGRGJFTXNXVUZCU1N4UFFVRlBMRTlCUVU4c1IwRkJVQ3hEUVVGUUxFdEJRWFZDTEZkQlFUTkNMRVZCUVhkRE8wRkJRM0JETzBGQlEwZzdRVUZEUkN4WlFVRkpMSE5DUVVGelFpeExRVUZMTEdWQlFVd3NRMEZCY1VJc1IwRkJja0lzUTBGQk1VSTdRVUZEUVN4aFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NiMEpCUVc5Q0xFMUJRWGhETEVWQlFXZEVMRWRCUVdoRUxFVkJRWEZFTzBGQlEycEVMR2RDUVVGSkxFOUJRVThzYjBKQlFXOUNMRU5CUVhCQ0xFTkJRVmc3UVVGRFFTeG5Ra0ZCU1N4VFFVRlRMRXRCUVVzc1NVRkJUQ3hGUVVGWExFOUJRVThzUjBGQlVDeERRVUZZTEVWQlFYZENMRTFCUVhoQ0xFVkJRV2RETEdWQlFXaERMRU5CUVdJN1FVRkRRU3huUWtGQlNTeFBRVUZQTEUxQlFWQXNTMEZCYTBJc1VVRkJiRUlzU1VGQk9FSXNUMEZCVHl4TlFVRlFMRXRCUVd0Q0xGRkJRWEJFTEVWQlFUaEVPMEZCUXpGRUxIVkNRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHTkJRVFZDTEVWQlFUUkRPMEZCUXk5RExIbENRVUZMTEVkQlJEQkRPMEZCUlM5RExEWkNRVUZUTzBGQlJuTkRMR2xDUVVFMVF5eEZRVWRLTEVWQlNFa3NSVUZIUVN4RlFVaEJMRVZCUjBrc1NVRklTaXhGUVVkVkxFbEJTRllzUlVGSFowSXNUVUZJYUVJc1JVRkhkMElzVlVGSWVFSXNRMEZIYlVNc1NVRklia01zUlVGSGVVTXNSMEZJZWtNc1EwRkJVRHRCUVVsSUxHRkJURVFzVFVGTFR5eEpRVUZKTEZWQlFWVXNVVUZCVHl4TlFVRlFMSFZFUVVGUExFMUJRVkFzVDBGQmEwSXNVVUZCYUVNc1JVRkJNRU03UVVGRE4wTXNiMEpCUVVrc1QwRkJUeXhQUVVGUExFbEJRV3hDTzBGQlEwRXNiMEpCUVVrc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRekZDTEhkQ1FVRkpMRU5CUVVNc1YwRkJWeXhKUVVGWUxFTkJRVXdzUlVGQmRVSTdRVUZEYmtJc09FSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNOa05CUVRaRExFbEJRWFpFTEVOQlFVNDdRVUZEU0R0QlFVTkVMREpDUVVGUExGZEJRVmNzU1VGQldDeERRVUZRTzBGQlEwZ3NhVUpCVEVRc1RVRkxUeXhKUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4UlFVRndRaXhGUVVFNFFqdEJRVU5xUXl3eVFrRkJUeXhYUVVGWExHTkJRV3hDTzBGQlEwZzdRVUZEUkN4dlFrRkJTU3huUWtGQmFVSXNjMEpCUVU4c1QwRkJUeXhQUVVGa0xFMUJRVEJDTEZGQlFUTkNMRWRCUVhWRExFOUJRVThzVDBGQk9VTXNSMEZCZDBRN1FVRkRlRVVzZVVKQlFVc3NSMEZFYlVVN1FVRkZlRVVzTmtKQlFWTXNUMEZCVHl4UFFVRlFMRWxCUVd0Q08wRkJSalpETEdsQ1FVRTFSVHRCUVVsQkxHOUNRVUZKTEdGQlFXRXNUMEZCVHl4VlFVRlFMRWxCUVhOQ0xFMUJRVTBzU1VGQlNTeFBRVUZLTEVOQlFWa3NTVUZCV2l4RlFVRnJRaXhKUVVGc1FpeEZRVUYzUWl4UFFVRjRRaXhEUVVGblF5eExRVUZvUXl4RlFVRjFReXhKUVVGMlF5eERRVUUzUXp0QlFVTkJMSFZDUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeGhRVUYyUWl4RlFVRnpReXhQUVVGUExGRkJRVkFzU1VGQmJVSXNTVUZCZWtRc1JVRkJLMFFzVlVGQkwwUXNSVUZCTWtVc1NVRkJNMFVzUlVGQmFVWXNTVUZCYWtZc1JVRkJkVVlzVFVGQmRrWXNRMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmJFTkVPenRCUVc5RFFTeFRRVUZUTEdkQ1FVRlVMRU5CUVRCQ0xFTkJRVEZDTEVWQlFUWkNMRU5CUVRkQ0xFVkJRV2RETzBGQlF6VkNMRkZCUVVrc1RVRkJUU3hEUVVGV0xFVkJRV0U3UVVGRFZDeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1MwRkJTeXhEUVVGTUxFbEJRVlVzVVVGQlR5eERRVUZRTEhWRVFVRlBMRU5CUVZBc1QwRkJZU3hSUVVGMlFpeEpRVUZ0UXl4UlFVRlBMRU5CUVZBc2RVUkJRVThzUTBGQlVDeFBRVUZoTEZGQlFYQkVMRVZCUVRoRU8wRkJRekZFTEZsQlFVa3NUVUZCVFN4UFFVRk9MRU5CUVdNc1EwRkJaQ3hOUVVGeFFpeE5RVUZOTEU5QlFVNHNRMEZCWXl4RFFVRmtMRU5CUVhwQ0xFVkJRVEpETzBGQlEzWkRMRzFDUVVGUExFdEJRVkE3UVVGRFNDeFRRVVpFTEUxQlJVOHNTVUZCU1N4TlFVRk5MRTlCUVU0c1EwRkJZeXhEUVVGa0xFTkJRVW9zUlVGQmMwSTdRVUZEZWtJc1owSkJRVWtzUlVGQlJTeE5RVUZHTEV0QlFXRXNSVUZCUlN4TlFVRnVRaXhGUVVFeVFqdEJRVU4yUWl4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFJDeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEVWQlFVVXNUVUZCZEVJc1JVRkJPRUlzUjBGQk9VSXNSVUZCYlVNN1FVRkRMMElzYjBKQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZHTEVOQlFXcENMRVZCUVhWQ0xFVkJRVVVzUTBGQlJpeERRVUYyUWl4RFFVRk1MRVZCUVcxRE8wRkJReTlDTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zVTBGVVRTeE5RVk5CTzBGQlEwZ3NaMEpCUVVrc1IwRkJTanRCUVVOQkxHbENRVUZMTEVkQlFVd3NTVUZCV1N4RFFVRmFMRVZCUVdVN1FVRkRXQ3h2UWtGQlNTeEZRVUZGTEVkQlFVWXNUVUZCVnl4VFFVRllMRWxCUVhkQ0xFVkJRVVVzUjBGQlJpeE5RVUZYTEZOQlFYWkRMRVZCUVd0RU8wRkJRemxETERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMFFzYVVKQlFVc3NSMEZCVEN4SlFVRlpMRU5CUVZvc1JVRkJaVHRCUVVOWUxHOUNRVUZKTEVWQlFVVXNSMEZCUml4TlFVRlhMRk5CUVZnc1NVRkJkMElzUlVGQlJTeEhRVUZHTEUxQlFWY3NVMEZCZGtNc1JVRkJhMFE3UVVGRE9VTXNNa0pCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFJDeHBRa0ZCU3l4SFFVRk1MRWxCUVZrc1EwRkJXaXhGUVVGbE8wRkJRMWdzYjBKQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeEhRVUZHTEVOQlFXcENMRVZCUVhsQ0xFVkJRVVVzUjBGQlJpeERRVUY2UWl4RFFVRk1MRVZCUVhWRE8wRkJRMjVETERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFJDeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1MwRkJVRHRCUVVOSU96dEJRVVZFTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4aFFVRXpRaXhIUVVFeVF5eFRRVUZUTEdGQlFWUXNRMEZCZFVJc1NVRkJka0lzUlVGQk5rSXNUVUZCTjBJc1JVRkJjVU1zWlVGQmNrTXNSVUZCYzBRN1FVRkROMFlzVVVGQlNTeExRVUZLTzBGQlEwRXNVVUZCU1N4UlFVRlJMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWl4RlFVRjNRaXhOUVVGNFFpeEZRVUZuUXl4bFFVRm9ReXhEUVVGYUxFVkJRVGhFTzBGQlF6RkVMR1ZCUVU4c1RVRkJUU3hWUVVGT0xFTkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xFMUJRWFpDTEVOQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1VVRkJVU3hMUVVGTExGbEJRVXdzUTBGQmEwSXNTVUZCYkVJc1JVRkJkMElzVFVGQmVFSXNSVUZCWjBNc1pVRkJhRU1zUTBGQldpeEZRVUU0UkR0QlFVTXhSQ3hsUVVGUExFMUJRVTBzVlVGQlRpeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeE5RVUYyUWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVlJFT3p0QlFWZEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhaUVVFelFpeEhRVUV3UXl4VFFVRlRMRmxCUVZRc1EwRkJjMElzU1VGQmRFSXNSVUZCTkVJc1RVRkJOVUlzUlVGQmIwTTdRVUZETVVVc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVMEZCY0VJc1JVRkJLMEk3UVVGRE0wSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHdENRVUZyUWl4SlFVRnNRaXgxUkVGQmEwSXNTVUZCYkVJc1EwRkJTanRCUVVOQkxGRkJRVWtzVTBGQlV5eEpRVUZpTEVWQlFXMUNPMEZCUTJZc2JVSkJRVmNzVFVGQldEdEJRVU5JTEV0QlJrUXNUVUZGVHl4SlFVRkpMRTFCUVUwc1QwRkJUaXhEUVVGakxFbEJRV1FzUTBGQlNpeEZRVUY1UWp0QlFVTTFRaXh0UWtGQlZ5eFBRVUZZTzBGQlEwZzdRVUZEUkN4UlFVRkpMR1ZCUVdVc1QwRkJUeXhKUVVFeFFqdEJRVU5CTEZGQlFVa3NRMEZCUXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhaUVVGa0xFTkJRVXdzUlVGQmEwTTdRVUZET1VJc2RVSkJRV1VzUTBGQlF5eFpRVUZFTEVOQlFXWTdRVUZEU0RzN1FVRkZSQ3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1lVRkJZU3hOUVVGcVF5eEZRVUY1UXl4SFFVRjZReXhGUVVFNFF6dEJRVU14UXl4WlFVRkpMRTlCUVU4c1lVRkJZU3hEUVVGaUxFTkJRVmc3UVVGRFFTeFpRVUZKTEZOQlFWTXNVVUZCVkN4SlFVRnpRaXhUUVVGVExGTkJRVlFzU1VGQmMwSXNZVUZCWVN4UlFVRnVReXhKUVVGblJDeFBRVUZQTEVOQlFWQXNTMEZCWVN4RFFVRjJSaXhGUVVFMFJqdEJRVU40Uml4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzV1VGQk5VSXNSVUZCTUVNN1FVRkROME1zWTBGQlRTeFJRVVIxUXp0QlFVVTNReXhyUWtGQlZTeGhRVUZoTEVsQlFXSXNRMEZCYTBJc1IwRkJiRUk3UVVGR2JVTXNTMEZCTVVNc1JVRkhTaXhGUVVoSkxFVkJSMEVzUlVGSVFTeEZRVWRKTEVsQlNFb3NSVUZIVlN4SlFVaFdMRVZCUjJkQ0xFMUJTR2hDTEVOQlFWQTdRVUZKU0N4RFFYcENSRHM3UVVFeVFrRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmxCUVROQ0xFZEJRVEJETEZOQlFWTXNXVUZCVkN4RFFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4TlFVRTFRaXhGUVVGdlF6dEJRVU14UlN4UlFVRkpMRTlCUVU4c1RVRkJVQ3hOUVVGdFFpeFRRVUYyUWl4RlFVRnJRenRCUVVNNVFpeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRk5CUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4UFFVRlBMRTFCUVZBc1JVRkJaU3hOUVVGdVF5eEZRVUV5UXl4SFFVRXpReXhGUVVGblJEdEJRVU0xUXl4WlFVRkpMRlZCUVZVc1QwRkJUeXhOUVVGUUxFVkJRV1VzUTBGQlppeERRVUZrTzBGQlEwRXNXVUZCU1N4cFFrRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1QwRkJka0lzUTBGQlNpeEZRVUZ4UXp0QlFVTnFReXh0UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NZVUZCTlVJc1JVRkJNa01zUlVGQlF5eFBRVUZSTEU5QlFVOHNTVUZCVUN4TFFVRm5RaXhYUVVGcVFpeEhRVUZuUXl4NVFrRkJaU3hKUVVGbUxFTkJRV2hETEVkQlFYVkVMRWxCUVM5RUxFVkJRVE5ETEVWQlFXbElMRVZCUVdwSUxFVkJRWEZJTEVWQlFYSklMRVZCUVhsSUxFbEJRWHBJTEVWQlFTdElMRWxCUVM5SUxFVkJRWEZKTEUxQlFYSkpMRU5CUVZBN1FVRkRTQ3hEUVZoRU96dEJRV0ZCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4bFFVRXpRaXhIUVVFMlF5eFRRVUZUTEdWQlFWUXNRMEZCZVVJc1NVRkJla0lzUlVGQkswSXNUVUZCTDBJc1JVRkJkVU1zWlVGQmRrTXNSVUZCZDBRN1FVRkRha2NzVjBGQlR5eExRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xFbEJRWGhDTEVWQlFUaENMRTFCUVRsQ0xFVkJRWE5ETEdWQlFYUkRMRXRCUTBFc1MwRkJTeXhqUVVGTUxFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFMUJRVEZDTEVWQlFXdERMR1ZCUVd4RExFTkJSRUVzU1VGRlFTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNUVUZCZGtJc1JVRkJLMElzWlVGQkwwSXNRMEZHUVN4SlFVZEJMRWxCU0ZBN1FVRkpTQ3hEUVV4RU96dEJRVTlCTEVsQlFVa3NiVUpCUVcxQ0xFdEJRVXNzUjBGQlRDeERRVUZUTEVOQlFWUXNSVUZCV1N4RFFVRkRMRVZCUVdJc1EwRkJka0k3UVVGRFFTeEpRVUZKTEc5Q1FVRnZRaXhKUVVGSkxHZENRVUUxUWp0QlFVTkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhyUWtGQk0wSXNSMEZCWjBRc1UwRkJVeXhyUWtGQlZDeERRVUUwUWl4SlFVRTFRaXhGUVVGclF5eE5RVUZzUXl4RlFVRXdRenRCUVVOMFJpeFJRVUZKTEdGQlFXRXNUMEZCVHl4VlFVRlFMRWxCUVhGQ0xFOUJRVThzVjBGQk4wTTdRVUZEUVN4UlFVRkpMR1ZCUVdVc1UwRkJia0lzUlVGQk9FSTdRVUZETVVJc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEU5QlFVOHNTVUZCVUN4TFFVRm5RaXhSUVVGd1FpeEZRVUU0UWp0QlFVTXhRaXhaUVVGSkxGbEJRV0VzVDBGQlR5eFZRVUZTTEVkQlFYTkNMRU5CUVhSRE8wRkJRMEVzV1VGQlNTeGhRVUZoTEdkQ1FVRmlMRWxCUVdsRExGbEJRVmtzYVVKQlFXcEVMRVZCUVc5Rk8wRkJRMmhGTEcxQ1FVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEd0Q1FVRTFRaXhGUVVGblJEdEJRVU51UkN4MVFrRkJUeXhKUVVRMFF6dEJRVVZ1UkN3MFFrRkJXVHRCUVVaMVF5eGhRVUZvUkN4RlFVZEtMRVZCU0Vrc1JVRkhRU3hGUVVoQkxFVkJSMGtzU1VGSVNpeEZRVWRWTEVsQlNGWXNSVUZIWjBJc1RVRklhRUlzUTBGQlVEdEJRVWxJTzBGQlEwbzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVdaRU96dEJRV2xDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1kwRkJNMElzUjBGQk5FTXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFbEJRWGhDTEVWQlFUaENMRTFCUVRsQ0xFVkJRWE5ETzBGQlF6bEZMRkZCUVVrc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRekZDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hQUVVGUExFOUJRVkFzUzBGQmJVSXNVMEZCZGtJc1JVRkJhME03UVVGRE9VSXNXVUZCU1N4UFFVRlBMRTlCUVU4c1QwRkJiRUlzUlVGQk1rSTdRVUZEZGtJc2JVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc1kwRkJOVUlzUlVGQk5FTTdRVUZETDBNc2RVSkJRVThzU1VGRWQwTTdRVUZGTDBNc2VVSkJRVk1zVDBGQlR6dEJRVVlyUWl4aFFVRTFReXhGUVVkS0xFVkJTRWtzUlVGSFFTeFZRVWhCTEVWQlIxa3NTVUZJV2l4RlFVZHJRaXhKUVVoc1FpeEZRVWQzUWl4TlFVaDRRaXhEUVVGUU8wRkJTVWc3UVVGRFJDeFpRVUZKTEU5QlFVOHNaMEpCUVZBc1NVRkJNa0lzVTBGQlV5eFBRVUZQTEU5QlFTOURMRVZCUVhkRU8wRkJRM0JFTEcxQ1FVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEhkQ1FVRTFRaXhGUVVGelJEdEJRVU42UkN4MVFrRkJUeXhKUVVSclJEdEJRVVY2UkN4NVFrRkJVeXhQUVVGUE8wRkJSbmxETEdGQlFYUkVMRVZCUjBvc1JVRklTU3hGUVVkQkxHMUNRVWhCTEVWQlIzRkNMRWxCU0hKQ0xFVkJSekpDTEVsQlNETkNMRVZCUjJsRExFMUJTR3BETEVOQlFWQTdRVUZKU0R0QlFVTktPMEZCUTBRc1VVRkJTU3hQUVVGUExFOUJRVkFzUzBGQmJVSXNVMEZCZGtJc1JVRkJhME03UVVGRE9VSXNXVUZCU1N4UFFVRlBMRTlCUVU4c1QwRkJiRUlzUlVGQk1rSTdRVUZEZGtJc2JVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc1kwRkJOVUlzUlVGQk5FTTdRVUZETDBNc2RVSkJRVThzU1VGRWQwTTdRVUZGTDBNc2VVSkJRVk1zVDBGQlR6dEJRVVlyUWl4aFFVRTFReXhGUVVkS0xFVkJTRWtzUlVGSFFTeFZRVWhCTEVWQlIxa3NTVUZJV2l4RlFVZHJRaXhKUVVoc1FpeEZRVWQzUWl4TlFVaDRRaXhEUVVGUU8wRkJTVWc3UVVGRFJDeFpRVUZKTEU5QlFVOHNaMEpCUVZBc1NVRkJNa0lzVTBGQlV5eFBRVUZQTEU5QlFTOURMRVZCUVhkRU8wRkJRM0JFTEcxQ1FVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEhkQ1FVRTFRaXhGUVVGelJEdEJRVU42UkN4MVFrRkJUeXhKUVVSclJEdEJRVVY2UkN4NVFrRkJVeXhQUVVGUE8wRkJSbmxETEdGQlFYUkVMRVZCUjBvc1JVRklTU3hGUVVkQkxHMUNRVWhCTEVWQlIzRkNMRWxCU0hKQ0xFVkJSekpDTEVsQlNETkNMRVZCUjJsRExFMUJTR3BETEVOQlFWQTdRVUZKU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGcVEwUTdPMEZCYlVOQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeFhRVUV6UWl4SFFVRjVReXhUUVVGVExGZEJRVlFzUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzVFVGQk0wSXNSVUZCYlVNN1FVRkRlRVVzVVVGQlNTeFBRVUZQTEVsQlFWQXNTMEZCWjBJc1VVRkJjRUlzUlVGQk9FSTdRVUZETVVJc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEUxQlFVMHNTVUZCVGl4TlFVRm5RaXhKUVVGb1FpeEpRVUYzUWl4VFFVRlRMRkZCUVdwRExFbEJRVFpETEZOQlFWTXNRMEZCUXl4UlFVRXpSQ3hGUVVGeFJUdEJRVU5xUlN4bFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEcxQ1FVRTFRaXhGUVVGcFJDeEZRVUZETEU5QlFVOHNTVUZCVWl4RlFVRnFSQ3hGUVVGblJTeEZRVUZvUlN4RlFVRnZSU3hQUVVGd1JTeEZRVUUyUlN4SlFVRTNSU3hGUVVGdFJpeEpRVUZ1Uml4RlFVRjVSaXhOUVVGNlJpeERRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVZKRU96dEJRVlZCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4alFVRXpRaXhIUVVFMFF5eFRRVUZUTEdOQlFWUXNRMEZCZDBJc1NVRkJlRUlzUlVGQk9FSXNUVUZCT1VJc1JVRkJjME1zWlVGQmRFTXNSVUZCZFVRN1FVRkRMMFlzVjBGQlR5eExRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFbEJRVEZDTEVWQlFXZERMRTFCUVdoRExFVkJRWGRETEdWQlFYaERMRXRCUTBFc1MwRkJTeXh4UWtGQlRDeERRVUV5UWl4SlFVRXpRaXhGUVVGcFF5eE5RVUZxUXl4RlFVRjVReXhsUVVGNlF5eERRVVJCTEVsQlJVRXNTVUZHVUR0QlFVZElMRU5CU2tRN08wRkJUVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEc5Q1FVRXpRaXhIUVVGclJDeFRRVUZUTEc5Q1FVRlVMRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRTFCUVhCRExFVkJRVFJETzBGQlF6RkdMRkZCUVVrc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRekZDTEdWQlFVOHNTVUZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hQUVVGUExGTkJRVkFzUzBGQmNVSXNVMEZCZWtJc1JVRkJiME03UVVGRGFFTXNXVUZCU1N4TFFVRkxMRTFCUVV3c1IwRkJZeXhQUVVGUExGTkJRWHBDTEVWQlFXOURPMEZCUTJoRExHMUNRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHMUNRVUUxUWl4RlFVRnBSRHRCUVVOd1JDeDNRa0ZCVVN4TFFVRkxMRTFCUkhWRE8wRkJSWEJFTEhsQ1FVRlRMRTlCUVU4N1FVRkdiME1zWVVGQmFrUXNSVUZIU2l4RlFVaEpMRVZCUjBFc1dVRklRU3hGUVVkakxFbEJTR1FzUlVGSGIwSXNTVUZJY0VJc1JVRkhNRUlzVFVGSU1VSXNRMEZCVUR0QlFVbElPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVTBGQlVDeExRVUZ4UWl4VFFVRjZRaXhGUVVGdlF6dEJRVU5vUXl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVTBGQmVrSXNSVUZCYjBNN1FVRkRhRU1zYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYTBKQlFUVkNMRVZCUVdkRU8wRkJRMjVFTEhkQ1FVRlJMRXRCUVVzc1RVRkVjME03UVVGRmJrUXNlVUpCUVZNc1QwRkJUenRCUVVadFF5eGhRVUZvUkN4RlFVZEtMRVZCU0Vrc1JVRkhRU3haUVVoQkxFVkJSMk1zU1VGSVpDeEZRVWR2UWl4SlFVaHdRaXhGUVVjd1FpeE5RVWd4UWl4RFFVRlFPMEZCU1VnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmNrSkVPenRCUVhWQ1FTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNjVUpCUVROQ0xFZEJRVzFFTEZOQlFWTXNjVUpCUVZRc1EwRkJLMElzU1VGQkwwSXNSVUZCY1VNc1RVRkJja01zUlVGQk5rTTdRVUZETlVZc1VVRkJTU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1NVRkJOa0lzVDBGQlR5eFBRVUZQTEU5QlFXUXNTMEZCTUVJc1VVRkJNVUlzU1VGQmMwTXNSVUZCUlN4UFFVRlBMRTlCUVZBc1dVRkJNRUlzVFVGQk5VSXNRMEZCZGtVc1JVRkJOa2M3UVVGRGVrY3NaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxFMUJRVW83UVVGRFFTeFJRVUZKTEU5QlFVOHNUMEZCVUN4WlFVRXdRaXhOUVVFNVFpeEZRVUZ6UXp0QlFVTnNReXhwUWtGQlV5eFBRVUZQTEU5QlFXaENPMEZCUTBnc1MwRkdSQ3hOUVVkTE8wRkJRMFFzV1VGQlNTeEpRVUZLTzFsQlFWVXNVVUZCVVN4RlFVRnNRanM3TzBGQlIwRXNXVUZCU1N4VlFVRlZMRTlCUVU4c1QwRkJVQ3hEUVVGbExFdEJRV1lzUTBGQmNVSXNiMEpCUVhKQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEU5QlFVb3NSVUZCWVR0QlFVTlVMRzFDUVVGUExGRkJRVkVzUTBGQlVpeERRVUZRTzBGQlEwRXNiMEpCUVZFc1VVRkJVU3hEUVVGU0xFTkJRVkk3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkN4dFFrRkJUeXhQUVVGUExFOUJRV1E3UVVGRFNEdEJRVU5FTEdsQ1FVRlRMRWxCUVVrc1RVRkJTaXhEUVVGWExFbEJRVmdzUlVGQmFVSXNTMEZCYWtJc1EwRkJWRHRCUVVOSU8wRkJRMFFzVVVGQlNTeERRVUZETEU5QlFVOHNTVUZCVUN4RFFVRlpMRWxCUVZvc1EwRkJUQ3hGUVVGM1FqdEJRVU53UWl4bFFVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdOQlFUVkNMRVZCUVRSRExFVkJRVU1zVTBGQlV5eFBRVUZQTEU5QlFXcENMRVZCUVRWRExFVkJRWFZGTEVWQlFYWkZMRVZCUVRKRkxGVkJRVE5GTEVWQlFYVkdMRWxCUVhaR0xFVkJRVFpHTEVsQlFUZEdMRVZCUVcxSExFMUJRVzVITEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJNVUpFT3p0QlFUUkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRVZCUVRaQ0xFMUJRVGRDTEVWQlFYRkRMR1ZCUVhKRExFVkJRWE5FTzBGQlF6ZEdMRkZCUVVrc1EwRkJReXhOUVVGTkxFOUJRVTRzUTBGQll5eEpRVUZrTEVOQlFVd3NSVUZCTUVJN1FVRkRkRUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRXRCUVVzc2JVSkJRVXdzUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzVFVGQkwwSXNSVUZCZFVNc1pVRkJka01zUzBGRFFTeExRVUZMTEhkQ1FVRk1MRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRTFCUVhCRExFVkJRVFJETEdWQlFUVkRMRU5CUkVFc1NVRkZRU3hMUVVGTExHdENRVUZNTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVOQlJrRXNTVUZIUVN4SlFVaFFPMEZCU1Vnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNiVUpCUVROQ0xFZEJRV2xFTEZOQlFWTXNiVUpCUVZRc1EwRkJOa0lzU1VGQk4wSXNSVUZCYlVNc1RVRkJia01zUlVGQk1rTTdRVUZEZUVZc1VVRkJTU3hMUVVGS08wRkJRMEVzVVVGQlNTeFBRVUZQTEZGQlFWQXNTMEZCYjBJc1UwRkJlRUlzUlVGQmJVTTdRVUZETDBJc1dVRkJTU3hMUVVGTExFMUJRVXdzUjBGQll5eFBRVUZQTEZGQlFYcENMRVZCUVcxRE8wRkJReTlDTEc5Q1FVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEd0Q1FVRTFRaXhGUVVGblJEdEJRVU53UkN4M1FrRkJVU3hMUVVGTExFMUJSSFZETzBGQlJYQkVMSGxDUVVGVExFOUJRVTg3UVVGR2IwTXNZVUZCYUVRc1JVRkhUQ3hGUVVoTExFVkJSMFFzVjBGSVF5eEZRVWRaTEVsQlNGb3NSVUZIYTBJc1NVRkliRUlzUlVGSGQwSXNUVUZJZUVJc1EwRkJVanRCUVVsQkxHZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xIVkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSQ3hSUVVGSkxFOUJRVThzVVVGQlVDeExRVUZ2UWl4VFFVRjRRaXhGUVVGdFF6dEJRVU12UWl4WlFVRkpMRXRCUVVzc1RVRkJUQ3hIUVVGakxFOUJRVThzVVVGQmVrSXNSVUZCYlVNN1FVRkRMMElzYjBKQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYVVKQlFUVkNMRVZCUVN0RE8wRkJRMjVFTEhkQ1FVRlJMRXRCUVVzc1RVRkVjME03UVVGRmJrUXNlVUpCUVZNc1QwRkJUenRCUVVadFF5eGhRVUV2UXl4RlFVZE1MRVZCU0Vzc1JVRkhSQ3hYUVVoRExFVkJSMWtzU1VGSVdpeEZRVWRyUWl4SlFVaHNRaXhGUVVkM1FpeE5RVWg0UWl4RFFVRlNPMEZCU1VFc1owSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJla0pFT3p0QlFUSkNRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzZDBKQlFUTkNMRWRCUVhORUxGTkJRVk1zZDBKQlFWUXNRMEZCYTBNc1NVRkJiRU1zUlVGQmQwTXNUVUZCZUVNc1JVRkJaMFE3UVVGRGJFY3NVVUZCU1N4UFFVRlBMRmRCUVZnc1JVRkJkMEk3UVVGRGNFSXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEV0QlFVc3NUVUZCZWtJc1JVRkJhVU1zUjBGQmFrTXNSVUZCYzBNN1FVRkRiRU1zYVVKQlFVc3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJha0lzUlVGQmIwSXNTVUZCU1N4TFFVRkxMRTFCUVRkQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEc5Q1FVRkpMR2xDUVVGcFFpeExRVUZMTEVOQlFVd3NRMEZCYWtJc1JVRkJNRUlzUzBGQlN5eERRVUZNTEVOQlFURkNMRU5CUVVvc1JVRkJkME03UVVGRGNFTXNkMEpCUVVrc1VVRkJVU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4WlFVRTFRaXhGUVVFd1F6dEJRVU5zUkN4blEwRkJVU3hEUVVRd1F6dEJRVVZzUkN4blEwRkJVVHRCUVVZd1F5eHhRa0ZCTVVNc1JVRkhWQ3hGUVVoVExFVkJSMHdzWTBGSVN5eEZRVWRYTEVsQlNGZ3NSVUZIYVVJc1NVRklha0lzUlVGSGRVSXNUVUZJZGtJc1EwRkJXanRCUVVsQkxIZENRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xDdENRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZxUWtRN08wRkJiVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4clFrRkJNMElzUjBGQlowUXNVMEZCVXl4clFrRkJWQ3hEUVVFMFFpeEpRVUUxUWl4RlFVRnJReXhOUVVGc1F5eEZRVUV3UXl4bFFVRXhReXhGUVVFeVJEdEJRVU4yUnl4UlFVRkpMRTlCUVU4c1MwRkJVQ3hMUVVGcFFpeFRRVUZ5UWl4RlFVRm5RenRCUVVNMVFpeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1MwRkJTaXhGUVVGWExFTkJRVmc3UVVGRFFTeFJRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRTlCUVU4c1MwRkJja0lzUTBGQlNpeEZRVUZwUXp0QlFVTTNRaXhoUVVGTExFbEJRVWtzUTBGQlZDeEZRVUZaTEVsQlFVa3NTMEZCU3l4TlFVRnlRaXhGUVVFMlFpeEhRVUUzUWl4RlFVRnJRenRCUVVNNVFpeG5Ra0ZCU1N4SlFVRkpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFMUJRWEpDTEVWQlFUWkNPMEZCUTNwQ0xHOUNRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUTBGQlRDeERRVUZxUWl4RlFVRXdRaXhQUVVGUExFdEJRVkFzUTBGQllTeERRVUZpTEVOQlFURkNMRVZCUVRKRExFTkJRVU1zUTBGQlJDeERRVUV6UXl4RlFVRm5SQ3hEUVVGRExFOUJRVVFzUlVGQlZTeERRVUZXTEVOQlFXaEVMRVZCUVRoRUxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUYwUml4RFFVRmFMRVZCUVhOSE8wRkJRMnhITERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS0xHRkJTa1FzVFVGSlR5eEpRVUZKTEU5QlFVOHNaVUZCVUN4TFFVRXlRaXhUUVVFdlFpeEZRVUV3UXp0QlFVTTNReXh2UWtGQlNTeFBRVUZQTEU5QlFVOHNaVUZCWkN4TFFVRnJReXhUUVVGMFF5eEZRVUZwUkR0QlFVTTNReXgzUWtGQlNTeERRVUZETEU5QlFVOHNaVUZCV2l4RlFVRTJRanRCUVVONlFpeG5RMEZCVXl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHpRa0ZCTlVJc1JVRkJiMFFzUlVGQmNFUXNSVUZCZDBRc1RVRkJUU3hEUVVFNVJDeEZRVUZwUlN4clFrRkJha1VzUlVGQmNVWXNTVUZCY2tZc1JVRkJNa1lzU1VGQk0wWXNSVUZCYVVjc1RVRkJha2NzUTBGQlZEdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTEcxRFFVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zYVVKQlVFUXNUVUZQVHl4SlFVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEdWQlFXcERMRVZCUVd0RUxFTkJRVU1zUTBGQlJDeERRVUZzUkN4RlFVRjFSQ3hEUVVGRExHbENRVUZFTEVOQlFYWkVMRVZCUVRSRkxHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeERRVUZ3Unl4RFFVRmFMRVZCUVc5SU8wRkJRM1pJTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNpeExRVzVDUkN4TlFXMUNUenRCUVVOSUxHRkJRVXNzU1VGQlNTeERRVUZVTEVWQlFWa3NTVUZCU1N4TFFVRkxMRTFCUVhKQ0xFVkJRVFpDTEVkQlFUZENMRVZCUVd0RE8wRkJRemxDTEdkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NRMEZCVEN4RFFVRnFRaXhGUVVFd1FpeFBRVUZQTEV0QlFXcERMRVZCUVhkRExFTkJRVU1zUTBGQlJDeERRVUY0UXl4RlFVRTJReXhEUVVGRExFOUJRVVFzUTBGQk4wTXNSVUZCZDBRc2EwSkJRV3RDTEVkQlFXeENMRWRCUVhkQ0xFTkJRV2hHTEVOQlFWb3NSVUZCWjBjN1FVRkROVVlzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFFTkVPenRCUVd0RFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVTBGQlV5eGpRVUZVTEVOQlFYZENMRWxCUVhoQ0xFVkJRVGhDTEUxQlFUbENMRVZCUVhORExHVkJRWFJETEVWQlFYVkVPMEZCUXk5R0xGRkJRVWtzVVVGQlR5eEpRVUZRTEhWRVFVRlBMRWxCUVZBc1QwRkJaMElzVVVGQmFFSXNTVUZCTkVJc1UwRkJVeXhKUVVGeVF5eEpRVUUyUXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVGa0xFTkJRV3BFTEVWQlFYTkZPMEZCUTJ4RkxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNWMEZCVHl4TFFVRkxMRGhDUVVGTUxFTkJRVzlETEVsQlFYQkRMRVZCUVRCRExFMUJRVEZETEVWQlFXdEVMR1ZCUVd4RUxFdEJRMEVzUzBGQlN5eG5RMEZCVEN4RFFVRnpReXhKUVVGMFF5eEZRVUUwUXl4TlFVRTFReXhGUVVGdlJDeGxRVUZ3UkN4RFFVUkJMRWxCUlVFc1MwRkJTeXgzUWtGQlRDeERRVUU0UWl4SlFVRTVRaXhGUVVGdlF5eE5RVUZ3UXl4RlFVRTBReXhsUVVFMVF5eERRVVpCTEVsQlIwRXNTMEZCU3l3d1FrRkJUQ3hEUVVGblF5eEpRVUZvUXl4RlFVRnpReXhOUVVGMFF5eEZRVUU0UXl4bFFVRTVReXhEUVVoQkxFbEJTVUVzU1VGS1VEdEJRVXRJTEVOQlZFUTdPMEZCVjBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xEaENRVUV6UWl4SFFVRTBSQ3hUUVVGVExEaENRVUZVTEVOQlFYZERMRWxCUVhoRExFVkJRVGhETEUxQlFUbERMRVZCUVhORU8wRkJRemxITEZGQlFVa3NUMEZCVHl4dlFrRkJXU3hKUVVGYUxFTkJRVmc3UVVGRFFTeFJRVUZKTEV0QlFVbzdRVUZEUVN4UlFVRkpMRTlCUVU4c1lVRkJVQ3hMUVVGNVFpeFRRVUUzUWl4RlFVRjNRenRCUVVOd1F5eFpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1lVRkJla0lzUlVGQmQwTTdRVUZEY0VNc2IwSkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc2VVSkJRVFZDTEVWQlFYVkVPMEZCUXpORUxDdENRVUZsTEV0QlFVc3NUVUZFZFVNN1FVRkZNMFFzZVVKQlFWTXNUMEZCVHp0QlFVWXlReXhoUVVGMlJDeEZRVWRNTEVWQlNFc3NSVUZIUkN4blFrRklReXhGUVVkcFFpeEpRVWhxUWl4RlFVZDFRaXhKUVVoMlFpeEZRVWMyUWl4TlFVZzNRaXhEUVVGU08wRkJTVUVzWjBKQlFVa3NTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVOQlFVb3NSVUZCTmtJN1FVRkRla0lzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxGRkJRVWtzVDBGQlR5eGhRVUZRTEV0QlFYbENMRk5CUVRkQ0xFVkJRWGRETzBGQlEzQkRMRmxCUVVrc1MwRkJTeXhOUVVGTUxFZEJRV01zVDBGQlR5eGhRVUY2UWl4RlFVRjNRenRCUVVOd1F5eHZRa0ZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eDVRa0ZCTlVJc1JVRkJkVVE3UVVGRE0wUXNLMEpCUVdVc1MwRkJTeXhOUVVSMVF6dEJRVVV6UkN4NVFrRkJVeXhQUVVGUE8wRkJSakpETEdGQlFYWkVMRVZCUjB3c1JVRklTeXhGUVVkRUxHZENRVWhETEVWQlIybENMRWxCU0dwQ0xFVkJSM1ZDTEVsQlNIWkNMRVZCUnpaQ0xFMUJTRGRDTEVOQlFWSTdRVUZKUVN4blFrRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRXhRa1E3TzBGQk5FSkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhuUTBGQk0wSXNSMEZCT0VRc1UwRkJVeXhuUTBGQlZDeERRVUV3UXl4SlFVRXhReXhGUVVGblJDeE5RVUZvUkN4RlFVRjNSRHRCUVVOc1NDeFJRVUZKTEU5QlFVOHNVVUZCVUN4TFFVRnZRaXhUUVVGNFFpeEZRVUZ0UXp0QlFVTXZRaXhoUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhSUVVGUUxFTkJRV2RDTEUxQlFYQkRMRVZCUVRSRExFZEJRVFZETEVWQlFXbEVPMEZCUXpkRExHZENRVUZKTEUxQlFVMHNUMEZCVHl4UlFVRlFMRU5CUVdkQ0xFTkJRV2hDTEVOQlFWWTdRVUZEUVN4blFrRkJTU3hMUVVGTExFZEJRVXdzVFVGQll5eFRRVUZzUWl4RlFVRTJRanRCUVVONlFpeHZRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTEdWQlFUVkNMRVZCUVRaRExFVkJRVU1zUzBGQlN5eEhRVUZPTEVWQlFUZERMRVZCUVhsRUxFVkJRWHBFTEVWQlFUWkVMR1ZCUVdVc1EwRkJOVVVzUlVGQkswVXNTVUZCTDBVc1JVRkJjVVlzU1VGQmNrWXNSVUZCTWtZc1RVRkJNMFlzUTBGQldqdEJRVU5CTEc5Q1FVRkpMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZxUWl4RFFVRktMRVZCUVRaQ08wRkJRM3BDTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWWtRN08wRkJaVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEhkQ1FVRXpRaXhIUVVGelJDeFRRVUZUTEhkQ1FVRlVMRU5CUVd0RExFbEJRV3hETEVWQlFYZERMRTFCUVhoRExFVkJRV2RFTEdWQlFXaEVMRVZCUVdsRk8wRkJRMjVJTEZGQlFVa3NTMEZCU2p0QlFVTkJMRk5CUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEVsQlFXaENMRVZCUVhOQ08wRkJRMnhDTEZsQlFVa3NhVUpCUVdsQ0xHdENRVUZyUWl4SFFVRnNRaXhIUVVGM1FpeEpRVUZKTEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTlCUVhoQ0xFTkJRV2RETEV0QlFXaERMRVZCUVhWRExFbEJRWFpETEVOQlFUZERPMEZCUTBFc1dVRkJTU3hoUVVGaExFdEJRV3BDTzBGQlEwRXNXVUZCU1N4UFFVRlBMRlZCUVZBc1MwRkJjMElzVTBGQmRFSXNTVUZCYlVNc1QwRkJUeXhWUVVGUUxFTkJRV3RDTEVkQlFXeENMRTFCUVRKQ0xGTkJRV3hGTEVWQlFUWkZPMEZCUTNwRkxIbENRVUZoTEVsQlFXSTdRVUZEUVN4blFrRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRkxMRWRCUVV3c1EwRkJha0lzUlVGQk5FSXNUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFZEJRV3hDTEVOQlFUVkNMRVZCUVc5RUxFTkJRVU1zUjBGQlJDeERRVUZ3UkN4RlFVRXlSQ3hEUVVGRExGbEJRVVFzUlVGQlpTeEhRVUZtTEVOQlFUTkVMRVZCUVdkR0xHTkJRV2hHTEVOQlFWb3NSVUZCTmtjN1FVRkRla2NzZFVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3haUVVGSkxFOUJRVThzYVVKQlFWQXNTMEZCTmtJc1UwRkJha01zUlVGQk5FTTdRVUZEZUVNc2FVSkJRVXNzU1VGQlNTeFZRVUZVTEVsQlFYVkNMRTlCUVU4c2FVSkJRVGxDTEVWQlFXbEVPMEZCUXpkRExHOUNRVUZKTEZOQlFWTXNTVUZCU1N4TlFVRktMRU5CUVZjc1ZVRkJXQ3hEUVVGaU8wRkJRMEVzYjBKQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1IwRkJXaXhEUVVGS0xFVkJRWE5DTzBGQlEyeENMR2xEUVVGaExFbEJRV0k3UVVGRFFTeDNRa0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVkQlFVd3NRMEZCYWtJc1JVRkJORUlzVDBGQlR5eHBRa0ZCVUN4RFFVRjVRaXhWUVVGNlFpeERRVUUxUWl4RlFVRnJSU3hEUVVGRExFZEJRVVFzUTBGQmJFVXNSVUZCZVVVc1EwRkJReXh0UWtGQlJDeEZRVUZ6UWl4VlFVRjBRaXhEUVVGNlJTeEZRVUUwUnl4alFVRTFSeXhEUVVGYUxFVkJRWGxKTzBGQlEzSkpMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmxCUVVrc1EwRkJReXhWUVVGTUxFVkJRV2xDTzBGQlEySXNaMEpCUVVrc1QwRkJUeXh2UWtGQlVDeExRVUZuUXl4VFFVRndReXhGUVVFclF6dEJRVU16UXl4dlFrRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xIbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzTWtKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3h2UWtGQlNTeFBRVUZQTEU5QlFVOHNiMEpCUVdRc1MwRkJkVU1zVTBGQk0wTXNSVUZCYzBRN1FVRkRiRVFzZDBKQlFVa3NRMEZCUXl4UFFVRlBMRzlDUVVGYUxFVkJRV3RETzBGQlF6bENMR2REUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMRFJDUVVFMVFpeEZRVUV3UkN4RlFVRkRMRXRCUVVzc1IwRkJUaXhGUVVFeFJDeEZRVUZ6UlN4RlFVRjBSU3hGUVVFd1JTeDFRa0ZCTVVVc1JVRkJiVWNzU1VGQmJrY3NSVUZCZVVjc1NVRkJla2NzUlVGQkswY3NUVUZCTDBjc1JVRkJkVWdzVlVGQmRrZ3NRMEZCYTBrc1IwRkJiRWtzUlVGQmRVa3NTVUZCZGtrc1EwRkJVanRCUVVOQkxEUkNRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xHMURRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvc2FVSkJVRVFzVFVGUFR6dEJRVU5JTEhkQ1FVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFVc3NSMEZCVEN4RFFVRnFRaXhGUVVFMFFpeFBRVUZQTEc5Q1FVRnVReXhGUVVGNVJDeERRVUZETEVkQlFVUXNRMEZCZWtRc1JVRkJaMFVzUTBGQlF5eHpRa0ZCUkN4RFFVRm9SU3hGUVVFd1JpeGpRVUV4Uml4RFFVRmFMRVZCUVhWSU8wRkJRMjVJTEN0Q1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG9zWVVGcVFrUXNUVUZwUWs4c1NVRkJTU3hMUVVGTExITkNRVUZNTEVsQlFTdENMRU5CUVVNc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4alFVRjRRaXhEUVVGd1F5eEZRVUUyUlR0QlFVTm9SaXh4UWtGQlN5eHZRa0ZCVEN4RFFVRXdRaXhqUVVFeFFpeEpRVUUwUXl4SlFVRTFRenRCUVVOSU8wRkJRMG9zVTBGeVFrUXNUVUZ4UWs4c1NVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUTNCRExHbENRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xHTkJRWGhDTEVsQlFUQkRMRWxCUVRGRE8wRkJRMEVzYlVKQlFVOHNTMEZCU3l4dlFrRkJUQ3hEUVVFd1FpeGpRVUV4UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQmFrUkVPenRCUVcxRVFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNNRUpCUVROQ0xFZEJRWGRFTEZOQlFWTXNNRUpCUVZRc1EwRkJiME1zU1VGQmNFTXNSVUZCTUVNc1RVRkJNVU1zUlVGQmEwUXNaVUZCYkVRc1JVRkJiVVU3UVVGRGRrZ3NVVUZCU1N4TFFVRktPMEZCUTBFc1VVRkJTU3hQUVVGUExGbEJRVkFzUzBGQmQwSXNVMEZCTlVJc1JVRkJkVU03UVVGRGJrTXNZVUZCU3l4SlFVRkpMRTFCUVZRc1NVRkJiVUlzVDBGQlR5eFpRVUV4UWl4RlFVRjNRenRCUVVOd1F5eG5Ra0ZCU1N4TFFVRkxMRTFCUVV3c1RVRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzYjBKQlFVa3NUVUZCVFN4UFFVRlBMRmxCUVZBc1EwRkJiMElzVFVGQmNFSXNRMEZCVmp0QlFVTkJMRzlDUVVGSkxFOUJRVThzUjBGQlVDeExRVUZsTEZGQlFXNUNMRVZCUVRaQ08wRkJRM3BDTEhkQ1FVRkpMRXRCUVVzc1IwRkJUQ3hOUVVGakxGTkJRV3hDTEVWQlFUWkNPMEZCUTNwQ0xHZERRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExIRkNRVUUxUWl4RlFVRnRSRHRCUVVOMlJDeHBRMEZCU3l4TlFVUnJSRHRCUVVWMlJDeHhRMEZCVXp0QlFVWTRReXg1UWtGQmJrUXNSVUZIVEN4RlFVaExMRVZCUjBRc1JVRklReXhGUVVkSExFbEJTRWdzUlVGSFV5eEpRVWhVTEVWQlIyVXNUVUZJWml4RlFVZDFRaXhWUVVoMlFpeERRVWRyUXl4SlFVaHNReXhGUVVkM1F5eE5RVWg0UXl4RlFVZG5SQ3hWUVVob1JDeERRVWN5UkN4SlFVZ3pSQ3hGUVVkcFJTeGpRVWhxUlN4RFFVRlNPMEZCU1VFc05FSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2JVTkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2l4cFFrRldSQ3hOUVZWUExFbEJRVWtzVFVGQlRTeFBRVUZPTEVOQlFXTXNSMEZCWkN4RFFVRktMRVZCUVhkQ08wRkJRek5DTEhsQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NTVUZCU1N4TlFVRjRRaXhGUVVGblF5eEhRVUZvUXl4RlFVRnhRenRCUVVOcVF5dzBRa0ZCU1N4alFVRmpMRWxCUVVrc1EwRkJTaXhEUVVGc1FqdEJRVU5CTERSQ1FVRkpMRXRCUVVzc1YwRkJUQ3hOUVVGelFpeFRRVUV4UWl4RlFVRnhRenRCUVVOcVF5eHZRMEZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eHhRa0ZCTlVJc1JVRkJiVVE3UVVGRGRrUXNjVU5CUVVzc1RVRkVhMFE3UVVGRmRrUXNlVU5CUVZNN1FVRkdPRU1zTmtKQlFXNUVMRVZCUjB3c1JVRklTeXhGUVVkRUxFMUJRVTBzUTBGSVRDeEZRVWRSTEVsQlNGSXNSVUZIWXl4SlFVaGtMRVZCUjI5Q0xFMUJTSEJDTEVWQlJ6UkNMRlZCU0RWQ0xFTkJSM1ZETEVsQlNIWkRMRVZCUnpaRExFMUJTRGRETEVWQlIzRkVMRlZCU0hKRUxFTkJSMmRGTEVsQlNHaEZMRVZCUjNORkxHTkJTSFJGTEVOQlFWSTdRVUZKUVN4blEwRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNTMEZCYWtJc1EwRkJTaXhGUVVFMlFqdEJRVU42UWl4MVEwRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwb3NhVUpCWWswc1RVRmhRVHRCUVVOSUxIZENRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRWRCUVhaQ0xFVkJRVFJDTEVWQlFUVkNMRVZCUVdkRExFTkJRVU1zWTBGQlJDeEZRVUZwUWl4TlFVRnFRaXhEUVVGb1F5eEZRVUV3UkN4bFFVRXhSQ3hEUVVGYUxFVkJRWGRHTzBGQlEzQkdMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGMFEwUTdPMEZCZDBOQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHZRa0ZCTTBJc1IwRkJhMFFzVTBGQlV5eHZRa0ZCVkN4RFFVRTRRaXhKUVVFNVFpeEZRVUZ2UXl4TlFVRndReXhGUVVFMFF5eGxRVUUxUXl4RlFVRTJSRHRCUVVNelJ5eFhRVUZQTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4TFFVTkJMRXRCUVVzc1lVRkJUQ3hEUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhOUVVGNlFpeEZRVUZwUXl4bFFVRnFReXhEUVVSQkxFbEJSVUVzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEUxQlFYcENMRVZCUVdsRExHVkJRV3BETEVOQlJrRXNTVUZIUVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1RVRkJka0lzUlVGQkswSXNaVUZCTDBJc1EwRklRU3hKUVVsQkxFbEJTbEE3UVVGTFNDeERRVTVFT3p0QlFWRkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhoUVVFelFpeEhRVUV5UXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1RVRkJOMElzUlVGQmNVTXNaVUZCY2tNc1JVRkJjMFE3UVVGRE4wWXNVVUZCU1N4UFFVRlBMRXRCUVZBc1MwRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRXRCUVVvN1FVRkRRU3hUUVVGTExFbEJRVWtzU1VGQlNTeERRVUZpTEVWQlFXZENMRWxCUVVrc1QwRkJUeXhMUVVGUUxFTkJRV0VzVFVGQmFrTXNSVUZCZVVNc1IwRkJla01zUlVGQk9FTTdRVUZETVVNc1dVRkJTU3haUVVGWkxFOUJRVThzUzBGQlVDeERRVUZoTEVOQlFXSXNRMEZCYUVJN1FVRkRRU3haUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFVkJRV3hETEVWQlFYTkRMRU5CUVVNc1QwRkJSQ3hGUVVGVkxFTkJRVllzUTBGQmRFTXNSVUZCYjBRc1pVRkJjRVFzUTBGQldpeEZRVUZyUmp0QlFVTTVSU3h0UWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJXa1E3TzBGQlkwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhKUVVGMlFpeEZRVUUyUWl4TlFVRTNRaXhGUVVGeFF5eGxRVUZ5UXl4RlFVRnpSRHRCUVVNM1JpeFJRVUZKTEU5QlFVOHNTMEZCVUN4TFFVRnBRaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NVMEZCVXl4RlFVRmlPMEZCUTBFc1VVRkJTU3hyUWtGQmEwSXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJiRU03UVVGRFFTeFJRVUZKTEhWQ1FVRktMRVZCUVRaQ0xIRkNRVUUzUWp0QlFVTkJMRkZCUVVrc1MwRkJTeXh6UWtGQlZDeEZRVUZwUXp0QlFVTTNRaXhyUTBGQk1FSXNTMEZCU3l4dlFrRkJMMEk3UVVGRFFTeG5RMEZCZDBJc1MwRkJTeXhyUWtGQk4wSTdRVUZEU0R0QlFVTkVMRkZCUVVrc1lVRkJZU3hKUVVGcVFqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeFBRVUZQTEV0QlFWQXNRMEZCWVN4TlFVRnFReXhGUVVGNVF5eEhRVUY2UXl4RlFVRTRRenRCUVVNeFF5eFpRVUZKTEV0QlFVc3NjMEpCUVZRc1JVRkJhVU03UVVGRE4wSXNhVUpCUVVzc2IwSkJRVXdzUjBGQk5FSXNSVUZCTlVJN1FVRkRRU3hwUWtGQlN5eHJRa0ZCVEN4SFFVRXdRaXhGUVVFeFFqdEJRVU5JTzBGQlEwUXNXVUZCU1N4WlFVRlpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQmFFSTdPMEZCUlVFc1dVRkJTU3hoUVVGaExFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFUZENPMEZCUTBFc1dVRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeFRRVUYyUWl4RlFVRnJReXhGUVVGc1F5eEZRVUZ6UXl4RFFVRkRMRTlCUVVRc1JVRkJWU3hEUVVGV0xFTkJRWFJETEVWQlFXOUVMR1ZCUVhCRUxFTkJRVm83TzBGQlJVRXNXVUZCU1N4VlFVRlZMRWxCUVZZc1NVRkJhMElzWlVGQlpTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRnFSQ3hGUVVGNVJEdEJRVU55UkN4cFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4bFFVRnlRaXhEUVVGa096dEJRVVZCTEdkQ1FVRkpMRXRCUVVzc2MwSkJRVlFzUlVGQmFVTTdRVUZETjBJc2NVSkJRVXNzU1VGQlNTeFJRVUZVTEVsQlFYRkNMRXRCUVVzc2EwSkJRVEZDTEVWQlFUaERPMEZCUXpGRExEQkRRVUZ6UWl4UlFVRjBRaXhKUVVGclF5eEpRVUZzUXp0QlFVTkJMREpDUVVGUExIZENRVUYzUWl4UlFVRjRRaXhEUVVGUU8wRkJRMGc3UVVGRFJDeHhRa0ZCU3l4SlFVRkpMRlZCUVZRc1NVRkJkVUlzUzBGQlN5eHZRa0ZCTlVJc1JVRkJhMFE3UVVGRE9VTXNkMEpCUVVrc1EwRkJReXh6UWtGQmMwSXNWVUZCZEVJc1EwRkJUQ3hGUVVGM1F6dEJRVU53UXl4blJFRkJkMElzVlVGQmVFSXNTVUZCYzBNc1NVRkJkRU03UVVGRFNEdEJRVU5LT3p0QlFVVkVMRFpDUVVGaExFdEJRV0k3UVVGRFFUdEJRVU5JT3p0QlFVVkVMRzFDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZsQlFVa3NTMEZCU2l4RlFVRlhPMEZCUTFBc2JVSkJRVThzU1VGQlVDeERRVUZaTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhKUVVGcVFpeEZRVUYxUWl4TFFVRkxMRU5CUVRWQ0xFVkJRU3RDTEZWQlFTOUNMRU5CUVRCRExFbEJRVEZETEVWQlFXZEVMRTlCUVdoRUxFTkJRVm83UVVGRFNEdEJRVU5LTzBGQlEwUXNVVUZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlF6ZENMR0ZCUVVzc2IwSkJRVXdzUjBGQk5FSXNkVUpCUVRWQ08wRkJRMEVzWVVGQlN5eHJRa0ZCVEN4SFFVRXdRaXh4UWtGQk1VSTdRVUZEU0R0QlFVTkVMRkZCUVVrc1ZVRkJTaXhGUVVGblFqdEJRVU5hTEdsQ1FVRlRMRTlCUVU4c1RVRkJVQ3hEUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1pVRkJiRUlzUTBGQlpDeERRVUZVTzBGQlEwRXNZVUZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPMEZCUTBFc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4alFVRTFRaXhGUVVFMFF5eEZRVUUxUXl4RlFVRm5SQ3hGUVVGb1JDeEZRVUZ2UkN4UlFVRndSQ3hGUVVFNFJDeE5RVUU1UkN4RlFVRnpSU3hKUVVGMFJTeEZRVUUwUlN4TlFVRTFSU3hEUVVGUU8wRkJRMGc3UVVGRFNpeERRWFpFUkRzN1FVRjVSRUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEdGQlFUTkNMRWRCUVRKRExGTkJRVk1zWVVGQlZDeERRVUYxUWl4SlFVRjJRaXhGUVVFMlFpeE5RVUUzUWl4RlFVRnhReXhsUVVGeVF5eEZRVUZ6UkR0QlFVTTNSaXhSUVVGSkxFOUJRVThzUzBGQlVDeExRVUZwUWl4VFFVRnlRaXhGUVVGblF6dEJRVU0xUWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzWVVGQllTeEpRVUZxUWp0QlFVTkJMRkZCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzVVVGQlNTeHJRa0ZCYTBJc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQmJFTTdRVUZEUVN4UlFVRkpMSFZDUVVGS0xFVkJRVFpDTEhGQ1FVRTNRanRCUVVOQkxGRkJRVWtzUzBGQlN5eHpRa0ZCVkN4RlFVRnBRenRCUVVNM1FpeHJRMEZCTUVJc1MwRkJTeXh2UWtGQkwwSTdRVUZEUVN4blEwRkJkMElzUzBGQlN5eHJRa0ZCTjBJN1FVRkRTRHRCUVVORUxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hQUVVGUExFdEJRVkFzUTBGQllTeE5RVUZxUXl4RlFVRjVReXhIUVVGNlF5eEZRVUU0UXp0QlFVTXhReXhaUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzYVVKQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEUVN4cFFrRkJTeXhyUWtGQlRDeEhRVUV3UWl4RlFVRXhRanRCUVVOSU8wRkJRMFFzV1VGQlNTeFpRVUZaTEU5QlFVOHNTMEZCVUN4RFFVRmhMRU5CUVdJc1EwRkJhRUk3TzBGQlJVRXNXVUZCU1N4aFFVRmhMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRVGRDTzBGQlEwRXNXVUZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhUUVVGMlFpeEZRVUZyUXl4RlFVRnNReXhGUVVGelF5eERRVUZETEU5QlFVUXNSVUZCVlN4RFFVRldMRU5CUVhSRExFVkJRVzlFTEdWQlFYQkVMRU5CUVZvN08wRkJSVUVzV1VGQlNTeFZRVUZWTEVsQlFWWXNTVUZCYTBJc1pVRkJaU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZxUkN4RlFVRjVSRHRCUVVOeVJDeG5Ra0ZCU1N4bFFVRmxMRWxCUVc1Q0xFVkJRWGxDTzBGQlEzSkNMRFpDUVVGaExFTkJRV0k3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0N4eFFrRkJTeXhOUVVGTUxFZEJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4bFFVRnlRaXhEUVVGa08wRkJRMEVzZFVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzWlVGQk5VSXNSVUZCTmtNN1FVRkRhRVFzTkVKQlFWRXNWVUZFZDBNN1FVRkZhRVFzTkVKQlFWRTdRVUZHZDBNc2FVSkJRVGRETEVWQlIwb3NSVUZJU1N4RlFVZEJMRkZCU0VFc1JVRkhWU3hKUVVoV0xFVkJSMmRDTEVsQlNHaENMRVZCUjNOQ0xFMUJTSFJDTEVOQlFWQTdRVUZKU0R0QlFVTkVMR2RDUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzY1VKQlFVc3NTVUZCU1N4UlFVRlVMRWxCUVhGQ0xFdEJRVXNzYTBKQlFURkNMRVZCUVRoRE8wRkJRekZETERCRFFVRnpRaXhSUVVGMFFpeEpRVUZyUXl4SlFVRnNRenRCUVVOQkxESkNRVUZQTEhkQ1FVRjNRaXhSUVVGNFFpeERRVUZRTzBGQlEwZzdRVUZEUkN4eFFrRkJTeXhKUVVGSkxGVkJRVlFzU1VGQmRVSXNTMEZCU3l4dlFrRkJOVUlzUlVGQmEwUTdRVUZET1VNc2QwSkJRVWtzUTBGQlF5eHpRa0ZCYzBJc1ZVRkJkRUlzUTBGQlRDeEZRVUYzUXp0QlFVTndReXhuUkVGQmQwSXNWVUZCZUVJc1NVRkJjME1zU1VGQmRFTTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTaXhUUVhKQ1JDeE5RWEZDVHl4SlFVRkpMRXRCUVVvc1JVRkJWenRCUVVOa0xHMUNRVUZQTEVsQlFWQXNRMEZCV1N4TFFVRmFPMEZCUTBnN1FVRkRTanRCUVVORUxGRkJRVWtzUzBGQlN5eHpRa0ZCVkN4RlFVRnBRenRCUVVNM1FpeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xIVkNRVUUxUWp0QlFVTkJMR0ZCUVVzc2EwSkJRVXdzUjBGQk1FSXNjVUpCUVRGQ08wRkJRMGc3UVVGRFJDeFJRVUZKTEdWQlFXVXNTVUZCYmtJc1JVRkJlVUk3UVVGRGNrSXNhVUpCUVZNc1QwRkJUeXhOUVVGUUxFTkJRV01zUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhsUVVGc1FpeERRVUZrTEVOQlFWUTdRVUZEUVN4aFFVRkxMRTFCUVV3c1IwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeExRVUZhTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEdWQlFYSkNMRU5CUVdRN1FVRkRRU3hsUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMR05CUVRWQ0xFVkJRVFJETEVWQlFUVkRMRVZCUVdkRUxFVkJRV2hFTEVWQlFXOUVMRkZCUVhCRUxFVkJRVGhFTEUxQlFUbEVMRVZCUVhORkxFbEJRWFJGTEVWQlFUUkZMRTFCUVRWRkxFTkJRVkE3UVVGRFNDeExRVXBFTEUxQlNVODdRVUZEU0N4aFFVRkxMRTFCUVV3c1IwRkJZeXhMUVVGTExFMUJRVXdzUTBGQldTeExRVUZhTEVOQlFXdENMRU5CUVd4Q0xFVkJRWEZDTEdWQlFYSkNMRU5CUVdRN1FVRkRTRHRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQk0wUkVPenRCUVRaRVFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNWMEZCTTBJc1IwRkJlVU1zVTBGQlV5eFhRVUZVTEVOQlFYRkNMRWxCUVhKQ0xFVkJRVEpDTEUxQlFUTkNMRVZCUVcxRExHVkJRVzVETEVWQlFXOUVPMEZCUTNwR0xGRkJRVWtzVDBGQlR5eEhRVUZRTEV0QlFXVXNVMEZCYmtJc1JVRkJPRUk3UVVGRE1VSXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHZENRVUZuUWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVGb1F6dEJRVU5CTEZGQlFVa3NkVUpCUVVvc1JVRkJOa0lzY1VKQlFUZENPMEZCUTBFc1VVRkJTU3hMUVVGTExITkNRVUZVTEVWQlFXbERPMEZCUXpkQ0xHdERRVUV3UWl4TFFVRkxMRzlDUVVFdlFqdEJRVU5CTEdkRFFVRjNRaXhMUVVGTExHdENRVUUzUWp0QlFVTkJMR0ZCUVVzc2IwSkJRVXdzUjBGQk5FSXNSVUZCTlVJN1FVRkRRU3hoUVVGTExHdENRVUZNTEVkQlFUQkNMRVZCUVRGQ08wRkJRMGc3UVVGRFJDeFJRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFbEJRV3BDTEVWQlFYVkNMRTlCUVU4c1IwRkJPVUlzUlVGQmJVTXNTVUZCYmtNc1JVRkJlVU1zU1VGQmVrTXNSVUZCSzBNc1pVRkJMME1zUTBGQldqdEJRVU5CTEZGQlFVa3NXVUZCV1N4TFFVRkxMRTFCUVV3c1EwRkJXU3hMUVVGYUxFTkJRV3RDTEdGQlFXeENMRU5CUVdoQ08wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhoUVVGeVFpeERRVUZrTzBGQlEwRXNVVUZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlF6ZENMR0ZCUVVzc2IwSkJRVXdzUjBGQk5FSXNkVUpCUVRWQ08wRkJRMEVzWVVGQlN5eHJRa0ZCVEN4SFFVRXdRaXh4UWtGQk1VSTdRVUZEU0R0QlFVTkVMRkZCUVVrc1ZVRkJWU3hKUVVGV0xFbEJRV3RDTEZWQlFWVXNUVUZCVml4TFFVRnhRaXhEUVVFelF5eEZRVUU0UXp0QlFVTXhReXhsUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMRlZCUVRWQ0xFVkJRWGRETEVWQlFYaERMRVZCUVRSRExFVkJRVFZETEVWQlFXZEVMRTFCUVdoRUxFVkJRWGRFTEVsQlFYaEVMRVZCUVRoRUxFbEJRVGxFTEVWQlFXOUZMRTFCUVhCRkxFTkJRVkE3UVVGRFNEdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CZGtKRU96dEJRWGxDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc2EwSkJRVE5DTEVkQlFXZEVMRk5CUVZNc2IwSkJRVlFzUTBGQk9FSXNTVUZCT1VJc1JVRkJiME1zVFVGQmNFTXNSVUZCTkVNc1pVRkJOVU1zUlVGQk5rUTdRVUZEZWtjc1VVRkJTU3hEUVVGRExFOUJRVThzUzBGQldpeEZRVUZ0UWp0QlFVTm1MR1ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeExRVUZLTzBGQlEwRXNVMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEU5QlFVOHNTMEZCVUN4RFFVRmhMRTFCUVdwRExFVkJRWGxETEVkQlFYcERMRVZCUVRoRE8wRkJRekZETEZsQlFVa3NUVUZCVFN4UFFVRlBMRXRCUVZBc1EwRkJZU3hEUVVGaUxFTkJRVlk3UVVGRFFTeFpRVUZKTEVsQlFVa3NSMEZCU2l4TFFVRlpMR0ZCUVdoQ0xFVkJRU3RDTzBGQlF6TkNMR2RDUVVGSkxGZEJRVmNzU1VGQlNTeFhRVUZLTEVOQlFXZENMRWxCUVVrc1NVRkJjRUlzUTBGQlpqdEJRVU5CTEdkQ1FVRkpMR0ZCUVdFc1NVRkJha0k3UVVGRFFTeHBRa0ZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEZOQlFWTXNVVUZCVkN4RFFVRnJRaXhOUVVGMFF5eEZRVUU0UXl4SFFVRTVReXhGUVVGdFJEdEJRVU12UXl4dlFrRkJTU3hGUVVGRkxGTkJRVk1zVVVGQlZDeERRVUZyUWl4RFFVRnNRaXhMUVVGM1FpeEpRVUV4UWl4RFFVRktMRVZCUVhGRE8wRkJRMnBETEdsRFFVRmhMRXRCUVdJN1FVRkRRVHRCUVVOSU8wRkJRMG83UVVGRFJDeG5Ra0ZCU1N4VlFVRktMRVZCUVdkQ08wRkJRMW9zYjBKQlFVa3NXVUZCV1N4VFFVRlRMR05CUVZRc1EwRkJkMElzU1VGQmVFSXNRMEZCYUVJN1FVRkRRU3h2UWtGQlNTeFpRVUZaTEVWQlFVTXNVVUZCVVN4VFFVRlVMRVZCUVdoQ08wRkJRMEVzYjBKQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1UwRkJka0lzUlVGQmEwTXNSVUZCYkVNc1JVRkJjME1zUTBGQlF5eFBRVUZFTEVWQlFWVXNRMEZCVml4RFFVRjBReXhGUVVGdlJDeGxRVUZ3UkN4RFFVRmFMRVZCUVd0R08wRkJRemxGTERKQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5LTEVOQmVrSkVPenM3T3p0QlFUaENRU3hUUVVGVExGRkJRVlFzUTBGQmEwSXNSMEZCYkVJc1JVRkJkVUk3UVVGRGJrSXNVVUZCU1N4SlFVRkpMRTlCUVU4c1IwRkJVQ3hGUVVGWkxFOUJRVm9zUTBGQmIwSXNXVUZCY0VJc1JVRkJhME1zUlVGQmJFTXNSVUZCYzBNc1MwRkJkRU1zUTBGQk5FTXNiMGRCUVRWRExFTkJRVkk3TzBGQlJVRXNWMEZCVVN4SlFVRkpPMEZCUTFJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVVJPTzBGQlJWSXNhMEpCUVZVc1JVRkJSU3hEUVVGR0xFdEJRVkVzUlVGR1ZqdEJRVWRTTEcxQ1FVRlhMRVZCUVVVc1EwRkJSaXhMUVVGUkxFVkJTRmc3UVVGSlVpeGpRVUZOTEVWQlFVVXNRMEZCUml4TFFVRlJMRVZCU2s0N1FVRkxVaXhyUWtGQlZTeEZRVUZGTEVOQlFVWXNTMEZCVVN4RlFVeFdPMEZCVFZJc1kwRkJUU3hGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVTVPTzBGQlQxSXNhMEpCUVZVc1JVRkJSU3hEUVVGR0xFdEJRVkVzUlVGUVZqdEJRVkZTTEdkQ1FVRlJMRVZCUVVVc1EwRkJSaXhMUVVGUkxFVkJVbEk3UVVGVFVpeGpRVUZOTEVWQlFVVXNRMEZCUml4TFFVRlJPMEZCVkU0c1MwRkJTaXhIUVZWS0xFbEJWa283UVVGWFNEczdRVUZGUkN4VFFVRlRMRlZCUVZRc1EwRkJiMElzU1VGQmNFSXNSVUZCTUVJc1NVRkJNVUlzUlVGQlowTTdPenRCUVVVMVFpeGhRVUZUTEdsQ1FVRlVMRU5CUVRKQ0xFdEJRVE5DTEVWQlFXdERPMEZCUXpsQ0xGbEJRVWtzVTBGQlV5eEZRVUZpTzBGQlEwRXNZMEZCVFN4UFFVRk9MRU5CUVdNc2FVSkJRV1FzUlVGQmFVTXNSVUZCYWtNc1JVRkRTeXhQUVVSTUxFTkJRMkVzWjBKQlJHSXNSVUZESzBJc1IwRkVMMElzUlVGRlN5eFBRVVpNTEVOQlJXRXNVMEZHWWl4RlFVVjNRaXhOUVVaNFFpeEZRVWRMTEU5QlNFd3NRMEZIWVN4WlFVaGlMRVZCUnpKQ0xGVkJRVlVzUTBGQlZpeEZRVUZoTzBGQlEyaERMR2RDUVVGSkxFMUJRVTBzUzBGQlZpeEZRVUZwUWp0QlFVTmlMSFZDUVVGUExFZEJRVkE3UVVGRFNDeGhRVVpFTEUxQlJVODdRVUZEU0N4MVFrRkJUeXhKUVVGUUxFTkJRVmtzUTBGQldqdEJRVU5JTzBGQlEwb3NVMEZVVER0QlFWVkJMR1ZCUVU4c1QwRkJUeXhKUVVGUUxFTkJRVmtzUlVGQldpeEZRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeExRVUY0UWl4RlFVRXJRaXhOUVVGTkxFMUJRVTRzUTBGQllTeERRVUZpTEUxQlFXOUNMRWRCUVhCQ0xFZEJRVEJDTEVkQlFURkNMRWRCUVdkRExFVkJRUzlFTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hYUVVGUExGTkJRVk1zVVVGQlVTeEZRVUZxUWl4RFFVRlFPMEZCUTBFc1YwRkJUeXhUUVVGVExGRkJRVkVzUlVGQmFrSXNRMEZCVURzN1FVRkZRU3hYUVVGUExFTkJRVU1zU1VGQlJDeEpRVUZUTEVOQlFVTXNTVUZCVml4SFFVRnBRaXhKUVVGcVFpeEhRVUYzUWl4RFFVRkRMRXRCUVVzc1VVRkJUQ3hKUVVGcFFpeExRVUZMTEZGQlFYWkNMRXRCUXpsQ0xFdEJRVXNzVVVGQlRDeEpRVUZwUWl4TFFVRkxMRk5CUVhSQ0xFZEJRV3RETEV0QlFVc3NVMEZCZGtNc1IwRkJiVVFzUzBGQlN5eFRRVVF4UWl4SlFVVXZRaXhyUWtGQmEwSXNTMEZCU3l4UlFVRk1MRWxCUVdsQ0xFdEJRVXNzVTBGQmRFSXNTVUZCYlVNc1MwRkJTeXhSUVVGTUxFTkJRV01zVFVGQlpDeERRVUZ4UWl4RFFVRnlRaXhOUVVFMFFpeEhRVUV2UkN4SFFVRnhSU3hMUVVGTExGRkJRVEZGTEVkQlFYTkdMRXRCUVVzc1VVRkJUQ3hIUVVGcFFpeERRVUZETEV0QlFVc3NVMEZCVEN4SlFVRnJRaXhEUVVGRExFdEJRVXNzVVVGQmVFSXNSMEZCYlVNc1IwRkJia01zUjBGQmVVTXNSVUZCTVVNc1NVRkJaMFFzUzBGQlN5eFJRVUZNTEVOQlFXTXNTMEZCWkN4RFFVRnZRaXhEUVVGd1FpeEZRVUYxUWl4TFFVRkxMRkZCUVV3c1EwRkJZeXhYUVVGa0xFTkJRVEJDTEVkQlFURkNMRWxCUVdsRExFTkJRWGhFTEVOQlFXaEVMRWRCUVRaSExFdEJRVXNzVVVGQmJra3NSMEZCSzBrc1MwRkJTeXhSUVVFMVVDeERRVVlyUWl4SlFVYzVRaXhMUVVGTExGRkJRVXdzU1VGQmFVSXNTMEZCU3l4VFFVRjBRaXhKUVVGdFF5eExRVUZMTEZGQlFYaERMRWRCUVcxRUxFdEJRVXNzVFVGQmVFUXNSMEZCYTBVc1MwRkJTeXhOUVVGTUxFbEJRV1VzUzBGQlN5eE5RVWg0UkN4SlFVa3ZRaXhMUVVGTExFbEJTa3c3UVVGTFNEczdRVUZGUkN4VFFVRlRMR05CUVZRc1EwRkJkMElzUjBGQmVFSXNSVUZCTmtJN1FVRkRla0lzVjBGQlR5eEpRVUZKTEV0QlFVb3NRMEZCVlN4SFFVRldMRVZCUVdVc1EwRkJaaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNVMEZCVXl4VlFVRlVMRU5CUVc5Q0xFMUJRWEJDTEVWQlFUUkNMRTlCUVRWQ0xFVkJRWEZETzBGQlEycERMRkZCUVVrc1ZVRkJWU3hSUVVGUExFMUJRVkFzZFVSQlFVOHNUVUZCVUN4UFFVRnJRaXhSUVVGb1F5eEZRVUV3UXp0QlFVTjBReXhaUVVGSkxGbEJRVmtzVTBGQmFFSXNSVUZCTWtJN1FVRkRka0lzYzBKQlFWVXNUMEZCVHl4RlFVRnFRanRCUVVOSUxGTkJSa1FzVFVGRlR5eEpRVUZKTEU5QlFVOHNUMEZCVHl4RlFVRmtMRXRCUVhGQ0xGRkJRWHBDTEVWQlFXMURPMEZCUTNSRExITkNRVUZWTEZkQlFWY3NUMEZCV0N4RlFVRnZRaXhQUVVGUExFVkJRVE5DTEVOQlFWWTdRVUZEUVN4dFFrRkJUeXhGUVVGUUxFZEJRVmtzVDBGQldqdEJRVU5JTzBGQlEwUXNXVUZCU1N4TlFVRk5MRTlCUVU0c1EwRkJZeXhOUVVGa0xFTkJRVW9zUlVGQk1rSTdRVUZEZGtJc2FVSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hQUVVGUExFMUJRVE5DTEVWQlFXMURMRWRCUVc1RExFVkJRWGRETzBGQlEzQkRMREpDUVVGWExFOUJRVThzUTBGQlVDeERRVUZZTEVWQlFYTkNMRTlCUVhSQ08wRkJRMGc3UVVGRFNpeFRRVXBFTEUxQlNVODdRVUZEU0N4blFrRkJTU3hQUVVGUExFOUJRVThzVFVGQlVDeERRVUZRTEV0QlFUQkNMRkZCUVRsQ0xFVkJRWGRETzBGQlEzQkRMSFZDUVVGUExFMUJRVkFzU1VGQmFVSXNWMEZCVnl4UFFVRllMRVZCUVc5Q0xFOUJRVThzVFVGQlVDeERRVUZ3UWl4RFFVRnFRanRCUVVOSU8wRkJRMFFzYVVKQlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xFMUJRV2hDTEVWQlFYZENPMEZCUTNCQ0xHOUNRVUZKTEZGQlFWRXNUVUZCV2l4RlFVRnZRanRCUVVOb1Fpd3JRa0ZCVnl4UFFVRlBMRWRCUVZBc1EwRkJXQ3hGUVVGM1FpeFBRVUY0UWp0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVOS08wRkJRMG83TzBGQlJVUXNVMEZCVXl4dlFrRkJWQ3hEUVVFNFFpeFJRVUU1UWl4RlFVRjNRenRCUVVOd1F5eGxRVUZYTEZsQlFWa3NTVUZCZGtJN08wRkJSVUVzVVVGQlNTeG5Ra0ZCWjBJc1ZVRkJWU3hSUVVGV0xFTkJRWEJDT3p0QlFVVkJMRmRCUVU4c1ZVRkJWU3hMUVVGV0xFVkJRV2xDTzBGQlEzQkNMRmxCUVVrc2EwSkJRV3RDTEdOQlFXTXNUVUZCVFN4SlFVRndRaXhMUVVFMlFpeHhRa0ZCY1VJc1RVRkJUU3hKUVVFelFpeERRVUZ1UkR0QlFVTkJMRmxCUVVrc1QwRkJUeXhsUVVGUUxFdEJRVEpDTEZGQlFTOUNMRVZCUVhsRE8wRkJRM0pETEcxQ1FVRlBMSGRDUVVGM1FpeE5RVUZOTEVsQlFUbENMRWRCUVhGRExFbEJRWEpETEVkQlFUUkRMSGxDUVVGbExFMUJRVTBzWVVGQmNrSXNRMEZCYmtRN1FVRkRTRHRCUVVORUxGbEJRVWtzWjBKQlFXZENMRTFCUVUwc1RVRkJNVUk3TzBGQlJVRXNaVUZCVHl4blFrRkJaMElzVDBGQmFFSXNRMEZCZDBJc1pVRkJlRUlzUlVGQmVVTXNWVUZCVlN4TFFVRldMRVZCUVdsQ0xFOUJRV3BDTEVWQlFUQkNPMEZCUTNSRkxHZENRVUZKTEZkQlFWY3NZMEZCWXl4UFFVRmtMRU5CUVdZN1FVRkRRU3h0UWtGQlR5eFBRVUZQTEZGQlFWQXNTMEZCYjBJc1VVRkJjRUlzU1VGQlowTXNUMEZCVHl4UlFVRlFMRXRCUVc5Q0xGRkJRWEJFTEVkQlFTdEVMRkZCUVM5RUxFZEJRVEJGTEV0QlFXcEdPMEZCUTBnc1UwRklUU3hEUVVGUU8wRkJTVWdzUzBGWVJEdEJRVmxJT3p0QlFVVkVMRWxCUVVrc1lVRkJZVHRCUVVOaUxHdENRVUZqTEVOQlJFUTdRVUZGWWl4dFFrRkJaU3hEUVVaR08wRkJSMklzYjBKQlFXZENMRVZCU0VnN1FVRkpZaXh2UWtGQlowSXNSVUZLU0R0QlFVdGlMSEZDUVVGcFFpeEZRVXhLTzBGQlRXSXNaMEpCUVZrc1JVRk9RenM3UVVGUllpeDNRa0ZCYjBJc1IwRlNVRHRCUVZOaUxHOUNRVUZuUWl4SFFWUklPMEZCVldJc09FSkJRVEJDTEVkQlZtSTdRVUZYWWl4dlFrRkJaMElzUjBGWVNEdEJRVmxpTERoQ1FVRXdRaXhIUVZwaU8wRkJZV0lzZVVKQlFYRkNMRWRCWWxJN08wRkJaV0lzZVVKQlFYRkNMRWRCWmxJN1FVRm5RbUlzZDBKQlFXOUNMRWRCYUVKUU8wRkJhVUppTEc5Q1FVRm5RaXhIUVdwQ1NEczdRVUZ0UW1Jc0swSkJRVEpDTEVkQmJrSmtPMEZCYjBKaUxDdENRVUV5UWl4SFFYQkNaRHRCUVhGQ1lpeHhRa0ZCYVVJc1IwRnlRa283UVVGelFtSXNhME5CUVRoQ0xFZEJkRUpxUWp0QlFYVkNZaXd5UWtGQmRVSXNSMEYyUWxZN08wRkJlVUppTEhkQ1FVRnZRaXhIUVhwQ1VEdEJRVEJDWWl4MVFrRkJiVUlzUjBFeFFrNDdRVUV5UW1Jc2EwSkJRV01zUjBFelFrUTdRVUUwUW1Jc05FSkJRWGRDTEVkQk5VSllPenRCUVRoQ1lpeHRRa0ZCWlN4SFFUbENSanRCUVN0Q1lpeHZRa0ZCWjBJc1IwRXZRa2c3TzBGQmFVTmlMSGRDUVVGdlFpeEhRV3BEVURzN1FVRnRRMklzYzBKQlFXdENPMEZCYmtOTUxFTkJRV3BDTzBGQmNVTkJMRWxCUVVrc2EwSkJRV3RDTEVWQlFYUkNPMEZCUTBFc1MwRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNWVUZCYUVJc1JVRkJORUk3UVVGRGVFSXNiMEpCUVdkQ0xGZEJRVmNzUjBGQldDeERRVUZvUWl4SlFVRnRReXhIUVVGdVF6dEJRVU5JTzBGQlEwUXNTVUZCU1N4MVFrRkJkVUk3UVVGRGRrSXNhMEpCUVdNc05FTkJSRk03UVVGRmRrSXNiVUpCUVdVc05FSkJSbEU3UVVGSGRrSXNiMEpCUVdkQ0xHZEVRVWhQTzBGQlNYWkNMRzlDUVVGblFpeG5SRUZLVHp0QlFVdDJRaXh4UWtGQmFVSXNNRVpCVEUwN1FVRk5ka0lzWjBKQlFWa3NhME5CVGxjN08wRkJVWFpDTEhkQ1FVRnZRaXhwUkVGU1J6dEJRVk4yUWl4dlFrRkJaMElzT0VOQlZFODdRVUZWZGtJc09FSkJRVEJDTEhWRVFWWklPMEZCVjNaQ0xHOUNRVUZuUWl4cFJFRllUenRCUVZsMlFpdzRRa0ZCTUVJc2RVUkJXa2c3UVVGaGRrSXNlVUpCUVhGQ0xIRkRRV0pGT3p0QlFXVjJRaXg1UWtGQmNVSXNlVVJCWmtVN1FVRm5RblpDTEhkQ1FVRnZRaXgzUkVGb1FrYzdRVUZwUW5aQ0xHOUNRVUZuUWl3d1EwRnFRazg3TzBGQmJVSjJRaXdyUWtGQk1rSXNhVVZCYmtKS08wRkJiMEoyUWl3clFrRkJNa0lzYTBWQmNFSktPMEZCY1VKMlFpeHhRa0ZCYVVJc2EwTkJja0pOTzBGQmMwSjJRaXhyUTBGQk9FSXNiVU5CZEVKUU8wRkJkVUoyUWl3eVFrRkJkVUlzYlVWQmRrSkJPenRCUVhsQ2RrSXNkMEpCUVc5Q0xHdEVRWHBDUnp0QlFUQkNka0lzZFVKQlFXMUNMR2xFUVRGQ1NUdEJRVEpDZGtJc2EwSkJRV01zTkVSQk0wSlRPMEZCTkVKMlFpdzBRa0ZCZDBJc09FSkJOVUpFT3p0QlFUaENka0lzYlVKQlFXVXNjME5CT1VKUk8wRkJLMEoyUWl4dlFrRkJaMElzYlVOQkwwSlBPenRCUVdsRGRrSXNkMEpCUVc5Q0xIZENRV3BEUnpzN1FVRnRRM1pDTEhOQ1FVRnJRanRCUVc1RFN5eERRVUV6UWpzN1FVRnpRMEVzVTBGQlV5eGxRVUZVTEVOQlFYbENMRWxCUVhwQ0xFVkJRU3RDTEUxQlFTOUNMRVZCUVhWRExGRkJRWFpETEVWQlFXbEVMRlZCUVdwRUxFVkJRVFpFTEZOQlFUZEVMRVZCUVhkRk8wRkJRM0JGTEZWQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnN1FVRkRRU3hSUVVGSkxGTkJRVk1zVTBGQllpeEZRVUYzUWp0QlFVTndRaXhqUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERaQ1FVRTJRaXhWUVVGMlF5eERRVUZPTzBGQlEwZzdRVUZEUkN4VFFVRkxMRTlCUVV3c1IwRkJaU3hGUVVGbU8wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNUVUZCWkR0QlFVTkJMRk5CUVVzc1NVRkJUQ3hIUVVGWkxFbEJRVm83UVVGRFFTeFRRVUZMTEZGQlFVd3NSMEZCWjBJc1dVRkJXU3hGUVVFMVFqdEJRVU5CTEZOQlFVc3NWVUZCVEN4SFFVRnJRaXhqUVVGakxFVkJRV2hETzBGQlEwRXNVMEZCU3l4VFFVRk1MRWRCUVdsQ0xHRkJRV0VzU1VGQk9VSTdPMEZCUlVFc1VVRkJTU3hOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEV0QlFVc3NUMEZCWml4RFFVRldPMEZCUTBFc1UwRkJTeXhMUVVGTUxFZEJRV0VzU1VGQlNTeExRVUZLTEVsQlFXRXNTVUZCU1N4VlFVRTVRanRCUVVOQkxGRkJRVWtzUTBGQlF5eExRVUZMTEV0QlFWWXNSVUZCYVVJN1FVRkRZaXhaUVVGSk8wRkJRMEVzYTBKQlFVMHNSMEZCVGp0QlFVTklMRk5CUmtRc1EwRkhRU3hQUVVGUExFZEJRVkFzUlVGQldUdEJRVU5TTEdsQ1FVRkxMRXRCUVV3c1IwRkJZU3hKUVVGSkxFdEJRVW9zU1VGQllTeEpRVUZKTEZWQlFUbENPMEZCUTBnN1FVRkRTanRCUVVOS096dEJRVVZFTEdkQ1FVRm5RaXhUUVVGb1FpeEhRVUUwUWl4elFrRkJZeXhOUVVGTkxGTkJRWEJDTEVOQlFUVkNPMEZCUTBFc1owSkJRV2RDTEZOQlFXaENMRU5CUVRCQ0xGZEJRVEZDTEVkQlFYZERMR1ZCUVhoRE8wRkJRMEVzWjBKQlFXZENMRk5CUVdoQ0xFTkJRVEJDTEVsQlFURkNMRWRCUVdsRExHbENRVUZxUXpzN1FVRkZRU3huUWtGQlowSXNVMEZCYUVJc1EwRkJNRUlzVlVGQk1VSXNSMEZCZFVNc1ZVRkJWU3hWUVVGV0xFVkJRWE5DTEZsQlFYUkNMRVZCUVc5RE8wRkJRM1pGTEZGQlFVa3NaVUZCWlN4SlFVRnVRaXhGUVVGNVFqdEJRVU55UWl4eFFrRkJZU3hYUVVGWExFOUJRVmdzUTBGQmJVSXNTVUZCYmtJc1JVRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1QwRkJMMElzUTBGQmRVTXNTMEZCZGtNc1JVRkJPRU1zU1VGQk9VTXNRMEZCWWp0QlFVTkJMR0ZCUVVzc1VVRkJUQ3hIUVVGblFpeE5RVUZOTEZWQlFVNHNSMEZCYlVJc1MwRkJTeXhSUVVGNFF6dEJRVU5JTzBGQlEwUXNVVUZCU1N4cFFrRkJhVUlzU1VGQmNrSXNSVUZCTWtJN1FVRkRka0lzZFVKQlFXVXNZVUZCWVN4UFFVRmlMRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMRWxCUVROQ0xFVkJRV2xETEU5QlFXcERMRU5CUVhsRExFdEJRWHBETEVWQlFXZEVMRWxCUVdoRUxFTkJRV1k3UVVGRFFTeGhRVUZMTEZWQlFVd3NSMEZCYTBJc1RVRkJUU3haUVVGT0xFZEJRWEZDTEV0QlFVc3NWVUZCTlVNN1FVRkRTRHRCUVVORUxGRkJRVWtzUzBGQlN5eFRRVUZNTEV0QlFXMUNMRWxCUVhaQ0xFVkJRVFpDTzBGQlEzcENMR0ZCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4TFFVRkxMRk5CUVV3c1EwRkJaU3hOUVVGdVF5eEZRVUV5UXl4SFFVRXpReXhGUVVGblJEdEJRVU0xUXl4cFFrRkJTeXhUUVVGTUxFTkJRV1VzUTBGQlppeEZRVUZyUWl4VlFVRnNRaXhEUVVFMlFpeFZRVUUzUWl4RlFVRjVReXhaUVVGNlF6dEJRVU5JTzBGQlEwbzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVdaRU96dEJRV2xDUVN4VFFVRlRMRmxCUVZRc1EwRkJjMElzVDBGQmRFSXNSVUZCSzBJc1QwRkJMMElzUlVGQmQwTTdRVUZEY0VNc1VVRkJTU3hSUVVGUkxGTkJRVklzUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUlzVVVGQlVTeE5RVUUzUWl4TlFVRjVReXhQUVVFM1F5eEZRVUZ6UkR0QlFVTnNSQ3haUVVGSkxGbEJRVmtzVVVGQlVTeFRRVUZTTEVOQlFXdENMRkZCUVZFc1RVRkJNVUlzUTBGQmFFSTdRVUZEUVN4WlFVRkxMRkZCUVZFc1RVRkJVaXhIUVVGcFFpeERRVUZxUWl4SlFVRnpRaXhSUVVGUkxFMUJRVklzUTBGQlpTeFJRVUZSTEUxQlFWSXNSMEZCYVVJc1EwRkJhRU1zVFVGQmRVTXNSMEZCT1VRc1NVRkRSeXhWUVVGVkxFMUJRVllzUTBGQmFVSXNRMEZCYWtJc1RVRkJkMElzUjBGRU0wSXNTVUZGUnl4VlFVRlZMRTFCUVZZc1EwRkJhVUlzUTBGQmFrSXNUVUZCZDBJc1IwRkdMMElzUlVGRmIwTTdRVUZEYUVNc2JVSkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwbzdRVUZEUkN4WFFVRlBMRXRCUVZBN1FVRkRTRHM3UVVGRlJDeEpRVUZKTEZsQlFWa3NSVUZCYUVJN08wRkJSVUVzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRkZCUVc1Q0xFVkJRVFpDTzBGQlEzcENMRkZCUVVrc1owSkJRV2RDTEVsQlFVa3NaMEpCUVVvc1JVRkJjRUk3UVVGRFFTeFJRVUZKTEdWQlFVbzdRVUZEUVN4UlFVRkpMRzFDUVVGS08wRkJRMEVzVVVGQlNTeE5RVUZOTzBGQlEwNHNNRUpCUVd0Q0xEQkNRVUZWTEZGQlFWWXNSVUZCYjBJN1FVRkRiRU1zWjBKQlFVa3NUMEZCVHl4UlFVRlFMRXRCUVc5Q0xGRkJRWGhDTEVWQlFXdERPMEZCUXpsQ0xIVkNRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRkZCUVdRc1EwRkJVRHRCUVVOSU8wRkJRMFFzYTBOQlFYTkNMRkZCUVhSQ08wRkJRMEVzYlVKQlFVOHNTVUZCVUR0QlFVTklMRk5CVUVzN1FVRlJUaXh0UWtGQlZ5eHhRa0ZCV1R0QlFVTnVRaXd3UWtGQll5eFRRVUZrTEVOQlFYZENMRXRCUVhoQ0xFTkJRVGhDTEdGQlFUbENMRVZCUVRaRExGTkJRVGRETzBGQlEwZ3NVMEZXU3p0QlFWZE9MR3RDUVVGVkxHdENRVUZWTEVsQlFWWXNSVUZCWjBJN1FVRkRkRUlzWjBKQlFVa3NRMEZCUXl4SlFVRk1MRVZCUVZjN1FVRkRVQ3gxUWtGQlR5eGxRVUZRTzBGQlEwZzdRVUZEUkN4blFrRkJTU3hEUVVGRExGVkJRVlVzU1VGQlZpeERRVUZNTEVWQlFYTkNPMEZCUTJ4Q0xIVkNRVUZQTEV0QlFVc3NTMEZCVEN4RFFVRlhMRWRCUVZnc1JVRkJaMElzUTBGQmFFSXNRMEZCVUN4RE8wRkJRMGc3UVVGRFJDeG5Ra0ZCU1N4VlFVRlZMRWxCUVZZc1EwRkJTaXhGUVVGeFFqdEJRVU5xUWl4clEwRkJhMElzU1VGQmJFSTdRVUZEUVN4MVFrRkJUeXhKUVVGUUxFTTdRVUZEU0R0QlFVTkVMRzFDUVVGUExFdEJRVkE3UVVGRFNDeFRRWFpDU3p0QlFYZENUaXh4UWtGQllTeHhRa0ZCVlN4SlFVRldMRVZCUVdkQ0xGVkJRV2hDTEVWQlFUUkNPMEZCUTNKRExHZENRVUZKTEVkQlFVbzdRVUZEUVN4cFFrRkJTeXhIUVVGTUxFbEJRVmtzVlVGQldpeEZRVUYzUWp0QlFVTndRaXh2UWtGQlNTeFhRVUZYTEVkQlFWZ3NTMEZCYlVJc1EwRkJReXhYUVVGWExGZEJRVmNzUjBGQldDeERRVUZZTEVOQlFYaENMRVZCUVhGRU8wRkJRMnBFTEN0Q1FVRlhMRmRCUVZjc1IwRkJXQ3hEUVVGWUxFbEJRVGhDTEZkQlFWY3NSMEZCV0N4RFFVRTVRanRCUVVOSU8wRkJRMG83UVVGRFJDeG5Ra0ZCU1N4WFFVRlhMRXRCUVVzc1MwRkJUQ3hEUVVGWExFZEJRVmdzUlVGQlowSXNRMEZCYUVJc1EwRkJaanRCUVVOQkxHZENRVUZKTEVOQlFVTXNWVUZCVlN4UlFVRldMRU5CUVV3c1JVRkJNRUk3TzBGQlEzUkNMREJDUVVGVkxFbEJRVllzU1VGQmEwSXNWVUZCYkVJN1FVRkRRU3d3UWtGQlZTeFJRVUZXTEVsQlFYTkNMRlZCUVhSQ08wRkJRMGdzWVVGSVJDeE5RVWRQTzBGQlEwZ3NNRUpCUVZVc1NVRkJWaXhKUVVGclFpeHpRa0ZCWXl4VlFVRlZMRkZCUVZZc1EwRkJaQ3hEUVVGc1FqdEJRVU5CTEhGQ1FVRkxMRWRCUVV3c1NVRkJXU3hWUVVGYUxFVkJRWGRDTzBGQlEzQkNMSGRDUVVGSkxFOUJRVThzVlVGQlZTeFJRVUZXTEVWQlFXOUNMRWRCUVhCQ0xFTkJRVkFzUzBGQmIwTXNWMEZCZUVNc1JVRkJjVVE3UVVGRGFrUXNhME5CUVZVc1VVRkJWaXhGUVVGdlFpeEhRVUZ3UWl4SlFVRXlRaXhYUVVGWExFZEJRVmdzUTBGQk0wSTdRVUZEU0R0QlFVTkVMRGhDUVVGVkxFbEJRVllzUlVGQlowSXNSMEZCYUVJc1NVRkJkVUlzVjBGQlZ5eEhRVUZZTEVOQlFYWkNPMEZCUTBnN1FVRkRTanRCUVVORUxHMUNRVUZQTEVsQlFWQTdRVUZEU0N4VFFUZERTenRCUVRoRFRpeHJRa0ZCVlN4clFrRkJWU3hSUVVGV0xFVkJRVzlDTzBGQlF6RkNMR2RDUVVGSkxGTkJRVk1zVjBGQllqdEJRVU5CTEdkQ1FVRkpMRkZCUVVvc1JVRkJZenRCUVVOV0xIVkNRVUZQTEZGQlFWQXNRMEZCWjBJc1VVRkJhRUk3UVVGRFNEdEJRVU5FTEcxQ1FVRlBMRTFCUVZBN1FVRkRTQ3hUUVhCRVN6dEJRWEZFVGl4clFrRkJWU3hyUWtGQlZTeEpRVUZXTEVWQlFXZENMRTFCUVdoQ0xFVkJRWGRDTEdOQlFYaENMRVZCUVhkRExHOUNRVUY0UXl4RlFVRTRSRHRCUVVOd1JTeG5Ra0ZCU1N4TlFVRk5MSEZDUVVGeFFpeGxRVUZ5UWl4RFFVRldPMEZCUTBFc1owSkJRVWtzWjBKQlFXZENMSE5DUVVGelFpeFZRVUZWTEV0QlFWWXNSVUZCYVVJc1NVRkJha0lzUlVGQmRVSXNUVUZCZGtJc1JVRkJLMEk3UVVGRGNrVXNkVUpCUVU4c2IwSkJRVzlDTEV0QlFYQkNMRVZCUVRKQ0xFbEJRVE5DTEVWQlFXbERMRTFCUVdwRExFdEJRVFJETEVsQlFVa3NTMEZCU2l4RlFVRlhMRWxCUVZnc1JVRkJhVUlzVFVGQmFrSXNRMEZCYmtRN1FVRkRTQ3hoUVVadFFpeEhRVVZvUWl4SFFVWktPMEZCUjBFc1owSkJRVWtzVlVGQlZTeEpRVUZKTEdkQ1FVRktMRU5CUVhGQ0xHRkJRWEpDTEVWQlFXOURMRXRCUVhCRExFVkJRVEpETEdGQlFUTkRMRVZCUVRCRUxHTkJRVEZFTEVWQlFUQkZMRzlDUVVFeFJTeERRVUZrTzBGQlEwRXNaMEpCUVVrc1QwRkJUeXhOUVVGUUxFdEJRV3RDTEZGQlFYUkNMRVZCUVdkRE8wRkJRelZDTEhsQ1FVRlRMRVZCUVVNc1VVRkJVU3hOUVVGVUxFVkJRVlE3UVVGRFNEdEJRVU5FTEc5Q1FVRlJMRk5CUVZJc1EwRkJhMElzUlVGQmJFSXNSVUZCYzBJc1RVRkJkRUk3UVVGRFFTeG5Ra0ZCU1N4UlFVRlJMRkZCUVZFc1YwRkJVaXhEUVVGdlFpeEpRVUZ3UWl4RlFVRXdRaXhOUVVFeFFpeEZRVUZyUXl4SlFVRnNReXhGUVVGM1F5eEpRVUY0UXl4RlFVRTRReXhGUVVFNVF5eERRVUZhTzBGQlEwRXNaMEpCUVVrc1EwRkJReXhMUVVGRUxFbEJRVlVzYjBKQlFXUXNSVUZCYjBNN1FVRkRhRU1zZDBKQlFWRXNVVUZCVVN4dlFrRkJVaXhEUVVFMlFpeEpRVUUzUWl4RlFVRnRReXhOUVVGdVF5eERRVUZTTzBGQlEwZzdRVUZEUkN4cFFrRkJTeXhMUVVGTUxFZEJRV0VzUzBGQllqdEJRVU5CTEdsQ1FVRkxMRTlCUVV3c1IwRkJaU3hSUVVGUkxFOUJRWFpDTzBGQlEwRXNhVUpCUVVzc1MwRkJUQ3hIUVVGakxGVkJRVlVzU1VGQmVFSTdRVUZEUVN4dFFrRkJUeXhMUVVGTExFdEJRVm83UVVGRFNDeFRRWFpGU3p0QlFYZEZUaXgzUWtGQlowSXNNRUpCUVZrN1FVRkRlRUlzWjBKQlFVa3NVMEZCVXl4RlFVRmlPMEZCUTBFc2FVSkJRVXNzVVVGQlRDeERRVUZqTEV0QlFXUXNRMEZCYjBJc1RVRkJjRUlzUlVGQk5FSXNVMEZCTlVJN1FVRkRRU3h0UWtGQlR5eE5RVUZRTzBGQlEwZ3NVMEUxUlVzN1FVRTJSVTRzTUVKQlFXdENMREJDUVVGVkxFbEJRVllzUlVGQlowSXNUVUZCYUVJc1JVRkJkMElzWTBGQmVFSXNSVUZCZDBNc2IwSkJRWGhETEVWQlFUaEVPMEZCUXpWRkxHZENRVUZKTEUxQlFVMHNjVUpCUVhGQ0xHVkJRWEpDTEVOQlFWWTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNjMEpCUVhOQ0xGVkJRVlVzUzBGQlZpeEZRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeE5RVUYyUWl4RlFVRXJRanRCUVVOeVJTeDFRa0ZCVHl4dlFrRkJiMElzUzBGQmNFSXNSVUZCTWtJc1NVRkJNMElzUlVGQmFVTXNUVUZCYWtNc1MwRkJORU1zU1VGQlNTeExRVUZLTEVWQlFWY3NTVUZCV0N4RlFVRnBRaXhOUVVGcVFpeERRVUZ1UkR0QlFVTklMR0ZCUm0xQ0xFZEJSV2hDTEVkQlJrbzdRVUZIUVN4blFrRkJTU3hWUVVGVkxFbEJRVWtzWjBKQlFVb3NRMEZCY1VJc1lVRkJja0lzUlVGQmIwTXNTVUZCY0VNc1JVRkJNRU1zWVVGQk1VTXNSVUZCZVVRc1kwRkJla1FzUlVGQmVVVXNiMEpCUVhwRkxFTkJRV1E3UVVGRFFTeG5Ra0ZCU1N4UFFVRlBMRTFCUVZBc1MwRkJhMElzVVVGQmRFSXNSVUZCWjBNN1FVRkROVUlzZVVKQlFWTXNSVUZCUXl4UlFVRlJMRTFCUVZRc1JVRkJWRHRCUVVOSU8wRkJRMFFzYjBKQlFWRXNVMEZCVWl4RFFVRnJRaXhGUVVGc1FpeEZRVUZ6UWl4TlFVRjBRanRCUVVOQkxHOUNRVUZSTEZkQlFWSXNRMEZCYjBJc1NVRkJjRUlzUlVGQk1FSXNUVUZCTVVJc1JVRkJhME1zU1VGQmJFTXNSVUZCZDBNc1NVRkJlRU1zUlVGQk9FTXNSVUZCT1VNN1FVRkRRU3huUWtGQlNTeHZRa0ZCU2l4RlFVRXdRanRCUVVOMFFpeDNRa0ZCVVN4dlFrRkJVaXhEUVVFMlFpeEpRVUUzUWl4RlFVRnRReXhOUVVGdVF6dEJRVU5JTzBGQlEwUXNaMEpCUVVrc1UwRkJVeXhGUVVGaU8wRkJRMEVzYlVKQlFVOHNUVUZCVUN4SFFVRm5RaXhSUVVGUkxFMUJRWGhDTzBGQlEwRXNiVUpCUVU4c1QwRkJVQ3hIUVVGcFFpeFJRVUZSTEU5QlFYcENPMEZCUTBFc2JVSkJRVThzUzBGQlVDeEhRVUZuUWl4UFFVRlBMRTFCUVZBc1EwRkJZeXhOUVVGa0xFdEJRWGxDTEVOQlFYcERPMEZCUTBFc2JVSkJRVThzVFVGQlVEdEJRVU5JTEZOQmFFZExPMEZCYVVkT0xHMUNRVUZYTEhGQ1FVRlpPMEZCUTI1Q0xHMUNRVUZQTEdOQlFXTXNVMEZCWkN4RFFVRjNRaXhMUVVGNFFpeERRVUU0UWl4aFFVRTVRaXhGUVVFMlF5eFRRVUUzUXl4RFFVRlFPMEZCUTBnc1UwRnVSMHM3UVVGdlIwNHNiVUpCUVZjc2NVSkJRVms3UVVGRGJrSXNiVUpCUVU4c1kwRkJZeXhUUVVGa0xFTkJRWGRDTEV0QlFYaENMRU5CUVRoQ0xHRkJRVGxDTEVWQlFUWkRMRk5CUVRkRExFTkJRVkE3UVVGRFNDeFRRWFJIU3p0QlFYVkhUaXh6UWtGQll5eDNRa0ZCV1R0QlFVTjBRaXh0UWtGQlR5eGpRVUZqTEZsQlFXUXNRMEZCTWtJc1MwRkJNMElzUTBGQmFVTXNZVUZCYWtNc1JVRkJaMFFzVTBGQmFFUXNRMEZCVUR0QlFVTklMRk5CZWtkTE8wRkJNRWRPTEhWQ1FVRmxMSGxDUVVGWk8wRkJRM1pDTEcxQ1FVRlBMR05CUVdNc1lVRkJaQ3hEUVVFMFFpeExRVUUxUWl4RFFVRnJReXhoUVVGc1F5eEZRVUZwUkN4VFFVRnFSQ3hEUVVGUU8wRkJRMGdzVTBFMVIwczdRVUUyUjA0c2QwSkJRV2RDTERCQ1FVRlpPMEZCUTNoQ0xHMUNRVUZQTEdOQlFXTXNZMEZCWkN4RFFVRTJRaXhMUVVFM1FpeERRVUZ0UXl4aFFVRnVReXhGUVVGclJDeFRRVUZzUkN4RFFVRlFPMEZCUTBnc1UwRXZSMHM3UVVGblNFNHNjVUpCUVdFc2RVSkJRVms3UVVGRGNrSXNNRUpCUVdNc1YwRkJaQ3hEUVVFd1FpeExRVUV4UWl4RFFVRm5ReXhoUVVGb1F5eEZRVUVyUXl4VFFVRXZRenRCUVVOSUxGTkJiRWhMTzBGQmJVaE9MSFZDUVVGbExIbENRVUZaTzBGQlEzWkNMREJDUVVGakxHRkJRV1FzUTBGQk5FSXNTMEZCTlVJc1EwRkJhME1zWVVGQmJFTXNSVUZCYVVRc1UwRkJha1E3UVVGRFNDeFRRWEpJU3p0QlFYTklUaXh4UWtGQllTeHhRa0ZCVlN4UlFVRldMRVZCUVc5Q0xGVkJRWEJDTEVWQlFXZERMR05CUVdoRExFVkJRV2RFTzBGQlEzcEVMR2RDUVVGSkxFOUJRVThzVVVGQlVDeExRVUZ2UWl4UlFVRndRaXhKUVVGblF5eERRVUZETEhGQ1FVRnhRaXhKUVVGeVFpeERRVUV3UWl4UlFVRXhRaXhEUVVGeVF5eEZRVUV3UlR0QlFVTjBSU3h6UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3eVJFRkJWaXhEUVVGT08wRkJRMGc3UVVGRFJDeG5Ra0ZCU1N4UFFVRlBMRlZCUVZBc1MwRkJjMElzVVVGQmRFSXNTVUZCYTBNc1lVRkJZU3hEUVVGaUxFdEJRVzFDTEVOQlFYSkVMRWxCUVRCRUxHRkJRV0VzUzBGQk0wVXNSVUZCYTBZN1FVRkRPVVVzYzBKQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2QwTkJRVllzUTBGQlRqdEJRVU5JTzBGQlEwUXNaMEpCUVVrc1QwRkJUeXhYUVVGWExGRkJRVmdzUTBGQlVDeExRVUZuUXl4WFFVRndReXhGUVVGcFJEdEJRVU0zUXl4elFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzBRa0ZCTkVJc1VVRkJOVUlzUjBGQmRVTXNUVUZCZGtNc1IwRkJaMFFzVjBGQlZ5eFJRVUZZTEVOQlFURkVMRU5CUVU0N1FVRkRTRHRCUVVORUxHZENRVUZKTEU5QlFVOHNaMEpCUVdkQ0xGVkJRV2hDTEVOQlFWQXNTMEZCZFVNc1YwRkJNME1zUlVGQmQwUTdRVUZEY0VRc2MwSkJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNPRUpCUVRoQ0xHZENRVUZuUWl4VlFVRm9RaXhEUVVFNVFpeEhRVUUwUkN4TlFVRTFSQ3hIUVVGeFJTeFZRVUV2UlN4RFFVRk9PMEZCUTBnN1FVRkRSQ3gxUWtGQlZ5eFJRVUZZTEVsQlFYVkNMRlZCUVhaQ08wRkJRMEVzTkVKQlFXZENMRlZCUVdoQ0xFbEJRVGhDTEZGQlFUbENPMEZCUTBFc2FVTkJRWEZDTEZGQlFYSkNMRWxCUVdsRExIRkNRVUZ4UWl4VlFVRnlRaXhKUVVGdFF5eGpRVUZ3UlR0QlFVTkJMR2xDUVVGTExFbEJRVWtzVVVGQlZDeEpRVUZ4UWl4VFFVRnlRaXhGUVVGblF6dEJRVU0xUWl4dlFrRkJTU3hYUVVGWExGVkJRVlVzVVVGQlZpeERRVUZtTzBGQlEwRXNiMEpCUVVrc1UwRkJVeXhSUVVGVUxFTkJRVW9zUlVGQmQwSTdRVUZEY0VJc05rSkJRVk1zVlVGQlZDeEpRVUYxUWl4VFFVRlRMRlZCUVZRc1MwRkJkMElzVTBGQlV5eFJRVUZVTEVOQlFTOURPMEZCUTBnN1FVRkRTanRCUVVOS0xGTkJOVWxMTzBGQk5rbE9MR1ZCUVU4c2FVSkJRVms3UVVGRFppd3dRa0ZCWXl4TFFVRmtPMEZCUTBFc2FVSkJRVXNzUzBGQlRDeEhRVUZoTEVsQlFXSTdRVUZEUVN4cFFrRkJTeXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEdsQ1FVRkxMRXRCUVV3c1IwRkJZU3hKUVVGaU8wRkJRMGdzVTBGc1NrczdRVUZ0U2s0c2FVSkJRVk1zUlVGdVNrZzdRVUZ2U2s0c1pVRkJUeXhKUVhCS1JEdEJRWEZLVGl4bFFVRlBMRWxCY2twRU8wRkJjMHBPTEc5Q1FVRlpMRlZCZEVwT08wRkJkVXBPTEc5Q1FVRlpMRlZCZGtwT08wRkJkMHBPTEhkQ1FVRm5RaXhqUVhoS1ZqdEJRWGxLVGl4dlFrRkJXVHRCUVhwS1RpeExRVUZXTzBGQk1rcEJMRkZCUVVrc1VVRkJTaXhEUVVGaExGbEJRVmtzU1VGQmVrSTdRVUZEUVN4WFFVRlBMRWRCUVZBN1FVRkRTRHM3TzBGQlIwUXNTVUZCU1N4TlFVRk5MRmRCUVZZN1FVRkRRU3hKUVVGSkxGZEJRVW9zUTBGQlowSXNUMEZCYUVJc1JVRkJlVUlzYjBKQlFYcENPenM3UVVGSFFTeEpRVUZKTEVkQlFVb3NSMEZCVlN4SFFVRldPenRyUWtGRlpTeEhPenM3T3pzN096czdPenM3T3pzN096czdPenRSUTJwd1JFTXNVeXhIUVVGQkxGTTdVVUYzUWtFc1Z5eEhRVUZCTEZjN1VVRm5Ra0VzVnl4SFFVRkJMRmM3VVVGVFFTeFRMRWRCUVVFc1V6dFJRVlZCTEcxQ0xFZEJRVUVzYlVJN1VVRlZRU3h0UWl4SFFVRkJMRzFDTzFGQlYwRXNaMElzUjBGQlFTeG5RanRSUVcxQ1FTeGxMRWRCUVVFc1pUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnVSMVFzVTBGQlV5eFRRVUZVTEVOQlFXMUNMRWRCUVc1Q0xFVkJRWGRDT3p0QlFVVTNRaXhOUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTEUxQlFVMHNUVUZCVFN4M1FrRkJUaXhEUVVGT096czdRVUZIVml4TlFVRkpMRXRCUVVzc2MwWkJRVlE3UVVGRFFTeE5RVUZKTEZGQlFWRXNWVUZCV2p0QlFVTkJMRTFCUVVrc1VVRkJVU3hKUVVGSkxFOUJRVW9zUTBGQldTeEZRVUZhTEVWQlFXZENMRXRCUVdoQ0xFVkJRWFZDTEV0QlFYWkNMRU5CUVRaQ0xFZEJRVGRDTEVOQlFWbzdPenRCUVVkQkxFMUJRVWtzVFVGQlRTeERRVUZPTEUxQlFXRXNSMEZCYWtJc1JVRkJjMEk3UVVGRGNFSXNWVUZCVFN4RFFVRk9MRWxCUVZjc1QwRkJXRHRCUVVOQkxGVkJRVTBzUTBGQlRpeEpRVUZYTEVkQlFWZzdRVUZEUkRzN1FVRkZSQ3hOUVVGSkxGTkJRVk03UVVGRFdDeFZRVUZOTEUxQlFVMHNRMEZCVGl4RFFVUkxPMEZCUlZnc1dVRkJVU3hOUVVGTkxFTkJRVTRzUTBGR1J6dEJRVWRZTEdOQlFWVXNUVUZCVFN4RFFVRk9PMEZCU0VNc1IwRkJZanM3UVVGTlFTeFRRVUZQTEUxQlFWQTdRVUZEUkRzN1FVRkZUU3hUUVVGVExGZEJRVlFzUTBGQmNVSXNTMEZCY2tJc1JVRkJORUk3UVVGRGFrTXNUVUZCU1N4WlFVRlpMRTFCUVUwc1QwRkJUaXhEUVVGakxFZEJRV1FzUTBGQmFFSTdPMEZCUlVFc1RVRkJTU3hUUVVGVE8wRkJRMWdzWTBGQlZTeE5RVUZOTEZOQlFVNHNRMEZCWjBJc1EwRkJhRUlzUlVGQmJVSXNVMEZCYmtJc1EwRkVRenRCUVVWWUxGbEJRVkVzVFVGQlRTeFRRVUZPTEVOQlFXZENMRmxCUVZrc1EwRkJOVUlzUlVGQkswSXNUVUZCVFN4TlFVRnlRenRCUVVaSExFZEJRV0k3TzBGQlMwRXNVMEZCVHl4TlFVRlFPMEZCUTBRN096czdPenM3UVVGUFRTeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1RVRkJja0lzUlVGQk5rSTdRVUZEYkVNc1UwRkJUeXh2UWtGQldTeE5RVUZhTEVWQlFXOUNMRTFCUVhCQ0xFZEJRVFpDTEVOQlFUZENMRWRCUVdsRExFdEJRV3BETEVkQlFYbERMRWxCUVdoRU8wRkJRMFE3T3pzN096czdRVUZQVFN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzUjBGQmJrSXNSVUZCZDBJN08wRkJSVGRDTEUxQlFVa3NSMEZCU2l4RlFVRlRMRTlCUVU4c1MwRkJTeXhMUVVGTUxFTkJRVmNzZVVKQlFXVXNSMEZCWml4RFFVRllMRU5CUVZBN1FVRkRWanM3T3pzN096dEJRVTlOTEZOQlFWTXNiVUpCUVZRc1EwRkJOa0lzVTBGQk4wSXNSVUZCZDBNN1FVRkROME1zVFVGQlNTeFpRVUZaTEZWQlFWVXNUMEZCVml4RFFVRnJRaXhIUVVGc1FpeERRVUZvUWp0QlFVTkJMRk5CUVU4c1dVRkJXU3hWUVVGVkxGTkJRVllzUTBGQmIwSXNXVUZCV1N4RFFVRm9ReXhGUVVGdFF5eFZRVUZWTEUxQlFUZERMRU5CUVZvc1IwRkJiVVVzUjBGQmJrVXNSMEZCZVVVc1ZVRkJWU3hUUVVGV0xFTkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xGTkJRWFpDTEVOQlFXaEdPMEZCUTBRN096czdPenM3UVVGUFRTeFRRVUZUTEcxQ1FVRlVMRU5CUVRaQ0xFOUJRVGRDTEVWQlFYTkRPMEZCUXpORExFMUJRVWtzVFVGQlRTeFZRVUZWTEU5QlFWWXNRMEZCVmp0QlFVTkJMRk5CUVU4c1NVRkJTU3hSUVVGS0xFTkJRV0VzVDBGQllpeERRVUZ4UWl4SFFVRnlRaXhGUVVFd1FpeEZRVUV4UWl4SlFVRm5ReXhIUVVGb1F5eEhRVUZ6UXl4SlFVRkpMRTFCUVdwRUxFTTdRVUZEUkRzN096czdPenRCUVZGTkxGTkJRVk1zWjBKQlFWUXNRMEZCTUVJc1ZVRkJNVUlzUlVGQmMwTTdPenRCUVVjelF5eE5RVUZKTEZkQlFWY3NVMEZCV0N4RFFVRnhRaXhEUVVGeVFpeEZRVUYzUWl4RFFVRjRRaXhOUVVFclFpeFRRVUZ1UXl4RlFVRTRRenRCUVVNMVF5eFJRVUZKTEdGQlFXRXNWVUZCVlN4VlFVRldMRU5CUVdwQ096czdRVUZIUVN4UlFVRkpMRmRCUVZjc1RVRkJXQ3hKUVVGeFFpeFhRVUZYTEZGQlFYQkRMRVZCUVRoRE8wRkJRelZETEdGQlFVOHNWVUZCVUR0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxGbEJRVTBzTWtKQlFVNDdRVUZEUkRzN08wRkJSMFlzUjBGWVJDeE5RVmRQTzBGQlEwd3NZVUZCVHl4dlFrRkJiMElzVlVGQmNFSXNRMEZCVUR0QlFVTkVPMEZCUTBZN08wRkJSVTBzVTBGQlV5eGxRVUZVTEVOQlFYbENMRWRCUVhwQ0xFVkJRVGhDTzBGQlEyNURMRTFCUVVrc2EwSkJRV3RDTEVOQlFVTXNXVUZCUkN4RlFVRmxMRk5CUVdZc1JVRkJNRUlzVVVGQk1VSXNSVUZCYjBNc1UwRkJjRU1zUTBGQmRFSTdRVUZEUVN4TlFVRkpMRmRCUVZrc1IwRkJSQ3hEUVVGTkxFdEJRVTRzUTBGQldTeExRVUZhTEVOQlFXWTdRVUZEUVN4TlFVRkpMRmxCUVZrc1UwRkJVeXhEUVVGVUxFTkJRV2hDT3p0QlFVVkJMRk5CUVU4c1owSkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xGTkJRWGhDTEUxQlFYVkRMRU5CUVVNc1EwRkJMME03UVVGRFJDSXNJbVpwYkdVaU9pSm5aVzVsY21GMFpXUXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS0daMWJtTjBhVzl1SUdVb2RDeHVMSElwZTJaMWJtTjBhVzl1SUhNb2J5eDFLWHRwWmlnaGJsdHZYU2w3YVdZb0lYUmJiMTBwZTNaaGNpQmhQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3YVdZb0lYVW1KbUVwY21WMGRYSnVJR0VvYnl3aE1DazdhV1lvYVNseVpYUjFjbTRnYVNodkxDRXdLVHQyWVhJZ1pqMXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsyOHJYQ0luWENJcE8zUm9jbTkzSUdZdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4bWZYWmhjaUJzUFc1YmIxMDllMlY0Y0c5eWRITTZlMzE5TzNSYmIxMWJNRjB1WTJGc2JDaHNMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9aU2w3ZG1GeUlHNDlkRnR2WFZzeFhWdGxYVHR5WlhSMWNtNGdjeWh1UDI0NlpTbDlMR3dzYkM1bGVIQnZjblJ6TEdVc2RDeHVMSElwZlhKbGRIVnliaUJ1VzI5ZExtVjRjRzl5ZEhOOWRtRnlJR2s5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0bWIzSW9kbUZ5SUc4OU1EdHZQSEl1YkdWdVozUm9PMjhyS3lsektISmJiMTBwTzNKbGRIVnliaUJ6ZlNraUxDSmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVjbVZ4ZFdseVpTaGNJbU52Y21VdGFuTXZjMmhwYlZ3aUtUdGNibHh1Y21WeGRXbHlaU2hjSW5KbFoyVnVaWEpoZEc5eUxYSjFiblJwYldVdmNuVnVkR2x0WlZ3aUtUdGNibHh1Y21WeGRXbHlaU2hjSW1OdmNtVXRhbk12Wm00dmNtVm5aWGh3TDJWelkyRndaVndpS1R0Y2JseHVMeW9nWlhOc2FXNTBJRzFoZUMxc1pXNDZJREFnS2k5Y2JseHVhV1lnS0dkc2IySmhiQzVmWW1GaVpXeFFiMng1Wm1sc2JDa2dlMXh1SUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdmJteDVJRzl1WlNCcGJuTjBZVzVqWlNCdlppQmlZV0psYkMxd2IyeDVabWxzYkNCcGN5QmhiR3h2ZDJWa1hDSXBPMXh1ZlZ4dVoyeHZZbUZzTGw5aVlXSmxiRkJ2YkhsbWFXeHNJRDBnZEhKMVpUdGNibHh1THk4Z1UyaHZkV3hrSUdKbElISmxiVzkyWldRZ2FXNGdkR2hsSUc1bGVIUWdiV0ZxYjNJZ2NtVnNaV0Z6WlRwY2JseHVkbUZ5SUVSRlJrbE9SVjlRVWs5UVJWSlVXU0E5SUZ3aVpHVm1hVzVsVUhKdmNHVnlkSGxjSWp0Y2JtWjFibU4wYVc5dUlHUmxabWx1WlNoUExDQnJaWGtzSUhaaGJIVmxLU0I3WEc0Z0lFOWJhMlY1WFNCOGZDQlBZbXBsWTNSYlJFVkdTVTVGWDFCU1QxQkZVbFJaWFNoUExDQnJaWGtzSUh0Y2JpQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnZG1Gc2RXVTZJSFpoYkhWbFhHNGdJSDBwTzF4dWZWeHVYRzVrWldacGJtVW9VM1J5YVc1bkxuQnliM1J2ZEhsd1pTd2dYQ0p3WVdSTVpXWjBYQ0lzSUZ3aVhDSXVjR0ZrVTNSaGNuUXBPMXh1WkdWbWFXNWxLRk4wY21sdVp5NXdjbTkwYjNSNWNHVXNJRndpY0dGa1VtbG5hSFJjSWl3Z1hDSmNJaTV3WVdSRmJtUXBPMXh1WEc1Y0luQnZjQ3h5WlhabGNuTmxMSE5vYVdaMExHdGxlWE1zZG1Gc2RXVnpMR1Z1ZEhKcFpYTXNhVzVrWlhoUFppeGxkbVZ5ZVN4emIyMWxMR1p2Y2tWaFkyZ3NiV0Z3TEdacGJIUmxjaXhtYVc1a0xHWnBibVJKYm1SbGVDeHBibU5zZFdSbGN5eHFiMmx1TEhOc2FXTmxMR052Ym1OaGRDeHdkWE5vTEhOd2JHbGpaU3gxYm5Ob2FXWjBMSE52Y25Rc2JHRnpkRWx1WkdWNFQyWXNjbVZrZFdObExISmxaSFZqWlZKcFoyaDBMR052Y0hsWGFYUm9hVzRzWm1sc2JGd2lMbk53YkdsMEtGd2lMRndpS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNoclpYa3BJSHRjYmlBZ1cxMWJhMlY1WFNBbUppQmtaV1pwYm1Vb1FYSnlZWGtzSUd0bGVTd2dSblZ1WTNScGIyNHVZMkZzYkM1aWFXNWtLRnRkVzJ0bGVWMHBLVHRjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlkyOXlaUzV5WldkbGVIQXVaWE5qWVhCbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1U1pXZEZlSEF1WlhOallYQmxPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmloMGVYQmxiMllnYVhRZ0lUMGdKMloxYm1OMGFXOXVKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9hWFFnS3lBbklHbHpJRzV2ZENCaElHWjFibU4wYVc5dUlTY3BPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPeUlzSW5aaGNpQmpiMllnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1R0Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnYlhObktYdGNjbHh1SUNCcFppaDBlWEJsYjJZZ2FYUWdJVDBnSjI1MWJXSmxjaWNnSmlZZ1kyOW1LR2wwS1NBaFBTQW5UblZ0WW1WeUp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2JYTm5LVHRjY2x4dUlDQnlaWFIxY200Z0sybDBPMXh5WEc1OU95SXNJaTh2SURJeUxqRXVNeTR6TVNCQmNuSmhlUzV3Y205MGIzUjVjR1ZiUUVCMWJuTmpiM0JoWW14bGMxMWNiblpoY2lCVlRsTkRUMUJCUWt4RlV5QTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2QxYm5OamIzQmhZbXhsY3ljcFhHNGdJQ3dnUVhKeVlYbFFjbTkwYnlBZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVN1hHNXBaaWhCY25KaGVWQnliM1J2VzFWT1UwTlBVRUZDVEVWVFhTQTlQU0IxYm1SbFptbHVaV1FwY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwS0VGeWNtRjVVSEp2ZEc4c0lGVk9VME5QVUVGQ1RFVlRMQ0I3ZlNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lFRnljbUY1VUhKdmRHOWJWVTVUUTA5UVFVSk1SVk5kVzJ0bGVWMGdQU0IwY25WbE8xeHVmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQkRiMjV6ZEhKMVkzUnZjaXdnYm1GdFpTd2dabTl5WW1sa1pHVnVSbWxsYkdRcGUxeHVJQ0JwWmlnaEtHbDBJR2x1YzNSaGJtTmxiMllnUTI5dWMzUnlkV04wYjNJcElIeDhJQ2htYjNKaWFXUmtaVzVHYVdWc1pDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHWnZjbUpwWkdSbGJrWnBaV3hrSUdsdUlHbDBLU2w3WEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHNWhiV1VnS3lBbk9pQnBibU52Y25KbFkzUWdhVzUyYjJOaGRHbHZiaUVuS1R0Y2JpQWdmU0J5WlhSMWNtNGdhWFE3WEc1OU95SXNJblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUdsbUtDRnBjMDlpYW1WamRDaHBkQ2twZEdoeWIzY2dWSGx3WlVWeWNtOXlLR2wwSUNzZ0p5QnBjeUJ1YjNRZ1lXNGdiMkpxWldOMElTY3BPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPeUlzSWk4dklESXlMakV1TXk0eklFRnljbUY1TG5CeWIzUnZkSGx3WlM1amIzQjVWMmwwYUdsdUtIUmhjbWRsZEN3Z2MzUmhjblFzSUdWdVpDQTlJSFJvYVhNdWJHVnVaM1JvS1Z4dUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlIUnZUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGIySnFaV04wSnlsY2JpQWdMQ0IwYjBsdVpHVjRJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1WkdWNEp5bGNiaUFnTENCMGIweGxibWQwYUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFd4bGJtZDBhQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGdGRMbU52Y0hsWGFYUm9hVzRnZkh3Z1puVnVZM1JwYjI0Z1kyOXdlVmRwZEdocGJpaDBZWEpuWlhRdktqMGdNQ292TENCemRHRnlkQzhxUFNBd0xDQmxibVFnUFNCQWJHVnVaM1JvS2k4cGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnUFNCMGIwOWlhbVZqZENoMGFHbHpLVnh1SUNBZ0lDd2diR1Z1SUNBZ1BTQjBiMHhsYm1kMGFDaFBMbXhsYm1kMGFDbGNiaUFnSUNBc0lIUnZJQ0FnSUQwZ2RHOUpibVJsZUNoMFlYSm5aWFFzSUd4bGJpbGNiaUFnSUNBc0lHWnliMjBnSUQwZ2RHOUpibVJsZUNoemRHRnlkQ3dnYkdWdUtWeHVJQ0FnSUN3Z1pXNWtJQ0FnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01pQS9JR0Z5WjNWdFpXNTBjMXN5WFNBNklIVnVaR1ZtYVc1bFpGeHVJQ0FnSUN3Z1kyOTFiblFnUFNCTllYUm9MbTFwYmlnb1pXNWtJRDA5UFNCMWJtUmxabWx1WldRZ1B5QnNaVzRnT2lCMGIwbHVaR1Y0S0dWdVpDd2diR1Z1S1NrZ0xTQm1jbTl0TENCc1pXNGdMU0IwYnlsY2JpQWdJQ0FzSUdsdVl5QWdJRDBnTVR0Y2JpQWdhV1lvWm5KdmJTQThJSFJ2SUNZbUlIUnZJRHdnWm5KdmJTQXJJR052ZFc1MEtYdGNiaUFnSUNCcGJtTWdJRDBnTFRFN1hHNGdJQ0FnWm5KdmJTQXJQU0JqYjNWdWRDQXRJREU3WEc0Z0lDQWdkRzhnSUNBclBTQmpiM1Z1ZENBdElERTdYRzRnSUgxY2JpQWdkMmhwYkdVb1kyOTFiblF0TFNBK0lEQXBlMXh1SUNBZ0lHbG1LR1p5YjIwZ2FXNGdUeWxQVzNSdlhTQTlJRTliWm5KdmJWMDdYRzRnSUNBZ1pXeHpaU0JrWld4bGRHVWdUMXQwYjEwN1hHNGdJQ0FnZEc4Z0lDQXJQU0JwYm1NN1hHNGdJQ0FnWm5KdmJTQXJQU0JwYm1NN1hHNGdJSDBnY21WMGRYSnVJRTg3WEc1OU95SXNJaTh2SURJeUxqRXVNeTQySUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVtYVd4c0tIWmhiSFZsTENCemRHRnlkQ0E5SURBc0lHVnVaQ0E5SUhSb2FYTXViR1Z1WjNSb0tWeHVKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJSFJ2VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCMGIwbHVaR1Y0SUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdVpHVjRKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQm1hV3hzS0haaGJIVmxJQzhxTENCemRHRnlkQ0E5SURBc0lHVnVaQ0E5SUVCc1pXNW5kR2dnS2k4cGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOVBZbXBsWTNRb2RHaHBjeWxjYmlBZ0lDQXNJR3hsYm1kMGFDQTlJSFJ2VEdWdVozUm9LRTh1YkdWdVozUm9LVnh1SUNBZ0lDd2dZVXhsYmlBZ0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2RHOUpibVJsZUNoaFRHVnVJRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkN3Z2JHVnVaM1JvS1Z4dUlDQWdJQ3dnWlc1a0lDQWdJRDBnWVV4bGJpQStJRElnUHlCaGNtZDFiV1Z1ZEhOYk1sMGdPaUIxYm1SbFptbHVaV1JjYmlBZ0lDQXNJR1Z1WkZCdmN5QTlJR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdVozUm9JRG9nZEc5SmJtUmxlQ2hsYm1Rc0lHeGxibWQwYUNrN1hHNGdJSGRvYVd4bEtHVnVaRkJ2Y3lBK0lHbHVaR1Y0S1U5YmFXNWtaWGdySzEwZ1BTQjJZV3gxWlR0Y2JpQWdjbVYwZFhKdUlFODdYRzU5T3lJc0luWmhjaUJtYjNKUFppQTlJSEpsY1hWcGNtVW9KeTR2WDJadmNpMXZaaWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBaWElzSUVsVVJWSkJWRTlTS1h0Y2JpQWdkbUZ5SUhKbGMzVnNkQ0E5SUZ0ZE8xeHVJQ0JtYjNKUFppaHBkR1Z5TENCbVlXeHpaU3dnY21WemRXeDBMbkIxYzJnc0lISmxjM1ZzZEN3Z1NWUkZVa0ZVVDFJcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYmlJc0lpOHZJR1poYkhObElDMCtJRUZ5Y21GNUkybHVaR1Y0VDJaY2JpOHZJSFJ5ZFdVZ0lDMCtJRUZ5Y21GNUkybHVZMngxWkdWelhHNTJZWElnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCMGIwbHVaR1Y0SUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloSlUxOUpUa05NVlVSRlV5bDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdrZEdocGN5d2daV3dzSUdaeWIyMUpibVJsZUNsN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDZ2tkR2hwY3lsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2RHOU1aVzVuZEdnb1R5NXNaVzVuZEdncFhHNGdJQ0FnSUNBc0lHbHVaR1Y0SUNBOUlIUnZTVzVrWlhnb1puSnZiVWx1WkdWNExDQnNaVzVuZEdncFhHNGdJQ0FnSUNBc0lIWmhiSFZsTzF4dUlDQWdJQzh2SUVGeWNtRjVJMmx1WTJ4MVpHVnpJSFZ6WlhNZ1UyRnRaVlpoYkhWbFdtVnlieUJsY1hWaGJHbDBlU0JoYkdkdmNtbDBhRzFjYmlBZ0lDQnBaaWhKVTE5SlRrTk1WVVJGVXlBbUppQmxiQ0FoUFNCbGJDbDNhR2xzWlNoc1pXNW5kR2dnUGlCcGJtUmxlQ2w3WEc0Z0lDQWdJQ0IyWVd4MVpTQTlJRTliYVc1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0JwWmloMllXeDFaU0FoUFNCMllXeDFaU2x5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0F2THlCQmNuSmhlU04wYjBsdVpHVjRJR2xuYm05eVpYTWdhRzlzWlhNc0lFRnljbUY1STJsdVkyeDFaR1Z6SUMwZ2JtOTBYRzRnSUNBZ2ZTQmxiSE5sSUdadmNpZzdiR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGFXWW9TVk5mU1U1RFRGVkVSVk1nZkh3Z2FXNWtaWGdnYVc0Z1R5bDdYRzRnSUNBZ0lDQnBaaWhQVzJsdVpHVjRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlFbFRYMGxPUTB4VlJFVlRJSHg4SUdsdVpHVjRJSHg4SURBN1hHNGdJQ0FnZlNCeVpYUjFjbTRnSVVsVFgwbE9RMHhWUkVWVElDWW1JQzB4TzF4dUlDQjlPMXh1ZlRzaUxDSXZMeUF3SUMwK0lFRnljbUY1STJadmNrVmhZMmhjYmk4dklERWdMVDRnUVhKeVlYa2piV0Z3WEc0dkx5QXlJQzArSUVGeWNtRjVJMlpwYkhSbGNseHVMeThnTXlBdFBpQkJjbkpoZVNOemIyMWxYRzR2THlBMElDMCtJRUZ5Y21GNUkyVjJaWEo1WEc0dkx5QTFJQzArSUVGeWNtRjVJMlpwYm1SY2JpOHZJRFlnTFQ0Z1FYSnlZWGtqWm1sdVpFbHVaR1Y0WEc1MllYSWdZM1I0SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lFbFBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQmhjMk1nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMWE53WldOcFpYTXRZM0psWVhSbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRlJaVUVVc0lDUmpjbVZoZEdVcGUxeHVJQ0IyWVhJZ1NWTmZUVUZRSUNBZ0lDQWdJQ0E5SUZSWlVFVWdQVDBnTVZ4dUlDQWdJQ3dnU1ZOZlJrbE1WRVZTSUNBZ0lDQTlJRlJaVUVVZ1BUMGdNbHh1SUNBZ0lDd2dTVk5mVTA5TlJTQWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ00xeHVJQ0FnSUN3Z1NWTmZSVlpGVWxrZ0lDQWdJQ0E5SUZSWlVFVWdQVDBnTkZ4dUlDQWdJQ3dnU1ZOZlJrbE9SRjlKVGtSRldDQTlJRlJaVUVVZ1BUMGdObHh1SUNBZ0lDd2dUazlmU0U5TVJWTWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ05TQjhmQ0JKVTE5R1NVNUVYMGxPUkVWWVhHNGdJQ0FnTENCamNtVmhkR1VnSUNBZ0lDQWdJRDBnSkdOeVpXRjBaU0I4ZkNCaGMyTTdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdrZEdocGN5d2dZMkZzYkdKaFkydG1iaXdnZEdoaGRDbDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLQ1IwYUdsektWeHVJQ0FnSUNBZ0xDQnpaV3htSUNBZ1BTQkpUMkpxWldOMEtFOHBYRzRnSUNBZ0lDQXNJR1lnSUNBZ0lDQTlJR04wZUNoallXeHNZbUZqYTJadUxDQjBhR0YwTENBektWeHVJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaHpaV3htTG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ3dnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnTENCeVpYTjFiSFFnUFNCSlUxOU5RVkFnUHlCamNtVmhkR1VvSkhSb2FYTXNJR3hsYm1kMGFDa2dPaUJKVTE5R1NVeFVSVklnUHlCamNtVmhkR1VvSkhSb2FYTXNJREFwSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBc0lIWmhiQ3dnY21Wek8xeHVJQ0FnSUdadmNpZzdiR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGFXWW9UazlmU0U5TVJWTWdmSHdnYVc1a1pYZ2dhVzRnYzJWc1ppbDdYRzRnSUNBZ0lDQjJZV3dnUFNCelpXeG1XMmx1WkdWNFhUdGNiaUFnSUNBZ0lISmxjeUE5SUdZb2RtRnNMQ0JwYm1SbGVDd2dUeWs3WEc0Z0lDQWdJQ0JwWmloVVdWQkZLWHRjYmlBZ0lDQWdJQ0FnYVdZb1NWTmZUVUZRS1hKbGMzVnNkRnRwYm1SbGVGMGdQU0J5WlhNN0lDQWdJQ0FnSUNBZ0lDQWdMeThnYldGd1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZb2NtVnpLWE4zYVhSamFDaFVXVkJGS1h0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSURNNklISmxkSFZ5YmlCMGNuVmxPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyOXRaVnh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdOVG9nY21WMGRYSnVJSFpoYkRzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVc1a1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBMk9pQnlaWFIxY200Z2FXNWtaWGc3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHWnBibVJKYm1SbGVGeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVZ6ZFd4MExuQjFjMmdvZG1Gc0tUc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm1hV3gwWlhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUtFbFRYMFZXUlZKWktYSmxkSFZ5YmlCbVlXeHpaVHNnSUNBZ0lDQWdJQ0FnTHk4Z1pYWmxjbmxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUVsVFgwWkpUa1JmU1U1RVJWZ2dQeUF0TVNBNklFbFRYMU5QVFVVZ2ZId2dTVk5mUlZaRlVsa2dQeUJKVTE5RlZrVlNXU0E2SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibjA3SWl3aWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh5WEc0Z0lDd2dkRzlQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNjbHh1SUNBc0lFbFBZbXBsWTNRZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1Z4eVhHNGdJQ3dnZEc5TVpXNW5kR2dnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWs3WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLSFJvWVhRc0lHTmhiR3hpWVdOclptNHNJR0ZNWlc0c0lHMWxiVzhzSUdselVtbG5hSFFwZTF4eVhHNGdJR0ZHZFc1amRHbHZiaWhqWVd4c1ltRmphMlp1S1R0Y2NseHVJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOVBZbXBsWTNRb2RHaGhkQ2xjY2x4dUlDQWdJQ3dnYzJWc1ppQWdJRDBnU1U5aWFtVmpkQ2hQS1Z4eVhHNGdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2NseHVJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2FYTlNhV2RvZENBL0lHeGxibWQwYUNBdElERWdPaUF3WEhKY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SUdselVtbG5hSFFnUHlBdE1TQTZJREU3WEhKY2JpQWdhV1lvWVV4bGJpQThJRElwWm05eUtEczdLWHRjY2x4dUlDQWdJR2xtS0dsdVpHVjRJR2x1SUhObGJHWXBlMXh5WEc0Z0lDQWdJQ0J0WlcxdklEMGdjMlZzWmx0cGJtUmxlRjA3WEhKY2JpQWdJQ0FnSUdsdVpHVjRJQ3M5SUdrN1hISmNiaUFnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVc1a1pYZ2dLejBnYVR0Y2NseHVJQ0FnSUdsbUtHbHpVbWxuYUhRZ1B5QnBibVJsZUNBOElEQWdPaUJzWlc1bmRHZ2dQRDBnYVc1a1pYZ3BlMXh5WEc0Z0lDQWdJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMUpsWkhWalpTQnZaaUJsYlhCMGVTQmhjbkpoZVNCM2FYUm9JRzV2SUdsdWFYUnBZV3dnZG1Gc2RXVW5LVHRjY2x4dUlDQWdJSDFjY2x4dUlDQjlYSEpjYmlBZ1ptOXlLRHRwYzFKcFoyaDBJRDhnYVc1a1pYZ2dQajBnTUNBNklHeGxibWQwYUNBK0lHbHVaR1Y0T3lCcGJtUmxlQ0FyUFNCcEtXbG1LR2x1WkdWNElHbHVJSE5sYkdZcGUxeHlYRzRnSUNBZ2JXVnRieUE5SUdOaGJHeGlZV05yWm00b2JXVnRieXdnYzJWc1psdHBibVJsZUYwc0lHbHVaR1Y0TENCUEtUdGNjbHh1SUNCOVhISmNiaUFnY21WMGRYSnVJRzFsYlc4N1hISmNibjA3SWl3aWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNjbHh1SUNBc0lHbHpRWEp5WVhrZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGtuS1Z4eVhHNGdJQ3dnVTFCRlEwbEZVeUFnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmMzQmxZMmxsY3ljcE8xeHlYRzVjY2x4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodmNtbG5hVzVoYkNsN1hISmNiaUFnZG1GeUlFTTdYSEpjYmlBZ2FXWW9hWE5CY25KaGVTaHZjbWxuYVc1aGJDa3BlMXh5WEc0Z0lDQWdReUE5SUc5eWFXZHBibUZzTG1OdmJuTjBjblZqZEc5eU8xeHlYRzRnSUNBZ0x5OGdZM0p2YzNNdGNtVmhiRzBnWm1Gc2JHSmhZMnRjY2x4dUlDQWdJR2xtS0hSNWNHVnZaaUJESUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnS0VNZ1BUMDlJRUZ5Y21GNUlIeDhJR2x6UVhKeVlYa29ReTV3Y205MGIzUjVjR1VwS1NsRElEMGdkVzVrWldacGJtVmtPMXh5WEc0Z0lDQWdhV1lvYVhOUFltcGxZM1FvUXlrcGUxeHlYRzRnSUNBZ0lDQkRJRDBnUTF0VFVFVkRTVVZUWFR0Y2NseHVJQ0FnSUNBZ2FXWW9ReUE5UFQwZ2JuVnNiQ2xESUQwZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ2ZWeHlYRzRnSUgwZ2NtVjBkWEp1SUVNZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUVGeWNtRjVJRG9nUXp0Y2NseHVmVHNpTENJdkx5QTVMalF1TWk0eklFRnljbUY1VTNCbFkybGxjME55WldGMFpTaHZjbWxuYVc1aGJFRnljbUY1TENCc1pXNW5kR2dwWEc1MllYSWdjM0JsWTJsbGMwTnZibk4wY25WamRHOXlJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YzNCbFkybGxjeTFqYjI1emRISjFZM1J2Y2ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRzl5YVdkcGJtRnNMQ0JzWlc1bmRHZ3BlMXh1SUNCeVpYUjFjbTRnYm1WM0lDaHpjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9iM0pwWjJsdVlXd3BLU2hzWlc1bmRHZ3BPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdZVVoxYm1OMGFXOXVJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdsdWRtOXJaU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYm5admEyVW5LVnh1SUNBc0lHRnljbUY1VTJ4cFkyVWdQU0JiWFM1emJHbGpaVnh1SUNBc0lHWmhZM1J2Y21sbGN5QWdQU0I3ZlR0Y2JseHVkbUZ5SUdOdmJuTjBjblZqZENBOUlHWjFibU4wYVc5dUtFWXNJR3hsYml3Z1lYSm5jeWw3WEc0Z0lHbG1LQ0VvYkdWdUlHbHVJR1poWTNSdmNtbGxjeWtwZTF4dUlDQWdJR1p2Y2loMllYSWdiaUE5SUZ0ZExDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JLVzViYVYwZ1BTQW5ZVnNuSUNzZ2FTQXJJQ2RkSnp0Y2JpQWdJQ0JtWVdOMGIzSnBaWE5iYkdWdVhTQTlJRVoxYm1OMGFXOXVLQ2RHTEdFbkxDQW5jbVYwZFhKdUlHNWxkeUJHS0NjZ0t5QnVMbXB2YVc0b0p5d25LU0FySUNjcEp5azdYRzRnSUgwZ2NtVjBkWEp1SUdaaFkzUnZjbWxsYzF0c1pXNWRLRVlzSUdGeVozTXBPMXh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkdkVzVqZEdsdmJpNWlhVzVrSUh4OElHWjFibU4wYVc5dUlHSnBibVFvZEdoaGRDQXZLaXdnWVhKbmN5NHVMaUFxTHlsN1hHNGdJSFpoY2lCbWJpQWdJQ0FnSUNBOUlHRkdkVzVqZEdsdmJpaDBhR2x6S1Z4dUlDQWdJQ3dnY0dGeWRFRnlaM01nUFNCaGNuSmhlVk5zYVdObExtTmhiR3dvWVhKbmRXMWxiblJ6TENBeEtUdGNiaUFnZG1GeUlHSnZkVzVrSUQwZ1puVnVZM1JwYjI0b0x5b2dZWEpuY3k0dUxpQXFMeWw3WEc0Z0lDQWdkbUZ5SUdGeVozTWdQU0J3WVhKMFFYSm5jeTVqYjI1allYUW9ZWEp5WVhsVGJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5a3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpJR2x1YzNSaGJtTmxiMllnWW05MWJtUWdQeUJqYjI1emRISjFZM1FvWm00c0lHRnlaM011YkdWdVozUm9MQ0JoY21kektTQTZJR2x1ZG05clpTaG1iaXdnWVhKbmN5d2dkR2hoZENrN1hHNGdJSDA3WEc0Z0lHbG1LR2x6VDJKcVpXTjBLR1p1TG5CeWIzUnZkSGx3WlNrcFltOTFibVF1Y0hKdmRHOTBlWEJsSUQwZ1ptNHVjSEp2ZEc5MGVYQmxPMXh1SUNCeVpYUjFjbTRnWW05MWJtUTdYRzU5T3lJc0lpOHZJR2RsZEhScGJtY2dkR0ZuSUdaeWIyMGdNVGt1TVM0ekxqWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5Z3BYRzUyWVhJZ1kyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWxjYmlBZ0xDQlVRVWNnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVnh1SUNBdkx5QkZVek1nZDNKdmJtY2dhR1Z5WlZ4dUlDQXNJRUZTUnlBOUlHTnZaaWhtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnWVhKbmRXMWxiblJ6T3lCOUtDa3BJRDA5SUNkQmNtZDFiV1Z1ZEhNbk8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdTVVV4TVNCVFkzSnBjSFFnUVdOalpYTnpJRVJsYm1sbFpDQmxjbkp2Y2x4dWRtRnlJSFJ5ZVVkbGRDQTlJR1oxYm1OMGFXOXVLR2wwTENCclpYa3BlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGRGdHJaWGxkTzF4dUlDQjlJR05oZEdOb0tHVXBleUF2S2lCbGJYQjBlU0FxTHlCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlFOHNJRlFzSUVJN1hHNGdJSEpsZEhWeWJpQnBkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKMVZ1WkdWbWFXNWxaQ2NnT2lCcGRDQTlQVDBnYm5Wc2JDQS9JQ2RPZFd4c0oxeHVJQ0FnSUM4dklFQkFkRzlUZEhKcGJtZFVZV2NnWTJGelpWeHVJQ0FnSURvZ2RIbHdaVzltSUNoVUlEMGdkSEo1UjJWMEtFOGdQU0JQWW1wbFkzUW9hWFFwTENCVVFVY3BLU0E5UFNBbmMzUnlhVzVuSnlBL0lGUmNiaUFnSUNBdkx5QmlkV2xzZEdsdVZHRm5JR05oYzJWY2JpQWdJQ0E2SUVGU1J5QS9JR052WmloUEtWeHVJQ0FnSUM4dklFVlRNeUJoY21kMWJXVnVkSE1nWm1Gc2JHSmhZMnRjYmlBZ0lDQTZJQ2hDSUQwZ1kyOW1LRThwS1NBOVBTQW5UMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdUeTVqWVd4c1pXVWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lDZEJjbWQxYldWdWRITW5JRG9nUWp0Y2JuMDdJaXdpZG1GeUlIUnZVM1J5YVc1bklEMGdlMzB1ZEc5VGRISnBibWM3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnZEc5VGRISnBibWN1WTJGc2JDaHBkQ2t1YzJ4cFkyVW9PQ3dnTFRFcE8xeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1pGQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z1kzSmxZWFJsSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWxjYmlBZ0xDQm9hV1JsSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJSEpsWkdWbWFXNWxRV3hzSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVXRZV3hzSnlsY2JpQWdMQ0JqZEhnZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhHNGdJQ3dnWkdWbWFXNWxaQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWldacGJtVmtKeWxjYmlBZ0xDQm1iM0pQWmlBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcFhHNGdJQ3dnSkdsMFpYSkVaV1pwYm1VZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXUmxabWx1WlNjcFhHNGdJQ3dnYzNSbGNDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxYTjBaWEFuS1Z4dUlDQXNJSE5sZEZOd1pXTnBaWE1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1Z4dUlDQXNJRVJGVTBOU1NWQlVUMUpUSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJR1poYzNSTFpYa2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVNjcExtWmhjM1JMWlhsY2JpQWdMQ0JUU1ZwRklDQWdJQ0FnSUNBOUlFUkZVME5TU1ZCVVQxSlRJRDhnSjE5ekp5QTZJQ2R6YVhwbEp6dGNibHh1ZG1GeUlHZGxkRVZ1ZEhKNUlEMGdablZ1WTNScGIyNG9kR2hoZEN3Z2EyVjVLWHRjYmlBZ0x5OGdabUZ6ZENCallYTmxYRzRnSUhaaGNpQnBibVJsZUNBOUlHWmhjM1JMWlhrb2EyVjVLU3dnWlc1MGNuazdYRzRnSUdsbUtHbHVaR1Y0SUNFOVBTQW5SaWNwY21WMGRYSnVJSFJvWVhRdVgybGJhVzVrWlhoZE8xeHVJQ0F2THlCbWNtOTZaVzRnYjJKcVpXTjBJR05oYzJWY2JpQWdabTl5S0dWdWRISjVJRDBnZEdoaGRDNWZaanNnWlc1MGNuazdJR1Z1ZEhKNUlEMGdaVzUwY25rdWJpbDdYRzRnSUNBZ2FXWW9aVzUwY25rdWF5QTlQU0JyWlhrcGNtVjBkWEp1SUdWdWRISjVPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdaMlYwUTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUtIZHlZWEJ3WlhJc0lFNUJUVVVzSUVsVFgwMUJVQ3dnUVVSRVJWSXBlMXh1SUNBZ0lIWmhjaUJESUQwZ2QzSmhjSEJsY2lobWRXNWpkR2x2YmloMGFHRjBMQ0JwZEdWeVlXSnNaU2w3WEc0Z0lDQWdJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJRU1zSUU1QlRVVXNJQ2RmYVNjcE8xeHVJQ0FnSUNBZ2RHaGhkQzVmYVNBOUlHTnlaV0YwWlNodWRXeHNLVHNnTHk4Z2FXNWtaWGhjYmlBZ0lDQWdJSFJvWVhRdVgyWWdQU0IxYm1SbFptbHVaV1E3SUNBZ0lDOHZJR1pwY25OMElHVnVkSEo1WEc0Z0lDQWdJQ0IwYUdGMExsOXNJRDBnZFc1a1pXWnBibVZrT3lBZ0lDQXZMeUJzWVhOMElHVnVkSEo1WEc0Z0lDQWdJQ0IwYUdGMFcxTkpXa1ZkSUQwZ01Ec2dJQ0FnSUNBZ0lDQXZMeUJ6YVhwbFhHNGdJQ0FnSUNCcFppaHBkR1Z5WVdKc1pTQWhQU0IxYm1SbFptbHVaV1FwWm05eVQyWW9hWFJsY21GaWJHVXNJRWxUWDAxQlVDd2dkR2hoZEZ0QlJFUkZVbDBzSUhSb1lYUXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxaR1ZtYVc1bFFXeHNLRU11Y0hKdmRHOTBlWEJsTENCN1hHNGdJQ0FnSUNBdkx5QXlNeTR4TGpNdU1TQk5ZWEF1Y0hKdmRHOTBlWEJsTG1Oc1pXRnlLQ2xjYmlBZ0lDQWdJQzh2SURJekxqSXVNeTR5SUZObGRDNXdjbTkwYjNSNWNHVXVZMnhsWVhJb0tWeHVJQ0FnSUNBZ1kyeGxZWEk2SUdaMWJtTjBhVzl1SUdOc1pXRnlLQ2w3WEc0Z0lDQWdJQ0FnSUdadmNpaDJZWElnZEdoaGRDQTlJSFJvYVhNc0lHUmhkR0VnUFNCMGFHRjBMbDlwTENCbGJuUnllU0E5SUhSb1lYUXVYMlk3SUdWdWRISjVPeUJsYm5SeWVTQTlJR1Z1ZEhKNUxtNHBlMXh1SUNBZ0lDQWdJQ0FnSUdWdWRISjVMbklnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtHVnVkSEo1TG5BcFpXNTBjbmt1Y0NBOUlHVnVkSEo1TG5BdWJpQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWkdGMFlWdGxiblJ5ZVM1cFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdGMExsOW1JRDBnZEdoaGRDNWZiQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2RHaGhkRnRUU1ZwRlhTQTlJREE3WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnTHk4Z01qTXVNUzR6TGpNZ1RXRndMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9hMlY1S1Z4dUlDQWdJQ0FnTHk4Z01qTXVNaTR6TGpRZ1UyVjBMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9kbUZzZFdVcFhHNGdJQ0FnSUNBblpHVnNaWFJsSnpvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUm9ZWFFnSUQwZ2RHaHBjMXh1SUNBZ0lDQWdJQ0FnSUN3Z1pXNTBjbmtnUFNCblpYUkZiblJ5ZVNoMGFHRjBMQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQnBaaWhsYm5SeWVTbDdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHNWxlSFFnUFNCbGJuUnllUzV1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXNJSEJ5WlhZZ1BTQmxiblJ5ZVM1d08xeHVJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR0YwTGw5cFcyVnVkSEo1TG1sZE8xeHVJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUxuSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJR2xtS0hCeVpYWXBjSEpsZGk1dUlEMGdibVY0ZER0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWh1WlhoMEtXNWxlSFF1Y0NBOUlIQnlaWFk3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9kR2hoZEM1ZlppQTlQU0JsYm5SeWVTbDBhR0YwTGw5bUlEMGdibVY0ZER0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWgwYUdGMExsOXNJRDA5SUdWdWRISjVLWFJvWVhRdVgyd2dQU0J3Y21WMk8xeHVJQ0FnSUNBZ0lDQWdJSFJvWVhSYlUwbGFSVjB0TFR0Y2JpQWdJQ0FnSUNBZ2ZTQnlaWFIxY200Z0lTRmxiblJ5ZVR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBdkx5QXlNeTR5TGpNdU5pQlRaWFF1Y0hKdmRHOTBlWEJsTG1admNrVmhZMmdvWTJGc2JHSmhZMnRtYml3Z2RHaHBjMEZ5WnlBOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNBZ0lDOHZJREl6TGpFdU15NDFJRTFoY0M1d2NtOTBiM1I1Y0dVdVptOXlSV0ZqYUNoallXeHNZbUZqYTJadUxDQjBhR2x6UVhKbklEMGdkVzVrWldacGJtVmtLVnh1SUNBZ0lDQWdabTl5UldGamFEb2dablZ1WTNScGIyNGdabTl5UldGamFDaGpZV3hzWW1GamEyWnVJQzhxTENCMGFHRjBJRDBnZFc1a1pXWnBibVZrSUNvdktYdGNiaUFnSUNBZ0lDQWdZVzVKYm5OMFlXNWpaU2gwYUdsekxDQkRMQ0FuWm05eVJXRmphQ2NwTzF4dUlDQWdJQ0FnSUNCMllYSWdaaUE5SUdOMGVDaGpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkN3Z015bGNiaUFnSUNBZ0lDQWdJQ0FzSUdWdWRISjVPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTaGxiblJ5ZVNBOUlHVnVkSEo1SUQ4Z1pXNTBjbmt1YmlBNklIUm9hWE11WDJZcGUxeHVJQ0FnSUNBZ0lDQWdJR1lvWlc1MGNua3VkaXdnWlc1MGNua3VheXdnZEdocGN5azdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2NtVjJaWEowSUhSdklIUm9aU0JzWVhOMElHVjRhWE4wYVc1bklHVnVkSEo1WEc0Z0lDQWdJQ0FnSUNBZ2QyaHBiR1VvWlc1MGNua2dKaVlnWlc1MGNua3VjaWxsYm5SeWVTQTlJR1Z1ZEhKNUxuQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlBeU15NHhMak11TnlCTllYQXVjSEp2ZEc5MGVYQmxMbWhoY3loclpYa3BYRzRnSUNBZ0lDQXZMeUF5TXk0eUxqTXVOeUJUWlhRdWNISnZkRzkwZVhCbExtaGhjeWgyWVd4MVpTbGNiaUFnSUNBZ0lHaGhjem9nWm5WdVkzUnBiMjRnYUdGektHdGxlU2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVdkbGRFVnVkSEo1S0hSb2FYTXNJR3RsZVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZb1JFVlRRMUpKVUZSUFVsTXBaRkFvUXk1d2NtOTBiM1I1Y0dVc0lDZHphWHBsSnl3Z2UxeHVJQ0FnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWbWFXNWxaQ2gwYUdselcxTkpXa1ZkS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRenRjYmlBZ2ZTeGNiaUFnWkdWbU9pQm1kVzVqZEdsdmJpaDBhR0YwTENCclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQm5aWFJGYm5SeWVTaDBhR0YwTENCclpYa3BYRzRnSUNBZ0lDQXNJSEJ5WlhZc0lHbHVaR1Y0TzF4dUlDQWdJQzh2SUdOb1lXNW5aU0JsZUdsemRHbHVaeUJsYm5SeWVWeHVJQ0FnSUdsbUtHVnVkSEo1S1h0Y2JpQWdJQ0FnSUdWdWRISjVMbllnUFNCMllXeDFaVHRjYmlBZ0lDQXZMeUJqY21WaGRHVWdibVYzSUdWdWRISjVYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb1lYUXVYMndnUFNCbGJuUnllU0E5SUh0Y2JpQWdJQ0FnSUNBZ2FUb2dhVzVrWlhnZ1BTQm1ZWE4wUzJWNUtHdGxlU3dnZEhKMVpTa3NJQzh2SUR3dElHbHVaR1Y0WEc0Z0lDQWdJQ0FnSUdzNklHdGxlU3dnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCclpYbGNiaUFnSUNBZ0lDQWdkam9nZG1Gc2RXVXNJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lIQTZJSEJ5WlhZZ1BTQjBhR0YwTGw5c0xDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQndjbVYyYVc5MWN5QmxiblJ5ZVZ4dUlDQWdJQ0FnSUNCdU9pQjFibVJsWm1sdVpXUXNJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2JtVjRkQ0JsYm5SeWVWeHVJQ0FnSUNBZ0lDQnlPaUJtWVd4elpTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdjbVZ0YjNabFpGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lHbG1LQ0YwYUdGMExsOW1LWFJvWVhRdVgyWWdQU0JsYm5SeWVUdGNiaUFnSUNBZ0lHbG1LSEJ5WlhZcGNISmxkaTV1SUQwZ1pXNTBjbms3WEc0Z0lDQWdJQ0IwYUdGMFcxTkpXa1ZkS3lzN1hHNGdJQ0FnSUNBdkx5QmhaR1FnZEc4Z2FXNWtaWGhjYmlBZ0lDQWdJR2xtS0dsdVpHVjRJQ0U5UFNBblJpY3BkR2hoZEM1ZmFWdHBibVJsZUYwZ1BTQmxiblJ5ZVR0Y2JpQWdJQ0I5SUhKbGRIVnliaUIwYUdGME8xeHVJQ0I5TEZ4dUlDQm5aWFJGYm5SeWVUb2daMlYwUlc1MGNua3NYRzRnSUhObGRGTjBjbTl1WnpvZ1puVnVZM1JwYjI0b1F5d2dUa0ZOUlN3Z1NWTmZUVUZRS1h0Y2JpQWdJQ0F2THlCaFpHUWdMbXRsZVhNc0lDNTJZV3gxWlhNc0lDNWxiblJ5YVdWekxDQmJRRUJwZEdWeVlYUnZjbDFjYmlBZ0lDQXZMeUF5TXk0eExqTXVOQ3dnTWpNdU1TNHpMamdzSURJekxqRXVNeTR4TVN3Z01qTXVNUzR6TGpFeUxDQXlNeTR5TGpNdU5Td2dNak11TWk0ekxqZ3NJREl6TGpJdU15NHhNQ3dnTWpNdU1pNHpMakV4WEc0Z0lDQWdKR2wwWlhKRVpXWnBibVVvUXl3Z1RrRk5SU3dnWm5WdVkzUnBiMjRvYVhSbGNtRjBaV1FzSUd0cGJtUXBlMXh1SUNBZ0lDQWdkR2hwY3k1ZmRDQTlJR2wwWlhKaGRHVmtPeUFnTHk4Z2RHRnlaMlYwWEc0Z0lDQWdJQ0IwYUdsekxsOXJJRDBnYTJsdVpEc2dJQ0FnSUNBdkx5QnJhVzVrWEc0Z0lDQWdJQ0IwYUdsekxsOXNJRDBnZFc1a1pXWnBibVZrT3lBdkx5QndjbVYyYVc5MWMxeHVJQ0FnSUgwc0lHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQjJZWElnZEdoaGRDQWdQU0IwYUdselhHNGdJQ0FnSUNBZ0lDd2dhMmx1WkNBZ1BTQjBhR0YwTGw5clhHNGdJQ0FnSUNBZ0lDd2daVzUwY25rZ1BTQjBhR0YwTGw5c08xeHVJQ0FnSUNBZ0x5OGdjbVYyWlhKMElIUnZJSFJvWlNCc1lYTjBJR1Y0YVhOMGFXNW5JR1Z1ZEhKNVhHNGdJQ0FnSUNCM2FHbHNaU2hsYm5SeWVTQW1KaUJsYm5SeWVTNXlLV1Z1ZEhKNUlEMGdaVzUwY25rdWNEdGNiaUFnSUNBZ0lDOHZJR2RsZENCdVpYaDBJR1Z1ZEhKNVhHNGdJQ0FnSUNCcFppZ2hkR2hoZEM1ZmRDQjhmQ0FoS0hSb1lYUXVYMndnUFNCbGJuUnllU0E5SUdWdWRISjVJRDhnWlc1MGNua3ViaUE2SUhSb1lYUXVYM1F1WDJZcEtYdGNiaUFnSUNBZ0lDQWdMeThnYjNJZ1ptbHVhWE5vSUhSb1pTQnBkR1Z5WVhScGIyNWNiaUFnSUNBZ0lDQWdkR2hoZEM1ZmRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wWlhBb01TazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUJ5WlhSMWNtNGdjM1JsY0NCaWVTQnJhVzVrWEc0Z0lDQWdJQ0JwWmlocmFXNWtJRDA5SUNkclpYbHpKeUFnS1hKbGRIVnliaUJ6ZEdWd0tEQXNJR1Z1ZEhKNUxtc3BPMXh1SUNBZ0lDQWdhV1lvYTJsdVpDQTlQU0FuZG1Gc2RXVnpKeWx5WlhSMWNtNGdjM1JsY0Nnd0xDQmxiblJ5ZVM1MktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCemRHVndLREFzSUZ0bGJuUnllUzVyTENCbGJuUnllUzUyWFNrN1hHNGdJQ0FnZlN3Z1NWTmZUVUZRSUQ4Z0oyVnVkSEpwWlhNbklEb2dKM1poYkhWbGN5Y2dMQ0FoU1ZOZlRVRlFMQ0IwY25WbEtUdGNibHh1SUNBZ0lDOHZJR0ZrWkNCYlFFQnpjR1ZqYVdWelhTd2dNak11TVM0eUxqSXNJREl6TGpJdU1pNHlYRzRnSUNBZ2MyVjBVM0JsWTJsbGN5aE9RVTFGS1R0Y2JpQWdmVnh1ZlRzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2UkdGMmFXUkNjblZoYm5RdlRXRndMVk5sZEM1d2NtOTBiM1I1Y0dVdWRHOUtVMDlPWEc1MllYSWdZMnhoYzNOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOc1lYTnpiMlluS1Z4dUlDQXNJR1p5YjIwZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFtY205dExXbDBaWEpoWW14bEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRTVCVFVVcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdkRzlLVTA5T0tDbDdYRzRnSUNBZ2FXWW9ZMnhoYzNOdlppaDBhR2x6S1NBaFBTQk9RVTFGS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhPUVUxRklDc2dYQ0lqZEc5S1UwOU9JR2x6YmlkMElHZGxibVZ5YVdOY0lpazdYRzRnSUNBZ2NtVjBkWEp1SUdaeWIyMG9kR2hwY3lrN1hHNGdJSDA3WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJ5WldSbFptbHVaVUZzYkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwWEc0Z0lDd2daMlYwVjJWaGF5QWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWt1WjJWMFYyVmhhMXh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhHNGdJQ3dnWm05eVQyWWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1iM0l0YjJZbktWeHVJQ0FzSUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrSUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhrdGJXVjBhRzlrY3ljcFhHNGdJQ3dnSkdoaGN5QWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJR0Z5Y21GNVJtbHVaQ0FnSUNBZ0lDQWdJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTlNsY2JpQWdMQ0JoY25KaGVVWnBibVJKYm1SbGVDQWdJQ0E5SUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrS0RZcFhHNGdJQ3dnYVdRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBd08xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHdGxlWE5jYm5aaGNpQjFibU5oZFdkb2RFWnliM3BsYmxOMGIzSmxJRDBnWm5WdVkzUnBiMjRvZEdoaGRDbDdYRzRnSUhKbGRIVnliaUIwYUdGMExsOXNJSHg4SUNoMGFHRjBMbDlzSUQwZ2JtVjNJRlZ1WTJGMVoyaDBSbkp2ZW1WdVUzUnZjbVVwTzF4dWZUdGNiblpoY2lCVmJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbElEMGdablZ1WTNScGIyNG9LWHRjYmlBZ2RHaHBjeTVoSUQwZ1cxMDdYRzU5TzF4dWRtRnlJR1pwYm1SVmJtTmhkV2RvZEVaeWIzcGxiaUE5SUdaMWJtTjBhVzl1S0hOMGIzSmxMQ0JyWlhrcGUxeHVJQ0J5WlhSMWNtNGdZWEp5WVhsR2FXNWtLSE4wYjNKbExtRXNJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhWFJiTUYwZ1BUMDlJR3RsZVR0Y2JpQWdmU2s3WEc1OU8xeHVWVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaUzV3Y205MGIzUjVjR1VnUFNCN1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0JtYVc1a1ZXNWpZWFZuYUhSR2NtOTZaVzRvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0JwWmlobGJuUnllU2x5WlhSMWNtNGdaVzUwY25sYk1WMDdYRzRnSUgwc1hHNGdJR2hoY3pvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQnlaWFIxY200Z0lTRm1hVzVrVlc1allYVm5hSFJHY205NlpXNG9kR2hwY3l3Z2EyVjVLVHRjYmlBZ2ZTeGNiaUFnYzJWME9pQm1kVzVqZEdsdmJpaHJaWGtzSUhaaGJIVmxLWHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0JtYVc1a1ZXNWpZWFZuYUhSR2NtOTZaVzRvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0JwWmlobGJuUnllU2xsYm5SeWVWc3hYU0E5SUhaaGJIVmxPMXh1SUNBZ0lHVnNjMlVnZEdocGN5NWhMbkIxYzJnb1cydGxlU3dnZG1Gc2RXVmRLVHRjYmlBZ2ZTeGNiaUFnSjJSbGJHVjBaU2M2SUdaMWJtTjBhVzl1S0d0bGVTbDdYRzRnSUNBZ2RtRnlJR2x1WkdWNElEMGdZWEp5WVhsR2FXNWtTVzVrWlhnb2RHaHBjeTVoTENCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2FYUmJNRjBnUFQwOUlHdGxlVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnBaaWgrYVc1a1pYZ3BkR2hwY3k1aExuTndiR2xqWlNocGJtUmxlQ3dnTVNrN1hHNGdJQ0FnY21WMGRYSnVJQ0VoZm1sdVpHVjRPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdaMlYwUTI5dWMzUnlkV04wYjNJNklHWjFibU4wYVc5dUtIZHlZWEJ3WlhJc0lFNUJUVVVzSUVsVFgwMUJVQ3dnUVVSRVJWSXBlMXh1SUNBZ0lIWmhjaUJESUQwZ2QzSmhjSEJsY2lobWRXNWpkR2x2YmloMGFHRjBMQ0JwZEdWeVlXSnNaU2w3WEc0Z0lDQWdJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJRU1zSUU1QlRVVXNJQ2RmYVNjcE8xeHVJQ0FnSUNBZ2RHaGhkQzVmYVNBOUlHbGtLeXM3SUNBZ0lDQWdMeThnWTI5c2JHVmpkR2x2YmlCcFpGeHVJQ0FnSUNBZ2RHaGhkQzVmYkNBOUlIVnVaR1ZtYVc1bFpEc2dMeThnYkdWaGF5QnpkRzl5WlNCbWIzSWdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHOWlhbVZqZEhOY2JpQWdJQ0FnSUdsbUtHbDBaWEpoWW14bElDRTlJSFZ1WkdWbWFXNWxaQ2xtYjNKUFppaHBkR1Z5WVdKc1pTd2dTVk5mVFVGUUxDQjBhR0YwVzBGRVJFVlNYU3dnZEdoaGRDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVmtaV1pwYm1WQmJHd29ReTV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0FnSUM4dklESXpMak11TXk0eUlGZGxZV3ROWVhBdWNISnZkRzkwZVhCbExtUmxiR1YwWlNoclpYa3BYRzRnSUNBZ0lDQXZMeUF5TXk0MExqTXVNeUJYWldGclUyVjBMbkJ5YjNSdmRIbHdaUzVrWld4bGRHVW9kbUZzZFdVcFhHNGdJQ0FnSUNBblpHVnNaWFJsSnpvZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQWdJQ0FnYVdZb0lXbHpUMkpxWldOMEtHdGxlU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR2RsZEZkbFlXc29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2FXWW9aR0YwWVNBOVBUMGdkSEoxWlNseVpYUjFjbTRnZFc1allYVm5hSFJHY205NlpXNVRkRzl5WlNoMGFHbHpLVnNuWkdWc1pYUmxKMTBvYTJWNUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0VnSmlZZ0pHaGhjeWhrWVhSaExDQjBhR2x6TGw5cEtTQW1KaUJrWld4bGRHVWdaR0YwWVZ0MGFHbHpMbDlwWFR0Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBdkx5QXlNeTR6TGpNdU5DQlhaV0ZyVFdGd0xuQnliM1J2ZEhsd1pTNW9ZWE1vYTJWNUtWeHVJQ0FnSUNBZ0x5OGdNak11TkM0ekxqUWdWMlZoYTFObGRDNXdjbTkwYjNSNWNHVXVhR0Z6S0haaGJIVmxLVnh1SUNBZ0lDQWdhR0Z6T2lCbWRXNWpkR2x2YmlCb1lYTW9hMlY1S1h0Y2JpQWdJQ0FnSUNBZ2FXWW9JV2x6VDJKcVpXTjBLR3RsZVNrcGNtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUdkbGRGZGxZV3NvYTJWNUtUdGNiaUFnSUNBZ0lDQWdhV1lvWkdGMFlTQTlQVDBnZEhKMVpTbHlaWFIxY200Z2RXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpTaDBhR2x6S1M1b1lYTW9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRWdKaVlnSkdoaGN5aGtZWFJoTENCMGFHbHpMbDlwS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRenRjYmlBZ2ZTeGNiaUFnWkdWbU9pQm1kVzVqZEdsdmJpaDBhR0YwTENCclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdaR0YwWVNBOUlHZGxkRmRsWVdzb1lXNVBZbXBsWTNRb2EyVjVLU3dnZEhKMVpTazdYRzRnSUNBZ2FXWW9aR0YwWVNBOVBUMGdkSEoxWlNsMWJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbEtIUm9ZWFFwTG5ObGRDaHJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQmxiSE5sSUdSaGRHRmJkR2hoZEM1ZmFWMGdQU0IyWVd4MVpUdGNiaUFnSUNCeVpYUjFjbTRnZEdoaGREdGNiaUFnZlN4Y2JpQWdkV1p6ZEc5eVpUb2dkVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaVnh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCeVpXUmxabWx1WlVGc2JDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxMV0ZzYkNjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlsY2JpQWdMQ0JtYjNKUFppQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnZjaTF2WmljcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTFwYm5OMFlXNWpaU2NwWEc0Z0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdaaGFXeHpJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUNScGRHVnlSR1YwWldOMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pYUmxZM1FuS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktWeHVJQ0FzSUdsdWFHVnlhWFJKWmxKbGNYVnBjbVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzVvWlhKcGRDMXBaaTF5WlhGMWFYSmxaQ2NwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFNUJUVVVzSUhkeVlYQndaWElzSUcxbGRHaHZaSE1zSUdOdmJXMXZiaXdnU1ZOZlRVRlFMQ0JKVTE5WFJVRkxLWHRjYmlBZ2RtRnlJRUpoYzJVZ0lEMGdaMnh2WW1Gc1cwNUJUVVZkWEc0Z0lDQWdMQ0JESUNBZ0lDQTlJRUpoYzJWY2JpQWdJQ0FzSUVGRVJFVlNJRDBnU1ZOZlRVRlFJRDhnSjNObGRDY2dPaUFuWVdSa0oxeHVJQ0FnSUN3Z2NISnZkRzhnUFNCRElDWW1JRU11Y0hKdmRHOTBlWEJsWEc0Z0lDQWdMQ0JQSUNBZ0lDQTlJSHQ5TzF4dUlDQjJZWElnWm1sNFRXVjBhRzlrSUQwZ1puVnVZM1JwYjI0b1MwVlpLWHRjYmlBZ0lDQjJZWElnWm00Z1BTQndjbTkwYjF0TFJWbGRPMXh1SUNBZ0lISmxaR1ZtYVc1bEtIQnliM1J2TENCTFJWa3NYRzRnSUNBZ0lDQkxSVmtnUFQwZ0oyUmxiR1YwWlNjZ1B5Qm1kVzVqZEdsdmJpaGhLWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRWxUWDFkRlFVc2dKaVlnSVdselQySnFaV04wS0dFcElEOGdabUZzYzJVZ09pQm1iaTVqWVd4c0tIUm9hWE1zSUdFZ1BUMDlJREFnUHlBd0lEb2dZU2s3WEc0Z0lDQWdJQ0I5SURvZ1MwVlpJRDA5SUNkb1lYTW5JRDhnWm5WdVkzUnBiMjRnYUdGektHRXBlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVk5mVjBWQlN5QW1KaUFoYVhOUFltcGxZM1FvWVNrZ1B5Qm1ZV3h6WlNBNklHWnVMbU5oYkd3b2RHaHBjeXdnWVNBOVBUMGdNQ0EvSURBZ09pQmhLVHRjYmlBZ0lDQWdJSDBnT2lCTFJWa2dQVDBnSjJkbGRDY2dQeUJtZFc1amRHbHZiaUJuWlhRb1lTbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkpVMTlYUlVGTElDWW1JQ0ZwYzA5aWFtVmpkQ2hoS1NBL0lIVnVaR1ZtYVc1bFpDQTZJR1p1TG1OaGJHd29kR2hwY3l3Z1lTQTlQVDBnTUNBL0lEQWdPaUJoS1R0Y2JpQWdJQ0FnSUgwZ09pQkxSVmtnUFQwZ0oyRmtaQ2NnUHlCbWRXNWpkR2x2YmlCaFpHUW9ZU2w3SUdadUxtTmhiR3dvZEdocGN5d2dZU0E5UFQwZ01DQS9JREFnT2lCaEtUc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdJQ0FnSUNBZ09pQm1kVzVqZEdsdmJpQnpaWFFvWVN3Z1lpbDdJR1p1TG1OaGJHd29kR2hwY3l3Z1lTQTlQVDBnTUNBL0lEQWdPaUJoTENCaUtUc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdJQ0FwTzF4dUlDQjlPMXh1SUNCcFppaDBlWEJsYjJZZ1F5QWhQU0FuWm5WdVkzUnBiMjRuSUh4OElDRW9TVk5mVjBWQlN5QjhmQ0J3Y205MGJ5NW1iM0pGWVdOb0lDWW1JQ0ZtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHNWxkeUJES0NrdVpXNTBjbWxsY3lncExtNWxlSFFvS1R0Y2JpQWdmU2twS1h0Y2JpQWdJQ0F2THlCamNtVmhkR1VnWTI5c2JHVmpkR2x2YmlCamIyNXpkSEoxWTNSdmNseHVJQ0FnSUVNZ1BTQmpiMjF0YjI0dVoyVjBRMjl1YzNSeWRXTjBiM0lvZDNKaGNIQmxjaXdnVGtGTlJTd2dTVk5mVFVGUUxDQkJSRVJGVWlrN1hHNGdJQ0FnY21Wa1pXWnBibVZCYkd3b1F5NXdjbTkwYjNSNWNHVXNJRzFsZEdodlpITXBPMXh1SUNBZ0lHMWxkR0V1VGtWRlJDQTlJSFJ5ZFdVN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJR2x1YzNSaGJtTmxJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JtVjNJRU5jYmlBZ0lDQWdJQzh2SUdWaGNteDVJR2x0Y0d4bGJXVnVkR0YwYVc5dWN5QnViM1FnYzNWd2NHOXlkSE1nWTJoaGFXNXBibWRjYmlBZ0lDQWdJQ3dnU0VGVFRsUmZRMGhCU1U1SlRrY2dJQ0FnSUNBZ1BTQnBibk4wWVc1alpWdEJSRVJGVWwwb1NWTmZWMFZCU3lBL0lIdDlJRG9nTFRBc0lERXBJQ0U5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ0F2THlCV09DQitJQ0JEYUhKdmJXbDFiU0EwTUMwZ2QyVmhheTFqYjJ4c1pXTjBhVzl1Y3lCMGFISnZkM01nYjI0Z2NISnBiV2wwYVhabGN5d2dZblYwSUhOb2IzVnNaQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUN3Z1ZFaFNUMWRUWDA5T1gxQlNTVTFKVkVsV1JWTWdQU0JtWVdsc2N5aG1kVzVqZEdsdmJpZ3BleUJwYm5OMFlXNWpaUzVvWVhNb01TazdJSDBwWEc0Z0lDQWdJQ0F2THlCdGIzTjBJR1ZoY214NUlHbHRjR3hsYldWdWRHRjBhVzl1Y3lCa2IyVnpiaWQwSUhOMWNIQnZjblJ6SUdsMFpYSmhZbXhsY3l3Z2JXOXpkQ0J0YjJSbGNtNGdMU0J1YjNRZ1kyeHZjMlVnYVhRZ1kyOXljbVZqZEd4NVhHNGdJQ0FnSUNBc0lFRkRRMFZRVkY5SlZFVlNRVUpNUlZNZ0lDQWdJRDBnSkdsMFpYSkVaWFJsWTNRb1puVnVZM1JwYjI0b2FYUmxjaWw3SUc1bGR5QkRLR2wwWlhJcE95QjlLU0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJQ0FnTHk4Z1ptOXlJR1ZoY214NUlHbHRjR3hsYldWdWRHRjBhVzl1Y3lBdE1DQmhibVFnS3pBZ2JtOTBJSFJvWlNCellXMWxYRzRnSUNBZ0lDQXNJRUpWUjBkWlgxcEZVazhnUFNBaFNWTmZWMFZCU3lBbUppQm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQXZMeUJXT0NCK0lFTm9jbTl0YVhWdElEUXlMU0JtWVdsc2N5QnZibXg1SUhkcGRHZ2dOU3NnWld4bGJXVnVkSE5jYmlBZ0lDQWdJQ0FnZG1GeUlDUnBibk4wWVc1alpTQTlJRzVsZHlCREtDbGNiaUFnSUNBZ0lDQWdJQ0FzSUdsdVpHVjRJQ0FnSUNBOUlEVTdYRzRnSUNBZ0lDQWdJSGRvYVd4bEtHbHVaR1Y0TFMwcEpHbHVjM1JoYm1ObFcwRkVSRVZTWFNocGJtUmxlQ3dnYVc1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJU1JwYm5OMFlXNWpaUzVvWVhNb0xUQXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdhV1lvSVVGRFEwVlFWRjlKVkVWU1FVSk1SVk1wZXlCY2JpQWdJQ0FnSUVNZ1BTQjNjbUZ3Y0dWeUtHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2FYUmxjbUZpYkdVcGUxeHVJQ0FnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJoY21kbGRDd2dReXdnVGtGTlJTazdYRzRnSUNBZ0lDQWdJSFpoY2lCMGFHRjBJRDBnYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FvYm1WM0lFSmhjMlVzSUhSaGNtZGxkQ3dnUXlrN1hHNGdJQ0FnSUNBZ0lHbG1LR2wwWlhKaFlteGxJQ0U5SUhWdVpHVm1hVzVsWkNsbWIzSlBaaWhwZEdWeVlXSnNaU3dnU1ZOZlRVRlFMQ0IwYUdGMFcwRkVSRVZTWFN3Z2RHaGhkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdGME8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQkRMbkJ5YjNSdmRIbHdaU0E5SUhCeWIzUnZPMXh1SUNBZ0lDQWdjSEp2ZEc4dVkyOXVjM1J5ZFdOMGIzSWdQU0JETzF4dUlDQWdJSDFjYmlBZ0lDQnBaaWhVU0ZKUFYxTmZUMDVmVUZKSlRVbFVTVlpGVXlCOGZDQkNWVWRIV1Y5YVJWSlBLWHRjYmlBZ0lDQWdJR1pwZUUxbGRHaHZaQ2duWkdWc1pYUmxKeWs3WEc0Z0lDQWdJQ0JtYVhoTlpYUm9iMlFvSjJoaGN5Y3BPMXh1SUNBZ0lDQWdTVk5mVFVGUUlDWW1JR1pwZUUxbGRHaHZaQ2duWjJWMEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUtFSlZSMGRaWDFwRlVrOGdmSHdnU0VGVFRsUmZRMGhCU1U1SlRrY3BabWw0VFdWMGFHOWtLRUZFUkVWU0tUdGNiaUFnSUNBdkx5QjNaV0ZySUdOdmJHeGxZM1JwYjI1eklITm9iM1ZzWkNCdWIzUWdZMjl1ZEdGcGJuTWdMbU5zWldGeUlHMWxkR2h2WkZ4dUlDQWdJR2xtS0VsVFgxZEZRVXNnSmlZZ2NISnZkRzh1WTJ4bFlYSXBaR1ZzWlhSbElIQnliM1J2TG1Oc1pXRnlPMXh1SUNCOVhHNWNiaUFnYzJWMFZHOVRkSEpwYm1kVVlXY29ReXdnVGtGTlJTazdYRzVjYmlBZ1QxdE9RVTFGWFNBOUlFTTdYRzRnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0VNZ0lUMGdRbUZ6WlNrc0lFOHBPMXh1WEc0Z0lHbG1LQ0ZKVTE5WFJVRkxLV052YlcxdmJpNXpaWFJUZEhKdmJtY29ReXdnVGtGTlJTd2dTVk5mVFVGUUtUdGNibHh1SUNCeVpYUjFjbTRnUXp0Y2JuMDdJaXdpZG1GeUlHTnZjbVVnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0MlpYSnphVzl1T2lBbk1pNDBMakFuZlR0Y2JtbG1LSFI1Y0dWdlppQmZYMlVnUFQwZ0oyNTFiV0psY2ljcFgxOWxJRDBnWTI5eVpUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFibVJsWmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dWRtRnlJQ1JrWldacGJtVlFjbTl3WlhKMGVTQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhISmNiaUFnTENCamNtVmhkR1ZFWlhOaklDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlrN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYVc1a1pYZ3NJSFpoYkhWbEtYdGNjbHh1SUNCcFppaHBibVJsZUNCcGJpQnZZbXBsWTNRcEpHUmxabWx1WlZCeWIzQmxjblI1TG1Zb2IySnFaV04wTENCcGJtUmxlQ3dnWTNKbFlYUmxSR1Z6WXlnd0xDQjJZV3gxWlNrcE8xeHlYRzRnSUdWc2MyVWdiMkpxWldOMFcybHVaR1Y0WFNBOUlIWmhiSFZsTzF4eVhHNTlPeUlzSWk4dklHOXdkR2x2Ym1Gc0lDOGdjMmx0Y0d4bElHTnZiblJsZUhRZ1ltbHVaR2x1WjF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNTJZWElnWVc1UFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4eVhHNGdJQ3dnZEc5UWNtbHRhWFJwZG1VZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHlYRzRnSUN3Z1RsVk5Ra1ZTSUNBZ0lDQWdQU0FuYm5WdFltVnlKenRjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hR2x1ZENsN1hISmNiaUFnYVdZb2FHbHVkQ0FoUFQwZ0ozTjBjbWx1WnljZ0ppWWdhR2x1ZENBaFBUMGdUbFZOUWtWU0lDWW1JR2hwYm5RZ0lUMDlJQ2RrWldaaGRXeDBKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMGx1WTI5eWNtVmpkQ0JvYVc1MEp5azdYSEpjYmlBZ2NtVjBkWEp1SUhSdlVISnBiV2wwYVhabEtHRnVUMkpxWldOMEtIUm9hWE1wTENCb2FXNTBJQ0U5SUU1VlRVSkZVaWs3WEhKY2JuMDdJaXdpTHk4Z055NHlMakVnVW1WeGRXbHlaVTlpYW1WamRFTnZaWEpqYVdKc1pTaGhjbWQxYldWdWRDbGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnBaaWhwZENBOVBTQjFibVJsWm1sdVpXUXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyRnNiQ0J0WlhSb2IyUWdiMjRnSUZ3aUlDc2dhWFFwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5T3lJc0lpOHZJRlJvWVc1ckozTWdTVVU0SUdadmNpQm9hWE1nWm5WdWJua2daR1ZtYVc1bFVISnZjR1Z5ZEhsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0lYSmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDdmU3dnSjJFbkxDQjdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z056c2dmWDBwTG1FZ0lUMGdOenRjYm4wcE95SXNJblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2daRzlqZFcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1a2IyTjFiV1Z1ZEZ4dUlDQXZMeUJwYmlCdmJHUWdTVVVnZEhsd1pXOW1JR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5RZ2FYTWdKMjlpYW1WamRDZGNiaUFnTENCcGN5QTlJR2x6VDJKcVpXTjBLR1J2WTNWdFpXNTBLU0FtSmlCcGMwOWlhbVZqZENoa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWE1nUHlCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLR2wwS1NBNklIdDlPMXh1ZlRzaUxDSXZMeUJKUlNBNExTQmtiMjRuZENCbGJuVnRJR0oxWnlCclpYbHpYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnS0Z4eVhHNGdJQ2RqYjI1emRISjFZM1J2Y2l4b1lYTlBkMjVRY205d1pYSjBlU3hwYzFCeWIzUnZkSGx3WlU5bUxIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxMSFJ2VEc5allXeGxVM1J5YVc1bkxIUnZVM1J5YVc1bkxIWmhiSFZsVDJZblhISmNiaWt1YzNCc2FYUW9KeXduS1RzaUxDSXZMeUJoYkd3Z1pXNTFiV1Z5WVdKc1pTQnZZbXBsWTNRZ2EyVjVjeXdnYVc1amJIVmtaWE1nYzNsdFltOXNjMXh1ZG1GeUlHZGxkRXRsZVhNZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3ljcFhHNGdJQ3dnWjA5UVV5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnpKeWxjYmlBZ0xDQndTVVVnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWEJwWlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdJQ0FnSUQwZ1oyVjBTMlY1Y3locGRDbGNiaUFnSUNBc0lHZGxkRk41YldKdmJITWdQU0JuVDFCVExtWTdYRzRnSUdsbUtHZGxkRk41YldKdmJITXBlMXh1SUNBZ0lIWmhjaUJ6ZVcxaWIyeHpJRDBnWjJWMFUzbHRZbTlzY3locGRDbGNiaUFnSUNBZ0lDd2dhWE5GYm5WdElDQTlJSEJKUlM1bVhHNGdJQ0FnSUNBc0lHa2dJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR3RsZVR0Y2JpQWdJQ0IzYUdsc1pTaHplVzFpYjJ4ekxteGxibWQwYUNBK0lHa3BhV1lvYVhORmJuVnRMbU5oYkd3b2FYUXNJR3RsZVNBOUlITjViV0p2YkhOYmFTc3JYU2twY21WemRXeDBMbkIxYzJnb2EyVjVLVHRjYmlBZ2ZTQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIzSmxKeWxjYmlBZ0xDQm9hV1JsSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcFhHNGdJQ3dnWTNSNElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JRVWs5VVQxUlpVRVVnUFNBbmNISnZkRzkwZVhCbEp6dGNibHh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQm1kVzVqZEdsdmJpaDBlWEJsTENCdVlXMWxMQ0J6YjNWeVkyVXBlMXh1SUNCMllYSWdTVk5mUms5U1EwVkVJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVSbHh1SUNBZ0lDd2dTVk5mUjB4UFFrRk1JRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVSMXh1SUNBZ0lDd2dTVk5mVTFSQlZFbERJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVVMXh1SUNBZ0lDd2dTVk5mVUZKUFZFOGdJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVVRnh1SUNBZ0lDd2dTVk5mUWtsT1JDQWdJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVRbHh1SUNBZ0lDd2dkR0Z5WjJWMElDQWdJRDBnU1ZOZlIweFBRa0ZNSUQ4Z1oyeHZZbUZzSURvZ1NWTmZVMVJCVkVsRElEOGdaMnh2WW1Gc1cyNWhiV1ZkSUh4OElDaG5iRzlpWVd4YmJtRnRaVjBnUFNCN2ZTa2dPaUFvWjJ4dlltRnNXMjVoYldWZElIeDhJSHQ5S1Z0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENCbGVIQnZjblJ6SUNBZ1BTQkpVMTlIVEU5Q1FVd2dQeUJqYjNKbElEb2dZMjl5WlZ0dVlXMWxYU0I4ZkNBb1kyOXlaVnR1WVcxbFhTQTlJSHQ5S1Z4dUlDQWdJQ3dnWlhod1VISnZkRzhnSUQwZ1pYaHdiM0owYzF0UVVrOVVUMVJaVUVWZElIeDhJQ2hsZUhCdmNuUnpXMUJTVDFSUFZGbFFSVjBnUFNCN2ZTbGNiaUFnSUNBc0lHdGxlU3dnYjNkdUxDQnZkWFFzSUdWNGNEdGNiaUFnYVdZb1NWTmZSMHhQUWtGTUtYTnZkWEpqWlNBOUlHNWhiV1U3WEc0Z0lHWnZjaWhyWlhrZ2FXNGdjMjkxY21ObEtYdGNiaUFnSUNBdkx5QmpiMjUwWVdsdWN5QnBiaUJ1WVhScGRtVmNiaUFnSUNCdmQyNGdQU0FoU1ZOZlJrOVNRMFZFSUNZbUlIUmhjbWRsZENBbUppQjBZWEpuWlhSYmEyVjVYU0FoUFQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUM4dklHVjRjRzl5ZENCdVlYUnBkbVVnYjNJZ2NHRnpjMlZrWEc0Z0lDQWdiM1YwSUQwZ0tHOTNiaUEvSUhSaGNtZGxkQ0E2SUhOdmRYSmpaU2xiYTJWNVhUdGNiaUFnSUNBdkx5QmlhVzVrSUhScGJXVnljeUIwYnlCbmJHOWlZV3dnWm05eUlHTmhiR3dnWm5KdmJTQmxlSEJ2Y25RZ1kyOXVkR1Y0ZEZ4dUlDQWdJR1Y0Y0NBOUlFbFRYMEpKVGtRZ0ppWWdiM2R1SUQ4Z1kzUjRLRzkxZEN3Z1oyeHZZbUZzS1NBNklFbFRYMUJTVDFSUElDWW1JSFI1Y0dWdlppQnZkWFFnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR04wZUNoR2RXNWpkR2x2Ymk1allXeHNMQ0J2ZFhRcElEb2diM1YwTzF4dUlDQWdJQzh2SUdWNGRHVnVaQ0JuYkc5aVlXeGNiaUFnSUNCcFppaDBZWEpuWlhRcGNtVmtaV1pwYm1Vb2RHRnlaMlYwTENCclpYa3NJRzkxZEN3Z2RIbHdaU0FtSUNSbGVIQnZjblF1VlNrN1hHNGdJQ0FnTHk4Z1pYaHdiM0owWEc0Z0lDQWdhV1lvWlhod2IzSjBjMXRyWlhsZElDRTlJRzkxZENsb2FXUmxLR1Y0Y0c5eWRITXNJR3RsZVN3Z1pYaHdLVHRjYmlBZ0lDQnBaaWhKVTE5UVVrOVVUeUFtSmlCbGVIQlFjbTkwYjF0clpYbGRJQ0U5SUc5MWRDbGxlSEJRY205MGIxdHJaWGxkSUQwZ2IzVjBPMXh1SUNCOVhHNTlPMXh1WjJ4dlltRnNMbU52Y21VZ1BTQmpiM0psTzF4dUx5OGdkSGx3WlNCaWFYUnRZWEJjYmlSbGVIQnZjblF1UmlBOUlERTdJQ0FnTHk4Z1ptOXlZMlZrWEc0a1pYaHdiM0owTGtjZ1BTQXlPeUFnSUM4dklHZHNiMkpoYkZ4dUpHVjRjRzl5ZEM1VElEMGdORHNnSUNBdkx5QnpkR0YwYVdOY2JpUmxlSEJ2Y25RdVVDQTlJRGc3SUNBZ0x5OGdjSEp2ZEc5Y2JpUmxlSEJ2Y25RdVFpQTlJREUyT3lBZ0x5OGdZbWx1WkZ4dUpHVjRjRzl5ZEM1WElEMGdNekk3SUNBdkx5QjNjbUZ3WEc0a1pYaHdiM0owTGxVZ1BTQTJORHNnSUM4dklITmhabVZjYmlSbGVIQnZjblF1VWlBOUlERXlPRHNnTHk4Z2NtVmhiQ0J3Y205MGJ5QnRaWFJvYjJRZ1ptOXlJR0JzYVdKeVlYSjVZQ0JjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSkdWNGNHOXlkRHNpTENKMllYSWdUVUZVUTBnZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25iV0YwWTJnbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaS1h0Y2JpQWdkbUZ5SUhKbElEMGdMeTR2TzF4dUlDQjBjbmtnZTF4dUlDQWdJQ2N2TGk4blcwdEZXVjBvY21VcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNCeVpWdE5RVlJEU0YwZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUhKbGRIVnliaUFoSnk4dUx5ZGJTMFZaWFNoeVpTazdYRzRnSUNBZ2ZTQmpZWFJqYUNobUtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQjlJSEpsZEhWeWJpQjBjblZsTzF4dWZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR1Y0WldNcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUFoSVdWNFpXTW9LVHRjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlZ4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnYUdsa1pTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0J5WldSbFptbHVaU0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCbVlXbHNjeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnTENCa1pXWnBibVZrSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsWm1sdVpXUW5LVnh1SUNBc0lIZHJjeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvUzBWWkxDQnNaVzVuZEdnc0lHVjRaV01wZTF4dUlDQjJZWElnVTFsTlFrOU1JQ0FnUFNCM2EzTW9TMFZaS1Z4dUlDQWdJQ3dnWm01eklDQWdJQ0FnUFNCbGVHVmpLR1JsWm1sdVpXUXNJRk5aVFVKUFRDd2dKeWRiUzBWWlhTbGNiaUFnSUNBc0lITjBjbVp1SUNBZ0lEMGdabTV6V3pCZFhHNGdJQ0FnTENCeWVHWnVJQ0FnSUNBOUlHWnVjMXN4WFR0Y2JpQWdhV1lvWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnVHlBOUlIdDlPMXh1SUNBZ0lFOWJVMWxOUWs5TVhTQTlJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUEzT3lCOU8xeHVJQ0FnSUhKbGRIVnliaUFuSjF0TFJWbGRLRThwSUNFOUlEYzdYRzRnSUgwcEtYdGNiaUFnSUNCeVpXUmxabWx1WlNoVGRISnBibWN1Y0hKdmRHOTBlWEJsTENCTFJWa3NJSE4wY21adUtUdGNiaUFnSUNCb2FXUmxLRkpsWjBWNGNDNXdjbTkwYjNSNWNHVXNJRk5aVFVKUFRDd2diR1Z1WjNSb0lEMDlJREpjYmlBZ0lDQWdJQzh2SURJeExqSXVOUzQ0SUZKbFowVjRjQzV3Y205MGIzUjVjR1ZiUUVCeVpYQnNZV05sWFNoemRISnBibWNzSUhKbGNHeGhZMlZXWVd4MVpTbGNiaUFnSUNBZ0lDOHZJREl4TGpJdU5TNHhNU0JTWldkRmVIQXVjSEp2ZEc5MGVYQmxXMEJBYzNCc2FYUmRLSE4wY21sdVp5d2diR2x0YVhRcFhHNGdJQ0FnSUNBL0lHWjFibU4wYVc5dUtITjBjbWx1Wnl3Z1lYSm5LWHNnY21WMGRYSnVJSEo0Wm00dVkyRnNiQ2h6ZEhKcGJtY3NJSFJvYVhNc0lHRnlaeWs3SUgxY2JpQWdJQ0FnSUM4dklESXhMakl1TlM0MklGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dWYlFFQnRZWFJqYUYwb2MzUnlhVzVuS1Z4dUlDQWdJQ0FnTHk4Z01qRXVNaTQxTGprZ1VtVm5SWGh3TG5CeWIzUnZkSGx3WlZ0QVFITmxZWEpqYUYwb2MzUnlhVzVuS1Z4dUlDQWdJQ0FnT2lCbWRXNWpkR2x2YmloemRISnBibWNwZXlCeVpYUjFjbTRnY25obWJpNWpZV3hzS0hOMGNtbHVaeXdnZEdocGN5azdJSDFjYmlBZ0lDQXBPMXh1SUNCOVhHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SURJeExqSXVOUzR6SUdkbGRDQlNaV2RGZUhBdWNISnZkRzkwZVhCbExtWnNZV2R6WEc1MllYSWdZVzVQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9LWHRjYmlBZ2RtRnlJSFJvWVhRZ0lDQTlJR0Z1VDJKcVpXTjBLSFJvYVhNcFhHNGdJQ0FnTENCeVpYTjFiSFFnUFNBbkp6dGNiaUFnYVdZb2RHaGhkQzVuYkc5aVlXd3BJQ0FnSUNCeVpYTjFiSFFnS3owZ0oyY25PMXh1SUNCcFppaDBhR0YwTG1sbmJtOXlaVU5oYzJVcElISmxjM1ZzZENBclBTQW5hU2M3WEc0Z0lHbG1LSFJvWVhRdWJYVnNkR2xzYVc1bEtTQWdjbVZ6ZFd4MElDczlJQ2R0Snp0Y2JpQWdhV1lvZEdoaGRDNTFibWxqYjJSbEtTQWdJQ0J5WlhOMWJIUWdLejBnSjNVbk8xeHVJQ0JwWmloMGFHRjBMbk4wYVdOcmVTa2dJQ0FnSUhKbGMzVnNkQ0FyUFNBbmVTYzdYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5T3lJc0luWmhjaUJqZEhnZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcFhHNGdJQ3dnWTJGc2JDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXTmhiR3duS1Z4dUlDQXNJR2x6UVhKeVlYbEpkR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10WVhKeVlYa3RhWFJsY2ljcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQm5aWFJKZEdWeVJtNGdJQ0E5SUhKbGNYVnBjbVVvSnk0dlkyOXlaUzVuWlhRdGFYUmxjbUYwYjNJdGJXVjBhRzlrSnlsY2JpQWdMQ0JDVWtWQlN5QWdJQ0FnSUNBOUlIdDlYRzRnSUN3Z1VrVlVWVkpPSUNBZ0lDQWdQU0I3ZlR0Y2JuWmhjaUJsZUhCdmNuUnpJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEdWeVlXSnNaU3dnWlc1MGNtbGxjeXdnWm00c0lIUm9ZWFFzSUVsVVJWSkJWRTlTS1h0Y2JpQWdkbUZ5SUdsMFpYSkdiaUE5SUVsVVJWSkJWRTlTSUQ4Z1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlHbDBaWEpoWW14bE95QjlJRG9nWjJWMFNYUmxja1p1S0dsMFpYSmhZbXhsS1Z4dUlDQWdJQ3dnWmlBZ0lDQWdJRDBnWTNSNEtHWnVMQ0IwYUdGMExDQmxiblJ5YVdWeklEOGdNaUE2SURFcFhHNGdJQ0FnTENCcGJtUmxlQ0FnUFNBd1hHNGdJQ0FnTENCc1pXNW5kR2dzSUhOMFpYQXNJR2wwWlhKaGRHOXlMQ0J5WlhOMWJIUTdYRzRnSUdsbUtIUjVjR1Z2WmlCcGRHVnlSbTRnSVQwZ0oyWjFibU4wYVc5dUp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUmxjbUZpYkdVZ0t5QW5JR2x6SUc1dmRDQnBkR1Z5WVdKc1pTRW5LVHRjYmlBZ0x5OGdabUZ6ZENCallYTmxJR1p2Y2lCaGNuSmhlWE1nZDJsMGFDQmtaV1poZFd4MElHbDBaWEpoZEc5eVhHNGdJR2xtS0dselFYSnlZWGxKZEdWeUtHbDBaWEpHYmlrcFptOXlLR3hsYm1kMGFDQTlJSFJ2VEdWdVozUm9LR2wwWlhKaFlteGxMbXhsYm1kMGFDazdJR3hsYm1kMGFDQStJR2x1WkdWNE95QnBibVJsZUNzcktYdGNiaUFnSUNCeVpYTjFiSFFnUFNCbGJuUnlhV1Z6SUQ4Z1ppaGhiazlpYW1WamRDaHpkR1Z3SUQwZ2FYUmxjbUZpYkdWYmFXNWtaWGhkS1Zzd1hTd2djM1JsY0ZzeFhTa2dPaUJtS0dsMFpYSmhZbXhsVzJsdVpHVjRYU2s3WEc0Z0lDQWdhV1lvY21WemRXeDBJRDA5UFNCQ1VrVkJTeUI4ZkNCeVpYTjFiSFFnUFQwOUlGSkZWRlZTVGlseVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOUlHVnNjMlVnWm05eUtHbDBaWEpoZEc5eUlEMGdhWFJsY2tadUxtTmhiR3dvYVhSbGNtRmliR1VwT3lBaEtITjBaWEFnUFNCcGRHVnlZWFJ2Y2k1dVpYaDBLQ2twTG1SdmJtVTdJQ2w3WEc0Z0lDQWdjbVZ6ZFd4MElEMGdZMkZzYkNocGRHVnlZWFJ2Y2l3Z1ppd2djM1JsY0M1MllXeDFaU3dnWlc1MGNtbGxjeWs3WEc0Z0lDQWdhV1lvY21WemRXeDBJRDA5UFNCQ1VrVkJTeUI4ZkNCeVpYTjFiSFFnUFQwOUlGSkZWRlZTVGlseVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOVhHNTlPMXh1Wlhod2IzSjBjeTVDVWtWQlN5QWdQU0JDVWtWQlN6dGNibVY0Y0c5eWRITXVVa1ZVVlZKT0lEMGdVa1ZVVlZKT095SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5NmJHOXBjbTlqYXk5amIzSmxMV3B6TDJsemMzVmxjeTg0TmlOcGMzTjFaV052YlcxbGJuUXRNVEUxTnpVNU1ESTRYRzUyWVhJZ1oyeHZZbUZzSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCMGVYQmxiMllnZDJsdVpHOTNJQ0U5SUNkMWJtUmxabWx1WldRbklDWW1JSGRwYm1SdmR5NU5ZWFJvSUQwOUlFMWhkR2hjYmlBZ1B5QjNhVzVrYjNjZ09pQjBlWEJsYjJZZ2MyVnNaaUFoUFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJ6Wld4bUxrMWhkR2dnUFQwZ1RXRjBhQ0EvSUhObGJHWWdPaUJHZFc1amRHbHZiaWduY21WMGRYSnVJSFJvYVhNbktTZ3BPMXh1YVdZb2RIbHdaVzltSUY5Zlp5QTlQU0FuYm5WdFltVnlKeWxmWDJjZ1BTQm5iRzlpWVd3N0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNWtaV1lpTENKMllYSWdhR0Z6VDNkdVVISnZjR1Z5ZEhrZ1BTQjdmUzVvWVhOUGQyNVFjbTl3WlhKMGVUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFzSUd0bGVTbDdYRzRnSUhKbGRIVnliaUJvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0dsMExDQnJaWGtwTzF4dWZUc2lMQ0oyWVhJZ1pGQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhHNGdJQ3dnWTNKbFlYUmxSR1Z6WXlBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQS9JR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2w3WEc0Z0lISmxkSFZ5YmlCa1VDNW1LRzlpYW1WamRDd2dhMlY1TENCamNtVmhkR1ZFWlhOaktERXNJSFpoYkhWbEtTazdYRzU5SURvZ1puVnVZM1JwYjI0b2IySnFaV04wTENCclpYa3NJSFpoYkhWbEtYdGNiaUFnYjJKcVpXTjBXMnRsZVYwZ1BTQjJZV3gxWlR0Y2JpQWdjbVYwZFhKdUlHOWlhbVZqZER0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1a2IyTjFiV1Z1ZENBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWhjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUFoY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHlYRzRnSUhKbGRIVnliaUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2NtVnhkV2x5WlNnbkxpOWZaRzl0TFdOeVpXRjBaU2NwS0Nka2FYWW5LU3dnSjJFbkxDQjdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z056c2dmWDBwTG1FZ0lUMGdOenRjY2x4dWZTazdJaXdpZG1GeUlHbHpUMkpxWldOMElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjY2x4dUlDQXNJSE5sZEZCeWIzUnZkSGx3WlU5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYQnliM1J2SnlrdWMyVjBPMXh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSb1lYUXNJSFJoY21kbGRDd2dReWw3WEhKY2JpQWdkbUZ5SUZBc0lGTWdQU0IwWVhKblpYUXVZMjl1YzNSeWRXTjBiM0k3WEhKY2JpQWdhV1lvVXlBaFBUMGdReUFtSmlCMGVYQmxiMllnVXlBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNoUUlEMGdVeTV3Y205MGIzUjVjR1VwSUNFOVBTQkRMbkJ5YjNSdmRIbHdaU0FtSmlCcGMwOWlhbVZqZENoUUtTQW1KaUJ6WlhSUWNtOTBiM1I1Y0dWUFppbDdYSEpjYmlBZ0lDQnpaWFJRY205MGIzUjVjR1ZQWmloMGFHRjBMQ0JRS1R0Y2NseHVJQ0I5SUhKbGRIVnliaUIwYUdGME8xeHlYRzU5T3lJc0lpOHZJR1poYzNRZ1lYQndiSGtzSUdoMGRIQTZMeTlxYzNCbGNtWXViRzVyYVhRdVkyOXRMMlpoYzNRdFlYQndiSGt2TlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobWJpd2dZWEpuY3l3Z2RHaGhkQ2w3WEc0Z0lIWmhjaUIxYmlBOUlIUm9ZWFFnUFQwOUlIVnVaR1ZtYVc1bFpEdGNiaUFnYzNkcGRHTm9LR0Z5WjNNdWJHVnVaM1JvS1h0Y2JpQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQjFiaUEvSUdadUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ2s3WEc0Z0lDQWdZMkZ6WlNBeE9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZEtUdGNiaUFnSUNCallYTmxJREk2SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBwTzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlIVnVJRDhnWm00b1lYSm5jMXN3WFN3Z1lYSm5jMXN4WFN3Z1lYSm5jMXN5WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdadUxtTmhiR3dvZEdoaGRDd2dZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTazdYRzRnSUNBZ1kyRnpaU0EwT2lCeVpYUjFjbTRnZFc0Z1B5Qm1iaWhoY21keld6QmRMQ0JoY21keld6RmRMQ0JoY21keld6SmRMQ0JoY21keld6TmRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dabTR1WTJGc2JDaDBhR0YwTENCaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkTENCaGNtZHpXek5kS1R0Y2JpQWdmU0J5WlhSMWNtNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadUxtRndjR3g1S0hSb1lYUXNJR0Z5WjNNcE8xeHVmVHNpTENJdkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYm05dUxXRnljbUY1TFd4cGEyVWdSVk16SUdGdVpDQnViMjR0Wlc1MWJXVnlZV0pzWlNCdmJHUWdWamdnYzNSeWFXNW5jMXh1ZG1GeUlHTnZaaUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCUFltcGxZM1FvSjNvbktTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2d3S1NBL0lFOWlhbVZqZENBNklHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdOdlppaHBkQ2tnUFQwZ0oxTjBjbWx1WnljZ1B5QnBkQzV6Y0d4cGRDZ25KeWtnT2lCUFltcGxZM1FvYVhRcE8xeHVmVHNpTENJdkx5QmphR1ZqYXlCdmJpQmtaV1poZFd4MElFRnljbUY1SUdsMFpYSmhkRzl5WEc1MllYSWdTWFJsY21GMGIzSnpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEpoZEc5eWN5Y3BYRzRnSUN3Z1NWUkZVa0ZVVDFJZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dRWEp5WVhsUWNtOTBieUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNoSmRHVnlZWFJ2Y25NdVFYSnlZWGtnUFQwOUlHbDBJSHg4SUVGeWNtRjVVSEp2ZEc5YlNWUkZVa0ZVVDFKZElEMDlQU0JwZENrN1hHNTlPeUlzSWk4dklEY3VNaTR5SUVselFYSnlZWGtvWVhKbmRXMWxiblFwWEc1MllYSWdZMjltSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFRnljbUY1TG1selFYSnlZWGtnZkh3Z1puVnVZM1JwYjI0Z2FYTkJjbkpoZVNoaGNtY3BlMXh1SUNCeVpYUjFjbTRnWTI5bUtHRnlaeWtnUFQwZ0owRnljbUY1Snp0Y2JuMDdJaXdpTHk4Z01qQXVNUzR5TGpNZ1RuVnRZbVZ5TG1selNXNTBaV2RsY2lodWRXMWlaWElwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdac2IyOXlJQ0FnSUQwZ1RXRjBhQzVtYkc5dmNqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdhWE5KYm5SbFoyVnlLR2wwS1h0Y2JpQWdjbVYwZFhKdUlDRnBjMDlpYW1WamRDaHBkQ2tnSmlZZ2FYTkdhVzVwZEdVb2FYUXBJQ1ltSUdac2IyOXlLR2wwS1NBOVBUMGdhWFE3WEc1OU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdsMElEMDlQU0FuYjJKcVpXTjBKeUEvSUdsMElDRTlQU0J1ZFd4c0lEb2dkSGx3Wlc5bUlHbDBJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVmVHNpTENJdkx5QTNMakl1T0NCSmMxSmxaMFY0Y0NoaGNtZDFiV1Z1ZENsY2JuWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1kyOW1JQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJZbktWeHVJQ0FzSUUxQlZFTklJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oyMWhkR05vSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2RtRnlJR2x6VW1WblJYaHdPMXh1SUNCeVpYUjFjbTRnYVhOUFltcGxZM1FvYVhRcElDWW1JQ2dvYVhOU1pXZEZlSEFnUFNCcGRGdE5RVlJEU0YwcElDRTlQU0IxYm1SbFptbHVaV1FnUHlBaElXbHpVbVZuUlhod0lEb2dZMjltS0dsMEtTQTlQU0FuVW1WblJYaHdKeWs3WEc1OU95SXNJaTh2SUdOaGJHd2djMjl0WlhSb2FXNW5JRzl1SUdsMFpYSmhkRzl5SUhOMFpYQWdkMmwwYUNCellXWmxJR05zYjNOcGJtY2diMjRnWlhKeWIzSmNiblpoY2lCaGJrOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRHVnlZWFJ2Y2l3Z1ptNHNJSFpoYkhWbExDQmxiblJ5YVdWektYdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWlc1MGNtbGxjeUEvSUdadUtHRnVUMkpxWldOMEtIWmhiSFZsS1Zzd1hTd2dkbUZzZFdWYk1WMHBJRG9nWm00b2RtRnNkV1VwTzF4dUlDQXZMeUEzTGpRdU5pQkpkR1Z5WVhSdmNrTnNiM05sS0dsMFpYSmhkRzl5TENCamIyMXdiR1YwYVc5dUtWeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSFpoY2lCeVpYUWdQU0JwZEdWeVlYUnZjbHNuY21WMGRYSnVKMTA3WEc0Z0lDQWdhV1lvY21WMElDRTlQU0IxYm1SbFptbHVaV1FwWVc1UFltcGxZM1FvY21WMExtTmhiR3dvYVhSbGNtRjBiM0lwS1R0Y2JpQWdJQ0IwYUhKdmR5QmxPMXh1SUNCOVhHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCamNtVmhkR1VnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1Z4dUlDQXNJR1JsYzJOeWFYQjBiM0lnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY0hKdmNHVnlkSGt0WkdWell5Y3BYRzRnSUN3Z2MyVjBWRzlUZEhKcGJtZFVZV2NnUFNCeVpYRjFhWEpsS0NjdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BYRzRnSUN3Z1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ1BTQjdmVHRjYmx4dUx5OGdNalV1TVM0eUxqRXVNU0FsU1hSbGNtRjBiM0pRY205MGIzUjVjR1VsVzBCQWFYUmxjbUYwYjNKZEtDbGNibkpsY1hWcGNtVW9KeTR2WDJocFpHVW5LU2hKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjJsMFpYSmhkRzl5Snlrc0lHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6T3lCOUtUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhEYjI1emRISjFZM1J2Y2l3Z1RrRk5SU3dnYm1WNGRDbDdYRzRnSUVOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTQTlJR055WldGMFpTaEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2dlMjVsZUhRNklHUmxjMk55YVhCMGIzSW9NU3dnYm1WNGRDbDlLVHRjYmlBZ2MyVjBWRzlUZEhKcGJtZFVZV2NvUTI5dWMzUnlkV04wYjNJc0lFNUJUVVVnS3lBbklFbDBaWEpoZEc5eUp5azdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQk1TVUpTUVZKWklDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LVnh1SUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCeVpXUmxabWx1WlNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5bGNiaUFnTENCb2FXUmxJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCSmRHVnlZWFJ2Y25NZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEpoZEc5eWN5Y3BYRzRnSUN3Z0pHbDBaWEpEY21WaGRHVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOeVpXRjBaU2NwWEc0Z0lDd2djMlYwVkc5VGRISnBibWRVWVdjZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeWNwWEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0JKVkVWU1FWUlBVaUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dRbFZIUjFrZ0lDQWdJQ0FnSUNBZ1BTQWhLRnRkTG10bGVYTWdKaVlnSjI1bGVIUW5JR2x1SUZ0ZExtdGxlWE1vS1NrZ0x5OGdVMkZtWVhKcElHaGhjeUJpZFdkbmVTQnBkR1Z5WVhSdmNuTWdkeTl2SUdCdVpYaDBZRnh1SUNBc0lFWkdYMGxVUlZKQlZFOVNJQ0FnSUQwZ0owQkFhWFJsY21GMGIzSW5YRzRnSUN3Z1MwVlpVeUFnSUNBZ0lDQWdJQ0FnUFNBbmEyVjVjeWRjYmlBZ0xDQldRVXhWUlZNZ0lDQWdJQ0FnSUNBOUlDZDJZV3gxWlhNbk8xeHVYRzUyWVhJZ2NtVjBkWEp1VkdocGN5QTlJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUIwYUdsek95QjlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VKaGMyVXNJRTVCVFVVc0lFTnZibk4wY25WamRHOXlMQ0J1WlhoMExDQkVSVVpCVlV4VUxDQkpVMTlUUlZRc0lFWlBVa05GUkNsN1hHNGdJQ1JwZEdWeVEzSmxZWFJsS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGTENCdVpYaDBLVHRjYmlBZ2RtRnlJR2RsZEUxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0d0cGJtUXBlMXh1SUNBZ0lHbG1LQ0ZDVlVkSFdTQW1KaUJyYVc1a0lHbHVJSEJ5YjNSdktYSmxkSFZ5YmlCd2NtOTBiMXRyYVc1a1hUdGNiaUFnSUNCemQybDBZMmdvYTJsdVpDbDdYRzRnSUNBZ0lDQmpZWE5sSUV0RldWTTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnJaWGx6S0NsN0lISmxkSFZ5YmlCdVpYY2dRMjl1YzNSeWRXTjBiM0lvZEdocGN5d2dhMmx1WkNrN0lIMDdYRzRnSUNBZ0lDQmpZWE5sSUZaQlRGVkZVem9nY21WMGRYSnVJR1oxYm1OMGFXOXVJSFpoYkhWbGN5Z3BleUJ5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtIUm9hWE1zSUd0cGJtUXBPeUI5TzF4dUlDQWdJSDBnY21WMGRYSnVJR1oxYm1OMGFXOXVJR1Z1ZEhKcFpYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdmVHRjYmlBZ2RtRnlJRlJCUnlBZ0lDQWdJQ0FnUFNCT1FVMUZJQ3NnSnlCSmRHVnlZWFJ2Y2lkY2JpQWdJQ0FzSUVSRlJsOVdRVXhWUlZNZ1BTQkVSVVpCVlV4VUlEMDlJRlpCVEZWRlUxeHVJQ0FnSUN3Z1ZrRk1WVVZUWDBKVlJ5QTlJR1poYkhObFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRbUZ6WlM1d2NtOTBiM1I1Y0dWY2JpQWdJQ0FzSUNSdVlYUnBkbVVnSUNBZ1BTQndjbTkwYjF0SlZFVlNRVlJQVWwwZ2ZId2djSEp2ZEc5YlJrWmZTVlJGVWtGVVQxSmRJSHg4SUVSRlJrRlZURlFnSmlZZ2NISnZkRzliUkVWR1FWVk1WRjFjYmlBZ0lDQXNJQ1JrWldaaGRXeDBJQ0FnUFNBa2JtRjBhWFpsSUh4OElHZGxkRTFsZEdodlpDaEVSVVpCVlV4VUtWeHVJQ0FnSUN3Z0pHVnVkSEpwWlhNZ0lDQTlJRVJGUmtGVlRGUWdQeUFoUkVWR1gxWkJURlZGVXlBL0lDUmtaV1poZFd4MElEb2daMlYwVFdWMGFHOWtLQ2RsYm5SeWFXVnpKeWtnT2lCMWJtUmxabWx1WldSY2JpQWdJQ0FzSUNSaGJubE9ZWFJwZG1VZ1BTQk9RVTFGSUQwOUlDZEJjbkpoZVNjZ1B5QndjbTkwYnk1bGJuUnlhV1Z6SUh4OElDUnVZWFJwZG1VZ09pQWtibUYwYVhabFhHNGdJQ0FnTENCdFpYUm9iMlJ6TENCclpYa3NJRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxPMXh1SUNBdkx5QkdhWGdnYm1GMGFYWmxYRzRnSUdsbUtDUmhibmxPWVhScGRtVXBlMXh1SUNBZ0lFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb0pHRnVlVTVoZEdsMlpTNWpZV3hzS0c1bGR5QkNZWE5sS1NrN1hHNGdJQ0FnYVdZb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ0lUMDlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXBlMXh1SUNBZ0lDQWdMeThnVTJWMElFQkFkRzlUZEhKcGJtZFVZV2NnZEc4Z2JtRjBhWFpsSUdsMFpYSmhkRzl5YzF4dUlDQWdJQ0FnYzJWMFZHOVRkSEpwYm1kVVlXY29TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJRlJCUnl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0F2THlCbWFYZ2dabTl5SUhOdmJXVWdiMnhrSUdWdVoybHVaWE5jYmlBZ0lDQWdJR2xtS0NGTVNVSlNRVkpaSUNZbUlDRm9ZWE1vU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUVsVVJWSkJWRTlTS1Nsb2FXUmxLRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JKVkVWU1FWUlBVaXdnY21WMGRYSnVWR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUM4dklHWnBlQ0JCY25KaGVTTjdkbUZzZFdWekxDQkFRR2wwWlhKaGRHOXlmUzV1WVcxbElHbHVJRlk0SUM4Z1JrWmNiaUFnYVdZb1JFVkdYMVpCVEZWRlV5QW1KaUFrYm1GMGFYWmxJQ1ltSUNSdVlYUnBkbVV1Ym1GdFpTQWhQVDBnVmtGTVZVVlRLWHRjYmlBZ0lDQldRVXhWUlZOZlFsVkhJRDBnZEhKMVpUdGNiaUFnSUNBa1pHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlIWmhiSFZsY3lncGV5QnlaWFIxY200Z0pHNWhkR2wyWlM1allXeHNLSFJvYVhNcE95QjlPMXh1SUNCOVhHNGdJQzh2SUVSbFptbHVaU0JwZEdWeVlYUnZjbHh1SUNCcFppZ29JVXhKUWxKQlVsa2dmSHdnUms5U1EwVkVLU0FtSmlBb1FsVkhSMWtnZkh3Z1ZrRk1WVVZUWDBKVlJ5QjhmQ0FoY0hKdmRHOWJTVlJGVWtGVVQxSmRLU2w3WEc0Z0lDQWdhR2xrWlNod2NtOTBieXdnU1ZSRlVrRlVUMUlzSUNSa1pXWmhkV3gwS1R0Y2JpQWdmVnh1SUNBdkx5QlFiSFZuSUdadmNpQnNhV0p5WVhKNVhHNGdJRWwwWlhKaGRHOXljMXRPUVUxRlhTQTlJQ1JrWldaaGRXeDBPMXh1SUNCSmRHVnlZWFJ2Y25OYlZFRkhYU0FnUFNCeVpYUjFjbTVVYUdsek8xeHVJQ0JwWmloRVJVWkJWVXhVS1h0Y2JpQWdJQ0J0WlhSb2IyUnpJRDBnZTF4dUlDQWdJQ0FnZG1Gc2RXVnpPaUFnUkVWR1gxWkJURlZGVXlBL0lDUmtaV1poZFd4MElEb2daMlYwVFdWMGFHOWtLRlpCVEZWRlV5a3NYRzRnSUNBZ0lDQnJaWGx6T2lBZ0lDQkpVMTlUUlZRZ0lDQWdJRDhnSkdSbFptRjFiSFFnT2lCblpYUk5aWFJvYjJRb1MwVlpVeWtzWEc0Z0lDQWdJQ0JsYm5SeWFXVnpPaUFrWlc1MGNtbGxjMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9SazlTUTBWRUtXWnZjaWhyWlhrZ2FXNGdiV1YwYUc5a2N5bDdYRzRnSUNBZ0lDQnBaaWdoS0d0bGVTQnBiaUJ3Y205MGJ5a3BjbVZrWldacGJtVW9jSEp2ZEc4c0lHdGxlU3dnYldWMGFHOWtjMXRyWlhsZEtUdGNiaUFnSUNCOUlHVnNjMlVnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9RbFZIUjFrZ2ZId2dWa0ZNVlVWVFgwSlZSeWtzSUU1QlRVVXNJRzFsZEdodlpITXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnRaWFJvYjJSek8xeHVmVHNpTENKMllYSWdTVlJGVWtGVVQxSWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oybDBaWEpoZEc5eUp5bGNiaUFnTENCVFFVWkZYME5NVDFOSlRrY2dQU0JtWVd4elpUdGNibHh1ZEhKNUlIdGNiaUFnZG1GeUlISnBkR1Z5SUQwZ1d6ZGRXMGxVUlZKQlZFOVNYU2dwTzF4dUlDQnlhWFJsY2xzbmNtVjBkWEp1SjEwZ1BTQm1kVzVqZEdsdmJpZ3BleUJUUVVaRlgwTk1UMU5KVGtjZ1BTQjBjblZsT3lCOU8xeHVJQ0JCY25KaGVTNW1jbTl0S0hKcGRHVnlMQ0JtZFc1amRHbHZiaWdwZXlCMGFISnZkeUF5T3lCOUtUdGNibjBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhsZUdWakxDQnphMmx3UTJ4dmMybHVaeWw3WEc0Z0lHbG1LQ0Z6YTJsd1EyeHZjMmx1WnlBbUppQWhVMEZHUlY5RFRFOVRTVTVIS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnZG1GeUlITmhabVVnUFNCbVlXeHpaVHRjYmlBZ2RISjVJSHRjYmlBZ0lDQjJZWElnWVhKeUlDQTlJRnMzWFZ4dUlDQWdJQ0FnTENCcGRHVnlJRDBnWVhKeVcwbFVSVkpCVkU5U1hTZ3BPMXh1SUNBZ0lHbDBaWEl1Ym1WNGRDQTlJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUI3Wkc5dVpUb2djMkZtWlNBOUlIUnlkV1Y5T3lCOU8xeHVJQ0FnSUdGeWNsdEpWRVZTUVZSUFVsMGdQU0JtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnYVhSbGNqc2dmVHRjYmlBZ0lDQmxlR1ZqS0dGeWNpazdYRzRnSUgwZ1kyRjBZMmdvWlNsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYmlBZ2NtVjBkWEp1SUhOaFptVTdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1pHOXVaU3dnZG1Gc2RXVXBlMXh1SUNCeVpYUjFjbTRnZTNaaGJIVmxPaUIyWVd4MVpTd2daRzl1WlRvZ0lTRmtiMjVsZlR0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZlRzaUxDSjJZWElnWjJWMFMyVjVjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMQ0JsYkNsN1hHNGdJSFpoY2lCUElDQWdJQ0FnUFNCMGIwbFBZbXBsWTNRb2IySnFaV04wS1Z4dUlDQWdJQ3dnYTJWNWN5QWdJRDBnWjJWMFMyVjVjeWhQS1Z4dUlDQWdJQ3dnYkdWdVozUm9JRDBnYTJWNWN5NXNaVzVuZEdoY2JpQWdJQ0FzSUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9iR1Z1WjNSb0lENGdhVzVrWlhncGFXWW9UMXRyWlhrZ1BTQnJaWGx6VzJsdVpHVjRLeXRkWFNBOVBUMGdaV3dwY21WMGRYSnVJR3RsZVR0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVd4elpUc2lMQ0l2THlBeU1DNHlMakl1TVRRZ1RXRjBhQzVsZUhCdE1TaDRLVnh1ZG1GeUlDUmxlSEJ0TVNBOUlFMWhkR2d1Wlhod2JURTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2doSkdWNGNHMHhYRzRnSUM4dklFOXNaQ0JHUmlCaWRXZGNiaUFnZkh3Z0pHVjRjRzB4S0RFd0tTQStJREl5TURJMUxqUTJOVGM1TkRnd05qY3hPU0I4ZkNBa1pYaHdiVEVvTVRBcElEd2dNakl3TWpVdU5EWTFOemswT0RBMk56RTJOVEUyT0Z4dUlDQXZMeUJVYjNJZ1FuSnZkM05sY2lCaWRXZGNiaUFnZkh3Z0pHVjRjRzB4S0MweVpTMHhOeWtnSVQwZ0xUSmxMVEUzWEc0cElEOGdablZ1WTNScGIyNGdaWGh3YlRFb2VDbDdYRzRnSUhKbGRIVnliaUFvZUNBOUlDdDRLU0E5UFNBd0lEOGdlQ0E2SUhnZ1BpQXRNV1V0TmlBbUppQjRJRHdnTVdVdE5pQS9JSGdnS3lCNElDb2dlQ0F2SURJZ09pQk5ZWFJvTG1WNGNDaDRLU0F0SURFN1hHNTlJRG9nSkdWNGNHMHhPeUlzSWk4dklESXdMakl1TWk0eU1DQk5ZWFJvTG14dlp6RndLSGdwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUUxaGRHZ3ViRzluTVhBZ2ZId2dablZ1WTNScGIyNGdiRzluTVhBb2VDbDdYRzRnSUhKbGRIVnliaUFvZUNBOUlDdDRLU0ErSUMweFpTMDRJQ1ltSUhnZ1BDQXhaUzA0SUQ4Z2VDQXRJSGdnS2lCNElDOGdNaUE2SUUxaGRHZ3ViRzluS0RFZ0t5QjRLVHRjYm4wN0lpd2lMeThnTWpBdU1pNHlMakk0SUUxaGRHZ3VjMmxuYmloNEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQk5ZWFJvTG5OcFoyNGdmSHdnWm5WdVkzUnBiMjRnYzJsbmJpaDRLWHRjYmlBZ2NtVjBkWEp1SUNoNElEMGdLM2dwSUQwOUlEQWdmSHdnZUNBaFBTQjRJRDhnZUNBNklIZ2dQQ0F3SUQ4Z0xURWdPaUF4TzF4dWZUc2lMQ0oyWVhJZ1RVVlVRU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkxYVdRbktTZ25iV1YwWVNjcFhHNGdJQ3dnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCelpYUkVaWE5qSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1aY2JpQWdMQ0JwWkNBZ0lDQWdJQ0E5SURBN1hHNTJZWElnYVhORmVIUmxibk5wWW14bElEMGdUMkpxWldOMExtbHpSWGgwWlc1emFXSnNaU0I4ZkNCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JuMDdYRzUyWVhJZ1JsSkZSVnBGSUQwZ0lYSmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUdselJYaDBaVzV6YVdKc1pTaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2UzMHBLVHRjYm4wcE8xeHVkbUZ5SUhObGRFMWxkR0VnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhObGRFUmxjMk1vYVhRc0lFMUZWRUVzSUh0MllXeDFaVG9nZTF4dUlDQWdJR2s2SUNkUEp5QXJJQ3NyYVdRc0lDOHZJRzlpYW1WamRDQkpSRnh1SUNBZ0lIYzZJSHQ5SUNBZ0lDQWdJQ0FnSUM4dklIZGxZV3NnWTI5c2JHVmpkR2x2Ym5NZ1NVUnpYRzRnSUgxOUtUdGNibjA3WEc1MllYSWdabUZ6ZEV0bGVTQTlJR1oxYm1OMGFXOXVLR2wwTENCamNtVmhkR1VwZTF4dUlDQXZMeUJ5WlhSMWNtNGdjSEpwYldsMGFYWmxJSGRwZEdnZ2NISmxabWw0WEc0Z0lHbG1LQ0ZwYzA5aWFtVmpkQ2hwZENrcGNtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBTQW5jM2x0WW05c0p5QS9JR2wwSURvZ0tIUjVjR1Z2WmlCcGRDQTlQU0FuYzNSeWFXNW5KeUEvSUNkVEp5QTZJQ2RRSnlrZ0t5QnBkRHRjYmlBZ2FXWW9JV2hoY3locGRDd2dUVVZVUVNrcGUxeHVJQ0FnSUM4dklHTmhiaWQwSUhObGRDQnRaWFJoWkdGMFlTQjBieUIxYm1OaGRXZG9kQ0JtY205NlpXNGdiMkpxWldOMFhHNGdJQ0FnYVdZb0lXbHpSWGgwWlc1emFXSnNaU2hwZENrcGNtVjBkWEp1SUNkR0p6dGNiaUFnSUNBdkx5QnViM1FnYm1WalpYTnpZWEo1SUhSdklHRmtaQ0J0WlhSaFpHRjBZVnh1SUNBZ0lHbG1LQ0ZqY21WaGRHVXBjbVYwZFhKdUlDZEZKenRjYmlBZ0lDQXZMeUJoWkdRZ2JXbHpjMmx1WnlCdFpYUmhaR0YwWVZ4dUlDQWdJSE5sZEUxbGRHRW9hWFFwTzF4dUlDQXZMeUJ5WlhSMWNtNGdiMkpxWldOMElFbEVYRzRnSUgwZ2NtVjBkWEp1SUdsMFcwMUZWRUZkTG1rN1hHNTlPMXh1ZG1GeUlHZGxkRmRsWVdzZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnWTNKbFlYUmxLWHRjYmlBZ2FXWW9JV2hoY3locGRDd2dUVVZVUVNrcGUxeHVJQ0FnSUM4dklHTmhiaWQwSUhObGRDQnRaWFJoWkdGMFlTQjBieUIxYm1OaGRXZG9kQ0JtY205NlpXNGdiMkpxWldOMFhHNGdJQ0FnYVdZb0lXbHpSWGgwWlc1emFXSnNaU2hwZENrcGNtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0x5OGdibTkwSUc1bFkyVnpjMkZ5ZVNCMGJ5QmhaR1FnYldWMFlXUmhkR0ZjYmlBZ0lDQnBaaWdoWTNKbFlYUmxLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0F2THlCaFpHUWdiV2x6YzJsdVp5QnRaWFJoWkdGMFlWeHVJQ0FnSUhObGRFMWxkR0VvYVhRcE8xeHVJQ0F2THlCeVpYUjFjbTRnYUdGemFDQjNaV0ZySUdOdmJHeGxZM1JwYjI1eklFbEVjMXh1SUNCOUlISmxkSFZ5YmlCcGRGdE5SVlJCWFM1M08xeHVmVHRjYmk4dklHRmtaQ0J0WlhSaFpHRjBZU0J2YmlCbWNtVmxlbVV0Wm1GdGFXeDVJRzFsZEdodlpITWdZMkZzYkdsdVoxeHVkbUZ5SUc5dVJuSmxaWHBsSUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaEdVa1ZGV2tVZ0ppWWdiV1YwWVM1T1JVVkVJQ1ltSUdselJYaDBaVzV6YVdKc1pTaHBkQ2tnSmlZZ0lXaGhjeWhwZEN3Z1RVVlVRU2twYzJWMFRXVjBZU2hwZENrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNTJZWElnYldWMFlTQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCTFJWazZJQ0FnSUNBZ1RVVlVRU3hjYmlBZ1RrVkZSRG9nSUNBZ0lHWmhiSE5sTEZ4dUlDQm1ZWE4wUzJWNU9pQWdabUZ6ZEV0bGVTeGNiaUFnWjJWMFYyVmhhem9nSUdkbGRGZGxZV3NzWEc0Z0lHOXVSbkpsWlhwbE9pQnZia1p5WldWNlpWeHVmVHNpTENKMllYSWdUV0Z3SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxtMWhjQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djMmhoY21Wa0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQ2NwS0NkdFpYUmhaR0YwWVNjcFhHNGdJQ3dnYzNSdmNtVWdJQ0E5SUhOb1lYSmxaQzV6ZEc5eVpTQjhmQ0FvYzJoaGNtVmtMbk4wYjNKbElEMGdibVYzSUNoeVpYRjFhWEpsS0NjdUwyVnpOaTUzWldGckxXMWhjQ2NwS1NrN1hHNWNiblpoY2lCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndJRDBnWm5WdVkzUnBiMjRvZEdGeVoyVjBMQ0IwWVhKblpYUkxaWGtzSUdOeVpXRjBaU2w3WEc0Z0lIWmhjaUIwWVhKblpYUk5aWFJoWkdGMFlTQTlJSE4wYjNKbExtZGxkQ2gwWVhKblpYUXBPMXh1SUNCcFppZ2hkR0Z5WjJWMFRXVjBZV1JoZEdFcGUxeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0J6ZEc5eVpTNXpaWFFvZEdGeVoyVjBMQ0IwWVhKblpYUk5aWFJoWkdGMFlTQTlJRzVsZHlCTllYQXBPMXh1SUNCOVhHNGdJSFpoY2lCclpYbE5aWFJoWkdGMFlTQTlJSFJoY21kbGRFMWxkR0ZrWVhSaExtZGxkQ2gwWVhKblpYUkxaWGtwTzF4dUlDQnBaaWdoYTJWNVRXVjBZV1JoZEdFcGUxeHVJQ0FnSUdsbUtDRmpjbVZoZEdVcGNtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0IwWVhKblpYUk5aWFJoWkdGMFlTNXpaWFFvZEdGeVoyVjBTMlY1TENCclpYbE5aWFJoWkdGMFlTQTlJRzVsZHlCTllYQXBPMXh1SUNCOUlISmxkSFZ5YmlCclpYbE5aWFJoWkdGMFlUdGNibjA3WEc1MllYSWdiM0prYVc1aGNubElZWE5QZDI1TlpYUmhaR0YwWVNBOUlHWjFibU4wYVc5dUtFMWxkR0ZrWVhSaFMyVjVMQ0JQTENCUUtYdGNiaUFnZG1GeUlHMWxkR0ZrWVhSaFRXRndJRDBnWjJWMFQzSkRjbVZoZEdWTlpYUmhaR0YwWVUxaGNDaFBMQ0JRTENCbVlXeHpaU2s3WEc0Z0lISmxkSFZ5YmlCdFpYUmhaR0YwWVUxaGNDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1ptRnNjMlVnT2lCdFpYUmhaR0YwWVUxaGNDNW9ZWE1vVFdWMFlXUmhkR0ZMWlhrcE8xeHVmVHRjYm5aaGNpQnZjbVJwYm1GeWVVZGxkRTkzYmsxbGRHRmtZWFJoSUQwZ1puVnVZM1JwYjI0b1RXVjBZV1JoZEdGTFpYa3NJRThzSUZBcGUxeHVJQ0IyWVhJZ2JXVjBZV1JoZEdGTllYQWdQU0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0tFOHNJRkFzSUdaaGJITmxLVHRjYmlBZ2NtVjBkWEp1SUcxbGRHRmtZWFJoVFdGd0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCMWJtUmxabWx1WldRZ09pQnRaWFJoWkdGMFlVMWhjQzVuWlhRb1RXVjBZV1JoZEdGTFpYa3BPMXh1ZlR0Y2JuWmhjaUJ2Y21ScGJtRnllVVJsWm1sdVpVOTNiazFsZEdGa1lYUmhJRDBnWm5WdVkzUnBiMjRvVFdWMFlXUmhkR0ZMWlhrc0lFMWxkR0ZrWVhSaFZtRnNkV1VzSUU4c0lGQXBlMXh1SUNCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndLRThzSUZBc0lIUnlkV1VwTG5ObGRDaE5aWFJoWkdGMFlVdGxlU3dnVFdWMFlXUmhkR0ZXWVd4MVpTazdYRzU5TzF4dWRtRnlJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhseklEMGdablZ1WTNScGIyNG9kR0Z5WjJWMExDQjBZWEpuWlhSTFpYa3BlMXh1SUNCMllYSWdiV1YwWVdSaGRHRk5ZWEFnUFNCblpYUlBja055WldGMFpVMWxkR0ZrWVhSaFRXRndLSFJoY21kbGRDd2dkR0Z5WjJWMFMyVjVMQ0JtWVd4elpTbGNiaUFnSUNBc0lHdGxlWE1nSUNBZ0lDQWdJRDBnVzEwN1hHNGdJR2xtS0cxbGRHRmtZWFJoVFdGd0tXMWxkR0ZrWVhSaFRXRndMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9YeXdnYTJWNUtYc2dhMlY1Y3k1d2RYTm9LR3RsZVNrN0lIMHBPMXh1SUNCeVpYUjFjbTRnYTJWNWN6dGNibjA3WEc1MllYSWdkRzlOWlhSaFMyVjVJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWFFnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0IwZVhCbGIyWWdhWFFnUFQwZ0ozTjViV0p2YkNjZ1B5QnBkQ0E2SUZOMGNtbHVaeWhwZENrN1hHNTlPMXh1ZG1GeUlHVjRjQ0E5SUdaMWJtTjBhVzl1S0U4cGUxeHVJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCUEtUdGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0J6ZEc5eVpUb2djM1J2Y21Vc1hHNGdJRzFoY0RvZ1oyVjBUM0pEY21WaGRHVk5aWFJoWkdGMFlVMWhjQ3hjYmlBZ2FHRnpPaUJ2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaExGeHVJQ0JuWlhRNklHOXlaR2x1WVhKNVIyVjBUM2R1VFdWMFlXUmhkR0VzWEc0Z0lITmxkRG9nYjNKa2FXNWhjbmxFWldacGJtVlBkMjVOWlhSaFpHRjBZU3hjYmlBZ2EyVjVjem9nYjNKa2FXNWhjbmxQZDI1TlpYUmhaR0YwWVV0bGVYTXNYRzRnSUd0bGVUb2dkRzlOWlhSaFMyVjVMRnh1SUNCbGVIQTZJR1Y0Y0Z4dWZUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQnRZV055YjNSaGMyc2dQU0J5WlhGMWFYSmxLQ2N1TDE5MFlYTnJKeWt1YzJWMFhHNGdJQ3dnVDJKelpYSjJaWElnSUQwZ1oyeHZZbUZzTGsxMWRHRjBhVzl1VDJKelpYSjJaWElnZkh3Z1oyeHZZbUZzTGxkbFlrdHBkRTExZEdGMGFXOXVUMkp6WlhKMlpYSmNiaUFnTENCd2NtOWpaWE56SUNBZ1BTQm5iRzlpWVd3dWNISnZZMlZ6YzF4dUlDQXNJRkJ5YjIxcGMyVWdJQ0E5SUdkc2IySmhiQzVRY205dGFYTmxYRzRnSUN3Z2FYTk9iMlJsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5bUp5a29jSEp2WTJWemN5a2dQVDBnSjNCeWIyTmxjM01uTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQm9aV0ZrTENCc1lYTjBMQ0J1YjNScFpuazdYRzVjYmlBZ2RtRnlJR1pzZFhOb0lEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnY0dGeVpXNTBMQ0JtYmp0Y2JpQWdJQ0JwWmlocGMwNXZaR1VnSmlZZ0tIQmhjbVZ1ZENBOUlIQnliMk5sYzNNdVpHOXRZV2x1S1Nsd1lYSmxiblF1WlhocGRDZ3BPMXh1SUNBZ0lIZG9hV3hsS0dobFlXUXBlMXh1SUNBZ0lDQWdabTRnSUNBOUlHaGxZV1F1Wm00N1hHNGdJQ0FnSUNCb1pXRmtJRDBnYUdWaFpDNXVaWGgwTzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdabTRvS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lHbG1LR2hsWVdRcGJtOTBhV1o1S0NrN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYkdGemRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2daVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR3hoYzNRZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWW9jR0Z5Wlc1MEtYQmhjbVZ1ZEM1bGJuUmxjaWdwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRTV2WkdVdWFuTmNiaUFnYVdZb2FYTk9iMlJsS1h0Y2JpQWdJQ0J1YjNScFpua2dQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhtYkhWemFDazdYRzRnSUNBZ2ZUdGNiaUFnTHk4Z1luSnZkM05sY25NZ2QybDBhQ0JOZFhSaGRHbHZiazlpYzJWeWRtVnlYRzRnSUgwZ1pXeHpaU0JwWmloUFluTmxjblpsY2lsN1hHNGdJQ0FnZG1GeUlIUnZaMmRzWlNBOUlIUnlkV1ZjYmlBZ0lDQWdJQ3dnYm05a1pTQWdJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxWR1Y0ZEU1dlpHVW9KeWNwTzF4dUlDQWdJRzVsZHlCUFluTmxjblpsY2lobWJIVnphQ2t1YjJKelpYSjJaU2h1YjJSbExDQjdZMmhoY21GamRHVnlSR0YwWVRvZ2RISjFaWDBwT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFc1bGQxeHVJQ0FnSUc1dmRHbG1lU0E5SUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCdWIyUmxMbVJoZEdFZ1BTQjBiMmRuYkdVZ1BTQWhkRzluWjJ4bE8xeHVJQ0FnSUgwN1hHNGdJQzh2SUdWdWRtbHliMjV0Wlc1MGN5QjNhWFJvSUcxaGVXSmxJRzV2YmkxamIyMXdiR1YwWld4NUlHTnZjbkpsWTNRc0lHSjFkQ0JsZUdsemRHVnVkQ0JRY205dGFYTmxYRzRnSUgwZ1pXeHpaU0JwWmloUWNtOXRhWE5sSUNZbUlGQnliMjFwYzJVdWNtVnpiMngyWlNsN1hHNGdJQ0FnZG1GeUlIQnliMjFwYzJVZ1BTQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tUdGNiaUFnSUNCdWIzUnBabmtnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2NISnZiV2x6WlM1MGFHVnVLR1pzZFhOb0tUdGNiaUFnSUNCOU8xeHVJQ0F2THlCbWIzSWdiM1JvWlhJZ1pXNTJhWEp2Ym0xbGJuUnpJQzBnYldGamNtOTBZWE5ySUdKaGMyVmtJRzl1T2x4dUlDQXZMeUF0SUhObGRFbHRiV1ZrYVdGMFpWeHVJQ0F2THlBdElFMWxjM05oWjJWRGFHRnVibVZzWEc0Z0lDOHZJQzBnZDJsdVpHOTNMbkJ2YzNSTlpYTnpZV2RjYmlBZ0x5OGdMU0J2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlZjYmlBZ0x5OGdMU0J6WlhSVWFXMWxiM1YwWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYm05MGFXWjVJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUM4dklITjBjbUZ1WjJVZ1NVVWdLeUIzWldKd1lXTnJJR1JsZGlCelpYSjJaWElnWW5WbklDMGdkWE5sSUM1allXeHNLR2RzYjJKaGJDbGNiaUFnSUNBZ0lHMWhZM0p2ZEdGemF5NWpZV3hzS0dkc2IySmhiQ3dnWm14MWMyZ3BPMXh1SUNBZ0lIMDdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9abTRwZTF4dUlDQWdJSFpoY2lCMFlYTnJJRDBnZTJadU9pQm1iaXdnYm1WNGREb2dkVzVrWldacGJtVmtmVHRjYmlBZ0lDQnBaaWhzWVhOMEtXeGhjM1F1Ym1WNGRDQTlJSFJoYzJzN1hHNGdJQ0FnYVdZb0lXaGxZV1FwZTF4dUlDQWdJQ0FnYUdWaFpDQTlJSFJoYzJzN1hHNGdJQ0FnSUNCdWIzUnBabmtvS1R0Y2JpQWdJQ0I5SUd4aGMzUWdQU0IwWVhOck8xeHVJQ0I5TzF4dWZUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF4T1M0eExqSXVNU0JQWW1wbFkzUXVZWE56YVdkdUtIUmhjbWRsZEN3Z2MyOTFjbU5sTENBdUxpNHBYRzUyWVhJZ1oyVjBTMlY1Y3lBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3ljcFhHNGdJQ3dnWjA5UVV5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdjeWNwWEc0Z0lDd2djRWxGSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5bGNiaUFnTENCMGIwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFc5aWFtVmpkQ2NwWEc0Z0lDd2dTVTlpYW1WamRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGIySnFaV04wSnlsY2JpQWdMQ0FrWVhOemFXZHVJQ0E5SUU5aWFtVmpkQzVoYzNOcFoyNDdYRzVjYmk4dklITm9iM1ZzWkNCM2IzSnJJSGRwZEdnZ2MzbHRZbTlzY3lCaGJtUWdjMmh2ZFd4a0lHaGhkbVVnWkdWMFpYSnRhVzVwYzNScFl5QndjbTl3WlhKMGVTQnZjbVJsY2lBb1ZqZ2dZblZuS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBaEpHRnpjMmxuYmlCOGZDQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJCSUQwZ2UzMWNiaUFnSUNBc0lFSWdQU0I3ZlZ4dUlDQWdJQ3dnVXlBOUlGTjViV0p2YkNncFhHNGdJQ0FnTENCTElEMGdKMkZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wSnp0Y2JpQWdRVnRUWFNBOUlEYzdYRzRnSUVzdWMzQnNhWFFvSnljcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2F5bDdJRUpiYTEwZ1BTQnJPeUI5S1R0Y2JpQWdjbVYwZFhKdUlDUmhjM05wWjI0b2UzMHNJRUVwVzFOZElDRTlJRGNnZkh3Z1QySnFaV04wTG10bGVYTW9KR0Z6YzJsbmJpaDdmU3dnUWlrcExtcHZhVzRvSnljcElDRTlJRXM3WEc1OUtTQS9JR1oxYm1OMGFXOXVJR0Z6YzJsbmJpaDBZWEpuWlhRc0lITnZkWEpqWlNsN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUFnZG1GeUlGUWdJQ0FnSUQwZ2RHOVBZbXBsWTNRb2RHRnlaMlYwS1Z4dUlDQWdJQ3dnWVV4bGJpQWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0xDQnBibVJsZUNBOUlERmNiaUFnSUNBc0lHZGxkRk41YldKdmJITWdQU0JuVDFCVExtWmNiaUFnSUNBc0lHbHpSVzUxYlNBZ0lDQWdQU0J3U1VVdVpqdGNiaUFnZDJocGJHVW9ZVXhsYmlBK0lHbHVaR1Y0S1h0Y2JpQWdJQ0IyWVhJZ1V5QWdJQ0FnSUQwZ1NVOWlhbVZqZENoaGNtZDFiV1Z1ZEhOYmFXNWtaWGdySzEwcFhHNGdJQ0FnSUNBc0lHdGxlWE1nSUNBOUlHZGxkRk41YldKdmJITWdQeUJuWlhSTFpYbHpLRk1wTG1OdmJtTmhkQ2huWlhSVGVXMWliMnh6S0ZNcEtTQTZJR2RsZEV0bGVYTW9VeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnYTJWNWN5NXNaVzVuZEdoY2JpQWdJQ0FnSUN3Z2FpQWdJQ0FnSUQwZ01GeHVJQ0FnSUNBZ0xDQnJaWGs3WEc0Z0lDQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FpbHBaaWhwYzBWdWRXMHVZMkZzYkNoVExDQnJaWGtnUFNCclpYbHpXMm9ySzEwcEtWUmJhMlY1WFNBOUlGTmJhMlY1WFR0Y2JpQWdmU0J5WlhSMWNtNGdWRHRjYm4wZ09pQWtZWE56YVdkdU95SXNJaTh2SURFNUxqRXVNaTR5SUM4Z01UVXVNaTR6TGpVZ1QySnFaV04wTG1OeVpXRjBaU2hQSUZzc0lGQnliM0JsY25ScFpYTmRLVnh5WEc1MllYSWdZVzVQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh5WEc0Z0lDd2daRkJ6SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQnpKeWxjY2x4dUlDQXNJR1Z1ZFcxQ2RXZExaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxaWRXY3RhMlY1Y3ljcFhISmNiaUFnTENCSlJWOVFVazlVVHlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQzFyWlhrbktTZ25TVVZmVUZKUFZFOG5LVnh5WEc0Z0lDd2dSVzF3ZEhrZ0lDQWdJQ0FnUFNCbWRXNWpkR2x2YmlncGV5QXZLaUJsYlhCMGVTQXFMeUI5WEhKY2JpQWdMQ0JRVWs5VVQxUlpVRVVnSUNBOUlDZHdjbTkwYjNSNWNHVW5PMXh5WEc1Y2NseHVMeThnUTNKbFlYUmxJRzlpYW1WamRDQjNhWFJvSUdaaGEyVWdZRzUxYkd4Z0lIQnliM1J2ZEhsd1pUb2dkWE5sSUdsbWNtRnRaU0JQWW1wbFkzUWdkMmwwYUNCamJHVmhjbVZrSUhCeWIzUnZkSGx3WlZ4eVhHNTJZWElnWTNKbFlYUmxSR2xqZENBOUlHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0x5OGdWR2h5WVhOb0xDQjNZWE4wWlNCaGJtUWdjMjlrYjIxNU9pQkpSU0JIUXlCaWRXZGNjbHh1SUNCMllYSWdhV1p5WVcxbElEMGdjbVZ4ZFdseVpTZ25MaTlmWkc5dExXTnlaV0YwWlNjcEtDZHBabkpoYldVbktWeHlYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQmxiblZ0UW5WblMyVjVjeTVzWlc1bmRHaGNjbHh1SUNBZ0lDd2daM1FnSUNBZ0lEMGdKejRuWEhKY2JpQWdJQ0FzSUdsbWNtRnRaVVJ2WTNWdFpXNTBPMXh5WEc0Z0lHbG1jbUZ0WlM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh5WEc0Z0lISmxjWFZwY21Vb0p5NHZYMmgwYld3bktTNWhjSEJsYm1SRGFHbHNaQ2hwWm5KaGJXVXBPMXh5WEc0Z0lHbG1jbUZ0WlM1emNtTWdQU0FuYW1GMllYTmpjbWx3ZERvbk95QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYTmpjbWx3ZEMxMWNteGNjbHh1SUNBdkx5QmpjbVZoZEdWRWFXTjBJRDBnYVdaeVlXMWxMbU52Ym5SbGJuUlhhVzVrYjNjdVQySnFaV04wTzF4eVhHNGdJQzh2SUdoMGJXd3VjbVZ0YjNabFEyaHBiR1FvYVdaeVlXMWxLVHRjY2x4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZENBOUlHbG1jbUZ0WlM1amIyNTBaVzUwVjJsdVpHOTNMbVJ2WTNWdFpXNTBPMXh5WEc0Z0lHbG1jbUZ0WlVSdlkzVnRaVzUwTG05d1pXNG9LVHRjY2x4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZEM1M2NtbDBaU2duUEhOamNtbHdkRDVrYjJOMWJXVnVkQzVHUFU5aWFtVmpkRHd2YzJOeWFYQjBKeUFySUdkMEtUdGNjbHh1SUNCcFpuSmhiV1ZFYjJOMWJXVnVkQzVqYkc5elpTZ3BPMXh5WEc0Z0lHTnlaV0YwWlVScFkzUWdQU0JwWm5KaGJXVkViMk4xYldWdWRDNUdPMXh5WEc0Z0lIZG9hV3hsS0drdExTbGtaV3hsZEdVZ1kzSmxZWFJsUkdsamRGdFFVazlVVDFSWlVFVmRXMlZ1ZFcxQ2RXZExaWGx6VzJsZFhUdGNjbHh1SUNCeVpYUjFjbTRnWTNKbFlYUmxSR2xqZENncE8xeHlYRzU5TzF4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVZM0psWVhSbElIeDhJR1oxYm1OMGFXOXVJR055WldGMFpTaFBMQ0JRY205d1pYSjBhV1Z6S1h0Y2NseHVJQ0IyWVhJZ2NtVnpkV3gwTzF4eVhHNGdJR2xtS0U4Z0lUMDlJRzUxYkd3cGUxeHlYRzRnSUNBZ1JXMXdkSGxiVUZKUFZFOVVXVkJGWFNBOUlHRnVUMkpxWldOMEtFOHBPMXh5WEc0Z0lDQWdjbVZ6ZFd4MElEMGdibVYzSUVWdGNIUjVPMXh5WEc0Z0lDQWdSVzF3ZEhsYlVGSlBWRTlVV1ZCRlhTQTlJRzUxYkd3N1hISmNiaUFnSUNBdkx5QmhaR1FnWENKZlgzQnliM1J2WDE5Y0lpQm1iM0lnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUlIQnZiSGxtYVd4c1hISmNiaUFnSUNCeVpYTjFiSFJiU1VWZlVGSlBWRTlkSUQwZ1R6dGNjbHh1SUNCOUlHVnNjMlVnY21WemRXeDBJRDBnWTNKbFlYUmxSR2xqZENncE8xeHlYRzRnSUhKbGRIVnliaUJRY205d1pYSjBhV1Z6SUQwOVBTQjFibVJsWm1sdVpXUWdQeUJ5WlhOMWJIUWdPaUJrVUhNb2NtVnpkV3gwTENCUWNtOXdaWEowYVdWektUdGNjbHh1ZlRzaUxDSjJZWElnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUVsRk9GOUVUMDFmUkVWR1NVNUZJRDBnY21WeGRXbHlaU2duTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVVuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGNISnBiV2wwYVhabEp5bGNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVUdGNibHh1Wlhod2IzSjBjeTVtSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBL0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU0E2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBlMXh1SUNCaGJrOWlhbVZqZENoUEtUdGNiaUFnVUNBOUlIUnZVSEpwYldsMGFYWmxLRkFzSUhSeWRXVXBPMXh1SUNCaGJrOWlhbVZqZENoQmRIUnlhV0oxZEdWektUdGNiaUFnYVdZb1NVVTRYMFJQVFY5RVJVWkpUa1VwZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWkZBb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnYVdZb0oyZGxkQ2NnYVc0Z1FYUjBjbWxpZFhSbGN5QjhmQ0FuYzJWMEp5QnBiaUJCZEhSeWFXSjFkR1Z6S1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWduUVdOalpYTnpiM0p6SUc1dmRDQnpkWEJ3YjNKMFpXUWhKeWs3WEc0Z0lHbG1LQ2QyWVd4MVpTY2dhVzRnUVhSMGNtbGlkWFJsY3lsUFcxQmRJRDBnUVhSMGNtbGlkWFJsY3k1MllXeDFaVHRjYmlBZ2NtVjBkWEp1SUU4N1hHNTlPeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhISmNiaUFnTENCaGJrOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEhKY2JpQWdMQ0JuWlhSTFpYbHpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxclpYbHpKeWs3WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5QTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9UeXdnVUhKdmNHVnlkR2xsY3lsN1hISmNiaUFnWVc1UFltcGxZM1FvVHlrN1hISmNiaUFnZG1GeUlHdGxlWE1nSUNBOUlHZGxkRXRsZVhNb1VISnZjR1Z5ZEdsbGN5bGNjbHh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjY2x4dUlDQWdJQ3dnYVNBOUlEQmNjbHh1SUNBZ0lDd2dVRHRjY2x4dUlDQjNhR2xzWlNoc1pXNW5kR2dnUGlCcEtXUlFMbVlvVHl3Z1VDQTlJR3RsZVhOYmFTc3JYU3dnVUhKdmNHVnlkR2xsYzF0UVhTazdYSEpjYmlBZ2NtVjBkWEp1SUU4N1hISmNibjA3SWl3aUx5OGdSbTl5WTJWa0lISmxjR3hoWTJWdFpXNTBJSEJ5YjNSdmRIbHdaU0JoWTJObGMzTnZjbk1nYldWMGFHOWtjMXh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyeHBZbkpoY25rbktYeDhJQ0Z5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hISmNiaUFnZG1GeUlFc2dQU0JOWVhSb0xuSmhibVJ2YlNncE8xeHlYRzRnSUM4dklFbHVJRVpHSUhSb2NtOTNjeUJ2Ym14NUlHUmxabWx1WlNCdFpYUm9iMlJ6WEhKY2JpQWdYMTlrWldacGJtVlRaWFIwWlhKZlh5NWpZV3hzS0c1MWJHd3NJRXNzSUdaMWJtTjBhVzl1S0NsN0lDOHFJR1Z0Y0hSNUlDb3ZmU2s3WEhKY2JpQWdaR1ZzWlhSbElISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BXMHRkTzF4eVhHNTlLVHNpTENKMllYSWdjRWxGSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjR2xsSnlsY2NseHVJQ0FzSUdOeVpXRjBaVVJsYzJNZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZeWNwWEhKY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHlYRzRnSUN3Z2RHOVFjbWx0YVhScGRtVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF3Y21sdGFYUnBkbVVuS1Z4eVhHNGdJQ3dnYUdGeklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh5WEc0Z0lDd2dTVVU0WDBSUFRWOUVSVVpKVGtVZ1BTQnlaWEYxYVhKbEtDY3VMMTlwWlRndFpHOXRMV1JsWm1sdVpTY3BYSEpjYmlBZ0xDQm5UMUJFSUNBZ0lDQWdJQ0FnSUNBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k3WEhKY2JseHlYRzVsZUhCdmNuUnpMbVlnUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUQ4Z1owOVFSQ0E2SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhQTENCUUtYdGNjbHh1SUNCUElEMGdkRzlKVDJKcVpXTjBLRThwTzF4eVhHNGdJRkFnUFNCMGIxQnlhVzFwZEdsMlpTaFFMQ0IwY25WbEtUdGNjbHh1SUNCcFppaEpSVGhmUkU5TlgwUkZSa2xPUlNsMGNua2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHZFBVRVFvVHl3Z1VDazdYSEpjYmlBZ2ZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4eVhHNGdJR2xtS0doaGN5aFBMQ0JRS1NseVpYUjFjbTRnWTNKbFlYUmxSR1Z6WXlnaGNFbEZMbVl1WTJGc2JDaFBMQ0JRS1N3Z1QxdFFYU2s3WEhKY2JuMDdJaXdpTHk4Z1ptRnNiR0poWTJzZ1ptOXlJRWxGTVRFZ1luVm5aM2tnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1nZDJsMGFDQnBabkpoYldVZ1lXNWtJSGRwYm1SdmQxeHVkbUZ5SUhSdlNVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1Z4dUlDQXNJR2RQVUU0Z0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVKeWt1Wmx4dUlDQXNJSFJ2VTNSeWFXNW5JQ0E5SUh0OUxuUnZVM1J5YVc1bk8xeHVYRzUyWVhJZ2QybHVaRzkzVG1GdFpYTWdQU0IwZVhCbGIyWWdkMmx1Wkc5M0lEMDlJQ2R2WW1wbFkzUW5JQ1ltSUhkcGJtUnZkeUFtSmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsYzF4dUlDQS9JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLSGRwYm1SdmR5a2dPaUJiWFR0Y2JseHVkbUZ5SUdkbGRGZHBibVJ2ZDA1aGJXVnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJuVDFCT0tHbDBLVHRjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNCeVpYUjFjbTRnZDJsdVpHOTNUbUZ0WlhNdWMyeHBZMlVvS1R0Y2JpQWdmVnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNdVppQTlJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vYVhRcGUxeHVJQ0J5WlhSMWNtNGdkMmx1Wkc5M1RtRnRaWE1nSmlZZ2RHOVRkSEpwYm1jdVkyRnNiQ2hwZENrZ1BUMGdKMXR2WW1wbFkzUWdWMmx1Wkc5M1hTY2dQeUJuWlhSWGFXNWtiM2RPWVcxbGN5aHBkQ2tnT2lCblQxQk9LSFJ2U1U5aWFtVmpkQ2hwZENrcE8xeHVmVHRjYmlJc0lpOHZJREU1TGpFdU1pNDNJQzhnTVRVdU1pNHpMalFnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vVHlsY2NseHVkbUZ5SUNSclpYbHpJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkNjcFhISmNiaUFnTENCb2FXUmtaVzVMWlhseklEMGdjbVZ4ZFdseVpTZ25MaTlmWlc1MWJTMWlkV2N0YTJWNWN5Y3BMbU52Ym1OaGRDZ25iR1Z1WjNSb0p5d2dKM0J5YjNSdmRIbHdaU2NwTzF4eVhHNWNjbHh1Wlhod2IzSjBjeTVtSUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNZ2ZId2dablZ1WTNScGIyNGdaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhQS1h0Y2NseHVJQ0J5WlhSMWNtNGdKR3RsZVhNb1R5d2dhR2xrWkdWdVMyVjVjeWs3WEhKY2JuMDdJaXdpWlhod2IzSjBjeTVtSUQwZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N6c2lMQ0l2THlBeE9TNHhMakl1T1NBdklERTFMakl1TXk0eUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaWhQS1Z4eVhHNTJZWElnYUdGeklDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHlYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHlYRzRnSUN3Z1NVVmZVRkpQVkU4Z0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1F0YTJWNUp5a29KMGxGWDFCU1QxUlBKeWxjY2x4dUlDQXNJRTlpYW1WamRGQnliM1J2SUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlR0Y2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUlIeDhJR1oxYm1OMGFXOXVLRThwZTF4eVhHNGdJRThnUFNCMGIwOWlhbVZqZENoUEtUdGNjbHh1SUNCcFppaG9ZWE1vVHl3Z1NVVmZVRkpQVkU4cEtYSmxkSFZ5YmlCUFcwbEZYMUJTVDFSUFhUdGNjbHh1SUNCcFppaDBlWEJsYjJZZ1R5NWpiMjV6ZEhKMVkzUnZjaUE5UFNBblpuVnVZM1JwYjI0bklDWW1JRThnYVc1emRHRnVZMlZ2WmlCUExtTnZibk4wY25WamRHOXlLWHRjY2x4dUlDQWdJSEpsZEhWeWJpQlBMbU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlR0Y2NseHVJQ0I5SUhKbGRIVnliaUJQSUdsdWMzUmhibU5sYjJZZ1QySnFaV04wSUQ4Z1QySnFaV04wVUhKdmRHOGdPaUJ1ZFd4c08xeHlYRzU5T3lJc0luWmhjaUJvWVhNZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHlYRzRnSUN3Z2RHOUpUMkpxWldOMElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYSEpjYmlBZ0xDQmhjbkpoZVVsdVpHVjRUMllnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxcGJtTnNkV1JsY3ljcEtHWmhiSE5sS1Z4eVhHNGdJQ3dnU1VWZlVGSlBWRThnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtMV3RsZVNjcEtDZEpSVjlRVWs5VVR5Y3BPMXh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHNWhiV1Z6S1h0Y2NseHVJQ0IyWVhJZ1R5QWdJQ0FnSUQwZ2RHOUpUMkpxWldOMEtHOWlhbVZqZENsY2NseHVJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01GeHlYRzRnSUNBZ0xDQnlaWE4xYkhRZ1BTQmJYVnh5WEc0Z0lDQWdMQ0JyWlhrN1hISmNiaUFnWm05eUtHdGxlU0JwYmlCUEtXbG1LR3RsZVNBaFBTQkpSVjlRVWs5VVR5bG9ZWE1vVHl3Z2EyVjVLU0FtSmlCeVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4eVhHNGdJQzh2SUVSdmJpZDBJR1Z1ZFcwZ1luVm5JQ1lnYUdsa1pHVnVJR3RsZVhOY2NseHVJQ0IzYUdsc1pTaHVZVzFsY3k1c1pXNW5kR2dnUGlCcEtXbG1LR2hoY3loUExDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTbDdYSEpjYmlBZ0lDQitZWEp5WVhsSmJtUmxlRTltS0hKbGMzVnNkQ3dnYTJWNUtTQjhmQ0J5WlhOMWJIUXVjSFZ6YUNoclpYa3BPMXh5WEc0Z0lIMWNjbHh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh5WEc1OU95SXNJaTh2SURFNUxqRXVNaTR4TkNBdklERTFMakl1TXk0eE5DQlBZbXBsWTNRdWEyVjVjeWhQS1Z4eVhHNTJZWElnSkd0bGVYTWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkNjcFhISmNiaUFnTENCbGJuVnRRblZuUzJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJWdWRXMHRZblZuTFd0bGVYTW5LVHRjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdUMkpxWldOMExtdGxlWE1nZkh3Z1puVnVZM1JwYjI0Z2EyVjVjeWhQS1h0Y2NseHVJQ0J5WlhSMWNtNGdKR3RsZVhNb1R5d2daVzUxYlVKMVowdGxlWE1wTzF4eVhHNTlPeUlzSW1WNGNHOXlkSE11WmlBOUlIdDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsT3lJc0lpOHZJRzF2YzNRZ1QySnFaV04wSUcxbGRHaHZaSE1nWW5rZ1JWTTJJSE5vYjNWc1pDQmhZMk5sY0hRZ2NISnBiV2wwYVhabGMxeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdOdmNtVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JtWVdsc2N5QWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpMQ0JsZUdWaktYdGNiaUFnZG1GeUlHWnVJQ0E5SUNoamIzSmxMazlpYW1WamRDQjhmQ0I3ZlNsYlMwVlpYU0I4ZkNCUFltcGxZM1JiUzBWWlhWeHVJQ0FnSUN3Z1pYaHdJRDBnZTMwN1hHNGdJR1Y0Y0Z0TFJWbGRJRDBnWlhobFl5aG1iaWs3WEc0Z0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nWm1GcGJITW9ablZ1WTNScGIyNG9LWHNnWm00b01TazdJSDBwTENBblQySnFaV04wSnl3Z1pYaHdLVHRjYm4wN0lpd2lkbUZ5SUdkbGRFdGxlWE1nSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQnBjMFZ1ZFcwZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5a3VaanRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhORmJuUnlhV1Z6S1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ0lDQjJZWElnVHlBZ0lDQWdJRDBnZEc5SlQySnFaV04wS0dsMEtWeHVJQ0FnSUNBZ0xDQnJaWGx6SUNBZ1BTQm5aWFJMWlhsektFOHBYRzRnSUNBZ0lDQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FnSUN3Z2NtVnpkV3gwSUQwZ1cxMWNiaUFnSUNBZ0lDd2dhMlY1TzF4dUlDQWdJSGRvYVd4bEtHeGxibWQwYUNBK0lHa3BhV1lvYVhORmJuVnRMbU5oYkd3b1R5d2dhMlY1SUQwZ2EyVjVjMXRwS3l0ZEtTbDdYRzRnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2hwYzBWdWRISnBaWE1nUHlCYmEyVjVMQ0JQVzJ0bGVWMWRJRG9nVDF0clpYbGRLVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1OU95SXNJaTh2SUdGc2JDQnZZbXBsWTNRZ2EyVjVjeXdnYVc1amJIVmtaWE1nYm05dUxXVnVkVzFsY21GaWJHVWdZVzVrSUhONWJXSnZiSE5jYm5aaGNpQm5UMUJPSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuYjNCdUp5bGNiaUFnTENCblQxQlRJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J6SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1VtVm1iR1ZqZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVTWldac1pXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldac1pXTjBJQ1ltSUZKbFpteGxZM1F1YjNkdVMyVjVjeUI4ZkNCbWRXNWpkR2x2YmlCdmQyNUxaWGx6S0dsMEtYdGNiaUFnZG1GeUlHdGxlWE1nSUNBZ0lDQWdQU0JuVDFCT0xtWW9ZVzVQWW1wbFkzUW9hWFFwS1Z4dUlDQWdJQ3dnWjJWMFUzbHRZbTlzY3lBOUlHZFBVRk11Wmp0Y2JpQWdjbVYwZFhKdUlHZGxkRk41YldKdmJITWdQeUJyWlhsekxtTnZibU5oZENoblpYUlRlVzFpYjJ4ektHbDBLU2tnT2lCclpYbHpPMXh1ZlRzaUxDSjJZWElnSkhCaGNuTmxSbXh2WVhRZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzV3WVhKelpVWnNiMkYwWEc0Z0lDd2dKSFJ5YVcwZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGRISnBiU2NwTG5SeWFXMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnTVNBdklDUndZWEp6WlVac2IyRjBLSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTEzY3ljcElDc2dKeTB3SnlrZ0lUMDlJQzFKYm1acGJtbDBlU0EvSUdaMWJtTjBhVzl1SUhCaGNuTmxSbXh2WVhRb2MzUnlLWHRjYmlBZ2RtRnlJSE4wY21sdVp5QTlJQ1IwY21sdEtGTjBjbWx1WnloemRISXBMQ0F6S1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnSkhCaGNuTmxSbXh2WVhRb2MzUnlhVzVuS1R0Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZENBOVBUMGdNQ0FtSmlCemRISnBibWN1WTJoaGNrRjBLREFwSUQwOUlDY3RKeUEvSUMwd0lEb2djbVZ6ZFd4ME8xeHVmU0E2SUNSd1lYSnpaVVpzYjJGME95SXNJblpoY2lBa2NHRnljMlZKYm5RZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzV3WVhKelpVbHVkRnh1SUNBc0lDUjBjbWx0SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTEwY21sdEp5a3VkSEpwYlZ4dUlDQXNJSGR6SUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxM2N5Y3BYRzRnSUN3Z2FHVjRJQ0FnSUNBZ0lEMGdMMTViWEZ3dEsxMC9NRnQ0V0Ywdk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ1J3WVhKelpVbHVkQ2gzY3lBcklDY3dPQ2NwSUNFOVBTQTRJSHg4SUNSd1lYSnpaVWx1ZENoM2N5QXJJQ2N3ZURFMkp5a2dJVDA5SURJeUlEOGdablZ1WTNScGIyNGdjR0Z5YzJWSmJuUW9jM1J5TENCeVlXUnBlQ2w3WEc0Z0lIWmhjaUJ6ZEhKcGJtY2dQU0FrZEhKcGJTaFRkSEpwYm1jb2MzUnlLU3dnTXlrN1hHNGdJSEpsZEhWeWJpQWtjR0Z5YzJWSmJuUW9jM1J5YVc1bkxDQW9jbUZrYVhnZ1BqNCtJREFwSUh4OElDaG9aWGd1ZEdWemRDaHpkSEpwYm1jcElEOGdNVFlnT2lBeE1Da3BPMXh1ZlNBNklDUndZWEp6WlVsdWREc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnY0dGMGFDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjR0YwYUNjcFhHNGdJQ3dnYVc1MmIydGxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzUyYjJ0bEp5bGNiaUFnTENCaFJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtDOHFJQzR1TG5CaGNtZHpJQ292S1h0Y2JpQWdkbUZ5SUdadUlDQWdJQ0E5SUdGR2RXNWpkR2x2YmloMGFHbHpLVnh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUN3Z2NHRnlaM01nSUQwZ1FYSnlZWGtvYkdWdVozUm9LVnh1SUNBZ0lDd2dhU0FnSUNBZ0lEMGdNRnh1SUNBZ0lDd2dYeUFnSUNBZ0lEMGdjR0YwYUM1ZlhHNGdJQ0FnTENCb2IyeGtaWElnUFNCbVlXeHpaVHRjYmlBZ2QyaHBiR1VvYkdWdVozUm9JRDRnYVNscFppZ29jR0Z5WjNOYmFWMGdQU0JoY21kMWJXVnVkSE5iYVNzclhTa2dQVDA5SUY4cGFHOXNaR1Z5SUQwZ2RISjFaVHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0M4cUlDNHVMbUZ5WjNNZ0tpOHBlMXh1SUNBZ0lIWmhjaUIwYUdGMElEMGdkR2hwYzF4dUlDQWdJQ0FnTENCaFRHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0JxSUQwZ01Dd2dheUE5SURBc0lHRnlaM003WEc0Z0lDQWdhV1lvSVdodmJHUmxjaUFtSmlBaFlVeGxiaWx5WlhSMWNtNGdhVzUyYjJ0bEtHWnVMQ0J3WVhKbmN5d2dkR2hoZENrN1hHNGdJQ0FnWVhKbmN5QTlJSEJoY21kekxuTnNhV05sS0NrN1hHNGdJQ0FnYVdZb2FHOXNaR1Z5S1dadmNpZzdiR1Z1WjNSb0lENGdhanNnYWlzcktXbG1LR0Z5WjNOYmFsMGdQVDA5SUY4cFlYSm5jMXRxWFNBOUlHRnlaM1Z0Wlc1MGMxdHJLeXRkTzF4dUlDQWdJSGRvYVd4bEtHRk1aVzRnUGlCcktXRnlaM011Y0hWemFDaGhjbWQxYldWdWRITmJheXNyWFNrN1hHNGdJQ0FnY21WMGRYSnVJR2x1ZG05clpTaG1iaXdnWVhKbmN5d2dkR2hoZENrN1hHNGdJSDA3WEc1OU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWs3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloaWFYUnRZWEFzSUhaaGJIVmxLWHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0JsYm5WdFpYSmhZbXhsSUNBNklDRW9ZbWwwYldGd0lDWWdNU2tzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lBaEtHSnBkRzFoY0NBbUlESXBMRnh1SUNBZ0lIZHlhWFJoWW14bElDQWdJRG9nSVNoaWFYUnRZWEFnSmlBMEtTeGNiaUFnSUNCMllXeDFaU0FnSUNBZ0lDQTZJSFpoYkhWbFhHNGdJSDA3WEc1OU95SXNJblpoY2lCeVpXUmxabWx1WlNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnYzNKakxDQnpZV1psS1h0Y2JpQWdabTl5S0haaGNpQnJaWGtnYVc0Z2MzSmpLWEpsWkdWbWFXNWxLSFJoY21kbGRDd2dhMlY1TENCemNtTmJhMlY1WFN3Z2MyRm1aU2s3WEc0Z0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc1OU95SXNJblpoY2lCbmJHOWlZV3dnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1UxSkRJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5a29KM055WXljcFhHNGdJQ3dnVkU5ZlUxUlNTVTVISUQwZ0ozUnZVM1J5YVc1bkoxeHVJQ0FzSUNSMGIxTjBjbWx1WnlBOUlFWjFibU4wYVc5dVcxUlBYMU5VVWtsT1IxMWNiaUFnTENCVVVFd2dJQ0FnSUNBZ1BTQW9KeWNnS3lBa2RHOVRkSEpwYm1jcExuTndiR2wwS0ZSUFgxTlVVa2xPUnlrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LUzVwYm5Od1pXTjBVMjkxY21ObElEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z0pIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcE8xeHVmVHRjYmx4dUtHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1R5d2dhMlY1TENCMllXd3NJSE5oWm1VcGUxeHVJQ0IyWVhJZ2FYTkdkVzVqZEdsdmJpQTlJSFI1Y0dWdlppQjJZV3dnUFQwZ0oyWjFibU4wYVc5dUp6dGNiaUFnYVdZb2FYTkdkVzVqZEdsdmJpbG9ZWE1vZG1Gc0xDQW5ibUZ0WlNjcElIeDhJR2hwWkdVb2RtRnNMQ0FuYm1GdFpTY3NJR3RsZVNrN1hHNGdJR2xtS0U5YmEyVjVYU0E5UFQwZ2RtRnNLWEpsZEhWeWJqdGNiaUFnYVdZb2FYTkdkVzVqZEdsdmJpbG9ZWE1vZG1Gc0xDQlRVa01wSUh4OElHaHBaR1VvZG1Gc0xDQlRVa01zSUU5YmEyVjVYU0EvSUNjbklDc2dUMXRyWlhsZElEb2dWRkJNTG1wdmFXNG9VM1J5YVc1bktHdGxlU2twS1R0Y2JpQWdhV1lvVHlBOVBUMGdaMnh2WW1Gc0tYdGNiaUFnSUNCUFcydGxlVjBnUFNCMllXdzdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lvSVhOaFptVXBlMXh1SUNBZ0lDQWdaR1ZzWlhSbElFOWJhMlY1WFR0Y2JpQWdJQ0FnSUdocFpHVW9UeXdnYTJWNUxDQjJZV3dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaWhQVzJ0bGVWMHBUMXRyWlhsZElEMGdkbUZzTzF4dUlDQWdJQ0FnWld4elpTQm9hV1JsS0U4c0lHdGxlU3dnZG1Gc0tUdGNiaUFnSUNCOVhHNGdJSDFjYmk4dklHRmtaQ0JtWVd0bElFWjFibU4wYVc5dUkzUnZVM1J5YVc1bklHWnZjaUJqYjNKeVpXTjBJSGR2Y21zZ2QzSmhjSEJsWkNCdFpYUm9iMlJ6SUM4Z1kyOXVjM1J5ZFdOMGIzSnpJSGRwZEdnZ2JXVjBhRzlrY3lCc2FXdGxJRXh2UkdGemFDQnBjMDVoZEdsMlpWeHVmU2tvUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTENCVVQxOVRWRkpKVGtjc0lHWjFibU4wYVc5dUlIUnZVM1J5YVc1bktDbDdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkR2hwY3lBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUhSb2FYTmJVMUpEWFNCOGZDQWtkRzlUZEhKcGJtY3VZMkZzYkNoMGFHbHpLVHRjYm4wcE95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9jbVZuUlhod0xDQnlaWEJzWVdObEtYdGNiaUFnZG1GeUlISmxjR3hoWTJWeUlEMGdjbVZ3YkdGalpTQTlQVDBnVDJKcVpXTjBLSEpsY0d4aFkyVXBJRDhnWm5WdVkzUnBiMjRvY0dGeWRDbDdYRzRnSUNBZ2NtVjBkWEp1SUhKbGNHeGhZMlZiY0dGeWRGMDdYRzRnSUgwZ09pQnlaWEJzWVdObE8xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jb2FYUXBMbkpsY0d4aFkyVW9jbVZuUlhod0xDQnlaWEJzWVdObGNpazdYRzRnSUgwN1hHNTlPeUlzSWk4dklEY3VNaTQ1SUZOaGJXVldZV3gxWlNoNExDQjVLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVhWE1nZkh3Z1puVnVZM1JwYjI0Z2FYTW9lQ3dnZVNsN1hHNGdJSEpsZEhWeWJpQjRJRDA5UFNCNUlEOGdlQ0FoUFQwZ01DQjhmQ0F4SUM4Z2VDQTlQVDBnTVNBdklIa2dPaUI0SUNFOUlIZ2dKaVlnZVNBaFBTQjVPMXh1ZlRzaUxDSXZMeUJYYjNKcmN5QjNhWFJvSUY5ZmNISnZkRzlmWHlCdmJteDVMaUJQYkdRZ2RqZ2dZMkZ1SjNRZ2QyOXlheUIzYVhSb0lHNTFiR3dnY0hKdmRHOGdiMkpxWldOMGN5NWNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhCeWIzUnZJQ292WEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1MllYSWdZMmhsWTJzZ1BTQm1kVzVqZEdsdmJpaFBMQ0J3Y205MGJ5bDdYRzRnSUdGdVQySnFaV04wS0U4cE8xeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2NISnZkRzhwSUNZbUlIQnliM1J2SUNFOVBTQnVkV3hzS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWh3Y205MGJ5QXJJRndpT2lCallXNG5kQ0J6WlhRZ1lYTWdjSEp2ZEc5MGVYQmxJVndpS1R0Y2JuMDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ2MyVjBPaUJQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZZ2ZId2dLQ2RmWDNCeWIzUnZYMThuSUdsdUlIdDlJRDhnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUdaMWJtTjBhVzl1S0hSbGMzUXNJR0oxWjJkNUxDQnpaWFFwZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdjMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0Snlrb1JuVnVZM1JwYjI0dVkyRnNiQ3dnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtS0U5aWFtVmpkQzV3Y205MGIzUjVjR1VzSUNkZlgzQnliM1J2WDE4bktTNXpaWFFzSURJcE8xeHVJQ0FnSUNBZ0lDQnpaWFFvZEdWemRDd2dXMTBwTzF4dUlDQWdJQ0FnSUNCaWRXZG5lU0E5SUNFb2RHVnpkQ0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3SUdKMVoyZDVJRDBnZEhKMVpUc2dmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITmxkRkJ5YjNSdmRIbHdaVTltS0U4c0lIQnliM1J2S1h0Y2JpQWdJQ0FnSUNBZ1kyaGxZMnNvVHl3Z2NISnZkRzhwTzF4dUlDQWdJQ0FnSUNCcFppaGlkV2RuZVNsUExsOWZjSEp2ZEc5Zlh5QTlJSEJ5YjNSdk8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUhObGRDaFBMQ0J3Y205MGJ5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLSHQ5TENCbVlXeHpaU2tnT2lCMWJtUmxabWx1WldRcExGeHVJQ0JqYUdWamF6b2dZMmhsWTJ0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmtVQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BYRzRnSUN3Z1JFVlRRMUpKVUZSUFVsTWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BYRzRnSUN3Z1UxQkZRMGxGVXlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYzNCbFkybGxjeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFdEZXU2w3WEc0Z0lIWmhjaUJESUQwZ1oyeHZZbUZzVzB0RldWMDdYRzRnSUdsbUtFUkZVME5TU1ZCVVQxSlRJQ1ltSUVNZ0ppWWdJVU5iVTFCRlEwbEZVMTBwWkZBdVppaERMQ0JUVUVWRFNVVlRMQ0I3WEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTTdJSDFjYmlBZ2ZTazdYRzU5T3lJc0luWmhjaUJrWldZZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bVhHNGdJQ3dnYUdGeklEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCVVFVY2dQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duZEc5VGRISnBibWRVWVdjbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEN3Z2RHRm5MQ0J6ZEdGMEtYdGNiaUFnYVdZb2FYUWdKaVlnSVdoaGN5aHBkQ0E5SUhOMFlYUWdQeUJwZENBNklHbDBMbkJ5YjNSdmRIbHdaU3dnVkVGSEtTbGtaV1lvYVhRc0lGUkJSeXdnZTJOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN3Z2RtRnNkV1U2SUhSaFozMHBPMXh1ZlRzaUxDSjJZWElnYzJoaGNtVmtJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrSnlrb0oydGxlWE1uS1Z4eVhHNGdJQ3dnZFdsa0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRXbGtKeWs3WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2EyVjVLWHRjY2x4dUlDQnlaWFIxY200Z2MyaGhjbVZrVzJ0bGVWMGdmSHdnS0hOb1lYSmxaRnRyWlhsZElEMGdkV2xrS0d0bGVTa3BPMXh5WEc1OU95SXNJblpoY2lCbmJHOWlZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUZOSVFWSkZSQ0E5SUNkZlgyTnZjbVV0YW5OZmMyaGhjbVZrWDE4blhHNGdJQ3dnYzNSdmNtVWdJRDBnWjJ4dlltRnNXMU5JUVZKRlJGMGdmSHdnS0dkc2IySmhiRnRUU0VGU1JVUmRJRDBnZTMwcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQnlaWFIxY200Z2MzUnZjbVZiYTJWNVhTQjhmQ0FvYzNSdmNtVmJhMlY1WFNBOUlIdDlLVHRjYm4wN0lpd2lMeThnTnk0ekxqSXdJRk53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaWhQTENCa1pXWmhkV3gwUTI5dWMzUnlkV04wYjNJcFhHNTJZWElnWVc1UFltcGxZM1FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXWjFibU4wYVc5dUp5bGNiaUFnTENCVFVFVkRTVVZUSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25jM0JsWTJsbGN5Y3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhQTENCRUtYdGNiaUFnZG1GeUlFTWdQU0JoYms5aWFtVmpkQ2hQS1M1amIyNXpkSEoxWTNSdmNpd2dVenRjYmlBZ2NtVjBkWEp1SUVNZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNBb1V5QTlJR0Z1VDJKcVpXTjBLRU1wVzFOUVJVTkpSVk5kS1NBOVBTQjFibVJsWm1sdVpXUWdQeUJFSURvZ1lVWjFibU4wYVc5dUtGTXBPMXh1ZlRzaUxDSjJZWElnWm1GcGJITWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwTzF4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWh0WlhSb2IyUXNJR0Z5WnlsN1hISmNiaUFnY21WMGRYSnVJQ0VoYldWMGFHOWtJQ1ltSUdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0JoY21jZ1B5QnRaWFJvYjJRdVkyRnNiQ2h1ZFd4c0xDQm1kVzVqZEdsdmJpZ3BlMzBzSURFcElEb2diV1YwYUc5a0xtTmhiR3dvYm5Wc2JDazdYSEpjYmlBZ2ZTazdYSEpjYm4wN0lpd2lkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJR1JsWm1sdVpXUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktUdGNiaTh2SUhSeWRXVWdJQzArSUZOMGNtbHVaeU5oZEZ4dUx5OGdabUZzYzJVZ0xUNGdVM1J5YVc1bkkyTnZaR1ZRYjJsdWRFRjBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRlJQWDFOVVVrbE9SeWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmloMGFHRjBMQ0J3YjNNcGUxeHVJQ0FnSUhaaGNpQnpJRDBnVTNSeWFXNW5LR1JsWm1sdVpXUW9kR2hoZENrcFhHNGdJQ0FnSUNBc0lHa2dQU0IwYjBsdWRHVm5aWElvY0c5ektWeHVJQ0FnSUNBZ0xDQnNJRDBnY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnWVN3Z1lqdGNiaUFnSUNCcFppaHBJRHdnTUNCOGZDQnBJRDQ5SUd3cGNtVjBkWEp1SUZSUFgxTlVVa2xPUnlBL0lDY25JRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJR0VnUFNCekxtTm9ZWEpEYjJSbFFYUW9hU2s3WEc0Z0lDQWdjbVYwZFhKdUlHRWdQQ0F3ZUdRNE1EQWdmSHdnWVNBK0lEQjRaR0ptWmlCOGZDQnBJQ3NnTVNBOVBUMGdiQ0I4ZkNBb1lpQTlJSE11WTJoaGNrTnZaR1ZCZENocElDc2dNU2twSUR3Z01IaGtZekF3SUh4OElHSWdQaUF3ZUdSbVptWmNiaUFnSUNBZ0lEOGdWRTlmVTFSU1NVNUhJRDhnY3k1amFHRnlRWFFvYVNrZ09pQmhYRzRnSUNBZ0lDQTZJRlJQWDFOVVVrbE9SeUEvSUhNdWMyeHBZMlVvYVN3Z2FTQXJJRElwSURvZ0tHRWdMU0F3ZUdRNE1EQWdQRHdnTVRBcElDc2dLR0lnTFNBd2VHUmpNREFwSUNzZ01IZ3hNREF3TUR0Y2JpQWdmVHRjYm4wN0lpd2lMeThnYUdWc2NHVnlJR1p2Y2lCVGRISnBibWNqZTNOMFlYSjBjMWRwZEdnc0lHVnVaSE5YYVhSb0xDQnBibU5zZFdSbGMzMWNiblpoY2lCcGMxSmxaMFY0Y0NBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFhKbFoyVjRjQ2NwWEc0Z0lDd2daR1ZtYVc1bFpDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9kR2hoZEN3Z2MyVmhjbU5vVTNSeWFXNW5MQ0JPUVUxRktYdGNiaUFnYVdZb2FYTlNaV2RGZUhBb2MyVmhjbU5vVTNSeWFXNW5LU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMU4wY21sdVp5TW5JQ3NnVGtGTlJTQXJJRndpSUdSdlpYTnVKM1FnWVdOalpYQjBJSEpsWjJWNElWd2lLVHRjYmlBZ2NtVjBkWEp1SUZOMGNtbHVaeWhrWldacGJtVmtLSFJvWVhRcEtUdGNibjA3SWl3aWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR1poYVd4eklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwWEc0Z0lDd2daR1ZtYVc1bFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1Z4dUlDQXNJSEYxYjNRZ0lDQWdQU0F2WENJdlp6dGNiaTh2SUVJdU1pNHpMakl1TVNCRGNtVmhkR1ZJVkUxTUtITjBjbWx1Wnl3Z2RHRm5MQ0JoZEhSeWFXSjFkR1VzSUhaaGJIVmxLVnh1ZG1GeUlHTnlaV0YwWlVoVVRVd2dQU0JtZFc1amRHbHZiaWh6ZEhKcGJtY3NJSFJoWnl3Z1lYUjBjbWxpZFhSbExDQjJZV3gxWlNrZ2UxeHVJQ0IyWVhJZ1V5QWdQU0JUZEhKcGJtY29aR1ZtYVc1bFpDaHpkSEpwYm1jcEtWeHVJQ0FnSUN3Z2NERWdQU0FuUENjZ0t5QjBZV2M3WEc0Z0lHbG1LR0YwZEhKcFluVjBaU0FoUFQwZ0p5Y3BjREVnS3owZ0p5QW5JQ3NnWVhSMGNtbGlkWFJsSUNzZ0p6MWNJaWNnS3lCVGRISnBibWNvZG1Gc2RXVXBMbkpsY0d4aFkyVW9jWFZ2ZEN3Z0p5WnhkVzkwT3ljcElDc2dKMXdpSnp0Y2JpQWdjbVYwZFhKdUlIQXhJQ3NnSno0bklDc2dVeUFySUNjOEx5Y2dLeUIwWVdjZ0t5QW5QaWM3WEc1OU8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaE9RVTFGTENCbGVHVmpLWHRjYmlBZ2RtRnlJRThnUFNCN2ZUdGNiaUFnVDF0T1FVMUZYU0E5SUdWNFpXTW9ZM0psWVhSbFNGUk5UQ2s3WEc0Z0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnZEdWemRDQTlJQ2NuVzA1QlRVVmRLQ2RjSWljcE8xeHVJQ0FnSUhKbGRIVnliaUIwWlhOMElDRTlQU0IwWlhOMExuUnZURzkzWlhKRFlYTmxLQ2tnZkh3Z2RHVnpkQzV6Y0d4cGRDZ25YQ0luS1M1c1pXNW5kR2dnUGlBek8xeHVJQ0I5S1N3Z0oxTjBjbWx1Wnljc0lFOHBPMXh1ZlRzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdNek9TOXdjbTl3YjNOaGJDMXpkSEpwYm1jdGNHRmtMWE4wWVhKMExXVnVaRnh1ZG1GeUlIUnZUR1Z1WjNSb0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0J5WlhCbFlYUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxeVpYQmxZWFFuS1Z4dUlDQXNJR1JsWm1sdVpXUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLSFJvWVhRc0lHMWhlRXhsYm1kMGFDd2dabWxzYkZOMGNtbHVaeXdnYkdWbWRDbDdYRzRnSUhaaGNpQlRJQ0FnSUNBZ0lDQWdJQ0FnUFNCVGRISnBibWNvWkdWbWFXNWxaQ2gwYUdGMEtTbGNiaUFnSUNBc0lITjBjbWx1WjB4bGJtZDBhQ0E5SUZNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JtYVd4c1UzUnlJQ0FnSUNBZ1BTQm1hV3hzVTNSeWFXNW5JRDA5UFNCMWJtUmxabWx1WldRZ1B5QW5JQ2NnT2lCVGRISnBibWNvWm1sc2JGTjBjbWx1WnlsY2JpQWdJQ0FzSUdsdWRFMWhlRXhsYm1kMGFDQTlJSFJ2VEdWdVozUm9LRzFoZUV4bGJtZDBhQ2s3WEc0Z0lHbG1LR2x1ZEUxaGVFeGxibWQwYUNBOFBTQnpkSEpwYm1kTVpXNW5kR2dnZkh3Z1ptbHNiRk4wY2lBOVBTQW5KeWx5WlhSMWNtNGdVenRjYmlBZ2RtRnlJR1pwYkd4TVpXNGdQU0JwYm5STllYaE1aVzVuZEdnZ0xTQnpkSEpwYm1kTVpXNW5kR2hjYmlBZ0lDQXNJSE4wY21sdVowWnBiR3hsY2lBOUlISmxjR1ZoZEM1allXeHNLR1pwYkd4VGRISXNJRTFoZEdndVkyVnBiQ2htYVd4c1RHVnVJQzhnWm1sc2JGTjBjaTVzWlc1bmRHZ3BLVHRjYmlBZ2FXWW9jM1J5YVc1blJtbHNiR1Z5TG14bGJtZDBhQ0ErSUdacGJHeE1aVzRwYzNSeWFXNW5SbWxzYkdWeUlEMGdjM1J5YVc1blJtbHNiR1Z5TG5Oc2FXTmxLREFzSUdacGJHeE1aVzRwTzF4dUlDQnlaWFIxY200Z2JHVm1kQ0EvSUhOMGNtbHVaMFpwYkd4bGNpQXJJRk1nT2lCVElDc2djM1J5YVc1blJtbHNiR1Z5TzF4dWZUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCMGIwbHVkR1ZuWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0JrWldacGJtVmtJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnY21Wd1pXRjBLR052ZFc1MEtYdGNiaUFnZG1GeUlITjBjaUE5SUZOMGNtbHVaeWhrWldacGJtVmtLSFJvYVhNcEtWeHVJQ0FnSUN3Z2NtVnpJRDBnSnlkY2JpQWdJQ0FzSUc0Z0lDQTlJSFJ2U1c1MFpXZGxjaWhqYjNWdWRDazdYRzRnSUdsbUtHNGdQQ0F3SUh4OElHNGdQVDBnU1c1bWFXNXBkSGtwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhjSWtOdmRXNTBJR05oYmlkMElHSmxJRzVsWjJGMGFYWmxYQ0lwTzF4dUlDQm1iM0lvTzI0Z1BpQXdPeUFvYmlBK1BqNDlJREVwSUNZbUlDaHpkSElnS3owZ2MzUnlLU2xwWmlodUlDWWdNU2x5WlhNZ0t6MGdjM1J5TzF4dUlDQnlaWFIxY200Z2NtVnpPMXh1ZlRzaUxDSjJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWkdWbWFXNWxaQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktWeHVJQ0FzSUdaaGFXeHpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnYzNCaFkyVnpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxM2N5Y3BYRzRnSUN3Z2MzQmhZMlVnSUNBOUlDZGJKeUFySUhOd1lXTmxjeUFySUNkZEoxeHVJQ0FzSUc1dmJpQWdJQ0FnUFNBblhGeDFNakF3WWx4Y2RUQXdPRFVuWEc0Z0lDd2diSFJ5YVcwZ0lDQTlJRkpsWjBWNGNDZ25YaWNnS3lCemNHRmpaU0FySUhOd1lXTmxJQ3NnSnlvbktWeHVJQ0FzSUhKMGNtbHRJQ0FnUFNCU1pXZEZlSEFvYzNCaFkyVWdLeUJ6Y0dGalpTQXJJQ2NxSkNjcE8xeHVYRzUyWVhJZ1pYaHdiM0owWlhJZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUdWNFpXTXNJRUZNU1VGVEtYdGNiaUFnZG1GeUlHVjRjQ0FnSUQwZ2UzMDdYRzRnSUhaaGNpQkdUMUpEUlNBOUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnY21WMGRYSnVJQ0VoYzNCaFkyVnpXMHRGV1Ywb0tTQjhmQ0J1YjI1YlMwVlpYU2dwSUNFOUlHNXZianRjYmlBZ2ZTazdYRzRnSUhaaGNpQm1iaUE5SUdWNGNGdExSVmxkSUQwZ1JrOVNRMFVnUHlCbGVHVmpLSFJ5YVcwcElEb2djM0JoWTJWelcwdEZXVjA3WEc0Z0lHbG1LRUZNU1VGVEtXVjRjRnRCVEVsQlUxMGdQU0JtYmp0Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lCR1QxSkRSU3dnSjFOMGNtbHVaeWNzSUdWNGNDazdYRzU5TzF4dVhHNHZMeUF4SUMwK0lGTjBjbWx1WnlOMGNtbHRUR1ZtZEZ4dUx5OGdNaUF0UGlCVGRISnBibWNqZEhKcGJWSnBaMmgwWEc0dkx5QXpJQzArSUZOMGNtbHVaeU4wY21sdFhHNTJZWElnZEhKcGJTQTlJR1Y0Y0c5eWRHVnlMblJ5YVcwZ1BTQm1kVzVqZEdsdmJpaHpkSEpwYm1jc0lGUlpVRVVwZTF4dUlDQnpkSEpwYm1jZ1BTQlRkSEpwYm1jb1pHVm1hVzVsWkNoemRISnBibWNwS1R0Y2JpQWdhV1lvVkZsUVJTQW1JREVwYzNSeWFXNW5JRDBnYzNSeWFXNW5MbkpsY0d4aFkyVW9iSFJ5YVcwc0lDY25LVHRjYmlBZ2FXWW9WRmxRUlNBbUlESXBjM1J5YVc1bklEMGdjM1J5YVc1bkxuSmxjR3hoWTJVb2NuUnlhVzBzSUNjbktUdGNiaUFnY21WMGRYSnVJSE4wY21sdVp6dGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pYaHdiM0owWlhJN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQW5YRng0TURsY1hIZ3dRVnhjZURCQ1hGeDRNRU5jWEhnd1JGeGNlREl3WEZ4NFFUQmNYSFV4Tmpnd1hGeDFNVGd3UlZ4Y2RUSXdNREJjWEhVeU1EQXhYRngxTWpBd01seGNkVEl3TURNbklDdGNjbHh1SUNBblhGeDFNakF3TkZ4Y2RUSXdNRFZjWEhVeU1EQTJYRngxTWpBd04xeGNkVEl3TURoY1hIVXlNREE1WEZ4MU1qQXdRVnhjZFRJd01rWmNYSFV5TURWR1hGeDFNekF3TUZ4Y2RUSXdNamhjWEhVeU1ESTVYRngxUmtWR1JpYzdJaXdpZG1GeUlHTjBlQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BYRzRnSUN3Z2FXNTJiMnRsSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc1MmIydGxKeWxjYmlBZ0xDQm9kRzFzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2RHMXNKeWxjYmlBZ0xDQmpaV3dnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5a2IyMHRZM0psWVhSbEp5bGNiaUFnTENCbmJHOWlZV3dnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lIQnliMk5sYzNNZ0lDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNXdjbTlqWlhOelhHNGdJQ3dnYzJWMFZHRnpheUFnSUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTG5ObGRFbHRiV1ZrYVdGMFpWeHVJQ0FzSUdOc1pXRnlWR0Z6YXlBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1amJHVmhja2x0YldWa2FXRjBaVnh1SUNBc0lFMWxjM05oWjJWRGFHRnVibVZzSUNBZ0lDQTlJR2RzYjJKaGJDNU5aWE56WVdkbFEyaGhibTVsYkZ4dUlDQXNJR052ZFc1MFpYSWdJQ0FnSUNBZ0lDQWdJQ0E5SURCY2JpQWdMQ0J4ZFdWMVpTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCN2ZWeHVJQ0FzSUU5T1VrVkJSRmxUVkVGVVJVTklRVTVIUlNBOUlDZHZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVW5YRzRnSUN3Z1pHVm1aWElzSUdOb1lXNXVaV3dzSUhCdmNuUTdYRzUyWVhJZ2NuVnVJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUdsa0lEMGdLM1JvYVhNN1hHNGdJR2xtS0hGMVpYVmxMbWhoYzA5M2JsQnliM0JsY25SNUtHbGtLU2w3WEc0Z0lDQWdkbUZ5SUdadUlEMGdjWFZsZFdWYmFXUmRPMXh1SUNBZ0lHUmxiR1YwWlNCeGRXVjFaVnRwWkYwN1hHNGdJQ0FnWm00b0tUdGNiaUFnZlZ4dWZUdGNiblpoY2lCc2FYTjBaVzVsY2lBOUlHWjFibU4wYVc5dUtHVjJaVzUwS1h0Y2JpQWdjblZ1TG1OaGJHd29aWFpsYm5RdVpHRjBZU2s3WEc1OU8xeHVMeThnVG05a1pTNXFjeUF3TGprcklDWWdTVVV4TUNzZ2FHRnpJSE5sZEVsdGJXVmthV0YwWlN3Z2IzUm9aWEozYVhObE9seHVhV1lvSVhObGRGUmhjMnNnZkh3Z0lXTnNaV0Z5VkdGemF5bDdYRzRnSUhObGRGUmhjMnNnUFNCbWRXNWpkR2x2YmlCelpYUkpiVzFsWkdsaGRHVW9abTRwZTF4dUlDQWdJSFpoY2lCaGNtZHpJRDBnVzEwc0lHa2dQU0F4TzF4dUlDQWdJSGRvYVd4bEtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQnBLV0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iYVNzclhTazdYRzRnSUNBZ2NYVmxkV1ZiS3l0amIzVnVkR1Z5WFNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnBiblp2YTJVb2RIbHdaVzltSUdadUlEMDlJQ2RtZFc1amRHbHZiaWNnUHlCbWJpQTZJRVoxYm1OMGFXOXVLR1p1S1N3Z1lYSm5jeWs3WEc0Z0lDQWdmVHRjYmlBZ0lDQmtaV1psY2loamIzVnVkR1Z5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMjkxYm5SbGNqdGNiaUFnZlR0Y2JpQWdZMnhsWVhKVVlYTnJJRDBnWm5WdVkzUnBiMjRnWTJ4bFlYSkpiVzFsWkdsaGRHVW9hV1FwZTF4dUlDQWdJR1JsYkdWMFpTQnhkV1YxWlZ0cFpGMDdYRzRnSUgwN1hHNGdJQzh2SUU1dlpHVXVhbk1nTUM0NExWeHVJQ0JwWmloeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Nod2NtOWpaWE56S1NBOVBTQW5jSEp2WTJWemN5Y3BlMXh1SUNBZ0lHUmxabVZ5SUQwZ1puVnVZM1JwYjI0b2FXUXBlMXh1SUNBZ0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpkSGdvY25WdUxDQnBaQ3dnTVNrcE8xeHVJQ0FnSUgwN1hHNGdJQzh2SUVKeWIzZHpaWEp6SUhkcGRHZ2dUV1Z6YzJGblpVTm9ZVzV1Wld3c0lHbHVZMngxWkdWeklGZGxZbGR2Y210bGNuTmNiaUFnZlNCbGJITmxJR2xtS0UxbGMzTmhaMlZEYUdGdWJtVnNLWHRjYmlBZ0lDQmphR0Z1Ym1Wc0lEMGdibVYzSUUxbGMzTmhaMlZEYUdGdWJtVnNPMXh1SUNBZ0lIQnZjblFnSUNBZ1BTQmphR0Z1Ym1Wc0xuQnZjblF5TzF4dUlDQWdJR05vWVc1dVpXd3VjRzl5ZERFdWIyNXRaWE56WVdkbElEMGdiR2x6ZEdWdVpYSTdYRzRnSUNBZ1pHVm1aWElnUFNCamRIZ29jRzl5ZEM1d2IzTjBUV1Z6YzJGblpTd2djRzl5ZEN3Z01TazdYRzRnSUM4dklFSnliM2R6WlhKeklIZHBkR2dnY0c5emRFMWxjM05oWjJVc0lITnJhWEFnVjJWaVYyOXlhMlZ5YzF4dUlDQXZMeUJKUlRnZ2FHRnpJSEJ2YzNSTlpYTnpZV2RsTENCaWRYUWdhWFFuY3lCemVXNWpJQ1lnZEhsd1pXOW1JR2wwY3lCd2IzTjBUV1Z6YzJGblpTQnBjeUFuYjJKcVpXTjBKMXh1SUNCOUlHVnNjMlVnYVdZb1oyeHZZbUZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElnSmlZZ2RIbHdaVzltSUhCdmMzUk5aWE56WVdkbElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXZHNiMkpoYkM1cGJYQnZjblJUWTNKcGNIUnpLWHRjYmlBZ0lDQmtaV1psY2lBOUlHWjFibU4wYVc5dUtHbGtLWHRjYmlBZ0lDQWdJR2RzYjJKaGJDNXdiM04wVFdWemMyRm5aU2hwWkNBcklDY25MQ0FuS2ljcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnWjJ4dlltRnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjFsYzNOaFoyVW5MQ0JzYVhOMFpXNWxjaXdnWm1Gc2MyVXBPMXh1SUNBdkx5QkpSVGd0WEc0Z0lIMGdaV3h6WlNCcFppaFBUbEpGUVVSWlUxUkJWRVZEU0VGT1IwVWdhVzRnWTJWc0tDZHpZM0pwY0hRbktTbDdYRzRnSUNBZ1pHVm1aWElnUFNCbWRXNWpkR2x2YmlocFpDbDdYRzRnSUNBZ0lDQm9kRzFzTG1Gd2NHVnVaRU5vYVd4a0tHTmxiQ2duYzJOeWFYQjBKeWtwVzA5T1VrVkJSRmxUVkVGVVJVTklRVTVIUlYwZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0JvZEcxc0xuSmxiVzkyWlVOb2FXeGtLSFJvYVhNcE8xeHVJQ0FnSUNBZ0lDQnlkVzR1WTJGc2JDaHBaQ2s3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDA3WEc0Z0lDOHZJRkpsYzNRZ2IyeGtJR0p5YjNkelpYSnpYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpaHBaQ2w3WEc0Z0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0dOMGVDaHlkVzRzSUdsa0xDQXhLU3dnTUNrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1ZlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJSE5sZERvZ0lDQnpaWFJVWVhOckxGeHVJQ0JqYkdWaGNqb2dZMnhsWVhKVVlYTnJYRzU5T3lJc0luWmhjaUIwYjBsdWRHVm5aWElnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjYmlBZ0xDQnRZWGdnSUNBZ0lDQWdQU0JOWVhSb0xtMWhlRnh1SUNBc0lHMXBiaUFnSUNBZ0lDQTlJRTFoZEdndWJXbHVPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwYm1SbGVDd2diR1Z1WjNSb0tYdGNiaUFnYVc1a1pYZ2dQU0IwYjBsdWRHVm5aWElvYVc1a1pYZ3BPMXh1SUNCeVpYUjFjbTRnYVc1a1pYZ2dQQ0F3SUQ4Z2JXRjRLR2x1WkdWNElDc2diR1Z1WjNSb0xDQXdLU0E2SUcxcGJpaHBibVJsZUN3Z2JHVnVaM1JvS1R0Y2JuMDdJaXdpTHk4Z055NHhMalFnVkc5SmJuUmxaMlZ5WEc1MllYSWdZMlZwYkNBZ1BTQk5ZWFJvTG1ObGFXeGNiaUFnTENCbWJHOXZjaUE5SUUxaGRHZ3VabXh2YjNJN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUdselRtRk9LR2wwSUQwZ0sybDBLU0EvSURBZ09pQW9hWFFnUGlBd0lEOGdabXh2YjNJZ09pQmpaV2xzS1NocGRDazdYRzU5T3lJc0lpOHZJSFJ2SUdsdVpHVjRaV1FnYjJKcVpXTjBMQ0IwYjA5aWFtVmpkQ0IzYVhSb0lHWmhiR3hpWVdOcklHWnZjaUJ1YjI0dFlYSnlZWGt0YkdsclpTQkZVek1nYzNSeWFXNW5jMXh1ZG1GeUlFbFBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwYjJKcVpXTjBKeWxjYmlBZ0xDQmtaV1pwYm1Wa0lEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWbWFXNWxaQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJKVDJKcVpXTjBLR1JsWm1sdVpXUW9hWFFwS1R0Y2JuMDdJaXdpTHk4Z055NHhMakUxSUZSdlRHVnVaM1JvWEc1MllYSWdkRzlKYm5SbFoyVnlJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzUwWldkbGNpY3BYRzRnSUN3Z2JXbHVJQ0FnSUNBZ0lEMGdUV0YwYUM1dGFXNDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlHbDBJRDRnTUNBL0lHMXBiaWgwYjBsdWRHVm5aWElvYVhRcExDQXdlREZtWm1abVptWm1abVptWm1abUtTQTZJREE3SUM4dklIQnZkeWd5TENBMU15a2dMU0F4SUQwOUlEa3dNRGN4T1RreU5UUTNOREE1T1RGY2JuMDdJaXdpTHk4Z055NHhMakV6SUZSdlQySnFaV04wS0dGeVozVnRaVzUwS1Z4dWRtRnlJR1JsWm1sdVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQ2hrWldacGJtVmtLR2wwS1NrN1hHNTlPeUlzSWk4dklEY3VNUzR4SUZSdlVISnBiV2wwYVhabEtHbHVjSFYwSUZzc0lGQnlaV1psY25KbFpGUjVjR1ZkS1Z4dWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5azdYRzR2THlCcGJuTjBaV0ZrSUc5bUlIUm9aU0JGVXpZZ2MzQmxZeUIyWlhKemFXOXVMQ0IzWlNCa2FXUnVKM1FnYVcxd2JHVnRaVzUwSUVCQWRHOVFjbWx0YVhScGRtVWdZMkZ6WlZ4dUx5OGdZVzVrSUhSb1pTQnpaV052Ym1RZ1lYSm5kVzFsYm5RZ0xTQm1iR0ZuSUMwZ2NISmxabVZ5Y21Wa0lIUjVjR1VnYVhNZ1lTQnpkSEpwYm1kY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXNJRk1wZTF4dUlDQnBaaWdoYVhOUFltcGxZM1FvYVhRcEtYSmxkSFZ5YmlCcGREdGNiaUFnZG1GeUlHWnVMQ0IyWVd3N1hHNGdJR2xtS0ZNZ0ppWWdkSGx3Wlc5bUlDaG1iaUE5SUdsMExuUnZVM1J5YVc1bktTQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDRnBjMDlpYW1WamRDaDJZV3dnUFNCbWJpNWpZV3hzS0dsMEtTa3BjbVYwZFhKdUlIWmhiRHRjYmlBZ2FXWW9kSGx3Wlc5bUlDaG1iaUE5SUdsMExuWmhiSFZsVDJZcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1SUNCcFppZ2hVeUFtSmlCMGVYQmxiMllnS0dadUlEMGdhWFF1ZEc5VGRISnBibWNwSUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnSVdselQySnFaV04wS0haaGJDQTlJR1p1TG1OaGJHd29hWFFwS1NseVpYUjFjbTRnZG1Gc08xeHVJQ0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0pEWVc0bmRDQmpiMjUyWlhKMElHOWlhbVZqZENCMGJ5QndjbWx0YVhScGRtVWdkbUZzZFdWY0lpazdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm1sbUtISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrcGUxeHVJQ0IyWVhJZ1RFbENVa0ZTV1NBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQWdJQ3dnWjJ4dlltRnNJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUNBZ0xDQm1ZV2xzY3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1Z4dUlDQWdJQ3dnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUNBZ0xDQWtkSGx3WldRZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRIbHdaV1FuS1Z4dUlDQWdJQ3dnSkdKMVptWmxjaUFnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXSjFabVpsY2ljcFhHNGdJQ0FnTENCamRIZ2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTNSNEp5bGNiaUFnSUNBc0lHRnVTVzV6ZEdGdVkyVWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYRzRnSUNBZ0xDQndjbTl3WlhKMGVVUmxjMk1nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZeWNwWEc0Z0lDQWdMQ0JvYVdSbElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcFhHNGdJQ0FnTENCeVpXUmxabWx1WlVGc2JDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVV0WVd4c0p5bGNiaUFnSUNBc0lHbHpTVzUwWldkbGNpQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXBiblJsWjJWeUp5bGNiaUFnSUNBc0lIUnZTVzUwWldkbGNpQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiblJsWjJWeUp5bGNiaUFnSUNBc0lIUnZUR1Z1WjNSb0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktWeHVJQ0FnSUN3Z2RHOUpibVJsZUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHVaR1Y0SnlsY2JpQWdJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHVJQ0FnSUN3Z2FHRnpJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUNBZ0xDQnpZVzFsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyRnRaUzEyWVd4MVpTY3BYRzRnSUNBZ0xDQmpiR0Z6YzI5bUlDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ0FnTENCcGMwOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQWdJQ3dnYVhOQmNuSmhlVWwwWlhJZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFdGeWNtRjVMV2wwWlhJbktWeHVJQ0FnSUN3Z1kzSmxZWFJsSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFqY21WaGRHVW5LVnh1SUNBZ0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBZ0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVKeWt1Wmx4dUlDQWdJQ3dnYVhOSmRHVnlZV0pzWlNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZZMjl5WlM1cGN5MXBkR1Z5WVdKc1pTY3BYRzRnSUNBZ0xDQm5aWFJKZEdWeVJtNGdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlFuS1Z4dUlDQWdJQ3dnZFdsa0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1ZwWkNjcFhHNGdJQ0FnTENCM2EzTWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5bGNiaUFnSUNBc0lHTnlaV0YwWlVGeWNtRjVUV1YwYUc5a0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzF0WlhSb2IyUnpKeWxjYmlBZ0lDQXNJR055WldGMFpVRnljbUY1U1c1amJIVmtaWE1nUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxcGJtTnNkV1JsY3ljcFhHNGdJQ0FnTENCemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNCbFkybGxjeTFqYjI1emRISjFZM1J2Y2ljcFhHNGdJQ0FnTENCQmNuSmhlVWwwWlhKaGRHOXljeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlsY3pZdVlYSnlZWGt1YVhSbGNtRjBiM0luS1Z4dUlDQWdJQ3dnU1hSbGNtRjBiM0p6SUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhKaGRHOXljeWNwWEc0Z0lDQWdMQ0FrYVhSbGNrUmxkR1ZqZENBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pYUmxZM1FuS1Z4dUlDQWdJQ3dnYzJWMFUzQmxZMmxsY3lBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM05sZEMxemNHVmphV1Z6SnlsY2JpQWdJQ0FzSUdGeWNtRjVSbWxzYkNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMW1hV3hzSnlsY2JpQWdJQ0FzSUdGeWNtRjVRMjl3ZVZkcGRHaHBiaUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMWpiM0I1TFhkcGRHaHBiaWNwWEc0Z0lDQWdMQ0FrUkZBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0lDQXNJQ1JIVDFCRUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0pFUlFMbVpjYmlBZ0lDQXNJR2RQVUVRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1IwOVFSQzVtWEc0Z0lDQWdMQ0JTWVc1blpVVnljbTl5SUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTGxKaGJtZGxSWEp5YjNKY2JpQWdJQ0FzSUZSNWNHVkZjbkp2Y2lBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVZIbHdaVVZ5Y205eVhHNGdJQ0FnTENCVmFXNTBPRUZ5Y21GNUlDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xsVnBiblE0UVhKeVlYbGNiaUFnSUNBc0lFRlNVa0ZaWDBKVlJrWkZVaUFnSUNBZ0lDQWdQU0FuUVhKeVlYbENkV1ptWlhJblhHNGdJQ0FnTENCVFNFRlNSVVJmUWxWR1JrVlNJQ0FnSUNBZ0lEMGdKMU5vWVhKbFpDY2dLeUJCVWxKQldWOUNWVVpHUlZKY2JpQWdJQ0FzSUVKWlZFVlRYMUJGVWw5RlRFVk5SVTVVSUNBZ1BTQW5RbGxVUlZOZlVFVlNYMFZNUlUxRlRsUW5YRzRnSUNBZ0xDQlFVazlVVDFSWlVFVWdJQ0FnSUNBZ0lDQWdJRDBnSjNCeWIzUnZkSGx3WlNkY2JpQWdJQ0FzSUVGeWNtRjVVSEp2ZEc4Z0lDQWdJQ0FnSUNBZ1BTQkJjbkpoZVZ0UVVrOVVUMVJaVUVWZFhHNGdJQ0FnTENBa1FYSnlZWGxDZFdabVpYSWdJQ0FnSUNBZ0lEMGdKR0oxWm1abGNpNUJjbkpoZVVKMVptWmxjbHh1SUNBZ0lDd2dKRVJoZEdGV2FXVjNJQ0FnSUNBZ0lDQWdJQ0E5SUNSaWRXWm1aWEl1UkdGMFlWWnBaWGRjYmlBZ0lDQXNJR0Z5Y21GNVJtOXlSV0ZqYUNBZ0lDQWdJQ0FnUFNCamNtVmhkR1ZCY25KaGVVMWxkR2h2WkNnd0tWeHVJQ0FnSUN3Z1lYSnlZWGxHYVd4MFpYSWdJQ0FnSUNBZ0lDQTlJR055WldGMFpVRnljbUY1VFdWMGFHOWtLRElwWEc0Z0lDQWdMQ0JoY25KaGVWTnZiV1VnSUNBZ0lDQWdJQ0FnSUQwZ1kzSmxZWFJsUVhKeVlYbE5aWFJvYjJRb015bGNiaUFnSUNBc0lHRnljbUY1UlhabGNua2dJQ0FnSUNBZ0lDQWdQU0JqY21WaGRHVkJjbkpoZVUxbGRHaHZaQ2cwS1Z4dUlDQWdJQ3dnWVhKeVlYbEdhVzVrSUNBZ0lDQWdJQ0FnSUNBOUlHTnlaV0YwWlVGeWNtRjVUV1YwYUc5a0tEVXBYRzRnSUNBZ0xDQmhjbkpoZVVacGJtUkpibVJsZUNBZ0lDQWdJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTmlsY2JpQWdJQ0FzSUdGeWNtRjVTVzVqYkhWa1pYTWdJQ0FnSUNBZ1BTQmpjbVZoZEdWQmNuSmhlVWx1WTJ4MVpHVnpLSFJ5ZFdVcFhHNGdJQ0FnTENCaGNuSmhlVWx1WkdWNFQyWWdJQ0FnSUNBZ0lEMGdZM0psWVhSbFFYSnlZWGxKYm1Oc2RXUmxjeWhtWVd4elpTbGNiaUFnSUNBc0lHRnljbUY1Vm1Gc2RXVnpJQ0FnSUNBZ0lDQWdQU0JCY25KaGVVbDBaWEpoZEc5eWN5NTJZV3gxWlhOY2JpQWdJQ0FzSUdGeWNtRjVTMlY1Y3lBZ0lDQWdJQ0FnSUNBZ1BTQkJjbkpoZVVsMFpYSmhkRzl5Y3k1clpYbHpYRzRnSUNBZ0xDQmhjbkpoZVVWdWRISnBaWE1nSUNBZ0lDQWdJRDBnUVhKeVlYbEpkR1Z5WVhSdmNuTXVaVzUwY21sbGMxeHVJQ0FnSUN3Z1lYSnlZWGxNWVhOMFNXNWtaWGhQWmlBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1YkdGemRFbHVaR1Y0VDJaY2JpQWdJQ0FzSUdGeWNtRjVVbVZrZFdObElDQWdJQ0FnSUNBZ1BTQkJjbkpoZVZCeWIzUnZMbkpsWkhWalpWeHVJQ0FnSUN3Z1lYSnlZWGxTWldSMVkyVlNhV2RvZENBZ0lDQTlJRUZ5Y21GNVVISnZkRzh1Y21Wa2RXTmxVbWxuYUhSY2JpQWdJQ0FzSUdGeWNtRjVTbTlwYmlBZ0lDQWdJQ0FnSUNBZ1BTQkJjbkpoZVZCeWIzUnZMbXB2YVc1Y2JpQWdJQ0FzSUdGeWNtRjVVMjl5ZENBZ0lDQWdJQ0FnSUNBZ1BTQkJjbkpoZVZCeWIzUnZMbk52Y25SY2JpQWdJQ0FzSUdGeWNtRjVVMnhwWTJVZ0lDQWdJQ0FnSUNBZ1BTQkJjbkpoZVZCeWIzUnZMbk5zYVdObFhHNGdJQ0FnTENCaGNuSmhlVlJ2VTNSeWFXNW5JQ0FnSUNBZ0lEMGdRWEp5WVhsUWNtOTBieTUwYjFOMGNtbHVaMXh1SUNBZ0lDd2dZWEp5WVhsVWIweHZZMkZzWlZOMGNtbHVaeUE5SUVGeWNtRjVVSEp2ZEc4dWRHOU1iMk5oYkdWVGRISnBibWRjYmlBZ0lDQXNJRWxVUlZKQlZFOVNJQ0FnSUNBZ0lDQWdJQ0FnUFNCM2EzTW9KMmwwWlhKaGRHOXlKeWxjYmlBZ0lDQXNJRlJCUnlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCM2EzTW9KM1J2VTNSeWFXNW5WR0ZuSnlsY2JpQWdJQ0FzSUZSWlVFVkVYME5QVGxOVVVsVkRWRTlTSUNBZ1BTQjFhV1FvSjNSNWNHVmtYMk52Ym5OMGNuVmpkRzl5SnlsY2JpQWdJQ0FzSUVSRlJsOURUMDVUVkZKVlExUlBVaUFnSUNBZ1BTQjFhV1FvSjJSbFpsOWpiMjV6ZEhKMVkzUnZjaWNwWEc0Z0lDQWdMQ0JCVEV4ZlEwOU9VMVJTVlVOVVQxSlRJQ0FnSUQwZ0pIUjVjR1ZrTGtOUFRsTlVVbHh1SUNBZ0lDd2dWRmxRUlVSZlFWSlNRVmtnSUNBZ0lDQWdJQ0E5SUNSMGVYQmxaQzVVV1ZCRlJGeHVJQ0FnSUN3Z1ZrbEZWeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJQ1IwZVhCbFpDNVdTVVZYWEc0Z0lDQWdMQ0JYVWs5T1IxOU1SVTVIVkVnZ0lDQWdJQ0FnSUQwZ0oxZHliMjVuSUd4bGJtZDBhQ0VuTzF4dVhHNGdJSFpoY2lBa2JXRndJRDBnWTNKbFlYUmxRWEp5WVhsTlpYUm9iMlFvTVN3Z1puVnVZM1JwYjI0b1R5d2diR1Z1WjNSb0tYdGNiaUFnSUNCeVpYUjFjbTRnWVd4c2IyTmhkR1VvYzNCbFkybGxjME52Ym5OMGNuVmpkRzl5S0U4c0lFOWJSRVZHWDBOUFRsTlVVbFZEVkU5U1hTa3NJR3hsYm1kMGFDazdYRzRnSUgwcE8xeHVYRzRnSUhaaGNpQk1TVlJVVEVWZlJVNUVTVUZPSUQwZ1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb2JtVjNJRlZwYm5ReE5rRnljbUY1S0ZzeFhTa3VZblZtWm1WeUtWc3dYU0E5UFQwZ01UdGNiaUFnZlNrN1hHNWNiaUFnZG1GeUlFWlBVa05GUkY5VFJWUWdQU0FoSVZWcGJuUTRRWEp5WVhrZ0ppWWdJU0ZWYVc1ME9FRnljbUY1VzFCU1QxUlBWRmxRUlYwdWMyVjBJQ1ltSUdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdibVYzSUZWcGJuUTRRWEp5WVhrb01Ta3VjMlYwS0h0OUtUdGNiaUFnZlNrN1hHNWNiaUFnZG1GeUlITjBjbWxqZEZSdlRHVnVaM1JvSUQwZ1puVnVZM1JwYjI0b2FYUXNJRk5CVFVVcGUxeHVJQ0FnSUdsbUtHbDBJRDA5UFNCMWJtUmxabWx1WldRcGRHaHliM2NnVkhsd1pVVnljbTl5S0ZkU1QwNUhYMHhGVGtkVVNDazdYRzRnSUNBZ2RtRnlJRzUxYldKbGNpQTlJQ3RwZEZ4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNocGRDazdYRzRnSUNBZ2FXWW9VMEZOUlNBbUppQWhjMkZ0WlNodWRXMWlaWElzSUd4bGJtZDBhQ2twZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOU1SVTVIVkVncE8xeHVJQ0FnSUhKbGRIVnliaUJzWlc1bmRHZzdYRzRnSUgwN1hHNWNiaUFnZG1GeUlIUnZUMlptYzJWMElEMGdablZ1WTNScGIyNG9hWFFzSUVKWlZFVlRLWHRjYmlBZ0lDQjJZWElnYjJabWMyVjBJRDBnZEc5SmJuUmxaMlZ5S0dsMEtUdGNiaUFnSUNCcFppaHZabVp6WlhRZ1BDQXdJSHg4SUc5bVpuTmxkQ0FsSUVKWlZFVlRLWFJvY205M0lGSmhibWRsUlhKeWIzSW9KMWR5YjI1bklHOW1abk5sZENFbktUdGNiaUFnSUNCeVpYUjFjbTRnYjJabWMyVjBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQjJZV3hwWkdGMFpTQTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdJQ0JwWmlocGMwOWlhbVZqZENocGRDa2dKaVlnVkZsUVJVUmZRVkpTUVZrZ2FXNGdhWFFwY21WMGRYSnVJR2wwTzF4dUlDQWdJSFJvY205M0lGUjVjR1ZGY25KdmNpaHBkQ0FySUNjZ2FYTWdibTkwSUdFZ2RIbHdaV1FnWVhKeVlYa2hKeWs3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJR0ZzYkc5allYUmxJRDBnWm5WdVkzUnBiMjRvUXl3Z2JHVnVaM1JvS1h0Y2JpQWdJQ0JwWmlnaEtHbHpUMkpxWldOMEtFTXBJQ1ltSUZSWlVFVkVYME5QVGxOVVVsVkRWRTlTSUdsdUlFTXBLWHRjYmlBZ0lDQWdJSFJvY205M0lGUjVjR1ZGY25KdmNpZ25TWFFnYVhNZ2JtOTBJR0VnZEhsd1pXUWdZWEp5WVhrZ1kyOXVjM1J5ZFdOMGIzSWhKeWs3WEc0Z0lDQWdmU0J5WlhSMWNtNGdibVYzSUVNb2JHVnVaM1JvS1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnYzNCbFkybGxjMFp5YjIxTWFYTjBJRDBnWm5WdVkzUnBiMjRvVHl3Z2JHbHpkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHWnliMjFNYVhOMEtITndaV05wWlhORGIyNXpkSEoxWTNSdmNpaFBMQ0JQVzBSRlJsOURUMDVUVkZKVlExUlBVbDBwTENCc2FYTjBLVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdabkp2YlV4cGMzUWdQU0JtZFc1amRHbHZiaWhETENCc2FYTjBLWHRjYmlBZ0lDQjJZWElnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCc2FYTjBMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnlaWE4xYkhRZ1BTQmhiR3h2WTJGMFpTaERMQ0JzWlc1bmRHZ3BPMXh1SUNBZ0lIZG9hV3hsS0d4bGJtZDBhQ0ErSUdsdVpHVjRLWEpsYzNWc2RGdHBibVJsZUYwZ1BTQnNhWE4wVzJsdVpHVjRLeXRkTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdGa1pFZGxkSFJsY2lBOUlHWjFibU4wYVc5dUtHbDBMQ0JyWlhrc0lHbHVkR1Z5Ym1Gc0tYdGNiaUFnSUNCa1VDaHBkQ3dnYTJWNUxDQjdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2RHaHBjeTVmWkZ0cGJuUmxjbTVoYkYwN0lIMTlLVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdKR1p5YjIwZ1BTQm1kVzVqZEdsdmJpQm1jbTl0S0hOdmRYSmpaU0F2S2l3Z2JXRndabTRzSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUhaaGNpQlBJQ0FnSUNBZ0lEMGdkRzlQWW1wbFkzUW9jMjkxY21ObEtWeHVJQ0FnSUNBZ0xDQmhUR1Z1SUNBZ0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnRZWEJtYmlBZ0lEMGdZVXhsYmlBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDd2diV0Z3Y0dsdVp5QTlJRzFoY0dadUlDRTlQU0IxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ3dnYVhSbGNrWnVJQ0E5SUdkbGRFbDBaWEpHYmloUEtWeHVJQ0FnSUNBZ0xDQnBMQ0JzWlc1bmRHZ3NJSFpoYkhWbGN5d2djbVZ6ZFd4MExDQnpkR1Z3TENCcGRHVnlZWFJ2Y2p0Y2JpQWdJQ0JwWmlocGRHVnlSbTRnSVQwZ2RXNWtaV1pwYm1Wa0lDWW1JQ0ZwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1h0Y2JpQWdJQ0FnSUdadmNpaHBkR1Z5WVhSdmNpQTlJR2wwWlhKR2JpNWpZV3hzS0U4cExDQjJZV3gxWlhNZ1BTQmJYU3dnYVNBOUlEQTdJQ0VvYzNSbGNDQTlJR2wwWlhKaGRHOXlMbTVsZUhRb0tTa3VaRzl1WlRzZ2FTc3JLWHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVnpMbkIxYzJnb2MzUmxjQzUyWVd4MVpTazdYRzRnSUNBZ0lDQjlJRThnUFNCMllXeDFaWE03WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LRzFoY0hCcGJtY2dKaVlnWVV4bGJpQStJRElwYldGd1ptNGdQU0JqZEhnb2JXRndabTRzSUdGeVozVnRaVzUwYzFzeVhTd2dNaWs3WEc0Z0lDQWdabTl5S0drZ1BTQXdMQ0JzWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2hQTG14bGJtZDBhQ2tzSUhKbGMzVnNkQ0E5SUdGc2JHOWpZWFJsS0hSb2FYTXNJR3hsYm1kMGFDazdJR3hsYm1kMGFDQStJR2s3SUdrckt5bDdYRzRnSUNBZ0lDQnlaWE4xYkhSYmFWMGdQU0J0WVhCd2FXNW5JRDhnYldGd1ptNG9UMXRwWFN3Z2FTa2dPaUJQVzJsZE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5TzF4dVhHNGdJSFpoY2lBa2IyWWdQU0JtZFc1amRHbHZiaUJ2WmlndktpNHVMbWwwWlcxektpOHBlMXh1SUNBZ0lIWmhjaUJwYm1SbGVDQWdQU0F3WEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnY21WemRXeDBJRDBnWVd4c2IyTmhkR1VvZEdocGN5d2diR1Z1WjNSb0tUdGNiaUFnSUNCM2FHbHNaU2hzWlc1bmRHZ2dQaUJwYm1SbGVDbHlaWE4xYkhSYmFXNWtaWGhkSUQwZ1lYSm5kVzFsYm5SelcybHVaR1Y0S3l0ZE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwN1hHNWNiaUFnTHk4Z2FVOVRJRk5oWm1GeWFTQTJMbmdnWm1GcGJITWdhR1Z5WlZ4dUlDQjJZWElnVkU5ZlRFOURRVXhGWDBKVlJ5QTlJQ0VoVldsdWREaEJjbkpoZVNBbUppQm1ZV2xzY3lobWRXNWpkR2x2YmlncGV5QmhjbkpoZVZSdlRHOWpZV3hsVTNSeWFXNW5MbU5oYkd3b2JtVjNJRlZwYm5RNFFYSnlZWGtvTVNrcE95QjlLVHRjYmx4dUlDQjJZWElnSkhSdlRHOWpZV3hsVTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRnZEc5TWIyTmhiR1ZUZEhKcGJtY29LWHRjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGxVYjB4dlkyRnNaVk4wY21sdVp5NWhjSEJzZVNoVVQxOU1UME5CVEVWZlFsVkhJRDhnWVhKeVlYbFRiR2xqWlM1allXeHNLSFpoYkdsa1lYUmxLSFJvYVhNcEtTQTZJSFpoYkdsa1lYUmxLSFJvYVhNcExDQmhjbWQxYldWdWRITXBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQndjbTkwYnlBOUlIdGNiaUFnSUNCamIzQjVWMmwwYUdsdU9pQm1kVzVqZEdsdmJpQmpiM0I1VjJsMGFHbHVLSFJoY21kbGRDd2djM1JoY25RZ0x5b3NJR1Z1WkNBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxEYjNCNVYybDBhR2x1TG1OaGJHd29kbUZzYVdSaGRHVW9kR2hwY3lrc0lIUmhjbWRsZEN3Z2MzUmhjblFzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeUlEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUdWMlpYSjVPaUJtZFc1amRHbHZiaUJsZG1WeWVTaGpZV3hzWW1GamEyWnVJQzhxTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVVYyWlhKNUtIWmhiR2xrWVhSbEtIUm9hWE1wTENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQm1hV3hzT2lCbWRXNWpkR2x2YmlCbWFXeHNLSFpoYkhWbElDOHFMQ0J6ZEdGeWRDd2daVzVrSUNvdktYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1Um1sc2JDNWhjSEJzZVNoMllXeHBaR0YwWlNoMGFHbHpLU3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1pwYkhSbGNqb2dablZ1WTNScGIyNGdabWxzZEdWeUtHTmhiR3hpWVdOclptNGdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhOd1pXTnBaWE5HY205dFRHbHpkQ2gwYUdsekxDQmhjbkpoZVVacGJIUmxjaWgyWVd4cFpHRjBaU2gwYUdsektTd2dZMkZzYkdKaFkydG1iaXhjYmlBZ0lDQWdJQ0FnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRcEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUdacGJtUTZJR1oxYm1OMGFXOXVJR1pwYm1Rb2NISmxaR2xqWVhSbElDOHFMQ0IwYUdselFYSm5JQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVVWnBibVFvZG1Gc2FXUmhkR1VvZEdocGN5a3NJSEJ5WldScFkyRjBaU3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWm1sdVpFbHVaR1Y0T2lCbWRXNWpkR2x2YmlCbWFXNWtTVzVrWlhnb2NISmxaR2xqWVhSbElDOHFMQ0IwYUdselFYSm5JQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVVWnBibVJKYm1SbGVDaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z2NISmxaR2xqWVhSbExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQm1iM0pGWVdOb09pQm1kVzVqZEdsdmJpQm1iM0pGWVdOb0tHTmhiR3hpWVdOclptNGdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ1lYSnlZWGxHYjNKRllXTm9LSFpoYkdsa1lYUmxLSFJvYVhNcExDQmpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JwYm1SbGVFOW1PaUJtZFc1amRHbHZiaUJwYm1SbGVFOW1LSE5sWVhKamFFVnNaVzFsYm5RZ0x5b3NJR1p5YjIxSmJtUmxlQ0FxTHlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhKeVlYbEpibVJsZUU5bUtIWmhiR2xrWVhSbEtIUm9hWE1wTENCelpXRnlZMmhGYkdWdFpXNTBMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JwYm1Oc2RXUmxjem9nWm5WdVkzUnBiMjRnYVc1amJIVmtaWE1vYzJWaGNtTm9SV3hsYldWdWRDQXZLaXdnWm5KdmJVbHVaR1Y0SUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVWx1WTJ4MVpHVnpLSFpoYkdsa1lYUmxLSFJvYVhNcExDQnpaV0Z5WTJoRmJHVnRaVzUwTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUNBZ2ZTeGNiaUFnSUNCcWIybHVPaUJtZFc1amRHbHZiaUJxYjJsdUtITmxjR0Z5WVhSdmNpbDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVVwdmFXNHVZWEJ3Ykhrb2RtRnNhV1JoZEdVb2RHaHBjeWtzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzWVhOMFNXNWtaWGhQWmpvZ1puVnVZM1JwYjI0Z2JHRnpkRWx1WkdWNFQyWW9jMlZoY21Ob1JXeGxiV1Z1ZENBdktpd2dabkp2YlVsdVpHVjRJQ292S1hzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVUR0Z6ZEVsdVpHVjRUMll1WVhCd2JIa29kbUZzYVdSaGRHVW9kR2hwY3lrc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2ZTeGNiaUFnSUNCdFlYQTZJR1oxYm1OMGFXOXVJRzFoY0NodFlYQm1iaUF2S2l3Z2RHaHBjMEZ5WnlBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z0pHMWhjQ2gyWVd4cFpHRjBaU2gwYUdsektTd2diV0Z3Wm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lISmxaSFZqWlRvZ1puVnVZM1JwYjI0Z2NtVmtkV05sS0dOaGJHeGlZV05yWm00Z0x5b3NJR2x1YVhScFlXeFdZV3gxWlNBcUx5bDdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ0lDQWdJSEpsZEhWeWJpQmhjbkpoZVZKbFpIVmpaUzVoY0hCc2VTaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOUxGeHVJQ0FnSUhKbFpIVmpaVkpwWjJoME9pQm1kVzVqZEdsdmJpQnlaV1IxWTJWU2FXZG9kQ2hqWVd4c1ltRmphMlp1SUM4cUxDQnBibWwwYVdGc1ZtRnNkV1VnS2k4cGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxTWldSMVkyVlNhV2RvZEM1aGNIQnNlU2gyWVd4cFpHRjBaU2gwYUdsektTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lISmxkbVZ5YzJVNklHWjFibU4wYVc5dUlISmxkbVZ5YzJVb0tYdGNiaUFnSUNBZ0lIWmhjaUIwYUdGMElDQWdQU0IwYUdselhHNGdJQ0FnSUNBZ0lDd2diR1Z1WjNSb0lEMGdkbUZzYVdSaGRHVW9kR2hoZENrdWJHVnVaM1JvWEc0Z0lDQWdJQ0FnSUN3Z2JXbGtaR3hsSUQwZ1RXRjBhQzVtYkc5dmNpaHNaVzVuZEdnZ0x5QXlLVnh1SUNBZ0lDQWdJQ0FzSUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FnSUNBZ0xDQjJZV3gxWlR0Y2JpQWdJQ0FnSUhkb2FXeGxLR2x1WkdWNElEd2diV2xrWkd4bEtYdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ0lDQWdJQ0FnSUNBOUlIUm9ZWFJiYVc1a1pYaGRPMXh1SUNBZ0lDQWdJQ0IwYUdGMFcybHVaR1Y0S3l0ZElEMGdkR2hoZEZzdExXeGxibWQwYUYwN1hHNGdJQ0FnSUNBZ0lIUm9ZWFJiYkdWdVozUm9YU0FnUFNCMllXeDFaVHRjYmlBZ0lDQWdJSDBnY21WMGRYSnVJSFJvWVhRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6YjIxbE9pQm1kVzVqZEdsdmJpQnpiMjFsS0dOaGJHeGlZV05yWm00Z0x5b3NJSFJvYVhOQmNtY2dLaThwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVUyOXRaU2gyWVd4cFpHRjBaU2gwYUdsektTd2dZMkZzYkdKaFkydG1iaXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzI5eWREb2dablZ1WTNScGIyNGdjMjl5ZENoamIyMXdZWEpsWm00cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVVMjl5ZEM1allXeHNLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmpiMjF3WVhKbFptNHBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MzVmlZWEp5WVhrNklHWjFibU4wYVc5dUlITjFZbUZ5Y21GNUtHSmxaMmx1TENCbGJtUXBlMXh1SUNBZ0lDQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhaaGJHbGtZWFJsS0hSb2FYTXBYRzRnSUNBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnVHk1c1pXNW5kR2hjYmlBZ0lDQWdJQ0FnTENBa1ltVm5hVzRnUFNCMGIwbHVaR1Y0S0dKbFoybHVMQ0JzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUFvYzNCbFkybGxjME52Ym5OMGNuVmpkRzl5S0U4c0lFOWJSRVZHWDBOUFRsTlVVbFZEVkU5U1hTa3BLRnh1SUNBZ0lDQWdJQ0JQTG1KMVptWmxjaXhjYmlBZ0lDQWdJQ0FnVHk1aWVYUmxUMlptYzJWMElDc2dKR0psWjJsdUlDb2dUeTVDV1ZSRlUxOVFSVkpmUlV4RlRVVk9WQ3hjYmlBZ0lDQWdJQ0FnZEc5TVpXNW5kR2dvS0dWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2JHVnVaM1JvSURvZ2RHOUpibVJsZUNobGJtUXNJR3hsYm1kMGFDa3BJQzBnSkdKbFoybHVLVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnZG1GeUlDUnpiR2xqWlNBOUlHWjFibU4wYVc5dUlITnNhV05sS0hOMFlYSjBMQ0JsYm1RcGUxeHVJQ0FnSUhKbGRIVnliaUJ6Y0dWamFXVnpSbkp2YlV4cGMzUW9kR2hwY3l3Z1lYSnlZWGxUYkdsalpTNWpZV3hzS0haaGJHbGtZWFJsS0hSb2FYTXBMQ0J6ZEdGeWRDd2daVzVrS1NrN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUNSelpYUWdQU0JtZFc1amRHbHZiaUJ6WlhRb1lYSnlZWGxNYVd0bElDOHFMQ0J2Wm1aelpYUWdLaThwZTF4dUlDQWdJSFpoYkdsa1lYUmxLSFJvYVhNcE8xeHVJQ0FnSUhaaGNpQnZabVp6WlhRZ1BTQjBiMDltWm5ObGRDaGhjbWQxYldWdWRITmJNVjBzSURFcFhHNGdJQ0FnSUNBc0lHeGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJSE55WXlBZ0lDQTlJSFJ2VDJKcVpXTjBLR0Z5Y21GNVRHbHJaU2xjYmlBZ0lDQWdJQ3dnYkdWdUlDQWdJRDBnZEc5TVpXNW5kR2dvYzNKakxteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ01EdGNiaUFnSUNCcFppaHNaVzRnS3lCdlptWnpaWFFnUGlCc1pXNW5kR2dwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOU1SVTVIVkVncE8xeHVJQ0FnSUhkb2FXeGxLR2x1WkdWNElEd2diR1Z1S1hSb2FYTmJiMlptYzJWMElDc2dhVzVrWlhoZElEMGdjM0pqVzJsdVpHVjRLeXRkTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUFrYVhSbGNtRjBiM0p6SUQwZ2UxeHVJQ0FnSUdWdWRISnBaWE02SUdaMWJtTjBhVzl1SUdWdWRISnBaWE1vS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVVVnVkSEpwWlhNdVkyRnNiQ2gyWVd4cFpHRjBaU2gwYUdsektTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCclpYbHpPaUJtZFc1amRHbHZiaUJyWlhsektDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxMWlhsekxtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ2RtRnNkV1Z6T2lCbWRXNWpkR2x2YmlCMllXeDFaWE1vS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVWWmhiSFZsY3k1allXeHNLSFpoYkdsa1lYUmxLSFJvYVhNcEtUdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdselZFRkpibVJsZUNBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2EyVjVLWHRjYmlBZ0lDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2RHRnlaMlYwS1Z4dUlDQWdJQ0FnSmlZZ2RHRnlaMlYwVzFSWlVFVkVYMEZTVWtGWlhWeHVJQ0FnSUNBZ0ppWWdkSGx3Wlc5bUlHdGxlU0FoUFNBbmMzbHRZbTlzSjF4dUlDQWdJQ0FnSmlZZ2EyVjVJR2x1SUhSaGNtZGxkRnh1SUNBZ0lDQWdKaVlnVTNSeWFXNW5LQ3RyWlhrcElEMDlJRk4wY21sdVp5aHJaWGtwTzF4dUlDQjlPMXh1SUNCMllYSWdKR2RsZEVSbGMyTWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kR0Z5WjJWMExDQnJaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQnBjMVJCU1c1a1pYZ29kR0Z5WjJWMExDQnJaWGtnUFNCMGIxQnlhVzFwZEdsMlpTaHJaWGtzSUhSeWRXVXBLVnh1SUNBZ0lDQWdQeUJ3Y205d1pYSjBlVVJsYzJNb01pd2dkR0Z5WjJWMFcydGxlVjBwWEc0Z0lDQWdJQ0E2SUdkUFVFUW9kR0Z5WjJWMExDQnJaWGtwTzF4dUlDQjlPMXh1SUNCMllYSWdKSE5sZEVSbGMyTWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lHdGxlU3dnWkdWell5bDdYRzRnSUNBZ2FXWW9hWE5VUVVsdVpHVjRLSFJoY21kbGRDd2dhMlY1SUQwZ2RHOVFjbWx0YVhScGRtVW9hMlY1TENCMGNuVmxLU2xjYmlBZ0lDQWdJQ1ltSUdselQySnFaV04wS0dSbGMyTXBYRzRnSUNBZ0lDQW1KaUJvWVhNb1pHVnpZeXdnSjNaaGJIVmxKeWxjYmlBZ0lDQWdJQ1ltSUNGb1lYTW9aR1Z6WXl3Z0oyZGxkQ2NwWEc0Z0lDQWdJQ0FtSmlBaGFHRnpLR1JsYzJNc0lDZHpaWFFuS1Z4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nWVdSa0lIWmhiR2xrWVhScGIyNGdaR1Z6WTNKcGNIUnZjaUIzTDI4Z1kyRnNiR2x1WnlCaFkyTmxjM052Y25OY2JpQWdJQ0FnSUNZbUlDRmtaWE5qTG1OdmJtWnBaM1Z5WVdKc1pWeHVJQ0FnSUNBZ0ppWWdLQ0ZvWVhNb1pHVnpZeXdnSjNkeWFYUmhZbXhsSnlrZ2ZId2daR1Z6WXk1M2NtbDBZV0pzWlNsY2JpQWdJQ0FnSUNZbUlDZ2hhR0Z6S0dSbGMyTXNJQ2RsYm5WdFpYSmhZbXhsSnlrZ2ZId2daR1Z6WXk1bGJuVnRaWEpoWW14bEtWeHVJQ0FnSUNsN1hHNGdJQ0FnSUNCMFlYSm5aWFJiYTJWNVhTQTlJR1JsYzJNdWRtRnNkV1U3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR0Z5WjJWME8xeHVJQ0FnSUgwZ1pXeHpaU0J5WlhSMWNtNGdaRkFvZEdGeVoyVjBMQ0JyWlhrc0lHUmxjMk1wTzF4dUlDQjlPMXh1WEc0Z0lHbG1LQ0ZCVEV4ZlEwOU9VMVJTVlVOVVQxSlRLWHRjYmlBZ0lDQWtSMDlRUkM1bUlEMGdKR2RsZEVSbGMyTTdYRzRnSUNBZ0pFUlFMbVlnSUNBOUlDUnpaWFJFWlhOak8xeHVJQ0I5WEc1Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaFFVeE1YME5QVGxOVVVsVkRWRTlTVXl3Z0owOWlhbVZqZENjc0lIdGNiaUFnSUNCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k2SUNSblpYUkVaWE5qTEZ4dUlDQWdJR1JsWm1sdVpWQnliM0JsY25SNU9pQWdJQ0FnSUNBZ0lDQWdKSE5sZEVSbGMyTmNiaUFnZlNrN1hHNWNiaUFnYVdZb1ptRnBiSE1vWm5WdVkzUnBiMjRvS1hzZ1lYSnlZWGxVYjFOMGNtbHVaeTVqWVd4c0tIdDlLVHNnZlNrcGUxeHVJQ0FnSUdGeWNtRjVWRzlUZEhKcGJtY2dQU0JoY25KaGVWUnZURzlqWVd4bFUzUnlhVzVuSUQwZ1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVXB2YVc0dVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnSkZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVa0lEMGdjbVZrWldacGJtVkJiR3dvZTMwc0lIQnliM1J2S1R0Y2JpQWdjbVZrWldacGJtVkJiR3dvSkZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVa0xDQWthWFJsY21GMGIzSnpLVHRjYmlBZ2FHbGtaU2drVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRc0lFbFVSVkpCVkU5U0xDQWthWFJsY21GMGIzSnpMblpoYkhWbGN5azdYRzRnSUhKbFpHVm1hVzVsUVd4c0tDUlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxKQ3dnZTF4dUlDQWdJSE5zYVdObE9pQWdJQ0FnSUNBZ0lDQWtjMnhwWTJVc1hHNGdJQ0FnYzJWME9pQWdJQ0FnSUNBZ0lDQWdJQ1J6WlhRc1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJNklDQWdJR1oxYm1OMGFXOXVLQ2w3SUM4cUlHNXZiM0FnS2k4Z2ZTeGNiaUFnSUNCMGIxTjBjbWx1WnpvZ0lDQWdJQ0FnWVhKeVlYbFViMU4wY21sdVp5eGNiaUFnSUNCMGIweHZZMkZzWlZOMGNtbHVaem9nSkhSdlRHOWpZV3hsVTNSeWFXNW5YRzRnSUgwcE8xeHVJQ0JoWkdSSFpYUjBaWElvSkZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVa0xDQW5ZblZtWm1WeUp5d2dKMkluS1R0Y2JpQWdZV1JrUjJWMGRHVnlLQ1JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSkN3Z0oySjVkR1ZQWm1aelpYUW5MQ0FuYnljcE8xeHVJQ0JoWkdSSFpYUjBaWElvSkZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVa0xDQW5ZbmwwWlV4bGJtZDBhQ2NzSUNkc0p5azdYRzRnSUdGa1pFZGxkSFJsY2lna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJQ2RzWlc1bmRHZ25MQ0FuWlNjcE8xeHVJQ0JrVUNna1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTUXNJRlJCUnl3Z2UxeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJSFJvYVhOYlZGbFFSVVJmUVZKU1FWbGRPeUI5WEc0Z0lIMHBPMXh1WEc0Z0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpMQ0JDV1ZSRlV5d2dkM0poY0hCbGNpd2dRMHhCVFZCRlJDbDdYRzRnSUNBZ1EweEJUVkJGUkNBOUlDRWhRMHhCVFZCRlJEdGNiaUFnSUNCMllYSWdUa0ZOUlNBZ0lDQWdJQ0E5SUV0RldTQXJJQ2hEVEVGTlVFVkVJRDhnSjBOc1lXMXdaV1FuSURvZ0p5Y3BJQ3NnSjBGeWNtRjVKMXh1SUNBZ0lDQWdMQ0JKVTA1VVgxVkpUbFE0SUQwZ1RrRk5SU0FoUFNBblZXbHVkRGhCY25KaGVTZGNiaUFnSUNBZ0lDd2dSMFZVVkVWU0lDQWdJQ0E5SUNkblpYUW5JQ3NnUzBWWlhHNGdJQ0FnSUNBc0lGTkZWRlJGVWlBZ0lDQWdQU0FuYzJWMEp5QXJJRXRGV1Z4dUlDQWdJQ0FnTENCVWVYQmxaRUZ5Y21GNUlEMGdaMnh2WW1Gc1cwNUJUVVZkWEc0Z0lDQWdJQ0FzSUVKaGMyVWdJQ0FnSUNBZ1BTQlVlWEJsWkVGeWNtRjVJSHg4SUh0OVhHNGdJQ0FnSUNBc0lGUkJReUFnSUNBZ0lDQWdQU0JVZVhCbFpFRnljbUY1SUNZbUlHZGxkRkJ5YjNSdmRIbHdaVTltS0ZSNWNHVmtRWEp5WVhrcFhHNGdJQ0FnSUNBc0lFWlBVa05GUkNBZ0lDQWdQU0FoVkhsd1pXUkJjbkpoZVNCOGZDQWhKSFI1Y0dWa0xrRkNWbHh1SUNBZ0lDQWdMQ0JQSUNBZ0lDQWdJQ0FnSUQwZ2UzMWNiaUFnSUNBZ0lDd2dWSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU0E5SUZSNWNHVmtRWEp5WVhrZ0ppWWdWSGx3WldSQmNuSmhlVnRRVWs5VVQxUlpVRVZkTzF4dUlDQWdJSFpoY2lCblpYUjBaWElnUFNCbWRXNWpkR2x2YmloMGFHRjBMQ0JwYm1SbGVDbDdYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJSFJvWVhRdVgyUTdYRzRnSUNBZ0lDQnlaWFIxY200Z1pHRjBZUzUyVzBkRlZGUkZVbDBvYVc1a1pYZ2dLaUJDV1ZSRlV5QXJJR1JoZEdFdWJ5d2dURWxVVkV4RlgwVk9SRWxCVGlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0IyWVhJZ2MyVjBkR1Z5SUQwZ1puVnVZM1JwYjI0b2RHaGhkQ3dnYVc1a1pYZ3NJSFpoYkhWbEtYdGNiaUFnSUNBZ0lIWmhjaUJrWVhSaElEMGdkR2hoZEM1ZlpEdGNiaUFnSUNBZ0lHbG1LRU5NUVUxUVJVUXBkbUZzZFdVZ1BTQW9kbUZzZFdVZ1BTQk5ZWFJvTG5KdmRXNWtLSFpoYkhWbEtTa2dQQ0F3SUQ4Z01DQTZJSFpoYkhWbElENGdNSGhtWmlBL0lEQjRabVlnT2lCMllXeDFaU0FtSURCNFptWTdYRzRnSUNBZ0lDQmtZWFJoTG5aYlUwVlVWRVZTWFNocGJtUmxlQ0FxSUVKWlZFVlRJQ3NnWkdGMFlTNXZMQ0IyWVd4MVpTd2dURWxVVkV4RlgwVk9SRWxCVGlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0IyWVhJZ1lXUmtSV3hsYldWdWRDQTlJR1oxYm1OMGFXOXVLSFJvWVhRc0lHbHVaR1Y0S1h0Y2JpQWdJQ0FnSUdSUUtIUm9ZWFFzSUdsdVpHVjRMQ0I3WEc0Z0lDQWdJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJWMGRHVnlLSFJvYVhNc0lHbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGRIUmxjaWgwYUdsekxDQnBibVJsZUN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUIwY25WbFhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdsbUtFWlBVa05GUkNsN1hHNGdJQ0FnSUNCVWVYQmxaRUZ5Y21GNUlEMGdkM0poY0hCbGNpaG1kVzVqZEdsdmJpaDBhR0YwTENCa1lYUmhMQ0FrYjJabWMyVjBMQ0FrYkdWdVozUm9LWHRjYmlBZ0lDQWdJQ0FnWVc1SmJuTjBZVzVqWlNoMGFHRjBMQ0JVZVhCbFpFRnljbUY1TENCT1FVMUZMQ0FuWDJRbktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FnSUNBZ0lDQXNJRzltWm5ObGRDQTlJREJjYmlBZ0lDQWdJQ0FnSUNBc0lHSjFabVpsY2l3Z1lubDBaVXhsYm1kMGFDd2diR1Z1WjNSb0xDQnJiR0Z6Y3p0Y2JpQWdJQ0FnSUNBZ2FXWW9JV2x6VDJKcVpXTjBLR1JoZEdFcEtYdGNiaUFnSUNBZ0lDQWdJQ0JzWlc1bmRHZ2dJQ0FnSUQwZ2MzUnlhV04wVkc5TVpXNW5kR2dvWkdGMFlTd2dkSEoxWlNsY2JpQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9JRDBnYkdWdVozUm9JQ29nUWxsVVJWTTdYRzRnSUNBZ0lDQWdJQ0FnWW5WbVptVnlJQ0FnSUNBOUlHNWxkeUFrUVhKeVlYbENkV1ptWlhJb1lubDBaVXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWhrWVhSaElHbHVjM1JoYm1ObGIyWWdKRUZ5Y21GNVFuVm1abVZ5SUh4OElDaHJiR0Z6Y3lBOUlHTnNZWE56YjJZb1pHRjBZU2twSUQwOUlFRlNVa0ZaWDBKVlJrWkZVaUI4ZkNCcmJHRnpjeUE5UFNCVFNFRlNSVVJmUWxWR1JrVlNLWHRjYmlBZ0lDQWdJQ0FnSUNCaWRXWm1aWElnUFNCa1lYUmhPMXh1SUNBZ0lDQWdJQ0FnSUc5bVpuTmxkQ0E5SUhSdlQyWm1jMlYwS0NSdlptWnpaWFFzSUVKWlZFVlRLVHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdKR3hsYmlBOUlHUmhkR0V1WW5sMFpVeGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWdrYkdWdVozUm9JRDA5UFNCMWJtUmxabWx1WldRcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb0pHeGxiaUFsSUVKWlZFVlRLWFJvY205M0lGSmhibWRsUlhKeWIzSW9WMUpQVGtkZlRFVk9SMVJJS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2dnUFNBa2JHVnVJQzBnYjJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9ZbmwwWlV4bGJtZDBhQ0E4SURBcGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlNUlU1SFZFZ3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9JRDBnZEc5TVpXNW5kR2dvSkd4bGJtZDBhQ2tnS2lCQ1dWUkZVenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LR0o1ZEdWTVpXNW5kR2dnS3lCdlptWnpaWFFnUGlBa2JHVnVLWFJvY205M0lGSmhibWRsUlhKeWIzSW9WMUpQVGtkZlRFVk9SMVJJS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYkdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUNBdklFSlpWRVZUTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb1ZGbFFSVVJmUVZKU1FWa2dhVzRnWkdGMFlTbDdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1p5YjIxTWFYTjBLRlI1Y0dWa1FYSnlZWGtzSUdSaGRHRXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFrWm5KdmJTNWpZV3hzS0ZSNWNHVmtRWEp5WVhrc0lHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHaHBaR1VvZEdoaGRDd2dKMTlrSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJR0k2SUdKMVptWmxjaXhjYmlBZ0lDQWdJQ0FnSUNCdk9pQnZabVp6WlhRc1hHNGdJQ0FnSUNBZ0lDQWdiRG9nWW5sMFpVeGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQmxPaUJzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnZGpvZ2JtVjNJQ1JFWVhSaFZtbGxkeWhpZFdabVpYSXBYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU2hwYm1SbGVDQThJR3hsYm1kMGFDbGhaR1JGYkdWdFpXNTBLSFJvWVhRc0lHbHVaR1Y0S3lzcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxJRDBnVkhsd1pXUkJjbkpoZVZ0UVVrOVVUMVJaVUVWZElEMGdZM0psWVhSbEtDUlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxKQ2s3WEc0Z0lDQWdJQ0JvYVdSbEtGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVXNJQ2RqYjI1emRISjFZM1J2Y2ljc0lGUjVjR1ZrUVhKeVlYa3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppZ2hKR2wwWlhKRVpYUmxZM1FvWm5WdVkzUnBiMjRvYVhSbGNpbDdYRzRnSUNBZ0lDQXZMeUJXT0NCM2IzSnJjeUIzYVhSb0lHbDBaWEpoZEc5eWN5d2dZblYwSUdaaGFXeHpJR2x1SUcxaGJua2diM1JvWlhJZ1kyRnpaWE5jYmlBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2WTI5a1pTNW5iMjluYkdVdVkyOXRMM0F2ZGpndmFYTnpkV1Z6TDJSbGRHRnBiRDlwWkQwME5UVXlYRzRnSUNBZ0lDQnVaWGNnVkhsd1pXUkJjbkpoZVNodWRXeHNLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTF1WlhkY2JpQWdJQ0FnSUc1bGR5QlVlWEJsWkVGeWNtRjVLR2wwWlhJcE95QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxXNWxkMXh1SUNBZ0lIMHNJSFJ5ZFdVcEtYdGNiaUFnSUNBZ0lGUjVjR1ZrUVhKeVlYa2dQU0IzY21Gd2NHVnlLR1oxYm1OMGFXOXVLSFJvWVhRc0lHUmhkR0VzSUNSdlptWnpaWFFzSUNSc1pXNW5kR2dwZTF4dUlDQWdJQ0FnSUNCaGJrbHVjM1JoYm1ObEtIUm9ZWFFzSUZSNWNHVmtRWEp5WVhrc0lFNUJUVVVwTzF4dUlDQWdJQ0FnSUNCMllYSWdhMnhoYzNNN1hHNGdJQ0FnSUNBZ0lDOHZJR0IzYzJBZ2JXOWtkV3hsSUdKMVp5d2dkR1Z0Y0c5eVlYSnBiSGtnY21WdGIzWmxJSFpoYkdsa1lYUnBiMjRnYkdWdVozUm9JR1p2Y2lCVmFXNTBPRUZ5Y21GNVhHNGdJQ0FnSUNBZ0lDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkzWldKemIyTnJaWFJ6TDNkekwzQjFiR3d2TmpRMVhHNGdJQ0FnSUNBZ0lHbG1LQ0ZwYzA5aWFtVmpkQ2hrWVhSaEtTbHlaWFIxY200Z2JtVjNJRUpoYzJVb2MzUnlhV04wVkc5TVpXNW5kR2dvWkdGMFlTd2dTVk5PVkY5VlNVNVVPQ2twTzF4dUlDQWdJQ0FnSUNCcFppaGtZWFJoSUdsdWMzUmhibU5sYjJZZ0pFRnljbUY1UW5WbVptVnlJSHg4SUNocmJHRnpjeUE5SUdOc1lYTnpiMllvWkdGMFlTa3BJRDA5SUVGU1VrRlpYMEpWUmtaRlVpQjhmQ0JyYkdGemN5QTlQU0JUU0VGU1JVUmZRbFZHUmtWU0tYdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdKR3hsYm1kMGFDQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JRzVsZHlCQ1lYTmxLR1JoZEdFc0lIUnZUMlptYzJWMEtDUnZabVp6WlhRc0lFSlpWRVZUS1N3Z0pHeGxibWQwYUNsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nSkc5bVpuTmxkQ0FoUFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2JtVjNJRUpoYzJVb1pHRjBZU3dnZEc5UFptWnpaWFFvSkc5bVpuTmxkQ3dnUWxsVVJWTXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRzVsZHlCQ1lYTmxLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtS0ZSWlVFVkVYMEZTVWtGWklHbHVJR1JoZEdFcGNtVjBkWEp1SUdaeWIyMU1hWE4wS0ZSNWNHVmtRWEp5WVhrc0lHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSkdaeWIyMHVZMkZzYkNoVWVYQmxaRUZ5Y21GNUxDQmtZWFJoS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ1lYSnlZWGxHYjNKRllXTm9LRlJCUXlBaFBUMGdSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxJRDhnWjA5UVRpaENZWE5sS1M1amIyNWpZWFFvWjA5UVRpaFVRVU1wS1NBNklHZFBVRTRvUW1GelpTa3NJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJQ0FnSUNBZ0lHbG1LQ0VvYTJWNUlHbHVJRlI1Y0dWa1FYSnlZWGtwS1docFpHVW9WSGx3WldSQmNuSmhlU3dnYTJWNUxDQkNZWE5sVzJ0bGVWMHBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0JVZVhCbFpFRnljbUY1VzFCU1QxUlBWRmxRUlYwZ1BTQlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxPMXh1SUNBZ0lDQWdhV1lvSVV4SlFsSkJVbGtwVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpQTlJRlI1Y0dWa1FYSnlZWGs3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUFrYm1GMGFYWmxTWFJsY21GMGIzSWdJQ0E5SUZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dWYlNWUkZVa0ZVVDFKZFhHNGdJQ0FnSUNBc0lFTlBVbEpGUTFSZlNWUkZVbDlPUVUxRklEMGdJU0VrYm1GMGFYWmxTWFJsY21GMGIzSWdKaVlnS0NSdVlYUnBkbVZKZEdWeVlYUnZjaTV1WVcxbElEMDlJQ2QyWVd4MVpYTW5JSHg4SUNSdVlYUnBkbVZKZEdWeVlYUnZjaTV1WVcxbElEMDlJSFZ1WkdWbWFXNWxaQ2xjYmlBZ0lDQWdJQ3dnSkdsMFpYSmhkRzl5SUNBZ0lDQWdJQ0FnUFNBa2FYUmxjbUYwYjNKekxuWmhiSFZsY3p0Y2JpQWdJQ0JvYVdSbEtGUjVjR1ZrUVhKeVlYa3NJRlJaVUVWRVgwTlBUbE5VVWxWRFZFOVNMQ0IwY25WbEtUdGNiaUFnSUNCb2FXUmxLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VzSUZSWlVFVkVYMEZTVWtGWkxDQk9RVTFGS1R0Y2JpQWdJQ0JvYVdSbEtGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVXNJRlpKUlZjc0lIUnlkV1VwTzF4dUlDQWdJR2hwWkdVb1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTd2dSRVZHWDBOUFRsTlVVbFZEVkU5U0xDQlVlWEJsWkVGeWNtRjVLVHRjYmx4dUlDQWdJR2xtS0VOTVFVMVFSVVFnUHlCdVpYY2dWSGx3WldSQmNuSmhlU2d4S1Z0VVFVZGRJQ0U5SUU1QlRVVWdPaUFoS0ZSQlJ5QnBiaUJVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsS1NsN1hHNGdJQ0FnSUNCa1VDaFVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxMQ0JVUVVjc0lIdGNiaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1RrRk5SVHNnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVDF0T1FVMUZYU0E5SUZSNWNHVmtRWEp5WVhrN1hHNWNiaUFnSUNBa1pYaHdiM0owS0NSbGVIQnZjblF1UnlBcklDUmxlSEJ2Y25RdVZ5QXJJQ1JsZUhCdmNuUXVSaUFxSUNoVWVYQmxaRUZ5Y21GNUlDRTlJRUpoYzJVcExDQlBLVHRjYmx4dUlDQWdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0JPUVUxRkxDQjdYRzRnSUNBZ0lDQkNXVlJGVTE5UVJWSmZSVXhGVFVWT1ZEb2dRbGxVUlZNc1hHNGdJQ0FnSUNCbWNtOXRPaUFrWm5KdmJTeGNiaUFnSUNBZ0lHOW1PaUFrYjJaY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUdsbUtDRW9RbGxVUlZOZlVFVlNYMFZNUlUxRlRsUWdhVzRnVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNrcGFHbGtaU2hVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsTENCQ1dWUkZVMTlRUlZKZlJVeEZUVVZPVkN3Z1FsbFVSVk1wTzF4dVhHNGdJQ0FnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUU1QlRVVXNJSEJ5YjNSdktUdGNibHh1SUNBZ0lITmxkRk53WldOcFpYTW9Ua0ZOUlNrN1hHNWNiaUFnSUNBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJRVpQVWtORlJGOVRSVlFzSUU1QlRVVXNJSHR6WlhRNklDUnpaWFI5S1R0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJVU5QVWxKRlExUmZTVlJGVWw5T1FVMUZMQ0JPUVUxRkxDQWthWFJsY21GMGIzSnpLVHRjYmx4dUlDQWdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY2dJVDBnWVhKeVlYbFViMU4wY21sdVp5a3NJRTVCVFVVc0lIdDBiMU4wY21sdVp6b2dZWEp5WVhsVWIxTjBjbWx1WjMwcE8xeHVYRzRnSUNBZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUJtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdibVYzSUZSNWNHVmtRWEp5WVhrb01Ta3VjMnhwWTJVb0tUdGNiaUFnSUNCOUtTd2dUa0ZOUlN3Z2UzTnNhV05sT2lBa2MyeHBZMlY5S1R0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLR1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1d6RXNJREpkTG5SdlRHOWpZV3hsVTNSeWFXNW5LQ2tnSVQwZ2JtVjNJRlI1Y0dWa1FYSnlZWGtvV3pFc0lESmRLUzUwYjB4dlkyRnNaVk4wY21sdVp5Z3BYRzRnSUNBZ2ZTa2dmSHdnSVdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsTG5SdlRHOWpZV3hsVTNSeWFXNW5MbU5oYkd3b1d6RXNJREpkS1R0Y2JpQWdJQ0I5S1Nrc0lFNUJUVVVzSUh0MGIweHZZMkZzWlZOMGNtbHVaem9nSkhSdlRHOWpZV3hsVTNSeWFXNW5mU2s3WEc1Y2JpQWdJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0JEVDFKU1JVTlVYMGxVUlZKZlRrRk5SU0EvSUNSdVlYUnBkbVZKZEdWeVlYUnZjaUE2SUNScGRHVnlZWFJ2Y2p0Y2JpQWdJQ0JwWmlnaFRFbENVa0ZTV1NBbUppQWhRMDlTVWtWRFZGOUpWRVZTWDA1QlRVVXBhR2xrWlNoVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbExDQkpWRVZTUVZSUFVpd2dKR2wwWlhKaGRHOXlLVHRjYmlBZ2ZUdGNibjBnWld4elpTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtDbDdJQzhxSUdWdGNIUjVJQ292SUgwN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR2RzYjJKaGJDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQkVSVk5EVWtsUVZFOVNVeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlsY2JpQWdMQ0JNU1VKU1FWSlpJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQXNJQ1IwZVhCbFpDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUW5LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcFhHNGdJQ3dnY21Wa1pXWnBibVZCYkd3Z0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlMxaGJHd25LVnh1SUNBc0lHWmhhV3h6SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUdGdVNXNXpkR0Z1WTJVZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRhVzV6ZEdGdVkyVW5LVnh1SUNBc0lIUnZTVzUwWldkbGNpQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1Z4dUlDQXNJR2RQVUU0Z0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0c0bktTNW1YRzRnSUN3Z1pGQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtWEc0Z0lDd2dZWEp5WVhsR2FXeHNJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMW1hV3hzSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlsY2JpQWdMQ0JCVWxKQldWOUNWVVpHUlZJZ0lDQTlJQ2RCY25KaGVVSjFabVpsY2lkY2JpQWdMQ0JFUVZSQlgxWkpSVmNnSUNBZ0lDQTlJQ2RFWVhSaFZtbGxkeWRjYmlBZ0xDQlFVazlVVDFSWlVFVWdJQ0FnSUNBOUlDZHdjbTkwYjNSNWNHVW5YRzRnSUN3Z1YxSlBUa2RmVEVWT1IxUklJQ0FnUFNBblYzSnZibWNnYkdWdVozUm9JU2RjYmlBZ0xDQlhVazlPUjE5SlRrUkZXQ0FnSUNBOUlDZFhjbTl1WnlCcGJtUmxlQ0VuWEc0Z0lDd2dKRUZ5Y21GNVFuVm1abVZ5SUNBZ1BTQm5iRzlpWVd4YlFWSlNRVmxmUWxWR1JrVlNYVnh1SUNBc0lDUkVZWFJoVm1sbGR5QWdJQ0FnSUQwZ1oyeHZZbUZzVzBSQlZFRmZWa2xGVjExY2JpQWdMQ0JOWVhSb0lDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNU5ZWFJvWEc0Z0lDd2djR0Z5YzJWSmJuUWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dWNHRnljMlZKYm5SY2JpQWdMQ0JTWVc1blpVVnljbTl5SUNBZ0lDQTlJR2RzYjJKaGJDNVNZVzVuWlVWeWNtOXlYRzRnSUN3Z1NXNW1hVzVwZEhrZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1U1c1bWFXNXBkSGxjYmlBZ0xDQkNZWE5sUW5WbVptVnlJQ0FnSUNBOUlDUkJjbkpoZVVKMVptWmxjbHh1SUNBc0lHRmljeUFnSUNBZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVoWW5OY2JpQWdMQ0J3YjNjZ0lDQWdJQ0FnSUNBZ0lDQTlJRTFoZEdndWNHOTNYRzRnSUN3Z2JXbHVJQ0FnSUNBZ0lDQWdJQ0FnUFNCTllYUm9MbTFwYmx4dUlDQXNJR1pzYjI5eUlDQWdJQ0FnSUNBZ0lEMGdUV0YwYUM1bWJHOXZjbHh1SUNBc0lHeHZaeUFnSUNBZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVzYjJkY2JpQWdMQ0JNVGpJZ0lDQWdJQ0FnSUNBZ0lDQTlJRTFoZEdndVRFNHlYRzRnSUN3Z1FsVkdSa1ZTSUNBZ0lDQWdJQ0FnUFNBblluVm1abVZ5SjF4dUlDQXNJRUpaVkVWZlRFVk9SMVJJSUNBZ0lEMGdKMko1ZEdWTVpXNW5kR2duWEc0Z0lDd2dRbGxVUlY5UFJrWlRSVlFnSUNBZ1BTQW5ZbmwwWlU5bVpuTmxkQ2RjYmlBZ0xDQWtRbFZHUmtWU0lDQWdJQ0FnSUNBOUlFUkZVME5TU1ZCVVQxSlRJRDhnSjE5aUp5QTZJRUpWUmtaRlVseHVJQ0FzSUNSTVJVNUhWRWdnSUNBZ0lDQWdJRDBnUkVWVFExSkpVRlJQVWxNZ1B5QW5YMnduSURvZ1FsbFVSVjlNUlU1SFZFaGNiaUFnTENBa1QwWkdVMFZVSUNBZ0lDQWdJQ0E5SUVSRlUwTlNTVkJVVDFKVElEOGdKMTl2SnlBNklFSlpWRVZmVDBaR1UwVlVPMXh1WEc0dkx5QkpSVVZGTnpVMElHTnZiblpsY25OcGIyNXpJR0poYzJWa0lHOXVJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzltWlhKdmMzTXZhV1ZsWlRjMU5GeHVkbUZ5SUhCaFkydEpSVVZGTnpVMElEMGdablZ1WTNScGIyNG9kbUZzZFdVc0lHMU1aVzRzSUc1Q2VYUmxjeWw3WEc0Z0lIWmhjaUJpZFdabVpYSWdQU0JCY25KaGVTaHVRbmwwWlhNcFhHNGdJQ0FnTENCbFRHVnVJQ0FnUFNCdVFubDBaWE1nS2lBNElDMGdiVXhsYmlBdElERmNiaUFnSUNBc0lHVk5ZWGdnSUNBOUlDZ3hJRHc4SUdWTVpXNHBJQzBnTVZ4dUlDQWdJQ3dnWlVKcFlYTWdJRDBnWlUxaGVDQStQaUF4WEc0Z0lDQWdMQ0J5ZENBZ0lDQWdQU0J0VEdWdUlEMDlQU0F5TXlBL0lIQnZkeWd5TENBdE1qUXBJQzBnY0c5M0tESXNJQzAzTnlrZ09pQXdYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0xDQnpJQ0FnSUNBZ1BTQjJZV3gxWlNBOElEQWdmSHdnZG1Gc2RXVWdQVDA5SURBZ0ppWWdNU0F2SUhaaGJIVmxJRHdnTUNBL0lERWdPaUF3WEc0Z0lDQWdMQ0JsTENCdExDQmpPMXh1SUNCMllXeDFaU0E5SUdGaWN5aDJZV3gxWlNsY2JpQWdhV1lvZG1Gc2RXVWdJVDBnZG1Gc2RXVWdmSHdnZG1Gc2RXVWdQVDA5SUVsdVptbHVhWFI1S1h0Y2JpQWdJQ0J0SUQwZ2RtRnNkV1VnSVQwZ2RtRnNkV1VnUHlBeElEb2dNRHRjYmlBZ0lDQmxJRDBnWlUxaGVEdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQmxJRDBnWm14dmIzSW9iRzluS0haaGJIVmxLU0F2SUV4T01pazdYRzRnSUNBZ2FXWW9kbUZzZFdVZ0tpQW9ZeUE5SUhCdmR5Z3lMQ0F0WlNrcElEd2dNU2w3WEc0Z0lDQWdJQ0JsTFMwN1hHNGdJQ0FnSUNCaklDbzlJREk3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LR1VnS3lCbFFtbGhjeUErUFNBeEtYdGNiaUFnSUNBZ0lIWmhiSFZsSUNzOUlISjBJQzhnWXp0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZzZFdVZ0t6MGdjblFnS2lCd2IzY29NaXdnTVNBdElHVkNhV0Z6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lvZG1Gc2RXVWdLaUJqSUQ0OUlESXBlMXh1SUNBZ0lDQWdaU3NyTzF4dUlDQWdJQ0FnWXlBdlBTQXlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppaGxJQ3NnWlVKcFlYTWdQajBnWlUxaGVDbDdYRzRnSUNBZ0lDQnRJRDBnTUR0Y2JpQWdJQ0FnSUdVZ1BTQmxUV0Y0TzF4dUlDQWdJSDBnWld4elpTQnBaaWhsSUNzZ1pVSnBZWE1nUGowZ01TbDdYRzRnSUNBZ0lDQnRJRDBnS0haaGJIVmxJQ29nWXlBdElERXBJQ29nY0c5M0tESXNJRzFNWlc0cE8xeHVJQ0FnSUNBZ1pTQTlJR1VnS3lCbFFtbGhjenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JTQTlJSFpoYkhWbElDb2djRzkzS0RJc0lHVkNhV0Z6SUMwZ01Ta2dLaUJ3YjNjb01pd2diVXhsYmlrN1hHNGdJQ0FnSUNCbElEMGdNRHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdabTl5S0RzZ2JVeGxiaUErUFNBNE95QmlkV1ptWlhKYmFTc3JYU0E5SUcwZ0ppQXlOVFVzSUcwZ0x6MGdNalUyTENCdFRHVnVJQzA5SURncE8xeHVJQ0JsSUQwZ1pTQThQQ0J0VEdWdUlId2diVHRjYmlBZ1pVeGxiaUFyUFNCdFRHVnVPMXh1SUNCbWIzSW9PeUJsVEdWdUlENGdNRHNnWW5WbVptVnlXMmtySzEwZ1BTQmxJQ1lnTWpVMUxDQmxJQzg5SURJMU5pd2daVXhsYmlBdFBTQTRLVHRjYmlBZ1luVm1abVZ5V3kwdGFWMGdmRDBnY3lBcUlERXlPRHRjYmlBZ2NtVjBkWEp1SUdKMVptWmxjanRjYm4wN1hHNTJZWElnZFc1d1lXTnJTVVZGUlRjMU5DQTlJR1oxYm1OMGFXOXVLR0oxWm1abGNpd2diVXhsYml3Z2JrSjVkR1Z6S1h0Y2JpQWdkbUZ5SUdWTVpXNGdJRDBnYmtKNWRHVnpJQ29nT0NBdElHMU1aVzRnTFNBeFhHNGdJQ0FnTENCbFRXRjRJQ0E5SUNneElEdzhJR1ZNWlc0cElDMGdNVnh1SUNBZ0lDd2daVUpwWVhNZ1BTQmxUV0Y0SUQ0K0lERmNiaUFnSUNBc0lHNUNhWFJ6SUQwZ1pVeGxiaUF0SURkY2JpQWdJQ0FzSUdrZ0lDQWdJRDBnYmtKNWRHVnpJQzBnTVZ4dUlDQWdJQ3dnY3lBZ0lDQWdQU0JpZFdabVpYSmJhUzB0WFZ4dUlDQWdJQ3dnWlNBZ0lDQWdQU0J6SUNZZ01USTNYRzRnSUNBZ0xDQnRPMXh1SUNCeklENCtQU0EzTzF4dUlDQm1iM0lvT3lCdVFtbDBjeUErSURBN0lHVWdQU0JsSUNvZ01qVTJJQ3NnWW5WbVptVnlXMmxkTENCcExTMHNJRzVDYVhSeklDMDlJRGdwTzF4dUlDQnRJRDBnWlNBbUlDZ3hJRHc4SUMxdVFtbDBjeWtnTFNBeE8xeHVJQ0JsSUQ0K1BTQXRia0pwZEhNN1hHNGdJRzVDYVhSeklDczlJRzFNWlc0N1hHNGdJR1p2Y2lnN0lHNUNhWFJ6SUQ0Z01Ec2diU0E5SUcwZ0tpQXlOVFlnS3lCaWRXWm1aWEpiYVYwc0lHa3RMU3dnYmtKcGRITWdMVDBnT0NrN1hHNGdJR2xtS0dVZ1BUMDlJREFwZTF4dUlDQWdJR1VnUFNBeElDMGdaVUpwWVhNN1hHNGdJSDBnWld4elpTQnBaaWhsSUQwOVBTQmxUV0Y0S1h0Y2JpQWdJQ0J5WlhSMWNtNGdiU0EvSUU1aFRpQTZJSE1nUHlBdFNXNW1hVzVwZEhrZ09pQkpibVpwYm1sMGVUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnRJRDBnYlNBcklIQnZkeWd5TENCdFRHVnVLVHRjYmlBZ0lDQmxJRDBnWlNBdElHVkNhV0Z6TzF4dUlDQjlJSEpsZEhWeWJpQW9jeUEvSUMweElEb2dNU2tnS2lCdElDb2djRzkzS0RJc0lHVWdMU0J0VEdWdUtUdGNibjA3WEc1Y2JuWmhjaUIxYm5CaFkydEpNeklnUFNCbWRXNWpkR2x2YmloaWVYUmxjeWw3WEc0Z0lISmxkSFZ5YmlCaWVYUmxjMXN6WFNBOFBDQXlOQ0I4SUdKNWRHVnpXekpkSUR3OElERTJJSHdnWW5sMFpYTmJNVjBnUER3Z09DQjhJR0o1ZEdWeld6QmRPMXh1ZlR0Y2JuWmhjaUJ3WVdOclNUZ2dQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQmJhWFFnSmlBd2VHWm1YVHRjYm4wN1hHNTJZWElnY0dGamEwa3hOaUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRnRwZENBbUlEQjRabVlzSUdsMElENCtJRGdnSmlBd2VHWm1YVHRjYm4wN1hHNTJZWElnY0dGamEwa3pNaUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRnRwZENBbUlEQjRabVlzSUdsMElENCtJRGdnSmlBd2VHWm1MQ0JwZENBK1BpQXhOaUFtSURCNFptWXNJR2wwSUQ0K0lESTBJQ1lnTUhobVpsMDdYRzU5TzF4dWRtRnlJSEJoWTJ0R05qUWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQndZV05yU1VWRlJUYzFOQ2hwZEN3Z05USXNJRGdwTzF4dWZUdGNiblpoY2lCd1lXTnJSak15SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnY0dGamEwbEZSVVUzTlRRb2FYUXNJREl6TENBMEtUdGNibjA3WEc1Y2JuWmhjaUJoWkdSSFpYUjBaWElnUFNCbWRXNWpkR2x2YmloRExDQnJaWGtzSUdsdWRHVnlibUZzS1h0Y2JpQWdaRkFvUTF0UVVrOVVUMVJaVUVWZExDQnJaWGtzSUh0blpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUIwYUdselcybHVkR1Z5Ym1Gc1hUc2dmWDBwTzF4dWZUdGNibHh1ZG1GeUlHZGxkQ0E5SUdaMWJtTjBhVzl1S0hacFpYY3NJR0o1ZEdWekxDQnBibVJsZUN3Z2FYTk1hWFIwYkdWRmJtUnBZVzRwZTF4dUlDQjJZWElnYm5WdFNXNWtaWGdnUFNBcmFXNWtaWGhjYmlBZ0lDQXNJR2x1ZEVsdVpHVjRJRDBnZEc5SmJuUmxaMlZ5S0c1MWJVbHVaR1Y0S1R0Y2JpQWdhV1lvYm5WdFNXNWtaWGdnSVQwZ2FXNTBTVzVrWlhnZ2ZId2dhVzUwU1c1a1pYZ2dQQ0F3SUh4OElHbHVkRWx1WkdWNElDc2dZbmwwWlhNZ1BpQjJhV1YzV3lSTVJVNUhWRWhkS1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvVjFKUFRrZGZTVTVFUlZncE8xeHVJQ0IyWVhJZ2MzUnZjbVVnUFNCMmFXVjNXeVJDVlVaR1JWSmRMbDlpWEc0Z0lDQWdMQ0J6ZEdGeWRDQTlJR2x1ZEVsdVpHVjRJQ3NnZG1sbGQxc2tUMFpHVTBWVVhWeHVJQ0FnSUN3Z2NHRmpheUFnUFNCemRHOXlaUzV6YkdsalpTaHpkR0Z5ZEN3Z2MzUmhjblFnS3lCaWVYUmxjeWs3WEc0Z0lISmxkSFZ5YmlCcGMweHBkSFJzWlVWdVpHbGhiaUEvSUhCaFkyc2dPaUJ3WVdOckxuSmxkbVZ5YzJVb0tUdGNibjA3WEc1MllYSWdjMlYwSUQwZ1puVnVZM1JwYjI0b2RtbGxkeXdnWW5sMFpYTXNJR2x1WkdWNExDQmpiMjUyWlhKemFXOXVMQ0IyWVd4MVpTd2dhWE5NYVhSMGJHVkZibVJwWVc0cGUxeHVJQ0IyWVhJZ2JuVnRTVzVrWlhnZ1BTQXJhVzVrWlhoY2JpQWdJQ0FzSUdsdWRFbHVaR1Y0SUQwZ2RHOUpiblJsWjJWeUtHNTFiVWx1WkdWNEtUdGNiaUFnYVdZb2JuVnRTVzVrWlhnZ0lUMGdhVzUwU1c1a1pYZ2dmSHdnYVc1MFNXNWtaWGdnUENBd0lIeDhJR2x1ZEVsdVpHVjRJQ3NnWW5sMFpYTWdQaUIyYVdWM1d5Uk1SVTVIVkVoZEtYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb1YxSlBUa2RmU1U1RVJWZ3BPMXh1SUNCMllYSWdjM1J2Y21VZ1BTQjJhV1YzV3lSQ1ZVWkdSVkpkTGw5aVhHNGdJQ0FnTENCemRHRnlkQ0E5SUdsdWRFbHVaR1Y0SUNzZ2RtbGxkMXNrVDBaR1UwVlVYVnh1SUNBZ0lDd2djR0ZqYXlBZ1BTQmpiMjUyWlhKemFXOXVLQ3QyWVd4MVpTazdYRzRnSUdadmNpaDJZWElnYVNBOUlEQTdJR2tnUENCaWVYUmxjenNnYVNzcktYTjBiM0psVzNOMFlYSjBJQ3NnYVYwZ1BTQndZV05yVzJselRHbDBkR3hsUlc1a2FXRnVJRDhnYVNBNklHSjVkR1Z6SUMwZ2FTQXRJREZkTzF4dWZUdGNibHh1ZG1GeUlIWmhiR2xrWVhSbFFYSnlZWGxDZFdabVpYSkJjbWQxYldWdWRITWdQU0JtZFc1amRHbHZiaWgwYUdGMExDQnNaVzVuZEdncGUxeHVJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJQ1JCY25KaGVVSjFabVpsY2l3Z1FWSlNRVmxmUWxWR1JrVlNLVHRjYmlBZ2RtRnlJRzUxYldKbGNreGxibWQwYUNBOUlDdHNaVzVuZEdoY2JpQWdJQ0FzSUdKNWRHVk1aVzVuZEdnZ0lDQTlJSFJ2VEdWdVozUm9LRzUxYldKbGNreGxibWQwYUNrN1hHNGdJR2xtS0c1MWJXSmxja3hsYm1kMGFDQWhQU0JpZVhSbFRHVnVaM1JvS1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvVjFKUFRrZGZURVZPUjFSSUtUdGNiaUFnY21WMGRYSnVJR0o1ZEdWTVpXNW5kR2c3WEc1OU8xeHVYRzVwWmlnaEpIUjVjR1ZrTGtGQ1ZpbDdYRzRnSUNSQmNuSmhlVUoxWm1abGNpQTlJR1oxYm1OMGFXOXVJRUZ5Y21GNVFuVm1abVZ5S0d4bGJtZDBhQ2w3WEc0Z0lDQWdkbUZ5SUdKNWRHVk1aVzVuZEdnZ1BTQjJZV3hwWkdGMFpVRnljbUY1UW5WbVptVnlRWEpuZFcxbGJuUnpLSFJvYVhNc0lHeGxibWQwYUNrN1hHNGdJQ0FnZEdocGN5NWZZaUFnSUNBZ0lDQTlJR0Z5Y21GNVJtbHNiQzVqWVd4c0tFRnljbUY1S0dKNWRHVk1aVzVuZEdncExDQXdLVHRjYmlBZ0lDQjBhR2x6V3lSTVJVNUhWRWhkSUQwZ1lubDBaVXhsYm1kMGFEdGNiaUFnZlR0Y2JseHVJQ0FrUkdGMFlWWnBaWGNnUFNCbWRXNWpkR2x2YmlCRVlYUmhWbWxsZHloaWRXWm1aWElzSUdKNWRHVlBabVp6WlhRc0lHSjVkR1ZNWlc1bmRHZ3BlMXh1SUNBZ0lHRnVTVzV6ZEdGdVkyVW9kR2hwY3l3Z0pFUmhkR0ZXYVdWM0xDQkVRVlJCWDFaSlJWY3BPMXh1SUNBZ0lHRnVTVzV6ZEdGdVkyVW9ZblZtWm1WeUxDQWtRWEp5WVhsQ2RXWm1aWElzSUVSQlZFRmZWa2xGVnlrN1hHNGdJQ0FnZG1GeUlHSjFabVpsY2t4bGJtZDBhQ0E5SUdKMVptWmxjbHNrVEVWT1IxUklYVnh1SUNBZ0lDQWdMQ0J2Wm1aelpYUWdJQ0FnSUNBZ1BTQjBiMGx1ZEdWblpYSW9ZbmwwWlU5bVpuTmxkQ2s3WEc0Z0lDQWdhV1lvYjJabWMyVjBJRHdnTUNCOGZDQnZabVp6WlhRZ1BpQmlkV1ptWlhKTVpXNW5kR2dwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWduVjNKdmJtY2diMlptYzJWMElTY3BPMXh1SUNBZ0lHSjVkR1ZNWlc1bmRHZ2dQU0JpZVhSbFRHVnVaM1JvSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJpZFdabVpYSk1aVzVuZEdnZ0xTQnZabVp6WlhRZ09pQjBiMHhsYm1kMGFDaGllWFJsVEdWdVozUm9LVHRjYmlBZ0lDQnBaaWh2Wm1aelpYUWdLeUJpZVhSbFRHVnVaM1JvSUQ0Z1luVm1abVZ5VEdWdVozUm9LWFJvY205M0lGSmhibWRsUlhKeWIzSW9WMUpQVGtkZlRFVk9SMVJJS1R0Y2JpQWdJQ0IwYUdseld5UkNWVVpHUlZKZElEMGdZblZtWm1WeU8xeHVJQ0FnSUhSb2FYTmJKRTlHUmxORlZGMGdQU0J2Wm1aelpYUTdYRzRnSUNBZ2RHaHBjMXNrVEVWT1IxUklYU0E5SUdKNWRHVk1aVzVuZEdnN1hHNGdJSDA3WEc1Y2JpQWdhV1lvUkVWVFExSkpVRlJQVWxNcGUxeHVJQ0FnSUdGa1pFZGxkSFJsY2lna1FYSnlZWGxDZFdabVpYSXNJRUpaVkVWZlRFVk9SMVJJTENBblgyd25LVHRjYmlBZ0lDQmhaR1JIWlhSMFpYSW9KRVJoZEdGV2FXVjNMQ0JDVlVaR1JWSXNJQ2RmWWljcE8xeHVJQ0FnSUdGa1pFZGxkSFJsY2lna1JHRjBZVlpwWlhjc0lFSlpWRVZmVEVWT1IxUklMQ0FuWDJ3bktUdGNiaUFnSUNCaFpHUkhaWFIwWlhJb0pFUmhkR0ZXYVdWM0xDQkNXVlJGWDA5R1JsTkZWQ3dnSjE5dkp5azdYRzRnSUgxY2JseHVJQ0J5WldSbFptbHVaVUZzYkNna1JHRjBZVlpwWlhkYlVGSlBWRTlVV1ZCRlhTd2dlMXh1SUNBZ0lHZGxkRWx1ZERnNklHWjFibU4wYVc5dUlHZGxkRWx1ZERnb1lubDBaVTltWm5ObGRDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1oyVjBLSFJvYVhNc0lERXNJR0o1ZEdWUFptWnpaWFFwV3pCZElEdzhJREkwSUQ0K0lESTBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBWV2x1ZERnNklHWjFibU4wYVc5dUlHZGxkRlZwYm5RNEtHSjVkR1ZQWm1aelpYUXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHZGxkQ2gwYUdsekxDQXhMQ0JpZVhSbFQyWm1jMlYwS1Zzd1hUdGNiaUFnSUNCOUxGeHVJQ0FnSUdkbGRFbHVkREUyT2lCbWRXNWpkR2x2YmlCblpYUkpiblF4TmloaWVYUmxUMlptYzJWMElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdkbUZ5SUdKNWRHVnpJRDBnWjJWMEtIUm9hWE1zSURJc0lHSjVkR1ZQWm1aelpYUXNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0dKNWRHVnpXekZkSUR3OElEZ2dmQ0JpZVhSbGMxc3dYU2tnUER3Z01UWWdQajRnTVRZN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JuWlhSVmFXNTBNVFk2SUdaMWJtTjBhVzl1SUdkbGRGVnBiblF4TmloaWVYUmxUMlptYzJWMElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdkbUZ5SUdKNWRHVnpJRDBnWjJWMEtIUm9hWE1zSURJc0lHSjVkR1ZQWm1aelpYUXNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWW5sMFpYTmJNVjBnUER3Z09DQjhJR0o1ZEdWeld6QmRPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBTVzUwTXpJNklHWjFibU4wYVc5dUlHZGxkRWx1ZERNeUtHSjVkR1ZQWm1aelpYUWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkVzV3WVdOclNUTXlLR2RsZENoMGFHbHpMQ0EwTENCaWVYUmxUMlptYzJWMExDQmhjbWQxYldWdWRITmJNVjBwS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2RsZEZWcGJuUXpNam9nWm5WdVkzUnBiMjRnWjJWMFZXbHVkRE15S0dKNWRHVlBabVp6WlhRZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNXdZV05yU1RNeUtHZGxkQ2gwYUdsekxDQTBMQ0JpZVhSbFQyWm1jMlYwTENCaGNtZDFiV1Z1ZEhOYk1WMHBLU0ErUGo0Z01EdGNiaUFnSUNCOUxGeHVJQ0FnSUdkbGRFWnNiMkYwTXpJNklHWjFibU4wYVc5dUlHZGxkRVpzYjJGME16SW9ZbmwwWlU5bVpuTmxkQ0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxYm5CaFkydEpSVVZGTnpVMEtHZGxkQ2gwYUdsekxDQTBMQ0JpZVhSbFQyWm1jMlYwTENCaGNtZDFiV1Z1ZEhOYk1WMHBMQ0F5TXl3Z05DazdYRzRnSUNBZ2ZTeGNiaUFnSUNCblpYUkdiRzloZERZME9pQm1kVzVqZEdsdmJpQm5aWFJHYkc5aGREWTBLR0o1ZEdWUFptWnpaWFFnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1d1lXTnJTVVZGUlRjMU5DaG5aWFFvZEdocGN5d2dPQ3dnWW5sMFpVOW1abk5sZEN3Z1lYSm5kVzFsYm5Seld6RmRLU3dnTlRJc0lEZ3BPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBTVzUwT0RvZ1puVnVZM1JwYjI0Z2MyVjBTVzUwT0NoaWVYUmxUMlptYzJWMExDQjJZV3gxWlNsN1hHNGdJQ0FnSUNCelpYUW9kR2hwY3l3Z01Td2dZbmwwWlU5bVpuTmxkQ3dnY0dGamEwazRMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCelpYUlZhVzUwT0RvZ1puVnVZM1JwYjI0Z2MyVjBWV2x1ZERnb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVcGUxeHVJQ0FnSUNBZ2MyVjBLSFJvYVhNc0lERXNJR0o1ZEdWUFptWnpaWFFzSUhCaFkydEpPQ3dnZG1Gc2RXVXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBTVzUwTVRZNklHWjFibU4wYVc5dUlITmxkRWx1ZERFMktHSjVkR1ZQWm1aelpYUXNJSFpoYkhWbElDOHFMQ0JzYVhSMGJHVkZibVJwWVc0Z0tpOHBlMXh1SUNBZ0lDQWdjMlYwS0hSb2FYTXNJRElzSUdKNWRHVlBabVp6WlhRc0lIQmhZMnRKTVRZc0lIWmhiSFZsTENCaGNtZDFiV1Z1ZEhOYk1sMHBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2MyVjBWV2x1ZERFMk9pQm1kVzVqZEdsdmJpQnpaWFJWYVc1ME1UWW9ZbmwwWlU5bVpuTmxkQ3dnZG1Gc2RXVWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0J6WlhRb2RHaHBjeXdnTWl3Z1lubDBaVTltWm5ObGRDd2djR0ZqYTBreE5pd2dkbUZzZFdVc0lHRnlaM1Z0Wlc1MGMxc3lYU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJKYm5Rek1qb2dablZ1WTNScGIyNGdjMlYwU1c1ME16SW9ZbmwwWlU5bVpuTmxkQ3dnZG1Gc2RXVWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0J6WlhRb2RHaHBjeXdnTkN3Z1lubDBaVTltWm5ObGRDd2djR0ZqYTBrek1pd2dkbUZzZFdVc0lHRnlaM1Z0Wlc1MGMxc3lYU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJWYVc1ME16STZJR1oxYm1OMGFXOXVJSE5sZEZWcGJuUXpNaWhpZVhSbFQyWm1jMlYwTENCMllXeDFaU0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhObGRDaDBhR2x6TENBMExDQmllWFJsVDJabWMyVjBMQ0J3WVdOclNUTXlMQ0IyWVd4MVpTd2dZWEpuZFcxbGJuUnpXekpkS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEVac2IyRjBNekk2SUdaMWJtTjBhVzl1SUhObGRFWnNiMkYwTXpJb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVZ0x5b3NJR3hwZEhSc1pVVnVaR2xoYmlBcUx5bDdYRzRnSUNBZ0lDQnpaWFFvZEdocGN5d2dOQ3dnWW5sMFpVOW1abk5sZEN3Z2NHRmphMFl6TWl3Z2RtRnNkV1VzSUdGeVozVnRaVzUwYzFzeVhTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCelpYUkdiRzloZERZME9pQm1kVzVqZEdsdmJpQnpaWFJHYkc5aGREWTBLR0o1ZEdWUFptWnpaWFFzSUhaaGJIVmxJQzhxTENCc2FYUjBiR1ZGYm1ScFlXNGdLaThwZTF4dUlDQWdJQ0FnYzJWMEtIUm9hWE1zSURnc0lHSjVkR1ZQWm1aelpYUXNJSEJoWTJ0R05qUXNJSFpoYkhWbExDQmhjbWQxYldWdWRITmJNbDBwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5SUdWc2MyVWdlMXh1SUNCcFppZ2habUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCdVpYY2dKRUZ5Y21GNVFuVm1abVZ5T3lBZ0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MXVaWGRjYmlBZ2ZTa2dmSHdnSVdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdibVYzSUNSQmNuSmhlVUoxWm1abGNpZ3VOU2s3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0Ym1WM1hHNGdJSDBwS1h0Y2JpQWdJQ0FrUVhKeVlYbENkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpQkJjbkpoZVVKMVptWmxjaWhzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJDWVhObFFuVm1abVZ5S0haaGJHbGtZWFJsUVhKeVlYbENkV1ptWlhKQmNtZDFiV1Z1ZEhNb2RHaHBjeXdnYkdWdVozUm9LU2s3WEc0Z0lDQWdmVHRjYmlBZ0lDQjJZWElnUVhKeVlYbENkV1ptWlhKUWNtOTBieUE5SUNSQmNuSmhlVUoxWm1abGNsdFFVazlVVDFSWlVFVmRJRDBnUW1GelpVSjFabVpsY2x0UVVrOVVUMVJaVUVWZE8xeHVJQ0FnSUdadmNpaDJZWElnYTJWNWN5QTlJR2RQVUU0b1FtRnpaVUoxWm1abGNpa3NJR29nUFNBd0xDQnJaWGs3SUd0bGVYTXViR1Z1WjNSb0lENGdhanNnS1h0Y2JpQWdJQ0FnSUdsbUtDRW9LR3RsZVNBOUlHdGxlWE5iYWlzclhTa2dhVzRnSkVGeWNtRjVRblZtWm1WeUtTbG9hV1JsS0NSQmNuSmhlVUoxWm1abGNpd2dhMlY1TENCQ1lYTmxRblZtWm1WeVcydGxlVjBwTzF4dUlDQWdJSDA3WEc0Z0lDQWdhV1lvSVV4SlFsSkJVbGtwUVhKeVlYbENkV1ptWlhKUWNtOTBieTVqYjI1emRISjFZM1J2Y2lBOUlDUkJjbkpoZVVKMVptWmxjanRjYmlBZ2ZWeHVJQ0F2THlCcFQxTWdVMkZtWVhKcElEY3VlQ0JpZFdkY2JpQWdkbUZ5SUhacFpYY2dQU0J1WlhjZ0pFUmhkR0ZXYVdWM0tHNWxkeUFrUVhKeVlYbENkV1ptWlhJb01pa3BYRzRnSUNBZ0xDQWtjMlYwU1c1ME9DQTlJQ1JFWVhSaFZtbGxkMXRRVWs5VVQxUlpVRVZkTG5ObGRFbHVkRGc3WEc0Z0lIWnBaWGN1YzJWMFNXNTBPQ2d3TENBeU1UUTNORGd6TmpRNEtUdGNiaUFnZG1sbGR5NXpaWFJKYm5RNEtERXNJREl4TkRjME9ETTJORGtwTzF4dUlDQnBaaWgyYVdWM0xtZGxkRWx1ZERnb01Da2dmSHdnSVhacFpYY3VaMlYwU1c1ME9DZ3hLU2x5WldSbFptbHVaVUZzYkNna1JHRjBZVlpwWlhkYlVGSlBWRTlVV1ZCRlhTd2dlMXh1SUNBZ0lITmxkRWx1ZERnNklHWjFibU4wYVc5dUlITmxkRWx1ZERnb1lubDBaVTltWm5ObGRDd2dkbUZzZFdVcGUxeHVJQ0FnSUNBZ0pITmxkRWx1ZERndVkyRnNiQ2gwYUdsekxDQmllWFJsVDJabWMyVjBMQ0IyWVd4MVpTQThQQ0F5TkNBK1BpQXlOQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJWYVc1ME9Eb2dablZ1WTNScGIyNGdjMlYwVldsdWREZ29ZbmwwWlU5bVpuTmxkQ3dnZG1Gc2RXVXBlMXh1SUNBZ0lDQWdKSE5sZEVsdWREZ3VZMkZzYkNoMGFHbHpMQ0JpZVhSbFQyWm1jMlYwTENCMllXeDFaU0E4UENBeU5DQStQaUF5TkNrN1hHNGdJQ0FnZlZ4dUlDQjlMQ0IwY25WbEtUdGNibjFjYm5ObGRGUnZVM1J5YVc1blZHRm5LQ1JCY25KaGVVSjFabVpsY2l3Z1FWSlNRVmxmUWxWR1JrVlNLVHRjYm5ObGRGUnZVM1J5YVc1blZHRm5LQ1JFWVhSaFZtbGxkeXdnUkVGVVFWOVdTVVZYS1R0Y2JtaHBaR1VvSkVSaGRHRldhV1YzVzFCU1QxUlBWRmxRUlYwc0lDUjBlWEJsWkM1V1NVVlhMQ0IwY25WbEtUdGNibVY0Y0c5eWRITmJRVkpTUVZsZlFsVkdSa1ZTWFNBOUlDUkJjbkpoZVVKMVptWmxjanRjYm1WNGNHOXlkSE5iUkVGVVFWOVdTVVZYWFNBOUlDUkVZWFJoVm1sbGR6c2lMQ0oyWVhJZ1oyeHZZbUZzSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCb2FXUmxJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0IxYVdRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lGUlpVRVZFSUNBOUlIVnBaQ2duZEhsd1pXUmZZWEp5WVhrbktWeHVJQ0FzSUZaSlJWY2dJQ0E5SUhWcFpDZ25kbWxsZHljcFhHNGdJQ3dnUVVKV0lDQWdJRDBnSVNFb1oyeHZZbUZzTGtGeWNtRjVRblZtWm1WeUlDWW1JR2RzYjJKaGJDNUVZWFJoVm1sbGR5bGNiaUFnTENCRFQwNVRWRklnUFNCQlFsWmNiaUFnTENCcElEMGdNQ3dnYkNBOUlEa3NJRlI1Y0dWa08xeHVYRzUyWVhJZ1ZIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXljeUE5SUNoY2JpQWdKMGx1ZERoQmNuSmhlU3hWYVc1ME9FRnljbUY1TEZWcGJuUTRRMnhoYlhCbFpFRnljbUY1TEVsdWRERTJRWEp5WVhrc1ZXbHVkREUyUVhKeVlYa3NTVzUwTXpKQmNuSmhlU3hWYVc1ME16SkJjbkpoZVN4R2JHOWhkRE15UVhKeVlYa3NSbXh2WVhRMk5FRnljbUY1SjF4dUtTNXpjR3hwZENnbkxDY3BPMXh1WEc1M2FHbHNaU2hwSUR3Z2JDbDdYRzRnSUdsbUtGUjVjR1ZrSUQwZ1oyeHZZbUZzVzFSNWNHVmtRWEp5WVhsRGIyNXpkSEoxWTNSdmNuTmJhU3NyWFYwcGUxeHVJQ0FnSUdocFpHVW9WSGx3WldRdWNISnZkRzkwZVhCbExDQlVXVkJGUkN3Z2RISjFaU2s3WEc0Z0lDQWdhR2xrWlNoVWVYQmxaQzV3Y205MGIzUjVjR1VzSUZaSlJWY3NJSFJ5ZFdVcE8xeHVJQ0I5SUdWc2MyVWdRMDlPVTFSU0lEMGdabUZzYzJVN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQkJRbFk2SUNBZ0lFRkNWaXhjYmlBZ1EwOU9VMVJTT2lCRFQwNVRWRklzWEc0Z0lGUlpVRVZFT2lBZ1ZGbFFSVVFzWEc0Z0lGWkpSVmM2SUNBZ1ZrbEZWMXh1ZlRzaUxDSjJZWElnYVdRZ1BTQXdYRzRnSUN3Z2NIZ2dQU0JOWVhSb0xuSmhibVJ2YlNncE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQnlaWFIxY200Z0oxTjViV0p2YkNnbkxtTnZibU5oZENoclpYa2dQVDA5SUhWdVpHVm1hVzVsWkNBL0lDY25JRG9nYTJWNUxDQW5LVjhuTENBb0t5dHBaQ0FySUhCNEtTNTBiMU4wY21sdVp5Z3pOaWtwTzF4dWZUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHlYRzRnSUN3Z1kyOXlaU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2NseHVJQ0FzSUV4SlFsSkJVbGtnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJHbGljbUZ5ZVNjcFhISmNiaUFnTENCM2EzTkZlSFFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeTFsZUhRbktWeHlYRzRnSUN3Z1pHVm1hVzVsVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtTzF4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHNWhiV1VwZTF4eVhHNGdJSFpoY2lBa1UzbHRZbTlzSUQwZ1kyOXlaUzVUZVcxaWIyd2dmSHdnS0dOdmNtVXVVM2x0WW05c0lEMGdURWxDVWtGU1dTQS9JSHQ5SURvZ1oyeHZZbUZzTGxONWJXSnZiQ0I4ZkNCN2ZTazdYSEpjYmlBZ2FXWW9ibUZ0WlM1amFHRnlRWFFvTUNrZ0lUMGdKMThuSUNZbUlDRW9ibUZ0WlNCcGJpQWtVM2x0WW05c0tTbGtaV1pwYm1WUWNtOXdaWEowZVNna1UzbHRZbTlzTENCdVlXMWxMQ0I3ZG1Gc2RXVTZJSGRyYzBWNGRDNW1LRzVoYldVcGZTazdYSEpjYm4wN0lpd2laWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWs3SWl3aWRtRnlJSE4wYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRbktTZ25kMnR6SnlsY2JpQWdMQ0IxYVdRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkV2xrSnlsY2JpQWdMQ0JUZVcxaWIyd2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VVM2x0WW05c1hHNGdJQ3dnVlZORlgxTlpUVUpQVENBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwZ0oyWjFibU4wYVc5dUp6dGNibHh1ZG1GeUlDUmxlSEJ2Y25SeklEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1h0Y2JpQWdjbVYwZFhKdUlITjBiM0psVzI1aGJXVmRJSHg4SUNoemRHOXlaVnR1WVcxbFhTQTlYRzRnSUNBZ1ZWTkZYMU5aVFVKUFRDQW1KaUJUZVcxaWIyeGJibUZ0WlYwZ2ZId2dLRlZUUlY5VFdVMUNUMHdnUHlCVGVXMWliMndnT2lCMWFXUXBLQ2RUZVcxaWIyd3VKeUFySUc1aGJXVXBLVHRjYm4wN1hHNWNiaVJsZUhCdmNuUnpMbk4wYjNKbElEMGdjM1J2Y21VN0lpd2lkbUZ5SUdOc1lYTnpiMllnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk5zWVhOemIyWW5LVnh1SUNBc0lFbFVSVkpCVkU5U0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dTWFJsY21GMGIzSnpJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LUzVuWlhSSmRHVnlZWFJ2Y2sxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnYVdZb2FYUWdJVDBnZFc1a1pXWnBibVZrS1hKbGRIVnliaUJwZEZ0SlZFVlNRVlJQVWwxY2JpQWdJQ0I4ZkNCcGRGc25RRUJwZEdWeVlYUnZjaWRkWEc0Z0lDQWdmSHdnU1hSbGNtRjBiM0p6VzJOc1lYTnpiMllvYVhRcFhUdGNibjA3SWl3aWRtRnlJR05zWVhOemIyWWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnNZWE56YjJZbktWeHVJQ0FzSUVsVVJWSkJWRTlTSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1NYUmxjbUYwYjNKeklEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktTNXBjMGwwWlhKaFlteGxJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0IyWVhJZ1R5QTlJRTlpYW1WamRDaHBkQ2s3WEc0Z0lISmxkSFZ5YmlCUFcwbFVSVkpCVkU5U1hTQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdmSHdnSjBCQWFYUmxjbUYwYjNJbklHbHVJRTljYmlBZ0lDQjhmQ0JKZEdWeVlYUnZjbk11YUdGelQzZHVVSEp2Y0dWeWRIa29ZMnhoYzNOdlppaFBLU2s3WEc1OU95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5aVpXNXFZVzFwYm1keUwxSmxlRVY0Y0M1bGMyTmhjR1ZjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjbVVnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wd2JHRmpaWEluS1NndlcxeGNYRnhlSkNvclB5NG9LWHhiWEZ4ZGUzMWRMMmNzSUNkY1hGeGNKQ1luS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RTWldkRmVIQW5MQ0I3WlhOallYQmxPaUJtZFc1amRHbHZiaUJsYzJOaGNHVW9hWFFwZXlCeVpYUjFjbTRnSkhKbEtHbDBLVHNnZlgwcE8xeHVJaXdpTHk4Z01qSXVNUzR6TGpNZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1OdmNIbFhhWFJvYVc0b2RHRnlaMlYwTENCemRHRnlkQ3dnWlc1a0lEMGdkR2hwY3k1c1pXNW5kR2dwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMEZ5Y21GNUp5d2dlMk52Y0hsWGFYUm9hVzQ2SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdOdmNIa3RkMmwwYUdsdUp5bDlLVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWtvSjJOdmNIbFhhWFJvYVc0bktUc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNjbHh1SUNBc0lDUmxkbVZ5ZVNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXRaWFJvYjJSekp5a29OQ2s3WEhKY2JseHlYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29XMTB1WlhabGNua3NJSFJ5ZFdVcExDQW5RWEp5WVhrbkxDQjdYSEpjYmlBZ0x5OGdNakl1TVM0ekxqVWdMeUF4TlM0MExqUXVNVFlnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVYyWlhKNUtHTmhiR3hpWVdOclptNGdXeXdnZEdocGMwRnlaMTBwWEhKY2JpQWdaWFpsY25rNklHWjFibU4wYVc5dUlHVjJaWEo1S0dOaGJHeGlZV05yWm00Z0x5b2dMQ0IwYUdselFYSm5JQ292S1h0Y2NseHVJQ0FnSUhKbGRIVnliaUFrWlhabGNua29kR2hwY3l3Z1kyRnNiR0poWTJ0bWJpd2dZWEpuZFcxbGJuUnpXekZkS1R0Y2NseHVJQ0I5WEhKY2JuMHBPeUlzSWk4dklESXlMakV1TXk0MklFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXeHNLSFpoYkhWbExDQnpkR0Z5ZENBOUlEQXNJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9LVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZEJjbkpoZVNjc0lIdG1hV3hzT2lCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxbWFXeHNKeWw5S1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6Snlrb0oyWnBiR3duS1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR1pwYkhSbGNpQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtGdGRMbVpwYkhSbGNpd2dkSEoxWlNrc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR6TGpjZ0x5QXhOUzQwTGpRdU1qQWdRWEp5WVhrdWNISnZkRzkwZVhCbExtWnBiSFJsY2loallXeHNZbUZqYTJadUlGc3NJSFJvYVhOQmNtZGRLVnh1SUNCbWFXeDBaWEk2SUdaMWJtTjBhVzl1SUdacGJIUmxjaWhqWVd4c1ltRmphMlp1SUM4cUlDd2dkR2hwYzBGeVp5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUm1hV3gwWlhJb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z01qSXVNUzR6TGprZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1acGJtUkpibVJsZUNod2NtVmthV05oZEdVc0lIUm9hWE5CY21jZ1BTQjFibVJsWm1sdVpXUXBYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHWnBibVFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZzJLVnh1SUNBc0lFdEZXU0FnSUNBZ1BTQW5abWx1WkVsdVpHVjRKMXh1SUNBc0lHWnZjbU5sWkNBZ1BTQjBjblZsTzF4dUx5OGdVMmh2ZFd4a2JpZDBJSE5yYVhBZ2FHOXNaWE5jYm1sbUtFdEZXU0JwYmlCYlhTbEJjbkpoZVNneEtWdExSVmxkS0daMWJtTjBhVzl1S0NsN0lHWnZjbU5sWkNBOUlHWmhiSE5sT3lCOUtUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptOXlZMlZrTENBblFYSnlZWGtuTENCN1hHNGdJR1pwYm1SSmJtUmxlRG9nWm5WdVkzUnBiMjRnWm1sdVpFbHVaR1Y0S0dOaGJHeGlZV05yWm00dktpd2dkR2hoZENBOUlIVnVaR1ZtYVc1bFpDQXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUm1hVzVrS0hSb2FYTXNJR05oYkd4aVlXTnJabTRzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnZlZ4dWZTazdYRzV5WlhGMWFYSmxLQ2N1TDE5aFpHUXRkRzh0ZFc1elkyOXdZV0pzWlhNbktTaExSVmtwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklESXlMakV1TXk0NElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXNWtLSEJ5WldScFkyRjBaU3dnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWm1sdVpDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YldWMGFHOWtjeWNwS0RVcFhHNGdJQ3dnUzBWWklDQWdJQ0E5SUNkbWFXNWtKMXh1SUNBc0lHWnZjbU5sWkNBZ1BTQjBjblZsTzF4dUx5OGdVMmh2ZFd4a2JpZDBJSE5yYVhBZ2FHOXNaWE5jYm1sbUtFdEZXU0JwYmlCYlhTbEJjbkpoZVNneEtWdExSVmxkS0daMWJtTjBhVzl1S0NsN0lHWnZjbU5sWkNBOUlHWmhiSE5sT3lCOUtUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptOXlZMlZrTENBblFYSnlZWGtuTENCN1hHNGdJR1pwYm1RNklHWjFibU4wYVc5dUlHWnBibVFvWTJGc2JHSmhZMnRtYmk4cUxDQjBhR0YwSUQwZ2RXNWtaV1pwYm1Wa0lDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pHWnBibVFvZEdocGN5d2dZMkZzYkdKaFkydG1iaXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0I5WEc1OUtUdGNibkpsY1hWcGNtVW9KeTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3ljcEtFdEZXU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1MllYSWdKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4eVhHNGdJQ3dnSkdadmNrVmhZMmdnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6Snlrb01DbGNjbHh1SUNBc0lGTlVVa2xEVkNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLRnRkTG1admNrVmhZMmdzSUhSeWRXVXBPMXh5WEc1Y2NseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBaFUxUlNTVU5VTENBblFYSnlZWGtuTENCN1hISmNiaUFnTHk4Z01qSXVNUzR6TGpFd0lDOGdNVFV1TkM0MExqRTRJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1iM0pGWVdOb0tHTmhiR3hpWVdOclptNGdXeXdnZEdocGMwRnlaMTBwWEhKY2JpQWdabTl5UldGamFEb2dablZ1WTNScGIyNGdabTl5UldGamFDaGpZV3hzWW1GamEyWnVJQzhxSUN3Z2RHaHBjMEZ5WnlBcUx5bDdYSEpjYmlBZ0lDQnlaWFIxY200Z0pHWnZja1ZoWTJnb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5Seld6RmRLVHRjY2x4dUlDQjlYSEpjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJqZEhnZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCallXeHNJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WTJGc2JDY3BYRzRnSUN3Z2FYTkJjbkpoZVVsMFpYSWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdMQ0IwYjB4bGJtZDBhQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWTNKbFlYUmxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5amNtVmhkR1V0Y0hKdmNHVnlkSGtuS1Z4dUlDQXNJR2RsZEVsMFpYSkdiaUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlqYjNKbExtZGxkQzFwZEdWeVlYUnZjaTF0WlhSb2IyUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmFYUmxjaTFrWlhSbFkzUW5LU2htZFc1amRHbHZiaWhwZEdWeUtYc2dRWEp5WVhrdVpuSnZiU2hwZEdWeUtUc2dmU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHlMakVnUVhKeVlYa3Vabkp2YlNoaGNuSmhlVXhwYTJVc0lHMWhjR1p1SUQwZ2RXNWtaV1pwYm1Wa0xDQjBhR2x6UVhKbklEMGdkVzVrWldacGJtVmtLVnh1SUNCbWNtOXRPaUJtZFc1amRHbHZiaUJtY205dEtHRnljbUY1VEdsclpTOHFMQ0J0WVhCbWJpQTlJSFZ1WkdWbWFXNWxaQ3dnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNvdktYdGNiaUFnSUNCMllYSWdUeUFnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLR0Z5Y21GNVRHbHJaU2xjYmlBZ0lDQWdJQ3dnUXlBZ0lDQWdJQ0E5SUhSNWNHVnZaaUIwYUdseklEMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nUVhKeVlYbGNiaUFnSUNBZ0lDd2dZVXhsYmlBZ0lDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2diV0Z3Wm00Z0lDQTlJR0ZNWlc0Z1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJRzFoY0hCcGJtY2dQU0J0WVhCbWJpQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHbDBaWEpHYmlBZ1BTQm5aWFJKZEdWeVJtNG9UeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9MQ0J5WlhOMWJIUXNJSE4wWlhBc0lHbDBaWEpoZEc5eU8xeHVJQ0FnSUdsbUtHMWhjSEJwYm1jcGJXRndabTRnUFNCamRIZ29iV0Z3Wm00c0lHRk1aVzRnUGlBeUlEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2RXNWtaV1pwYm1Wa0xDQXlLVHRjYmlBZ0lDQXZMeUJwWmlCdlltcGxZM1FnYVhOdUozUWdhWFJsY21GaWJHVWdiM0lnYVhRbmN5QmhjbkpoZVNCM2FYUm9JR1JsWm1GMWJIUWdhWFJsY21GMGIzSWdMU0IxYzJVZ2MybHRjR3hsSUdOaGMyVmNiaUFnSUNCcFppaHBkR1Z5Um00Z0lUMGdkVzVrWldacGJtVmtJQ1ltSUNFb1F5QTlQU0JCY25KaGVTQW1KaUJwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1NsN1hHNGdJQ0FnSUNCbWIzSW9hWFJsY21GMGIzSWdQU0JwZEdWeVJtNHVZMkZzYkNoUEtTd2djbVZ6ZFd4MElEMGdibVYzSUVNN0lDRW9jM1JsY0NBOUlHbDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaVHNnYVc1a1pYZ3JLeWw3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVkJ5YjNCbGNuUjVLSEpsYzNWc2RDd2dhVzVrWlhnc0lHMWhjSEJwYm1jZ1B5QmpZV3hzS0dsMFpYSmhkRzl5TENCdFlYQm1iaXdnVzNOMFpYQXVkbUZzZFdVc0lHbHVaR1Y0WFN3Z2RISjFaU2tnT2lCemRHVndMblpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnWm05eUtISmxjM1ZzZENBOUlHNWxkeUJES0d4bGJtZDBhQ2s3SUd4bGJtZDBhQ0ErSUdsdVpHVjRPeUJwYm1SbGVDc3JLWHRjYmlBZ0lDQWdJQ0FnWTNKbFlYUmxVSEp2Y0dWeWRIa29jbVZ6ZFd4MExDQnBibVJsZUN3Z2JXRndjR2x1WnlBL0lHMWhjR1p1S0U5YmFXNWtaWGhkTENCcGJtUmxlQ2tnT2lCUFcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsYzNWc2RDNXNaVzVuZEdnZ1BTQnBibVJsZUR0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1OUtUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHlYRzRnSUN3Z0pHbHVaR1Y0VDJZZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdsdVkyeDFaR1Z6Snlrb1ptRnNjMlVwWEhKY2JpQWdMQ0FrYm1GMGFYWmxJQ0FnSUNBZ0lEMGdXMTB1YVc1a1pYaFBabHh5WEc0Z0lDd2dUa1ZIUVZSSlZrVmZXa1ZTVHlBOUlDRWhKRzVoZEdsMlpTQW1KaUF4SUM4Z1d6RmRMbWx1WkdWNFQyWW9NU3dnTFRBcElEd2dNRHRjY2x4dVhISmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tFNUZSMEZVU1ZaRlgxcEZVazhnZkh3Z0lYSmxjWFZwY21Vb0p5NHZYM04wY21samRDMXRaWFJvYjJRbktTZ2tibUYwYVhabEtTa3NJQ2RCY25KaGVTY3NJSHRjY2x4dUlDQXZMeUF5TWk0eExqTXVNVEVnTHlBeE5TNDBMalF1TVRRZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQmJMQ0JtY205dFNXNWtaWGhkS1Z4eVhHNGdJR2x1WkdWNFQyWTZJR1oxYm1OMGFXOXVJR2x1WkdWNFQyWW9jMlZoY21Ob1JXeGxiV1Z1ZENBdktpd2dabkp2YlVsdVpHVjRJRDBnTUNBcUx5bDdYSEpjYmlBZ0lDQnlaWFIxY200Z1RrVkhRVlJKVmtWZldrVlNUMXh5WEc0Z0lDQWdJQ0F2THlCamIyNTJaWEowSUMwd0lIUnZJQ3N3WEhKY2JpQWdJQ0FnSUQ4Z0pHNWhkR2wyWlM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBJSHg4SURCY2NseHVJQ0FnSUNBZ09pQWthVzVrWlhoUFppaDBhR2x6TENCelpXRnlZMmhGYkdWdFpXNTBMQ0JoY21kMWJXVnVkSE5iTVYwcE8xeHlYRzRnSUgxY2NseHVmU2s3SWl3aUx5OGdNakl1TVM0eUxqSWdMeUF4TlM0MExqTXVNaUJCY25KaGVTNXBjMEZ5Y21GNUtHRnlaeWxjY2x4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2NseHVYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblFYSnlZWGtuTENCN2FYTkJjbkpoZVRvZ2NtVnhkV2x5WlNnbkxpOWZhWE10WVhKeVlYa25LWDBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQmhaR1JVYjFWdWMyTnZjR0ZpYkdWeklEMGdjbVZ4ZFdseVpTZ25MaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6SnlsY2JpQWdMQ0J6ZEdWd0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjaTF6ZEdWd0p5bGNiaUFnTENCSmRHVnlZWFJ2Y25NZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY21GMGIzSnpKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcE8xeHVYRzR2THlBeU1pNHhMak11TkNCQmNuSmhlUzV3Y205MGIzUjVjR1V1Wlc1MGNtbGxjeWdwWEc0dkx5QXlNaTR4TGpNdU1UTWdRWEp5WVhrdWNISnZkRzkwZVhCbExtdGxlWE1vS1Z4dUx5OGdNakl1TVM0ekxqSTVJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNTJZV3gxWlhNb0tWeHVMeThnTWpJdU1TNHpMak13SUVGeWNtRjVMbkJ5YjNSdmRIbHdaVnRBUUdsMFpYSmhkRzl5WFNncFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFpHVm1hVzVsSnlrb1FYSnlZWGtzSUNkQmNuSmhlU2NzSUdaMWJtTjBhVzl1S0dsMFpYSmhkR1ZrTENCcmFXNWtLWHRjYmlBZ2RHaHBjeTVmZENBOUlIUnZTVTlpYW1WamRDaHBkR1Z5WVhSbFpDazdJQzh2SUhSaGNtZGxkRnh1SUNCMGFHbHpMbDlwSUQwZ01Ec2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYm1WNGRDQnBibVJsZUZ4dUlDQjBhR2x6TGw5cklEMGdhMmx1WkRzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2EybHVaRnh1THk4Z01qSXVNUzQxTGpJdU1TQWxRWEp5WVhsSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNVdWJtVjRkQ2dwWEc1OUxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNCMllYSWdUeUFnSUNBZ1BTQjBhR2x6TGw5MFhHNGdJQ0FnTENCcmFXNWtJQ0E5SUhSb2FYTXVYMnRjYmlBZ0lDQXNJR2x1WkdWNElEMGdkR2hwY3k1ZmFTc3JPMXh1SUNCcFppZ2hUeUI4ZkNCcGJtUmxlQ0ErUFNCUExteGxibWQwYUNsN1hHNGdJQ0FnZEdocGN5NWZkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0J5WlhSMWNtNGdjM1JsY0NneEtUdGNiaUFnZlZ4dUlDQnBaaWhyYVc1a0lEMDlJQ2RyWlhsekp5QWdLWEpsZEhWeWJpQnpkR1Z3S0RBc0lHbHVaR1Y0S1R0Y2JpQWdhV1lvYTJsdVpDQTlQU0FuZG1Gc2RXVnpKeWx5WlhSMWNtNGdjM1JsY0Nnd0xDQlBXMmx1WkdWNFhTazdYRzRnSUhKbGRIVnliaUJ6ZEdWd0tEQXNJRnRwYm1SbGVDd2dUMXRwYm1SbGVGMWRLVHRjYm4wc0lDZDJZV3gxWlhNbktUdGNibHh1THk4Z1lYSm5kVzFsYm5SelRHbHpkRnRBUUdsMFpYSmhkRzl5WFNCcGN5QWxRWEp5WVhsUWNtOTBiMTkyWVd4MVpYTWxJQ2c1TGpRdU5DNDJMQ0E1TGpRdU5DNDNLVnh1U1hSbGNtRjBiM0p6TGtGeVozVnRaVzUwY3lBOUlFbDBaWEpoZEc5eWN5NUJjbkpoZVR0Y2JseHVZV1JrVkc5VmJuTmpiM0JoWW14bGN5Z25hMlY1Y3ljcE8xeHVZV1JrVkc5VmJuTmpiM0JoWW14bGN5Z25kbUZzZFdWekp5azdYRzVoWkdSVWIxVnVjMk52Y0dGaWJHVnpLQ2RsYm5SeWFXVnpKeWs3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc0dkx5QXlNaTR4TGpNdU1UTWdRWEp5WVhrdWNISnZkRzkwZVhCbExtcHZhVzRvYzJWd1lYSmhkRzl5S1Z4eVhHNTJZWElnSkdWNGNHOXlkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNjbHh1SUNBc0lIUnZTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHlYRzRnSUN3Z1lYSnlZWGxLYjJsdUlEMGdXMTB1YW05cGJqdGNjbHh1WEhKY2JpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdWIzUWdZWEp5WVhrdGJHbHJaU0J6ZEhKcGJtZHpYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1NBaFBTQlBZbXBsWTNRZ2ZId2dJWEpsY1hWcGNtVW9KeTR2WDNOMGNtbGpkQzF0WlhSb2IyUW5LU2hoY25KaGVVcHZhVzRwS1N3Z0owRnljbUY1Snl3Z2UxeHlYRzRnSUdwdmFXNDZJR1oxYm1OMGFXOXVJR3B2YVc0b2MyVndZWEpoZEc5eUtYdGNjbHh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVXB2YVc0dVkyRnNiQ2gwYjBsUFltcGxZM1FvZEdocGN5a3NJSE5sY0dGeVlYUnZjaUE5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKeXduSURvZ2MyVndZWEpoZEc5eUtUdGNjbHh1SUNCOVhISmNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2dkRzlKVDJKcVpXTjBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1Z4eVhHNGdJQ3dnZEc5SmJuUmxaMlZ5SUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHVkR1ZuWlhJbktWeHlYRzRnSUN3Z2RHOU1aVzVuZEdnZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYSEpjYmlBZ0xDQWtibUYwYVhabElDQWdJQ0FnSUQwZ1cxMHViR0Z6ZEVsdVpHVjRUMlpjY2x4dUlDQXNJRTVGUjBGVVNWWkZYMXBGVWs4Z1BTQWhJU1J1WVhScGRtVWdKaVlnTVNBdklGc3hYUzVzWVhOMFNXNWtaWGhQWmlneExDQXRNQ2tnUENBd08xeHlYRzVjY2x4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFvVGtWSFFWUkpWa1ZmV2tWU1R5QjhmQ0FoY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0NSdVlYUnBkbVVwS1N3Z0owRnljbUY1Snl3Z2UxeHlYRzRnSUM4dklESXlMakV1TXk0eE5DQXZJREUxTGpRdU5DNHhOU0JCY25KaGVTNXdjbTkwYjNSNWNHVXViR0Z6ZEVsdVpHVjRUMllvYzJWaGNtTm9SV3hsYldWdWRDQmJMQ0JtY205dFNXNWtaWGhkS1Z4eVhHNGdJR3hoYzNSSmJtUmxlRTltT2lCbWRXNWpkR2x2YmlCc1lYTjBTVzVrWlhoUFppaHpaV0Z5WTJoRmJHVnRaVzUwSUM4cUxDQm1jbTl0U1c1a1pYZ2dQU0JBV3lvdE1WMGdLaThwZTF4eVhHNGdJQ0FnTHk4Z1kyOXVkbVZ5ZENBdE1DQjBieUFyTUZ4eVhHNGdJQ0FnYVdZb1RrVkhRVlJKVmtWZldrVlNUeWx5WlhSMWNtNGdKRzVoZEdsMlpTNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wSUh4OElEQTdYSEpjYmlBZ0lDQjJZWElnVHlBZ0lDQWdJRDBnZEc5SlQySnFaV04wS0hSb2FYTXBYSEpjYmlBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwWEhKY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2JHVnVaM1JvSUMwZ01UdGNjbHh1SUNBZ0lHbG1LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4S1dsdVpHVjRJRDBnVFdGMGFDNXRhVzRvYVc1a1pYZ3NJSFJ2U1c1MFpXZGxjaWhoY21kMWJXVnVkSE5iTVYwcEtUdGNjbHh1SUNBZ0lHbG1LR2x1WkdWNElEd2dNQ2xwYm1SbGVDQTlJR3hsYm1kMGFDQXJJR2x1WkdWNE8xeHlYRzRnSUNBZ1ptOXlLRHRwYm1SbGVDQStQU0F3T3lCcGJtUmxlQzB0S1dsbUtHbHVaR1Y0SUdsdUlFOHBhV1lvVDF0cGJtUmxlRjBnUFQwOUlITmxZWEpqYUVWc1pXMWxiblFwY21WMGRYSnVJR2x1WkdWNElIeDhJREE3WEhKY2JpQWdJQ0J5WlhSMWNtNGdMVEU3WEhKY2JpQWdmVnh5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNjbHh1SUNBc0lDUnRZWEFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXRaWFJvYjJSekp5a29NU2s3WEhKY2JseHlYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29XMTB1YldGd0xDQjBjblZsS1N3Z0owRnljbUY1Snl3Z2UxeHlYRzRnSUM4dklESXlMakV1TXk0eE5TQXZJREUxTGpRdU5DNHhPU0JCY25KaGVTNXdjbTkwYjNSNWNHVXViV0Z3S0dOaGJHeGlZV05yWm00Z1d5d2dkR2hwYzBGeVoxMHBYSEpjYmlBZ2JXRndPaUJtZFc1amRHbHZiaUJ0WVhBb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUhSb2FYTkJjbWNnS2k4cGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUNSdFlYQW9kR2hwY3l3Z1kyRnNiR0poWTJ0bWJpd2dZWEpuZFcxbGJuUnpXekZkS1R0Y2NseHVJQ0I5WEhKY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWTNKbFlYUmxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5amNtVmhkR1V0Y0hKdmNHVnlkSGtuS1R0Y2JseHVMeThnVjJWaVMybDBJRUZ5Y21GNUxtOW1JR2x6YmlkMElHZGxibVZ5YVdOY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0JtZFc1amRHbHZiaUJHS0NsN2ZWeHVJQ0J5WlhSMWNtNGdJU2hCY25KaGVTNXZaaTVqWVd4c0tFWXBJR2x1YzNSaGJtTmxiMllnUmlrN1hHNTlLU3dnSjBGeWNtRjVKeXdnZTF4dUlDQXZMeUF5TWk0eExqSXVNeUJCY25KaGVTNXZaaWdnTGk0dWFYUmxiWE1wWEc0Z0lHOW1PaUJtZFc1amRHbHZiaUJ2WmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQjJZWElnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnTENCaFRHVnVJQ0FnUFNCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FzSUhKbGMzVnNkQ0E5SUc1bGR5QW9kSGx3Wlc5bUlIUm9hWE1nUFQwZ0oyWjFibU4wYVc5dUp5QS9JSFJvYVhNZ09pQkJjbkpoZVNrb1lVeGxiaWs3WEc0Z0lDQWdkMmhwYkdVb1lVeGxiaUErSUdsdVpHVjRLV055WldGMFpWQnliM0JsY25SNUtISmxjM1ZzZEN3Z2FXNWtaWGdzSUdGeVozVnRaVzUwYzF0cGJtUmxlQ3NyWFNrN1hHNGdJQ0FnY21WemRXeDBMbXhsYm1kMGFDQTlJR0ZNWlc0N1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHlYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYSEpjYmlBZ0xDQWtjbVZrZFdObElEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RjbVZrZFdObEp5azdYSEpjYmx4eVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOXpkSEpwWTNRdGJXVjBhRzlrSnlrb1cxMHVjbVZrZFdObFVtbG5hSFFzSUhSeWRXVXBMQ0FuUVhKeVlYa25MQ0I3WEhKY2JpQWdMeThnTWpJdU1TNHpMakU1SUM4Z01UVXVOQzQwTGpJeUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1eVpXUjFZMlZTYVdkb2RDaGpZV3hzWW1GamEyWnVJRnNzSUdsdWFYUnBZV3hXWVd4MVpWMHBYSEpjYmlBZ2NtVmtkV05sVW1sbmFIUTZJR1oxYm1OMGFXOXVJSEpsWkhWalpWSnBaMmgwS0dOaGJHeGlZV05yWm00Z0x5b2dMQ0JwYm1sMGFXRnNWbUZzZFdVZ0tpOHBlMXh5WEc0Z0lDQWdjbVYwZFhKdUlDUnlaV1IxWTJVb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5SekxteGxibWQwYUN3Z1lYSm5kVzFsYm5Seld6RmRMQ0IwY25WbEtUdGNjbHh1SUNCOVhISmNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjY2x4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4eVhHNGdJQ3dnSkhKbFpIVmpaU0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFhKbFpIVmpaU2NwTzF4eVhHNWNjbHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLRnRkTG5KbFpIVmpaU3dnZEhKMVpTa3NJQ2RCY25KaGVTY3NJSHRjY2x4dUlDQXZMeUF5TWk0eExqTXVNVGdnTHlBeE5TNDBMalF1TWpFZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5KbFpIVmpaU2hqWVd4c1ltRmphMlp1SUZzc0lHbHVhWFJwWVd4V1lXeDFaVjBwWEhKY2JpQWdjbVZrZFdObE9pQm1kVzVqZEdsdmJpQnlaV1IxWTJVb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUdsdWFYUnBZV3hXWVd4MVpTQXFMeWw3WEhKY2JpQWdJQ0J5WlhSMWNtNGdKSEpsWkhWalpTaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0xDQmhjbWQxYldWdWRITmJNVjBzSUdaaGJITmxLVHRjY2x4dUlDQjlYSEpjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVkbUZ5SUNSbGVIQnZjblFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2dhSFJ0YkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaDBiV3duS1Z4eVhHNGdJQ3dnWTI5bUlDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcFhISmNiaUFnTENCMGIwbHVaR1Y0SUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNWtaWGduS1Z4eVhHNGdJQ3dnZEc5TVpXNW5kR2dnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFd4bGJtZDBhQ2NwWEhKY2JpQWdMQ0JoY25KaGVWTnNhV05sSUQwZ1cxMHVjMnhwWTJVN1hISmNibHh5WEc0dkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYm05MElHRnljbUY1TFd4cGEyVWdSVk16SUhOMGNtbHVaM01nWVc1a0lFUlBUU0J2WW1wbFkzUnpYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4eVhHNGdJR2xtS0doMGJXd3BZWEp5WVhsVGJHbGpaUzVqWVd4c0tHaDBiV3dwTzF4eVhHNTlLU3dnSjBGeWNtRjVKeXdnZTF4eVhHNGdJSE5zYVdObE9pQm1kVzVqZEdsdmJpQnpiR2xqWlNoaVpXZHBiaXdnWlc1a0tYdGNjbHh1SUNBZ0lIWmhjaUJzWlc0Z0lDQTlJSFJ2VEdWdVozUm9LSFJvYVhNdWJHVnVaM1JvS1Z4eVhHNGdJQ0FnSUNBc0lHdHNZWE56SUQwZ1kyOW1LSFJvYVhNcE8xeHlYRzRnSUNBZ1pXNWtJRDBnWlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNGdPaUJsYm1RN1hISmNiaUFnSUNCcFppaHJiR0Z6Y3lBOVBTQW5RWEp5WVhrbktYSmxkSFZ5YmlCaGNuSmhlVk5zYVdObExtTmhiR3dvZEdocGN5d2dZbVZuYVc0c0lHVnVaQ2s3WEhKY2JpQWdJQ0IyWVhJZ2MzUmhjblFnSUQwZ2RHOUpibVJsZUNoaVpXZHBiaXdnYkdWdUtWeHlYRzRnSUNBZ0lDQXNJSFZ3Vkc4Z0lDQTlJSFJ2U1c1a1pYZ29aVzVrTENCc1pXNHBYSEpjYmlBZ0lDQWdJQ3dnYzJsNlpTQWdJRDBnZEc5TVpXNW5kR2dvZFhCVWJ5QXRJSE4wWVhKMEtWeHlYRzRnSUNBZ0lDQXNJR05zYjI1bFpDQTlJRUZ5Y21GNUtITnBlbVVwWEhKY2JpQWdJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01EdGNjbHh1SUNBZ0lHWnZjaWc3SUdrZ1BDQnphWHBsT3lCcEt5c3BZMnh2Ym1Wa1cybGRJRDBnYTJ4aGMzTWdQVDBnSjFOMGNtbHVaeWRjY2x4dUlDQWdJQ0FnUHlCMGFHbHpMbU5vWVhKQmRDaHpkR0Z5ZENBcklHa3BYSEpjYmlBZ0lDQWdJRG9nZEdocGMxdHpkR0Z5ZENBcklHbGRPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHTnNiMjVsWkR0Y2NseHVJQ0I5WEhKY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2dKSE52YldVZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d6S1R0Y2NseHVYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJWEpsY1hWcGNtVW9KeTR2WDNOMGNtbGpkQzF0WlhSb2IyUW5LU2hiWFM1emIyMWxMQ0IwY25WbEtTd2dKMEZ5Y21GNUp5d2dlMXh5WEc0Z0lDOHZJREl5TGpFdU15NHlNeUF2SURFMUxqUXVOQzR4TnlCQmNuSmhlUzV3Y205MGIzUjVjR1V1YzI5dFpTaGpZV3hzWW1GamEyWnVJRnNzSUhSb2FYTkJjbWRkS1Z4eVhHNGdJSE52YldVNklHWjFibU4wYVc5dUlITnZiV1VvWTJGc2JHSmhZMnRtYmlBdktpQXNJSFJvYVhOQmNtY2dLaThwZTF4eVhHNGdJQ0FnY21WMGRYSnVJQ1J6YjIxbEtIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGMxc3hYU2s3WEhKY2JpQWdmVnh5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNiblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2dZVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYSEpjYmlBZ0xDQjBiMDlpYW1WamRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHlYRzRnSUN3Z1ptRnBiSE1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVnh5WEc0Z0lDd2dKSE52Y25RZ0lDQWdJRDBnVzEwdWMyOXlkRnh5WEc0Z0lDd2dkR1Z6ZENBZ0lDQWdJRDBnV3pFc0lESXNJRE5kTzF4eVhHNWNjbHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9abUZwYkhNb1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBdkx5QkpSVGd0WEhKY2JpQWdkR1Z6ZEM1emIzSjBLSFZ1WkdWbWFXNWxaQ2s3WEhKY2JuMHBJSHg4SUNGbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4eVhHNGdJQzh2SUZZNElHSjFaMXh5WEc0Z0lIUmxjM1F1YzI5eWRDaHVkV3hzS1R0Y2NseHVJQ0F2THlCUGJHUWdWMlZpUzJsMFhISmNibjBwSUh4OElDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29KSE52Y25RcEtTd2dKMEZ5Y21GNUp5d2dlMXh5WEc0Z0lDOHZJREl5TGpFdU15NHlOU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMjl5ZENoamIyMXdZWEpsWm00cFhISmNiaUFnYzI5eWREb2dablZ1WTNScGIyNGdjMjl5ZENoamIyMXdZWEpsWm00cGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUdOdmJYQmhjbVZtYmlBOVBUMGdkVzVrWldacGJtVmtYSEpjYmlBZ0lDQWdJRDhnSkhOdmNuUXVZMkZzYkNoMGIwOWlhbVZqZENoMGFHbHpLU2xjY2x4dUlDQWdJQ0FnT2lBa2MyOXlkQzVqWVd4c0tIUnZUMkpxWldOMEtIUm9hWE1wTENCaFJuVnVZM1JwYjI0b1kyOXRjR0Z5WldadUtTazdYSEpjYmlBZ2ZWeHlYRzU5S1RzaUxDSnlaWEYxYVhKbEtDY3VMMTl6WlhRdGMzQmxZMmxsY3ljcEtDZEJjbkpoZVNjcE95SXNJaTh2SURJd0xqTXVNeTR4SUM4Z01UVXVPUzQwTGpRZ1JHRjBaUzV1YjNjb0tWeHlYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh5WEc1Y2NseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RFWVhSbEp5d2dlMjV2ZHpvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BPeUI5ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNHZMeUF5TUM0ekxqUXVNellnTHlBeE5TNDVMalV1TkRNZ1JHRjBaUzV3Y205MGIzUjVjR1V1ZEc5SlUwOVRkSEpwYm1jb0tWeHlYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYSEpjYmlBZ0xDQm1ZV2xzY3lBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVnh5WEc0Z0lDd2daMlYwVkdsdFpTQTlJRVJoZEdVdWNISnZkRzkwZVhCbExtZGxkRlJwYldVN1hISmNibHh5WEc1MllYSWdiSG9nUFNCbWRXNWpkR2x2YmlodWRXMHBlMXh5WEc0Z0lISmxkSFZ5YmlCdWRXMGdQaUE1SUQ4Z2JuVnRJRG9nSnpBbklDc2diblZ0TzF4eVhHNTlPMXh5WEc1Y2NseHVMeThnVUdoaGJuUnZiVXBUSUM4Z2IyeGtJRmRsWWt0cGRDQm9ZWE1nWVNCaWNtOXJaVzRnYVcxd2JHVnRaVzUwWVhScGIyNXpYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLR1poYVd4ektHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ2NtVjBkWEp1SUc1bGR5QkVZWFJsS0MwMVpURXpJQzBnTVNrdWRHOUpVMDlUZEhKcGJtY29LU0FoUFNBbk1ETTROUzB3TnkweU5WUXdOem93Tmpvek9TNDVPVGxhSnp0Y2NseHVmU2tnZkh3Z0lXWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hISmNiaUFnYm1WM0lFUmhkR1VvVG1GT0tTNTBiMGxUVDFOMGNtbHVaeWdwTzF4eVhHNTlLU2tzSUNkRVlYUmxKeXdnZTF4eVhHNGdJSFJ2U1ZOUFUzUnlhVzVuT2lCbWRXNWpkR2x2YmlCMGIwbFRUMU4wY21sdVp5Z3BlMXh5WEc0Z0lDQWdhV1lvSVdselJtbHVhWFJsS0dkbGRGUnBiV1V1WTJGc2JDaDBhR2x6S1NrcGRHaHliM2NnVW1GdVoyVkZjbkp2Y2lnblNXNTJZV3hwWkNCMGFXMWxJSFpoYkhWbEp5azdYSEpjYmlBZ0lDQjJZWElnWkNBOUlIUm9hWE5jY2x4dUlDQWdJQ0FnTENCNUlEMGdaQzVuWlhSVlZFTkdkV3hzV1dWaGNpZ3BYSEpjYmlBZ0lDQWdJQ3dnYlNBOUlHUXVaMlYwVlZSRFRXbHNiR2x6WldOdmJtUnpLQ2xjY2x4dUlDQWdJQ0FnTENCeklEMGdlU0E4SURBZ1B5QW5MU2NnT2lCNUlENGdPVGs1T1NBL0lDY3JKeUE2SUNjbk8xeHlYRzRnSUNBZ2NtVjBkWEp1SUhNZ0t5QW9KekF3TURBd0p5QXJJRTFoZEdndVlXSnpLSGtwS1M1emJHbGpaU2h6SUQ4Z0xUWWdPaUF0TkNrZ0sxeHlYRzRnSUNBZ0lDQW5MU2NnS3lCc2VpaGtMbWRsZEZWVVEwMXZiblJvS0NrZ0t5QXhLU0FySUNjdEp5QXJJR3g2S0dRdVoyVjBWVlJEUkdGMFpTZ3BLU0FyWEhKY2JpQWdJQ0FnSUNkVUp5QXJJR3g2S0dRdVoyVjBWVlJEU0c5MWNuTW9LU2tnS3lBbk9pY2dLeUJzZWloa0xtZGxkRlZVUTAxcGJuVjBaWE1vS1NrZ0sxeHlYRzRnSUNBZ0lDQW5PaWNnS3lCc2VpaGtMbWRsZEZWVVExTmxZMjl1WkhNb0tTa2dLeUFuTGljZ0t5QW9iU0ErSURrNUlEOGdiU0E2SUNjd0p5QXJJR3g2S0cwcEtTQXJJQ2RhSnp0Y2NseHVJQ0I5WEhKY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dkRzlQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lIUnZVSEpwYldsMGFYWmxJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1NobWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdibVYzSUVSaGRHVW9UbUZPS1M1MGIwcFRUMDRvS1NBaFBUMGdiblZzYkNCOGZDQkVZWFJsTG5CeWIzUnZkSGx3WlM1MGIwcFRUMDR1WTJGc2JDaDdkRzlKVTA5VGRISnBibWM2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlBeE95QjlmU2tnSVQwOUlERTdYRzU5S1N3Z0owUmhkR1VuTENCN1hHNGdJSFJ2U2xOUFRqb2dablZ1WTNScGIyNGdkRzlLVTA5T0tHdGxlU2w3WEc0Z0lDQWdkbUZ5SUU4Z0lEMGdkRzlQWW1wbFkzUW9kR2hwY3lsY2JpQWdJQ0FnSUN3Z2NIWWdQU0IwYjFCeWFXMXBkR2wyWlNoUEtUdGNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JSEIySUQwOUlDZHVkVzFpWlhJbklDWW1JQ0ZwYzBacGJtbDBaU2h3ZGlrZ1B5QnVkV3hzSURvZ1R5NTBiMGxUVDFOMGNtbHVaeWdwTzF4dUlDQjlYRzU5S1RzaUxDSjJZWElnVkU5ZlVGSkpUVWxVU1ZaRklEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VUhKcGJXbDBhWFpsSnlsY2NseHVJQ0FzSUhCeWIzUnZJQ0FnSUNBZ0lDQTlJRVJoZEdVdWNISnZkRzkwZVhCbE8xeHlYRzVjY2x4dWFXWW9JU2hVVDE5UVVrbE5TVlJKVmtVZ2FXNGdjSEp2ZEc4cEtYSmxjWFZwY21Vb0p5NHZYMmhwWkdVbktTaHdjbTkwYnl3Z1ZFOWZVRkpKVFVsVVNWWkZMQ0J5WlhGMWFYSmxLQ2N1TDE5a1lYUmxMWFJ2TFhCeWFXMXBkR2wyWlNjcEtUc2lMQ0oyWVhJZ1JHRjBaVkJ5YjNSdklDQWdJRDBnUkdGMFpTNXdjbTkwYjNSNWNHVmNiaUFnTENCSlRsWkJURWxFWDBSQlZFVWdQU0FuU1c1MllXeHBaQ0JFWVhSbEoxeHVJQ0FzSUZSUFgxTlVVa2xPUnlBZ0lDQTlJQ2QwYjFOMGNtbHVaeWRjYmlBZ0xDQWtkRzlUZEhKcGJtY2dJQ0FnUFNCRVlYUmxVSEp2ZEc5YlZFOWZVMVJTU1U1SFhWeHVJQ0FzSUdkbGRGUnBiV1VnSUNBZ0lDQTlJRVJoZEdWUWNtOTBieTVuWlhSVWFXMWxPMXh1YVdZb2JtVjNJRVJoZEdVb1RtRk9LU0FySUNjbklDRTlJRWxPVmtGTVNVUmZSRUZVUlNsN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlrb1JHRjBaVkJ5YjNSdkxDQlVUMTlUVkZKSlRrY3NJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5LQ2w3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnWjJWMFZHbHRaUzVqWVd4c0tIUm9hWE1wTzF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlNBOVBUMGdkbUZzZFdVZ1B5QWtkRzlUZEhKcGJtY3VZMkZzYkNoMGFHbHpLU0E2SUVsT1ZrRk1TVVJmUkVGVVJUdGNiaUFnZlNrN1hHNTlJaXdpTHk4Z01Ua3VNaTR6TGpJZ0x5QXhOUzR6TGpRdU5TQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVXVZbWx1WkNoMGFHbHpRWEpuTENCaGNtZHpMaTR1S1Z4eVhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHlYRzVjY2x4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZEdkVzVqZEdsdmJpY3NJSHRpYVc1a09pQnlaWEYxYVhKbEtDY3VMMTlpYVc1a0p5bDlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2FYTlBZbXBsWTNRZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2dTRUZUWDBsT1UxUkJUa05GSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hR0Z6U1c1emRHRnVZMlVuS1Z4dUlDQXNJRVoxYm1OMGFXOXVVSEp2ZEc4Z0lEMGdSblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxPMXh1THk4Z01Ua3VNaTR6TGpZZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbFcwQkFhR0Z6U1c1emRHRnVZMlZkS0ZZcFhHNXBaaWdoS0VoQlUxOUpUbE5VUVU1RFJTQnBiaUJHZFc1amRHbHZibEJ5YjNSdktTbHlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bUtFWjFibU4wYVc5dVVISnZkRzhzSUVoQlUxOUpUbE5VUVU1RFJTd2dlM1poYkhWbE9pQm1kVzVqZEdsdmJpaFBLWHRjYmlBZ2FXWW9kSGx3Wlc5bUlIUm9hWE1nSVQwZ0oyWjFibU4wYVc5dUp5QjhmQ0FoYVhOUFltcGxZM1FvVHlrcGNtVjBkWEp1SUdaaGJITmxPMXh1SUNCcFppZ2hhWE5QWW1wbFkzUW9kR2hwY3k1d2NtOTBiM1I1Y0dVcEtYSmxkSFZ5YmlCUElHbHVjM1JoYm1ObGIyWWdkR2hwY3p0Y2JpQWdMeThnWm05eUlHVnVkbWx5YjI1dFpXNTBJSGN2YnlCdVlYUnBkbVVnWUVCQWFHRnpTVzV6ZEdGdVkyVmdJR3h2WjJsaklHVnViM1ZuYUNCZ2FXNXpkR0Z1WTJWdlptQXNJR0oxZENCaFpHUWdkR2hwY3pwY2JpQWdkMmhwYkdVb1R5QTlJR2RsZEZCeWIzUnZkSGx3WlU5bUtFOHBLV2xtS0hSb2FYTXVjSEp2ZEc5MGVYQmxJRDA5UFNCUEtYSmxkSFZ5YmlCMGNuVmxPMXh1SUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzU5ZlNrN0lpd2lkbUZ5SUdSUUlDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bVhHNGdJQ3dnWTNKbFlYUmxSR1Z6WXlBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUVaUWNtOTBieUFnSUNBZ1BTQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVmNiaUFnTENCdVlXMWxVa1VnSUNBZ0lEMGdMMTVjWEhNcVpuVnVZM1JwYjI0Z0tGdGVJQ2hkS2lrdlhHNGdJQ3dnVGtGTlJTQWdJQ0FnSUNBOUlDZHVZVzFsSnp0Y2JseHVkbUZ5SUdselJYaDBaVzV6YVdKc1pTQTlJRTlpYW1WamRDNXBjMFY0ZEdWdWMybGliR1VnZkh3Z1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlPMXh1WEc0dkx5QXhPUzR5TGpRdU1pQnVZVzFsWEc1T1FVMUZJR2x1SUVaUWNtOTBieUI4ZkNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUNZbUlHUlFLRVpRY205MGJ5d2dUa0ZOUlN3Z2UxeHVJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2RtRnlJSFJvWVhRZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FnSUN3Z2JtRnRaU0E5SUNnbkp5QXJJSFJvWVhRcExtMWhkR05vS0c1aGJXVlNSU2xiTVYwN1hHNGdJQ0FnSUNCb1lYTW9kR2hoZEN3Z1RrRk5SU2tnZkh3Z0lXbHpSWGgwWlc1emFXSnNaU2gwYUdGMEtTQjhmQ0JrVUNoMGFHRjBMQ0JPUVUxRkxDQmpjbVZoZEdWRVpYTmpLRFVzSUc1aGJXVXBLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnVZVzFsTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmVnh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2MzUnliMjVuSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTF6ZEhKdmJtY25LVHRjYmx4dUx5OGdNak11TVNCTllYQWdUMkpxWldOMGMxeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1Snlrb0owMWhjQ2NzSUdaMWJtTjBhVzl1S0dkbGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJOWVhBb0tYc2djbVYwZFhKdUlHZGxkQ2gwYUdsekxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNQ0EvSUdGeVozVnRaVzUwYzFzd1hTQTZJSFZ1WkdWbWFXNWxaQ2s3SUgwN1hHNTlMQ0I3WEc0Z0lDOHZJREl6TGpFdU15NDJJRTFoY0M1d2NtOTBiM1I1Y0dVdVoyVjBLR3RsZVNsY2JpQWdaMlYwT2lCbWRXNWpkR2x2YmlCblpYUW9hMlY1S1h0Y2JpQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCemRISnZibWN1WjJWMFJXNTBjbmtvZEdocGN5d2dhMlY1S1R0Y2JpQWdJQ0J5WlhSMWNtNGdaVzUwY25rZ0ppWWdaVzUwY25rdWRqdGNiaUFnZlN4Y2JpQWdMeThnTWpNdU1TNHpMamtnVFdGd0xuQnliM1J2ZEhsd1pTNXpaWFFvYTJWNUxDQjJZV3gxWlNsY2JpQWdjMlYwT2lCbWRXNWpkR2x2YmlCelpYUW9hMlY1TENCMllXeDFaU2w3WEc0Z0lDQWdjbVYwZFhKdUlITjBjbTl1Wnk1a1pXWW9kR2hwY3l3Z2EyVjVJRDA5UFNBd0lEOGdNQ0E2SUd0bGVTd2dkbUZzZFdVcE8xeHVJQ0I5WEc1OUxDQnpkSEp2Ym1jc0lIUnlkV1VwT3lJc0lpOHZJREl3TGpJdU1pNHpJRTFoZEdndVlXTnZjMmdvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JzYjJjeGNDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXRjBhQzFzYjJjeGNDY3BYRzRnSUN3Z2MzRnlkQ0FnSUNBOUlFMWhkR2d1YzNGeWRGeHVJQ0FzSUNSaFkyOXphQ0FnUFNCTllYUm9MbUZqYjNOb08xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRW9KR0ZqYjNOb1hHNGdJQzh2SUZZNElHSjFaem9nYUhSMGNITTZMeTlqYjJSbExtZHZiMmRzWlM1amIyMHZjQzkyT0M5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRNMU1EbGNiaUFnSmlZZ1RXRjBhQzVtYkc5dmNpZ2tZV052YzJnb1RuVnRZbVZ5TGsxQldGOVdRVXhWUlNrcElEMDlJRGN4TUZ4dUlDQXZMeUJVYjNJZ1FuSnZkM05sY2lCaWRXYzZJRTFoZEdndVlXTnZjMmdvU1c1bWFXNXBkSGtwSUMwK0lFNWhUaUJjYmlBZ0ppWWdKR0ZqYjNOb0tFbHVabWx1YVhSNUtTQTlQU0JKYm1acGJtbDBlVnh1S1N3Z0owMWhkR2duTENCN1hHNGdJR0ZqYjNOb09pQm1kVzVqZEdsdmJpQmhZMjl6YUNoNEtYdGNiaUFnSUNCeVpYUjFjbTRnS0hnZ1BTQXJlQ2tnUENBeElEOGdUbUZPSURvZ2VDQStJRGswT1RBMk1qWTFMall5TkRJMU1UVTJYRzRnSUNBZ0lDQS9JRTFoZEdndWJHOW5LSGdwSUNzZ1RXRjBhQzVNVGpKY2JpQWdJQ0FnSURvZ2JHOW5NWEFvZUNBdElERWdLeUJ6Y1hKMEtIZ2dMU0F4S1NBcUlITnhjblFvZUNBcklERXBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqVWdUV0YwYUM1aGMybHVhQ2g0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1JoYzJsdWFDQWdQU0JOWVhSb0xtRnphVzVvTzF4dVhHNW1kVzVqZEdsdmJpQmhjMmx1YUNoNEtYdGNiaUFnY21WMGRYSnVJQ0ZwYzBacGJtbDBaU2g0SUQwZ0szZ3BJSHg4SUhnZ1BUMGdNQ0EvSUhnZ09pQjRJRHdnTUNBL0lDMWhjMmx1YUNndGVDa2dPaUJOWVhSb0xteHZaeWg0SUNzZ1RXRjBhQzV6Y1hKMEtIZ2dLaUI0SUNzZ01Ta3BPMXh1ZlZ4dVhHNHZMeUJVYjNJZ1FuSnZkM05sY2lCaWRXYzZJRTFoZEdndVlYTnBibWdvTUNrZ0xUNGdMVEFnWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0VvSkdGemFXNW9JQ1ltSURFZ0x5QWtZWE5wYm1nb01Da2dQaUF3S1N3Z0owMWhkR2duTENCN1lYTnBibWc2SUdGemFXNW9mU2s3SWl3aUx5OGdNakF1TWk0eUxqY2dUV0YwYUM1aGRHRnVhQ2g0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1JoZEdGdWFDQWdQU0JOWVhSb0xtRjBZVzVvTzF4dVhHNHZMeUJVYjNJZ1FuSnZkM05sY2lCaWRXYzZJRTFoZEdndVlYUmhibWdvTFRBcElDMCtJREFnWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0VvSkdGMFlXNW9JQ1ltSURFZ0x5QWtZWFJoYm1nb0xUQXBJRHdnTUNrc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JoZEdGdWFEb2dablZ1WTNScGIyNGdZWFJoYm1nb2VDbDdYRzRnSUNBZ2NtVjBkWEp1SUNoNElEMGdLM2dwSUQwOUlEQWdQeUI0SURvZ1RXRjBhQzVzYjJjb0tERWdLeUI0S1NBdklDZ3hJQzBnZUNrcElDOGdNanRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqa2dUV0YwYUM1alluSjBLSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djMmxuYmlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxaGRHZ3RjMmxuYmljcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3WEc0Z0lHTmljblE2SUdaMWJtTjBhVzl1SUdOaWNuUW9lQ2w3WEc0Z0lDQWdjbVYwZFhKdUlITnBaMjRvZUNBOUlDdDRLU0FxSUUxaGRHZ3VjRzkzS0UxaGRHZ3VZV0p6S0hncExDQXhJQzhnTXlrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTR4TVNCTllYUm9MbU5zZWpNeUtIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN1hHNGdJR05zZWpNeU9pQm1kVzVqZEdsdmJpQmpiSG96TWloNEtYdGNiaUFnSUNCeVpYUjFjbTRnS0hnZ1BqNCtQU0F3S1NBL0lETXhJQzBnVFdGMGFDNW1iRzl2Y2loTllYUm9MbXh2WnloNElDc2dNQzQxS1NBcUlFMWhkR2d1VEU5SE1rVXBJRG9nTXpJN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTR4TWlCTllYUm9MbU52YzJnb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCbGVIQWdJQ0FnSUQwZ1RXRjBhQzVsZUhBN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ1kyOXphRG9nWm5WdVkzUnBiMjRnWTI5emFDaDRLWHRjYmlBZ0lDQnlaWFIxY200Z0tHVjRjQ2g0SUQwZ0szZ3BJQ3NnWlhod0tDMTRLU2tnTHlBeU8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TVRRZ1RXRjBhQzVsZUhCdE1TaDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUmxlSEJ0TVNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WVhSb0xXVjRjRzB4SnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tDUmxlSEJ0TVNBaFBTQk5ZWFJvTG1WNGNHMHhLU3dnSjAxaGRHZ25MQ0I3Wlhod2JURTZJQ1JsZUhCdE1YMHBPeUlzSWk4dklESXdMakl1TWk0eE5pQk5ZWFJvTG1aeWIzVnVaQ2g0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnYzJsbmJpQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV0YwYUMxemFXZHVKeWxjYmlBZ0xDQndiM2NnSUNBZ0lDQWdQU0JOWVhSb0xuQnZkMXh1SUNBc0lFVlFVMGxNVDA0Z0lDQTlJSEJ2ZHlneUxDQXROVElwWEc0Z0lDd2dSVkJUU1V4UFRqTXlJRDBnY0c5M0tESXNJQzB5TXlsY2JpQWdMQ0JOUVZnek1pQWdJQ0FnUFNCd2IzY29NaXdnTVRJM0tTQXFJQ2d5SUMwZ1JWQlRTVXhQVGpNeUtWeHVJQ0FzSUUxSlRqTXlJQ0FnSUNBOUlIQnZkeWd5TENBdE1USTJLVHRjYmx4dWRtRnlJSEp2ZFc1a1ZHbGxjMVJ2UlhabGJpQTlJR1oxYm1OMGFXOXVLRzRwZTF4dUlDQnlaWFIxY200Z2JpQXJJREVnTHlCRlVGTkpURTlPSUMwZ01TQXZJRVZRVTBsTVQwNDdYRzU5TzF4dVhHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ1puSnZkVzVrT2lCbWRXNWpkR2x2YmlCbWNtOTFibVFvZUNsN1hHNGdJQ0FnZG1GeUlDUmhZbk1nSUQwZ1RXRjBhQzVoWW5Nb2VDbGNiaUFnSUNBZ0lDd2dKSE5wWjI0Z1BTQnphV2R1S0hncFhHNGdJQ0FnSUNBc0lHRXNJSEpsYzNWc2REdGNiaUFnSUNCcFppZ2tZV0p6SUR3Z1RVbE9NeklwY21WMGRYSnVJQ1J6YVdkdUlDb2djbTkxYm1SVWFXVnpWRzlGZG1WdUtDUmhZbk1nTHlCTlNVNHpNaUF2SUVWUVUwbE1UMDR6TWlrZ0tpQk5TVTR6TWlBcUlFVlFVMGxNVDA0ek1qdGNiaUFnSUNCaElEMGdLREVnS3lCRlVGTkpURTlPTXpJZ0x5QkZVRk5KVEU5T0tTQXFJQ1JoWW5NN1hHNGdJQ0FnY21WemRXeDBJRDBnWVNBdElDaGhJQzBnSkdGaWN5azdYRzRnSUNBZ2FXWW9jbVZ6ZFd4MElENGdUVUZZTXpJZ2ZId2djbVZ6ZFd4MElDRTlJSEpsYzNWc2RDbHlaWFIxY200Z0pITnBaMjRnS2lCSmJtWnBibWwwZVR0Y2JpQWdJQ0J5WlhSMWNtNGdKSE5wWjI0Z0tpQnlaWE4xYkhRN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTR4TnlCTllYUm9MbWg1Y0c5MEtGdDJZV3gxWlRGYkxDQjJZV3gxWlRKYkxDRGlnS1lnWFYxZEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdGaWN5QWdJQ0FnUFNCTllYUm9MbUZpY3p0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2ROWVhSb0p5d2dlMXh1SUNCb2VYQnZkRG9nWm5WdVkzUnBiMjRnYUhsd2IzUW9kbUZzZFdVeExDQjJZV3gxWlRJcGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2RtRnlJSE4xYlNBZ1BTQXdYRzRnSUNBZ0lDQXNJR2tnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR0ZNWlc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb1hHNGdJQ0FnSUNBc0lHeGhjbWNnUFNBd1hHNGdJQ0FnSUNBc0lHRnlaeXdnWkdsMk8xeHVJQ0FnSUhkb2FXeGxLR2tnUENCaFRHVnVLWHRjYmlBZ0lDQWdJR0Z5WnlBOUlHRmljeWhoY21kMWJXVnVkSE5iYVNzclhTazdYRzRnSUNBZ0lDQnBaaWhzWVhKbklEd2dZWEpuS1h0Y2JpQWdJQ0FnSUNBZ1pHbDJJQ0E5SUd4aGNtY2dMeUJoY21jN1hHNGdJQ0FnSUNBZ0lITjFiU0FnUFNCemRXMGdLaUJrYVhZZ0tpQmthWFlnS3lBeE8xeHVJQ0FnSUNBZ0lDQnNZWEpuSUQwZ1lYSm5PMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1LR0Z5WnlBK0lEQXBlMXh1SUNBZ0lDQWdJQ0JrYVhZZ0lEMGdZWEpuSUM4Z2JHRnlaenRjYmlBZ0lDQWdJQ0FnYzNWdElDczlJR1JwZGlBcUlHUnBkanRjYmlBZ0lDQWdJSDBnWld4elpTQnpkVzBnS3owZ1lYSm5PMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYkdGeVp5QTlQVDBnU1c1bWFXNXBkSGtnUHlCSmJtWnBibWwwZVNBNklHeGhjbWNnS2lCTllYUm9Mbk54Y25Rb2MzVnRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqRTRJRTFoZEdndWFXMTFiQ2g0TENCNUtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNScGJYVnNJQ0FnUFNCTllYUm9MbWx0ZFd3N1hHNWNiaTh2SUhOdmJXVWdWMlZpUzJsMElIWmxjbk5wYjI1eklHWmhhV3h6SUhkcGRHZ2dZbWxuSUc1MWJXSmxjbk1zSUhOdmJXVWdhR0Z6SUhkeWIyNW5JR0Z5YVhSNVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJQ1JwYlhWc0tEQjRabVptWm1abVptWXNJRFVwSUNFOUlDMDFJSHg4SUNScGJYVnNMbXhsYm1kMGFDQWhQU0F5TzF4dWZTa3NJQ2ROWVhSb0p5d2dlMXh1SUNCcGJYVnNPaUJtZFc1amRHbHZiaUJwYlhWc0tIZ3NJSGtwZTF4dUlDQWdJSFpoY2lCVlNVNVVNVFlnUFNBd2VHWm1abVpjYmlBZ0lDQWdJQ3dnZUc0Z1BTQXJlRnh1SUNBZ0lDQWdMQ0I1YmlBOUlDdDVYRzRnSUNBZ0lDQXNJSGhzSUQwZ1ZVbE9WREUySUNZZ2VHNWNiaUFnSUNBZ0lDd2dlV3dnUFNCVlNVNVVNVFlnSmlCNWJqdGNiaUFnSUNCeVpYUjFjbTRnTUNCOElIaHNJQ29nZVd3Z0t5QW9LRlZKVGxReE5pQW1JSGh1SUQ0K1BpQXhOaWtnS2lCNWJDQXJJSGhzSUNvZ0tGVkpUbFF4TmlBbUlIbHVJRDQrUGlBeE5pa2dQRHdnTVRZZ1BqNCtJREFwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNakVnVFdGMGFDNXNiMmN4TUNoNEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQnNiMmN4TURvZ1puVnVZM1JwYjI0Z2JHOW5NVEFvZUNsN1hHNGdJQ0FnY21WMGRYSnVJRTFoZEdndWJHOW5LSGdwSUM4Z1RXRjBhQzVNVGpFd08xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TWpBZ1RXRjBhQzVzYjJjeGNDaDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UyeHZaekZ3T2lCeVpYRjFhWEpsS0NjdUwxOXRZWFJvTFd4dlp6RndKeWw5S1RzaUxDSXZMeUF5TUM0eUxqSXVNaklnVFdGMGFDNXNiMmN5S0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3WEc0Z0lHeHZaekk2SUdaMWJtTjBhVzl1SUd4dlp6SW9lQ2w3WEc0Z0lDQWdjbVYwZFhKdUlFMWhkR2d1Ykc5bktIZ3BJQzhnVFdGMGFDNU1Uakk3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpJdU1pNHlPQ0JOWVhSb0xuTnBaMjRvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHR6YVdkdU9pQnlaWEYxYVhKbEtDY3VMMTl0WVhSb0xYTnBaMjRuS1gwcE95SXNJaTh2SURJd0xqSXVNaTR6TUNCTllYUm9Mbk5wYm1nb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCbGVIQnRNU0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV0YwYUMxbGVIQnRNU2NwWEc0Z0lDd2daWGh3SUNBZ0lDQTlJRTFoZEdndVpYaHdPMXh1WEc0dkx5QldPQ0J1WldGeUlFTm9jbTl0YVhWdElETTRJR2hoY3lCaElIQnliMkpzWlcwZ2QybDBhQ0IyWlhKNUlITnRZV3hzSUc1MWJXSmxjbk5jYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z0lVMWhkR2d1YzJsdWFDZ3RNbVV0TVRjcElDRTlJQzB5WlMweE56dGNibjBwTENBblRXRjBhQ2NzSUh0Y2JpQWdjMmx1YURvZ1puVnVZM1JwYjI0Z2MybHVhQ2g0S1h0Y2JpQWdJQ0J5WlhSMWNtNGdUV0YwYUM1aFluTW9lQ0E5SUN0NEtTQThJREZjYmlBZ0lDQWdJRDhnS0dWNGNHMHhLSGdwSUMwZ1pYaHdiVEVvTFhncEtTQXZJREpjYmlBZ0lDQWdJRG9nS0dWNGNDaDRJQzBnTVNrZ0xTQmxlSEFvTFhnZ0xTQXhLU2tnS2lBb1RXRjBhQzVGSUM4Z01pazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakl1TWk0ek15Qk5ZWFJvTG5SaGJtZ29lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmxlSEJ0TVNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldGMGFDMWxlSEJ0TVNjcFhHNGdJQ3dnWlhod0lDQWdJQ0E5SUUxaGRHZ3VaWGh3TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUhSaGJtZzZJR1oxYm1OMGFXOXVJSFJoYm1nb2VDbDdYRzRnSUNBZ2RtRnlJR0VnUFNCbGVIQnRNU2g0SUQwZ0szZ3BYRzRnSUNBZ0lDQXNJR0lnUFNCbGVIQnRNU2d0ZUNrN1hHNGdJQ0FnY21WMGRYSnVJR0VnUFQwZ1NXNW1hVzVwZEhrZ1B5QXhJRG9nWWlBOVBTQkpibVpwYm1sMGVTQS9JQzB4SURvZ0tHRWdMU0JpS1NBdklDaGxlSEFvZUNrZ0t5QmxlSEFvTFhncEtUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNaTR5TGpNMElFMWhkR2d1ZEhKMWJtTW9lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnZEhKMWJtTTZJR1oxYm1OMGFXOXVJSFJ5ZFc1aktHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z0tHbDBJRDRnTUNBL0lFMWhkR2d1Wm14dmIzSWdPaUJOWVhSb0xtTmxhV3dwS0dsMEtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCb1lYTWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnWTI5bUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Z4dUlDQXNJR2x1YUdWeWFYUkpabEpsY1hWcGNtVmtJRDBnY21WeGRXbHlaU2duTGk5ZmFXNW9aWEpwZEMxcFppMXlaWEYxYVhKbFpDY3BYRzRnSUN3Z2RHOVFjbWx0YVhScGRtVWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHVJQ0FzSUdaaGFXeHpJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUdkUFVFNGdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzRuS1M1bVhHNGdJQ3dnWjA5UVJDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwTG1aY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQWtkSEpwYlNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTEwY21sdEp5a3VkSEpwYlZ4dUlDQXNJRTVWVFVKRlVpQWdJQ0FnSUNBZ0lDQWdJRDBnSjA1MWJXSmxjaWRjYmlBZ0xDQWtUblZ0WW1WeUlDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJGdE9WVTFDUlZKZFhHNGdJQ3dnUW1GelpTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1RuVnRZbVZ5WEc0Z0lDd2djSEp2ZEc4Z0lDQWdJQ0FnSUNBZ0lDQWdQU0FrVG5WdFltVnlMbkJ5YjNSdmRIbHdaVnh1SUNBdkx5QlBjR1Z5WVNCK01USWdhR0Z6SUdKeWIydGxiaUJQWW1wbFkzUWpkRzlUZEhKcGJtZGNiaUFnTENCQ1VrOUxSVTVmUTA5R0lDQWdJQ0FnSUNBOUlHTnZaaWh5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWtvY0hKdmRHOHBLU0E5UFNCT1ZVMUNSVkpjYmlBZ0xDQlVVa2xOSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJQ2QwY21sdEp5QnBiaUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxPMXh1WEc0dkx5QTNMakV1TXlCVWIwNTFiV0psY2loaGNtZDFiV1Z1ZENsY2JuWmhjaUIwYjA1MWJXSmxjaUE5SUdaMWJtTjBhVzl1S0dGeVozVnRaVzUwS1h0Y2JpQWdkbUZ5SUdsMElEMGdkRzlRY21sdGFYUnBkbVVvWVhKbmRXMWxiblFzSUdaaGJITmxLVHRjYmlBZ2FXWW9kSGx3Wlc5bUlHbDBJRDA5SUNkemRISnBibWNuSUNZbUlHbDBMbXhsYm1kMGFDQStJRElwZTF4dUlDQWdJR2wwSUQwZ1ZGSkpUU0EvSUdsMExuUnlhVzBvS1NBNklDUjBjbWx0S0dsMExDQXpLVHRjYmlBZ0lDQjJZWElnWm1seWMzUWdQU0JwZEM1amFHRnlRMjlrWlVGMEtEQXBYRzRnSUNBZ0lDQXNJSFJvYVhKa0xDQnlZV1JwZUN3Z2JXRjRRMjlrWlR0Y2JpQWdJQ0JwWmlobWFYSnpkQ0E5UFQwZ05ETWdmSHdnWm1seWMzUWdQVDA5SURRMUtYdGNiaUFnSUNBZ0lIUm9hWEprSUQwZ2FYUXVZMmhoY2tOdlpHVkJkQ2d5S1R0Y2JpQWdJQ0FnSUdsbUtIUm9hWEprSUQwOVBTQTRPQ0I4ZkNCMGFHbHlaQ0E5UFQwZ01USXdLWEpsZEhWeWJpQk9ZVTQ3SUM4dklFNTFiV0psY2lnbkt6QjRNU2NwSUhOb2IzVnNaQ0JpWlNCT1lVNHNJRzlzWkNCV09DQm1hWGhjYmlBZ0lDQjlJR1ZzYzJVZ2FXWW9abWx5YzNRZ1BUMDlJRFE0S1h0Y2JpQWdJQ0FnSUhOM2FYUmphQ2hwZEM1amFHRnlRMjlrWlVGMEtERXBLWHRjYmlBZ0lDQWdJQ0FnWTJGelpTQTJOaUE2SUdOaGMyVWdPVGdnSURvZ2NtRmthWGdnUFNBeU95QnRZWGhEYjJSbElEMGdORGs3SUdKeVpXRnJPeUF2THlCbVlYTjBJR1Z4ZFdGc0lDOWVNR0piTURGZEt5UXZhVnh1SUNBZ0lDQWdJQ0JqWVhObElEYzVJRG9nWTJGelpTQXhNVEVnT2lCeVlXUnBlQ0E5SURnN0lHMWhlRU52WkdVZ1BTQTFOVHNnWW5KbFlXczdJQzh2SUdaaGMzUWdaWEYxWVd3Z0wxNHdiMXN3TFRkZEt5UXZhVnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBJRG9nY21WMGRYSnVJQ3RwZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdadmNpaDJZWElnWkdsbmFYUnpJRDBnYVhRdWMyeHBZMlVvTWlrc0lHa2dQU0F3TENCc0lEMGdaR2xuYVhSekxteGxibWQwYUN3Z1kyOWtaVHNnYVNBOElHdzdJR2tyS3lsN1hHNGdJQ0FnSUNBZ0lHTnZaR1VnUFNCa2FXZHBkSE11WTJoaGNrTnZaR1ZCZENocEtUdGNiaUFnSUNBZ0lDQWdMeThnY0dGeWMyVkpiblFnY0dGeWMyVnpJR0VnYzNSeWFXNW5JSFJ2SUdFZ1ptbHljM1FnZFc1aGRtRnBiR0ZpYkdVZ2MzbHRZbTlzWEc0Z0lDQWdJQ0FnSUM4dklHSjFkQ0JVYjA1MWJXSmxjaUJ6YUc5MWJHUWdjbVYwZFhKdUlFNWhUaUJwWmlCaElITjBjbWx1WnlCamIyNTBZV2x1Y3lCMWJtRjJZV2xzWVdKc1pTQnplVzFpYjJ4elhHNGdJQ0FnSUNBZ0lHbG1LR052WkdVZ1BDQTBPQ0I4ZkNCamIyUmxJRDRnYldGNFEyOWtaU2x5WlhSMWNtNGdUbUZPTzF4dUlDQWdJQ0FnZlNCeVpYUjFjbTRnY0dGeWMyVkpiblFvWkdsbmFYUnpMQ0J5WVdScGVDazdYRzRnSUNBZ2ZWeHVJQ0I5SUhKbGRIVnliaUFyYVhRN1hHNTlPMXh1WEc1cFppZ2hKRTUxYldKbGNpZ25JREJ2TVNjcElIeDhJQ0VrVG5WdFltVnlLQ2N3WWpFbktTQjhmQ0FrVG5WdFltVnlLQ2NyTUhneEp5a3BlMXh1SUNBa1RuVnRZbVZ5SUQwZ1puVnVZM1JwYjI0Z1RuVnRZbVZ5S0haaGJIVmxLWHRjYmlBZ0lDQjJZWElnYVhRZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEd2dNU0EvSURBZ09pQjJZV3gxWlZ4dUlDQWdJQ0FnTENCMGFHRjBJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnZEdoaGRDQnBibk4wWVc1alpXOW1JQ1JPZFcxaVpYSmNiaUFnSUNBZ0lDOHZJR05vWldOcklHOXVJREV1TG1OdmJuTjBjblZqZEc5eUtHWnZieWtnWTJGelpWeHVJQ0FnSUNBZ0ppWWdLRUpTVDB0RlRsOURUMFlnUHlCbVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCd2NtOTBieTUyWVd4MVpVOW1MbU5oYkd3b2RHaGhkQ2s3SUgwcElEb2dZMjltS0hSb1lYUXBJQ0U5SUU1VlRVSkZVaWxjYmlBZ0lDQWdJQ0FnUHlCcGJtaGxjbWwwU1daU1pYRjFhWEpsWkNodVpYY2dRbUZ6WlNoMGIwNTFiV0psY2locGRDa3BMQ0IwYUdGMExDQWtUblZ0WW1WeUtTQTZJSFJ2VG5WdFltVnlLR2wwS1R0Y2JpQWdmVHRjYmlBZ1ptOXlLSFpoY2lCclpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUdkUFVFNG9RbUZ6WlNrZ09pQW9YRzRnSUNBZ0x5OGdSVk16T2x4dUlDQWdJQ2ROUVZoZlZrRk1WVVVzVFVsT1gxWkJURlZGTEU1aFRpeE9SVWRCVkVsV1JWOUpUa1pKVGtsVVdTeFFUMU5KVkVsV1JWOUpUa1pKVGtsVVdTd25JQ3RjYmlBZ0lDQXZMeUJGVXpZZ0tHbHVJR05oYzJVc0lHbG1JRzF2WkhWc1pYTWdkMmwwYUNCRlV6WWdUblZ0WW1WeUlITjBZWFJwWTNNZ2NtVnhkV2x5WldRZ1ltVm1iM0psS1RwY2JpQWdJQ0FuUlZCVFNVeFBUaXhwYzBacGJtbDBaU3hwYzBsdWRHVm5aWElzYVhOT1lVNHNhWE5UWVdabFNXNTBaV2RsY2l4TlFWaGZVMEZHUlY5SlRsUkZSMFZTTENjZ0sxeHVJQ0FnSUNkTlNVNWZVMEZHUlY5SlRsUkZSMFZTTEhCaGNuTmxSbXh2WVhRc2NHRnljMlZKYm5Rc2FYTkpiblJsWjJWeUoxeHVJQ0FwTG5Od2JHbDBLQ2NzSnlrc0lHb2dQU0F3TENCclpYazdJR3RsZVhNdWJHVnVaM1JvSUQ0Z2Fqc2dhaXNyS1h0Y2JpQWdJQ0JwWmlob1lYTW9RbUZ6WlN3Z2EyVjVJRDBnYTJWNWMxdHFYU2tnSmlZZ0lXaGhjeWdrVG5WdFltVnlMQ0JyWlhrcEtYdGNiaUFnSUNBZ0lHUlFLQ1JPZFcxaVpYSXNJR3RsZVN3Z1owOVFSQ2hDWVhObExDQnJaWGtwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnSkU1MWJXSmxjaTV3Y205MGIzUjVjR1VnUFNCd2NtOTBienRjYmlBZ2NISnZkRzh1WTI5dWMzUnlkV04wYjNJZ1BTQWtUblZ0WW1WeU8xeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcEtHZHNiMkpoYkN3Z1RsVk5Ra1ZTTENBa1RuVnRZbVZ5S1R0Y2JuMGlMQ0l2THlBeU1DNHhMakl1TVNCT2RXMWlaWEl1UlZCVFNVeFBUbHh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE9kVzFpWlhJbkxDQjdSVkJUU1V4UFRqb2dUV0YwYUM1d2IzY29NaXdnTFRVeUtYMHBPeUlzSWk4dklESXdMakV1TWk0eUlFNTFiV0psY2k1cGMwWnBibWwwWlNodWRXMWlaWElwWEc1MllYSWdKR1Y0Y0c5eWRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JmYVhOR2FXNXBkR1VnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktTNXBjMFpwYm1sMFpUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkT2RXMWlaWEluTENCN1hHNGdJR2x6Um1sdWFYUmxPaUJtZFc1amRHbHZiaUJwYzBacGJtbDBaU2hwZENsN1hHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQnBkQ0E5UFNBbmJuVnRZbVZ5SnlBbUppQmZhWE5HYVc1cGRHVW9hWFFwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eExqSXVNeUJPZFcxaVpYSXVhWE5KYm5SbFoyVnlLRzUxYldKbGNpbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRuVnRZbVZ5Snl3Z2UybHpTVzUwWldkbGNqb2djbVZ4ZFdseVpTZ25MaTlmYVhNdGFXNTBaV2RsY2ljcGZTazdJaXdpTHk4Z01qQXVNUzR5TGpRZ1RuVnRZbVZ5TG1selRtRk9LRzUxYldKbGNpbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRuVnRZbVZ5Snl3Z2UxeHVJQ0JwYzA1aFRqb2dablZ1WTNScGIyNGdhWE5PWVU0b2JuVnRZbVZ5S1h0Y2JpQWdJQ0J5WlhSMWNtNGdiblZ0WW1WeUlDRTlJRzUxYldKbGNqdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qQXVNUzR5TGpVZ1RuVnRZbVZ5TG1selUyRm1aVWx1ZEdWblpYSW9iblZ0WW1WeUtWeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2FYTkpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGFXNTBaV2RsY2ljcFhHNGdJQ3dnWVdKeklDQWdJQ0FnSUQwZ1RXRjBhQzVoWW5NN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVG5WdFltVnlKeXdnZTF4dUlDQnBjMU5oWm1WSmJuUmxaMlZ5T2lCbWRXNWpkR2x2YmlCcGMxTmhabVZKYm5SbFoyVnlLRzUxYldKbGNpbDdYRzRnSUNBZ2NtVjBkWEp1SUdselNXNTBaV2RsY2lodWRXMWlaWElwSUNZbUlHRmljeWh1ZFcxaVpYSXBJRHc5SURCNE1XWm1abVptWm1abVptWm1abVk3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl3TGpFdU1pNDJJRTUxYldKbGNpNU5RVmhmVTBGR1JWOUpUbFJGUjBWU1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA1MWJXSmxjaWNzSUh0TlFWaGZVMEZHUlY5SlRsUkZSMFZTT2lBd2VERm1abVptWm1abVptWm1abVptZlNrN0lpd2lMeThnTWpBdU1TNHlMakV3SUU1MWJXSmxjaTVOU1U1ZlUwRkdSVjlKVGxSRlIwVlNYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owNTFiV0psY2ljc0lIdE5TVTVmVTBGR1JWOUpUbFJGUjBWU09pQXRNSGd4Wm1abVptWm1abVptWm1abVpuMHBPeUlzSW5aaGNpQWtaWGh3YjNKMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkhCaGNuTmxSbXh2WVhRZ1BTQnlaWEYxYVhKbEtDY3VMMTl3WVhKelpTMW1iRzloZENjcE8xeHVMeThnTWpBdU1TNHlMakV5SUU1MWJXSmxjaTV3WVhKelpVWnNiMkYwS0hOMGNtbHVaeWxjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRTUxYldKbGNpNXdZWEp6WlVac2IyRjBJQ0U5SUNSd1lYSnpaVVpzYjJGMEtTd2dKMDUxYldKbGNpY3NJSHR3WVhKelpVWnNiMkYwT2lBa2NHRnljMlZHYkc5aGRIMHBPeUlzSW5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1J3WVhKelpVbHVkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzQmhjbk5sTFdsdWRDY3BPMXh1THk4Z01qQXVNUzR5TGpFeklFNTFiV0psY2k1d1lYSnpaVWx1ZENoemRISnBibWNzSUhKaFpHbDRLVnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQW9UblZ0WW1WeUxuQmhjbk5sU1c1MElDRTlJQ1J3WVhKelpVbHVkQ2tzSUNkT2RXMWlaWEluTENCN2NHRnljMlZKYm5RNklDUndZWEp6WlVsdWRIMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhISmNiaUFnTENCaGJrbHVjM1JoYm1ObElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYSEpjYmlBZ0xDQjBiMGx1ZEdWblpYSWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjY2x4dUlDQXNJR0ZPZFcxaVpYSldZV3gxWlNBOUlISmxjWFZwY21Vb0p5NHZYMkV0Ym5WdFltVnlMWFpoYkhWbEp5bGNjbHh1SUNBc0lISmxjR1ZoZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxeVpYQmxZWFFuS1Z4eVhHNGdJQ3dnSkhSdlJtbDRaV1FnSUNBZ0lEMGdNUzR1ZEc5R2FYaGxaRnh5WEc0Z0lDd2dabXh2YjNJZ0lDQWdJQ0FnSUQwZ1RXRjBhQzVtYkc5dmNseHlYRzRnSUN3Z1pHRjBZU0FnSUNBZ0lDQWdJRDBnV3pBc0lEQXNJREFzSURBc0lEQXNJREJkWEhKY2JpQWdMQ0JGVWxKUFVpQWdJQ0FnSUNBZ1BTQW5UblZ0WW1WeUxuUnZSbWw0WldRNklHbHVZMjl5Y21WamRDQnBiblp2WTJGMGFXOXVJU2RjY2x4dUlDQXNJRnBGVWs4Z0lDQWdJQ0FnSUNBOUlDY3dKenRjY2x4dVhISmNiblpoY2lCdGRXeDBhWEJzZVNBOUlHWjFibU4wYVc5dUtHNHNJR01wZTF4eVhHNGdJSFpoY2lCcElDQTlJQzB4WEhKY2JpQWdJQ0FzSUdNeUlEMGdZenRjY2x4dUlDQjNhR2xzWlNncksya2dQQ0EyS1h0Y2NseHVJQ0FnSUdNeUlDczlJRzRnS2lCa1lYUmhXMmxkTzF4eVhHNGdJQ0FnWkdGMFlWdHBYU0E5SUdNeUlDVWdNV1UzTzF4eVhHNGdJQ0FnWXpJZ1BTQm1iRzl2Y2loak1pQXZJREZsTnlrN1hISmNiaUFnZlZ4eVhHNTlPMXh5WEc1MllYSWdaR2wyYVdSbElEMGdablZ1WTNScGIyNG9iaWw3WEhKY2JpQWdkbUZ5SUdrZ1BTQTJYSEpjYmlBZ0lDQXNJR01nUFNBd08xeHlYRzRnSUhkb2FXeGxLQzB0YVNBK1BTQXdLWHRjY2x4dUlDQWdJR01nS3owZ1pHRjBZVnRwWFR0Y2NseHVJQ0FnSUdSaGRHRmJhVjBnUFNCbWJHOXZjaWhqSUM4Z2JpazdYSEpjYmlBZ0lDQmpJRDBnS0dNZ0pTQnVLU0FxSURGbE56dGNjbHh1SUNCOVhISmNibjA3WEhKY2JuWmhjaUJ1ZFcxVWIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ2RtRnlJR2tnUFNBMlhISmNiaUFnSUNBc0lITWdQU0FuSnp0Y2NseHVJQ0IzYUdsc1pTZ3RMV2tnUGowZ01DbDdYSEpjYmlBZ0lDQnBaaWh6SUNFOVBTQW5KeUI4ZkNCcElEMDlQU0F3SUh4OElHUmhkR0ZiYVYwZ0lUMDlJREFwZTF4eVhHNGdJQ0FnSUNCMllYSWdkQ0E5SUZOMGNtbHVaeWhrWVhSaFcybGRLVHRjY2x4dUlDQWdJQ0FnY3lBOUlITWdQVDA5SUNjbklEOGdkQ0E2SUhNZ0t5QnlaWEJsWVhRdVkyRnNiQ2hhUlZKUExDQTNJQzBnZEM1c1pXNW5kR2dwSUNzZ2REdGNjbHh1SUNBZ0lIMWNjbHh1SUNCOUlISmxkSFZ5YmlCek8xeHlYRzU5TzF4eVhHNTJZWElnY0c5M0lEMGdablZ1WTNScGIyNG9lQ3dnYml3Z1lXTmpLWHRjY2x4dUlDQnlaWFIxY200Z2JpQTlQVDBnTUNBL0lHRmpZeUE2SUc0Z0pTQXlJRDA5UFNBeElEOGdjRzkzS0hnc0lHNGdMU0F4TENCaFkyTWdLaUI0S1NBNklIQnZkeWg0SUNvZ2VDd2diaUF2SURJc0lHRmpZeWs3WEhKY2JuMDdYSEpjYm5aaGNpQnNiMmNnUFNCbWRXNWpkR2x2YmloNEtYdGNjbHh1SUNCMllYSWdiaUFnUFNBd1hISmNiaUFnSUNBc0lIZ3lJRDBnZUR0Y2NseHVJQ0IzYUdsc1pTaDRNaUErUFNBME1EazJLWHRjY2x4dUlDQWdJRzRnS3owZ01USTdYSEpjYmlBZ0lDQjRNaUF2UFNBME1EazJPMXh5WEc0Z0lIMWNjbHh1SUNCM2FHbHNaU2g0TWlBK1BTQXlLWHRjY2x4dUlDQWdJRzRnSUNzOUlERTdYSEpjYmlBZ0lDQjRNaUF2UFNBeU8xeHlYRzRnSUgwZ2NtVjBkWEp1SUc0N1hISmNibjA3WEhKY2JseHlYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDZ2hJU1IwYjBacGVHVmtJQ1ltSUNoY2NseHVJQ0F3TGpBd01EQTRMblJ2Um1sNFpXUW9NeWtnSVQwOUlDY3dMakF3TUNjZ2ZIeGNjbHh1SUNBd0xqa3VkRzlHYVhobFpDZ3dLU0FoUFQwZ0p6RW5JSHg4WEhKY2JpQWdNUzR5TlRVdWRHOUdhWGhsWkNneUtTQWhQVDBnSnpFdU1qVW5JSHg4WEhKY2JpQWdNVEF3TURBd01EQXdNREF3TURBd01ERXlPQzR1ZEc5R2FYaGxaQ2d3S1NBaFBUMGdKekV3TURBd01EQXdNREF3TURBd01EQXhNamduWEhKY2Jpa2dmSHdnSVhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBdkx5QldPQ0IrSUVGdVpISnZhV1FnTkM0ekxWeHlYRzRnSUNSMGIwWnBlR1ZrTG1OaGJHd29lMzBwTzF4eVhHNTlLU2tzSUNkT2RXMWlaWEluTENCN1hISmNiaUFnZEc5R2FYaGxaRG9nWm5WdVkzUnBiMjRnZEc5R2FYaGxaQ2htY21GamRHbHZia1JwWjJsMGN5bDdYSEpjYmlBZ0lDQjJZWElnZUNBOUlHRk9kVzFpWlhKV1lXeDFaU2gwYUdsekxDQkZVbEpQVWlsY2NseHVJQ0FnSUNBZ0xDQm1JRDBnZEc5SmJuUmxaMlZ5S0daeVlXTjBhVzl1UkdsbmFYUnpLVnh5WEc0Z0lDQWdJQ0FzSUhNZ1BTQW5KMXh5WEc0Z0lDQWdJQ0FzSUcwZ1BTQmFSVkpQWEhKY2JpQWdJQ0FnSUN3Z1pTd2dlaXdnYWl3Z2F6dGNjbHh1SUNBZ0lHbG1LR1lnUENBd0lIeDhJR1lnUGlBeU1DbDBhSEp2ZHlCU1lXNW5aVVZ5Y205eUtFVlNVazlTS1R0Y2NseHVJQ0FnSUdsbUtIZ2dJVDBnZUNseVpYUjFjbTRnSjA1aFRpYzdYSEpjYmlBZ0lDQnBaaWg0SUR3OUlDMHhaVEl4SUh4OElIZ2dQajBnTVdVeU1TbHlaWFIxY200Z1UzUnlhVzVuS0hncE8xeHlYRzRnSUNBZ2FXWW9lQ0E4SURBcGUxeHlYRzRnSUNBZ0lDQnpJRDBnSnkwbk8xeHlYRzRnSUNBZ0lDQjRJRDBnTFhnN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCcFppaDRJRDRnTVdVdE1qRXBlMXh5WEc0Z0lDQWdJQ0JsSUQwZ2JHOW5LSGdnS2lCd2IzY29NaXdnTmprc0lERXBLU0F0SURZNU8xeHlYRzRnSUNBZ0lDQjZJRDBnWlNBOElEQWdQeUI0SUNvZ2NHOTNLRElzSUMxbExDQXhLU0E2SUhnZ0x5QndiM2NvTWl3Z1pTd2dNU2s3WEhKY2JpQWdJQ0FnSUhvZ0tqMGdNSGd4TURBd01EQXdNREF3TURBd01EdGNjbHh1SUNBZ0lDQWdaU0E5SURVeUlDMGdaVHRjY2x4dUlDQWdJQ0FnYVdZb1pTQStJREFwZTF4eVhHNGdJQ0FnSUNBZ0lHMTFiSFJwY0d4NUtEQXNJSG9wTzF4eVhHNGdJQ0FnSUNBZ0lHb2dQU0JtTzF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsS0dvZ1BqMGdOeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQnRkV3gwYVhCc2VTZ3haVGNzSURBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnYWlBdFBTQTNPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnRkV3gwYVhCc2VTaHdiM2NvTVRBc0lHb3NJREVwTENBd0tUdGNjbHh1SUNBZ0lDQWdJQ0JxSUQwZ1pTQXRJREU3WEhKY2JpQWdJQ0FnSUNBZ2QyaHBiR1VvYWlBK1BTQXlNeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQmthWFpwWkdVb01TQThQQ0F5TXlrN1hISmNiaUFnSUNBZ0lDQWdJQ0JxSUMwOUlESXpPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmthWFpwWkdVb01TQThQQ0JxS1R0Y2NseHVJQ0FnSUNBZ0lDQnRkV3gwYVhCc2VTZ3hMQ0F4S1R0Y2NseHVJQ0FnSUNBZ0lDQmthWFpwWkdVb01pazdYSEpjYmlBZ0lDQWdJQ0FnYlNBOUlHNTFiVlJ2VTNSeWFXNW5LQ2s3WEhKY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2JYVnNkR2x3Ykhrb01Dd2dlaWs3WEhKY2JpQWdJQ0FnSUNBZ2JYVnNkR2x3Ykhrb01TQThQQ0F0WlN3Z01DazdYSEpjYmlBZ0lDQWdJQ0FnYlNBOUlHNTFiVlJ2VTNSeWFXNW5LQ2tnS3lCeVpYQmxZWFF1WTJGc2JDaGFSVkpQTENCbUtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lvWmlBK0lEQXBlMXh5WEc0Z0lDQWdJQ0JySUQwZ2JTNXNaVzVuZEdnN1hISmNiaUFnSUNBZ0lHMGdQU0J6SUNzZ0tHc2dQRDBnWmlBL0lDY3dMaWNnS3lCeVpYQmxZWFF1WTJGc2JDaGFSVkpQTENCbUlDMGdheWtnS3lCdElEb2diUzV6YkdsalpTZ3dMQ0JySUMwZ1ppa2dLeUFuTGljZ0t5QnRMbk5zYVdObEtHc2dMU0JtS1NrN1hISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCdElEMGdjeUFySUcwN1hISmNiaUFnSUNCOUlISmxkSFZ5YmlCdE8xeHlYRzRnSUgxY2NseHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh5WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNjbHh1SUNBc0lDUm1ZV2xzY3lBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2NseHVJQ0FzSUdGT2RXMWlaWEpXWVd4MVpTQTlJSEpsY1hWcGNtVW9KeTR2WDJFdGJuVnRZbVZ5TFhaaGJIVmxKeWxjY2x4dUlDQXNJQ1IwYjFCeVpXTnBjMmx2YmlBOUlERXVMblJ2VUhKbFkybHphVzl1TzF4eVhHNWNjbHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9KR1poYVd4ektHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0x5OGdTVVUzTFZ4eVhHNGdJSEpsZEhWeWJpQWtkRzlRY21WamFYTnBiMjR1WTJGc2JDZ3hMQ0IxYm1SbFptbHVaV1FwSUNFOVBTQW5NU2M3WEhKY2JuMHBJSHg4SUNFa1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0F2THlCV09DQitJRUZ1WkhKdmFXUWdOQzR6TFZ4eVhHNGdJQ1IwYjFCeVpXTnBjMmx2Ymk1allXeHNLSHQ5S1R0Y2NseHVmU2twTENBblRuVnRZbVZ5Snl3Z2UxeHlYRzRnSUhSdlVISmxZMmx6YVc5dU9pQm1kVzVqZEdsdmJpQjBiMUJ5WldOcGMybHZiaWh3Y21WamFYTnBiMjRwZTF4eVhHNGdJQ0FnZG1GeUlIUm9ZWFFnUFNCaFRuVnRZbVZ5Vm1Gc2RXVW9kR2hwY3l3Z0owNTFiV0psY2lOMGIxQnlaV05wYzJsdmJqb2dhVzVqYjNKeVpXTjBJR2x1ZG05allYUnBiMjRoSnlrN1hISmNiaUFnSUNCeVpYUjFjbTRnY0hKbFkybHphVzl1SUQwOVBTQjFibVJsWm1sdVpXUWdQeUFrZEc5UWNtVmphWE5wYjI0dVkyRnNiQ2gwYUdGMEtTQTZJQ1IwYjFCeVpXTnBjMmx2Ymk1allXeHNLSFJvWVhRc0lIQnlaV05wYzJsdmJpazdJRnh5WEc0Z0lIMWNjbHh1ZlNrN0lpd2lMeThnTVRrdU1TNHpMakVnVDJKcVpXTjBMbUZ6YzJsbmJpaDBZWEpuWlhRc0lITnZkWEpqWlNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHTENBblQySnFaV04wSnl3Z2UyRnpjMmxuYmpvZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXRnpjMmxuYmljcGZTazdJaXdpZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0dkx5QXhPUzR4TGpJdU1pQXZJREUxTGpJdU15NDFJRTlpYW1WamRDNWpjbVZoZEdVb1R5QmJMQ0JRY205d1pYSjBhV1Z6WFNsY2NseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RQWW1wbFkzUW5MQ0I3WTNKbFlYUmxPaUJ5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWw5S1RzaUxDSjJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHlYRzR2THlBeE9TNHhMakl1TXlBdklERTFMakl1TXk0M0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBhV1Z6S0U4c0lGQnliM0JsY25ScFpYTXBYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJWEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a3NJQ2RQWW1wbFkzUW5MQ0I3WkdWbWFXNWxVSEp2Y0dWeWRHbGxjem9nY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd2N5Y3BmU2s3SWl3aWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2NseHVMeThnTVRrdU1TNHlMalFnTHlBeE5TNHlMak11TmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29UeXdnVUN3Z1FYUjBjbWxpZFhSbGN5bGNjbHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTd2dKMDlpYW1WamRDY3NJSHRrWldacGJtVlFjbTl3WlhKMGVUb2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVpuMHBPeUlzSWk4dklERTVMakV1TWk0MUlFOWlhbVZqZEM1bWNtVmxlbVVvVHlsY2JuWmhjaUJwYzA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z2JXVjBZU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaEp5a3ViMjVHY21WbGVtVTdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxellYQW5LU2duWm5KbFpYcGxKeXdnWm5WdVkzUnBiMjRvSkdaeVpXVjZaU2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCbWNtVmxlbVVvYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUFrWm5KbFpYcGxJQ1ltSUdselQySnFaV04wS0dsMEtTQS9JQ1JtY21WbGVtVW9iV1YwWVNocGRDa3BJRG9nYVhRN1hHNGdJSDA3WEc1OUtUc2lMQ0l2THlBeE9TNHhMakl1TmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRThzSUZBcFhHNTJZWElnZEc5SlQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lDUm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3WkNjcExtWTdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxellYQW5LU2duWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlKeXdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2locGRDd2dhMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDBiMGxQWW1wbFkzUW9hWFFwTENCclpYa3BPMXh1SUNCOU8xeHVmU2s3SWl3aUx5OGdNVGt1TVM0eUxqY2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWxjYm5KbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxellYQW5LU2duWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3ljc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJ5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpMWxlSFFuS1M1bU8xeHVmU2s3SWl3aUx5OGdNVGt1TVM0eUxqa2dUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0U4cFhHNTJZWElnZEc5UFltcGxZM1FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENBa1oyVjBVSEp2ZEc5MGVYQmxUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWs3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnbloyVjBVSEp2ZEc5MGVYQmxUMlluTENCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaMlYwVUhKdmRHOTBlWEJsVDJZb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa1oyVjBVSEp2ZEc5MGVYQmxUMllvZEc5UFltcGxZM1FvYVhRcEtUdGNiaUFnZlR0Y2JuMHBPeUlzSWk4dklERTVMakV1TWk0eE1TQlBZbXBsWTNRdWFYTkZlSFJsYm5OcFlteGxLRThwWEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNibHh1Y21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhOaGNDY3BLQ2RwYzBWNGRHVnVjMmxpYkdVbkxDQm1kVzVqZEdsdmJpZ2thWE5GZUhSbGJuTnBZbXhsS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHbHpSWGgwWlc1emFXSnNaU2hwZENsN1hHNGdJQ0FnY21WMGRYSnVJR2x6VDJKcVpXTjBLR2wwS1NBL0lDUnBjMFY0ZEdWdWMybGliR1VnUHlBa2FYTkZlSFJsYm5OcFlteGxLR2wwS1NBNklIUnlkV1VnT2lCbVlXeHpaVHRjYmlBZ2ZUdGNibjBwT3lJc0lpOHZJREU1TGpFdU1pNHhNaUJQWW1wbFkzUXVhWE5HY205NlpXNG9UeWxjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcE8xeHVYRzV5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YzJGd0p5a29KMmx6Um5KdmVtVnVKeXdnWm5WdVkzUnBiMjRvSkdselJuSnZlbVZ1S1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHbHpSbkp2ZW1WdUtHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2FYUXBJRDhnSkdselJuSnZlbVZ1SUQ4Z0pHbHpSbkp2ZW1WdUtHbDBLU0E2SUdaaGJITmxJRG9nZEhKMVpUdGNiaUFnZlR0Y2JuMHBPeUlzSWk4dklERTVMakV1TWk0eE15QlBZbXBsWTNRdWFYTlRaV0ZzWldRb1R5bGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0oybHpVMlZoYkdWa0p5d2dablZ1WTNScGIyNG9KR2x6VTJWaGJHVmtLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdselUyVmhiR1ZrS0dsMEtYdGNiaUFnSUNCeVpYUjFjbTRnYVhOUFltcGxZM1FvYVhRcElEOGdKR2x6VTJWaGJHVmtJRDhnSkdselUyVmhiR1ZrS0dsMEtTQTZJR1poYkhObElEb2dkSEoxWlR0Y2JpQWdmVHRjYm4wcE95SXNJaTh2SURFNUxqRXVNeTR4TUNCUFltcGxZM1F1YVhNb2RtRnNkV1V4TENCMllXeDFaVElwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdhWE02SUhKbGNYVnBjbVVvSnk0dlgzTmhiV1V0ZG1Gc2RXVW5LWDBwT3lJc0lpOHZJREU1TGpFdU1pNHhOQ0JQWW1wbFkzUXVhMlY1Y3loUEtWeHVkbUZ5SUhSdlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQWthMlY1Y3lBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5azdYRzVjYm5KbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxellYQW5LU2duYTJWNWN5Y3NJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCclpYbHpLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKR3RsZVhNb2RHOVBZbXBsWTNRb2FYUXBLVHRjYmlBZ2ZUdGNibjBwT3lJc0lpOHZJREU1TGpFdU1pNHhOU0JQWW1wbFkzUXVjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW9UeWxjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlrdWIyNUdjbVZsZW1VN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25jSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTW5MQ0JtZFc1amRHbHZiaWdrY0hKbGRtVnVkRVY0ZEdWdWMybHZibk1wZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2NISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2NISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5NZ0ppWWdhWE5QWW1wbFkzUW9hWFFwSUQ4Z0pIQnlaWFpsYm5SRmVIUmxibk5wYjI1ektHMWxkR0VvYVhRcEtTQTZJR2wwTzF4dUlDQjlPMXh1ZlNrN0lpd2lMeThnTVRrdU1TNHlMakUzSUU5aWFtVmpkQzV6WldGc0tFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJRzFsZEdFZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZU2NwTG05dVJuSmxaWHBsTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0ozTmxZV3duTENCbWRXNWpkR2x2Ymlna2MyVmhiQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCelpXRnNLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdKSE5sWVd3Z0ppWWdhWE5QWW1wbFkzUW9hWFFwSUQ4Z0pITmxZV3dvYldWMFlTaHBkQ2twSURvZ2FYUTdYRzRnSUgwN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpNdU1Ua2dUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltS0U4c0lIQnliM1J2S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UMkpxWldOMEp5d2dlM05sZEZCeWIzUnZkSGx3WlU5bU9pQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGNISnZkRzhuS1M1elpYUjlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlBeE9TNHhMak11TmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG5SdlUzUnlhVzVuS0NsY2JuWmhjaUJqYkdGemMyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ3dnZEdWemRDQWdJQ0E5SUh0OU8xeHVkR1Z6ZEZ0eVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmRHOVRkSEpwYm1kVVlXY25LVjBnUFNBbmVpYzdYRzVwWmloMFpYTjBJQ3NnSnljZ0lUMGdKMXR2WW1wbFkzUWdlbDBuS1h0Y2JpQWdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1NoUFltcGxZM1F1Y0hKdmRHOTBlWEJsTENBbmRHOVRkSEpwYm1jbkxDQm1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlBblcyOWlhbVZqZENBbklDc2dZMnhoYzNOdlppaDBhR2x6S1NBcklDZGRKenRjYmlBZ2ZTd2dkSEoxWlNrN1hHNTlJaXdpZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2NseHVJQ0FzSUNSd1lYSnpaVVpzYjJGMElEMGdjbVZ4ZFdseVpTZ25MaTlmY0dGeWMyVXRabXh2WVhRbktUdGNjbHh1THk4Z01UZ3VNaTQwSUhCaGNuTmxSbXh2WVhRb2MzUnlhVzVuS1Z4eVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5QXJJQ1JsZUhCdmNuUXVSaUFxSUNod1lYSnpaVVpzYjJGMElDRTlJQ1J3WVhKelpVWnNiMkYwS1N3Z2UzQmhjbk5sUm14dllYUTZJQ1J3WVhKelpVWnNiMkYwZlNrN0lpd2lkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYSEpjYmlBZ0xDQWtjR0Z5YzJWSmJuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5d1lYSnpaUzFwYm5RbktUdGNjbHh1THk4Z01UZ3VNaTQxSUhCaGNuTmxTVzUwS0hOMGNtbHVaeXdnY21Ga2FYZ3BYSEpjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1R0lDb2dLSEJoY25ObFNXNTBJQ0U5SUNSd1lYSnpaVWx1ZENrc0lIdHdZWEp6WlVsdWREb2dKSEJoY25ObFNXNTBmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlFeEpRbEpCVWxrZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQXNJR2RzYjJKaGJDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnWTNSNElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JqYkdGemMyOW1JQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiR0Z6YzI5bUp5bGNiaUFnTENBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXWjFibU4wYVc5dUp5bGNiaUFnTENCaGJrbHVjM1JoYm1ObElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhHNGdJQ3dnWm05eVQyWWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabTl5TFc5bUp5bGNiaUFnTENCelpYUlFjbTkwYnlBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6WlhRdGNISnZkRzhuS1M1elpYUmNiaUFnTENCemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTl6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5SnlsY2JpQWdMQ0IwWVhOcklDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBZWE5ySnlrdWMyVjBYRzRnSUN3Z2JXbGpjbTkwWVhOcklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldsamNtOTBZWE5ySnlrb0tWeHVJQ0FzSUZCU1QwMUpVMFVnSUNBZ0lDQWdJQ0FnSUNBOUlDZFFjbTl0YVhObEoxeHVJQ0FzSUZSNWNHVkZjbkp2Y2lBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1VWVYQmxSWEp5YjNKY2JpQWdMQ0J3Y205alpYTnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1Y0hKdlkyVnpjMXh1SUNBc0lDUlFjbTl0YVhObElDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJGdFFVazlOU1ZORlhWeHVJQ0FzSUhCeWIyTmxjM01nSUNBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1d2NtOWpaWE56WEc0Z0lDd2dhWE5PYjJSbElDQWdJQ0FnSUNBZ0lDQWdJRDBnWTJ4aGMzTnZaaWh3Y205alpYTnpLU0E5UFNBbmNISnZZMlZ6Y3lkY2JpQWdMQ0JsYlhCMGVTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCbWRXNWpkR2x2YmlncGV5QXZLaUJsYlhCMGVTQXFMeUI5WEc0Z0lDd2dTVzUwWlhKdVlXd3NJRWRsYm1WeWFXTlFjbTl0YVhObFEyRndZV0pwYkdsMGVTd2dWM0poY0hCbGNqdGNibHh1ZG1GeUlGVlRSVjlPUVZSSlZrVWdQU0FoSVdaMWJtTjBhVzl1S0NsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnTHk4Z1kyOXljbVZqZENCemRXSmpiR0Z6YzJsdVp5QjNhWFJvSUVCQWMzQmxZMmxsY3lCemRYQndiM0owWEc0Z0lDQWdkbUZ5SUhCeWIyMXBjMlVnSUNBZ0lEMGdKRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3hLVnh1SUNBZ0lDQWdMQ0JHWVd0bFVISnZiV2x6WlNBOUlDaHdjbTl0YVhObExtTnZibk4wY25WamRHOXlJRDBnZTMwcFczSmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHpjR1ZqYVdWekp5bGRJRDBnWm5WdVkzUnBiMjRvWlhobFl5bDdJR1Y0WldNb1pXMXdkSGtzSUdWdGNIUjVLVHNnZlR0Y2JpQWdJQ0F2THlCMWJtaGhibVJzWldRZ2NtVnFaV04wYVc5dWN5QjBjbUZqYTJsdVp5QnpkWEJ3YjNKMExDQk9iMlJsU2xNZ1VISnZiV2x6WlNCM2FYUm9iM1YwSUdsMElHWmhhV3h6SUVCQWMzQmxZMmxsY3lCMFpYTjBYRzRnSUNBZ2NtVjBkWEp1SUNocGMwNXZaR1VnZkh3Z2RIbHdaVzltSUZCeWIyMXBjMlZTWldwbFkzUnBiMjVGZG1WdWRDQTlQU0FuWm5WdVkzUnBiMjRuS1NBbUppQndjbTl0YVhObExuUm9aVzRvWlcxd2RIa3BJR2x1YzNSaGJtTmxiMllnUm1GclpWQnliMjFwYzJVN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNibjBvS1R0Y2JseHVMeThnYUdWc2NHVnljMXh1ZG1GeUlITmhiV1ZEYjI1emRISjFZM1J2Y2lBOUlHWjFibU4wYVc5dUtHRXNJR0lwZTF4dUlDQXZMeUIzYVhSb0lHeHBZbkpoY25rZ2QzSmhjSEJsY2lCemNHVmphV0ZzSUdOaGMyVmNiaUFnY21WMGRYSnVJR0VnUFQwOUlHSWdmSHdnWVNBOVBUMGdKRkJ5YjIxcGMyVWdKaVlnWWlBOVBUMGdWM0poY0hCbGNqdGNibjA3WEc1MllYSWdhWE5VYUdWdVlXSnNaU0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZG1GeUlIUm9aVzQ3WEc0Z0lISmxkSFZ5YmlCcGMwOWlhbVZqZENocGRDa2dKaVlnZEhsd1pXOW1JQ2gwYUdWdUlEMGdhWFF1ZEdobGJpa2dQVDBnSjJaMWJtTjBhVzl1SnlBL0lIUm9aVzRnT2lCbVlXeHpaVHRjYm4wN1hHNTJZWElnYm1WM1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrZ1BTQm1kVzVqZEdsdmJpaERLWHRjYmlBZ2NtVjBkWEp1SUhOaGJXVkRiMjV6ZEhKMVkzUnZjaWdrVUhKdmJXbHpaU3dnUXlsY2JpQWdJQ0EvSUc1bGR5QlFjbTl0YVhObFEyRndZV0pwYkdsMGVTaERLVnh1SUNBZ0lEb2dibVYzSUVkbGJtVnlhV05RY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1R0Y2JuMDdYRzUyWVhJZ1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrZ1BTQkhaVzVsY21salVISnZiV2x6WlVOaGNHRmlhV3hwZEhrZ1BTQm1kVzVqZEdsdmJpaERLWHRjYmlBZ2RtRnlJSEpsYzI5c2RtVXNJSEpsYW1WamREdGNiaUFnZEdocGN5NXdjbTl0YVhObElEMGdibVYzSUVNb1puVnVZM1JwYjI0b0pDUnlaWE52YkhabExDQWtKSEpsYW1WamRDbDdYRzRnSUNBZ2FXWW9jbVZ6YjJ4MlpTQWhQVDBnZFc1a1pXWnBibVZrSUh4OElISmxhbVZqZENBaFBUMGdkVzVrWldacGJtVmtLWFJvY205M0lGUjVjR1ZGY25KdmNpZ25RbUZrSUZCeWIyMXBjMlVnWTI5dWMzUnlkV04wYjNJbktUdGNiaUFnSUNCeVpYTnZiSFpsSUQwZ0pDUnlaWE52YkhabE8xeHVJQ0FnSUhKbGFtVmpkQ0FnUFNBa0pISmxhbVZqZER0Y2JpQWdmU2s3WEc0Z0lIUm9hWE11Y21WemIyeDJaU0E5SUdGR2RXNWpkR2x2YmloeVpYTnZiSFpsS1R0Y2JpQWdkR2hwY3k1eVpXcGxZM1FnSUQwZ1lVWjFibU4wYVc5dUtISmxhbVZqZENrN1hHNTlPMXh1ZG1GeUlIQmxjbVp2Y20wZ1BTQm1kVzVqZEdsdmJpaGxlR1ZqS1h0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JsZUdWaktDazdYRzRnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnY21WMGRYSnVJSHRsY25KdmNqb2daWDA3WEc0Z0lIMWNibjA3WEc1MllYSWdibTkwYVdaNUlEMGdablZ1WTNScGIyNG9jSEp2YldselpTd2dhWE5TWldwbFkzUXBlMXh1SUNCcFppaHdjbTl0YVhObExsOXVLWEpsZEhWeWJqdGNiaUFnY0hKdmJXbHpaUzVmYmlBOUlIUnlkV1U3WEc0Z0lIWmhjaUJqYUdGcGJpQTlJSEJ5YjIxcGMyVXVYMk03WEc0Z0lHMXBZM0p2ZEdGemF5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJSEJ5YjIxcGMyVXVYM1pjYmlBZ0lDQWdJQ3dnYjJzZ0lDQWdQU0J3Y205dGFYTmxMbDl6SUQwOUlERmNiaUFnSUNBZ0lDd2dhU0FnSUNBZ1BTQXdPMXh1SUNBZ0lIWmhjaUJ5ZFc0Z1BTQm1kVzVqZEdsdmJpaHlaV0ZqZEdsdmJpbDdYRzRnSUNBZ0lDQjJZWElnYUdGdVpHeGxjaUE5SUc5cklEOGdjbVZoWTNScGIyNHViMnNnT2lCeVpXRmpkR2x2Ymk1bVlXbHNYRzRnSUNBZ0lDQWdJQ3dnY21WemIyeDJaU0E5SUhKbFlXTjBhVzl1TG5KbGMyOXNkbVZjYmlBZ0lDQWdJQ0FnTENCeVpXcGxZM1FnSUQwZ2NtVmhZM1JwYjI0dWNtVnFaV04wWEc0Z0lDQWdJQ0FnSUN3Z1pHOXRZV2x1SUNBOUlISmxZV04wYVc5dUxtUnZiV0ZwYmx4dUlDQWdJQ0FnSUNBc0lISmxjM1ZzZEN3Z2RHaGxianRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHbG1LR2hoYm1Sc1pYSXBlMXh1SUNBZ0lDQWdJQ0FnSUdsbUtDRnZheWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWh3Y205dGFYTmxMbDlvSUQwOUlESXBiMjVJWVc1a2JHVlZibWhoYm1Sc1pXUW9jSEp2YldselpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXRhWE5sTGw5b0lEMGdNVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhV1lvYUdGdVpHeGxjaUE5UFQwZ2RISjFaU2x5WlhOMWJIUWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHUnZiV0ZwYmlsa2IyMWhhVzR1Wlc1MFpYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHaGhibVJzWlhJb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWkc5dFlXbHVLV1J2YldGcGJpNWxlR2wwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsbUtISmxjM1ZzZENBOVBUMGdjbVZoWTNScGIyNHVjSEp2YldselpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvVkhsd1pVVnljbTl5S0NkUWNtOXRhWE5sTFdOb1lXbHVJR041WTJ4bEp5a3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmloMGFHVnVJRDBnYVhOVWFHVnVZV0pzWlNoeVpYTjFiSFFwS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvWlc0dVkyRnNiQ2h5WlhOMWJIUXNJSEpsYzI5c2RtVXNJSEpsYW1WamRDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSEpsYzI5c2RtVW9jbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElISmxhbVZqZENoMllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdJQ0IzYUdsc1pTaGphR0ZwYmk1c1pXNW5kR2dnUGlCcEtYSjFiaWhqYUdGcGJsdHBLeXRkS1RzZ0x5OGdkbUZ5YVdGaWJHVWdiR1Z1WjNSb0lDMGdZMkZ1SjNRZ2RYTmxJR1p2Y2tWaFkyaGNiaUFnSUNCd2NtOXRhWE5sTGw5aklEMGdXMTA3WEc0Z0lDQWdjSEp2YldselpTNWZiaUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1LR2x6VW1WcVpXTjBJQ1ltSUNGd2NtOXRhWE5sTGw5b0tXOXVWVzVvWVc1a2JHVmtLSEJ5YjIxcGMyVXBPMXh1SUNCOUtUdGNibjA3WEc1MllYSWdiMjVWYm1oaGJtUnNaV1FnUFNCbWRXNWpkR2x2Ymlod2NtOXRhWE5sS1h0Y2JpQWdkR0Z6YXk1allXeHNLR2RzYjJKaGJDd2dablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0J3Y205dGFYTmxMbDkyWEc0Z0lDQWdJQ0FzSUdGaWNuVndkQ3dnYUdGdVpHeGxjaXdnWTI5dWMyOXNaVHRjYmlBZ0lDQnBaaWhwYzFWdWFHRnVaR3hsWkNod2NtOXRhWE5sS1NsN1hHNGdJQ0FnSUNCaFluSjFjSFFnUFNCd1pYSm1iM0p0S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lHbG1LR2x6VG05a1pTbDdYRzRnSUNBZ0lDQWdJQ0FnY0hKdlkyVnpjeTVsYldsMEtDZDFibWhoYm1Sc1pXUlNaV3BsWTNScGIyNG5MQ0IyWVd4MVpTd2djSEp2YldselpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWhvWVc1a2JHVnlJRDBnWjJ4dlltRnNMbTl1ZFc1b1lXNWtiR1ZrY21WcVpXTjBhVzl1S1h0Y2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUtIdHdjbTl0YVhObE9pQndjbTl0YVhObExDQnlaV0Z6YjI0NklIWmhiSFZsZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppZ29ZMjl1YzI5c1pTQTlJR2RzYjJKaGJDNWpiMjV6YjJ4bEtTQW1KaUJqYjI1emIyeGxMbVZ5Y205eUtYdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZFZibWhoYm1Sc1pXUWdjSEp2YldselpTQnlaV3BsWTNScGIyNG5MQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnTHk4Z1FuSnZkM05sY25NZ2MyaHZkV3hrSUc1dmRDQjBjbWxuWjJWeUlHQnlaV3BsWTNScGIyNUlZVzVrYkdWa1lDQmxkbVZ1ZENCcFppQnBkQ0IzWVhNZ2FHRnVaR3hsWkNCb1pYSmxMQ0JPYjJSbFNsTWdMU0J6YUc5MWJHUmNiaUFnSUNBZ0lIQnliMjFwYzJVdVgyZ2dQU0JwYzA1dlpHVWdmSHdnYVhOVmJtaGhibVJzWldRb2NISnZiV2x6WlNrZ1B5QXlJRG9nTVR0Y2JpQWdJQ0I5SUhCeWIyMXBjMlV1WDJFZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2FXWW9ZV0p5ZFhCMEtYUm9jbTkzSUdGaWNuVndkQzVsY25KdmNqdGNiaUFnZlNrN1hHNTlPMXh1ZG1GeUlHbHpWVzVvWVc1a2JHVmtJRDBnWm5WdVkzUnBiMjRvY0hKdmJXbHpaU2w3WEc0Z0lHbG1LSEJ5YjIxcGMyVXVYMmdnUFQwZ01TbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIWmhjaUJqYUdGcGJpQTlJSEJ5YjIxcGMyVXVYMkVnZkh3Z2NISnZiV2x6WlM1ZlkxeHVJQ0FnSUN3Z2FTQWdJQ0FnUFNBd1hHNGdJQ0FnTENCeVpXRmpkR2x2Ymp0Y2JpQWdkMmhwYkdVb1kyaGhhVzR1YkdWdVozUm9JRDRnYVNsN1hHNGdJQ0FnY21WaFkzUnBiMjRnUFNCamFHRnBibHRwS3l0ZE8xeHVJQ0FnSUdsbUtISmxZV04wYVc5dUxtWmhhV3dnZkh3Z0lXbHpWVzVvWVc1a2JHVmtLSEpsWVdOMGFXOXVMbkJ5YjIxcGMyVXBLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmU0J5WlhSMWNtNGdkSEoxWlR0Y2JuMDdYRzUyWVhJZ2IyNUlZVzVrYkdWVmJtaGhibVJzWldRZ1BTQm1kVzVqZEdsdmJpaHdjbTl0YVhObEtYdGNiaUFnZEdGemF5NWpZV3hzS0dkc2IySmhiQ3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IyWVhJZ2FHRnVaR3hsY2p0Y2JpQWdJQ0JwWmlocGMwNXZaR1VwZTF4dUlDQWdJQ0FnY0hKdlkyVnpjeTVsYldsMEtDZHlaV3BsWTNScGIyNUlZVzVrYkdWa0p5d2djSEp2YldselpTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUtHaGhibVJzWlhJZ1BTQm5iRzlpWVd3dWIyNXlaV3BsWTNScGIyNW9ZVzVrYkdWa0tYdGNiaUFnSUNBZ0lHaGhibVJzWlhJb2UzQnliMjFwYzJVNklIQnliMjFwYzJVc0lISmxZWE52YmpvZ2NISnZiV2x6WlM1ZmRuMHBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlPMXh1ZG1GeUlDUnlaV3BsWTNRZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNsN1hHNGdJSFpoY2lCd2NtOXRhWE5sSUQwZ2RHaHBjenRjYmlBZ2FXWW9jSEp2YldselpTNWZaQ2x5WlhSMWNtNDdYRzRnSUhCeWIyMXBjMlV1WDJRZ1BTQjBjblZsTzF4dUlDQndjbTl0YVhObElEMGdjSEp2YldselpTNWZkeUI4ZkNCd2NtOXRhWE5sT3lBdkx5QjFibmR5WVhCY2JpQWdjSEp2YldselpTNWZkaUE5SUhaaGJIVmxPMXh1SUNCd2NtOXRhWE5sTGw5eklEMGdNanRjYmlBZ2FXWW9JWEJ5YjIxcGMyVXVYMkVwY0hKdmJXbHpaUzVmWVNBOUlIQnliMjFwYzJVdVgyTXVjMnhwWTJVb0tUdGNiaUFnYm05MGFXWjVLSEJ5YjIxcGMyVXNJSFJ5ZFdVcE8xeHVmVHRjYm5aaGNpQWtjbVZ6YjJ4MlpTQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnZG1GeUlIQnliMjFwYzJVZ1BTQjBhR2x6WEc0Z0lDQWdMQ0IwYUdWdU8xeHVJQ0JwWmlod2NtOXRhWE5sTGw5a0tYSmxkSFZ5Ymp0Y2JpQWdjSEp2YldselpTNWZaQ0E5SUhSeWRXVTdYRzRnSUhCeWIyMXBjMlVnUFNCd2NtOXRhWE5sTGw5M0lIeDhJSEJ5YjIxcGMyVTdJQzh2SUhWdWQzSmhjRnh1SUNCMGNua2dlMXh1SUNBZ0lHbG1LSEJ5YjIxcGMyVWdQVDA5SUhaaGJIVmxLWFJvY205M0lGUjVjR1ZGY25KdmNpaGNJbEJ5YjIxcGMyVWdZMkZ1SjNRZ1ltVWdjbVZ6YjJ4MlpXUWdhWFJ6Wld4bVhDSXBPMXh1SUNBZ0lHbG1LSFJvWlc0Z1BTQnBjMVJvWlc1aFlteGxLSFpoYkhWbEtTbDdYRzRnSUNBZ0lDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJQ0FnZG1GeUlIZHlZWEJ3WlhJZ1BTQjdYM2M2SUhCeWIyMXBjMlVzSUY5a09pQm1ZV3h6WlgwN0lDOHZJSGR5WVhCY2JpQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHVnVMbU5oYkd3b2RtRnNkV1VzSUdOMGVDZ2tjbVZ6YjJ4MlpTd2dkM0poY0hCbGNpd2dNU2tzSUdOMGVDZ2tjbVZxWldOMExDQjNjbUZ3Y0dWeUxDQXhLU2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lDQWdKSEpsYW1WamRDNWpZV3hzS0hkeVlYQndaWElzSUdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NISnZiV2x6WlM1ZmRpQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ2NISnZiV2x6WlM1ZmN5QTlJREU3WEc0Z0lDQWdJQ0J1YjNScFpua29jSEp2YldselpTd2dabUZzYzJVcE8xeHVJQ0FnSUgxY2JpQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWtjbVZxWldOMExtTmhiR3dvZTE5M09pQndjbTl0YVhObExDQmZaRG9nWm1Gc2MyVjlMQ0JsS1RzZ0x5OGdkM0poY0Z4dUlDQjlYRzU5TzF4dVhHNHZMeUJqYjI1emRISjFZM1J2Y2lCd2IyeDVabWxzYkZ4dWFXWW9JVlZUUlY5T1FWUkpWa1VwZTF4dUlDQXZMeUF5TlM0MExqTXVNU0JRY205dGFYTmxLR1Y0WldOMWRHOXlLVnh1SUNBa1VISnZiV2x6WlNBOUlHWjFibU4wYVc5dUlGQnliMjFwYzJVb1pYaGxZM1YwYjNJcGUxeHVJQ0FnSUdGdVNXNXpkR0Z1WTJVb2RHaHBjeXdnSkZCeWIyMXBjMlVzSUZCU1QwMUpVMFVzSUNkZmFDY3BPMXh1SUNBZ0lHRkdkVzVqZEdsdmJpaGxlR1ZqZFhSdmNpazdYRzRnSUNBZ1NXNTBaWEp1WVd3dVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdaWGhsWTNWMGIzSW9ZM1I0S0NSeVpYTnZiSFpsTENCMGFHbHpMQ0F4S1N3Z1kzUjRLQ1J5WldwbFkzUXNJSFJvYVhNc0lERXBLVHRjYmlBZ0lDQjlJR05oZEdOb0tHVnljaWw3WEc0Z0lDQWdJQ0FrY21WcVpXTjBMbU5oYkd3b2RHaHBjeXdnWlhKeUtUdGNiaUFnSUNCOVhHNGdJSDA3WEc0Z0lFbHVkR1Z5Ym1Gc0lEMGdablZ1WTNScGIyNGdVSEp2YldselpTaGxlR1ZqZFhSdmNpbDdYRzRnSUNBZ2RHaHBjeTVmWXlBOUlGdGRPeUFnSUNBZ0lDQWdJQ0FnSUNBdkx5QThMU0JoZDJGcGRHbHVaeUJ5WldGamRHbHZibk5jYmlBZ0lDQjBhR2x6TGw5aElEMGdkVzVrWldacGJtVmtPeUFnSUNBZ0lDOHZJRHd0SUdOb1pXTnJaV1FnYVc0Z2FYTlZibWhoYm1Sc1pXUWdjbVZoWTNScGIyNXpYRzRnSUNBZ2RHaHBjeTVmY3lBOUlEQTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QThMU0J6ZEdGMFpWeHVJQ0FnSUhSb2FYTXVYMlFnUFNCbVlXeHpaVHNnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdaRzl1WlZ4dUlDQWdJSFJvYVhNdVgzWWdQU0IxYm1SbFptbHVaV1E3SUNBZ0lDQWdMeThnUEMwZ2RtRnNkV1ZjYmlBZ0lDQjBhR2x6TGw5b0lEMGdNRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUhKbGFtVmpkR2x2YmlCemRHRjBaU3dnTUNBdElHUmxabUYxYkhRc0lERWdMU0JvWVc1a2JHVmtMQ0F5SUMwZ2RXNW9ZVzVrYkdWa1hHNGdJQ0FnZEdocGN5NWZiaUE5SUdaaGJITmxPeUFnSUNBZ0lDQWdJQ0F2THlBOExTQnViM1JwWm5sY2JpQWdmVHRjYmlBZ1NXNTBaWEp1WVd3dWNISnZkRzkwZVhCbElEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVV0WVd4c0p5a29KRkJ5YjIxcGMyVXVjSEp2ZEc5MGVYQmxMQ0I3WEc0Z0lDQWdMeThnTWpVdU5DNDFMak1nVUhKdmJXbHpaUzV3Y205MGIzUjVjR1V1ZEdobGJpaHZia1oxYkdacGJHeGxaQ3dnYjI1U1pXcGxZM1JsWkNsY2JpQWdJQ0IwYUdWdU9pQm1kVzVqZEdsdmJpQjBhR1Z1S0c5dVJuVnNabWxzYkdWa0xDQnZibEpsYW1WamRHVmtLWHRjYmlBZ0lDQWdJSFpoY2lCeVpXRmpkR2x2YmlBZ0lDQTlJRzVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1S0hOd1pXTnBaWE5EYjI1emRISjFZM1J2Y2loMGFHbHpMQ0FrVUhKdmJXbHpaU2twTzF4dUlDQWdJQ0FnY21WaFkzUnBiMjR1YjJzZ0lDQWdJRDBnZEhsd1pXOW1JRzl1Um5Wc1ptbHNiR1ZrSUQwOUlDZG1kVzVqZEdsdmJpY2dQeUJ2YmtaMWJHWnBiR3hsWkNBNklIUnlkV1U3WEc0Z0lDQWdJQ0J5WldGamRHbHZiaTVtWVdsc0lDQWdQU0IwZVhCbGIyWWdiMjVTWldwbFkzUmxaQ0E5UFNBblpuVnVZM1JwYjI0bklDWW1JRzl1VW1WcVpXTjBaV1E3WEc0Z0lDQWdJQ0J5WldGamRHbHZiaTVrYjIxaGFXNGdQU0JwYzA1dlpHVWdQeUJ3Y205alpYTnpMbVJ2YldGcGJpQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSFJvYVhNdVgyTXVjSFZ6YUNoeVpXRmpkR2x2YmlrN1hHNGdJQ0FnSUNCcFppaDBhR2x6TGw5aEtYUm9hWE11WDJFdWNIVnphQ2h5WldGamRHbHZiaWs3WEc0Z0lDQWdJQ0JwWmloMGFHbHpMbDl6S1c1dmRHbG1lU2gwYUdsekxDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21WaFkzUnBiMjR1Y0hKdmJXbHpaVHRjYmlBZ0lDQjlMRnh1SUNBZ0lDOHZJREkxTGpRdU5TNHhJRkJ5YjIxcGMyVXVjSEp2ZEc5MGVYQmxMbU5oZEdOb0tHOXVVbVZxWldOMFpXUXBYRzRnSUNBZ0oyTmhkR05vSnpvZ1puVnVZM1JwYjI0b2IyNVNaV3BsWTNSbFpDbDdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYUdWdUtIVnVaR1ZtYVc1bFpDd2diMjVTWldwbFkzUmxaQ2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhaaGNpQndjbTl0YVhObElDQTlJRzVsZHlCSmJuUmxjbTVoYkR0Y2JpQWdJQ0IwYUdsekxuQnliMjFwYzJVZ1BTQndjbTl0YVhObE8xeHVJQ0FnSUhSb2FYTXVjbVZ6YjJ4MlpTQTlJR04wZUNna2NtVnpiMngyWlN3Z2NISnZiV2x6WlN3Z01TazdYRzRnSUNBZ2RHaHBjeTV5WldwbFkzUWdJRDBnWTNSNEtDUnlaV3BsWTNRc0lIQnliMjFwYzJVc0lERXBPMXh1SUNCOU8xeHVmVnh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1UnlBcklDUmxlSEJ2Y25RdVZ5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGVlUwVmZUa0ZVU1ZaRkxDQjdVSEp2YldselpUb2dKRkJ5YjIxcGMyVjlLVHRjYm5KbGNYVnBjbVVvSnk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGbkp5a29KRkJ5YjIxcGMyVXNJRkJTVDAxSlUwVXBPMXh1Y21WeGRXbHlaU2duTGk5ZmMyVjBMWE53WldOcFpYTW5LU2hRVWs5TlNWTkZLVHRjYmxkeVlYQndaWElnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsYlVGSlBUVWxUUlYwN1hHNWNiaTh2SUhOMFlYUnBZM05jYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJVlZUUlY5T1FWUkpWa1VzSUZCU1QwMUpVMFVzSUh0Y2JpQWdMeThnTWpVdU5DNDBMalVnVUhKdmJXbHpaUzV5WldwbFkzUW9jaWxjYmlBZ2NtVnFaV04wT2lCbWRXNWpkR2x2YmlCeVpXcGxZM1FvY2lsN1hHNGdJQ0FnZG1GeUlHTmhjR0ZpYVd4cGRIa2dQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoMGFHbHpLVnh1SUNBZ0lDQWdMQ0FrSkhKbGFtVmpkQ0FnSUQwZ1kyRndZV0pwYkdsMGVTNXlaV3BsWTNRN1hHNGdJQ0FnSkNSeVpXcGxZM1FvY2lrN1hHNGdJQ0FnY21WMGRYSnVJR05oY0dGaWFXeHBkSGt1Y0hKdmJXbHpaVHRjYmlBZ2ZWeHVmU2s3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ2hNU1VKU1FWSlpJSHg4SUNGVlUwVmZUa0ZVU1ZaRktTd2dVRkpQVFVsVFJTd2dlMXh1SUNBdkx5QXlOUzQwTGpRdU5pQlFjbTl0YVhObExuSmxjMjlzZG1Vb2VDbGNiaUFnY21WemIyeDJaVG9nWm5WdVkzUnBiMjRnY21WemIyeDJaU2g0S1h0Y2JpQWdJQ0F2THlCcGJuTjBZVzVqWlc5bUlHbHVjM1JsWVdRZ2IyWWdhVzUwWlhKdVlXd2djMnh2ZENCamFHVmpheUJpWldOaGRYTmxJSGRsSUhOb2IzVnNaQ0JtYVhnZ2FYUWdkMmwwYUc5MWRDQnlaWEJzWVdObGJXVnVkQ0J1WVhScGRtVWdVSEp2YldselpTQmpiM0psWEc0Z0lDQWdhV1lvZUNCcGJuTjBZVzVqWlc5bUlDUlFjbTl0YVhObElDWW1JSE5oYldWRGIyNXpkSEoxWTNSdmNpaDRMbU52Ym5OMGNuVmpkRzl5TENCMGFHbHpLU2x5WlhSMWNtNGdlRHRjYmlBZ0lDQjJZWElnWTJGd1lXSnBiR2wwZVNBOUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLSFJvYVhNcFhHNGdJQ0FnSUNBc0lDUWtjbVZ6YjJ4MlpTQWdQU0JqWVhCaFltbHNhWFI1TG5KbGMyOXNkbVU3WEc0Z0lDQWdKQ1J5WlhOdmJIWmxLSGdwTzF4dUlDQWdJSEpsZEhWeWJpQmpZWEJoWW1sc2FYUjVMbkJ5YjIxcGMyVTdYRzRnSUgxY2JuMHBPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhLRlZUUlY5T1FWUkpWa1VnSmlZZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pYUmxZM1FuS1NobWRXNWpkR2x2YmlocGRHVnlLWHRjYmlBZ0pGQnliMjFwYzJVdVlXeHNLR2wwWlhJcFd5ZGpZWFJqYUNkZEtHVnRjSFI1S1R0Y2JuMHBLU3dnVUZKUFRVbFRSU3dnZTF4dUlDQXZMeUF5TlM0MExqUXVNU0JRY205dGFYTmxMbUZzYkNocGRHVnlZV0pzWlNsY2JpQWdZV3hzT2lCbWRXNWpkR2x2YmlCaGJHd29hWFJsY21GaWJHVXBlMXh1SUNBZ0lIWmhjaUJESUNBZ0lDQWdJQ0FnSUQwZ2RHaHBjMXh1SUNBZ0lDQWdMQ0JqWVhCaFltbHNhWFI1SUQwZ2JtVjNVSEp2YldselpVTmhjR0ZpYVd4cGRIa29ReWxjYmlBZ0lDQWdJQ3dnY21WemIyeDJaU0FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZ6YjJ4MlpWeHVJQ0FnSUNBZ0xDQnlaV3BsWTNRZ0lDQWdJRDBnWTJGd1lXSnBiR2wwZVM1eVpXcGxZM1E3WEc0Z0lDQWdkbUZ5SUdGaWNuVndkQ0E5SUhCbGNtWnZjbTBvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhaaGNpQjJZV3gxWlhNZ0lDQWdQU0JiWFZ4dUlDQWdJQ0FnSUNBc0lHbHVaR1Y0SUNBZ0lDQTlJREJjYmlBZ0lDQWdJQ0FnTENCeVpXMWhhVzVwYm1jZ1BTQXhPMXh1SUNBZ0lDQWdabTl5VDJZb2FYUmxjbUZpYkdVc0lHWmhiSE5sTENCbWRXNWpkR2x2Ymlod2NtOXRhWE5sS1h0Y2JpQWdJQ0FnSUNBZ2RtRnlJQ1JwYm1SbGVDQWdJQ0FnSUNBZ1BTQnBibVJsZUNzclhHNGdJQ0FnSUNBZ0lDQWdMQ0JoYkhKbFlXUjVRMkZzYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsY3k1d2RYTm9LSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lDQWdJQ0FnSUhKbGJXRnBibWx1Wnlzck8xeHVJQ0FnSUNBZ0lDQkRMbkpsYzI5c2RtVW9jSEp2YldselpTa3VkR2hsYmlobWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9ZV3h5WldGa2VVTmhiR3hsWkNseVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ1lXeHlaV0ZrZVVOaGJHeGxaQ0FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxjMXNrYVc1a1pYaGRJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnTFMxeVpXMWhhVzVwYm1jZ2ZId2djbVZ6YjJ4MlpTaDJZV3gxWlhNcE8xeHVJQ0FnSUNBZ0lDQjlMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0F0TFhKbGJXRnBibWx1WnlCOGZDQnlaWE52YkhabEtIWmhiSFZsY3lrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZb1lXSnlkWEIwS1hKbGFtVmpkQ2hoWW5KMWNIUXVaWEp5YjNJcE8xeHVJQ0FnSUhKbGRIVnliaUJqWVhCaFltbHNhWFI1TG5CeWIyMXBjMlU3WEc0Z0lIMHNYRzRnSUM4dklESTFMalF1TkM0MElGQnliMjFwYzJVdWNtRmpaU2hwZEdWeVlXSnNaU2xjYmlBZ2NtRmpaVG9nWm5WdVkzUnBiMjRnY21GalpTaHBkR1Z5WVdKc1pTbDdYRzRnSUNBZ2RtRnlJRU1nSUNBZ0lDQWdJQ0FnUFNCMGFHbHpYRzRnSUNBZ0lDQXNJR05oY0dGaWFXeHBkSGtnUFNCdVpYZFFjbTl0YVhObFEyRndZV0pwYkdsMGVTaERLVnh1SUNBZ0lDQWdMQ0J5WldwbFkzUWdJQ0FnSUQwZ1kyRndZV0pwYkdsMGVTNXlaV3BsWTNRN1hHNGdJQ0FnZG1GeUlHRmljblZ3ZENBOUlIQmxjbVp2Y20wb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lHWnZjazltS0dsMFpYSmhZbXhsTENCbVlXeHpaU3dnWm5WdVkzUnBiMjRvY0hKdmJXbHpaU2w3WEc0Z0lDQWdJQ0FnSUVNdWNtVnpiMngyWlNod2NtOXRhWE5sS1M1MGFHVnVLR05oY0dGaWFXeHBkSGt1Y21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJR2xtS0dGaWNuVndkQ2x5WldwbFkzUW9ZV0p5ZFhCMExtVnljbTl5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMkZ3WVdKcGJHbDBlUzV3Y205dGFYTmxPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlOaTR4TGpFZ1VtVm1iR1ZqZEM1aGNIQnNlU2gwWVhKblpYUXNJSFJvYVhOQmNtZDFiV1Z1ZEN3Z1lYSm5kVzFsYm5SelRHbHpkQ2xjYm5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh1SUNBc0lHRnVUMkpxWldOMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWDJGd2NHeDVJQ0FnSUQwZ1JuVnVZM1JwYjI0dVlYQndiSGs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VbVZtYkdWamRDY3NJSHRjYmlBZ1lYQndiSGs2SUdaMWJtTjBhVzl1SUdGd2NHeDVLSFJoY21kbGRDd2dkR2hwYzBGeVozVnRaVzUwTENCaGNtZDFiV1Z1ZEhOTWFYTjBLWHRjYmlBZ0lDQnlaWFIxY200Z1gyRndjR3g1TG1OaGJHd29ZVVoxYm1OMGFXOXVLSFJoY21kbGRDa3NJSFJvYVhOQmNtZDFiV1Z1ZEN3Z1lXNVBZbXBsWTNRb1lYSm5kVzFsYm5SelRHbHpkQ2twTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqSWdVbVZtYkdWamRDNWpiMjV6ZEhKMVkzUW9kR0Z5WjJWMExDQmhjbWQxYldWdWRITk1hWE4wSUZzc0lHNWxkMVJoY21kbGRGMHBYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmpjbVZoZEdVZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdQU0J5WlhGMWFYSmxLQ2N1TDE5aExXWjFibU4wYVc5dUp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2x6VDJKcVpXTjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z1ltbHVaQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWW1sdVpDY3BPMXh1WEc0dkx5Qk5VeUJGWkdkbElITjFjSEJ2Y25SeklHOXViSGtnTWlCaGNtZDFiV1Z1ZEhOY2JpOHZJRVpHSUU1cFoyaDBiSGtnYzJWMGN5QjBhR2x5WkNCaGNtZDFiV1Z1ZENCaGN5QmdibVYzTG5SaGNtZGxkR0FzSUdKMWRDQmtiMlZ6SUc1dmRDQmpjbVZoZEdVZ1lIUm9hWE5nSUdaeWIyMGdhWFJjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQm1kVzVqZEdsdmJpQkdLQ2w3ZlZ4dUlDQnlaWFIxY200Z0lTaFNaV1pzWldOMExtTnZibk4wY25WamRDaG1kVzVqZEdsdmJpZ3BlMzBzSUZ0ZExDQkdLU0JwYm5OMFlXNWpaVzltSUVZcE8xeHVmU2tzSUNkU1pXWnNaV04wSnl3Z2UxeHVJQ0JqYjI1emRISjFZM1E2SUdaMWJtTjBhVzl1SUdOdmJuTjBjblZqZENoVVlYSm5aWFFzSUdGeVozTWdMeW9zSUc1bGQxUmhjbWRsZENvdktYdGNiaUFnSUNCaFJuVnVZM1JwYjI0b1ZHRnlaMlYwS1R0Y2JpQWdJQ0JoYms5aWFtVmpkQ2hoY21kektUdGNiaUFnSUNCMllYSWdibVYzVkdGeVoyVjBJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURNZ1B5QlVZWEpuWlhRZ09pQmhSblZ1WTNScGIyNG9ZWEpuZFcxbGJuUnpXekpkS1R0Y2JpQWdJQ0JwWmloVVlYSm5aWFFnUFQwZ2JtVjNWR0Z5WjJWMEtYdGNiaUFnSUNBZ0lDOHZJSGN2YnlCaGJIUmxjbVZrSUc1bGQxUmhjbWRsZEN3Z2IzQjBhVzFwZW1GMGFXOXVJR1p2Y2lBd0xUUWdZWEpuZFcxbGJuUnpYRzRnSUNBZ0lDQnpkMmwwWTJnb1lYSm5jeTVzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBPMXh1SUNBZ0lDQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElETTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElEUTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHNJR0Z5WjNOYk0xMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnZHk5dklHRnNkR1Z5WldRZ2JtVjNWR0Z5WjJWMExDQnNiM1FnYjJZZ1lYSm5kVzFsYm5SeklHTmhjMlZjYmlBZ0lDQWdJSFpoY2lBa1lYSm5jeUE5SUZ0dWRXeHNYVHRjYmlBZ0lDQWdJQ1JoY21kekxuQjFjMmd1WVhCd2JIa29KR0Z5WjNNc0lHRnlaM01wTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlBb1ltbHVaQzVoY0hCc2VTaFVZWEpuWlhRc0lDUmhjbWR6S1NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhkcGRHZ2dZV3gwWlhKbFpDQnVaWGRVWVhKblpYUXNJRzV2ZENCemRYQndiM0owSUdKMWFXeDBMV2x1SUdOdmJuTjBjblZqZEc5eWMxeHVJQ0FnSUhaaGNpQndjbTkwYnlBZ0lDQTlJRzVsZDFSaGNtZGxkQzV3Y205MGIzUjVjR1ZjYmlBZ0lDQWdJQ3dnYVc1emRHRnVZMlVnUFNCamNtVmhkR1VvYVhOUFltcGxZM1FvY0hKdmRHOHBJRDhnY0hKdmRHOGdPaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxLVnh1SUNBZ0lDQWdMQ0J5WlhOMWJIUWdJQ0E5SUVaMWJtTjBhVzl1TG1Gd2NHeDVMbU5oYkd3b1ZHRnlaMlYwTENCcGJuTjBZVzVqWlN3Z1lYSm5jeWs3WEc0Z0lDQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtISmxjM1ZzZENrZ1B5QnlaWE4xYkhRZ09pQnBibk4wWVc1alpUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qWXVNUzR6SUZKbFpteGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU3dnWVhSMGNtbGlkWFJsY3lsY2JuWmhjaUJrVUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcE8xeHVYRzR2THlCTlV5QkZaR2RsSUdoaGN5QmljbTlyWlc0Z1VtVm1iR1ZqZEM1a1pXWnBibVZRY205d1pYSjBlU0F0SUhSb2NtOTNhVzVuSUdsdWMzUmxZV1FnYjJZZ2NtVjBkWEp1YVc1bklHWmhiSE5sWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdVbVZtYkdWamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoa1VDNW1LSHQ5TENBeExDQjdkbUZzZFdVNklERjlLU3dnTVN3Z2UzWmhiSFZsT2lBeWZTazdYRzU5S1N3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdSbFptbHVaVkJ5YjNCbGNuUjVPaUJtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lIQnliM0JsY25SNVMyVjVMQ0JoZEhSeWFXSjFkR1Z6S1h0Y2JpQWdJQ0JoYms5aWFtVmpkQ2gwWVhKblpYUXBPMXh1SUNBZ0lIQnliM0JsY25SNVMyVjVJRDBnZEc5UWNtbHRhWFJwZG1Vb2NISnZjR1Z5ZEhsTFpYa3NJSFJ5ZFdVcE8xeHVJQ0FnSUdGdVQySnFaV04wS0dGMGRISnBZblYwWlhNcE8xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmtVQzVtS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrc0lHRjBkSEpwWW5WMFpYTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjBwT3lJc0lpOHZJREkyTGpFdU5DQlNaV1pzWldOMExtUmxiR1YwWlZCeWIzQmxjblI1S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcFhHNTJZWElnSkdWNGNHOXlkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdkUFVFUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjR1FuS1M1bVhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCa1pXeGxkR1ZRY205d1pYSjBlVG9nWm5WdVkzUnBiMjRnWkdWc1pYUmxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2w3WEc0Z0lDQWdkbUZ5SUdSbGMyTWdQU0JuVDFCRUtHRnVUMkpxWldOMEtIUmhjbWRsZENrc0lIQnliM0JsY25SNVMyVjVLVHRjYmlBZ0lDQnlaWFIxY200Z1pHVnpZeUFtSmlBaFpHVnpZeTVqYjI1bWFXZDFjbUZpYkdVZ1B5Qm1ZV3h6WlNBNklHUmxiR1YwWlNCMFlYSm5aWFJiY0hKdmNHVnlkSGxMWlhsZE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF5Tmk0eExqVWdVbVZtYkdWamRDNWxiblZ0WlhKaGRHVW9kR0Z5WjJWMEtWeHVkbUZ5SUNSbGVIQnZjblFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCaGJrOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwTzF4dWRtRnlJRVZ1ZFcxbGNtRjBaU0E5SUdaMWJtTjBhVzl1S0dsMFpYSmhkR1ZrS1h0Y2JpQWdkR2hwY3k1ZmRDQTlJR0Z1VDJKcVpXTjBLR2wwWlhKaGRHVmtLVHNnTHk4Z2RHRnlaMlYwWEc0Z0lIUm9hWE11WDJrZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1bGVIUWdhVzVrWlhoY2JpQWdkbUZ5SUd0bGVYTWdQU0IwYUdsekxsOXJJRDBnVzEwZ0lDQWdJQ0FnTHk4Z2EyVjVjMXh1SUNBZ0lDd2dhMlY1TzF4dUlDQm1iM0lvYTJWNUlHbHVJR2wwWlhKaGRHVmtLV3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVmVHRjYm5KbGNYVnBjbVVvSnk0dlgybDBaWEl0WTNKbFlYUmxKeWtvUlc1MWJXVnlZWFJsTENBblQySnFaV04wSnl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlIUm9ZWFFnUFNCMGFHbHpYRzRnSUNBZ0xDQnJaWGx6SUQwZ2RHaGhkQzVmYTF4dUlDQWdJQ3dnYTJWNU8xeHVJQ0JrYnlCN1hHNGdJQ0FnYVdZb2RHaGhkQzVmYVNBK1BTQnJaWGx6TG14bGJtZDBhQ2x5WlhSMWNtNGdlM1poYkhWbE9pQjFibVJsWm1sdVpXUXNJR1J2Ym1VNklIUnlkV1Y5TzF4dUlDQjlJSGRvYVd4bEtDRW9LR3RsZVNBOUlHdGxlWE5iZEdoaGRDNWZhU3NyWFNrZ2FXNGdkR2hoZEM1ZmRDa3BPMXh1SUNCeVpYUjFjbTRnZTNaaGJIVmxPaUJyWlhrc0lHUnZibVU2SUdaaGJITmxmVHRjYm4wcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR1Z1ZFcxbGNtRjBaVG9nWm5WdVkzUnBiMjRnWlc1MWJXVnlZWFJsS0hSaGNtZGxkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJGYm5WdFpYSmhkR1VvZEdGeVoyVjBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0M0lGSmxabXhsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcFhHNTJZWElnWjA5UVJDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlPaUJtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2w3WEc0Z0lDQWdjbVYwZFhKdUlHZFBVRVF1WmloaGJrOWlhbVZqZENoMFlYSm5aWFFwTENCd2NtOXdaWEowZVV0bGVTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1T0NCU1pXWnNaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDbGNiblpoY2lBa1pYaHdiM0owSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1oyVjBVSEp2ZEc4Z1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdkbGRGQnliM1J2ZEhsd1pVOW1PaUJtZFc1amRHbHZiaUJuWlhSUWNtOTBiM1I1Y0dWUFppaDBZWEpuWlhRcGUxeHVJQ0FnSUhKbGRIVnliaUJuWlhSUWNtOTBieWhoYms5aWFtVmpkQ2gwWVhKblpYUXBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0MklGSmxabXhsWTNRdVoyVjBLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtnV3l3Z2NtVmpaV2wyWlhKZEtWeHVkbUZ5SUdkUFVFUWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LVnh1SUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUNSbGVIQnZjblFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNibHh1Wm5WdVkzUnBiMjRnWjJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3ZLaXdnY21WalpXbDJaWElxTHlsN1hHNGdJSFpoY2lCeVpXTmxhWFpsY2lBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQXpJRDhnZEdGeVoyVjBJRG9nWVhKbmRXMWxiblJ6V3pKZFhHNGdJQ0FnTENCa1pYTmpMQ0J3Y205MGJ6dGNiaUFnYVdZb1lXNVBZbXBsWTNRb2RHRnlaMlYwS1NBOVBUMGdjbVZqWldsMlpYSXBjbVYwZFhKdUlIUmhjbWRsZEZ0d2NtOXdaWEowZVV0bGVWMDdYRzRnSUdsbUtHUmxjMk1nUFNCblQxQkVMbVlvZEdGeVoyVjBMQ0J3Y205d1pYSjBlVXRsZVNrcGNtVjBkWEp1SUdoaGN5aGtaWE5qTENBbmRtRnNkV1VuS1Z4dUlDQWdJRDhnWkdWell5NTJZV3gxWlZ4dUlDQWdJRG9nWkdWell5NW5aWFFnSVQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ1B5QmtaWE5qTG1kbGRDNWpZV3hzS0hKbFkyVnBkbVZ5S1Z4dUlDQWdJQ0FnT2lCMWJtUmxabWx1WldRN1hHNGdJR2xtS0dselQySnFaV04wS0hCeWIzUnZJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9kR0Z5WjJWMEtTa3BjbVYwZFhKdUlHZGxkQ2h3Y205MGJ5d2djSEp2Y0dWeWRIbExaWGtzSUhKbFkyVnBkbVZ5S1R0Y2JuMWNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXWnNaV04wSnl3Z2UyZGxkRG9nWjJWMGZTazdJaXdpTHk4Z01qWXVNUzQ1SUZKbFpteGxZM1F1YUdGektIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdoaGN6b2dablZ1WTNScGIyNGdhR0Z6S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcGUxeHVJQ0FnSUhKbGRIVnliaUJ3Y205d1pYSjBlVXRsZVNCcGJpQjBZWEpuWlhRN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJMkxqRXVNVEFnVW1WbWJHVmpkQzVwYzBWNGRHVnVjMmxpYkdVb2RHRnlaMlYwS1Z4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lDUnBjMFY0ZEdWdWMybGliR1VnUFNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR2x6UlhoMFpXNXphV0pzWlRvZ1puVnVZM1JwYjI0Z2FYTkZlSFJsYm5OcFlteGxLSFJoY21kbGRDbDdYRzRnSUNBZ1lXNVBZbXBsWTNRb2RHRnlaMlYwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdKR2x6UlhoMFpXNXphV0pzWlNBL0lDUnBjMFY0ZEdWdWMybGliR1VvZEdGeVoyVjBLU0E2SUhSeWRXVTdYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1TVRFZ1VtVm1iR1ZqZEM1dmQyNUxaWGx6S0hSaGNtZGxkQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VbVZtYkdWamRDY3NJSHR2ZDI1TFpYbHpPaUJ5WlhGMWFYSmxLQ2N1TDE5dmQyNHRhMlY1Y3ljcGZTazdJaXdpTHk4Z01qWXVNUzR4TWlCU1pXWnNaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6S0hSaGNtZGxkQ2xjYm5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z0pIQnlaWFpsYm5SRmVIUmxibk5wYjI1eklEMGdUMkpxWldOMExuQnlaWFpsYm5SRmVIUmxibk5wYjI1ek8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJSEJ5WlhabGJuUkZlSFJsYm5OcGIyNXpPaUJtZFc1amRHbHZiaUJ3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWgwWVhKblpYUXBlMXh1SUNBZ0lHRnVUMkpxWldOMEtIUmhjbWRsZENrN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHbG1LQ1J3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWtrY0hKbGRtVnVkRVY0ZEdWdWMybHZibk1vZEdGeVoyVjBLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqRTBJRkpsWm14bFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZb2RHRnlaMlYwTENCd2NtOTBieWxjYm5aaGNpQWtaWGh3YjNKMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djMlYwVUhKdmRHOGdQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRjSEp2ZEc4bktUdGNibHh1YVdZb2MyVjBVSEp2ZEc4cEpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCelpYUlFjbTkwYjNSNWNHVlBaam9nWm5WdVkzUnBiMjRnYzJWMFVISnZkRzkwZVhCbFQyWW9kR0Z5WjJWMExDQndjbTkwYnlsN1hHNGdJQ0FnYzJWMFVISnZkRzh1WTJobFkyc29kR0Z5WjJWMExDQndjbTkwYnlrN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lITmxkRkJ5YjNSdkxuTmxkQ2gwWVhKblpYUXNJSEJ5YjNSdktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNTlLVHNpTENJdkx5QXlOaTR4TGpFeklGSmxabXhsWTNRdWMyVjBLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtzSUZZZ1d5d2djbVZqWldsMlpYSmRLVnh1ZG1GeUlHUlFJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQm5UMUJFSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlsY2JpQWdMQ0JuWlhSUWNtOTBiM1I1Y0dWUFppQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnYVhOUFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNibHh1Wm5WdVkzUnBiMjRnYzJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3NJRll2S2l3Z2NtVmpaV2wyWlhJcUx5bDdYRzRnSUhaaGNpQnlaV05sYVhabGNpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0EwSUQ4Z2RHRnlaMlYwSURvZ1lYSm5kVzFsYm5Seld6TmRYRzRnSUNBZ0xDQnZkMjVFWlhOaklDQTlJR2RQVUVRdVppaGhiazlpYW1WamRDaDBZWEpuWlhRcExDQndjbTl3WlhKMGVVdGxlU2xjYmlBZ0lDQXNJR1Y0YVhOMGFXNW5SR1Z6WTNKcGNIUnZjaXdnY0hKdmRHODdYRzRnSUdsbUtDRnZkMjVFWlhOaktYdGNiaUFnSUNCcFppaHBjMDlpYW1WamRDaHdjbTkwYnlBOUlHZGxkRkJ5YjNSdmRIbHdaVTltS0hSaGNtZGxkQ2twS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6WlhRb2NISnZkRzhzSUhCeWIzQmxjblI1UzJWNUxDQldMQ0J5WldObGFYWmxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHOTNia1JsYzJNZ1BTQmpjbVZoZEdWRVpYTmpLREFwTzF4dUlDQjlYRzRnSUdsbUtHaGhjeWh2ZDI1RVpYTmpMQ0FuZG1Gc2RXVW5LU2w3WEc0Z0lDQWdhV1lvYjNkdVJHVnpZeTUzY21sMFlXSnNaU0E5UFQwZ1ptRnNjMlVnZkh3Z0lXbHpUMkpxWldOMEtISmxZMlZwZG1WeUtTbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdaWGhwYzNScGJtZEVaWE5qY21sd2RHOXlJRDBnWjA5UVJDNW1LSEpsWTJWcGRtVnlMQ0J3Y205d1pYSjBlVXRsZVNrZ2ZId2dZM0psWVhSbFJHVnpZeWd3S1R0Y2JpQWdJQ0JsZUdsemRHbHVaMFJsYzJOeWFYQjBiM0l1ZG1Gc2RXVWdQU0JXTzF4dUlDQWdJR1JRTG1Zb2NtVmpaV2wyWlhJc0lIQnliM0JsY25SNVMyVjVMQ0JsZUdsemRHbHVaMFJsYzJOeWFYQjBiM0lwTzF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZDI1RVpYTmpMbk5sZENBOVBUMGdkVzVrWldacGJtVmtJRDhnWm1Gc2MyVWdPaUFvYjNkdVJHVnpZeTV6WlhRdVkyRnNiQ2h5WldObGFYWmxjaXdnVmlrc0lIUnlkV1VwTzF4dWZWeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN2MyVjBPaUJ6WlhSOUtUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHbHVhR1Z5YVhSSlpsSmxjWFZwY21Wa0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc1b1pYSnBkQzFwWmkxeVpYRjFhWEpsWkNjcFhHNGdJQ3dnWkZBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpY3BMbVpjYmlBZ0xDQnBjMUpsWjBWNGNDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxYSmxaMlY0Y0NjcFhHNGdJQ3dnSkdac1lXZHpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1iR0ZuY3ljcFhHNGdJQ3dnSkZKbFowVjRjQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VW1WblJYaHdYRzRnSUN3Z1FtRnpaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQWtVbVZuUlhod1hHNGdJQ3dnY0hKdmRHOGdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1VtVm5SWGh3TG5CeWIzUnZkSGx3WlZ4dUlDQXNJSEpsTVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnTDJFdloxeHVJQ0FzSUhKbE1pQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0wyRXZaMXh1SUNBdkx5QmNJbTVsZDF3aUlHTnlaV0YwWlhNZ1lTQnVaWGNnYjJKcVpXTjBMQ0J2YkdRZ2QyVmlhMmwwSUdKMVoyZDVJR2hsY21WY2JpQWdMQ0JEVDFKU1JVTlVYMDVGVnlBZ0lDQWdJQ0E5SUc1bGR5QWtVbVZuUlhod0tISmxNU2tnSVQwOUlISmxNVHRjYmx4dWFXWW9jbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUFvSVVOUFVsSkZRMVJmVGtWWElIeDhJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVV5VzNKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkdFlYUmphQ2NwWFNBOUlHWmhiSE5sTzF4dUlDQXZMeUJTWldkRmVIQWdZMjl1YzNSeWRXTjBiM0lnWTJGdUlHRnNkR1Z5SUdac1lXZHpJR0Z1WkNCSmMxSmxaMFY0Y0NCM2IzSnJjeUJqYjNKeVpXTjBJSGRwZEdnZ1FFQnRZWFJqYUZ4dUlDQnlaWFIxY200Z0pGSmxaMFY0Y0NoeVpURXBJQ0U5SUhKbE1TQjhmQ0FrVW1WblJYaHdLSEpsTWlrZ1BUMGdjbVV5SUh4OElDUlNaV2RGZUhBb2NtVXhMQ0FuYVNjcElDRTlJQ2N2WVM5cEp6dGNibjBwS1NsN1hHNGdJQ1JTWldkRmVIQWdQU0JtZFc1amRHbHZiaUJTWldkRmVIQW9jQ3dnWmlsN1hHNGdJQ0FnZG1GeUlIUnBVa1VnUFNCMGFHbHpJR2x1YzNSaGJtTmxiMllnSkZKbFowVjRjRnh1SUNBZ0lDQWdMQ0J3YVZKRklEMGdhWE5TWldkRmVIQW9jQ2xjYmlBZ0lDQWdJQ3dnWm1sVklDQTlJR1lnUFQwOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCeVpYUjFjbTRnSVhScFVrVWdKaVlnY0dsU1JTQW1KaUJ3TG1OdmJuTjBjblZqZEc5eUlEMDlQU0FrVW1WblJYaHdJQ1ltSUdacFZTQS9JSEJjYmlBZ0lDQWdJRG9nYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FvUTA5U1VrVkRWRjlPUlZkY2JpQWdJQ0FnSUNBZ1B5QnVaWGNnUW1GelpTaHdhVkpGSUNZbUlDRm1hVlVnUHlCd0xuTnZkWEpqWlNBNklIQXNJR1lwWEc0Z0lDQWdJQ0FnSURvZ1FtRnpaU2dvY0dsU1JTQTlJSEFnYVc1emRHRnVZMlZ2WmlBa1VtVm5SWGh3S1NBL0lIQXVjMjkxY21ObElEb2djQ3dnY0dsU1JTQW1KaUJtYVZVZ1B5QWtabXhoWjNNdVkyRnNiQ2h3S1NBNklHWXBYRzRnSUNBZ0lDQXNJSFJwVWtVZ1B5QjBhR2x6SURvZ2NISnZkRzhzSUNSU1pXZEZlSEFwTzF4dUlDQjlPMXh1SUNCMllYSWdjSEp2ZUhrZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQWdJR3RsZVNCcGJpQWtVbVZuUlhod0lIeDhJR1JRS0NSU1pXZEZlSEFzSUd0bGVTd2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1FtRnpaVnRyWlhsZE95QjlMRnh1SUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlocGRDbDdJRUpoYzJWYmEyVjVYU0E5SUdsME95QjlYRzRnSUNBZ2ZTazdYRzRnSUgwN1hHNGdJR1p2Y2loMllYSWdhMlY1Y3lBOUlHZFBVRTRvUW1GelpTa3NJR2tnUFNBd095QnJaWGx6TG14bGJtZDBhQ0ErSUdrN0lDbHdjbTk0ZVNoclpYbHpXMmtySzEwcE8xeHVJQ0J3Y205MGJ5NWpiMjV6ZEhKMVkzUnZjaUE5SUNSU1pXZEZlSEE3WEc0Z0lDUlNaV2RGZUhBdWNISnZkRzkwZVhCbElEMGdjSEp2ZEc4N1hHNGdJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlrb1oyeHZZbUZzTENBblVtVm5SWGh3Snl3Z0pGSmxaMFY0Y0NrN1hHNTlYRzVjYm5KbGNYVnBjbVVvSnk0dlgzTmxkQzF6Y0dWamFXVnpKeWtvSjFKbFowVjRjQ2NwT3lJc0lpOHZJREl4TGpJdU5TNHpJR2RsZENCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG1ac1lXZHpLQ2xjYm1sbUtISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdMeTR2Wnk1bWJHRm5jeUFoUFNBblp5Y3BjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVppaFNaV2RGZUhBdWNISnZkRzkwZVhCbExDQW5abXhoWjNNbkxDQjdYRzRnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdaMlYwT2lCeVpYRjFhWEpsS0NjdUwxOW1iR0ZuY3ljcFhHNTlLVHNpTENJdkx5QkFRRzFoZEdOb0lHeHZaMmxqWEc1eVpYRjFhWEpsS0NjdUwxOW1hWGd0Y21VdGQydHpKeWtvSjIxaGRHTm9KeXdnTVN3Z1puVnVZM1JwYjI0b1pHVm1hVzVsWkN3Z1RVRlVRMGdzSUNSdFlYUmphQ2w3WEc0Z0lDOHZJREl4TGpFdU15NHhNU0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbTFoZEdOb0tISmxaMlY0Y0NsY2JpQWdjbVYwZFhKdUlGdG1kVzVqZEdsdmJpQnRZWFJqYUNoeVpXZGxlSEFwZTF4dUlDQWdJQ2QxYzJVZ2MzUnlhV04wSnp0Y2JpQWdJQ0IyWVhJZ1R5QWdQU0JrWldacGJtVmtLSFJvYVhNcFhHNGdJQ0FnSUNBc0lHWnVJRDBnY21WblpYaHdJRDA5SUhWdVpHVm1hVzVsWkNBL0lIVnVaR1ZtYVc1bFpDQTZJSEpsWjJWNGNGdE5RVlJEU0YwN1hHNGdJQ0FnY21WMGRYSnVJR1p1SUNFOVBTQjFibVJsWm1sdVpXUWdQeUJtYmk1allXeHNLSEpsWjJWNGNDd2dUeWtnT2lCdVpYY2dVbVZuUlhod0tISmxaMlY0Y0NsYlRVRlVRMGhkS0ZOMGNtbHVaeWhQS1NrN1hHNGdJSDBzSUNSdFlYUmphRjA3WEc1OUtUc2lMQ0l2THlCQVFISmxjR3hoWTJVZ2JHOW5hV05jYm5KbGNYVnBjbVVvSnk0dlgyWnBlQzF5WlMxM2EzTW5LU2duY21Wd2JHRmpaU2NzSURJc0lHWjFibU4wYVc5dUtHUmxabWx1WldRc0lGSkZVRXhCUTBVc0lDUnlaWEJzWVdObEtYdGNiaUFnTHk4Z01qRXVNUzR6TGpFMElGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWNtVndiR0ZqWlNoelpXRnlZMmhXWVd4MVpTd2djbVZ3YkdGalpWWmhiSFZsS1Z4dUlDQnlaWFIxY200Z1cyWjFibU4wYVc5dUlISmxjR3hoWTJVb2MyVmhjbU5vVm1Gc2RXVXNJSEpsY0d4aFkyVldZV3gxWlNsN1hHNGdJQ0FnSjNWelpTQnpkSEpwWTNRbk8xeHVJQ0FnSUhaaGNpQlBJQ0E5SUdSbFptbHVaV1FvZEdocGN5bGNiaUFnSUNBZ0lDd2dabTRnUFNCelpXRnlZMmhXWVd4MVpTQTlQU0IxYm1SbFptbHVaV1FnUHlCMWJtUmxabWx1WldRZ09pQnpaV0Z5WTJoV1lXeDFaVnRTUlZCTVFVTkZYVHRjYmlBZ0lDQnlaWFIxY200Z1ptNGdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnUHlCbWJpNWpZV3hzS0hObFlYSmphRlpoYkhWbExDQlBMQ0J5WlhCc1lXTmxWbUZzZFdVcFhHNGdJQ0FnSUNBNklDUnlaWEJzWVdObExtTmhiR3dvVTNSeWFXNW5LRThwTENCelpXRnlZMmhXWVd4MVpTd2djbVZ3YkdGalpWWmhiSFZsS1R0Y2JpQWdmU3dnSkhKbGNHeGhZMlZkTzF4dWZTazdJaXdpTHk4Z1FFQnpaV0Z5WTJnZ2JHOW5hV05jYm5KbGNYVnBjbVVvSnk0dlgyWnBlQzF5WlMxM2EzTW5LU2duYzJWaGNtTm9KeXdnTVN3Z1puVnVZM1JwYjI0b1pHVm1hVzVsWkN3Z1UwVkJVa05JTENBa2MyVmhjbU5vS1h0Y2JpQWdMeThnTWpFdU1TNHpMakUxSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1YzJWaGNtTm9LSEpsWjJWNGNDbGNiaUFnY21WMGRYSnVJRnRtZFc1amRHbHZiaUJ6WldGeVkyZ29jbVZuWlhod0tYdGNiaUFnSUNBbmRYTmxJSE4wY21samRDYzdYRzRnSUNBZ2RtRnlJRThnSUQwZ1pHVm1hVzVsWkNoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JtYmlBOUlISmxaMlY0Y0NBOVBTQjFibVJsWm1sdVpXUWdQeUIxYm1SbFptbHVaV1FnT2lCeVpXZGxlSEJiVTBWQlVrTklYVHRjYmlBZ0lDQnlaWFIxY200Z1ptNGdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHWnVMbU5oYkd3b2NtVm5aWGh3TENCUEtTQTZJRzVsZHlCU1pXZEZlSEFvY21WblpYaHdLVnRUUlVGU1EwaGRLRk4wY21sdVp5aFBLU2s3WEc0Z0lIMHNJQ1J6WldGeVkyaGRPMXh1ZlNrN0lpd2lMeThnUUVCemNHeHBkQ0JzYjJkcFkxeHVjbVZ4ZFdseVpTZ25MaTlmWm1sNExYSmxMWGRyY3ljcEtDZHpjR3hwZENjc0lESXNJR1oxYm1OMGFXOXVLR1JsWm1sdVpXUXNJRk5RVEVsVUxDQWtjM0JzYVhRcGUxeHVJQ0FuZFhObElITjBjbWxqZENjN1hHNGdJSFpoY2lCcGMxSmxaMFY0Y0NBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGNtVm5aWGh3SnlsY2JpQWdJQ0FzSUY5emNHeHBkQ0FnSUNBZ1BTQWtjM0JzYVhSY2JpQWdJQ0FzSUNSd2RYTm9JQ0FnSUNBZ1BTQmJYUzV3ZFhOb1hHNGdJQ0FnTENBa1UxQk1TVlFnSUNBZ0lEMGdKM053YkdsMEoxeHVJQ0FnSUN3Z1RFVk9SMVJJSUNBZ0lDQTlJQ2RzWlc1bmRHZ25YRzRnSUNBZ0xDQk1RVk5VWDBsT1JFVllJRDBnSjJ4aGMzUkpibVJsZUNjN1hHNGdJR2xtS0Z4dUlDQWdJQ2RoWW1Kakoxc2tVMUJNU1ZSZEtDOG9ZaWtxTHlsYk1WMGdQVDBnSjJNbklIeDhYRzRnSUNBZ0ozUmxjM1FuV3lSVFVFeEpWRjBvTHlnL09pa3ZMQ0F0TVNsYlRFVk9SMVJJWFNBaFBTQTBJSHg4WEc0Z0lDQWdKMkZpSjFza1UxQk1TVlJkS0M4b1B6cGhZaWtxTHlsYlRFVk9SMVJJWFNBaFBTQXlJSHg4WEc0Z0lDQWdKeTRuV3lSVFVFeEpWRjBvTHlndVB5a29MajhwTHlsYlRFVk9SMVJJWFNBaFBTQTBJSHg4WEc0Z0lDQWdKeTRuV3lSVFVFeEpWRjBvTHlncEtDa3ZLVnRNUlU1SFZFaGRJRDRnTVNCOGZGeHVJQ0FnSUNjbld5UlRVRXhKVkYwb0x5NC9MeWxiVEVWT1IxUklYVnh1SUNBcGUxeHVJQ0FnSUhaaGNpQk9VRU5ISUQwZ0x5Z3BQejh2TG1WNFpXTW9KeWNwV3pGZElEMDlQU0IxYm1SbFptbHVaV1E3SUM4dklHNXZibkJoY25ScFkybHdZWFJwYm1jZ1kyRndkSFZ5YVc1bklHZHliM1Z3WEc0Z0lDQWdMeThnWW1GelpXUWdiMjRnWlhNMUxYTm9hVzBnYVcxd2JHVnRaVzUwWVhScGIyNHNJRzVsWldRZ2RHOGdjbVYzYjNKcklHbDBYRzRnSUNBZ0pITndiR2wwSUQwZ1puVnVZM1JwYjI0b2MyVndZWEpoZEc5eUxDQnNhVzFwZENsN1hHNGdJQ0FnSUNCMllYSWdjM1J5YVc1bklEMGdVM1J5YVc1bktIUm9hWE1wTzF4dUlDQWdJQ0FnYVdZb2MyVndZWEpoZEc5eUlEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2JHbHRhWFFnUFQwOUlEQXBjbVYwZFhKdUlGdGRPMXh1SUNBZ0lDQWdMeThnU1dZZ1lITmxjR0Z5WVhSdmNtQWdhWE1nYm05MElHRWdjbVZuWlhnc0lIVnpaU0J1WVhScGRtVWdjM0JzYVhSY2JpQWdJQ0FnSUdsbUtDRnBjMUpsWjBWNGNDaHpaWEJoY21GMGIzSXBLWEpsZEhWeWJpQmZjM0JzYVhRdVkyRnNiQ2h6ZEhKcGJtY3NJSE5sY0dGeVlYUnZjaXdnYkdsdGFYUXBPMXh1SUNBZ0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ2RtRnlJR1pzWVdkeklEMGdLSE5sY0dGeVlYUnZjaTVwWjI1dmNtVkRZWE5sSUQ4Z0oya25JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhCaGNtRjBiM0l1YlhWc2RHbHNhVzVsSUQ4Z0oyMG5JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhCaGNtRjBiM0l1ZFc1cFkyOWtaU0EvSUNkMUp5QTZJQ2NuS1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jMlZ3WVhKaGRHOXlMbk4wYVdOcmVTQS9JQ2Q1SnlBNklDY25LVHRjYmlBZ0lDQWdJSFpoY2lCc1lYTjBUR0Z6ZEVsdVpHVjRJRDBnTUR0Y2JpQWdJQ0FnSUhaaGNpQnpjR3hwZEV4cGJXbDBJRDBnYkdsdGFYUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lEUXlPVFE1TmpjeU9UVWdPaUJzYVcxcGRDQStQajRnTUR0Y2JpQWdJQ0FnSUM4dklFMWhhMlVnWUdkc2IySmhiR0FnWVc1a0lHRjJiMmxrSUdCc1lYTjBTVzVrWlhoZ0lHbHpjM1ZsY3lCaWVTQjNiM0pyYVc1bklIZHBkR2dnWVNCamIzQjVYRzRnSUNBZ0lDQjJZWElnYzJWd1lYSmhkRzl5UTI5d2VTQTlJRzVsZHlCU1pXZEZlSEFvYzJWd1lYSmhkRzl5TG5OdmRYSmpaU3dnWm14aFozTWdLeUFuWnljcE8xeHVJQ0FnSUNBZ2RtRnlJSE5sY0dGeVlYUnZjaklzSUcxaGRHTm9MQ0JzWVhOMFNXNWtaWGdzSUd4aGMzUk1aVzVuZEdnc0lHazdYRzRnSUNBZ0lDQXZMeUJFYjJWemJpZDBJRzVsWldRZ1pteGhaM01nWjNrc0lHSjFkQ0IwYUdWNUlHUnZiaWQwSUdoMWNuUmNiaUFnSUNBZ0lHbG1LQ0ZPVUVOSEtYTmxjR0Z5WVhSdmNqSWdQU0J1WlhjZ1VtVm5SWGh3S0NkZUp5QXJJSE5sY0dGeVlYUnZja052Y0hrdWMyOTFjbU5sSUNzZ0p5UW9QeUZjWEZ4Y2N5a25MQ0JtYkdGbmN5azdYRzRnSUNBZ0lDQjNhR2xzWlNodFlYUmphQ0E5SUhObGNHRnlZWFJ2Y2tOdmNIa3VaWGhsWXloemRISnBibWNwS1h0Y2JpQWdJQ0FnSUNBZ0x5OGdZSE5sY0dGeVlYUnZja052Y0hrdWJHRnpkRWx1WkdWNFlDQnBjeUJ1YjNRZ2NtVnNhV0ZpYkdVZ1kzSnZjM010WW5KdmQzTmxjbHh1SUNBZ0lDQWdJQ0JzWVhOMFNXNWtaWGdnUFNCdFlYUmphQzVwYm1SbGVDQXJJRzFoZEdOb1d6QmRXMHhGVGtkVVNGMDdYRzRnSUNBZ0lDQWdJR2xtS0d4aGMzUkpibVJsZUNBK0lHeGhjM1JNWVhOMFNXNWtaWGdwZTF4dUlDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1d2RYTm9LSE4wY21sdVp5NXpiR2xqWlNoc1lYTjBUR0Z6ZEVsdVpHVjRMQ0J0WVhSamFDNXBibVJsZUNrcE8xeHVJQ0FnSUNBZ0lDQWdJQzh2SUVacGVDQmljbTkzYzJWeWN5QjNhRzl6WlNCZ1pYaGxZMkFnYldWMGFHOWtjeUJrYjI0bmRDQmpiMjV6YVhOMFpXNTBiSGtnY21WMGRYSnVJR0IxYm1SbFptbHVaV1JnSUdadmNpQk9VRU5IWEc0Z0lDQWdJQ0FnSUNBZ2FXWW9JVTVRUTBjZ0ppWWdiV0YwWTJoYlRFVk9SMVJJWFNBK0lERXBiV0YwWTJoYk1GMHVjbVZ3YkdGalpTaHpaWEJoY21GMGIzSXlMQ0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5S0drZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SelcweEZUa2RVU0YwZ0xTQXlPeUJwS3lzcGFXWW9ZWEpuZFcxbGJuUnpXMmxkSUQwOVBTQjFibVJsWm1sdVpXUXBiV0YwWTJoYmFWMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnYVdZb2JXRjBZMmhiVEVWT1IxUklYU0ErSURFZ0ppWWdiV0YwWTJndWFXNWtaWGdnUENCemRISnBibWRiVEVWT1IxUklYU2trY0hWemFDNWhjSEJzZVNodmRYUndkWFFzSUcxaGRHTm9Mbk5zYVdObEtERXBLVHRjYmlBZ0lDQWdJQ0FnSUNCc1lYTjBUR1Z1WjNSb0lEMGdiV0YwWTJoYk1GMWJURVZPUjFSSVhUdGNiaUFnSUNBZ0lDQWdJQ0JzWVhOMFRHRnpkRWx1WkdWNElEMGdiR0Z6ZEVsdVpHVjRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtHOTFkSEIxZEZ0TVJVNUhWRWhkSUQ0OUlITndiR2wwVEdsdGFYUXBZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lvYzJWd1lYSmhkRzl5UTI5d2VWdE1RVk5VWDBsT1JFVllYU0E5UFQwZ2JXRjBZMmd1YVc1a1pYZ3BjMlZ3WVhKaGRHOXlRMjl3ZVZ0TVFWTlVYMGxPUkVWWVhTc3JPeUF2THlCQmRtOXBaQ0JoYmlCcGJtWnBibWwwWlNCc2IyOXdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaWhzWVhOMFRHRnpkRWx1WkdWNElEMDlQU0J6ZEhKcGJtZGJURVZPUjFSSVhTbDdYRzRnSUNBZ0lDQWdJR2xtS0d4aGMzUk1aVzVuZEdnZ2ZId2dJWE5sY0dGeVlYUnZja052Y0hrdWRHVnpkQ2duSnlrcGIzVjBjSFYwTG5CMWMyZ29KeWNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJRzkxZEhCMWRDNXdkWE5vS0hOMGNtbHVaeTV6YkdsalpTaHNZWE4wVEdGemRFbHVaR1Y0S1NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWMGNIVjBXMHhGVGtkVVNGMGdQaUJ6Y0d4cGRFeHBiV2wwSUQ4Z2IzVjBjSFYwTG5Oc2FXTmxLREFzSUhOd2JHbDBUR2x0YVhRcElEb2diM1YwY0hWME8xeHVJQ0FnSUgwN1hHNGdJQzh2SUVOb1lXdHlZU3dnVmpoY2JpQWdmU0JsYkhObElHbG1LQ2N3SjFza1UxQk1TVlJkS0hWdVpHVm1hVzVsWkN3Z01DbGJURVZPUjFSSVhTbDdYRzRnSUNBZ0pITndiR2wwSUQwZ1puVnVZM1JwYjI0b2MyVndZWEpoZEc5eUxDQnNhVzFwZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWd1lYSmhkRzl5SUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnYkdsdGFYUWdQVDA5SURBZ1B5QmJYU0E2SUY5emNHeHBkQzVqWVd4c0tIUm9hWE1zSUhObGNHRnlZWFJ2Y2l3Z2JHbHRhWFFwTzF4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnTHk4Z01qRXVNUzR6TGpFM0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWMzQnNhWFFvYzJWd1lYSmhkRzl5TENCc2FXMXBkQ2xjYmlBZ2NtVjBkWEp1SUZ0bWRXNWpkR2x2YmlCemNHeHBkQ2h6WlhCaGNtRjBiM0lzSUd4cGJXbDBLWHRjYmlBZ0lDQjJZWElnVHlBZ1BTQmtaV1pwYm1Wa0tIUm9hWE1wWEc0Z0lDQWdJQ0FzSUdadUlEMGdjMlZ3WVhKaGRHOXlJRDA5SUhWdVpHVm1hVzVsWkNBL0lIVnVaR1ZtYVc1bFpDQTZJSE5sY0dGeVlYUnZjbHRUVUV4SlZGMDdYRzRnSUNBZ2NtVjBkWEp1SUdadUlDRTlQU0IxYm1SbFptbHVaV1FnUHlCbWJpNWpZV3hzS0hObGNHRnlZWFJ2Y2l3Z1R5d2diR2x0YVhRcElEb2dKSE53YkdsMExtTmhiR3dvVTNSeWFXNW5LRThwTENCelpYQmhjbUYwYjNJc0lHeHBiV2wwS1R0Y2JpQWdmU3dnSkhOd2JHbDBYVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2NseHVjbVZ4ZFdseVpTZ25MaTlsY3pZdWNtVm5aWGh3TG1ac1lXZHpKeWs3WEhKY2JuWmhjaUJoYms5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEhKY2JpQWdMQ0FrWm14aFozTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpzWVdkekp5bGNjbHh1SUNBc0lFUkZVME5TU1ZCVVQxSlRJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LVnh5WEc0Z0lDd2dWRTlmVTFSU1NVNUhJQ0FnUFNBbmRHOVRkSEpwYm1jblhISmNiaUFnTENBa2RHOVRkSEpwYm1jZ0lDQTlJQzh1TDF0VVQxOVRWRkpKVGtkZE8xeHlYRzVjY2x4dWRtRnlJR1JsWm1sdVpTQTlJR1oxYm1OMGFXOXVLR1p1S1h0Y2NseHVJQ0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVc0lGUlBYMU5VVWtsT1J5d2dabTRzSUhSeWRXVXBPMXh5WEc1OU8xeHlYRzVjY2x4dUx5OGdNakV1TWk0MUxqRTBJRkpsWjBWNGNDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY29LVnh5WEc1cFppaHlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUFrZEc5VGRISnBibWN1WTJGc2JDaDdjMjkxY21ObE9pQW5ZU2NzSUdac1lXZHpPaUFuWWlkOUtTQWhQU0FuTDJFdllpYzdJSDBwS1h0Y2NseHVJQ0JrWldacGJtVW9ablZ1WTNScGIyNGdkRzlUZEhKcGJtY29LWHRjY2x4dUlDQWdJSFpoY2lCU0lEMGdZVzVQWW1wbFkzUW9kR2hwY3lrN1hISmNiaUFnSUNCeVpYUjFjbTRnSnk4bkxtTnZibU5oZENoU0xuTnZkWEpqWlN3Z0p5OG5MRnh5WEc0Z0lDQWdJQ0FuWm14aFozTW5JR2x1SUZJZ1B5QlNMbVpzWVdkeklEb2dJVVJGVTBOU1NWQlVUMUpUSUNZbUlGSWdhVzV6ZEdGdVkyVnZaaUJTWldkRmVIQWdQeUFrWm14aFozTXVZMkZzYkNoU0tTQTZJSFZ1WkdWbWFXNWxaQ2s3WEhKY2JpQWdmU2s3WEhKY2JpOHZJRVpHTkRRdElGSmxaMFY0Y0NOMGIxTjBjbWx1WnlCb1lYTWdZU0IzY205dVp5QnVZVzFsWEhKY2JuMGdaV3h6WlNCcFppZ2tkRzlUZEhKcGJtY3VibUZ0WlNBaFBTQlVUMTlUVkZKSlRrY3BlMXh5WEc0Z0lHUmxabWx1WlNobWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUNSMGIxTjBjbWx1Wnk1allXeHNLSFJvYVhNcE8xeHlYRzRnSUgwcE8xeHlYRzU5SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlITjBjbTl1WnlBOUlISmxjWFZwY21Vb0p5NHZYMk52Ykd4bFkzUnBiMjR0YzNSeWIyNW5KeWs3WEc1Y2JpOHZJREl6TGpJZ1UyVjBJRTlpYW1WamRITmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5c2JHVmpkR2x2YmljcEtDZFRaWFFuTENCbWRXNWpkR2x2YmloblpYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVTJWMEtDbDdJSEpsZEhWeWJpQm5aWFFvZEdocGN5d2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnUHlCaGNtZDFiV1Z1ZEhOYk1GMGdPaUIxYm1SbFptbHVaV1FwT3lCOU8xeHVmU3dnZTF4dUlDQXZMeUF5TXk0eUxqTXVNU0JUWlhRdWNISnZkRzkwZVhCbExtRmtaQ2gyWVd4MVpTbGNiaUFnWVdSa09pQm1kVzVqZEdsdmJpQmhaR1FvZG1Gc2RXVXBlMXh1SUNBZ0lISmxkSFZ5YmlCemRISnZibWN1WkdWbUtIUm9hWE1zSUhaaGJIVmxJRDBnZG1Gc2RXVWdQVDA5SURBZ1B5QXdJRG9nZG1Gc2RXVXNJSFpoYkhWbEtUdGNiaUFnZlZ4dWZTd2djM1J5YjI1bktUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NHlJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVZVzVqYUc5eUtHNWhiV1VwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkaGJtTm9iM0luTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR0Z1WTJodmNpaHVZVzFsS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5ZU2NzSUNkdVlXMWxKeXdnYm1GdFpTazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUVJdU1pNHpMak1nVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVpYVdjb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25ZbWxuSnl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJpYVdjb0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuWW1sbkp5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVOQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbUpzYVc1cktDbGNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTFvZEcxc0p5a29KMkpzYVc1ckp5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCaWJHbHVheWdwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZGliR2x1YXljc0lDY25MQ0FuSnlrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJRUl1TWk0ekxqVWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWliMnhrS0NsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0oySnZiR1FuTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR0p2YkdRb0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuWWljc0lDY25MQ0FuSnlrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWVhRZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdGMEp5a29abUZzYzJVcE8xeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQXNJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lDOHZJREl4TGpFdU15NHpJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVZMjlrWlZCdmFXNTBRWFFvY0c5ektWeHVJQ0JqYjJSbFVHOXBiblJCZERvZ1puVnVZM1JwYjI0Z1kyOWtaVkJ2YVc1MFFYUW9jRzl6S1h0Y2JpQWdJQ0J5WlhSMWNtNGdKR0YwS0hSb2FYTXNJSEJ2Y3lrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJeExqRXVNeTQySUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Wlc1a2MxZHBkR2dvYzJWaGNtTm9VM1J5YVc1bklGc3NJR1Z1WkZCdmMybDBhVzl1WFNsY2JpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYRzRnSUN3Z1kyOXVkR1Y0ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV052Ym5SbGVIUW5LVnh1SUNBc0lFVk9SRk5mVjBsVVNDQTlJQ2RsYm1SelYybDBhQ2RjYmlBZ0xDQWtaVzVrYzFkcGRHZ2dQU0FuSjF0RlRrUlRYMWRKVkVoZE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekxXbHpMWEpsWjJWNGNDY3BLRVZPUkZOZlYwbFVTQ2tzSUNkVGRISnBibWNuTENCN1hHNGdJR1Z1WkhOWGFYUm9PaUJtZFc1amRHbHZiaUJsYm1SelYybDBhQ2h6WldGeVkyaFRkSEpwYm1jZ0x5b3NJR1Z1WkZCdmMybDBhVzl1SUQwZ1FHeGxibWQwYUNBcUx5bDdYRzRnSUNBZ2RtRnlJSFJvWVhRZ1BTQmpiMjUwWlhoMEtIUm9hWE1zSUhObFlYSmphRk4wY21sdVp5d2dSVTVFVTE5WFNWUklLVnh1SUNBZ0lDQWdMQ0JsYm1SUWIzTnBkR2x2YmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJR3hsYmlBZ0lDQTlJSFJ2VEdWdVozUm9LSFJvWVhRdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCbGJtUWdJQ0FnUFNCbGJtUlFiM05wZEdsdmJpQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z2JHVnVJRG9nVFdGMGFDNXRhVzRvZEc5TVpXNW5kR2dvWlc1a1VHOXphWFJwYjI0cExDQnNaVzRwWEc0Z0lDQWdJQ0FzSUhObFlYSmphQ0E5SUZOMGNtbHVaeWh6WldGeVkyaFRkSEpwYm1jcE8xeHVJQ0FnSUhKbGRIVnliaUFrWlc1a2MxZHBkR2hjYmlBZ0lDQWdJRDhnSkdWdVpITlhhWFJvTG1OaGJHd29kR2hoZEN3Z2MyVmhjbU5vTENCbGJtUXBYRzRnSUNBZ0lDQTZJSFJvWVhRdWMyeHBZMlVvWlc1a0lDMGdjMlZoY21Ob0xteGxibWQwYUN3Z1pXNWtLU0E5UFQwZ2MyVmhjbU5vTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0MklGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdVptbDRaV1FvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnblptbDRaV1FuTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR1pwZUdWa0tDbDdYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVWhVVFV3b2RHaHBjeXdnSjNSMEp5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVOeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbVp2Ym5SamIyeHZjaWhqYjJ4dmNpbGNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTFvZEcxc0p5a29KMlp2Ym5SamIyeHZjaWNzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdabTl1ZEdOdmJHOXlLR052Ykc5eUtYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuWm05dWRDY3NJQ2RqYjJ4dmNpY3NJR052Ykc5eUtUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVPQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbVp2Ym5SemFYcGxLSE5wZW1VcFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RhSFJ0YkNjcEtDZG1iMjUwYzJsNlpTY3NJR1oxYm1OMGFXOXVLR055WldGMFpVaFVUVXdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1ptOXVkSE5wZW1Vb2MybDZaU2w3WEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVoVVRVd29kR2hwY3l3Z0oyWnZiblFuTENBbmMybDZaU2NzSUhOcGVtVXBPMXh1SUNCOVhHNTlLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lIUnZTVzVrWlhnZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1a1pYZ25LVnh1SUNBc0lHWnliMjFEYUdGeVEyOWtaU0FnSUQwZ1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pWeHVJQ0FzSUNSbWNtOXRRMjlrWlZCdmFXNTBJRDBnVTNSeWFXNW5MbVp5YjIxRGIyUmxVRzlwYm5RN1hHNWNiaTh2SUd4bGJtZDBhQ0J6YUc5MWJHUWdZbVVnTVN3Z2IyeGtJRVpHSUhCeWIySnNaVzFjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLQ0VoSkdaeWIyMURiMlJsVUc5cGJuUWdKaVlnSkdaeWIyMURiMlJsVUc5cGJuUXViR1Z1WjNSb0lDRTlJREVwTENBblUzUnlhVzVuSnl3Z2UxeHVJQ0F2THlBeU1TNHhMakl1TWlCVGRISnBibWN1Wm5KdmJVTnZaR1ZRYjJsdWRDZ3VMaTVqYjJSbFVHOXBiblJ6S1Z4dUlDQm1jbTl0UTI5a1pWQnZhVzUwT2lCbWRXNWpkR2x2YmlCbWNtOXRRMjlrWlZCdmFXNTBLSGdwZXlBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnZG1GeUlISmxjeUFnUFNCYlhWeHVJQ0FnSUNBZ0xDQmhUR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCcElDQWdJRDBnTUZ4dUlDQWdJQ0FnTENCamIyUmxPMXh1SUNBZ0lIZG9hV3hsS0dGTVpXNGdQaUJwS1h0Y2JpQWdJQ0FnSUdOdlpHVWdQU0FyWVhKbmRXMWxiblJ6VzJrcksxMDdYRzRnSUNBZ0lDQnBaaWgwYjBsdVpHVjRLR052WkdVc0lEQjRNVEJtWm1abUtTQWhQVDBnWTI5a1pTbDBhSEp2ZHlCU1lXNW5aVVZ5Y205eUtHTnZaR1VnS3lBbklHbHpJRzV2ZENCaElIWmhiR2xrSUdOdlpHVWdjRzlwYm5RbktUdGNiaUFnSUNBZ0lISmxjeTV3ZFhOb0tHTnZaR1VnUENBd2VERXdNREF3WEc0Z0lDQWdJQ0FnSUQ4Z1puSnZiVU5vWVhKRGIyUmxLR052WkdVcFhHNGdJQ0FnSUNBZ0lEb2dabkp2YlVOb1lYSkRiMlJsS0Nnb1kyOWtaU0F0UFNBd2VERXdNREF3S1NBK1BpQXhNQ2tnS3lBd2VHUTRNREFzSUdOdlpHVWdKU0F3ZURRd01DQXJJREI0WkdNd01DbGNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTQnlaWFIxY200Z2NtVnpMbXB2YVc0b0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNUzR4TGpNdU55QlRkSEpwYm1jdWNISnZkRzkwZVhCbExtbHVZMngxWkdWektITmxZWEpqYUZOMGNtbHVaeXdnY0c5emFYUnBiMjRnUFNBd0tWeHVKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JqYjI1MFpYaDBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxamIyNTBaWGgwSnlsY2JpQWdMQ0JKVGtOTVZVUkZVeUE5SUNkcGJtTnNkV1JsY3ljN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNdGFYTXRjbVZuWlhod0p5a29TVTVEVEZWRVJWTXBMQ0FuVTNSeWFXNW5KeXdnZTF4dUlDQnBibU5zZFdSbGN6b2dablZ1WTNScGIyNGdhVzVqYkhWa1pYTW9jMlZoY21Ob1UzUnlhVzVuSUM4cUxDQndiM05wZEdsdmJpQTlJREFnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFoSVg1amIyNTBaWGgwS0hSb2FYTXNJSE5sWVhKamFGTjBjbWx1Wnl3Z1NVNURURlZFUlZNcFhHNGdJQ0FnSUNBdWFXNWtaWGhQWmloelpXRnlZMmhUZEhKcGJtY3NJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU9TQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtbDBZV3hwWTNNb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25hWFJoYkdsamN5Y3NJR1oxYm1OMGFXOXVLR055WldGMFpVaFVUVXdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2FYUmhiR2xqY3lncGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RwSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JoZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RZWFFuS1NoMGNuVmxLVHRjYmx4dUx5OGdNakV1TVM0ekxqSTNJRk4wY21sdVp5NXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pXWnBibVVuS1NoVGRISnBibWNzSUNkVGRISnBibWNuTENCbWRXNWpkR2x2YmlocGRHVnlZWFJsWkNsN1hHNGdJSFJvYVhNdVgzUWdQU0JUZEhKcGJtY29hWFJsY21GMFpXUXBPeUF2THlCMFlYSm5aWFJjYmlBZ2RHaHBjeTVmYVNBOUlEQTdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmk4dklESXhMakV1TlM0eUxqRWdKVk4wY21sdVowbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpTNXVaWGgwS0NsY2JuMHNJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJQSUNBZ0lDQTlJSFJvYVhNdVgzUmNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVZ4dUlDQWdJQ3dnY0c5cGJuUTdYRzRnSUdsbUtHbHVaR1Y0SUQ0OUlFOHViR1Z1WjNSb0tYSmxkSFZ5YmlCN2RtRnNkV1U2SUhWdVpHVm1hVzVsWkN3Z1pHOXVaVG9nZEhKMVpYMDdYRzRnSUhCdmFXNTBJRDBnSkdGMEtFOHNJR2x1WkdWNEtUdGNiaUFnZEdocGN5NWZhU0FyUFNCd2IybHVkQzVzWlc1bmRHZzdYRzRnSUhKbGRIVnliaUI3ZG1Gc2RXVTZJSEJ2YVc1MExDQmtiMjVsT2lCbVlXeHpaWDA3WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NHhNQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbXhwYm1zb2RYSnNLVnh1Y21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdoMGJXd25LU2duYkdsdWF5Y3NJR1oxYm1OMGFXOXVLR055WldGMFpVaFVUVXdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2JHbHVheWgxY213cGUxeHVJQ0FnSUhKbGRIVnliaUJqY21WaGRHVklWRTFNS0hSb2FYTXNJQ2RoSnl3Z0oyaHlaV1luTENCMWNtd3BPMXh1SUNCOVhHNTlLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkVGRISnBibWNuTENCN1hHNGdJQzh2SURJeExqRXVNaTQwSUZOMGNtbHVaeTV5WVhjb1kyRnNiRk5wZEdVc0lDNHVMbk4xWW5OMGFYUjFkR2x2Ym5NcFhHNGdJSEpoZHpvZ1puVnVZM1JwYjI0Z2NtRjNLR05oYkd4VGFYUmxLWHRjYmlBZ0lDQjJZWElnZEhCc0lDQTlJSFJ2U1U5aWFtVmpkQ2hqWVd4c1UybDBaUzV5WVhjcFhHNGdJQ0FnSUNBc0lHeGxiaUFnUFNCMGIweGxibWQwYUNoMGNHd3ViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0xDQmhUR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCeVpYTWdJRDBnVzExY2JpQWdJQ0FnSUN3Z2FTQWdJQ0E5SURBN1hHNGdJQ0FnZDJocGJHVW9iR1Z1SUQ0Z2FTbDdYRzRnSUNBZ0lDQnlaWE11Y0hWemFDaFRkSEpwYm1jb2RIQnNXMmtySzEwcEtUdGNiaUFnSUNBZ0lHbG1LR2tnUENCaFRHVnVLWEpsY3k1d2RYTm9LRk4wY21sdVp5aGhjbWQxYldWdWRITmJhVjBwS1R0Y2JpQWdJQ0I5SUhKbGRIVnliaUJ5WlhNdWFtOXBiaWduSnlrN1hHNGdJSDFjYm4wcE95SXNJblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRTENBblUzUnlhVzVuSnl3Z2UxeHVJQ0F2THlBeU1TNHhMak11TVRNZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eVpYQmxZWFFvWTI5MWJuUXBYRzRnSUhKbGNHVmhkRG9nY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFhKbGNHVmhkQ2NwWEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUJDTGpJdU15NHhNU0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbk50WVd4c0tDbGNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTFvZEcxc0p5a29KM050WVd4c0p5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCemJXRnNiQ2dwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZHpiV0ZzYkNjc0lDY25MQ0FuSnlrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJeExqRXVNeTR4T0NCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5OMFlYSjBjMWRwZEdnb2MyVmhjbU5vVTNSeWFXNW5JRnNzSUhCdmMybDBhVzl1SUYwcFhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JqYjI1MFpYaDBJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MWpiMjUwWlhoMEp5bGNiaUFnTENCVFZFRlNWRk5mVjBsVVNDQTlJQ2R6ZEdGeWRITlhhWFJvSjF4dUlDQXNJQ1J6ZEdGeWRITlhhWFJvSUQwZ0p5ZGJVMVJCVWxSVFgxZEpWRWhkTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6TFdsekxYSmxaMlY0Y0NjcEtGTlVRVkpVVTE5WFNWUklLU3dnSjFOMGNtbHVaeWNzSUh0Y2JpQWdjM1JoY25SelYybDBhRG9nWm5WdVkzUnBiMjRnYzNSaGNuUnpWMmwwYUNoelpXRnlZMmhUZEhKcGJtY2dMeW9zSUhCdmMybDBhVzl1SUQwZ01DQXFMeWw3WEc0Z0lDQWdkbUZ5SUhSb1lYUWdJQ0E5SUdOdmJuUmxlSFFvZEdocGN5d2djMlZoY21Ob1UzUnlhVzVuTENCVFZFRlNWRk5mVjBsVVNDbGNiaUFnSUNBZ0lDd2dhVzVrWlhnZ0lEMGdkRzlNWlc1bmRHZ29UV0YwYUM1dGFXNG9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1FzSUhSb1lYUXViR1Z1WjNSb0tTbGNiaUFnSUNBZ0lDd2djMlZoY21Ob0lEMGdVM1J5YVc1bktITmxZWEpqYUZOMGNtbHVaeWs3WEc0Z0lDQWdjbVYwZFhKdUlDUnpkR0Z5ZEhOWGFYUm9YRzRnSUNBZ0lDQS9JQ1J6ZEdGeWRITlhhWFJvTG1OaGJHd29kR2hoZEN3Z2MyVmhjbU5vTENCcGJtUmxlQ2xjYmlBZ0lDQWdJRG9nZEdoaGRDNXpiR2xqWlNocGJtUmxlQ3dnYVc1a1pYZ2dLeUJ6WldGeVkyZ3ViR1Z1WjNSb0tTQTlQVDBnYzJWaGNtTm9PMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCQ0xqSXVNeTR4TWlCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5OMGNtbHJaU2dwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkemRISnBhMlVuTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSE4wY21sclpTZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkemRISnBhMlVuTENBbkp5d2dKeWNwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0eE15QlRkSEpwYm1jdWNISnZkRzkwZVhCbExuTjFZaWdwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkemRXSW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITjFZaWdwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZHpkV0luTENBbkp5d2dKeWNwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0eE5DQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuTjFjQ2dwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkemRYQW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITjFjQ2dwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZHpkWEFuTENBbkp5d2dKeWNwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QXlNUzR4TGpNdU1qVWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNTBjbWx0S0NsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MTBjbWx0Snlrb0ozUnlhVzBuTENCbWRXNWpkR2x2Ymlna2RISnBiU2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCMGNtbHRLQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUjBjbWx0S0hSb2FYTXNJRE1wTzF4dUlDQjlPMXh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdSVU5OUVZOamNtbHdkQ0EySUhONWJXSnZiSE1nYzJocGJWeHVkbUZ5SUdkc2IySmhiQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1JFVlRRMUpKVUZSUFVsTWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lISmxaR1ZtYVc1bElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LVnh1SUNBc0lFMUZWRUVnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV1YwWVNjcExrdEZXVnh1SUNBc0lDUm1ZV2xzY3lBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUhOb1lYSmxaQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlsY2JpQWdMQ0IxYVdRZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BYRzRnSUN3Z2QydHpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1Z4dUlDQXNJSGRyYzBWNGRDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekxXVjRkQ2NwWEc0Z0lDd2dkMnR6UkdWbWFXNWxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpHVm1hVzVsSnlsY2JpQWdMQ0JyWlhsUFppQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ0bGVXOW1KeWxjYmlBZ0xDQmxiblZ0UzJWNWN5QWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdGEyVjVjeWNwWEc0Z0lDd2dhWE5CY25KaGVTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxaGNuSmhlU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5UWNtbHRhWFJwZG1VZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVnh1SUNBc0lHTnlaV0YwWlVSbGMyTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcFhHNGdJQ3dnWDJOeVpXRjBaU0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WTNKbFlYUmxKeWxjYmlBZ0xDQm5UMUJPUlhoMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J1TFdWNGRDY3BYRzRnSUN3Z0pFZFBVRVFnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDd2dKRVJRSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJQ1JyWlhseklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV3RsZVhNbktWeHVJQ0FzSUdkUFVFUWdJQ0FnSUNBZ0lDQWdJRDBnSkVkUFVFUXVabHh1SUNBc0lHUlFJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0pFUlFMbVpjYmlBZ0xDQm5UMUJPSUNBZ0lDQWdJQ0FnSUNBOUlHZFBVRTVGZUhRdVpseHVJQ0FzSUNSVGVXMWliMndnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMbE41YldKdmJGeHVJQ0FzSUNSS1UwOU9JQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMa3BUVDA1Y2JpQWdMQ0JmYzNSeWFXNW5hV1o1SUNBZ0lDQTlJQ1JLVTA5T0lDWW1JQ1JLVTA5T0xuTjBjbWx1WjJsbWVWeHVJQ0FzSUZCU1QxUlBWRmxRUlNBZ0lDQWdJRDBnSjNCeWIzUnZkSGx3WlNkY2JpQWdMQ0JJU1VSRVJVNGdJQ0FnSUNBZ0lDQTlJSGRyY3lnblgyaHBaR1JsYmljcFhHNGdJQ3dnVkU5ZlVGSkpUVWxVU1ZaRklDQWdQU0IzYTNNb0ozUnZVSEpwYldsMGFYWmxKeWxjYmlBZ0xDQnBjMFZ1ZFcwZ0lDQWdJQ0FnSUNBOUlIdDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsWEc0Z0lDd2dVM2x0WW05c1VtVm5hWE4wY25rZ1BTQnphR0Z5WldRb0ozTjViV0p2YkMxeVpXZHBjM1J5ZVNjcFhHNGdJQ3dnUVd4c1UzbHRZbTlzY3lBZ0lDQWdQU0J6YUdGeVpXUW9KM041YldKdmJITW5LVnh1SUNBc0lFOVFVM2x0WW05c2N5QWdJQ0FnSUQwZ2MyaGhjbVZrS0NkdmNDMXplVzFpYjJ4ekp5bGNiaUFnTENCUFltcGxZM1JRY205MGJ5QWdJQ0E5SUU5aWFtVmpkRnRRVWs5VVQxUlpVRVZkWEc0Z0lDd2dWVk5GWDA1QlZFbFdSU0FnSUNBZ1BTQjBlWEJsYjJZZ0pGTjViV0p2YkNBOVBTQW5ablZ1WTNScGIyNG5YRzRnSUN3Z1VVOWlhbVZqZENBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VVU5aWFtVmpkRHRjYmk4dklFUnZiaWQwSUhWelpTQnpaWFIwWlhKeklHbHVJRkYwSUZOamNtbHdkQ3dnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNwc2IybHliMk5yTDJOdmNtVXRhbk12YVhOemRXVnpMekUzTTF4dWRtRnlJSE5sZEhSbGNpQTlJQ0ZSVDJKcVpXTjBJSHg4SUNGUlQySnFaV04wVzFCU1QxUlBWRmxRUlYwZ2ZId2dJVkZQWW1wbFkzUmJVRkpQVkU5VVdWQkZYUzVtYVc1a1EyaHBiR1E3WEc1Y2JpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdmJHUWdRVzVrY205cFpDd2dhSFIwY0hNNkx5OWpiMlJsTG1kdmIyZHNaUzVqYjIwdmNDOTJPQzlwYzNOMVpYTXZaR1YwWVdsc1AybGtQVFk0TjF4dWRtRnlJSE5sZEZONWJXSnZiRVJsYzJNZ1BTQkVSVk5EVWtsUVZFOVNVeUFtSmlBa1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlGOWpjbVZoZEdVb1pGQW9lMzBzSUNkaEp5d2dlMXh1SUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUdSUUtIUm9hWE1zSUNkaEp5d2dlM1poYkhWbE9pQTNmU2t1WVRzZ2ZWeHVJQ0I5S1NrdVlTQWhQU0EzTzF4dWZTa2dQeUJtZFc1amRHbHZiaWhwZEN3Z2EyVjVMQ0JFS1h0Y2JpQWdkbUZ5SUhCeWIzUnZSR1Z6WXlBOUlHZFBVRVFvVDJKcVpXTjBVSEp2ZEc4c0lHdGxlU2s3WEc0Z0lHbG1LSEJ5YjNSdlJHVnpZeWxrWld4bGRHVWdUMkpxWldOMFVISnZkRzliYTJWNVhUdGNiaUFnWkZBb2FYUXNJR3RsZVN3Z1JDazdYRzRnSUdsbUtIQnliM1J2UkdWell5QW1KaUJwZENBaFBUMGdUMkpxWldOMFVISnZkRzhwWkZBb1QySnFaV04wVUhKdmRHOHNJR3RsZVN3Z2NISnZkRzlFWlhOaktUdGNibjBnT2lCa1VEdGNibHh1ZG1GeUlIZHlZWEFnUFNCbWRXNWpkR2x2YmloMFlXY3BlMXh1SUNCMllYSWdjM2x0SUQwZ1FXeHNVM2x0WW05c2MxdDBZV2RkSUQwZ1gyTnlaV0YwWlNna1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwcE8xeHVJQ0J6ZVcwdVgyc2dQU0IwWVdjN1hHNGdJSEpsZEhWeWJpQnplVzA3WEc1OU8xeHVYRzUyWVhJZ2FYTlRlVzFpYjJ3Z1BTQlZVMFZmVGtGVVNWWkZJQ1ltSUhSNWNHVnZaaUFrVTNsdFltOXNMbWwwWlhKaGRHOXlJRDA5SUNkemVXMWliMnduSUQ4Z1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR2wwSUQwOUlDZHplVzFpYjJ3bk8xeHVmU0E2SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUdsdWMzUmhibU5sYjJZZ0pGTjViV0p2YkR0Y2JuMDdYRzVjYm5aaGNpQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1TENCRUtYdGNiaUFnYVdZb2FYUWdQVDA5SUU5aWFtVmpkRkJ5YjNSdktTUmtaV1pwYm1WUWNtOXdaWEowZVNoUFVGTjViV0p2YkhNc0lHdGxlU3dnUkNrN1hHNGdJR0Z1VDJKcVpXTjBLR2wwS1R0Y2JpQWdhMlY1SUQwZ2RHOVFjbWx0YVhScGRtVW9hMlY1TENCMGNuVmxLVHRjYmlBZ1lXNVBZbXBsWTNRb1JDazdYRzRnSUdsbUtHaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BLWHRjYmlBZ0lDQnBaaWdoUkM1bGJuVnRaWEpoWW14bEtYdGNiaUFnSUNBZ0lHbG1LQ0ZvWVhNb2FYUXNJRWhKUkVSRlRpa3BaRkFvYVhRc0lFaEpSRVJGVGl3Z1kzSmxZWFJsUkdWell5Z3hMQ0I3ZlNrcE8xeHVJQ0FnSUNBZ2FYUmJTRWxFUkVWT1hWdHJaWGxkSUQwZ2RISjFaVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWW9hR0Z6S0dsMExDQklTVVJFUlU0cElDWW1JR2wwVzBoSlJFUkZUbDFiYTJWNVhTbHBkRnRJU1VSRVJVNWRXMnRsZVYwZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUVRZ1BTQmZZM0psWVhSbEtFUXNJSHRsYm5WdFpYSmhZbXhsT2lCamNtVmhkR1ZFWlhOaktEQXNJR1poYkhObEtYMHBPMXh1SUNBZ0lIMGdjbVYwZFhKdUlITmxkRk41YldKdmJFUmxjMk1vYVhRc0lHdGxlU3dnUkNrN1hHNGdJSDBnY21WMGRYSnVJR1JRS0dsMExDQnJaWGtzSUVRcE8xeHVmVHRjYm5aaGNpQWtaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5QTlJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9hWFFzSUZBcGUxeHVJQ0JoYms5aWFtVmpkQ2hwZENrN1hHNGdJSFpoY2lCclpYbHpJRDBnWlc1MWJVdGxlWE1vVUNBOUlIUnZTVTlpYW1WamRDaFFLU2xjYmlBZ0lDQXNJR2tnSUNBZ1BTQXdYRzRnSUNBZ0xDQnNJRDBnYTJWNWN5NXNaVzVuZEdoY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9iQ0ErSUdrcEpHUmxabWx1WlZCeWIzQmxjblI1S0dsMExDQnJaWGtnUFNCclpYbHpXMmtySzEwc0lGQmJhMlY1WFNrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNTJZWElnSkdOeVpXRjBaU0E5SUdaMWJtTjBhVzl1SUdOeVpXRjBaU2hwZEN3Z1VDbDdYRzRnSUhKbGRIVnliaUJRSUQwOVBTQjFibVJsWm1sdVpXUWdQeUJmWTNKbFlYUmxLR2wwS1NBNklDUmtaV1pwYm1WUWNtOXdaWEowYVdWektGOWpjbVZoZEdVb2FYUXBMQ0JRS1R0Y2JuMDdYRzUyWVhJZ0pIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxJRDBnWm5WdVkzUnBiMjRnY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVb2EyVjVLWHRjYmlBZ2RtRnlJRVVnUFNCcGMwVnVkVzB1WTJGc2JDaDBhR2x6TENCclpYa2dQU0IwYjFCeWFXMXBkR2wyWlNoclpYa3NJSFJ5ZFdVcEtUdGNiaUFnYVdZb2RHaHBjeUE5UFQwZ1QySnFaV04wVUhKdmRHOGdKaVlnYUdGektFRnNiRk41YldKdmJITXNJR3RsZVNrZ0ppWWdJV2hoY3loUFVGTjViV0p2YkhNc0lHdGxlU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0J5WlhSMWNtNGdSU0I4ZkNBaGFHRnpLSFJvYVhNc0lHdGxlU2tnZkh3Z0lXaGhjeWhCYkd4VGVXMWliMnh6TENCclpYa3BJSHg4SUdoaGN5aDBhR2x6TENCSVNVUkVSVTRwSUNZbUlIUm9hWE5iU0VsRVJFVk9YVnRyWlhsZElEOGdSU0E2SUhSeWRXVTdYRzU5TzF4dWRtRnlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTbDdYRzRnSUdsMElDQTlJSFJ2U1U5aWFtVmpkQ2hwZENrN1hHNGdJR3RsZVNBOUlIUnZVSEpwYldsMGFYWmxLR3RsZVN3Z2RISjFaU2s3WEc0Z0lHbG1LR2wwSUQwOVBTQlBZbXBsWTNSUWNtOTBieUFtSmlCb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQW1KaUFoYUdGektFOVFVM2x0WW05c2N5d2dhMlY1S1NseVpYUjFjbTQ3WEc0Z0lIWmhjaUJFSUQwZ1owOVFSQ2hwZEN3Z2EyVjVLVHRjYmlBZ2FXWW9SQ0FtSmlCb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQW1KaUFoS0doaGN5aHBkQ3dnU0VsRVJFVk9LU0FtSmlCcGRGdElTVVJFUlU1ZFcydGxlVjBwS1VRdVpXNTFiV1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJSEpsZEhWeWJpQkVPMXh1ZlR0Y2JuWmhjaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3lBOUlHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9hWFFwZTF4dUlDQjJZWElnYm1GdFpYTWdJRDBnWjA5UVRpaDBiMGxQWW1wbFkzUW9hWFFwS1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnVzExY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbDdYRzRnSUNBZ2FXWW9JV2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTQW1KaUJyWlhrZ0lUMGdTRWxFUkVWT0lDWW1JR3RsZVNBaFBTQk5SVlJCS1hKbGMzVnNkQzV3ZFhOb0tHdGxlU2s3WEc0Z0lIMGdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMDdYRzUyWVhJZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeUE5SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aHBkQ2w3WEc0Z0lIWmhjaUJKVTE5UFVDQWdQU0JwZENBOVBUMGdUMkpxWldOMFVISnZkRzljYmlBZ0lDQXNJRzVoYldWeklDQTlJR2RQVUU0b1NWTmZUMUFnUHlCUFVGTjViV0p2YkhNZ09pQjBiMGxQWW1wbFkzUW9hWFFwS1Z4dUlDQWdJQ3dnY21WemRXeDBJRDBnVzExY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUd0bGVUdGNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbDdYRzRnSUNBZ2FXWW9hR0Z6S0VGc2JGTjViV0p2YkhNc0lHdGxlU0E5SUc1aGJXVnpXMmtySzEwcElDWW1JQ2hKVTE5UFVDQS9JR2hoY3loUFltcGxZM1JRY205MGJ5d2dhMlY1S1NBNklIUnlkV1VwS1hKbGMzVnNkQzV3ZFhOb0tFRnNiRk41YldKdmJITmJhMlY1WFNrN1hHNGdJSDBnY21WMGRYSnVJSEpsYzNWc2REdGNibjA3WEc1Y2JpOHZJREU1TGpRdU1TNHhJRk41YldKdmJDaGJaR1Z6WTNKcGNIUnBiMjVkS1Z4dWFXWW9JVlZUUlY5T1FWUkpWa1VwZTF4dUlDQWtVM2x0WW05c0lEMGdablZ1WTNScGIyNGdVM2x0WW05c0tDbDdYRzRnSUNBZ2FXWW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlDUlRlVzFpYjJ3cGRHaHliM2NnVkhsd1pVVnljbTl5S0NkVGVXMWliMndnYVhNZ2JtOTBJR0VnWTI5dWMzUnlkV04wYjNJaEp5azdYRzRnSUNBZ2RtRnlJSFJoWnlBOUlIVnBaQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTUNBL0lHRnlaM1Z0Wlc1MGMxc3dYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZG1GeUlDUnpaWFFnUFNCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0JwWmloMGFHbHpJRDA5UFNCUFltcGxZM1JRY205MGJ5a2tjMlYwTG1OaGJHd29UMUJUZVcxaWIyeHpMQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQnBaaWhvWVhNb2RHaHBjeXdnU0VsRVJFVk9LU0FtSmlCb1lYTW9kR2hwYzF0SVNVUkVSVTVkTENCMFlXY3BLWFJvYVhOYlNFbEVSRVZPWFZ0MFlXZGRJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQnpaWFJUZVcxaWIyeEVaWE5qS0hSb2FYTXNJSFJoWnl3Z1kzSmxZWFJsUkdWell5Z3hMQ0IyWVd4MVpTa3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ2FXWW9SRVZUUTFKSlVGUlBVbE1nSmlZZ2MyVjBkR1Z5S1hObGRGTjViV0p2YkVSbGMyTW9UMkpxWldOMFVISnZkRzhzSUhSaFp5d2dlMk52Ym1acFozVnlZV0pzWlRvZ2RISjFaU3dnYzJWME9pQWtjMlYwZlNrN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhBb2RHRm5LVHRjYmlBZ2ZUdGNiaUFnY21Wa1pXWnBibVVvSkZONWJXSnZiRnRRVWs5VVQxUlpVRVZkTENBbmRHOVRkSEpwYm1jbkxDQm1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlyTzF4dUlDQjlLVHRjYmx4dUlDQWtSMDlRUkM1bUlEMGdKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqdGNiaUFnSkVSUUxtWWdJQ0E5SUNSa1pXWnBibVZRY205d1pYSjBlVHRjYmlBZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzRuS1M1bUlEMGdaMDlRVGtWNGRDNW1JRDBnSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNN1hHNGdJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF3YVdVbktTNW1JQ0E5SUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pUdGNiaUFnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNITW5LUzVtSUQwZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenRjYmx4dUlDQnBaaWhFUlZORFVrbFFWRTlTVXlBbUppQWhjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwS1h0Y2JpQWdJQ0J5WldSbFptbHVaU2hQWW1wbFkzUlFjbTkwYnl3Z0ozQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxKeXdnSkhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExDQjBjblZsS1R0Y2JpQWdmVnh1WEc0Z0lIZHJjMFY0ZEM1bUlEMGdablZ1WTNScGIyNG9ibUZ0WlNsN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhBb2QydHpLRzVoYldVcEtUdGNiaUFnZlZ4dWZWeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1VnlBcklDUmxlSEJ2Y25RdVJpQXFJQ0ZWVTBWZlRrRlVTVlpGTENCN1UzbHRZbTlzT2lBa1UzbHRZbTlzZlNrN1hHNWNibVp2Y2loMllYSWdjM2x0WW05c2N5QTlJQ2hjYmlBZ0x5OGdNVGt1TkM0eUxqSXNJREU1TGpRdU1pNHpMQ0F4T1M0MExqSXVOQ3dnTVRrdU5DNHlMallzSURFNUxqUXVNaTQ0TENBeE9TNDBMakl1T1N3Z01Ua3VOQzR5TGpFd0xDQXhPUzQwTGpJdU1URXNJREU1TGpRdU1pNHhNaXdnTVRrdU5DNHlMakV6TENBeE9TNDBMakl1TVRSY2JpQWdKMmhoYzBsdWMzUmhibU5sTEdselEyOXVZMkYwVTNCeVpXRmtZV0pzWlN4cGRHVnlZWFJ2Y2l4dFlYUmphQ3h5WlhCc1lXTmxMSE5sWVhKamFDeHpjR1ZqYVdWekxITndiR2wwTEhSdlVISnBiV2wwYVhabExIUnZVM1J5YVc1blZHRm5MSFZ1YzJOdmNHRmliR1Z6SjF4dUtTNXpjR3hwZENnbkxDY3BMQ0JwSUQwZ01Ec2djM2x0WW05c2N5NXNaVzVuZEdnZ1BpQnBPeUFwZDJ0ektITjViV0p2YkhOYmFTc3JYU2s3WEc1Y2JtWnZjaWgyWVhJZ2MzbHRZbTlzY3lBOUlDUnJaWGx6S0hkcmN5NXpkRzl5WlNrc0lHa2dQU0F3T3lCemVXMWliMnh6TG14bGJtZDBhQ0ErSUdrN0lDbDNhM05FWldacGJtVW9jM2x0WW05c2MxdHBLeXRkS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaFZWTkZYMDVCVkVsV1JTd2dKMU41YldKdmJDY3NJSHRjYmlBZ0x5OGdNVGt1TkM0eUxqRWdVM2x0WW05c0xtWnZjaWhyWlhrcFhHNGdJQ2RtYjNJbk9pQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQm9ZWE1vVTNsdFltOXNVbVZuYVhOMGNua3NJR3RsZVNBclBTQW5KeWxjYmlBZ0lDQWdJRDhnVTNsdFltOXNVbVZuYVhOMGNubGJhMlY1WFZ4dUlDQWdJQ0FnT2lCVGVXMWliMnhTWldkcGMzUnllVnRyWlhsZElEMGdKRk41YldKdmJDaHJaWGtwTzF4dUlDQjlMRnh1SUNBdkx5QXhPUzQwTGpJdU5TQlRlVzFpYjJ3dWEyVjVSbTl5S0hONWJTbGNiaUFnYTJWNVJtOXlPaUJtZFc1amRHbHZiaUJyWlhsR2IzSW9hMlY1S1h0Y2JpQWdJQ0JwWmlocGMxTjViV0p2YkNoclpYa3BLWEpsZEhWeWJpQnJaWGxQWmloVGVXMWliMnhTWldkcGMzUnllU3dnYTJWNUtUdGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvYTJWNUlDc2dKeUJwY3lCdWIzUWdZU0J6ZVcxaWIyd2hKeWs3WEc0Z0lIMHNYRzRnSUhWelpWTmxkSFJsY2pvZ1puVnVZM1JwYjI0b0tYc2djMlYwZEdWeUlEMGdkSEoxWlRzZ2ZTeGNiaUFnZFhObFUybHRjR3hsT2lCbWRXNWpkR2x2YmlncGV5QnpaWFIwWlhJZ1BTQm1ZV3h6WlRzZ2ZWeHVmU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUM4dklERTVMakV1TWk0eUlFOWlhbVZqZEM1amNtVmhkR1VvVHlCYkxDQlFjbTl3WlhKMGFXVnpYU2xjYmlBZ1kzSmxZWFJsT2lBa1kzSmxZWFJsTEZ4dUlDQXZMeUF4T1M0eExqSXVOQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lsY2JpQWdaR1ZtYVc1bFVISnZjR1Z5ZEhrNklDUmtaV1pwYm1WUWNtOXdaWEowZVN4Y2JpQWdMeThnTVRrdU1TNHlMak1nVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTW9UeXdnVUhKdmNHVnlkR2xsY3lsY2JpQWdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN6b2dKR1JsWm1sdVpWQnliM0JsY25ScFpYTXNYRzRnSUM4dklERTVMakV1TWk0MklFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvVHl3Z1VDbGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlPaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlMRnh1SUNBdkx5QXhPUzR4TGpJdU55QlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aFBLVnh1SUNCblpYUlBkMjVRY205d1pYSjBlVTVoYldWek9pQWtaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeXhjYmlBZ0x5OGdNVGt1TVM0eUxqZ2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeWhQS1Z4dUlDQm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE02SUNSblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITmNibjBwTzF4dVhHNHZMeUF5TkM0ekxqSWdTbE5QVGk1emRISnBibWRwWm5rb2RtRnNkV1VnV3l3Z2NtVndiR0ZqWlhJZ1d5d2djM0JoWTJWZFhTbGNiaVJLVTA5T0lDWW1JQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tDRlZVMFZmVGtGVVNWWkZJSHg4SUNSbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnVXlBOUlDUlRlVzFpYjJ3b0tUdGNiaUFnTHk4Z1RWTWdSV1JuWlNCamIyNTJaWEowY3lCemVXMWliMndnZG1Gc2RXVnpJSFJ2SUVwVFQwNGdZWE1nZTMxY2JpQWdMeThnVjJWaVMybDBJR052Ym5abGNuUnpJSE41YldKdmJDQjJZV3gxWlhNZ2RHOGdTbE5QVGlCaGN5QnVkV3hzWEc0Z0lDOHZJRlk0SUhSb2NtOTNjeUJ2YmlCaWIzaGxaQ0J6ZVcxaWIyeHpYRzRnSUhKbGRIVnliaUJmYzNSeWFXNW5hV1o1S0Z0VFhTa2dJVDBnSjF0dWRXeHNYU2NnZkh3Z1gzTjBjbWx1WjJsbWVTaDdZVG9nVTMwcElDRTlJQ2Q3ZlNjZ2ZId2dYM04wY21sdVoybG1lU2hQWW1wbFkzUW9VeWtwSUNFOUlDZDdmU2M3WEc1OUtTa3NJQ2RLVTA5T0p5d2dlMXh1SUNCemRISnBibWRwWm5rNklHWjFibU4wYVc5dUlITjBjbWx1WjJsbWVTaHBkQ2w3WEc0Z0lDQWdhV1lvYVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCcGMxTjViV0p2YkNocGRDa3BjbVYwZFhKdU95QXZMeUJKUlRnZ2NtVjBkWEp1Y3lCemRISnBibWNnYjI0Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCYmFYUmRYRzRnSUNBZ0lDQXNJR2tnSUNBZ1BTQXhYRzRnSUNBZ0lDQXNJSEpsY0d4aFkyVnlMQ0FrY21Wd2JHRmpaWEk3WEc0Z0lDQWdkMmhwYkdVb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lHa3BZWEpuY3k1d2RYTm9LR0Z5WjNWdFpXNTBjMXRwS3l0ZEtUdGNiaUFnSUNCeVpYQnNZV05sY2lBOUlHRnlaM05iTVYwN1hHNGdJQ0FnYVdZb2RIbHdaVzltSUhKbGNHeGhZMlZ5SUQwOUlDZG1kVzVqZEdsdmJpY3BKSEpsY0d4aFkyVnlJRDBnY21Wd2JHRmpaWEk3WEc0Z0lDQWdhV1lvSkhKbGNHeGhZMlZ5SUh4OElDRnBjMEZ5Y21GNUtISmxjR3hoWTJWeUtTbHlaWEJzWVdObGNpQTlJR1oxYm1OMGFXOXVLR3RsZVN3Z2RtRnNkV1VwZTF4dUlDQWdJQ0FnYVdZb0pISmxjR3hoWTJWeUtYWmhiSFZsSUQwZ0pISmxjR3hoWTJWeUxtTmhiR3dvZEdocGN5d2dhMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0JwWmlnaGFYTlRlVzFpYjJ3b2RtRnNkV1VwS1hKbGRIVnliaUIyWVd4MVpUdGNiaUFnSUNCOU8xeHVJQ0FnSUdGeVozTmJNVjBnUFNCeVpYQnNZV05sY2p0Y2JpQWdJQ0J5WlhSMWNtNGdYM04wY21sdVoybG1lUzVoY0hCc2VTZ2tTbE5QVGl3Z1lYSm5jeWs3WEc0Z0lIMWNibjBwTzF4dVhHNHZMeUF4T1M0MExqTXVOQ0JUZVcxaWIyd3VjSEp2ZEc5MGVYQmxXMEJBZEc5UWNtbHRhWFJwZG1WZEtHaHBiblFwWEc0a1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYxYlZFOWZVRkpKVFVsVVNWWkZYU0I4ZkNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlrb0pGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZExDQlVUMTlRVWtsTlNWUkpWa1VzSUNSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFM1MllXeDFaVTltS1R0Y2JpOHZJREU1TGpRdU15NDFJRk41YldKdmJDNXdjbTkwYjNSNWNHVmJRRUIwYjFOMGNtbHVaMVJoWjExY2JuTmxkRlJ2VTNSeWFXNW5WR0ZuS0NSVGVXMWliMndzSUNkVGVXMWliMnduS1R0Y2JpOHZJREl3TGpJdU1TNDVJRTFoZEdoYlFFQjBiMU4wY21sdVoxUmhaMTFjYm5ObGRGUnZVM1J5YVc1blZHRm5LRTFoZEdnc0lDZE5ZWFJvSnl3Z2RISjFaU2s3WEc0dkx5QXlOQzR6TGpNZ1NsTlBUbHRBUUhSdlUzUnlhVzVuVkdGblhWeHVjMlYwVkc5VGRISnBibWRVWVdjb1oyeHZZbUZzTGtwVFQwNHNJQ2RLVTA5T0p5d2dkSEoxWlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pIUjVjR1ZrSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRIbHdaV1FuS1Z4dUlDQXNJR0oxWm1abGNpQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXSjFabVpsY2ljcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjBsdVpHVjRJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQnBjMDlpYW1WamRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lGUlpVRVZFWDBGU1VrRlpJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkMGVYQmxaRjloY25KaGVTY3BYRzRnSUN3Z1FYSnlZWGxDZFdabVpYSWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdVFYSnlZWGxDZFdabVpYSmNiaUFnTENCemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJZ1BTQnlaWEYxYVhKbEtDY3VMMTl6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5SnlsY2JpQWdMQ0FrUVhKeVlYbENkV1ptWlhJZ1BTQmlkV1ptWlhJdVFYSnlZWGxDZFdabVpYSmNiaUFnTENBa1JHRjBZVlpwWlhjZ0lDQWdQU0JpZFdabVpYSXVSR0YwWVZacFpYZGNiaUFnTENBa2FYTldhV1YzSUNBZ0lDQWdQU0FrZEhsd1pXUXVRVUpXSUNZbUlFRnljbUY1UW5WbVptVnlMbWx6Vm1sbGQxeHVJQ0FzSUNSemJHbGpaU0FnSUNBZ0lDQTlJQ1JCY25KaGVVSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWMyeHBZMlZjYmlBZ0xDQldTVVZYSUNBZ0lDQWdJQ0FnUFNBa2RIbHdaV1F1VmtsRlYxeHVJQ0FzSUVGU1VrRlpYMEpWUmtaRlVpQTlJQ2RCY25KaGVVSjFabVpsY2ljN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNUhJQ3NnSkdWNGNHOXlkQzVYSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRUZ5Y21GNVFuVm1abVZ5SUNFOVBTQWtRWEp5WVhsQ2RXWm1aWElwTENCN1FYSnlZWGxDZFdabVpYSTZJQ1JCY25KaGVVSjFabVpsY24wcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDRWtkSGx3WldRdVEwOU9VMVJTTENCQlVsSkJXVjlDVlVaR1JWSXNJSHRjYmlBZ0x5OGdNalF1TVM0ekxqRWdRWEp5WVhsQ2RXWm1aWEl1YVhOV2FXVjNLR0Z5WnlsY2JpQWdhWE5XYVdWM09pQm1kVzVqZEdsdmJpQnBjMVpwWlhjb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2FYTldhV1YzSUNZbUlDUnBjMVpwWlhjb2FYUXBJSHg4SUdselQySnFaV04wS0dsMEtTQW1KaUJXU1VWWElHbHVJR2wwTzF4dUlDQjlYRzU5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMbFVnS3lBa1pYaHdiM0owTGtZZ0tpQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlBaGJtVjNJQ1JCY25KaGVVSjFabVpsY2lneUtTNXpiR2xqWlNneExDQjFibVJsWm1sdVpXUXBMbUo1ZEdWTVpXNW5kR2c3WEc1OUtTd2dRVkpTUVZsZlFsVkdSa1ZTTENCN1hHNGdJQzh2SURJMExqRXVOQzR6SUVGeWNtRjVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXpiR2xqWlNoemRHRnlkQ3dnWlc1a0tWeHVJQ0J6YkdsalpUb2dablZ1WTNScGIyNGdjMnhwWTJVb2MzUmhjblFzSUdWdVpDbDdYRzRnSUNBZ2FXWW9KSE5zYVdObElDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ1pXNWtJRDA5UFNCMWJtUmxabWx1WldRcGNtVjBkWEp1SUNSemJHbGpaUzVqWVd4c0tHRnVUMkpxWldOMEtIUm9hWE1wTENCemRHRnlkQ2s3SUM4dklFWkdJR1pwZUZ4dUlDQWdJSFpoY2lCc1pXNGdJQ0FnUFNCaGJrOWlhbVZqZENoMGFHbHpLUzVpZVhSbFRHVnVaM1JvWEc0Z0lDQWdJQ0FzSUdacGNuTjBJQ0E5SUhSdlNXNWtaWGdvYzNSaGNuUXNJR3hsYmlsY2JpQWdJQ0FnSUN3Z1ptbHVZV3dnSUQwZ2RHOUpibVJsZUNobGJtUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lHeGxiaUE2SUdWdVpDd2diR1Z1S1Z4dUlDQWdJQ0FnTENCeVpYTjFiSFFnUFNCdVpYY2dLSE53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaWgwYUdsekxDQWtRWEp5WVhsQ2RXWm1aWElwS1NoMGIweGxibWQwYUNobWFXNWhiQ0F0SUdacGNuTjBLU2xjYmlBZ0lDQWdJQ3dnZG1sbGQxTWdJRDBnYm1WM0lDUkVZWFJoVm1sbGR5aDBhR2x6S1Z4dUlDQWdJQ0FnTENCMmFXVjNWQ0FnUFNCdVpYY2dKRVJoZEdGV2FXVjNLSEpsYzNWc2RDbGNiaUFnSUNBZ0lDd2dhVzVrWlhnZ0lEMGdNRHRjYmlBZ0lDQjNhR2xzWlNobWFYSnpkQ0E4SUdacGJtRnNLWHRjYmlBZ0lDQWdJSFpwWlhkVUxuTmxkRlZwYm5RNEtHbHVaR1Y0S3lzc0lIWnBaWGRUTG1kbGRGVnBiblE0S0dacGNuTjBLeXNwS1R0Y2JpQWdJQ0I5SUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JuMHBPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOXpaWFF0YzNCbFkybGxjeWNwS0VGU1VrRlpYMEpWUmtaRlVpazdJaXdpZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVhKbGNYVnBjbVVvSnk0dlgzUjVjR1ZrSnlrdVFVSldMQ0I3WEc0Z0lFUmhkR0ZXYVdWM09pQnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDMWlkV1ptWlhJbktTNUVZWFJoVm1sbGQxeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFlYSnlZWGtuS1NnblJteHZZWFF6TWljc0lEUXNJR1oxYm1OMGFXOXVLR2x1YVhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdSbXh2WVhRek1rRnljbUY1S0dSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHVhWFFvZEdocGN5d2daR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tUdGNiaUFnZlR0Y2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdGeWNtRjVKeWtvSjBac2IyRjBOalFuTENBNExDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlFWnNiMkYwTmpSQmNuSmhlU2hrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCcGJtbDBLSFJvYVhNc0lHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNrN1hHNGdJSDA3WEc1OUtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFoY25KaGVTY3BLQ2RKYm5ReE5pY3NJRElzSUdaMWJtTjBhVzl1S0dsdWFYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnU1c1ME1UWkJjbkpoZVNoa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwZTF4dUlDQWdJSEpsZEhWeWJpQnBibWwwS0hSb2FYTXNJR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDazdYRzRnSUgwN1hHNTlLVHNpTENKeVpYRjFhWEpsS0NjdUwxOTBlWEJsWkMxaGNuSmhlU2NwS0NkSmJuUXpNaWNzSURRc0lHWjFibU4wYVc5dUtHbHVhWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1NXNTBNekpCY25KaGVTaGtZWFJoTENCaWVYUmxUMlptYzJWMExDQnNaVzVuZEdncGUxeHVJQ0FnSUhKbGRIVnliaUJwYm1sMEtIUm9hWE1zSUdSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2s3WEc0Z0lIMDdYRzU5S1RzaUxDSnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDMWhjbkpoZVNjcEtDZEpiblE0Snl3Z01Td2dablZ1WTNScGIyNG9hVzVwZENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQkpiblE0UVhKeVlYa29aR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tYdGNiaUFnSUNCeVpYUjFjbTRnYVc1cGRDaDBhR2x6TENCa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1ZlNrN0lpd2ljbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUXRZWEp5WVhrbktTZ25WV2x1ZERFMkp5d2dNaXdnWm5WdVkzUnBiMjRvYVc1cGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJWYVc1ME1UWkJjbkpoZVNoa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwZTF4dUlDQWdJSEpsZEhWeWJpQnBibWwwS0hSb2FYTXNJR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDazdYRzRnSUgwN1hHNTlLVHNpTENKeVpYRjFhWEpsS0NjdUwxOTBlWEJsWkMxaGNuSmhlU2NwS0NkVmFXNTBNekluTENBMExDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlGVnBiblF6TWtGeWNtRjVLR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbDdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9kR2hwY3l3Z1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1R0Y2JpQWdmVHRjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNSNWNHVmtMV0Z5Y21GNUp5a29KMVZwYm5RNEp5d2dNU3dnWm5WdVkzUnBiMjRvYVc1cGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJWYVc1ME9FRnljbUY1S0dSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHVhWFFvZEdocGN5d2daR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tUdGNiaUFnZlR0Y2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdGeWNtRjVKeWtvSjFWcGJuUTRKeXdnTVN3Z1puVnVZM1JwYjI0b2FXNXBkQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVNoa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwZTF4dUlDQWdJSEpsZEhWeWJpQnBibWwwS0hSb2FYTXNJR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDazdYRzRnSUgwN1hHNTlMQ0IwY25WbEtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnWldGamFDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RiV1YwYUc5a2N5Y3BLREFwWEc0Z0lDd2djbVZrWldacGJtVWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LVnh1SUNBc0lHMWxkR0VnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0VuS1Z4dUlDQXNJR0Z6YzJsbmJpQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWhjM05wWjI0bktWeHVJQ0FzSUhkbFlXc2dJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdmJHeGxZM1JwYjI0dGQyVmhheWNwWEc0Z0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJR2RsZEZkbFlXc2dJQ0FnSUNBOUlHMWxkR0V1WjJWMFYyVmhhMXh1SUNBc0lHbHpSWGgwWlc1emFXSnNaU0E5SUU5aWFtVmpkQzVwYzBWNGRHVnVjMmxpYkdWY2JpQWdMQ0IxYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psSUQwZ2QyVmhheTUxWm5OMGIzSmxYRzRnSUN3Z2RHMXdJQ0FnSUNBZ0lDQWdJRDBnZTMxY2JpQWdMQ0JKYm5SbGNtNWhiRTFoY0R0Y2JseHVkbUZ5SUhkeVlYQndaWElnUFNCbWRXNWpkR2x2YmloblpYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVjJWaGEwMWhjQ2dwZTF4dUlDQWdJSEpsZEhWeWJpQm5aWFFvZEdocGN5d2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREFnUHlCaGNtZDFiV1Z1ZEhOYk1GMGdPaUIxYm1SbFptbHVaV1FwTzF4dUlDQjlPMXh1ZlR0Y2JseHVkbUZ5SUcxbGRHaHZaSE1nUFNCN1hHNGdJQzh2SURJekxqTXVNeTR6SUZkbFlXdE5ZWEF1Y0hKdmRHOTBlWEJsTG1kbGRDaHJaWGtwWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnWjJWMEtHdGxlU2w3WEc0Z0lDQWdhV1lvYVhOUFltcGxZM1FvYTJWNUtTbDdYRzRnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR2RsZEZkbFlXc29hMlY1S1R0Y2JpQWdJQ0FnSUdsbUtHUmhkR0VnUFQwOUlIUnlkV1VwY21WMGRYSnVJSFZ1WTJGMVoyaDBSbkp2ZW1WdVUzUnZjbVVvZEdocGN5a3VaMlYwS0d0bGVTazdYRzRnSUNBZ0lDQnlaWFIxY200Z1pHRjBZU0EvSUdSaGRHRmJkR2hwY3k1ZmFWMGdPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0F2THlBeU15NHpMak11TlNCWFpXRnJUV0Z3TG5CeWIzUnZkSGx3WlM1elpYUW9hMlY1TENCMllXeDFaU2xjYmlBZ2MyVjBPaUJtZFc1amRHbHZiaUJ6WlhRb2EyVjVMQ0IyWVd4MVpTbDdYRzRnSUNBZ2NtVjBkWEp1SUhkbFlXc3VaR1ZtS0hSb2FYTXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQjlYRzU5TzF4dVhHNHZMeUF5TXk0eklGZGxZV3ROWVhBZ1QySnFaV04wYzF4dWRtRnlJQ1JYWldGclRXRndJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIyeHNaV04wYVc5dUp5a29KMWRsWVd0TllYQW5MQ0IzY21Gd2NHVnlMQ0J0WlhSb2IyUnpMQ0IzWldGckxDQjBjblZsTENCMGNuVmxLVHRjYmx4dUx5OGdTVVV4TVNCWFpXRnJUV0Z3SUdaeWIzcGxiaUJyWlhseklHWnBlRnh1YVdZb2JtVjNJQ1JYWldGclRXRndLQ2t1YzJWMEtDaFBZbXBsWTNRdVpuSmxaWHBsSUh4OElFOWlhbVZqZENrb2RHMXdLU3dnTnlrdVoyVjBLSFJ0Y0NrZ0lUMGdOeWw3WEc0Z0lFbHVkR1Z5Ym1Gc1RXRndJRDBnZDJWaGF5NW5aWFJEYjI1emRISjFZM1J2Y2loM2NtRndjR1Z5S1R0Y2JpQWdZWE56YVdkdUtFbHVkR1Z5Ym1Gc1RXRndMbkJ5YjNSdmRIbHdaU3dnYldWMGFHOWtjeWs3WEc0Z0lHMWxkR0V1VGtWRlJDQTlJSFJ5ZFdVN1hHNGdJR1ZoWTJnb1d5ZGtaV3hsZEdVbkxDQW5hR0Z6Snl3Z0oyZGxkQ2NzSUNkelpYUW5YU3dnWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNCMllYSWdjSEp2ZEc4Z0lEMGdKRmRsWVd0TllYQXVjSEp2ZEc5MGVYQmxYRzRnSUNBZ0lDQXNJRzFsZEdodlpDQTlJSEJ5YjNSdlcydGxlVjA3WEc0Z0lDQWdjbVZrWldacGJtVW9jSEp2ZEc4c0lHdGxlU3dnWm5WdVkzUnBiMjRvWVN3Z1lpbDdYRzRnSUNBZ0lDQXZMeUJ6ZEc5eVpTQm1jbTk2Wlc0Z2IySnFaV04wY3lCdmJpQnBiblJsY201aGJDQjNaV0ZyYldGd0lITm9hVzFjYmlBZ0lDQWdJR2xtS0dselQySnFaV04wS0dFcElDWW1JQ0ZwYzBWNGRHVnVjMmxpYkdVb1lTa3BlMXh1SUNBZ0lDQWdJQ0JwWmlnaGRHaHBjeTVmWmlsMGFHbHpMbDltSUQwZ2JtVjNJRWx1ZEdWeWJtRnNUV0Z3TzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdkR2hwY3k1ZlpsdHJaWGxkS0dFc0lHSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhMlY1SUQwOUlDZHpaWFFuSUQ4Z2RHaHBjeUE2SUhKbGMzVnNkRHRjYmlBZ0lDQWdJQzh2SUhOMGIzSmxJR0ZzYkNCMGFHVWdjbVZ6ZENCdmJpQnVZWFJwZG1VZ2QyVmhhMjFoY0Z4dUlDQWdJQ0FnZlNCeVpYUjFjbTRnYldWMGFHOWtMbU5oYkd3b2RHaHBjeXdnWVN3Z1lpazdYRzRnSUNBZ2ZTazdYRzRnSUgwcE8xeHVmU0lzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCM1pXRnJJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXNiR1ZqZEdsdmJpMTNaV0ZySnlrN1hHNWNiaTh2SURJekxqUWdWMlZoYTFObGRDQlBZbXBsWTNSelhHNXlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1Snlrb0oxZGxZV3RUWlhRbkxDQm1kVzVqZEdsdmJpaG5aWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1YyVmhhMU5sZENncGV5QnlaWFIxY200Z1oyVjBLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXdJRDhnWVhKbmRXMWxiblJ6V3pCZElEb2dkVzVrWldacGJtVmtLVHNnZlR0Y2JuMHNJSHRjYmlBZ0x5OGdNak11TkM0ekxqRWdWMlZoYTFObGRDNXdjbTkwYjNSNWNHVXVZV1JrS0haaGJIVmxLVnh1SUNCaFpHUTZJR1oxYm1OMGFXOXVJR0ZrWkNoMllXeDFaU2w3WEc0Z0lDQWdjbVYwZFhKdUlIZGxZV3N1WkdWbUtIUm9hWE1zSUhaaGJIVmxMQ0IwY25WbEtUdGNiaUFnZlZ4dWZTd2dkMlZoYXl3Z1ptRnNjMlVzSUhSeWRXVXBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMMEZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibU5zZFdSbGMxeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHbHVZMngxWkdWeklEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RhVzVqYkhWa1pYTW5LU2gwY25WbEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkQmNuSmhlU2NzSUh0Y2JpQWdhVzVqYkhWa1pYTTZJR1oxYm1OMGFXOXVJR2x1WTJ4MVpHVnpLR1ZzSUM4cUxDQm1jbTl0U1c1a1pYZ2dQU0F3SUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnSkdsdVkyeDFaR1Z6S0hSb2FYTXNJR1ZzTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpDazdYRzRnSUgxY2JuMHBPMXh1WEc1eVpYRjFhWEpsS0NjdUwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTW5LU2duYVc1amJIVmtaWE1uS1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y25kaGJHUnliMjR2ZEdNek9TMXViM1JsY3k5aWJHOWlMMjFoYzNSbGNpOWxjell2TWpBeE5DMHdPUzl6WlhCMExUSTFMbTFrSXpVeE1DMW5iRzlpWVd4aGMyRndMV1p2Y2kxbGJuRjFaWFZwYm1jdFlTMXRhV055YjNSaGMydGNjbHh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEhKY2JpQWdMQ0J0YVdOeWIzUmhjMnNnUFNCeVpYRjFhWEpsS0NjdUwxOXRhV055YjNSaGMyc25LU2dwWEhKY2JpQWdMQ0J3Y205alpYTnpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktTNXdjbTlqWlhOelhISmNiaUFnTENCcGMwNXZaR1VnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjJZbktTaHdjbTlqWlhOektTQTlQU0FuY0hKdlkyVnpjeWM3WEhKY2JseHlYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeXdnZTF4eVhHNGdJR0Z6WVhBNklHWjFibU4wYVc5dUlHRnpZWEFvWm00cGUxeHlYRzRnSUNBZ2RtRnlJR1J2YldGcGJpQTlJR2x6VG05a1pTQW1KaUJ3Y205alpYTnpMbVJ2YldGcGJqdGNjbHh1SUNBZ0lHMXBZM0p2ZEdGemF5aGtiMjFoYVc0Z1B5QmtiMjFoYVc0dVltbHVaQ2htYmlrZ09pQm1iaWs3WEhKY2JpQWdmVnh5WEc1OUtUc2lMQ0l2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmJHcG9ZWEppTDNCeWIzQnZjMkZzTFdsekxXVnljbTl5WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZMjltSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owVnljbTl5Snl3Z2UxeHVJQ0JwYzBWeWNtOXlPaUJtZFc1amRHbHZiaUJwYzBWeWNtOXlLR2wwS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZMjltS0dsMEtTQTlQVDBnSjBWeWNtOXlKenRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMFJoZG1sa1FuSjFZVzUwTDAxaGNDMVRaWFF1Y0hKdmRHOTBlWEJsTG5SdlNsTlBUbHh1ZG1GeUlDUmxlSEJ2Y25RZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNVNMQ0FuVFdGd0p5d2dlM1J2U2xOUFRqb2djbVZ4ZFdseVpTZ25MaTlmWTI5c2JHVmpkR2x2YmkxMGJ5MXFjMjl1Snlrb0owMWhjQ2NwZlNrN0lpd2lMeThnYUhSMGNITTZMeTluYVhOMExtZHBkR2gxWWk1amIyMHZRbkpsYm1SaGJrVnBZMmd2TkRJNU5HUTFZekl4TW1FMlpESXlOVFEzTUROY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ2FXRmtaR2c2SUdaMWJtTjBhVzl1SUdsaFpHUm9LSGd3TENCNE1Td2dlVEFzSUhreEtYdGNiaUFnSUNCMllYSWdKSGd3SUQwZ2VEQWdQajQrSURCY2JpQWdJQ0FnSUN3Z0pIZ3hJRDBnZURFZ1BqNCtJREJjYmlBZ0lDQWdJQ3dnSkhrd0lEMGdlVEFnUGo0K0lEQTdYRzRnSUNBZ2NtVjBkWEp1SUNSNE1TQXJJQ2g1TVNBK1BqNGdNQ2tnS3lBb0tDUjRNQ0FtSUNSNU1DQjhJQ2drZURBZ2ZDQWtlVEFwSUNZZ2ZpZ2tlREFnS3lBa2VUQWdQajQrSURBcEtTQStQajRnTXpFcElId2dNRHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWE4wTG1kcGRHaDFZaTVqYjIwdlFuSmxibVJoYmtWcFkyZ3ZOREk1TkdRMVl6SXhNbUUyWkRJeU5UUTNNRE5jYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnYVcxMWJHZzZJR1oxYm1OMGFXOXVJR2x0ZFd4b0tIVXNJSFlwZTF4dUlDQWdJSFpoY2lCVlNVNVVNVFlnUFNBd2VHWm1abVpjYmlBZ0lDQWdJQ3dnSkhVZ1BTQXJkVnh1SUNBZ0lDQWdMQ0FrZGlBOUlDdDJYRzRnSUNBZ0lDQXNJSFV3SUQwZ0pIVWdKaUJWU1U1VU1UWmNiaUFnSUNBZ0lDd2dkakFnUFNBa2RpQW1JRlZKVGxReE5seHVJQ0FnSUNBZ0xDQjFNU0E5SUNSMUlENCtJREUyWEc0Z0lDQWdJQ0FzSUhZeElEMGdKSFlnUGo0Z01UWmNiaUFnSUNBZ0lDd2dkQ0FnUFNBb2RURWdLaUIyTUNBK1BqNGdNQ2tnS3lBb2RUQWdLaUIyTUNBK1BqNGdNVFlwTzF4dUlDQWdJSEpsZEhWeWJpQjFNU0FxSUhZeElDc2dLSFFnUGo0Z01UWXBJQ3NnS0NoMU1DQXFJSFl4SUQ0K1BpQXdLU0FySUNoMElDWWdWVWxPVkRFMktTQStQaUF4TmlrN1hHNGdJSDFjYm4wcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsemRDNW5hWFJvZFdJdVkyOXRMMEp5Wlc1a1lXNUZhV05vTHpReU9UUmtOV015TVRKaE5tUXlNalUwTnpBelhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjAxaGRHZ25MQ0I3WEc0Z0lHbHpkV0pvT2lCbWRXNWpkR2x2YmlCcGMzVmlhQ2g0TUN3Z2VERXNJSGt3TENCNU1TbDdYRzRnSUNBZ2RtRnlJQ1I0TUNBOUlIZ3dJRDQrUGlBd1hHNGdJQ0FnSUNBc0lDUjRNU0E5SUhneElENCtQaUF3WEc0Z0lDQWdJQ0FzSUNSNU1DQTlJSGt3SUQ0K1BpQXdPMXh1SUNBZ0lISmxkSFZ5YmlBa2VERWdMU0FvZVRFZ1BqNCtJREFwSUMwZ0tDaCtKSGd3SUNZZ0pIa3dJSHdnZmlna2VEQWdYaUFrZVRBcElDWWdKSGd3SUMwZ0pIa3dJRDQrUGlBd0tTQStQajRnTXpFcElId2dNRHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWE4wTG1kcGRHaDFZaTVqYjIwdlFuSmxibVJoYmtWcFkyZ3ZOREk1TkdRMVl6SXhNbUUyWkRJeU5UUTNNRE5jYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnZFcxMWJHZzZJR1oxYm1OMGFXOXVJSFZ0ZFd4b0tIVXNJSFlwZTF4dUlDQWdJSFpoY2lCVlNVNVVNVFlnUFNBd2VHWm1abVpjYmlBZ0lDQWdJQ3dnSkhVZ1BTQXJkVnh1SUNBZ0lDQWdMQ0FrZGlBOUlDdDJYRzRnSUNBZ0lDQXNJSFV3SUQwZ0pIVWdKaUJWU1U1VU1UWmNiaUFnSUNBZ0lDd2dkakFnUFNBa2RpQW1JRlZKVGxReE5seHVJQ0FnSUNBZ0xDQjFNU0E5SUNSMUlENCtQaUF4Tmx4dUlDQWdJQ0FnTENCMk1TQTlJQ1IySUQ0K1BpQXhObHh1SUNBZ0lDQWdMQ0IwSUNBOUlDaDFNU0FxSUhZd0lENCtQaUF3S1NBcklDaDFNQ0FxSUhZd0lENCtQaUF4TmlrN1hHNGdJQ0FnY21WMGRYSnVJSFV4SUNvZ2RqRWdLeUFvZENBK1BqNGdNVFlwSUNzZ0tDaDFNQ0FxSUhZeElENCtQaUF3S1NBcklDaDBJQ1lnVlVsT1ZERTJLU0ErUGo0Z01UWXBPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYSEpjYm5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2dkRzlQWW1wbFkzUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGIySnFaV04wSnlsY2NseHVJQ0FzSUdGR2RXNWpkR2x2YmlBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh5WEc0Z0lDd2dKR1JsWm1sdVpWQnliM0JsY25SNUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrN1hISmNibHh5WEc0dkx5QkNMakl1TWk0eUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVgxOWtaV1pwYm1WSFpYUjBaWEpmWHloUUxDQm5aWFIwWlhJcFhISmNibkpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dKaVlnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFptOXlZMlZrTFhCaGJTY3BMQ0FuVDJKcVpXTjBKeXdnZTF4eVhHNGdJRjlmWkdWbWFXNWxSMlYwZEdWeVgxODZJR1oxYm1OMGFXOXVJRjlmWkdWbWFXNWxSMlYwZEdWeVgxOG9VQ3dnWjJWMGRHVnlLWHRjY2x4dUlDQWdJQ1JrWldacGJtVlFjbTl3WlhKMGVTNW1LSFJ2VDJKcVpXTjBLSFJvYVhNcExDQlFMQ0I3WjJWME9pQmhSblZ1WTNScGIyNG9aMlYwZEdWeUtTd2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2dZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxmU2s3WEhKY2JpQWdmVnh5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hISmNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHlYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjY2x4dUlDQXNJR0ZHZFc1amRHbHZiaUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJFdFpuVnVZM1JwYjI0bktWeHlYRzRnSUN3Z0pHUmxabWx1WlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWs3WEhKY2JseHlYRzR2THlCQ0xqSXVNaTR6SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1WDE5a1pXWnBibVZUWlhSMFpYSmZYeWhRTENCelpYUjBaWElwWEhKY2JuSmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUJ5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Wm05eVkyVmtMWEJoYlNjcExDQW5UMkpxWldOMEp5d2dlMXh5WEc0Z0lGOWZaR1ZtYVc1bFUyVjBkR1Z5WDE4NklHWjFibU4wYVc5dUlGOWZaR1ZtYVc1bFUyVjBkR1Z5WDE4b1VDd2djMlYwZEdWeUtYdGNjbHh1SUNBZ0lDUmtaV1pwYm1WUWNtOXdaWEowZVM1bUtIUnZUMkpxWldOMEtIUm9hWE1wTENCUUxDQjdjMlYwT2lCaFJuVnVZM1JwYjI0b2MyVjBkR1Z5S1N3Z1pXNTFiV1Z5WVdKc1pUb2dkSEoxWlN3Z1kyOXVabWxuZFhKaFlteGxPaUIwY25WbGZTazdYSEpjYmlBZ2ZWeHlYRzU5S1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdNek9TOXdjbTl3YjNOaGJDMXZZbXBsWTNRdGRtRnNkV1Z6TFdWdWRISnBaWE5jYm5aaGNpQWtaWGh3YjNKMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR1Z1ZEhKcFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0ZEc4dFlYSnlZWGtuS1NoMGNuVmxLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUdWdWRISnBaWE02SUdaMWJtTjBhVzl1SUdWdWRISnBaWE1vYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUFrWlc1MGNtbGxjeWhwZENrN1hHNGdJSDFjYm4wcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMM0J5YjNCdmMyRnNMVzlpYW1WamRDMW5aWFJ2ZDI1d2NtOXdaWEowZVdSbGMyTnlhWEIwYjNKelhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJRzkzYmt0bGVYTWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjNkdUxXdGxlWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnWjA5UVJDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BYRzRnSUN3Z1kzSmxZWFJsVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdVdGNISnZjR1Z5ZEhrbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkUFltcGxZM1FuTENCN1hHNGdJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNuTTZJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNuTW9iMkpxWldOMEtYdGNiaUFnSUNCMllYSWdUeUFnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBYRzRnSUNBZ0lDQXNJR2RsZEVSbGMyTWdQU0JuVDFCRUxtWmNiaUFnSUNBZ0lDd2dhMlY1Y3lBZ0lDQTlJRzkzYmt0bGVYTW9UeWxjYmlBZ0lDQWdJQ3dnY21WemRXeDBJQ0E5SUh0OVhHNGdJQ0FnSUNBc0lHa2dJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR3RsZVN3Z1JEdGNiaUFnSUNCM2FHbHNaU2hyWlhsekxteGxibWQwYUNBK0lHa3BZM0psWVhSbFVISnZjR1Z5ZEhrb2NtVnpkV3gwTENCclpYa2dQU0JyWlhselcya3JLMTBzSUdkbGRFUmxjMk1vVHl3Z2EyVjVLU2s3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4eVhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2NseHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYSEpjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHlYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEhKY2JpQWdMQ0JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BMbVk3WEhKY2JseHlYRzR2THlCQ0xqSXVNaTQwSUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1WDE5c2IyOXJkWEJIWlhSMFpYSmZYeWhRS1Z4eVhHNXlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcElDWW1JQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdadmNtTmxaQzF3WVcwbktTd2dKMDlpYW1WamRDY3NJSHRjY2x4dUlDQmZYMnh2YjJ0MWNFZGxkSFJsY2w5Zk9pQm1kVzVqZEdsdmJpQmZYMnh2YjJ0MWNFZGxkSFJsY2w5ZktGQXBlMXh5WEc0Z0lDQWdkbUZ5SUU4Z1BTQjBiMDlpYW1WamRDaDBhR2x6S1Z4eVhHNGdJQ0FnSUNBc0lFc2dQU0IwYjFCeWFXMXBkR2wyWlNoUUxDQjBjblZsS1Z4eVhHNGdJQ0FnSUNBc0lFUTdYSEpjYmlBZ0lDQmtieUI3WEhKY2JpQWdJQ0FnSUdsbUtFUWdQU0JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9UeXdnU3lrcGNtVjBkWEp1SUVRdVoyVjBPMXh5WEc0Z0lDQWdmU0IzYUdsc1pTaFBJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9UeWtwTzF4eVhHNGdJSDFjY2x4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHlYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNjbHh1SUNBc0lIUnZUMkpxWldOMElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFc5aWFtVmpkQ2NwWEhKY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVnh5WEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R3YnljcFhISmNiaUFnTENCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwTG1ZN1hISmNibHh5WEc0dkx5QkNMakl1TWk0MUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdVgxOXNiMjlyZFhCVFpYUjBaWEpmWHloUUtWeHlYRzV5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJQ1ltSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXWnZjbU5sWkMxd1lXMG5LU3dnSjA5aWFtVmpkQ2NzSUh0Y2NseHVJQ0JmWDJ4dmIydDFjRk5sZEhSbGNsOWZPaUJtZFc1amRHbHZiaUJmWDJ4dmIydDFjRk5sZEhSbGNsOWZLRkFwZTF4eVhHNGdJQ0FnZG1GeUlFOGdQU0IwYjA5aWFtVmpkQ2gwYUdsektWeHlYRzRnSUNBZ0lDQXNJRXNnUFNCMGIxQnlhVzFwZEdsMlpTaFFMQ0IwY25WbEtWeHlYRzRnSUNBZ0lDQXNJRVE3WEhKY2JpQWdJQ0JrYnlCN1hISmNiaUFnSUNBZ0lHbG1LRVFnUFNCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvVHl3Z1N5a3BjbVYwZFhKdUlFUXVjMlYwTzF4eVhHNGdJQ0FnZlNCM2FHbHNaU2hQSUQwZ1oyVjBVSEp2ZEc5MGVYQmxUMllvVHlrcE8xeHlYRzRnSUgxY2NseHVmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1JqTXprdmNISnZjRzl6WVd3dGIySnFaV04wTFhaaGJIVmxjeTFsYm5SeWFXVnpYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pIWmhiSFZsY3lBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMTBieTFoY25KaGVTY3BLR1poYkhObEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkUFltcGxZM1FuTENCN1hHNGdJSFpoYkhWbGN6b2dablZ1WTNScGIyNGdkbUZzZFdWektHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z0pIWmhiSFZsY3locGRDazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNjbHh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzcGxibkJoY25OcGJtY3ZaWE10YjJKelpYSjJZV0pzWlZ4eVhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh5WEc0Z0lDd2daMnh2WW1Gc0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHlYRzRnSUN3Z1kyOXlaU0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIzSmxKeWxjY2x4dUlDQXNJRzFwWTNKdmRHRnpheUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV2xqY205MFlYTnJKeWtvS1Z4eVhHNGdJQ3dnVDBKVFJWSldRVUpNUlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25iMkp6WlhKMllXSnNaU2NwWEhKY2JpQWdMQ0JoUm5WdVkzUnBiMjRnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkV0Wm5WdVkzUnBiMjRuS1Z4eVhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4eVhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxcGJuTjBZVzVqWlNjcFhISmNiaUFnTENCeVpXUmxabWx1WlVGc2JDQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsTFdGc2JDY3BYSEpjYmlBZ0xDQm9hV1JsSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Z4eVhHNGdJQ3dnWm05eVQyWWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTltYjNJdGIyWW5LVnh5WEc0Z0lDd2dVa1ZVVlZKT0lDQWdJQ0FnUFNCbWIzSlBaaTVTUlZSVlVrNDdYSEpjYmx4eVhHNTJZWElnWjJWMFRXVjBhRzlrSUQwZ1puVnVZM1JwYjI0b1ptNHBlMXh5WEc0Z0lISmxkSFZ5YmlCbWJpQTlQU0J1ZFd4c0lEOGdkVzVrWldacGJtVmtJRG9nWVVaMWJtTjBhVzl1S0dadUtUdGNjbHh1ZlR0Y2NseHVYSEpjYm5aaGNpQmpiR1ZoYm5Wd1UzVmljMk55YVhCMGFXOXVJRDBnWm5WdVkzUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtYdGNjbHh1SUNCMllYSWdZMnhsWVc1MWNDQTlJSE4xWW5OamNtbHdkR2x2Ymk1Zll6dGNjbHh1SUNCcFppaGpiR1ZoYm5Wd0tYdGNjbHh1SUNBZ0lITjFZbk5qY21sd2RHbHZiaTVmWXlBOUlIVnVaR1ZtYVc1bFpEdGNjbHh1SUNBZ0lHTnNaV0Z1ZFhBb0tUdGNjbHh1SUNCOVhISmNibjA3WEhKY2JseHlYRzUyWVhJZ2MzVmljMk55YVhCMGFXOXVRMnh2YzJWa0lEMGdablZ1WTNScGIyNG9jM1ZpYzJOeWFYQjBhVzl1S1h0Y2NseHVJQ0J5WlhSMWNtNGdjM1ZpYzJOeWFYQjBhVzl1TGw5dklEMDlQU0IxYm1SbFptbHVaV1E3WEhKY2JuMDdYSEpjYmx4eVhHNTJZWElnWTJ4dmMyVlRkV0p6WTNKcGNIUnBiMjRnUFNCbWRXNWpkR2x2YmloemRXSnpZM0pwY0hScGIyNHBlMXh5WEc0Z0lHbG1LQ0Z6ZFdKelkzSnBjSFJwYjI1RGJHOXpaV1FvYzNWaWMyTnlhWEIwYVc5dUtTbDdYSEpjYmlBZ0lDQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BTQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQmpiR1ZoYm5Wd1UzVmljMk55YVhCMGFXOXVLSE4xWW5OamNtbHdkR2x2YmlrN1hISmNiaUFnZlZ4eVhHNTlPMXh5WEc1Y2NseHVkbUZ5SUZOMVluTmpjbWx3ZEdsdmJpQTlJR1oxYm1OMGFXOXVLRzlpYzJWeWRtVnlMQ0J6ZFdKelkzSnBZbVZ5S1h0Y2NseHVJQ0JoYms5aWFtVmpkQ2h2WW5ObGNuWmxjaWs3WEhKY2JpQWdkR2hwY3k1Zll5QTlJSFZ1WkdWbWFXNWxaRHRjY2x4dUlDQjBhR2x6TGw5dklEMGdiMkp6WlhKMlpYSTdYSEpjYmlBZ2IySnpaWEoyWlhJZ1BTQnVaWGNnVTNWaWMyTnlhWEIwYVc5dVQySnpaWEoyWlhJb2RHaHBjeWs3WEhKY2JpQWdkSEo1SUh0Y2NseHVJQ0FnSUhaaGNpQmpiR1ZoYm5Wd0lDQWdJQ0FnUFNCemRXSnpZM0pwWW1WeUtHOWljMlZ5ZG1WeUtWeHlYRzRnSUNBZ0lDQXNJSE4xWW5OamNtbHdkR2x2YmlBOUlHTnNaV0Z1ZFhBN1hISmNiaUFnSUNCcFppaGpiR1ZoYm5Wd0lDRTlJRzUxYkd3cGUxeHlYRzRnSUNBZ0lDQnBaaWgwZVhCbGIyWWdZMnhsWVc1MWNDNTFibk4xWW5OamNtbGlaU0E5UFQwZ0oyWjFibU4wYVc5dUp5bGpiR1ZoYm5Wd0lEMGdablZ1WTNScGIyNG9LWHNnYzNWaWMyTnlhWEIwYVc5dUxuVnVjM1ZpYzJOeWFXSmxLQ2s3SUgwN1hISmNiaUFnSUNBZ0lHVnNjMlVnWVVaMWJtTjBhVzl1S0dOc1pXRnVkWEFwTzF4eVhHNGdJQ0FnSUNCMGFHbHpMbDlqSUQwZ1kyeGxZVzUxY0R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5SUdOaGRHTm9LR1VwZTF4eVhHNGdJQ0FnYjJKelpYSjJaWEl1WlhKeWIzSW9aU2s3WEhKY2JpQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ2ZTQnBaaWh6ZFdKelkzSnBjSFJwYjI1RGJHOXpaV1FvZEdocGN5a3BZMnhsWVc1MWNGTjFZbk5qY21sd2RHbHZiaWgwYUdsektUdGNjbHh1ZlR0Y2NseHVYSEpjYmxOMVluTmpjbWx3ZEdsdmJpNXdjbTkwYjNSNWNHVWdQU0J5WldSbFptbHVaVUZzYkNoN2ZTd2dlMXh5WEc0Z0lIVnVjM1ZpYzJOeWFXSmxPaUJtZFc1amRHbHZiaUIxYm5OMVluTmpjbWxpWlNncGV5QmpiRzl6WlZOMVluTmpjbWx3ZEdsdmJpaDBhR2x6S1RzZ2ZWeHlYRzU5S1R0Y2NseHVYSEpjYm5aaGNpQlRkV0p6WTNKcGNIUnBiMjVQWW5ObGNuWmxjaUE5SUdaMWJtTjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpbDdYSEpjYmlBZ2RHaHBjeTVmY3lBOUlITjFZbk5qY21sd2RHbHZianRjY2x4dWZUdGNjbHh1WEhKY2JsTjFZbk5qY21sd2RHbHZiazlpYzJWeWRtVnlMbkJ5YjNSdmRIbHdaU0E5SUhKbFpHVm1hVzVsUVd4c0tIdDlMQ0I3WEhKY2JpQWdibVY0ZERvZ1puVnVZM1JwYjI0Z2JtVjRkQ2gyWVd4MVpTbDdYSEpjYmlBZ0lDQjJZWElnYzNWaWMyTnlhWEIwYVc5dUlEMGdkR2hwY3k1ZmN6dGNjbHh1SUNBZ0lHbG1LQ0Z6ZFdKelkzSnBjSFJwYjI1RGJHOXpaV1FvYzNWaWMyTnlhWEIwYVc5dUtTbDdYSEpjYmlBZ0lDQWdJSFpoY2lCdlluTmxjblpsY2lBOUlITjFZbk5qY21sd2RHbHZiaTVmYnp0Y2NseHVJQ0FnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdiU0E5SUdkbGRFMWxkR2h2WkNodlluTmxjblpsY2k1dVpYaDBLVHRjY2x4dUlDQWdJQ0FnSUNCcFppaHRLWEpsZEhWeWJpQnRMbU5oYkd3b2IySnpaWEoyWlhJc0lIWmhiSFZsS1R0Y2NseHVJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNjbHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTJ4dmMyVlRkV0p6WTNKcGNIUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtUdGNjbHh1SUNBZ0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVJQ0I5TEZ4eVhHNGdJR1Z5Y205eU9pQm1kVzVqZEdsdmJpQmxjbkp2Y2loMllXeDFaU2w3WEhKY2JpQWdJQ0IyWVhJZ2MzVmljMk55YVhCMGFXOXVJRDBnZEdocGN5NWZjenRjY2x4dUlDQWdJR2xtS0hOMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNoemRXSnpZM0pwY0hScGIyNHBLWFJvY205M0lIWmhiSFZsTzF4eVhHNGdJQ0FnZG1GeUlHOWljMlZ5ZG1WeUlEMGdjM1ZpYzJOeWFYQjBhVzl1TGw5dk8xeHlYRzRnSUNBZ2MzVmljMk55YVhCMGFXOXVMbDl2SUQwZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ2RISjVJSHRjY2x4dUlDQWdJQ0FnZG1GeUlHMGdQU0JuWlhSTlpYUm9iMlFvYjJKelpYSjJaWEl1WlhKeWIzSXBPMXh5WEc0Z0lDQWdJQ0JwWmlnaGJTbDBhSEp2ZHlCMllXeDFaVHRjY2x4dUlDQWdJQ0FnZG1Gc2RXVWdQU0J0TG1OaGJHd29iMkp6WlhKMlpYSXNJSFpoYkhWbEtUdGNjbHh1SUNBZ0lIMGdZMkYwWTJnb1pTbDdYSEpjYmlBZ0lDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdZMnhsWVc1MWNGTjFZbk5qY21sd2RHbHZiaWh6ZFdKelkzSnBjSFJwYjI0cE8xeHlYRzRnSUNBZ0lDQjlJR1pwYm1Gc2JIa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEhKY2JpQWdJQ0FnSUgxY2NseHVJQ0FnSUgwZ1kyeGxZVzUxY0ZOMVluTmpjbWx3ZEdsdmJpaHpkV0p6WTNKcGNIUnBiMjRwTzF4eVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHlYRzRnSUgwc1hISmNiaUFnWTI5dGNHeGxkR1U2SUdaMWJtTjBhVzl1SUdOdmJYQnNaWFJsS0haaGJIVmxLWHRjY2x4dUlDQWdJSFpoY2lCemRXSnpZM0pwY0hScGIyNGdQU0IwYUdsekxsOXpPMXh5WEc0Z0lDQWdhV1lvSVhOMVluTmpjbWx3ZEdsdmJrTnNiM05sWkNoemRXSnpZM0pwY0hScGIyNHBLWHRjY2x4dUlDQWdJQ0FnZG1GeUlHOWljMlZ5ZG1WeUlEMGdjM1ZpYzJOeWFYQjBhVzl1TGw5dk8xeHlYRzRnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BTQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQWdJSFJ5ZVNCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUcwZ1BTQm5aWFJOWlhSb2IyUW9iMkp6WlhKMlpYSXVZMjl0Y0d4bGRHVXBPMXh5WEc0Z0lDQWdJQ0FnSUhaaGJIVmxJRDBnYlNBL0lHMHVZMkZzYkNodlluTmxjblpsY2l3Z2RtRnNkV1VwSURvZ2RXNWtaV1pwYm1Wa08xeHlYRzRnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh5WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCamJHVmhiblZ3VTNWaWMyTnlhWEIwYVc5dUtITjFZbk5qY21sd2RHbHZiaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZTQm1hVzVoYkd4NUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlJR05zWldGdWRYQlRkV0p6WTNKcGNIUnBiMjRvYzNWaWMyTnlhWEIwYVc5dUtUdGNjbHh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJSDFjY2x4dWZTazdYSEpjYmx4eVhHNTJZWElnSkU5aWMyVnlkbUZpYkdVZ1BTQm1kVzVqZEdsdmJpQlBZbk5sY25aaFlteGxLSE4xWW5OamNtbGlaWElwZTF4eVhHNGdJR0Z1U1c1emRHRnVZMlVvZEdocGN5d2dKRTlpYzJWeWRtRmliR1VzSUNkUFluTmxjblpoWW14bEp5d2dKMTltSnlrdVgyWWdQU0JoUm5WdVkzUnBiMjRvYzNWaWMyTnlhV0psY2lrN1hISmNibjA3WEhKY2JseHlYRzV5WldSbFptbHVaVUZzYkNna1QySnpaWEoyWVdKc1pTNXdjbTkwYjNSNWNHVXNJSHRjY2x4dUlDQnpkV0p6WTNKcFltVTZJR1oxYm1OMGFXOXVJSE4xWW5OamNtbGlaU2h2WW5ObGNuWmxjaWw3WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZOMVluTmpjbWx3ZEdsdmJpaHZZbk5sY25abGNpd2dkR2hwY3k1ZlppazdYSEpjYmlBZ2ZTeGNjbHh1SUNCbWIzSkZZV05vT2lCbWRXNWpkR2x2YmlCbWIzSkZZV05vS0dadUtYdGNjbHh1SUNBZ0lIWmhjaUIwYUdGMElEMGdkR2hwY3p0Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ0tHTnZjbVV1VUhKdmJXbHpaU0I4ZkNCbmJHOWlZV3d1VUhKdmJXbHpaU2tvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLWHRjY2x4dUlDQWdJQ0FnWVVaMWJtTjBhVzl1S0dadUtUdGNjbHh1SUNBZ0lDQWdkbUZ5SUhOMVluTmpjbWx3ZEdsdmJpQTlJSFJvWVhRdWMzVmljMk55YVdKbEtIdGNjbHh1SUNBZ0lDQWdJQ0J1WlhoMElEb2dablZ1WTNScGIyNG9kbUZzZFdVcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdadUtIWmhiSFZsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1TG5WdWMzVmljMk55YVdKbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNCbGNuSnZjam9nY21WcVpXTjBMRnh5WEc0Z0lDQWdJQ0FnSUdOdmJYQnNaWFJsT2lCeVpYTnZiSFpsWEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzU5S1R0Y2NseHVYSEpjYm5KbFpHVm1hVzVsUVd4c0tDUlBZbk5sY25aaFlteGxMQ0I3WEhKY2JpQWdabkp2YlRvZ1puVnVZM1JwYjI0Z1puSnZiU2g0S1h0Y2NseHVJQ0FnSUhaaGNpQkRJRDBnZEhsd1pXOW1JSFJvYVhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nSkU5aWMyVnlkbUZpYkdVN1hISmNiaUFnSUNCMllYSWdiV1YwYUc5a0lEMGdaMlYwVFdWMGFHOWtLR0Z1VDJKcVpXTjBLSGdwVzA5Q1UwVlNWa0ZDVEVWZEtUdGNjbHh1SUNBZ0lHbG1LRzFsZEdodlpDbDdYSEpjYmlBZ0lDQWdJSFpoY2lCdlluTmxjblpoWW14bElEMGdZVzVQWW1wbFkzUW9iV1YwYUc5a0xtTmhiR3dvZUNrcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z2IySnpaWEoyWVdKc1pTNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1F5QS9JRzlpYzJWeWRtRmliR1VnT2lCdVpYY2dReWhtZFc1amRHbHZiaWh2WW5ObGNuWmxjaWw3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5aWMyVnlkbUZpYkdVdWMzVmljMk55YVdKbEtHOWljMlZ5ZG1WeUtUdGNjbHh1SUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVNb1puVnVZM1JwYjI0b2IySnpaWEoyWlhJcGUxeHlYRzRnSUNBZ0lDQjJZWElnWkc5dVpTQTlJR1poYkhObE8xeHlYRzRnSUNBZ0lDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCcFppZ2haRzl1WlNsN1hISmNiaUFnSUNBZ0lDQWdJQ0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaG1iM0pQWmloNExDQm1ZV3h6WlN3Z1puVnVZM1JwYjI0b2FYUXBlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzlpYzJWeWRtVnlMbTVsZUhRb2FYUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0dSdmJtVXBjbVYwZFhKdUlGSkZWRlZTVGp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrZ1BUMDlJRkpGVkZWU1RpbHlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyNWxLWFJvY205M0lHVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWljMlZ5ZG1WeUxtVnljbTl5S0dVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlJRzlpYzJWeWRtVnlMbU52YlhCc1pYUmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQjlLVHRjY2x4dUlDQWdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3SUdSdmJtVWdQU0IwY25WbE95QjlPMXh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmU3hjY2x4dUlDQnZaam9nWm5WdVkzUnBiMjRnYjJZb0tYdGNjbHh1SUNBZ0lHWnZjaWgyWVhJZ2FTQTlJREFzSUd3Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0xDQnBkR1Z0Y3lBOUlFRnljbUY1S0d3cE95QnBJRHdnYkRzcGFYUmxiWE5iYVYwZ1BTQmhjbWQxYldWdWRITmJhU3NyWFR0Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ0tIUjVjR1Z2WmlCMGFHbHpJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdkR2hwY3lBNklDUlBZbk5sY25aaFlteGxLU2htZFc1amRHbHZiaWh2WW5ObGNuWmxjaWw3WEhKY2JpQWdJQ0FnSUhaaGNpQmtiMjVsSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUcxcFkzSnZkR0Z6YXlobWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJR2xtS0NGa2IyNWxLWHRjY2x4dUlDQWdJQ0FnSUNBZ0lHWnZjaWgyWVhJZ2FTQTlJREE3SUdrZ1BDQnBkR1Z0Y3k1c1pXNW5kR2c3SUNzcmFTbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWljMlZ5ZG1WeUxtNWxlSFFvYVhSbGJYTmJhVjBwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyNWxLWEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwZ2IySnpaWEoyWlhJdVkyOXRjR3hsZEdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0b0tYc2daRzl1WlNBOUlIUnlkV1U3SUgwN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOVhISmNibjBwTzF4eVhHNWNjbHh1YUdsa1pTZ2tUMkp6WlhKMllXSnNaUzV3Y205MGIzUjVjR1VzSUU5Q1UwVlNWa0ZDVEVVc0lHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6T3lCOUtUdGNjbHh1WEhKY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1SExDQjdUMkp6WlhKMllXSnNaVG9nSkU5aWMyVnlkbUZpYkdWOUtUdGNjbHh1WEhKY2JuSmxjWFZwY21Vb0p5NHZYM05sZEMxemNHVmphV1Z6Snlrb0owOWljMlZ5ZG1GaWJHVW5LVHNpTENKMllYSWdiV1YwWVdSaGRHRWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCMGIwMWxkR0ZMWlhrZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JXVjBZV1JoZEdFdWEyVjVYRzRnSUN3Z2IzSmthVzVoY25sRVpXWnBibVZQZDI1TlpYUmhaR0YwWVNBOUlHMWxkR0ZrWVhSaExuTmxkRHRjYmx4dWJXVjBZV1JoZEdFdVpYaHdLSHRrWldacGJtVk5aWFJoWkdGMFlUb2dablZ1WTNScGIyNGdaR1ZtYVc1bFRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVc0lIUmhjbWRsZEN3Z2RHRnlaMlYwUzJWNUtYdGNiaUFnYjNKa2FXNWhjbmxFWldacGJtVlBkMjVOWlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z2JXVjBZV1JoZEdGV1lXeDFaU3dnWVc1UFltcGxZM1FvZEdGeVoyVjBLU3dnZEc5TlpYUmhTMlY1S0hSaGNtZGxkRXRsZVNrcE8xeHVmWDBwT3lJc0luWmhjaUJ0WlhSaFpHRjBZU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlXUmhkR0VuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJSFJ2VFdWMFlVdGxlU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnRaWFJoWkdGMFlTNXJaWGxjYmlBZ0xDQm5aWFJQY2tOeVpXRjBaVTFsZEdGa1lYUmhUV0Z3SUQwZ2JXVjBZV1JoZEdFdWJXRndYRzRnSUN3Z2MzUnZjbVVnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUcxbGRHRmtZWFJoTG5OMGIzSmxPMXh1WEc1dFpYUmhaR0YwWVM1bGVIQW9lMlJsYkdWMFpVMWxkR0ZrWVhSaE9pQm1kVzVqZEdsdmJpQmtaV3hsZEdWTlpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2dkR0Z5WjJWMElDOHFMQ0IwWVhKblpYUkxaWGtnS2k4cGUxeHVJQ0IyWVhJZ2RHRnlaMlYwUzJWNUlDQWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnTXlBL0lIVnVaR1ZtYVc1bFpDQTZJSFJ2VFdWMFlVdGxlU2hoY21kMWJXVnVkSE5iTWwwcFhHNGdJQ0FnTENCdFpYUmhaR0YwWVUxaGNDQTlJR2RsZEU5eVEzSmxZWFJsVFdWMFlXUmhkR0ZOWVhBb1lXNVBZbXBsWTNRb2RHRnlaMlYwS1N3Z2RHRnlaMlYwUzJWNUxDQm1ZV3h6WlNrN1hHNGdJR2xtS0cxbGRHRmtZWFJoVFdGd0lEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z0lXMWxkR0ZrWVhSaFRXRndXeWRrWld4bGRHVW5YU2h0WlhSaFpHRjBZVXRsZVNrcGNtVjBkWEp1SUdaaGJITmxPMXh1SUNCcFppaHRaWFJoWkdGMFlVMWhjQzV6YVhwbEtYSmxkSFZ5YmlCMGNuVmxPMXh1SUNCMllYSWdkR0Z5WjJWMFRXVjBZV1JoZEdFZ1BTQnpkRzl5WlM1blpYUW9kR0Z5WjJWMEtUdGNiaUFnZEdGeVoyVjBUV1YwWVdSaGRHRmJKMlJsYkdWMFpTZGRLSFJoY21kbGRFdGxlU2s3WEc0Z0lISmxkSFZ5YmlBaElYUmhjbWRsZEUxbGRHRmtZWFJoTG5OcGVtVWdmSHdnYzNSdmNtVmJKMlJsYkdWMFpTZGRLSFJoY21kbGRDazdYRzU5ZlNrN0lpd2lkbUZ5SUZObGRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5bGN6WXVjMlYwSnlsY2JpQWdMQ0JtY205dElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMV1p5YjIwdGFYUmxjbUZpYkdVbktWeHVJQ0FzSUcxbGRHRmtZWFJoSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZV1JoZEdFbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCblpYUlFjbTkwYjNSNWNHVlBaaUFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBc0lHOXlaR2x1WVhKNVQzZHVUV1YwWVdSaGRHRkxaWGx6SUQwZ2JXVjBZV1JoZEdFdWEyVjVjMXh1SUNBc0lIUnZUV1YwWVV0bGVTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JXVjBZV1JoZEdFdWEyVjVPMXh1WEc1MllYSWdiM0prYVc1aGNubE5aWFJoWkdGMFlVdGxlWE1nUFNCbWRXNWpkR2x2YmloUExDQlFLWHRjYmlBZ2RtRnlJRzlMWlhseklDQTlJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhsektFOHNJRkFwWEc0Z0lDQWdMQ0J3WVhKbGJuUWdQU0JuWlhSUWNtOTBiM1I1Y0dWUFppaFBLVHRjYmlBZ2FXWW9jR0Z5Wlc1MElEMDlQU0J1ZFd4c0tYSmxkSFZ5YmlCdlMyVjVjenRjYmlBZ2RtRnlJSEJMWlhseklDQTlJRzl5WkdsdVlYSjVUV1YwWVdSaGRHRkxaWGx6S0hCaGNtVnVkQ3dnVUNrN1hHNGdJSEpsZEhWeWJpQndTMlY1Y3k1c1pXNW5kR2dnUHlCdlMyVjVjeTVzWlc1bmRHZ2dQeUJtY205dEtHNWxkeUJUWlhRb2IwdGxlWE11WTI5dVkyRjBLSEJMWlhsektTa3BJRG9nY0V0bGVYTWdPaUJ2UzJWNWN6dGNibjA3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3WjJWMFRXVjBZV1JoZEdGTFpYbHpPaUJtZFc1amRHbHZiaUJuWlhSTlpYUmhaR0YwWVV0bGVYTW9kR0Z5WjJWMElDOHFMQ0IwWVhKblpYUkxaWGtnS2k4cGUxeHVJQ0J5WlhSMWNtNGdiM0prYVc1aGNubE5aWFJoWkdGMFlVdGxlWE1vWVc1UFltcGxZM1FvZEdGeVoyVjBLU3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURJZ1B5QjFibVJsWm1sdVpXUWdPaUIwYjAxbGRHRkxaWGtvWVhKbmRXMWxiblJ6V3pGZEtTazdYRzU5ZlNrN0lpd2lkbUZ5SUcxbGRHRmtZWFJoSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhaR0YwWVNjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWjJWMFVISnZkRzkwZVhCbFQyWWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUc5eVpHbHVZWEo1U0dGelQzZHVUV1YwWVdSaGRHRWdQU0J0WlhSaFpHRjBZUzVvWVhOY2JpQWdMQ0J2Y21ScGJtRnllVWRsZEU5M2JrMWxkR0ZrWVhSaElEMGdiV1YwWVdSaGRHRXVaMlYwWEc0Z0lDd2dkRzlOWlhSaFMyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWRtRnlJRzl5WkdsdVlYSjVSMlYwVFdWMFlXUmhkR0VnUFNCbWRXNWpkR2x2YmloTlpYUmhaR0YwWVV0bGVTd2dUeXdnVUNsN1hHNGdJSFpoY2lCb1lYTlBkMjRnUFNCdmNtUnBibUZ5ZVVoaGMwOTNiazFsZEdGa1lYUmhLRTFsZEdGa1lYUmhTMlY1TENCUExDQlFLVHRjYmlBZ2FXWW9hR0Z6VDNkdUtYSmxkSFZ5YmlCdmNtUnBibUZ5ZVVkbGRFOTNiazFsZEdGa1lYUmhLRTFsZEdGa1lYUmhTMlY1TENCUExDQlFLVHRjYmlBZ2RtRnlJSEJoY21WdWRDQTlJR2RsZEZCeWIzUnZkSGx3WlU5bUtFOHBPMXh1SUNCeVpYUjFjbTRnY0dGeVpXNTBJQ0U5UFNCdWRXeHNJRDhnYjNKa2FXNWhjbmxIWlhSTlpYUmhaR0YwWVNoTlpYUmhaR0YwWVV0bGVTd2djR0Z5Wlc1MExDQlFLU0E2SUhWdVpHVm1hVzVsWkR0Y2JuMDdYRzVjYm0xbGRHRmtZWFJoTG1WNGNDaDdaMlYwVFdWMFlXUmhkR0U2SUdaMWJtTjBhVzl1SUdkbGRFMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0IwWVhKblpYUWdMeW9zSUhSaGNtZGxkRXRsZVNBcUx5bDdYRzRnSUhKbGRIVnliaUJ2Y21ScGJtRnllVWRsZEUxbGRHRmtZWFJoS0cxbGRHRmtZWFJoUzJWNUxDQmhiazlpYW1WamRDaDBZWEpuWlhRcExDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEd2dNeUEvSUhWdVpHVm1hVzVsWkNBNklIUnZUV1YwWVV0bGVTaGhjbWQxYldWdWRITmJNbDBwS1R0Y2JuMTlLVHNpTENKMllYSWdiV1YwWVdSaGRHRWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaFpHRjBZU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRzl5WkdsdVlYSjVUM2R1VFdWMFlXUmhkR0ZMWlhseklEMGdiV1YwWVdSaGRHRXVhMlY1YzF4dUlDQXNJSFJ2VFdWMFlVdGxlU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1TzF4dVhHNXRaWFJoWkdGMFlTNWxlSEFvZTJkbGRFOTNiazFsZEdGa1lYUmhTMlY1Y3pvZ1puVnVZM1JwYjI0Z1oyVjBUM2R1VFdWMFlXUmhkR0ZMWlhsektIUmhjbWRsZENBdktpd2dkR0Z5WjJWMFMyVjVJQ292S1h0Y2JpQWdjbVYwZFhKdUlHOXlaR2x1WVhKNVQzZHVUV1YwWVdSaGRHRkxaWGx6S0dGdVQySnFaV04wS0hSaGNtZGxkQ2tzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeUlEOGdkVzVrWldacGJtVmtJRG9nZEc5TlpYUmhTMlY1S0dGeVozVnRaVzUwYzFzeFhTa3BPMXh1ZlgwcE95SXNJblpoY2lCdFpYUmhaR0YwWVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZV1JoZEdFbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUc5eVpHbHVZWEo1UjJWMFQzZHVUV1YwWVdSaGRHRWdQU0J0WlhSaFpHRjBZUzVuWlhSY2JpQWdMQ0IwYjAxbGRHRkxaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1TzF4dVhHNXRaWFJoWkdGMFlTNWxlSEFvZTJkbGRFOTNiazFsZEdGa1lYUmhPaUJtZFc1amRHbHZiaUJuWlhSUGQyNU5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnZEdGeVoyVjBJQzhxTENCMFlYSm5aWFJMWlhrZ0tpOHBlMXh1SUNCeVpYUjFjbTRnYjNKa2FXNWhjbmxIWlhSUGQyNU5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnWVc1UFltcGxZM1FvZEdGeVoyVjBLVnh1SUNBZ0lDd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThJRE1nUHlCMWJtUmxabWx1WldRZ09pQjBiMDFsZEdGTFpYa29ZWEpuZFcxbGJuUnpXekpkS1NrN1hHNTlmU2s3SWl3aWRtRnlJRzFsZEdGa1lYUmhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaFpHRjBZU2NwWEc0Z0lDd2dZVzVQWW1wbFkzUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5jRzhuS1Z4dUlDQXNJRzl5WkdsdVlYSjVTR0Z6VDNkdVRXVjBZV1JoZEdFZ1BTQnRaWFJoWkdGMFlTNW9ZWE5jYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JXVjBZV1JoZEdFdWEyVjVPMXh1WEc1MllYSWdiM0prYVc1aGNubElZWE5OWlhSaFpHRjBZU0E5SUdaMWJtTjBhVzl1S0UxbGRHRmtZWFJoUzJWNUxDQlBMQ0JRS1h0Y2JpQWdkbUZ5SUdoaGMwOTNiaUE5SUc5eVpHbHVZWEo1U0dGelQzZHVUV1YwWVdSaGRHRW9UV1YwWVdSaGRHRkxaWGtzSUU4c0lGQXBPMXh1SUNCcFppaG9ZWE5QZDI0cGNtVjBkWEp1SUhSeWRXVTdYRzRnSUhaaGNpQndZWEpsYm5RZ1BTQm5aWFJRY205MGIzUjVjR1ZQWmloUEtUdGNiaUFnY21WMGRYSnVJSEJoY21WdWRDQWhQVDBnYm5Wc2JDQS9JRzl5WkdsdVlYSjVTR0Z6VFdWMFlXUmhkR0VvVFdWMFlXUmhkR0ZMWlhrc0lIQmhjbVZ1ZEN3Z1VDa2dPaUJtWVd4elpUdGNibjA3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3YUdGelRXVjBZV1JoZEdFNklHWjFibU4wYVc5dUlHaGhjMDFsZEdGa1lYUmhLRzFsZEdGa1lYUmhTMlY1TENCMFlYSm5aWFFnTHlvc0lIUmhjbWRsZEV0bGVTQXFMeWw3WEc0Z0lISmxkSFZ5YmlCdmNtUnBibUZ5ZVVoaGMwMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0JoYms5aWFtVmpkQ2gwWVhKblpYUXBMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRHdnTXlBL0lIVnVaR1ZtYVc1bFpDQTZJSFJ2VFdWMFlVdGxlU2hoY21kMWJXVnVkSE5iTWwwcEtUdGNibjE5S1RzaUxDSjJZWElnYldWMFlXUmhkR0VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0J2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaElEMGdiV1YwWVdSaGRHRXVhR0Z6WEc0Z0lDd2dkRzlOWlhSaFMyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWJXVjBZV1JoZEdFdVpYaHdLSHRvWVhOUGQyNU5aWFJoWkdGMFlUb2dablZ1WTNScGIyNGdhR0Z6VDNkdVRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJSFJoY21kbGRDQXZLaXdnZEdGeVoyVjBTMlY1SUNvdktYdGNiaUFnY21WMGRYSnVJRzl5WkdsdVlYSjVTR0Z6VDNkdVRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJR0Z1VDJKcVpXTjBLSFJoY21kbGRDbGNiaUFnSUNBc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQXpJRDhnZFc1a1pXWnBibVZrSURvZ2RHOU5aWFJoUzJWNUtHRnlaM1Z0Wlc1MGMxc3lYU2twTzF4dWZYMHBPeUlzSW5aaGNpQnRaWFJoWkdGMFlTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlXUmhkR0VuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdGR2RXNWpkR2x2YmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1WEc0Z0lDd2diM0prYVc1aGNubEVaV1pwYm1WUGQyNU5aWFJoWkdGMFlTQTlJRzFsZEdGa1lYUmhMbk5sZER0Y2JseHViV1YwWVdSaGRHRXVaWGh3S0h0dFpYUmhaR0YwWVRvZ1puVnVZM1JwYjI0Z2JXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaR1ZqYjNKaGRHOXlLSFJoY21kbGRDd2dkR0Z5WjJWMFMyVjVLWHRjYmlBZ0lDQnZjbVJwYm1GeWVVUmxabWx1WlU5M2JrMWxkR0ZrWVhSaEtGeHVJQ0FnSUNBZ2JXVjBZV1JoZEdGTFpYa3NJRzFsZEdGa1lYUmhWbUZzZFdVc1hHNGdJQ0FnSUNBb2RHRnlaMlYwUzJWNUlDRTlQU0IxYm1SbFptbHVaV1FnUHlCaGJrOWlhbVZqZENBNklHRkdkVzVqZEdsdmJpa29kR0Z5WjJWMEtTeGNiaUFnSUNBZ0lIUnZUV1YwWVV0bGVTaDBZWEpuWlhSTFpYa3BYRzRnSUNBZ0tUdGNiaUFnZlR0Y2JuMTlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZSR0YyYVdSQ2NuVmhiblF2VFdGd0xWTmxkQzV3Y205MGIzUjVjR1V1ZEc5S1UwOU9YRzUyWVhJZ0pHVjRjRzl5ZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExsSXNJQ2RUWlhRbkxDQjdkRzlLVTA5T09pQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1TFhSdkxXcHpiMjRuS1NnblUyVjBKeWw5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZiV0YwYUdsaGMySjVibVZ1Y3k5VGRISnBibWN1Y0hKdmRHOTBlWEJsTG1GMFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdGMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1WnkxaGRDY3BLSFJ5ZFdVcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnSjFOMGNtbHVaeWNzSUh0Y2JpQWdZWFE2SUdaMWJtTjBhVzl1SUdGMEtIQnZjeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUmhkQ2gwYUdsekxDQndiM01wTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEhKY2JpOHZJR2gwZEhCek9pOHZkR016T1M1bmFYUm9kV0l1YVc4dlUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1dFlYUmphRUZzYkM5Y2NseHVkbUZ5SUNSbGVIQnZjblFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjY2x4dUlDQXNJR1JsWm1sdVpXUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BYSEpjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYSEpjYmlBZ0xDQnBjMUpsWjBWNGNDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMWEpsWjJWNGNDY3BYSEpjYmlBZ0xDQm5aWFJHYkdGbmN5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWnNZV2R6SnlsY2NseHVJQ0FzSUZKbFowVjRjRkJ5YjNSdklEMGdVbVZuUlhod0xuQnliM1J2ZEhsd1pUdGNjbHh1WEhKY2JuWmhjaUFrVW1WblJYaHdVM1J5YVc1blNYUmxjbUYwYjNJZ1BTQm1kVzVqZEdsdmJpaHlaV2RsZUhBc0lITjBjbWx1WnlsN1hISmNiaUFnZEdocGN5NWZjaUE5SUhKbFoyVjRjRHRjY2x4dUlDQjBhR2x6TGw5eklEMGdjM1J5YVc1bk8xeHlYRzU5TzF4eVhHNWNjbHh1Y21WeGRXbHlaU2duTGk5ZmFYUmxjaTFqY21WaGRHVW5LU2drVW1WblJYaHdVM1J5YVc1blNYUmxjbUYwYjNJc0lDZFNaV2RGZUhBZ1UzUnlhVzVuSnl3Z1puVnVZM1JwYjI0Z2JtVjRkQ2dwZTF4eVhHNGdJSFpoY2lCdFlYUmphQ0E5SUhSb2FYTXVYM0l1WlhobFl5aDBhR2x6TGw5ektUdGNjbHh1SUNCeVpYUjFjbTRnZTNaaGJIVmxPaUJ0WVhSamFDd2daRzl1WlRvZ2JXRjBZMmdnUFQwOUlHNTFiR3g5TzF4eVhHNTlLVHRjY2x4dVhISmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFMQ0FuVTNSeWFXNW5KeXdnZTF4eVhHNGdJRzFoZEdOb1FXeHNPaUJtZFc1amRHbHZiaUJ0WVhSamFFRnNiQ2h5WldkbGVIQXBlMXh5WEc0Z0lDQWdaR1ZtYVc1bFpDaDBhR2x6S1R0Y2NseHVJQ0FnSUdsbUtDRnBjMUpsWjBWNGNDaHlaV2RsZUhBcEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2loeVpXZGxlSEFnS3lBbklHbHpJRzV2ZENCaElISmxaMlY0Y0NFbktUdGNjbHh1SUNBZ0lIWmhjaUJUSUNBZ0lDQTlJRk4wY21sdVp5aDBhR2x6S1Z4eVhHNGdJQ0FnSUNBc0lHWnNZV2R6SUQwZ0oyWnNZV2R6SnlCcGJpQlNaV2RGZUhCUWNtOTBieUEvSUZOMGNtbHVaeWh5WldkbGVIQXVabXhoWjNNcElEb2daMlYwUm14aFozTXVZMkZzYkNoeVpXZGxlSEFwWEhKY2JpQWdJQ0FnSUN3Z2NuZ2dJQ0FnUFNCdVpYY2dVbVZuUlhod0tISmxaMlY0Y0M1emIzVnlZMlVzSUg1bWJHRm5jeTVwYm1SbGVFOW1LQ2RuSnlrZ1B5Qm1iR0ZuY3lBNklDZG5KeUFySUdac1lXZHpLVHRjY2x4dUlDQWdJSEo0TG14aGMzUkpibVJsZUNBOUlIUnZUR1Z1WjNSb0tISmxaMlY0Y0M1c1lYTjBTVzVrWlhncE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QWtVbVZuUlhod1UzUnlhVzVuU1hSbGNtRjBiM0lvY25nc0lGTXBPMXh5WEc0Z0lIMWNjbHh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM1JqTXprdmNISnZjRzl6WVd3dGMzUnlhVzVuTFhCaFpDMXpkR0Z5ZEMxbGJtUmNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa2NHRmtJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxYQmhaQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMU4wY21sdVp5Y3NJSHRjYmlBZ2NHRmtSVzVrT2lCbWRXNWpkR2x2YmlCd1lXUkZibVFvYldGNFRHVnVaM1JvSUM4cUxDQm1hV3hzVTNSeWFXNW5JRDBnSnlBbklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pIQmhaQ2gwYUdsekxDQnRZWGhNWlc1bmRHZ3NJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrTENCbVlXeHpaU2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBZek01TDNCeWIzQnZjMkZzTFhOMGNtbHVaeTF3WVdRdGMzUmhjblF0Wlc1a1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkhCaFpDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxd1lXUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZFRkSEpwYm1jbkxDQjdYRzRnSUhCaFpGTjBZWEowT2lCbWRXNWpkR2x2YmlCd1lXUlRkR0Z5ZENodFlYaE1aVzVuZEdnZ0x5b3NJR1pwYkd4VGRISnBibWNnUFNBbklDY2dLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWtjR0ZrS0hSb2FYTXNJRzFoZUV4bGJtZDBhQ3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRc0lIUnlkV1VwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjMlZpYldGeWEySmhaMlV2WldOdFlYTmpjbWx3ZEMxemRISnBibWN0YkdWbWRDMXlhV2RvZEMxMGNtbHRYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0ZEhKcGJTY3BLQ2QwY21sdFRHVm1kQ2NzSUdaMWJtTjBhVzl1S0NSMGNtbHRLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhSeWFXMU1aV1owS0NsN1hHNGdJQ0FnY21WMGRYSnVJQ1IwY21sdEtIUm9hWE1zSURFcE8xeHVJQ0I5TzF4dWZTd2dKM1J5YVcxVGRHRnlkQ2NwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXpaV0p0WVhKclltRm5aUzlsWTIxaGMyTnlhWEIwTFhOMGNtbHVaeTFzWldaMExYSnBaMmgwTFhSeWFXMWNibkpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTEwY21sdEp5a29KM1J5YVcxU2FXZG9kQ2NzSUdaMWJtTjBhVzl1S0NSMGNtbHRLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhSeWFXMVNhV2RvZENncGUxeHVJQ0FnSUhKbGRIVnliaUFrZEhKcGJTaDBhR2x6TENBeUtUdGNiaUFnZlR0Y2JuMHNJQ2QwY21sdFJXNWtKeWs3SWl3aWNtVnhkV2x5WlNnbkxpOWZkMnR6TFdSbFptbHVaU2NwS0NkaGMzbHVZMGwwWlhKaGRHOXlKeWs3SWl3aWNtVnhkV2x5WlNnbkxpOWZkMnR6TFdSbFptbHVaU2NwS0NkdlluTmxjblpoWW14bEp5azdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyeHFhR0Z5WWk5d2NtOXdiM05oYkMxbmJHOWlZV3hjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VM2x6ZEdWdEp5d2dlMmRzYjJKaGJEb2djbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWw5S1RzaUxDSjJZWElnSkdsMFpYSmhkRzl5Y3lBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxtRnljbUY1TG1sMFpYSmhkRzl5SnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1Z4dUlDQXNJR2RzYjJKaGJDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0IzYTNNZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ0lDQWdJRDBnZDJ0ektDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1ZFOWZVMVJTU1U1SFgxUkJSeUE5SUhkcmN5Z25kRzlUZEhKcGJtZFVZV2NuS1Z4dUlDQXNJRUZ5Y21GNVZtRnNkV1Z6SUNBZ1BTQkpkR1Z5WVhSdmNuTXVRWEp5WVhrN1hHNWNibVp2Y2loMllYSWdZMjlzYkdWamRHbHZibk1nUFNCYkowNXZaR1ZNYVhOMEp5d2dKMFJQVFZSdmEyVnVUR2x6ZENjc0lDZE5aV1JwWVV4cGMzUW5MQ0FuVTNSNWJHVlRhR1ZsZEV4cGMzUW5MQ0FuUTFOVFVuVnNaVXhwYzNRblhTd2dhU0E5SURBN0lHa2dQQ0ExT3lCcEt5c3BlMXh1SUNCMllYSWdUa0ZOUlNBZ0lDQWdJQ0E5SUdOdmJHeGxZM1JwYjI1elcybGRYRzRnSUNBZ0xDQkRiMnhzWldOMGFXOXVJRDBnWjJ4dlltRnNXMDVCVFVWZFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRMjlzYkdWamRHbHZiaUFtSmlCRGIyeHNaV04wYVc5dUxuQnliM1J2ZEhsd1pWeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCcFppaHdjbTkwYnlsN1hHNGdJQ0FnYVdZb0lYQnliM1J2VzBsVVJWSkJWRTlTWFNsb2FXUmxLSEJ5YjNSdkxDQkpWRVZTUVZSUFVpd2dRWEp5WVhsV1lXeDFaWE1wTzF4dUlDQWdJR2xtS0NGd2NtOTBiMXRVVDE5VFZGSkpUa2RmVkVGSFhTbG9hV1JsS0hCeWIzUnZMQ0JVVDE5VFZGSkpUa2RmVkVGSExDQk9RVTFGS1R0Y2JpQWdJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0JCY25KaGVWWmhiSFZsY3p0Y2JpQWdJQ0JtYjNJb2EyVjVJR2x1SUNScGRHVnlZWFJ2Y25NcGFXWW9JWEJ5YjNSdlcydGxlVjBwY21Wa1pXWnBibVVvY0hKdmRHOHNJR3RsZVN3Z0pHbDBaWEpoZEc5eWMxdHJaWGxkTENCMGNuVmxLVHRjYmlBZ2ZWeHVmU0lzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtkR0Z6YXlBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEdGemF5Y3BPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGtJc0lIdGNiaUFnYzJWMFNXMXRaV1JwWVhSbE9pQWdJQ1IwWVhOckxuTmxkQ3hjYmlBZ1kyeGxZWEpKYlcxbFpHbGhkR1U2SUNSMFlYTnJMbU5zWldGeVhHNTlLVHNpTENJdkx5QnBaVGt0SUhObGRGUnBiV1Z2ZFhRZ0ppQnpaWFJKYm5SbGNuWmhiQ0JoWkdScGRHbHZibUZzSUhCaGNtRnRaWFJsY25NZ1ptbDRYRzUyWVhJZ1oyeHZZbUZzSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnYVc1MmIydGxJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx1ZG05clpTY3BYRzRnSUN3Z2NHRnlkR2xoYkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCaGNuUnBZV3duS1Z4dUlDQXNJRzVoZG1sbllYUnZjaUFnUFNCbmJHOWlZV3d1Ym1GMmFXZGhkRzl5WEc0Z0lDd2dUVk5KUlNBZ0lDQWdJQ0E5SUNFaGJtRjJhV2RoZEc5eUlDWW1JQzlOVTBsRklDNWNYQzR2TG5SbGMzUW9ibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ2s3SUM4dklEd3RJR1JwY25SNUlHbGxPUzBnWTJobFkydGNiblpoY2lCM2NtRndJRDBnWm5WdVkzUnBiMjRvYzJWMEtYdGNiaUFnY21WMGRYSnVJRTFUU1VVZ1B5Qm1kVzVqZEdsdmJpaG1iaXdnZEdsdFpTQXZLaXdnTGk0dVlYSm5jeUFxTHlsN1hHNGdJQ0FnY21WMGRYSnVJSE5sZENocGJuWnZhMlVvWEc0Z0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lESXBMRnh1SUNBZ0lDQWdkSGx3Wlc5bUlHWnVJRDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1iaUE2SUVaMWJtTjBhVzl1S0dadUtWeHVJQ0FnSUNrc0lIUnBiV1VwTzF4dUlDQjlJRG9nYzJWME8xeHVmVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1Q0lDc2dKR1Y0Y0c5eWRDNUdJQ29nVFZOSlJTd2dlMXh1SUNCelpYUlVhVzFsYjNWME9pQWdkM0poY0NobmJHOWlZV3d1YzJWMFZHbHRaVzkxZENrc1hHNGdJSE5sZEVsdWRHVnlkbUZzT2lCM2NtRndLR2RzYjJKaGJDNXpaWFJKYm5SbGNuWmhiQ2xjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVqY21WaGRHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUnBaWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWEyVjVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMXVZVzFsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1Wm5KbFpYcGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaV0ZzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV3Y21WMlpXNTBMV1Y0ZEdWdWMybHZibk1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFdaeWIzcGxiaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE10YzJWaGJHVmtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXBjeTFsZUhSbGJuTnBZbXhsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1jbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVpuVnVZM1JwYjI0dVltbHVaQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVtZFc1amRHbHZiaTV1WVcxbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtWjFibU4wYVc5dUxtaGhjeTFwYm5OMFlXNWpaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV3WVhKelpTMXBiblFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y0dGeWMyVXRabXh2WVhRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1OdmJuTjBjblZqZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MW1hWGhsWkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1ZEc4dGNISmxZMmx6YVc5dUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1bGNITnBiRzl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVwY3kxbWFXNXBkR1VuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbWx6TFdsdWRHVm5aWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbWx6TFc1aGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWFYTXRjMkZtWlMxcGJuUmxaMlZ5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV0WVhndGMyRm1aUzFwYm5SbFoyVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXRhVzR0YzJGbVpTMXBiblJsWjJWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1d1lYSnpaUzFtYkc5aGRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWNHRnljMlV0YVc1MEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WVdOdmMyZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1aGMybHVhQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtRjBZVzVvSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZMkp5ZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbU5zZWpNeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WTI5emFDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1WNGNHMHhKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVpuSnZkVzVrSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VhSGx3YjNRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVwYlhWc0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1Ykc5bk1UQW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1c2IyY3hjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xteHZaekluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGMGFDNXphV2R1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VjMmx1YUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MblJoYm1nbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzUwY25WdVl5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVpuSnZiUzFqYjJSbExYQnZhVzUwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV5WVhjbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5SeWFXMG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1amIyUmxMWEJ2YVc1MExXRjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWxibVJ6TFhkcGRHZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbHVZMngxWkdWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1eVpYQmxZWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk4wWVhKMGN5MTNhWFJvSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVoYm1Ob2IzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtSnBaeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VZbXhwYm1zbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1KdmJHUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnBlR1ZrSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVtYjI1MFkyOXNiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbVp2Ym5SemFYcGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR0ZzYVdOekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1c2FXNXJKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXpiV0ZzYkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNSeWFXdGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXpkV0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk4xY0NjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMbTV2ZHljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFdwemIyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXBjMjh0YzNSeWFXNW5KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbVJoZEdVdWRHOHRjM1J5YVc1bkp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGNISnBiV2wwYVhabEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sekxXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVp5YjIwbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YW05cGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1emJHbGpaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXpiM0owSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVp2Y2kxbFlXTm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtMWhjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNW1hV3gwWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YzI5dFpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bGRtVnllU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXlaV1IxWTJVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Y21Wa2RXTmxMWEpwWjJoMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sdVpHVjRMVzltSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbXhoYzNRdGFXNWtaWGd0YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1WTI5d2VTMTNhWFJvYVc0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm1sc2JDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWFXNWtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnBibVF0YVc1a1pYZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWMzQmxZMmxsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVZMjl1YzNSeWRXTjBiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMblJ2TFhOMGNtbHVaeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVabXhoWjNNbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG0xaGRHTm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWjJWNGNDNXlaWEJzWVdObEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxaMlY0Y0M1elpXRnlZMmduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbk53YkdsMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuQnliMjFwYzJVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRndKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk5sZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1M1pXRnJMVzFoY0NjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1M1pXRnJMWE5sZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzVoY25KaGVTMWlkV1ptWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1WkdGMFlTMTJhV1YzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbWx1ZERndFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERndFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERndFkyeGhiWEJsWkMxaGNuSmhlU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNXBiblF4TmkxaGNuSmhlU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNTFhVzUwTVRZdFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVhVzUwTXpJdFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERNeUxXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbVpzYjJGME16SXRZWEp5WVhrbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1Wm14dllYUTJOQzFoY25KaGVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtRndjR3g1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WTI5dWMzUnlkV04wSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUjVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaR1ZzWlhSbExYQnliM0JsY25SNUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpXNTFiV1Z5WVhSbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVoyVjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtaGhjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWx6TFdWNGRHVnVjMmxpYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1dmQyNHRhMlY1Y3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5ObGRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdVlYSnlZWGt1YVc1amJIVmtaWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YzNSeWFXNW5MbUYwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5OMGNtbHVaeTV3WVdRdGMzUmhjblFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YzNSeWFXNW5MbkJoWkMxbGJtUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuUnlhVzB0YkdWbWRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWRISnBiUzF5YVdkb2RDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWJXRjBZMmd0WVd4c0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1aGMzbHVZeTFwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3ViMkp6WlhKMllXSnNaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXljeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVkbUZzZFdWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1bGJuUnlhV1Z6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVrWldacGJtVXRaMlYwZEdWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1a1pXWnBibVV0YzJWMGRHVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNXNiMjlyZFhBdFoyVjBkR1Z5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVzYjI5cmRYQXRjMlYwZEdWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtMWhjQzUwYnkxcWMyOXVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk5sZEM1MGJ5MXFjMjl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5ONWMzUmxiUzVuYkc5aVlXd25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VaWEp5YjNJdWFYTXRaWEp5YjNJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVwWVdSa2FDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG1semRXSm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWFXMTFiR2duS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YldGMGFDNTFiWFZzYUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1SbFptbHVaUzF0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbVJsYkdWMFpTMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWRsZEMxdFpYUmhaR0YwWVMxclpYbHpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF2ZDI0dGJXVjBZV1JoZEdFdGEyVjVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWhoY3kxdFpYUmhaR0YwWVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1oaGN5MXZkMjR0YldWMFlXUmhkR0VuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzV0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTVoYzJGd0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWljMlZ5ZG1GaWJHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5M1pXSXVkR2x0WlhKekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12ZDJWaUxtbHRiV1ZrYVdGMFpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1VuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwxOWpiM0psSnlrN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwycHpiMjR2YzNSeWFXNW5hV1o1WENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWhjM05wWjI1Y0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMk55WldGMFpWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXBjeTFtY205NlpXNWNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJ0bGVYTmNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZjSEp2YldselpWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5emVXMWliMnhjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUc2lMQ0pjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHRjYmx4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1puVnVZM1JwYjI0Z0tHbHVjM1JoYm1ObExDQkRiMjV6ZEhKMVkzUnZjaWtnZTF4dUlDQnBaaUFvSVNocGJuTjBZVzVqWlNCcGJuTjBZVzVqWlc5bUlFTnZibk4wY25WamRHOXlLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWENKRFlXNXViM1FnWTJGc2JDQmhJR05zWVhOeklHRnpJR0VnWm5WdVkzUnBiMjVjSWlrN1hHNGdJSDFjYm4wN0lpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibVY0Y0c5eWRITXVYMTlsYzAxdlpIVnNaU0E5SUhSeWRXVTdYRzVjYm5aaGNpQmZaR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtGd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZaR1ZtYVc1bExYQnliM0JsY25SNVhDSXBPMXh1WEc1MllYSWdYMlJsWm1sdVpWQnliM0JsY25SNU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyUmxabWx1WlZCeWIzQmxjblI1S1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQm1kVzVqZEdsdmJpQmtaV1pwYm1WUWNtOXdaWEowYVdWektIUmhjbWRsZEN3Z2NISnZjSE1wSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCeWIzQnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdaR1Z6WTNKcGNIUnZjaUE5SUhCeWIzQnpXMmxkTzF4dUlDQWdJQ0FnWkdWelkzSnBjSFJ2Y2k1bGJuVnRaWEpoWW14bElEMGdaR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsSUh4OElHWmhiSE5sTzF4dUlDQWdJQ0FnWkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2FXWWdLRndpZG1Gc2RXVmNJaUJwYmlCa1pYTmpjbWx3ZEc5eUtTQmtaWE5qY21sd2RHOXlMbmR5YVhSaFlteGxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDZ3dMQ0JmWkdWbWFXNWxVSEp2Y0dWeWRIa3lMbVJsWm1GMWJIUXBLSFJoY21kbGRDd2daR1Z6WTNKcGNIUnZjaTVyWlhrc0lHUmxjMk55YVhCMGIzSXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9RMjl1YzNSeWRXTjBiM0lzSUhCeWIzUnZVSEp2Y0hNc0lITjBZWFJwWTFCeWIzQnpLU0I3WEc0Z0lDQWdhV1lnS0hCeWIzUnZVSEp2Y0hNcElHUmxabWx1WlZCeWIzQmxjblJwWlhNb1EyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxMQ0J3Y205MGIxQnliM0J6S1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR2xqVUhKdmNITXBJR1JsWm1sdVpWQnliM0JsY25ScFpYTW9RMjl1YzNSeWRXTjBiM0lzSUhOMFlYUnBZMUJ5YjNCektUdGNiaUFnSUNCeVpYUjFjbTRnUTI5dWMzUnlkV04wYjNJN1hHNGdJSDA3WEc1OUtDazdJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5aaGNpQmZUMkpxWldOMEpHTnlaV0YwWlNBOUlISmxjWFZwY21Vb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMk55WldGMFpWd2lLVnRjSW1SbFptRjFiSFJjSWwwN1hHNWNiblpoY2lCZlQySnFaV04wSkhObGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aUtWdGNJbVJsWm1GMWJIUmNJbDA3WEc1Y2JtVjRjRzl5ZEhOYlhDSmtaV1poZFd4MFhDSmRJRDBnWm5WdVkzUnBiMjRnS0hOMVlrTnNZWE56TENCemRYQmxja05zWVhOektTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2MzVndaWEpEYkdGemN5QWhQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JSE4xY0dWeVEyeGhjM01nSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVUzVndaWElnWlhod2NtVnpjMmx2YmlCdGRYTjBJR1ZwZEdobGNpQmlaU0J1ZFd4c0lHOXlJR0VnWm5WdVkzUnBiMjRzSUc1dmRDQmNJaUFySUhSNWNHVnZaaUJ6ZFhCbGNrTnNZWE56S1R0Y2JpQWdmVnh1WEc0Z0lITjFZa05zWVhOekxuQnliM1J2ZEhsd1pTQTlJRjlQWW1wbFkzUWtZM0psWVhSbEtITjFjR1Z5UTJ4aGMzTWdKaVlnYzNWd1pYSkRiR0Z6Y3k1d2NtOTBiM1I1Y0dVc0lIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNqb2dlMXh1SUNBZ0lDQWdkbUZzZFdVNklITjFZa05zWVhOekxGeHVJQ0FnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lIMWNiaUFnZlNrN1hHNGdJR2xtSUNoemRYQmxja05zWVhOektTQmZUMkpxWldOMEpITmxkRkJ5YjNSdmRIbHdaVTltSUQ4Z1gwOWlhbVZqZENSelpYUlFjbTkwYjNSNWNHVlBaaWh6ZFdKRGJHRnpjeXdnYzNWd1pYSkRiR0Z6Y3lrZ09pQnpkV0pEYkdGemN5NWZYM0J5YjNSdlgxOGdQU0J6ZFhCbGNrTnNZWE56TzF4dWZUdGNibHh1Wlhod2IzSjBjeTVmWDJWelRXOWtkV3hsSUQwZ2RISjFaVHNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVkbUZ5SUY5MGVYQmxiMll5SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSXBPMXh1WEc1MllYSWdYM1I1Y0dWdlpqTWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOTBlWEJsYjJZeUtUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnS0hObGJHWXNJR05oYkd3cElIdGNiaUFnYVdZZ0tDRnpaV3htS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZKbFptVnlaVzVqWlVWeWNtOXlLRndpZEdocGN5Qm9ZWE51SjNRZ1ltVmxiaUJwYm1sMGFXRnNhWE5sWkNBdElITjFjR1Z5S0NrZ2FHRnpiaWQwSUdKbFpXNGdZMkZzYkdWa1hDSXBPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR05oYkd3Z0ppWWdLQ2gwZVhCbGIyWWdZMkZzYkNBOVBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBL0lGd2lkVzVrWldacGJtVmtYQ0lnT2lBb01Dd2dYM1I1Y0dWdlpqTXVaR1ZtWVhWc2RDa29ZMkZzYkNrcElEMDlQU0JjSW05aWFtVmpkRndpSUh4OElIUjVjR1Z2WmlCallXeHNJRDA5UFNCY0ltWjFibU4wYVc5dVhDSXBJRDhnWTJGc2JDQTZJSE5sYkdZN1hHNTlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1MllYSWdYMU41YldKdmJDQTlJSEpsY1hWcGNtVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMzbHRZbTlzWENJcFcxd2laR1ZtWVhWc2RGd2lYVHRjYmx4dVpYaHdiM0owYzF0Y0ltUmxabUYxYkhSY0lsMGdQU0JtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTG1OdmJuTjBjblZqZEc5eUlEMDlQU0JmVTNsdFltOXNJRDhnWENKemVXMWliMnhjSWlBNklIUjVjR1Z2WmlCdlltbzdYRzU5TzF4dVhHNWxlSEJ2Y25SekxsOWZaWE5OYjJSMWJHVWdQU0IwY25WbE95SXNJblpoY2lCamIzSmxJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OGtMbU52Y21VbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdjM1J5YVc1bmFXWjVLR2wwS1hzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0J5WlhSMWNtNGdLR052Y21VdVNsTlBUaUFtSmlCamIzSmxMa3BUVDA0dWMzUnlhVzVuYVdaNUlIeDhJRXBUVDA0dWMzUnlhVzVuYVdaNUtTNWhjSEJzZVNoS1UwOU9MQ0JoY21kMWJXVnVkSE1wTzF4dWZUc2lMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZWE56YVdkdUp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdkpDNWpiM0psSnlrdVQySnFaV04wTG1GemMybG5ianNpTENKMllYSWdKQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZKQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCamNtVmhkR1VvVUN3Z1JDbDdYRzRnSUhKbGRIVnliaUFrTG1OeVpXRjBaU2hRTENCRUtUdGNibjA3SWl3aWRtRnlJQ1FnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMeVFuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z1pHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU3dnWkdWell5bDdYRzRnSUhKbGRIVnliaUFrTG5ObGRFUmxjMk1vYVhRc0lHdGxlU3dnWkdWell5azdYRzU5T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRjSEp2ZEc5MGVYQmxMVzltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12SkM1amIzSmxKeWt1VDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bU95SXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXBjeTFtY205NlpXNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OGtMbU52Y21VbktTNVBZbXBsWTNRdWFYTkdjbTk2Wlc0N0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtdGxlWE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeThrTG1OdmNtVW5LUzVQWW1wbFkzUXVhMlY1Y3pzaUxDSnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2WmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6THlRdVkyOXlaU2NwTGs5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFpqc2lMQ0p5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWRHOHRjM1J5YVc1bkp5azdYRzV5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWFYUmxjbUYwYjNJbktUdGNibkpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12ZDJWaUxtUnZiUzVwZEdWeVlXSnNaU2NwTzF4dWNtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OWxjell1Y0hKdmJXbHpaU2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekx5UXVZMjl5WlNjcExsQnliMjFwYzJVN0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c0p5azdYRzV5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVkRzh0YzNSeWFXNW5KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZKQzVqYjNKbEp5a3VVM2x0WW05c095SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZUc2lMQ0oyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YVhNdGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLR2wwS1NsMGFISnZkeUJVZVhCbFJYSnliM0lvYVhRZ0t5QW5JR2x6SUc1dmRDQmhiaUJ2WW1wbFkzUWhKeWs3WEc0Z0lISmxkSFZ5YmlCcGREdGNibjA3SWl3aUx5OGdaMlYwZEdsdVp5QjBZV2NnWm5KdmJTQXhPUzR4TGpNdU5pQlBZbXBsWTNRdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bktDbGNiblpoY2lCamIyWWdQU0J5WlhGMWFYSmxLQ2N1THlRdVkyOW1KeWxjYmlBZ0xDQlVRVWNnUFNCeVpYRjFhWEpsS0NjdUx5UXVkMnR6Snlrb0ozUnZVM1J5YVc1blZHRm5KeWxjYmlBZ0x5OGdSVk16SUhkeWIyNW5JR2hsY21WY2JpQWdMQ0JCVWtjZ1BTQmpiMllvWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUdGeVozVnRaVzUwY3pzZ2ZTZ3BLU0E5UFNBblFYSm5kVzFsYm5Sekp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSFpoY2lCUExDQlVMQ0JDTzF4dUlDQnlaWFIxY200Z2FYUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lDZFZibVJsWm1sdVpXUW5JRG9nYVhRZ1BUMDlJRzUxYkd3Z1B5QW5UblZzYkNkY2JpQWdJQ0F2THlCQVFIUnZVM1J5YVc1blZHRm5JR05oYzJWY2JpQWdJQ0E2SUhSNWNHVnZaaUFvVkNBOUlDaFBJRDBnVDJKcVpXTjBLR2wwS1NsYlZFRkhYU2tnUFQwZ0ozTjBjbWx1WnljZ1B5QlVYRzRnSUNBZ0x5OGdZblZwYkhScGJsUmhaeUJqWVhObFhHNGdJQ0FnT2lCQlVrY2dQeUJqYjJZb1R5bGNiaUFnSUNBdkx5QkZVek1nWVhKbmRXMWxiblJ6SUdaaGJHeGlZV05yWEc0Z0lDQWdPaUFvUWlBOUlHTnZaaWhQS1NrZ1BUMGdKMDlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRTh1WTJGc2JHVmxJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QW5RWEpuZFcxbGJuUnpKeUE2SUVJN1hHNTlPeUlzSW5aaGNpQmpiM0psSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN2RtVnljMmx2YmpvZ0p6RXVNaTQySjMwN1hHNXBaaWgwZVhCbGIyWWdYMTlsSUQwOUlDZHVkVzFpWlhJbktWOWZaU0E5SUdOdmNtVTdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRkVzVrWldZaUxDSXZMeUJ2Y0hScGIyNWhiQ0F2SUhOcGJYQnNaU0JqYjI1MFpYaDBJR0pwYm1ScGJtZGNiblpoY2lCaFJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMeVF1WVMxbWRXNWpkR2x2YmljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaG1iaXdnZEdoaGRDd2diR1Z1WjNSb0tYdGNiaUFnWVVaMWJtTjBhVzl1S0dadUtUdGNiaUFnYVdZb2RHaGhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tYSmxkSFZ5YmlCbWJqdGNiaUFnYzNkcGRHTm9LR3hsYm1kMGFDbDdYRzRnSUNBZ1kyRnpaU0F4T2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVNsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHTmhjMlVnTWpvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dFc0lHSXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVN3Z1lpazdYRzRnSUNBZ2ZUdGNiaUFnSUNCallYTmxJRE02SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoTENCaUxDQmpLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1iaTVqWVd4c0tIUm9ZWFFzSUdFc0lHSXNJR01wTzF4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVLQzhxSUM0dUxtRnlaM01nS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUJtYmk1aGNIQnNlU2gwYUdGMExDQmhjbWQxYldWdWRITXBPMXh1SUNCOU8xeHVmVHNpTENJdkx5QlVhR0Z1YXlkeklFbEZPQ0JtYjNJZ2FHbHpJR1oxYm01NUlHUmxabWx1WlZCeWIzQmxjblI1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNGeVpYRjFhWEpsS0NjdUx5UXVabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIdDlMQ0FuWVNjc0lIdG5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlBM095QjlmU2t1WVNBaFBTQTNPMXh1ZlNrN0lpd2lkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2daRzlqZFcxbGJuUWdQU0J5WlhGMWFYSmxLQ2N1THlRdVoyeHZZbUZzSnlrdVpHOWpkVzFsYm5SY2JpQWdMeThnYVc0Z2IyeGtJRWxGSUhSNWNHVnZaaUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MElHbHpJQ2R2WW1wbFkzUW5YRzRnSUN3Z2FYTWdQU0JwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQ2tnSmlZZ2FYTlBZbXBsWTNRb1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2x6SUQ4Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hwZENrZ09pQjdmVHRjYm4wN0lpd2lMeThnWVd4c0lHVnVkVzFsY21GaWJHVWdiMkpxWldOMElHdGxlWE1zSUdsdVkyeDFaR1Z6SUhONWJXSnZiSE5jYm5aaGNpQWtJRDBnY21WeGRXbHlaU2duTGk4a0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdkbUZ5SUd0bGVYTWdJQ0FnSUNBZ1BTQWtMbWRsZEV0bGVYTW9hWFFwWEc0Z0lDQWdMQ0JuWlhSVGVXMWliMnh6SUQwZ0pDNW5aWFJUZVcxaWIyeHpPMXh1SUNCcFppaG5aWFJUZVcxaWIyeHpLWHRjYmlBZ0lDQjJZWElnYzNsdFltOXNjeUE5SUdkbGRGTjViV0p2YkhNb2FYUXBYRzRnSUNBZ0lDQXNJR2x6Ulc1MWJTQWdQU0FrTG1selJXNTFiVnh1SUNBZ0lDQWdMQ0JwSUNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ0FnTENCclpYazdYRzRnSUNBZ2QyaHBiR1VvYzNsdFltOXNjeTVzWlc1bmRHZ2dQaUJwS1dsbUtHbHpSVzUxYlM1allXeHNLR2wwTENCclpYa2dQU0J6ZVcxaWIyeHpXMmtySzEwcEtXdGxlWE11Y0hWemFDaHJaWGtwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJyWlhsek8xeHVmVHNpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xtZHNiMkpoYkNjcFhHNGdJQ3dnWTI5eVpTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbU52Y21VbktWeHVJQ0FzSUdOMGVDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVqZEhnbktWeHVJQ0FzSUZCU1QxUlBWRmxRUlNBOUlDZHdjbTkwYjNSNWNHVW5PMXh1WEc1MllYSWdKR1Y0Y0c5eWRDQTlJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHNWhiV1VzSUhOdmRYSmpaU2w3WEc0Z0lIWmhjaUJKVTE5R1QxSkRSVVFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVHWEc0Z0lDQWdMQ0JKVTE5SFRFOUNRVXdnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVIWEc0Z0lDQWdMQ0JKVTE5VFZFRlVTVU1nUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVUWEc0Z0lDQWdMQ0JKVTE5UVVrOVVUeUFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVRWEc0Z0lDQWdMQ0JKVTE5Q1NVNUVJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVDWEc0Z0lDQWdMQ0JKVTE5WFVrRlFJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVYWEc0Z0lDQWdMQ0JsZUhCdmNuUnpJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5QmpiM0psSURvZ1kyOXlaVnR1WVcxbFhTQjhmQ0FvWTI5eVpWdHVZVzFsWFNBOUlIdDlLVnh1SUNBZ0lDd2dkR0Z5WjJWMElDQWdJRDBnU1ZOZlIweFBRa0ZNSUQ4Z1oyeHZZbUZzSURvZ1NWTmZVMVJCVkVsRElEOGdaMnh2WW1Gc1cyNWhiV1ZkSURvZ0tHZHNiMkpoYkZ0dVlXMWxYU0I4ZkNCN2ZTbGJVRkpQVkU5VVdWQkZYVnh1SUNBZ0lDd2dhMlY1TENCdmQyNHNJRzkxZER0Y2JpQWdhV1lvU1ZOZlIweFBRa0ZNS1hOdmRYSmpaU0E5SUc1aGJXVTdYRzRnSUdadmNpaHJaWGtnYVc0Z2MyOTFjbU5sS1h0Y2JpQWdJQ0F2THlCamIyNTBZV2x1Y3lCcGJpQnVZWFJwZG1WY2JpQWdJQ0J2ZDI0Z1BTQWhTVk5mUms5U1EwVkVJQ1ltSUhSaGNtZGxkQ0FtSmlCclpYa2dhVzRnZEdGeVoyVjBPMXh1SUNBZ0lHbG1LRzkzYmlBbUppQnJaWGtnYVc0Z1pYaHdiM0owY3lsamIyNTBhVzUxWlR0Y2JpQWdJQ0F2THlCbGVIQnZjblFnYm1GMGFYWmxJRzl5SUhCaGMzTmxaRnh1SUNBZ0lHOTFkQ0E5SUc5M2JpQS9JSFJoY21kbGRGdHJaWGxkSURvZ2MyOTFjbU5sVzJ0bGVWMDdYRzRnSUNBZ0x5OGdjSEpsZG1WdWRDQm5iRzlpWVd3Z2NHOXNiSFYwYVc5dUlHWnZjaUJ1WVcxbGMzQmhZMlZ6WEc0Z0lDQWdaWGh3YjNKMGMxdHJaWGxkSUQwZ1NWTmZSMHhQUWtGTUlDWW1JSFI1Y0dWdlppQjBZWEpuWlhSYmEyVjVYU0FoUFNBblpuVnVZM1JwYjI0bklEOGdjMjkxY21ObFcydGxlVjFjYmlBZ0lDQXZMeUJpYVc1a0lIUnBiV1Z5Y3lCMGJ5Qm5iRzlpWVd3Z1ptOXlJR05oYkd3Z1puSnZiU0JsZUhCdmNuUWdZMjl1ZEdWNGRGeHVJQ0FnSURvZ1NWTmZRa2xPUkNBbUppQnZkMjRnUHlCamRIZ29iM1YwTENCbmJHOWlZV3dwWEc0Z0lDQWdMeThnZDNKaGNDQm5iRzlpWVd3Z1kyOXVjM1J5ZFdOMGIzSnpJR1p2Y2lCd2NtVjJaVzUwSUdOb1lXNW5aU0IwYUdWdElHbHVJR3hwWW5KaGNubGNiaUFnSUNBNklFbFRYMWRTUVZBZ0ppWWdkR0Z5WjJWMFcydGxlVjBnUFQwZ2IzVjBJRDhnS0daMWJtTjBhVzl1S0VNcGUxeHVJQ0FnSUNBZ2RtRnlJRVlnUFNCbWRXNWpkR2x2Ymlod1lYSmhiU2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdReUEvSUc1bGR5QkRLSEJoY21GdEtTQTZJRU1vY0dGeVlXMHBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJRVpiVUZKUFZFOVVXVkJGWFNBOUlFTmJVRkpQVkU5VVdWQkZYVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQkdPMXh1SUNBZ0lDOHZJRzFoYTJVZ2MzUmhkR2xqSUhabGNuTnBiMjV6SUdadmNpQndjbTkwYjNSNWNHVWdiV1YwYUc5a2MxeHVJQ0FnSUgwcEtHOTFkQ2tnT2lCSlUxOVFVazlVVHlBbUppQjBlWEJsYjJZZ2IzVjBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkSGdvUm5WdVkzUnBiMjR1WTJGc2JDd2diM1YwS1NBNklHOTFkRHRjYmlBZ0lDQnBaaWhKVTE5UVVrOVVUeWtvWlhod2IzSjBjMXRRVWs5VVQxUlpVRVZkSUh4OElDaGxlSEJ2Y25SelcxQlNUMVJQVkZsUVJWMGdQU0I3ZlNrcFcydGxlVjBnUFNCdmRYUTdYRzRnSUgxY2JuMDdYRzR2THlCMGVYQmxJR0pwZEcxaGNGeHVKR1Y0Y0c5eWRDNUdJRDBnTVRzZ0lDOHZJR1p2Y21ObFpGeHVKR1Y0Y0c5eWRDNUhJRDBnTWpzZ0lDOHZJR2RzYjJKaGJGeHVKR1Y0Y0c5eWRDNVRJRDBnTkRzZ0lDOHZJSE4wWVhScFkxeHVKR1Y0Y0c5eWRDNVFJRDBnT0RzZ0lDOHZJSEJ5YjNSdlhHNGtaWGh3YjNKMExrSWdQU0F4TmpzZ0x5OGdZbWx1WkZ4dUpHVjRjRzl5ZEM1WElEMGdNekk3SUM4dklIZHlZWEJjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSkdWNGNHOXlkRHNpTENKMllYSWdZM1I0SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVZM1I0SnlsY2JpQWdMQ0JqWVd4c0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVwZEdWeUxXTmhiR3duS1Z4dUlDQXNJR2x6UVhKeVlYbEpkR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWx6TFdGeWNtRjVMV2wwWlhJbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1GdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1ZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0JuWlhSSmRHVnlSbTRnSUNBOUlISmxjWFZwY21Vb0p5NHZZMjl5WlM1blpYUXRhWFJsY21GMGIzSXRiV1YwYUc5a0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhKaFlteGxMQ0JsYm5SeWFXVnpMQ0JtYml3Z2RHaGhkQ2w3WEc0Z0lIWmhjaUJwZEdWeVJtNGdQU0JuWlhSSmRHVnlSbTRvYVhSbGNtRmliR1VwWEc0Z0lDQWdMQ0JtSUNBZ0lDQWdQU0JqZEhnb1ptNHNJSFJvWVhRc0lHVnVkSEpwWlhNZ1B5QXlJRG9nTVNsY2JpQWdJQ0FzSUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FzSUd4bGJtZDBhQ3dnYzNSbGNDd2dhWFJsY21GMGIzSTdYRzRnSUdsbUtIUjVjR1Z2WmlCcGRHVnlSbTRnSVQwZ0oyWjFibU4wYVc5dUp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2FYUmxjbUZpYkdVZ0t5QW5JR2x6SUc1dmRDQnBkR1Z5WVdKc1pTRW5LVHRjYmlBZ0x5OGdabUZ6ZENCallYTmxJR1p2Y2lCaGNuSmhlWE1nZDJsMGFDQmtaV1poZFd4MElHbDBaWEpoZEc5eVhHNGdJR2xtS0dselFYSnlZWGxKZEdWeUtHbDBaWEpHYmlrcFptOXlLR3hsYm1kMGFDQTlJSFJ2VEdWdVozUm9LR2wwWlhKaFlteGxMbXhsYm1kMGFDazdJR3hsYm1kMGFDQStJR2x1WkdWNE95QnBibVJsZUNzcktYdGNiaUFnSUNCbGJuUnlhV1Z6SUQ4Z1ppaGhiazlpYW1WamRDaHpkR1Z3SUQwZ2FYUmxjbUZpYkdWYmFXNWtaWGhkS1Zzd1hTd2djM1JsY0ZzeFhTa2dPaUJtS0dsMFpYSmhZbXhsVzJsdVpHVjRYU2s3WEc0Z0lIMGdaV3h6WlNCbWIzSW9hWFJsY21GMGIzSWdQU0JwZEdWeVJtNHVZMkZzYkNocGRHVnlZV0pzWlNrN0lDRW9jM1JsY0NBOUlHbDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaVHNnS1h0Y2JpQWdJQ0JqWVd4c0tHbDBaWEpoZEc5eUxDQm1MQ0J6ZEdWd0xuWmhiSFZsTENCbGJuUnlhV1Z6S1R0Y2JpQWdmVnh1ZlRzaUxDSXZMeUJtWVd4c1ltRmpheUJtYjNJZ1NVVXhNU0JpZFdkbmVTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5QjNhWFJvSUdsbWNtRnRaU0JoYm1RZ2QybHVaRzkzWEc1MllYSWdkRzlKVDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk4a0xuUnZMV2x2WW1wbFkzUW5LVnh1SUNBc0lHZGxkRTVoYldWeklDQTlJSEpsY1hWcGNtVW9KeTR2SkNjcExtZGxkRTVoYldWelhHNGdJQ3dnZEc5VGRISnBibWNnSUQwZ2UzMHVkRzlUZEhKcGJtYzdYRzVjYm5aaGNpQjNhVzVrYjNkT1lXMWxjeUE5SUhSNWNHVnZaaUIzYVc1a2IzY2dQVDBnSjI5aWFtVmpkQ2NnSmlZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhOY2JpQWdQeUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWgzYVc1a2IzY3BJRG9nVzEwN1hHNWNiblpoY2lCblpYUlhhVzVrYjNkT1lXMWxjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWjJWMFRtRnRaWE1vYVhRcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSEpsZEhWeWJpQjNhVzVrYjNkT1lXMWxjeTV6YkdsalpTZ3BPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVuWlhRZ1BTQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLR2wwS1h0Y2JpQWdhV1lvZDJsdVpHOTNUbUZ0WlhNZ0ppWWdkRzlUZEhKcGJtY3VZMkZzYkNocGRDa2dQVDBnSjF0dlltcGxZM1FnVjJsdVpHOTNYU2NwY21WMGRYSnVJR2RsZEZkcGJtUnZkMDVoYldWektHbDBLVHRjYmlBZ2NtVjBkWEp1SUdkbGRFNWhiV1Z6S0hSdlNVOWlhbVZqZENocGRDa3BPMXh1ZlRzaUxDSjJZWElnSkNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQ2NwWEc0Z0lDd2dZM0psWVhSbFJHVnpZeUE5SUhKbGNYVnBjbVVvSnk0dkpDNXdjbTl3WlhKMGVTMWtaWE5qSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZKQzVrWlhOamNtbHdkRzl5Y3ljcElEOGdablZ1WTNScGIyNG9iMkpxWldOMExDQnJaWGtzSUhaaGJIVmxLWHRjYmlBZ2NtVjBkWEp1SUNRdWMyVjBSR1Z6WXlodlltcGxZM1FzSUd0bGVTd2dZM0psWVhSbFJHVnpZeWd4TENCMllXeDFaU2twTzF4dWZTQTZJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2w3WEc0Z0lHOWlhbVZqZEZ0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUTdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWRzYjJKaGJDY3BMbVJ2WTNWdFpXNTBJQ1ltSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkRHNpTENJdkx5Qm1ZV3hzWW1GamF5Qm1iM0lnYm05dUxXRnljbUY1TFd4cGEyVWdSVk16SUdGdVpDQnViMjR0Wlc1MWJXVnlZV0pzWlNCdmJHUWdWamdnYzNSeWFXNW5jMXh1ZG1GeUlHTnZaaUE5SUhKbGNYVnBjbVVvSnk0dkpDNWpiMlluS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wS0NkNkp5a3VjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VvTUNrZ1B5QlBZbXBsWTNRZ09pQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCamIyWW9hWFFwSUQwOUlDZFRkSEpwYm1jbklEOGdhWFF1YzNCc2FYUW9KeWNwSURvZ1QySnFaV04wS0dsMEtUdGNibjA3SWl3aUx5OGdZMmhsWTJzZ2IyNGdaR1ZtWVhWc2RDQkJjbkpoZVNCcGRHVnlZWFJ2Y2x4dWRtRnlJRWwwWlhKaGRHOXljeUFnUFNCeVpYRjFhWEpsS0NjdUx5UXVhWFJsY21GMGIzSnpKeWxjYmlBZ0xDQkpWRVZTUVZSUFVpQWdJRDBnY21WeGRXbHlaU2duTGk4a0xuZHJjeWNwS0NkcGRHVnlZWFJ2Y2ljcFhHNGdJQ3dnUVhKeVlYbFFjbTkwYnlBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCcGRDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlDaEpkR1Z5WVhSdmNuTXVRWEp5WVhrZ1BUMDlJR2wwSUh4OElFRnljbUY1VUhKdmRHOWJTVlJGVWtGVVQxSmRJRDA5UFNCcGRDazdYRzU5T3lJc0lpOHZJRGN1TWk0eUlFbHpRWEp5WVhrb1lYSm5kVzFsYm5RcFhHNTJZWElnWTI5bUlEMGdjbVZ4ZFdseVpTZ25MaThrTG1OdlppY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCY25KaGVTNXBjMEZ5Y21GNUlIeDhJR1oxYm1OMGFXOXVLR0Z5WnlsN1hHNGdJSEpsZEhWeWJpQmpiMllvWVhKbktTQTlQU0FuUVhKeVlYa25PMXh1ZlRzaUxDSXZMeUJqWVd4c0lITnZiV1YwYUdsdVp5QnZiaUJwZEdWeVlYUnZjaUJ6ZEdWd0lIZHBkR2dnYzJGbVpTQmpiRzl6YVc1bklHOXVJR1Z5Y205eVhHNTJZWElnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUx5UXVZVzR0YjJKcVpXTjBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMFpYSmhkRzl5TENCbWJpd2dkbUZzZFdVc0lHVnVkSEpwWlhNcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhKbGRIVnliaUJsYm5SeWFXVnpJRDhnWm00b1lXNVBZbXBsWTNRb2RtRnNkV1VwV3pCZExDQjJZV3gxWlZzeFhTa2dPaUJtYmloMllXeDFaU2s3WEc0Z0lDOHZJRGN1TkM0MklFbDBaWEpoZEc5eVEyeHZjMlVvYVhSbGNtRjBiM0lzSUdOdmJYQnNaWFJwYjI0cFhHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdkbUZ5SUhKbGRDQTlJR2wwWlhKaGRHOXlXeWR5WlhSMWNtNG5YVHRjYmlBZ0lDQnBaaWh5WlhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2xoYms5aWFtVmpkQ2h5WlhRdVkyRnNiQ2hwZEdWeVlYUnZjaWtwTzF4dUlDQWdJSFJvY205M0lHVTdYRzRnSUgxY2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNRZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk4a0p5bGNiaUFnTENCa1pYTmpjbWx3ZEc5eUlDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2SkM1elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnUFNCN2ZUdGNibHh1THk4Z01qVXVNUzR5TGpFdU1TQWxTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWxXMEJBYVhSbGNtRjBiM0pkS0NsY2JuSmxjWFZwY21Vb0p5NHZKQzVvYVdSbEp5a29TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJSEpsY1hWcGNtVW9KeTR2SkM1M2EzTW5LU2duYVhSbGNtRjBiM0luS1N3Z1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE03SUgwcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRU52Ym5OMGNuVmpkRzl5TENCT1FVMUZMQ0J1WlhoMEtYdGNiaUFnUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbElEMGdKQzVqY21WaGRHVW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXNJSHR1WlhoME9pQmtaWE5qY21sd2RHOXlLREVzSUc1bGVIUXBmU2s3WEc0Z0lITmxkRlJ2VTNSeWFXNW5WR0ZuS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGSUNzZ0p5QkpkR1Z5WVhSdmNpY3BPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdURWxDVWtGU1dTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YkdsaWNtRnllU2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1Wlhod2IzSjBKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzV5WldSbFptbHVaU2NwWEc0Z0lDd2dhR2xrWlNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YUdsa1pTY3BYRzRnSUN3Z2FHRnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVhR0Z6SnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1cGRHVnlZWFJ2Y25NbktWeHVJQ0FzSUNScGRHVnlRM0psWVhSbElDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xtbDBaWEl0WTNKbFlYUmxKeWxjYmlBZ0xDQnpaWFJVYjFOMGNtbHVaMVJoWnlBOUlISmxjWFZwY21Vb0p5NHZKQzV6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeWNwWEc0Z0lDd2daMlYwVUhKdmRHOGdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVFuS1M1blpYUlFjbTkwYjF4dUlDQXNJRWxVUlZKQlZFOVNJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG5kcmN5Y3BLQ2RwZEdWeVlYUnZjaWNwWEc0Z0lDd2dRbFZIUjFrZ0lDQWdJQ0FnSUNBZ1BTQWhLRnRkTG10bGVYTWdKaVlnSjI1bGVIUW5JR2x1SUZ0ZExtdGxlWE1vS1NrZ0x5OGdVMkZtWVhKcElHaGhjeUJpZFdkbmVTQnBkR1Z5WVhSdmNuTWdkeTl2SUdCdVpYaDBZRnh1SUNBc0lFWkdYMGxVUlZKQlZFOVNJQ0FnSUQwZ0owQkFhWFJsY21GMGIzSW5YRzRnSUN3Z1MwVlpVeUFnSUNBZ0lDQWdJQ0FnUFNBbmEyVjVjeWRjYmlBZ0xDQldRVXhWUlZNZ0lDQWdJQ0FnSUNBOUlDZDJZV3gxWlhNbk8xeHVYRzUyWVhJZ2NtVjBkWEp1VkdocGN5QTlJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUIwYUdsek95QjlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0VKaGMyVXNJRTVCVFVVc0lFTnZibk4wY25WamRHOXlMQ0J1WlhoMExDQkVSVVpCVlV4VUxDQkpVMTlUUlZRc0lFWlBVa05GUkNsN1hHNGdJQ1JwZEdWeVEzSmxZWFJsS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGTENCdVpYaDBLVHRjYmlBZ2RtRnlJR2RsZEUxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0d0cGJtUXBlMXh1SUNBZ0lHbG1LQ0ZDVlVkSFdTQW1KaUJyYVc1a0lHbHVJSEJ5YjNSdktYSmxkSFZ5YmlCd2NtOTBiMXRyYVc1a1hUdGNiaUFnSUNCemQybDBZMmdvYTJsdVpDbDdYRzRnSUNBZ0lDQmpZWE5sSUV0RldWTTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQnJaWGx6S0NsN0lISmxkSFZ5YmlCdVpYY2dRMjl1YzNSeWRXTjBiM0lvZEdocGN5d2dhMmx1WkNrN0lIMDdYRzRnSUNBZ0lDQmpZWE5sSUZaQlRGVkZVem9nY21WMGRYSnVJR1oxYm1OMGFXOXVJSFpoYkhWbGN5Z3BleUJ5WlhSMWNtNGdibVYzSUVOdmJuTjBjblZqZEc5eUtIUm9hWE1zSUd0cGJtUXBPeUI5TzF4dUlDQWdJSDBnY21WMGRYSnVJR1oxYm1OMGFXOXVJR1Z1ZEhKcFpYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdmVHRjYmlBZ2RtRnlJRlJCUnlBZ0lDQWdJQ0FnUFNCT1FVMUZJQ3NnSnlCSmRHVnlZWFJ2Y2lkY2JpQWdJQ0FzSUVSRlJsOVdRVXhWUlZNZ1BTQkVSVVpCVlV4VUlEMDlJRlpCVEZWRlUxeHVJQ0FnSUN3Z1ZrRk1WVVZUWDBKVlJ5QTlJR1poYkhObFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRbUZ6WlM1d2NtOTBiM1I1Y0dWY2JpQWdJQ0FzSUNSdVlYUnBkbVVnSUNBZ1BTQndjbTkwYjF0SlZFVlNRVlJQVWwwZ2ZId2djSEp2ZEc5YlJrWmZTVlJGVWtGVVQxSmRJSHg4SUVSRlJrRlZURlFnSmlZZ2NISnZkRzliUkVWR1FWVk1WRjFjYmlBZ0lDQXNJQ1JrWldaaGRXeDBJQ0FnUFNBa2JtRjBhWFpsSUh4OElHZGxkRTFsZEdodlpDaEVSVVpCVlV4VUtWeHVJQ0FnSUN3Z2JXVjBhRzlrY3l3Z2EyVjVPMXh1SUNBdkx5QkdhWGdnYm1GMGFYWmxYRzRnSUdsbUtDUnVZWFJwZG1VcGUxeHVJQ0FnSUhaaGNpQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJR2RsZEZCeWIzUnZLQ1JrWldaaGRXeDBMbU5oYkd3b2JtVjNJRUpoYzJVcEtUdGNiaUFnSUNBdkx5QlRaWFFnUUVCMGIxTjBjbWx1WjFSaFp5QjBieUJ1WVhScGRtVWdhWFJsY21GMGIzSnpYRzRnSUNBZ2MyVjBWRzlUZEhKcGJtZFVZV2NvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUZSQlJ5d2dkSEoxWlNrN1hHNGdJQ0FnTHk4Z1JrWWdabWw0WEc0Z0lDQWdhV1lvSVV4SlFsSkJVbGtnSmlZZ2FHRnpLSEJ5YjNSdkxDQkdSbDlKVkVWU1FWUlBVaWtwYUdsa1pTaEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2dTVlJGVWtGVVQxSXNJSEpsZEhWeWJsUm9hWE1wTzF4dUlDQWdJQzh2SUdacGVDQkJjbkpoZVNON2RtRnNkV1Z6TENCQVFHbDBaWEpoZEc5eWZTNXVZVzFsSUdsdUlGWTRJQzhnUmtaY2JpQWdJQ0JwWmloRVJVWmZWa0ZNVlVWVElDWW1JQ1J1WVhScGRtVXVibUZ0WlNBaFBUMGdWa0ZNVlVWVEtYdGNiaUFnSUNBZ0lGWkJURlZGVTE5Q1ZVY2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0pHUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQjJZV3gxWlhNb0tYc2djbVYwZFhKdUlDUnVZWFJwZG1VdVkyRnNiQ2gwYUdsektUc2dmVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdMeThnUkdWbWFXNWxJR2wwWlhKaGRHOXlYRzRnSUdsbUtDZ2hURWxDVWtGU1dTQjhmQ0JHVDFKRFJVUXBJQ1ltSUNoQ1ZVZEhXU0I4ZkNCV1FVeFZSVk5mUWxWSElIeDhJQ0Z3Y205MGIxdEpWRVZTUVZSUFVsMHBLWHRjYmlBZ0lDQm9hV1JsS0hCeWIzUnZMQ0JKVkVWU1FWUlBVaXdnSkdSbFptRjFiSFFwTzF4dUlDQjlYRzRnSUM4dklGQnNkV2NnWm05eUlHeHBZbkpoY25sY2JpQWdTWFJsY21GMGIzSnpXMDVCVFVWZElEMGdKR1JsWm1GMWJIUTdYRzRnSUVsMFpYSmhkRzl5YzF0VVFVZGRJQ0E5SUhKbGRIVnlibFJvYVhNN1hHNGdJR2xtS0VSRlJrRlZURlFwZTF4dUlDQWdJRzFsZEdodlpITWdQU0I3WEc0Z0lDQWdJQ0IyWVd4MVpYTTZJQ0JFUlVaZlZrRk1WVVZUSUNBL0lDUmtaV1poZFd4MElEb2daMlYwVFdWMGFHOWtLRlpCVEZWRlV5a3NYRzRnSUNBZ0lDQnJaWGx6T2lBZ0lDQkpVMTlUUlZRZ0lDQWdJQ0EvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tFdEZXVk1wTEZ4dUlDQWdJQ0FnWlc1MGNtbGxjem9nSVVSRlJsOVdRVXhWUlZNZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2duWlc1MGNtbGxjeWNwWEc0Z0lDQWdmVHRjYmlBZ0lDQnBaaWhHVDFKRFJVUXBabTl5S0d0bGVTQnBiaUJ0WlhSb2IyUnpLWHRjYmlBZ0lDQWdJR2xtS0NFb2EyVjVJR2x1SUhCeWIzUnZLU2x5WldSbFptbHVaU2h3Y205MGJ5d2dhMlY1TENCdFpYUm9iMlJ6VzJ0bGVWMHBPMXh1SUNBZ0lIMGdaV3h6WlNBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJQ2hDVlVkSFdTQjhmQ0JXUVV4VlJWTmZRbFZIS1N3Z1RrRk5SU3dnYldWMGFHOWtjeWs3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzFsZEdodlpITTdYRzU5T3lJc0luWmhjaUJKVkVWU1FWUlBVaUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1ZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQlRRVVpGWDBOTVQxTkpUa2NnUFNCbVlXeHpaVHRjYmx4dWRISjVJSHRjYmlBZ2RtRnlJSEpwZEdWeUlEMGdXemRkVzBsVVJWSkJWRTlTWFNncE8xeHVJQ0J5YVhSbGNsc25jbVYwZFhKdUoxMGdQU0JtZFc1amRHbHZiaWdwZXlCVFFVWkZYME5NVDFOSlRrY2dQU0IwY25WbE95QjlPMXh1SUNCQmNuSmhlUzVtY205dEtISnBkR1Z5TENCbWRXNWpkR2x2YmlncGV5QjBhSEp2ZHlBeU95QjlLVHRjYm4wZ1kyRjBZMmdvWlNsN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobGVHVmpMQ0J6YTJsd1EyeHZjMmx1WnlsN1hHNGdJR2xtS0NGemEybHdRMnh2YzJsdVp5QW1KaUFoVTBGR1JWOURURTlUU1U1SEtYSmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2RtRnlJSE5oWm1VZ1BTQm1ZV3h6WlR0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0IyWVhJZ1lYSnlJQ0E5SUZzM1hWeHVJQ0FnSUNBZ0xDQnBkR1Z5SUQwZ1lYSnlXMGxVUlZKQlZFOVNYU2dwTzF4dUlDQWdJR2wwWlhJdWJtVjRkQ0E5SUdaMWJtTjBhVzl1S0NsN0lITmhabVVnUFNCMGNuVmxPeUI5TzF4dUlDQWdJR0Z5Y2x0SlZFVlNRVlJQVWwwZ1BTQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdhWFJsY2pzZ2ZUdGNiaUFnSUNCbGVHVmpLR0Z5Y2lrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnY21WMGRYSnVJSE5oWm1VN1hHNTlPeUlzSW5aaGNpQWtUMkpxWldOMElEMGdUMkpxWldOME8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUdOeVpXRjBaVG9nSUNBZ0lDUlBZbXBsWTNRdVkzSmxZWFJsTEZ4dUlDQm5aWFJRY205MGJ6b2dJQ0FrVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bUxGeHVJQ0JwYzBWdWRXMDZJQ0FnSUNCN2ZTNXdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU3hjYmlBZ1oyVjBSR1Z6WXpvZ0lDQWdKRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJc1hHNGdJSE5sZEVSbGMyTTZJQ0FnSUNSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa3NYRzRnSUhObGRFUmxjMk56T2lBZ0lDUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkR2xsY3l4Y2JpQWdaMlYwUzJWNWN6b2dJQ0FnSkU5aWFtVmpkQzVyWlhsekxGeHVJQ0JuWlhST1lXMWxjem9nSUNBa1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNc1hHNGdJR2RsZEZONWJXSnZiSE02SUNSUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ekxGeHVJQ0JsWVdOb09pQWdJQ0FnSUNCYlhTNW1iM0pGWVdOb1hHNTlPeUlzSW5aaGNpQWtJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRbktWeHVJQ0FzSUhSdlNVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZKQzUwYnkxcGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z1pXd3BlMXh1SUNCMllYSWdUeUFnSUNBZ0lEMGdkRzlKVDJKcVpXTjBLRzlpYW1WamRDbGNiaUFnSUNBc0lHdGxlWE1nSUNBOUlDUXVaMlYwUzJWNWN5aFBLVnh1SUNBZ0lDd2diR1Z1WjNSb0lEMGdhMlY1Y3k1c1pXNW5kR2hjYmlBZ0lDQXNJR2x1WkdWNElDQTlJREJjYmlBZ0lDQXNJR3RsZVR0Y2JpQWdkMmhwYkdVb2JHVnVaM1JvSUQ0Z2FXNWtaWGdwYVdZb1QxdHJaWGtnUFNCclpYbHpXMmx1WkdWNEt5dGRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlHdGxlVHRjYm4wN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjBjblZsT3lJc0luWmhjaUJuYkc5aVlXd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVaMnh2WW1Gc0p5bGNiaUFnTENCdFlXTnliM1JoYzJzZ1BTQnlaWEYxYVhKbEtDY3VMeVF1ZEdGemF5Y3BMbk5sZEZ4dUlDQXNJRTlpYzJWeWRtVnlJQ0E5SUdkc2IySmhiQzVOZFhSaGRHbHZiazlpYzJWeWRtVnlJSHg4SUdkc2IySmhiQzVYWldKTGFYUk5kWFJoZEdsdmJrOWljMlZ5ZG1WeVhHNGdJQ3dnY0hKdlkyVnpjeUFnSUQwZ1oyeHZZbUZzTG5CeWIyTmxjM05jYmlBZ0xDQlFjbTl0YVhObElDQWdQU0JuYkc5aVlXd3VVSEp2YldselpWeHVJQ0FzSUdselRtOWtaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVqYjJZbktTaHdjbTlqWlhOektTQTlQU0FuY0hKdlkyVnpjeWRjYmlBZ0xDQm9aV0ZrTENCc1lYTjBMQ0J1YjNScFpuazdYRzVjYm5aaGNpQm1iSFZ6YUNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQndZWEpsYm5Rc0lHUnZiV0ZwYml3Z1ptNDdYRzRnSUdsbUtHbHpUbTlrWlNBbUppQW9jR0Z5Wlc1MElEMGdjSEp2WTJWemN5NWtiMjFoYVc0cEtYdGNiaUFnSUNCd2NtOWpaWE56TG1SdmJXRnBiaUE5SUc1MWJHdzdYRzRnSUNBZ2NHRnlaVzUwTG1WNGFYUW9LVHRjYmlBZ2ZWeHVJQ0IzYUdsc1pTaG9aV0ZrS1h0Y2JpQWdJQ0JrYjIxaGFXNGdQU0JvWldGa0xtUnZiV0ZwYmp0Y2JpQWdJQ0JtYmlBZ0lDQWdQU0JvWldGa0xtWnVPMXh1SUNBZ0lHbG1LR1J2YldGcGJpbGtiMjFoYVc0dVpXNTBaWElvS1R0Y2JpQWdJQ0JtYmlncE95QXZMeUE4TFNCamRYSnlaVzUwYkhrZ2QyVWdkWE5sSUdsMElHOXViSGtnWm05eUlGQnliMjFwYzJVZ0xTQjBjbmtnTHlCallYUmphQ0J1YjNRZ2NtVnhkV2x5WldSY2JpQWdJQ0JwWmloa2IyMWhhVzRwWkc5dFlXbHVMbVY0YVhRb0tUdGNiaUFnSUNCb1pXRmtJRDBnYUdWaFpDNXVaWGgwTzF4dUlDQjlJR3hoYzNRZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUdsbUtIQmhjbVZ1ZENsd1lYSmxiblF1Wlc1MFpYSW9LVHRjYm4wN1hHNWNiaTh2SUU1dlpHVXVhbk5jYm1sbUtHbHpUbTlrWlNsN1hHNGdJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aG1iSFZ6YUNrN1hHNGdJSDA3WEc0dkx5QmljbTkzYzJWeWN5QjNhWFJvSUUxMWRHRjBhVzl1VDJKelpYSjJaWEpjYm4wZ1pXeHpaU0JwWmloUFluTmxjblpsY2lsN1hHNGdJSFpoY2lCMGIyZG5iR1VnUFNBeFhHNGdJQ0FnTENCdWIyUmxJQ0FnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2duSnlrN1hHNGdJRzVsZHlCUFluTmxjblpsY2lobWJIVnphQ2t1YjJKelpYSjJaU2h1YjJSbExDQjdZMmhoY21GamRHVnlSR0YwWVRvZ2RISjFaWDBwT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFc1bGQxeHVJQ0J1YjNScFpua2dQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJRzV2WkdVdVpHRjBZU0E5SUhSdloyZHNaU0E5SUMxMGIyZG5iR1U3WEc0Z0lIMDdYRzR2THlCbGJuWnBjbTl1YldWdWRITWdkMmwwYUNCdFlYbGlaU0J1YjI0dFkyOXRjR3hsZEdWc2VTQmpiM0p5WldOMExDQmlkWFFnWlhocGMzUmxiblFnVUhKdmJXbHpaVnh1ZlNCbGJITmxJR2xtS0ZCeWIyMXBjMlVnSmlZZ1VISnZiV2x6WlM1eVpYTnZiSFpsS1h0Y2JpQWdibTkwYVdaNUlEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tTNTBhR1Z1S0dac2RYTm9LVHRjYmlBZ2ZUdGNiaTh2SUdadmNpQnZkR2hsY2lCbGJuWnBjbTl1YldWdWRITWdMU0J0WVdOeWIzUmhjMnNnWW1GelpXUWdiMjQ2WEc0dkx5QXRJSE5sZEVsdGJXVmthV0YwWlZ4dUx5OGdMU0JOWlhOellXZGxRMmhoYm01bGJGeHVMeThnTFNCM2FXNWtiM2N1Y0c5emRFMWxjM05oWjF4dUx5OGdMU0J2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlZjYmk4dklDMGdjMlYwVkdsdFpXOTFkRnh1ZlNCbGJITmxJSHRjYmlBZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBdkx5QnpkSEpoYm1kbElFbEZJQ3NnZDJWaWNHRmpheUJrWlhZZ2MyVnlkbVZ5SUdKMVp5QXRJSFZ6WlNBdVkyRnNiQ2huYkc5aVlXd3BYRzRnSUNBZ2JXRmpjbTkwWVhOckxtTmhiR3dvWjJ4dlltRnNMQ0JtYkhWemFDazdYRzRnSUgwN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWVhOaGNDaG1iaWw3WEc0Z0lIWmhjaUIwWVhOcklEMGdlMlp1T2lCbWJpd2dibVY0ZERvZ2RXNWtaV1pwYm1Wa0xDQmtiMjFoYVc0NklHbHpUbTlrWlNBbUppQndjbTlqWlhOekxtUnZiV0ZwYm4wN1hHNGdJR2xtS0d4aGMzUXBiR0Z6ZEM1dVpYaDBJRDBnZEdGemF6dGNiaUFnYVdZb0lXaGxZV1FwZTF4dUlDQWdJR2hsWVdRZ1BTQjBZWE5yTzF4dUlDQWdJRzV2ZEdsbWVTZ3BPMXh1SUNCOUlHeGhjM1FnUFNCMFlYTnJPMXh1ZlRzaUxDSXZMeUF4T1M0eExqSXVNU0JQWW1wbFkzUXVZWE56YVdkdUtIUmhjbWRsZEN3Z2MyOTFjbU5sTENBdUxpNHBYRzUyWVhJZ0pDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVFuS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk4a0xuUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1NVOWlhbVZqZENBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YVc5aWFtVmpkQ2NwTzF4dVhHNHZMeUJ6YUc5MWJHUWdkMjl5YXlCM2FYUm9JSE41YldKdmJITWdZVzVrSUhOb2IzVnNaQ0JvWVhabElHUmxkR1Z5YldsdWFYTjBhV01nY0hKdmNHVnlkSGtnYjNKa1pYSWdLRlk0SUdKMVp5bGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaThrTG1aaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUdFZ1BTQlBZbXBsWTNRdVlYTnphV2R1WEc0Z0lDQWdMQ0JCSUQwZ2UzMWNiaUFnSUNBc0lFSWdQU0I3ZlZ4dUlDQWdJQ3dnVXlBOUlGTjViV0p2YkNncFhHNGdJQ0FnTENCTElEMGdKMkZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wSnp0Y2JpQWdRVnRUWFNBOUlEYzdYRzRnSUVzdWMzQnNhWFFvSnljcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2F5bDdJRUpiYTEwZ1BTQnJPeUI5S1R0Y2JpQWdjbVYwZFhKdUlHRW9lMzBzSUVFcFcxTmRJQ0U5SURjZ2ZId2dUMkpxWldOMExtdGxlWE1vWVNoN2ZTd2dRaWtwTG1wdmFXNG9KeWNwSUNFOUlFczdYRzU5S1NBL0lHWjFibU4wYVc5dUlHRnpjMmxuYmloMFlYSm5aWFFzSUhOdmRYSmpaU2w3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdkbUZ5SUZRZ0lDQWdJRDBnZEc5UFltcGxZM1FvZEdGeVoyVjBLVnh1SUNBZ0lDd2dKQ1FnSUNBZ1BTQmhjbWQxYldWdWRITmNiaUFnSUNBc0lDUWtiR1Z1SUQwZ0pDUXViR1Z1WjNSb1hHNGdJQ0FnTENCcGJtUmxlQ0E5SURGY2JpQWdJQ0FzSUdkbGRFdGxlWE1nSUNBZ1BTQWtMbWRsZEV0bGVYTmNiaUFnSUNBc0lHZGxkRk41YldKdmJITWdQU0FrTG1kbGRGTjViV0p2YkhOY2JpQWdJQ0FzSUdselJXNTFiU0FnSUNBZ1BTQWtMbWx6Ulc1MWJUdGNiaUFnZDJocGJHVW9KQ1JzWlc0Z1BpQnBibVJsZUNsN1hHNGdJQ0FnZG1GeUlGTWdJQ0FnSUNBOUlFbFBZbXBsWTNRb0pDUmJhVzVrWlhncksxMHBYRzRnSUNBZ0lDQXNJR3RsZVhNZ0lDQTlJR2RsZEZONWJXSnZiSE1nUHlCblpYUkxaWGx6S0ZNcExtTnZibU5oZENoblpYUlRlVzFpYjJ4ektGTXBLU0E2SUdkbGRFdGxlWE1vVXlsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2EyVjVjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2dhaUFnSUNBZ0lEMGdNRnh1SUNBZ0lDQWdMQ0JyWlhrN1hHNGdJQ0FnZDJocGJHVW9iR1Z1WjNSb0lENGdhaWxwWmlocGMwVnVkVzB1WTJGc2JDaFRMQ0JyWlhrZ1BTQnJaWGx6VzJvcksxMHBLVlJiYTJWNVhTQTlJRk5iYTJWNVhUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z1ZEdGNibjBnT2lCUFltcGxZM1F1WVhOemFXZHVPeUlzSWk4dklHMXZjM1FnVDJKcVpXTjBJRzFsZEdodlpITWdZbmtnUlZNMklITm9iM1ZzWkNCaFkyTmxjSFFnY0hKcGJXbDBhWFpsYzF4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1THlRdVpYaHdiM0owSnlsY2JpQWdMQ0JqYjNKbElDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xtTnZjbVVuS1Z4dUlDQXNJR1poYVd4eklDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdVptRnBiSE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpMQ0JsZUdWaktYdGNiaUFnZG1GeUlHWnVJQ0E5SUNoamIzSmxMazlpYW1WamRDQjhmQ0I3ZlNsYlMwVlpYU0I4ZkNCUFltcGxZM1JiUzBWWlhWeHVJQ0FnSUN3Z1pYaHdJRDBnZTMwN1hHNGdJR1Y0Y0Z0TFJWbGRJRDBnWlhobFl5aG1iaWs3WEc0Z0lDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nWm1GcGJITW9ablZ1WTNScGIyNG9LWHNnWm00b01TazdJSDBwTENBblQySnFaV04wSnl3Z1pYaHdLVHRjYm4wN0lpd2lkbUZ5SUhKbFpHVm1hVzVsSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbkpsWkdWbWFXNWxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnYzNKaktYdGNiaUFnWm05eUtIWmhjaUJyWlhrZ2FXNGdjM0pqS1hKbFpHVm1hVzVsS0hSaGNtZGxkQ3dnYTJWNUxDQnpjbU5iYTJWNVhTazdYRzRnSUhKbGRIVnliaUIwWVhKblpYUTdYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWhwWkdVbktUc2lMQ0l2THlCWGIzSnJjeUIzYVhSb0lGOWZjSEp2ZEc5Zlh5QnZibXg1TGlCUGJHUWdkamdnWTJGdUozUWdkMjl5YXlCM2FYUm9JRzUxYkd3Z2NISnZkRzhnYjJKcVpXTjBjeTVjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUc1dkxYQnliM1J2SUNvdlhHNTJZWElnWjJWMFJHVnpZeUFnUFNCeVpYRjFhWEpsS0NjdUx5UW5LUzVuWlhSRVpYTmpYRzRnSUN3Z2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YVhNdGIySnFaV04wSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNWhiaTF2WW1wbFkzUW5LVHRjYm5aaGNpQmphR1ZqYXlBOUlHWjFibU4wYVc5dUtFOHNJSEJ5YjNSdktYdGNiaUFnWVc1UFltcGxZM1FvVHlrN1hHNGdJR2xtS0NGcGMwOWlhbVZqZENod2NtOTBieWtnSmlZZ2NISnZkRzhnSVQwOUlHNTFiR3dwZEdoeWIzY2dWSGx3WlVWeWNtOXlLSEJ5YjNSdklDc2dYQ0k2SUdOaGJpZDBJSE5sZENCaGN5QndjbTkwYjNSNWNHVWhYQ0lwTzF4dWZUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdlMXh1SUNCelpYUTZJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlCOGZDQW9KMTlmY0hKdmRHOWZYeWNnYVc0Z2UzMGdQeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bFhHNGdJQ0FnWm5WdVkzUnBiMjRvZEdWemRDd2dZblZuWjNrc0lITmxkQ2w3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnpaWFFnUFNCeVpYRjFhWEpsS0NjdUx5UXVZM1I0Snlrb1JuVnVZM1JwYjI0dVkyRnNiQ3dnWjJWMFJHVnpZeWhQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMQ0FuWDE5d2NtOTBiMTlmSnlrdWMyVjBMQ0F5S1R0Y2JpQWdJQ0FnSUNBZ2MyVjBLSFJsYzNRc0lGdGRLVHRjYmlBZ0lDQWdJQ0FnWW5Wbloza2dQU0FoS0hSbGMzUWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTazdYRzRnSUNBZ0lDQjlJR05oZEdOb0tHVXBleUJpZFdkbmVTQTlJSFJ5ZFdVN0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCelpYUlFjbTkwYjNSNWNHVlBaaWhQTENCd2NtOTBieWw3WEc0Z0lDQWdJQ0FnSUdOb1pXTnJLRThzSUhCeWIzUnZLVHRjYmlBZ0lDQWdJQ0FnYVdZb1luVm5aM2twVHk1ZlgzQnliM1J2WDE4Z1BTQndjbTkwYnp0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0J6WlhRb1R5d2djSEp2ZEc4cE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1R6dGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTaDdmU3dnWm1Gc2MyVXBJRG9nZFc1a1pXWnBibVZrS1N4Y2JpQWdZMmhsWTJzNklHTm9aV05yWEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJqYjNKbElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVqYjNKbEp5bGNiaUFnTENBa0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkNjcFhHNGdJQ3dnUkVWVFExSkpVRlJQVWxNZ1BTQnlaWEYxYVhKbEtDY3VMeVF1WkdWelkzSnBjSFJ2Y25NbktWeHVJQ0FzSUZOUVJVTkpSVk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG5kcmN5Y3BLQ2R6Y0dWamFXVnpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpLWHRjYmlBZ2RtRnlJRU1nUFNCamIzSmxXMHRGV1YwN1hHNGdJR2xtS0VSRlUwTlNTVkJVVDFKVElDWW1JRU1nSmlZZ0lVTmJVMUJGUTBsRlUxMHBKQzV6WlhSRVpYTmpLRU1zSUZOUVJVTkpSVk1zSUh0Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2RHaHBjenNnZlZ4dUlDQjlLVHRjYm4wN0lpd2lkbUZ5SUdSbFppQTlJSEpsY1hWcGNtVW9KeTR2SkNjcExuTmxkRVJsYzJOY2JpQWdMQ0JvWVhNZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YUdGekp5bGNiaUFnTENCVVFVY2dQU0J5WlhGMWFYSmxLQ2N1THlRdWQydHpKeWtvSjNSdlUzUnlhVzVuVkdGbkp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRc0lIUmhaeXdnYzNSaGRDbDdYRzRnSUdsbUtHbDBJQ1ltSUNGb1lYTW9hWFFnUFNCemRHRjBJRDhnYVhRZ09pQnBkQzV3Y205MGIzUjVjR1VzSUZSQlJ5a3BaR1ZtS0dsMExDQlVRVWNzSUh0amIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc0lIWmhiSFZsT2lCMFlXZDlLVHRjYm4wN0lpd2lkbUZ5SUdkc2IySmhiQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNW5iRzlpWVd3bktWeHVJQ0FzSUZOSVFWSkZSQ0E5SUNkZlgyTnZjbVV0YW5OZmMyaGhjbVZrWDE4blhHNGdJQ3dnYzNSdmNtVWdJRDBnWjJ4dlltRnNXMU5JUVZKRlJGMGdmSHdnS0dkc2IySmhiRnRUU0VGU1JVUmRJRDBnZTMwcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQnlaWFIxY200Z2MzUnZjbVZiYTJWNVhTQjhmQ0FvYzNSdmNtVmJhMlY1WFNBOUlIdDlLVHRjYm4wN0lpd2lMeThnTnk0ekxqSXdJRk53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaWhQTENCa1pXWmhkV3gwUTI5dWMzUnlkV04wYjNJcFhHNTJZWElnWVc1UFltcGxZM1FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbUZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duTGk4a0xtRXRablZ1WTNScGIyNG5LVnh1SUNBc0lGTlFSVU5KUlZNZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1M2EzTW5LU2duYzNCbFkybGxjeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloUExDQkVLWHRjYmlBZ2RtRnlJRU1nUFNCaGJrOWlhbVZqZENoUEtTNWpiMjV6ZEhKMVkzUnZjaXdnVXp0Y2JpQWdjbVYwZFhKdUlFTWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQW9VeUE5SUdGdVQySnFaV04wS0VNcFcxTlFSVU5KUlZOZEtTQTlQU0IxYm1SbFptbHVaV1FnUHlCRUlEb2dZVVoxYm1OMGFXOXVLRk1wTzF4dWZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCRGIyNXpkSEoxWTNSdmNpd2dibUZ0WlNsN1hHNGdJR2xtS0NFb2FYUWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrcGRHaHliM2NnVkhsd1pVVnljbTl5S0c1aGJXVWdLeUJjSWpvZ2RYTmxJSFJvWlNBbmJtVjNKeUJ2Y0dWeVlYUnZjaUZjSWlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN0lpd2lkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZKQzUwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0JrWldacGJtVmtJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVaR1ZtYVc1bFpDY3BPMXh1THk4Z2RISjFaU0FnTFQ0Z1UzUnlhVzVuSTJGMFhHNHZMeUJtWVd4elpTQXRQaUJUZEhKcGJtY2pZMjlrWlZCdmFXNTBRWFJjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvVkU5ZlUxUlNTVTVIS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtIUm9ZWFFzSUhCdmN5bDdYRzRnSUNBZ2RtRnlJSE1nUFNCVGRISnBibWNvWkdWbWFXNWxaQ2gwYUdGMEtTbGNiaUFnSUNBZ0lDd2dhU0E5SUhSdlNXNTBaV2RsY2lod2IzTXBYRzRnSUNBZ0lDQXNJR3dnUFNCekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCaExDQmlPMXh1SUNBZ0lHbG1LR2tnUENBd0lIeDhJR2tnUGowZ2JDbHlaWFIxY200Z1ZFOWZVMVJTU1U1SElEOGdKeWNnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnWVNBOUlITXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZU0E4SURCNFpEZ3dNQ0I4ZkNCaElENGdNSGhrWW1abUlIeDhJR2tnS3lBeElEMDlQU0JzSUh4OElDaGlJRDBnY3k1amFHRnlRMjlrWlVGMEtHa2dLeUF4S1NrZ1BDQXdlR1JqTURBZ2ZId2dZaUErSURCNFpHWm1abHh1SUNBZ0lDQWdQeUJVVDE5VFZGSkpUa2NnUHlCekxtTm9ZWEpCZENocEtTQTZJR0ZjYmlBZ0lDQWdJRG9nVkU5ZlUxUlNTVTVISUQ4Z2N5NXpiR2xqWlNocExDQnBJQ3NnTWlrZ09pQW9ZU0F0SURCNFpEZ3dNQ0E4UENBeE1Da2dLeUFvWWlBdElEQjRaR013TUNrZ0t5QXdlREV3TURBd08xeHVJQ0I5TzF4dWZUc2lMQ0oyWVhJZ1kzUjRJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1OMGVDY3BYRzRnSUN3Z2FXNTJiMnRsSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1sdWRtOXJaU2NwWEc0Z0lDd2dhSFJ0YkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xtaDBiV3duS1Z4dUlDQXNJR05sYkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNWtiMjB0WTNKbFlYUmxKeWxjYmlBZ0xDQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdVoyeHZZbUZzSnlsY2JpQWdMQ0J3Y205alpYTnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1Y0hKdlkyVnpjMXh1SUNBc0lITmxkRlJoYzJzZ0lDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNXpaWFJKYlcxbFpHbGhkR1ZjYmlBZ0xDQmpiR1ZoY2xSaGMyc2dJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VZMnhsWVhKSmJXMWxaR2xoZEdWY2JpQWdMQ0JOWlhOellXZGxRMmhoYm01bGJDQWdJQ0FnUFNCbmJHOWlZV3d1VFdWemMyRm5aVU5vWVc1dVpXeGNiaUFnTENCamIzVnVkR1Z5SUNBZ0lDQWdJQ0FnSUNBZ1BTQXdYRzRnSUN3Z2NYVmxkV1VnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdlMzFjYmlBZ0xDQlBUbEpGUVVSWlUxUkJWRVZEU0VGT1IwVWdQU0FuYjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsSjF4dUlDQXNJR1JsWm1WeUxDQmphR0Z1Ym1Wc0xDQndiM0owTzF4dWRtRnlJSEoxYmlBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQnBaQ0E5SUN0MGFHbHpPMXh1SUNCcFppaHhkV1YxWlM1b1lYTlBkMjVRY205d1pYSjBlU2hwWkNrcGUxeHVJQ0FnSUhaaGNpQm1iaUE5SUhGMVpYVmxXMmxrWFR0Y2JpQWdJQ0JrWld4bGRHVWdjWFZsZFdWYmFXUmRPMXh1SUNBZ0lHWnVLQ2s3WEc0Z0lIMWNibjA3WEc1MllYSWdiR2x6ZEc1bGNpQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtYdGNiaUFnY25WdUxtTmhiR3dvWlhabGJuUXVaR0YwWVNrN1hHNTlPMXh1THk4Z1RtOWtaUzVxY3lBd0xqa3JJQ1lnU1VVeE1Dc2dhR0Z6SUhObGRFbHRiV1ZrYVdGMFpTd2diM1JvWlhKM2FYTmxPbHh1YVdZb0lYTmxkRlJoYzJzZ2ZId2dJV05zWldGeVZHRnpheWw3WEc0Z0lITmxkRlJoYzJzZ1BTQm1kVzVqZEdsdmJpQnpaWFJKYlcxbFpHbGhkR1VvWm00cGUxeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ1cxMHNJR2tnUFNBeE8xeHVJQ0FnSUhkb2FXeGxLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUJwS1dGeVozTXVjSFZ6YUNoaGNtZDFiV1Z1ZEhOYmFTc3JYU2s3WEc0Z0lDQWdjWFZsZFdWYkt5dGpiM1Z1ZEdWeVhTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0JwYm5admEyVW9kSGx3Wlc5bUlHWnVJRDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1iaUE2SUVaMWJtTjBhVzl1S0dadUtTd2dZWEpuY3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JrWldabGNpaGpiM1Z1ZEdWeUtUdGNiaUFnSUNCeVpYUjFjbTRnWTI5MWJuUmxjanRjYmlBZ2ZUdGNiaUFnWTJ4bFlYSlVZWE5ySUQwZ1puVnVZM1JwYjI0Z1kyeGxZWEpKYlcxbFpHbGhkR1VvYVdRcGUxeHVJQ0FnSUdSbGJHVjBaU0J4ZFdWMVpWdHBaRjA3WEc0Z0lIMDdYRzRnSUM4dklFNXZaR1V1YW5NZ01DNDRMVnh1SUNCcFppaHlaWEYxYVhKbEtDY3VMeVF1WTI5bUp5a29jSEp2WTJWemN5a2dQVDBnSjNCeWIyTmxjM01uS1h0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTNSNEtISjFiaXdnYVdRc0lERXBLVHRjYmlBZ0lDQjlPMXh1SUNBdkx5QkNjbTkzYzJWeWN5QjNhWFJvSUUxbGMzTmhaMlZEYUdGdWJtVnNMQ0JwYm1Oc2RXUmxjeUJYWldKWGIzSnJaWEp6WEc0Z0lIMGdaV3h6WlNCcFppaE5aWE56WVdkbFEyaGhibTVsYkNsN1hHNGdJQ0FnWTJoaGJtNWxiQ0E5SUc1bGR5Qk5aWE56WVdkbFEyaGhibTVsYkR0Y2JpQWdJQ0J3YjNKMElDQWdJRDBnWTJoaGJtNWxiQzV3YjNKME1qdGNiaUFnSUNCamFHRnVibVZzTG5CdmNuUXhMbTl1YldWemMyRm5aU0E5SUd4cGMzUnVaWEk3WEc0Z0lDQWdaR1ZtWlhJZ1BTQmpkSGdvY0c5eWRDNXdiM04wVFdWemMyRm5aU3dnY0c5eWRDd2dNU2s3WEc0Z0lDOHZJRUp5YjNkelpYSnpJSGRwZEdnZ2NHOXpkRTFsYzNOaFoyVXNJSE5yYVhBZ1YyVmlWMjl5YTJWeWMxeHVJQ0F2THlCSlJUZ2dhR0Z6SUhCdmMzUk5aWE56WVdkbExDQmlkWFFnYVhRbmN5QnplVzVqSUNZZ2RIbHdaVzltSUdsMGN5QndiM04wVFdWemMyRm5aU0JwY3lBbmIySnFaV04wSjF4dUlDQjlJR1ZzYzJVZ2FXWW9aMnh2WW1Gc0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ0ppWWdkSGx3Wlc5bUlIQnZjM1JOWlhOellXZGxJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdJV2RzYjJKaGJDNXBiWEJ2Y25SVFkzSnBjSFJ6S1h0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUdkc2IySmhiQzV3YjNOMFRXVnpjMkZuWlNocFpDQXJJQ2NuTENBbktpY3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1oyeHZZbUZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxbGMzTmhaMlVuTENCc2FYTjBibVZ5TENCbVlXeHpaU2s3WEc0Z0lDOHZJRWxGT0MxY2JpQWdmU0JsYkhObElHbG1LRTlPVWtWQlJGbFRWRUZVUlVOSVFVNUhSU0JwYmlCalpXd29KM05qY21sd2RDY3BLWHRjYmlBZ0lDQmtaV1psY2lBOUlHWjFibU4wYVc5dUtHbGtLWHRjYmlBZ0lDQWdJR2gwYld3dVlYQndaVzVrUTJocGJHUW9ZMlZzS0NkelkzSnBjSFFuS1NsYlQwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRlhTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUdoMGJXd3VjbVZ0YjNabFEyaHBiR1FvZEdocGN5azdYRzRnSUNBZ0lDQWdJSEoxYmk1allXeHNLR2xrS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlR0Y2JpQWdMeThnVW1WemRDQnZiR1FnWW5KdmQzTmxjbk5jYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1kzUjRLSEoxYml3Z2FXUXNJREVwTENBd0tUdGNiaUFnSUNCOU8xeHVJQ0I5WEc1OVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnYzJWME9pQWdJSE5sZEZSaGMyc3NYRzRnSUdOc1pXRnlPaUJqYkdWaGNsUmhjMnRjYm4wN0lpd2lMeThnZEc4Z2FXNWtaWGhsWkNCdlltcGxZM1FzSUhSdlQySnFaV04wSUhkcGRHZ2dabUZzYkdKaFkyc2dabTl5SUc1dmJpMWhjbkpoZVMxc2FXdGxJRVZUTXlCemRISnBibWR6WEc1MllYSWdTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2SkM1cGIySnFaV04wSnlsY2JpQWdMQ0JrWldacGJtVmtJRDBnY21WeGRXbHlaU2duTGk4a0xtUmxabWx1WldRbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z1NVOWlhbVZqZENoa1pXWnBibVZrS0dsMEtTazdYRzU5T3lJc0lpOHZJRGN1TVM0eE5TQlViMHhsYm1kMGFGeHVkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZKQzUwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0J0YVc0Z0lDQWdJQ0FnUFNCTllYUm9MbTFwYmp0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnYVhRZ1BpQXdJRDhnYldsdUtIUnZTVzUwWldkbGNpaHBkQ2tzSURCNE1XWm1abVptWm1abVptWm1abVlwSURvZ01Ec2dMeThnY0c5M0tESXNJRFV6S1NBdElERWdQVDBnT1RBd056RTVPVEkxTkRjME1EazVNVnh1ZlRzaUxDSXZMeUEzTGpFdU1UTWdWRzlQWW1wbFkzUW9ZWEpuZFcxbGJuUXBYRzUyWVhJZ1pHVm1hVzVsWkNBOUlISmxjWFZwY21Vb0p5NHZKQzVrWldacGJtVmtKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRTlpYW1WamRDaGtaV1pwYm1Wa0tHbDBLU2s3WEc1OU95SXNJblpoY2lCemRHOXlaU0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVjMmhoY21Wa0p5a29KM2RyY3ljcFhHNGdJQ3dnZFdsa0lDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xuVnBaQ2NwWEc0Z0lDd2dVM2x0WW05c0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1kc2IySmhiQ2NwTGxONWJXSnZiRHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYm1GdFpTbDdYRzRnSUhKbGRIVnliaUJ6ZEc5eVpWdHVZVzFsWFNCOGZDQW9jM1J2Y21WYmJtRnRaVjBnUFZ4dUlDQWdJRk41YldKdmJDQW1KaUJUZVcxaWIyeGJibUZ0WlYwZ2ZId2dLRk41YldKdmJDQjhmQ0IxYVdRcEtDZFRlVzFpYjJ3dUp5QXJJRzVoYldVcEtUdGNibjA3SWl3aWRtRnlJR05zWVhOemIyWWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNWpiR0Z6YzI5bUp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1ZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQkpkR1Z5WVhSdmNuTWdQU0J5WlhGMWFYSmxLQ2N1THlRdWFYUmxjbUYwYjNKekp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2SkM1amIzSmxKeWt1WjJWMFNYUmxjbUYwYjNKTlpYUm9iMlFnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUdsbUtHbDBJQ0U5SUhWdVpHVm1hVzVsWkNseVpYUjFjbTRnYVhSYlNWUkZVa0ZVVDFKZFhHNGdJQ0FnZkh3Z2FYUmJKMEJBYVhSbGNtRjBiM0luWFZ4dUlDQWdJSHg4SUVsMFpYSmhkRzl5YzF0amJHRnpjMjltS0dsMEtWMDdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQmhaR1JVYjFWdWMyTnZjR0ZpYkdWeklEMGdjbVZ4ZFdseVpTZ25MaThrTG1Ga1pDMTBieTExYm5OamIzQmhZbXhsY3ljcFhHNGdJQ3dnYzNSbGNDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNXBkR1Z5TFhOMFpYQW5LVnh1SUNBc0lFbDBaWEpoZEc5eWN5QWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xuUnZMV2x2WW1wbFkzUW5LVHRjYmx4dUx5OGdNakl1TVM0ekxqUWdRWEp5WVhrdWNISnZkRzkwZVhCbExtVnVkSEpwWlhNb0tWeHVMeThnTWpJdU1TNHpMakV6SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVyWlhsektDbGNiaTh2SURJeUxqRXVNeTR5T1NCQmNuSmhlUzV3Y205MGIzUjVjR1V1ZG1Gc2RXVnpLQ2xjYmk4dklESXlMakV1TXk0ek1DQkJjbkpoZVM1d2NtOTBiM1I1Y0dWYlFFQnBkR1Z5WVhSdmNsMG9LVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1THlRdWFYUmxjaTFrWldacGJtVW5LU2hCY25KaGVTd2dKMEZ5Y21GNUp5d2dablZ1WTNScGIyNG9hWFJsY21GMFpXUXNJR3RwYm1RcGUxeHVJQ0IwYUdsekxsOTBJRDBnZEc5SlQySnFaV04wS0dsMFpYSmhkR1ZrS1RzZ0x5OGdkR0Z5WjJWMFhHNGdJSFJvYVhNdVgya2dQU0F3T3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnVaWGgwSUdsdVpHVjRYRzRnSUhSb2FYTXVYMnNnUFNCcmFXNWtPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJyYVc1a1hHNHZMeUF5TWk0eExqVXVNaTR4SUNWQmNuSmhlVWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxKUzV1WlhoMEtDbGNibjBzSUdaMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCUElDQWdJQ0E5SUhSb2FYTXVYM1JjYmlBZ0lDQXNJR3RwYm1RZ0lEMGdkR2hwY3k1ZmExeHVJQ0FnSUN3Z2FXNWtaWGdnUFNCMGFHbHpMbDlwS3lzN1hHNGdJR2xtS0NGUElIeDhJR2x1WkdWNElENDlJRTh1YkdWdVozUm9LWHRjYmlBZ0lDQjBhR2x6TGw5MElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lISmxkSFZ5YmlCemRHVndLREVwTzF4dUlDQjlYRzRnSUdsbUtHdHBibVFnUFQwZ0oydGxlWE1uSUNBcGNtVjBkWEp1SUhOMFpYQW9NQ3dnYVc1a1pYZ3BPMXh1SUNCcFppaHJhVzVrSUQwOUlDZDJZV3gxWlhNbktYSmxkSFZ5YmlCemRHVndLREFzSUU5YmFXNWtaWGhkS1R0Y2JpQWdjbVYwZFhKdUlITjBaWEFvTUN3Z1cybHVaR1Y0TENCUFcybHVaR1Y0WFYwcE8xeHVmU3dnSjNaaGJIVmxjeWNwTzF4dVhHNHZMeUJoY21kMWJXVnVkSE5NYVhOMFcwQkFhWFJsY21GMGIzSmRJR2x6SUNWQmNuSmhlVkJ5YjNSdlgzWmhiSFZsY3lVZ0tEa3VOQzQwTGpZc0lEa3VOQzQwTGpjcFhHNUpkR1Z5WVhSdmNuTXVRWEpuZFcxbGJuUnpJRDBnU1hSbGNtRjBiM0p6TGtGeWNtRjVPMXh1WEc1aFpHUlViMVZ1YzJOdmNHRmliR1Z6S0NkclpYbHpKeWs3WEc1aFpHUlViMVZ1YzJOdmNHRmliR1Z6S0NkMllXeDFaWE1uS1R0Y2JtRmtaRlJ2Vlc1elkyOXdZV0pzWlhNb0oyVnVkSEpwWlhNbktUc2lMQ0l2THlBeE9TNHhMak11TVNCUFltcGxZM1F1WVhOemFXZHVLSFJoY21kbGRDd2djMjkxY21ObEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUx5UXVaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0xDQW5UMkpxWldOMEp5d2dlMkZ6YzJsbmJqb2djbVZ4ZFdseVpTZ25MaThrTG05aWFtVmpkQzFoYzNOcFoyNG5LWDBwT3lJc0lpOHZJREU1TGpFdU1pNDVJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloUEtWeHVkbUZ5SUhSdlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOGtMblJ2TFc5aWFtVmpkQ2NwTzF4dVhHNXlaWEYxYVhKbEtDY3VMeVF1YjJKcVpXTjBMWE5oY0NjcEtDZG5aWFJRY205MGIzUjVjR1ZQWmljc0lHWjFibU4wYVc5dUtDUm5aWFJRY205MGIzUjVjR1ZQWmlsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm5aWFJRY205MGIzUjVjR1ZQWmlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSblpYUlFjbTkwYjNSNWNHVlBaaWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdJaXdpTHk4Z01Ua3VNUzR5TGpFeUlFOWlhbVZqZEM1cGMwWnliM3BsYmloUEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWx6TFc5aWFtVmpkQ2NwTzF4dVhHNXlaWEYxYVhKbEtDY3VMeVF1YjJKcVpXTjBMWE5oY0NjcEtDZHBjMFp5YjNwbGJpY3NJR1oxYm1OMGFXOXVLQ1JwYzBaeWIzcGxiaWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGMwWnliM3BsYmlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUdselQySnFaV04wS0dsMEtTQS9JQ1JwYzBaeWIzcGxiaUEvSUNScGMwWnliM3BsYmlocGRDa2dPaUJtWVd4elpTQTZJSFJ5ZFdVN1hHNGdJSDA3WEc1OUtUc2lMQ0l2THlBeE9TNHhMakl1TVRRZ1QySnFaV04wTG10bGVYTW9UeWxjYm5aaGNpQjBiMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2SkM1MGJ5MXZZbXBsWTNRbktUdGNibHh1Y21WeGRXbHlaU2duTGk4a0xtOWlhbVZqZEMxellYQW5LU2duYTJWNWN5Y3NJR1oxYm1OMGFXOXVLQ1JyWlhsektYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR3RsZVhNb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa2EyVjVjeWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdJaXdpTHk4Z01Ua3VNUzR6TGpFNUlFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaWhQTENCd2NtOTBieWxjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaThrTG1WNGNHOXlkQ2NwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdjMlYwVUhKdmRHOTBlWEJsVDJZNklISmxjWFZwY21Vb0p5NHZKQzV6WlhRdGNISnZkRzhuS1M1elpYUjlLVHNpTENJaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDY3BYRzRnSUN3Z1RFbENVa0ZTV1NBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1c2FXSnlZWEo1SnlsY2JpQWdMQ0JuYkc5aVlXd2dJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbWRzYjJKaGJDY3BYRzRnSUN3Z1kzUjRJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1amRIZ25LVnh1SUNBc0lHTnNZWE56YjJZZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdVkyeGhjM052WmljcFhHNGdJQ3dnSkdWNGNHOXlkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVsZUhCdmNuUW5LVnh1SUNBc0lHbHpUMkpxWldOMElDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdWFYTXRiMkpxWldOMEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1GdUxXOWlhbVZqZENjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUNBOUlISmxjWFZwY21Vb0p5NHZKQzVoTFdaMWJtTjBhVzl1SnlsY2JpQWdMQ0J6ZEhKcFkzUk9aWGNnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbk4wY21samRDMXVaWGNuS1Z4dUlDQXNJR1p2Y2s5bUlDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVabTl5TFc5bUp5bGNiaUFnTENCelpYUlFjbTkwYnlBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG5ObGRDMXdjbTkwYnljcExuTmxkRnh1SUNBc0lITmhiV1VnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdWMyRnRaUzEyWVd4MVpTY3BYRzRnSUN3Z1UxQkZRMGxGVXlBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1M2EzTW5LU2duYzNCbFkybGxjeWNwWEc0Z0lDd2djM0JsWTJsbGMwTnZibk4wY25WamRHOXlJRDBnY21WeGRXbHlaU2duTGk4a0xuTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSW5LVnh1SUNBc0lHRnpZWEFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdWJXbGpjbTkwWVhOckp5bGNiaUFnTENCUVVrOU5TVk5GSUNBZ0lEMGdKMUJ5YjIxcGMyVW5YRzRnSUN3Z2NISnZZMlZ6Y3lBZ0lDQTlJR2RzYjJKaGJDNXdjbTlqWlhOelhHNGdJQ3dnYVhOT2IyUmxJQ0FnSUNBOUlHTnNZWE56YjJZb2NISnZZMlZ6Y3lrZ1BUMGdKM0J5YjJObGMzTW5YRzRnSUN3Z1VDQWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJGdFFVazlOU1ZORlhWeHVJQ0FzSUZkeVlYQndaWEk3WEc1Y2JuWmhjaUIwWlhOMFVtVnpiMngyWlNBOUlHWjFibU4wYVc5dUtITjFZaWw3WEc0Z0lIWmhjaUIwWlhOMElEMGdibVYzSUZBb1puVnVZM1JwYjI0b0tYdDlLVHRjYmlBZ2FXWW9jM1ZpS1hSbGMzUXVZMjl1YzNSeWRXTjBiM0lnUFNCUFltcGxZM1E3WEc0Z0lISmxkSFZ5YmlCUUxuSmxjMjlzZG1Vb2RHVnpkQ2tnUFQwOUlIUmxjM1E3WEc1OU8xeHVYRzUyWVhJZ1ZWTkZYMDVCVkVsV1JTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUIzYjNKcmN5QTlJR1poYkhObE8xeHVJQ0JtZFc1amRHbHZiaUJRTWloNEtYdGNiaUFnSUNCMllYSWdjMlZzWmlBOUlHNWxkeUJRS0hncE8xeHVJQ0FnSUhObGRGQnliM1J2S0hObGJHWXNJRkF5TG5CeWIzUnZkSGx3WlNrN1hHNGdJQ0FnY21WMGRYSnVJSE5sYkdZN1hHNGdJSDFjYmlBZ2RISjVJSHRjYmlBZ0lDQjNiM0pyY3lBOUlGQWdKaVlnVUM1eVpYTnZiSFpsSUNZbUlIUmxjM1JTWlhOdmJIWmxLQ2s3WEc0Z0lDQWdjMlYwVUhKdmRHOG9VRElzSUZBcE8xeHVJQ0FnSUZBeUxuQnliM1J2ZEhsd1pTQTlJQ1F1WTNKbFlYUmxLRkF1Y0hKdmRHOTBlWEJsTENCN1kyOXVjM1J5ZFdOMGIzSTZJSHQyWVd4MVpUb2dVREo5ZlNrN1hHNGdJQ0FnTHk4Z1lXTjBkV0ZzSUVacGNtVm1iM2dnYUdGeklHSnliMnRsYmlCemRXSmpiR0Z6Y3lCemRYQndiM0owTENCMFpYTjBJSFJvWVhSY2JpQWdJQ0JwWmlnaEtGQXlMbkpsYzI5c2RtVW9OU2t1ZEdobGJpaG1kVzVqZEdsdmJpZ3BlMzBwSUdsdWMzUmhibU5sYjJZZ1VESXBLWHRjYmlBZ0lDQWdJSGR2Y210eklEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUdGamRIVmhiQ0JXT0NCaWRXY3NJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAwTVRZeVhHNGdJQ0FnYVdZb2QyOXlhM01nSmlZZ2NtVnhkV2x5WlNnbkxpOGtMbVJsYzJOeWFYQjBiM0p6SnlrcGUxeHVJQ0FnSUNBZ2RtRnlJSFJvWlc1aFlteGxWR2hsYmtkdmRIUmxiaUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdVQzV5WlhOdmJIWmxLQ1F1YzJWMFJHVnpZeWg3ZlN3Z0ozUm9aVzRuTENCN1hHNGdJQ0FnSUNBZ0lHZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2RHaGxibUZpYkdWVWFHVnVSMjkwZEdWdUlEMGdkSEoxWlRzZ2ZWeHVJQ0FnSUNBZ2ZTa3BPMXh1SUNBZ0lDQWdkMjl5YTNNZ1BTQjBhR1Z1WVdKc1pWUm9aVzVIYjNSMFpXNDdYRzRnSUNBZ2ZWeHVJQ0I5SUdOaGRHTm9LR1VwZXlCM2IzSnJjeUE5SUdaaGJITmxPeUI5WEc0Z0lISmxkSFZ5YmlCM2IzSnJjenRjYm4wb0tUdGNibHh1THk4Z2FHVnNjR1Z5YzF4dWRtRnlJSE5oYldWRGIyNXpkSEoxWTNSdmNpQTlJR1oxYm1OMGFXOXVLR0VzSUdJcGUxeHVJQ0F2THlCc2FXSnlZWEo1SUhkeVlYQndaWElnYzNCbFkybGhiQ0JqWVhObFhHNGdJR2xtS0V4SlFsSkJVbGtnSmlZZ1lTQTlQVDBnVUNBbUppQmlJRDA5UFNCWGNtRndjR1Z5S1hKbGRIVnliaUIwY25WbE8xeHVJQ0J5WlhSMWNtNGdjMkZ0WlNoaExDQmlLVHRjYm4wN1hHNTJZWElnWjJWMFEyOXVjM1J5ZFdOMGIzSWdQU0JtZFc1amRHbHZiaWhES1h0Y2JpQWdkbUZ5SUZNZ1BTQmhiazlpYW1WamRDaERLVnRUVUVWRFNVVlRYVHRjYmlBZ2NtVjBkWEp1SUZNZ0lUMGdkVzVrWldacGJtVmtJRDhnVXlBNklFTTdYRzU5TzF4dWRtRnlJR2x6VkdobGJtRmliR1VnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhaaGNpQjBhR1Z1TzF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2FYUXBJQ1ltSUhSNWNHVnZaaUFvZEdobGJpQTlJR2wwTG5Sb1pXNHBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QjBhR1Z1SURvZ1ptRnNjMlU3WEc1OU8xeHVkbUZ5SUZCeWIyMXBjMlZEWVhCaFltbHNhWFI1SUQwZ1puVnVZM1JwYjI0b1F5bDdYRzRnSUhaaGNpQnlaWE52YkhabExDQnlaV3BsWTNRN1hHNGdJSFJvYVhNdWNISnZiV2x6WlNBOUlHNWxkeUJES0daMWJtTjBhVzl1S0NRa2NtVnpiMngyWlN3Z0pDUnlaV3BsWTNRcGUxeHVJQ0FnSUdsbUtISmxjMjlzZG1VZ0lUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCeVpXcGxZM1FnSVQwOUlIVnVaR1ZtYVc1bFpDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb0owSmhaQ0JRY205dGFYTmxJR052Ym5OMGNuVmpkRzl5SnlrN1hHNGdJQ0FnY21WemIyeDJaU0E5SUNRa2NtVnpiMngyWlR0Y2JpQWdJQ0J5WldwbFkzUWdJRDBnSkNSeVpXcGxZM1E3WEc0Z0lIMHBPMXh1SUNCMGFHbHpMbkpsYzI5c2RtVWdQU0JoUm5WdVkzUnBiMjRvY21WemIyeDJaU2tzWEc0Z0lIUm9hWE11Y21WcVpXTjBJQ0E5SUdGR2RXNWpkR2x2YmloeVpXcGxZM1FwWEc1OU8xeHVkbUZ5SUhCbGNtWnZjbTBnUFNCbWRXNWpkR2x2YmlobGVHVmpLWHRjYmlBZ2RISjVJSHRjYmlBZ0lDQmxlR1ZqS0NrN1hHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdjbVYwZFhKdUlIdGxjbkp2Y2pvZ1pYMDdYRzRnSUgxY2JuMDdYRzUyWVhJZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0b2NtVmpiM0prTENCcGMxSmxhbVZqZENsN1hHNGdJR2xtS0hKbFkyOXlaQzV1S1hKbGRIVnlianRjYmlBZ2NtVmpiM0prTG00Z1BTQjBjblZsTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J5WldOdmNtUXVZenRjYmlBZ1lYTmhjQ2htZFc1amRHbHZiaWdwZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhKbFkyOXlaQzUyWEc0Z0lDQWdJQ0FzSUc5cklDQWdJRDBnY21WamIzSmtMbk1nUFQwZ01WeHVJQ0FnSUNBZ0xDQnBJQ0FnSUNBOUlEQTdYRzRnSUNBZ2RtRnlJSEoxYmlBOUlHWjFibU4wYVc5dUtISmxZV04wYVc5dUtYdGNiaUFnSUNBZ0lIWmhjaUJvWVc1a2JHVnlJRDBnYjJzZ1B5QnlaV0ZqZEdsdmJpNXZheUE2SUhKbFlXTjBhVzl1TG1aaGFXeGNiaUFnSUNBZ0lDQWdMQ0J5WlhOdmJIWmxJRDBnY21WaFkzUnBiMjR1Y21WemIyeDJaVnh1SUNBZ0lDQWdJQ0FzSUhKbGFtVmpkQ0FnUFNCeVpXRmpkR2x2Ymk1eVpXcGxZM1JjYmlBZ0lDQWdJQ0FnTENCeVpYTjFiSFFzSUhSb1pXNDdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppaG9ZVzVrYkdWeUtYdGNiaUFnSUNBZ0lDQWdJQ0JwWmlnaGIyc3BjbVZqYjNKa0xtZ2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJR2hoYm1Sc1pYSWdQVDA5SUhSeWRXVWdQeUIyWVd4MVpTQTZJR2hoYm1Sc1pYSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtS0hKbGMzVnNkQ0E5UFQwZ2NtVmhZM1JwYjI0dWNISnZiV2x6WlNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9WSGx3WlVWeWNtOXlLQ2RRY205dGFYTmxMV05vWVdsdUlHTjVZMnhsSnlrcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWgwYUdWdUlEMGdhWE5VYUdWdVlXSnNaU2h5WlhOMWJIUXBLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9aVzR1WTJGc2JDaHlaWE4xYkhRc0lISmxjMjlzZG1Vc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElISmxjMjlzZG1Vb2NtVnpkV3gwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGFtVmpkQ2gyWVd4MVpTazdYRzRnSUNBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmlBZ0lDQjNhR2xzWlNoamFHRnBiaTVzWlc1bmRHZ2dQaUJwS1hKMWJpaGphR0ZwYmx0cEt5dGRLVHNnTHk4Z2RtRnlhV0ZpYkdVZ2JHVnVaM1JvSUMwZ1kyRnVKM1FnZFhObElHWnZja1ZoWTJoY2JpQWdJQ0JqYUdGcGJpNXNaVzVuZEdnZ1BTQXdPMXh1SUNBZ0lISmxZMjl5WkM1dUlEMGdabUZzYzJVN1hHNGdJQ0FnYVdZb2FYTlNaV3BsWTNRcGMyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdkbUZ5SUhCeWIyMXBjMlVnUFNCeVpXTnZjbVF1Y0Z4dUlDQWdJQ0FnSUNBc0lHaGhibVJzWlhJc0lHTnZibk52YkdVN1hHNGdJQ0FnSUNCcFppaHBjMVZ1YUdGdVpHeGxaQ2h3Y205dGFYTmxLU2w3WEc0Z0lDQWdJQ0FnSUdsbUtHbHpUbTlrWlNsN1hHNGdJQ0FnSUNBZ0lDQWdjSEp2WTJWemN5NWxiV2wwS0NkMWJtaGhibVJzWldSU1pXcGxZM1JwYjI0bkxDQjJZV3gxWlN3Z2NISnZiV2x6WlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppaG9ZVzVrYkdWeUlEMGdaMnh2WW1Gc0xtOXVkVzVvWVc1a2JHVmtjbVZxWldOMGFXOXVLWHRjYmlBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5S0h0d2NtOXRhWE5sT2lCd2NtOXRhWE5sTENCeVpXRnpiMjQ2SUhaaGJIVmxmU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlnb1kyOXVjMjlzWlNBOUlHZHNiMkpoYkM1amIyNXpiMnhsS1NBbUppQmpiMjV6YjJ4bExtVnljbTl5S1h0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVmJtaGhibVJzWldRZ2NISnZiV2x6WlNCeVpXcGxZM1JwYjI0bkxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdjbVZqYjNKa0xtRWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdmU3dnTVNrN1hHNGdJSDBwTzF4dWZUdGNiblpoY2lCcGMxVnVhR0Z1Wkd4bFpDQTlJR1oxYm1OMGFXOXVLSEJ5YjIxcGMyVXBlMXh1SUNCMllYSWdjbVZqYjNKa0lEMGdjSEp2YldselpTNWZaRnh1SUNBZ0lDd2dZMmhoYVc0Z0lEMGdjbVZqYjNKa0xtRWdmSHdnY21WamIzSmtMbU5jYmlBZ0lDQXNJR2tnSUNBZ0lDQTlJREJjYmlBZ0lDQXNJSEpsWVdOMGFXOXVPMXh1SUNCcFppaHlaV052Y21RdWFDbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIZG9hV3hsS0dOb1lXbHVMbXhsYm1kMGFDQStJR2twZTF4dUlDQWdJSEpsWVdOMGFXOXVJRDBnWTJoaGFXNWJhU3NyWFR0Y2JpQWdJQ0JwWmloeVpXRmpkR2x2Ymk1bVlXbHNJSHg4SUNGcGMxVnVhR0Z1Wkd4bFpDaHlaV0ZqZEdsdmJpNXdjbTl0YVhObEtTbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMGdjbVYwZFhKdUlIUnlkV1U3WEc1OU8xeHVkbUZ5SUNSeVpXcGxZM1FnUFNCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lIWmhjaUJ5WldOdmNtUWdQU0IwYUdsek8xeHVJQ0JwWmloeVpXTnZjbVF1WkNseVpYUjFjbTQ3WEc0Z0lISmxZMjl5WkM1a0lEMGdkSEoxWlR0Y2JpQWdjbVZqYjNKa0lEMGdjbVZqYjNKa0xuSWdmSHdnY21WamIzSmtPeUF2THlCMWJuZHlZWEJjYmlBZ2NtVmpiM0prTG5ZZ1BTQjJZV3gxWlR0Y2JpQWdjbVZqYjNKa0xuTWdQU0F5TzF4dUlDQnlaV052Y21RdVlTQTlJSEpsWTI5eVpDNWpMbk5zYVdObEtDazdYRzRnSUc1dmRHbG1lU2h5WldOdmNtUXNJSFJ5ZFdVcE8xeHVmVHRjYm5aaGNpQWtjbVZ6YjJ4MlpTQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnZG1GeUlISmxZMjl5WkNBOUlIUm9hWE5jYmlBZ0lDQXNJSFJvWlc0N1hHNGdJR2xtS0hKbFkyOXlaQzVrS1hKbGRIVnlianRjYmlBZ2NtVmpiM0prTG1RZ1BTQjBjblZsTzF4dUlDQnlaV052Y21RZ1BTQnlaV052Y21RdWNpQjhmQ0J5WldOdmNtUTdJQzh2SUhWdWQzSmhjRnh1SUNCMGNua2dlMXh1SUNBZ0lHbG1LSEpsWTI5eVpDNXdJRDA5UFNCMllXeDFaU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0pRY205dGFYTmxJR05oYmlkMElHSmxJSEpsYzI5c2RtVmtJR2wwYzJWc1psd2lLVHRjYmlBZ0lDQnBaaWgwYUdWdUlEMGdhWE5VYUdWdVlXSnNaU2gyWVd4MVpTa3BlMXh1SUNBZ0lDQWdZWE5oY0NobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQjJZWElnZDNKaGNIQmxjaUE5SUh0eU9pQnlaV052Y21Rc0lHUTZJR1poYkhObGZUc2dMeThnZDNKaGNGeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9aVzR1WTJGc2JDaDJZV3gxWlN3Z1kzUjRLQ1J5WlhOdmJIWmxMQ0IzY21Gd2NHVnlMQ0F4S1N3Z1kzUjRLQ1J5WldwbFkzUXNJSGR5WVhCd1pYSXNJREVwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FrY21WcVpXTjBMbU5oYkd3b2QzSmhjSEJsY2l3Z1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaV052Y21RdWRpQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ2NtVmpiM0prTG5NZ1BTQXhPMXh1SUNBZ0lDQWdibTkwYVdaNUtISmxZMjl5WkN3Z1ptRnNjMlVwTzF4dUlDQWdJSDFjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBa2NtVnFaV04wTG1OaGJHd29lM0k2SUhKbFkyOXlaQ3dnWkRvZ1ptRnNjMlY5TENCbEtUc2dMeThnZDNKaGNGeHVJQ0I5WEc1OU8xeHVYRzR2THlCamIyNXpkSEoxWTNSdmNpQndiMng1Wm1sc2JGeHVhV1lvSVZWVFJWOU9RVlJKVmtVcGUxeHVJQ0F2THlBeU5TNDBMak11TVNCUWNtOXRhWE5sS0dWNFpXTjFkRzl5S1Z4dUlDQlFJRDBnWm5WdVkzUnBiMjRnVUhKdmJXbHpaU2hsZUdWamRYUnZjaWw3WEc0Z0lDQWdZVVoxYm1OMGFXOXVLR1Y0WldOMWRHOXlLVHRjYmlBZ0lDQjJZWElnY21WamIzSmtJRDBnZEdocGN5NWZaQ0E5SUh0Y2JpQWdJQ0FnSUhBNklITjBjbWxqZEU1bGR5aDBhR2x6TENCUUxDQlFVazlOU1ZORktTd2dJQ0FnSUNBZ0lDQXZMeUE4TFNCd2NtOXRhWE5sWEc0Z0lDQWdJQ0JqT2lCYlhTd2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnWVhkaGFYUnBibWNnY21WaFkzUnBiMjV6WEc0Z0lDQWdJQ0JoT2lCMWJtUmxabWx1WldRc0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnWTJobFkydGxaQ0JwYmlCcGMxVnVhR0Z1Wkd4bFpDQnlaV0ZqZEdsdmJuTmNiaUFnSUNBZ0lITTZJREFzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQnpkR0YwWlZ4dUlDQWdJQ0FnWkRvZ1ptRnNjMlVzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUdSdmJtVmNiaUFnSUNBZ0lIWTZJSFZ1WkdWbWFXNWxaQ3dnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBOExTQjJZV3gxWlZ4dUlDQWdJQ0FnYURvZ1ptRnNjMlVzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUdoaGJtUnNaV1FnY21WcVpXTjBhVzl1WEc0Z0lDQWdJQ0J1T2lCbVlXeHpaU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnYm05MGFXWjVYRzRnSUNBZ2ZUdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdaWGhsWTNWMGIzSW9ZM1I0S0NSeVpYTnZiSFpsTENCeVpXTnZjbVFzSURFcExDQmpkSGdvSkhKbGFtVmpkQ3dnY21WamIzSmtMQ0F4S1NrN1hHNGdJQ0FnZlNCallYUmphQ2hsY25JcGUxeHVJQ0FnSUNBZ0pISmxhbVZqZEM1allXeHNLSEpsWTI5eVpDd2daWEp5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzRnSUhKbGNYVnBjbVVvSnk0dkpDNXlaV1JsWm1sdVpTMWhiR3duS1NoUUxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lDOHZJREkxTGpRdU5TNHpJRkJ5YjIxcGMyVXVjSEp2ZEc5MGVYQmxMblJvWlc0b2IyNUdkV3htYVd4c1pXUXNJRzl1VW1WcVpXTjBaV1FwWEc0Z0lDQWdkR2hsYmpvZ1puVnVZM1JwYjI0Z2RHaGxiaWh2YmtaMWJHWnBiR3hsWkN3Z2IyNVNaV3BsWTNSbFpDbDdYRzRnSUNBZ0lDQjJZWElnY21WaFkzUnBiMjRnUFNCdVpYY2dVSEp2YldselpVTmhjR0ZpYVd4cGRIa29jM0JsWTJsbGMwTnZibk4wY25WamRHOXlLSFJvYVhNc0lGQXBLVnh1SUNBZ0lDQWdJQ0FzSUhCeWIyMXBjMlVnSUQwZ2NtVmhZM1JwYjI0dWNISnZiV2x6WlZ4dUlDQWdJQ0FnSUNBc0lISmxZMjl5WkNBZ0lEMGdkR2hwY3k1ZlpEdGNiaUFnSUNBZ0lISmxZV04wYVc5dUxtOXJJQ0FnUFNCMGVYQmxiMllnYjI1R2RXeG1hV3hzWldRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUc5dVJuVnNabWxzYkdWa0lEb2dkSEoxWlR0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG1aaGFXd2dQU0IwZVhCbGIyWWdiMjVTWldwbFkzUmxaQ0E5UFNBblpuVnVZM1JwYjI0bklDWW1JRzl1VW1WcVpXTjBaV1E3WEc0Z0lDQWdJQ0J5WldOdmNtUXVZeTV3ZFhOb0tISmxZV04wYVc5dUtUdGNiaUFnSUNBZ0lHbG1LSEpsWTI5eVpDNWhLWEpsWTI5eVpDNWhMbkIxYzJnb2NtVmhZM1JwYjI0cE8xeHVJQ0FnSUNBZ2FXWW9jbVZqYjNKa0xuTXBibTkwYVdaNUtISmxZMjl5WkN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVTdYRzRnSUNBZ2ZTeGNiaUFnSUNBdkx5QXlOUzQwTGpVdU1TQlFjbTl0YVhObExuQnliM1J2ZEhsd1pTNWpZWFJqYUNodmJsSmxhbVZqZEdWa0tWeHVJQ0FnSUNkallYUmphQ2M2SUdaMWJtTjBhVzl1S0c5dVVtVnFaV04wWldRcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkR2hsYmloMWJtUmxabWx1WldRc0lHOXVVbVZxWldOMFpXUXBPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVZWVFJWOU9RVlJKVmtVc0lIdFFjbTl0YVhObE9pQlFmU2s3WEc1eVpYRjFhWEpsS0NjdUx5UXVjMlYwTFhSdkxYTjBjbWx1WnkxMFlXY25LU2hRTENCUVVrOU5TVk5GS1R0Y2JuSmxjWFZwY21Vb0p5NHZKQzV6WlhRdGMzQmxZMmxsY3ljcEtGQlNUMDFKVTBVcE8xeHVWM0poY0hCbGNpQTlJSEpsY1hWcGNtVW9KeTR2SkM1amIzSmxKeWxiVUZKUFRVbFRSVjA3WEc1Y2JpOHZJSE4wWVhScFkzTmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lWVlRSVjlPUVZSSlZrVXNJRkJTVDAxSlUwVXNJSHRjYmlBZ0x5OGdNalV1TkM0MExqVWdVSEp2YldselpTNXlaV3BsWTNRb2NpbGNiaUFnY21WcVpXTjBPaUJtZFc1amRHbHZiaUJ5WldwbFkzUW9jaWw3WEc0Z0lDQWdkbUZ5SUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGNnVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvZEdocGN5bGNiaUFnSUNBZ0lDd2dKQ1J5WldwbFkzUWdJQ0E5SUdOaGNHRmlhV3hwZEhrdWNtVnFaV04wTzF4dUlDQWdJQ1FrY21WcVpXTjBLSElwTzF4dUlDQWdJSEpsZEhWeWJpQmpZWEJoWW1sc2FYUjVMbkJ5YjIxcGMyVTdYRzRnSUgxY2JuMHBPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQW9JVlZUUlY5T1FWUkpWa1VnZkh3Z2RHVnpkRkpsYzI5c2RtVW9kSEoxWlNrcExDQlFVazlOU1ZORkxDQjdYRzRnSUM4dklESTFMalF1TkM0MklGQnliMjFwYzJVdWNtVnpiMngyWlNoNEtWeHVJQ0J5WlhOdmJIWmxPaUJtZFc1amRHbHZiaUJ5WlhOdmJIWmxLSGdwZTF4dUlDQWdJQzh2SUdsdWMzUmhibU5sYjJZZ2FXNXpkR1ZoWkNCdlppQnBiblJsY201aGJDQnpiRzkwSUdOb1pXTnJJR0psWTJGMWMyVWdkMlVnYzJodmRXeGtJR1pwZUNCcGRDQjNhWFJvYjNWMElISmxjR3hoWTJWdFpXNTBJRzVoZEdsMlpTQlFjbTl0YVhObElHTnZjbVZjYmlBZ0lDQnBaaWg0SUdsdWMzUmhibU5sYjJZZ1VDQW1KaUJ6WVcxbFEyOXVjM1J5ZFdOMGIzSW9lQzVqYjI1emRISjFZM1J2Y2l3Z2RHaHBjeWtwY21WMGRYSnVJSGc3WEc0Z0lDQWdkbUZ5SUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGNnVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvZEdocGN5bGNiaUFnSUNBZ0lDd2dKQ1J5WlhOdmJIWmxJQ0E5SUdOaGNHRmlhV3hwZEhrdWNtVnpiMngyWlR0Y2JpQWdJQ0FrSkhKbGMyOXNkbVVvZUNrN1hHNGdJQ0FnY21WMGRYSnVJR05oY0dGaWFXeHBkSGt1Y0hKdmJXbHpaVHRjYmlBZ2ZWeHVmU2s3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0VvVlZORlgwNUJWRWxXUlNBbUppQnlaWEYxYVhKbEtDY3VMeVF1YVhSbGNpMWtaWFJsWTNRbktTaG1kVzVqZEdsdmJpaHBkR1Z5S1h0Y2JpQWdVQzVoYkd3b2FYUmxjaWxiSjJOaGRHTm9KMTBvWm5WdVkzUnBiMjRvS1h0OUtUdGNibjBwS1N3Z1VGSlBUVWxUUlN3Z2UxeHVJQ0F2THlBeU5TNDBMalF1TVNCUWNtOXRhWE5sTG1Gc2JDaHBkR1Z5WVdKc1pTbGNiaUFnWVd4c09pQm1kVzVqZEdsdmJpQmhiR3dvYVhSbGNtRmliR1VwZTF4dUlDQWdJSFpoY2lCRElDQWdJQ0FnSUNBZ0lEMGdaMlYwUTI5dWMzUnlkV04wYjNJb2RHaHBjeWxjYmlBZ0lDQWdJQ3dnWTJGd1lXSnBiR2wwZVNBOUlHNWxkeUJRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1Z4dUlDQWdJQ0FnTENCeVpYTnZiSFpsSUNBZ0lEMGdZMkZ3WVdKcGJHbDBlUzV5WlhOdmJIWmxYRzRnSUNBZ0lDQXNJSEpsYW1WamRDQWdJQ0FnUFNCallYQmhZbWxzYVhSNUxuSmxhbVZqZEZ4dUlDQWdJQ0FnTENCMllXeDFaWE1nSUNBZ0lEMGdXMTA3WEc0Z0lDQWdkbUZ5SUdGaWNuVndkQ0E5SUhCbGNtWnZjbTBvWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUdadmNrOW1LR2wwWlhKaFlteGxMQ0JtWVd4elpTd2dkbUZzZFdWekxuQjFjMmdzSUhaaGJIVmxjeWs3WEc0Z0lDQWdJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdkbUZzZFdWekxteGxibWQwYUZ4dUlDQWdJQ0FnSUNBc0lISmxjM1ZzZEhNZ0lDQTlJRUZ5Y21GNUtISmxiV0ZwYm1sdVp5azdYRzRnSUNBZ0lDQnBaaWh5WlcxaGFXNXBibWNwSkM1bFlXTm9MbU5oYkd3b2RtRnNkV1Z6TENCbWRXNWpkR2x2Ymlod2NtOXRhWE5sTENCcGJtUmxlQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhiSEpsWVdSNVEyRnNiR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUVNdWNtVnpiMngyWlNod2NtOXRhWE5sS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnSUNBZ0lDQWdJQ0JwWmloaGJISmxZV1I1UTJGc2JHVmtLWEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0JoYkhKbFlXUjVRMkZzYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSelcybHVaR1Y0WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDMHRjbVZ0WVdsdWFXNW5JSHg4SUhKbGMyOXNkbVVvY21WemRXeDBjeWs3WEc0Z0lDQWdJQ0FnSUgwc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lHVnNjMlVnY21WemIyeDJaU2h5WlhOMWJIUnpLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnBaaWhoWW5KMWNIUXBjbVZxWldOMEtHRmljblZ3ZEM1bGNuSnZjaWs3WEc0Z0lDQWdjbVYwZFhKdUlHTmhjR0ZpYVd4cGRIa3VjSEp2YldselpUdGNiaUFnZlN4Y2JpQWdMeThnTWpVdU5DNDBMalFnVUhKdmJXbHpaUzV5WVdObEtHbDBaWEpoWW14bEtWeHVJQ0J5WVdObE9pQm1kVzVqZEdsdmJpQnlZV05sS0dsMFpYSmhZbXhsS1h0Y2JpQWdJQ0IyWVhJZ1F5QWdJQ0FnSUNBZ0lDQTlJR2RsZEVOdmJuTjBjblZqZEc5eUtIUm9hWE1wWEc0Z0lDQWdJQ0FzSUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGNnVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlsY2JpQWdJQ0FnSUN3Z2NtVnFaV04wSUNBZ0lDQTlJR05oY0dGaWFXeHBkSGt1Y21WcVpXTjBPMXh1SUNBZ0lIWmhjaUJoWW5KMWNIUWdQU0J3WlhKbWIzSnRLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0JtYjNKUFppaHBkR1Z5WVdKc1pTd2dabUZzYzJVc0lHWjFibU4wYVc5dUtIQnliMjFwYzJVcGUxeHVJQ0FnSUNBZ0lDQkRMbkpsYzI5c2RtVW9jSEp2YldselpTa3VkR2hsYmloallYQmhZbWxzYVhSNUxuSmxjMjlzZG1Vc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCcFppaGhZbkoxY0hRcGNtVnFaV04wS0dGaWNuVndkQzVsY25KdmNpazdYRzRnSUNBZ2NtVjBkWEp1SUdOaGNHRmlhV3hwZEhrdWNISnZiV2x6WlR0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JoZENBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YzNSeWFXNW5MV0YwSnlrb2RISjFaU2s3WEc1Y2JpOHZJREl4TGpFdU15NHlOeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxXMEJBYVhSbGNtRjBiM0pkS0NsY2JuSmxjWFZwY21Vb0p5NHZKQzVwZEdWeUxXUmxabWx1WlNjcEtGTjBjbWx1Wnl3Z0oxTjBjbWx1Wnljc0lHWjFibU4wYVc5dUtHbDBaWEpoZEdWa0tYdGNiaUFnZEdocGN5NWZkQ0E5SUZOMGNtbHVaeWhwZEdWeVlYUmxaQ2s3SUM4dklIUmhjbWRsZEZ4dUlDQjBhR2x6TGw5cElEMGdNRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYm1WNGRDQnBibVJsZUZ4dUx5OGdNakV1TVM0MUxqSXVNU0FsVTNSeWFXNW5TWFJsY21GMGIzSlFjbTkwYjNSNWNHVWxMbTVsZUhRb0tWeHVmU3dnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUU4Z0lDQWdJRDBnZEdocGN5NWZkRnh1SUNBZ0lDd2dhVzVrWlhnZ1BTQjBhR2x6TGw5cFhHNGdJQ0FnTENCd2IybHVkRHRjYmlBZ2FXWW9hVzVrWlhnZ1BqMGdUeTVzWlc1bmRHZ3BjbVYwZFhKdUlIdDJZV3gxWlRvZ2RXNWtaV1pwYm1Wa0xDQmtiMjVsT2lCMGNuVmxmVHRjYmlBZ2NHOXBiblFnUFNBa1lYUW9UeXdnYVc1a1pYZ3BPMXh1SUNCMGFHbHpMbDlwSUNzOUlIQnZhVzUwTG14bGJtZDBhRHRjYmlBZ2NtVjBkWEp1SUh0MllXeDFaVG9nY0c5cGJuUXNJR1J2Ym1VNklHWmhiSE5sZlR0Y2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUVWRFRVRlRZM0pwY0hRZ05pQnplVzFpYjJ4eklITm9hVzFjYm5aaGNpQWtJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQ2NwWEc0Z0lDd2daMnh2WW1Gc0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1WjJ4dlltRnNKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVvWVhNbktWeHVJQ0FzSUVSRlUwTlNTVkJVVDFKVElDQWdJRDBnY21WeGRXbHlaU2duTGk4a0xtUmxjMk55YVhCMGIzSnpKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVsZUhCdmNuUW5LVnh1SUNBc0lISmxaR1ZtYVc1bElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbkpsWkdWbWFXNWxKeWxjYmlBZ0xDQWtabUZwYkhNZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVtWVdsc2N5Y3BYRzRnSUN3Z2MyaGhjbVZrSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVjMmhoY21Wa0p5bGNiaUFnTENCelpYUlViMU4wY21sdVoxUmhaeUE5SUhKbGNYVnBjbVVvSnk0dkpDNXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BYRzRnSUN3Z2RXbGtJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVkV2xrSnlsY2JpQWdMQ0IzYTNNZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2SkM1M2EzTW5LVnh1SUNBc0lHdGxlVTltSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbXRsZVc5bUp5bGNiaUFnTENBa2JtRnRaWE1nSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNW5aWFF0Ym1GdFpYTW5LVnh1SUNBc0lHVnVkVzFMWlhseklDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOGtMbVZ1ZFcwdGEyVjVjeWNwWEc0Z0lDd2dhWE5CY25KaGVTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1YVhNdFlYSnlZWGtuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaThrTG1GdUxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5SlQySnFaV04wSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1THlRdWRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUx5UXVjSEp2Y0dWeWRIa3RaR1Z6WXljcFhHNGdJQ3dnWjJWMFJHVnpZeUFnSUNBZ0lDQWdQU0FrTG1kbGRFUmxjMk5jYmlBZ0xDQnpaWFJFWlhOaklDQWdJQ0FnSUNBOUlDUXVjMlYwUkdWelkxeHVJQ0FzSUY5amNtVmhkR1VnSUNBZ0lDQWdJRDBnSkM1amNtVmhkR1ZjYmlBZ0xDQm5aWFJPWVcxbGN5QWdJQ0FnSUNBOUlDUnVZVzFsY3k1blpYUmNiaUFnTENBa1UzbHRZbTlzSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVUZVcxaWIyeGNiaUFnTENBa1NsTlBUaUFnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVLVTA5T1hHNGdJQ3dnWDNOMGNtbHVaMmxtZVNBZ0lDQWdQU0FrU2xOUFRpQW1KaUFrU2xOUFRpNXpkSEpwYm1kcFpubGNiaUFnTENCelpYUjBaWElnSUNBZ0lDQWdJQ0E5SUdaaGJITmxYRzRnSUN3Z1NFbEVSRVZPSUNBZ0lDQWdJQ0FnUFNCM2EzTW9KMTlvYVdSa1pXNG5LVnh1SUNBc0lHbHpSVzUxYlNBZ0lDQWdJQ0FnSUQwZ0pDNXBjMFZ1ZFcxY2JpQWdMQ0JUZVcxaWIyeFNaV2RwYzNSeWVTQTlJSE5vWVhKbFpDZ25jM2x0WW05c0xYSmxaMmx6ZEhKNUp5bGNiaUFnTENCQmJHeFRlVzFpYjJ4eklDQWdJQ0E5SUhOb1lYSmxaQ2duYzNsdFltOXNjeWNwWEc0Z0lDd2dkWE5sVG1GMGFYWmxJQ0FnSUNBZ1BTQjBlWEJsYjJZZ0pGTjViV0p2YkNBOVBTQW5ablZ1WTNScGIyNG5YRzRnSUN3Z1QySnFaV04wVUhKdmRHOGdJQ0FnUFNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTzF4dVhHNHZMeUJtWVd4c1ltRmpheUJtYjNJZ2IyeGtJRUZ1WkhKdmFXUXNJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAyT0RkY2JuWmhjaUJ6WlhSVGVXMWliMnhFWlhOaklEMGdSRVZUUTFKSlVGUlBVbE1nSmlZZ0pHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQmZZM0psWVhSbEtITmxkRVJsYzJNb2UzMHNJQ2RoSnl3Z2UxeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJSE5sZEVSbGMyTW9kR2hwY3l3Z0oyRW5MQ0I3ZG1Gc2RXVTZJRGQ5S1M1aE95QjlYRzRnSUgwcEtTNWhJQ0U5SURjN1hHNTlLU0EvSUdaMWJtTjBhVzl1S0dsMExDQnJaWGtzSUVRcGUxeHVJQ0IyWVhJZ2NISnZkRzlFWlhOaklEMGdaMlYwUkdWell5aFBZbXBsWTNSUWNtOTBieXdnYTJWNUtUdGNiaUFnYVdZb2NISnZkRzlFWlhOaktXUmxiR1YwWlNCUFltcGxZM1JRY205MGIxdHJaWGxkTzF4dUlDQnpaWFJFWlhOaktHbDBMQ0JyWlhrc0lFUXBPMXh1SUNCcFppaHdjbTkwYjBSbGMyTWdKaVlnYVhRZ0lUMDlJRTlpYW1WamRGQnliM1J2S1hObGRFUmxjMk1vVDJKcVpXTjBVSEp2ZEc4c0lHdGxlU3dnY0hKdmRHOUVaWE5qS1R0Y2JuMGdPaUJ6WlhSRVpYTmpPMXh1WEc1MllYSWdkM0poY0NBOUlHWjFibU4wYVc5dUtIUmhaeWw3WEc0Z0lIWmhjaUJ6ZVcwZ1BTQkJiR3hUZVcxaWIyeHpXM1JoWjEwZ1BTQmZZM0psWVhSbEtDUlRlVzFpYjJ3dWNISnZkRzkwZVhCbEtUdGNiaUFnYzNsdExsOXJJRDBnZEdGbk8xeHVJQ0JFUlZORFVrbFFWRTlTVXlBbUppQnpaWFIwWlhJZ0ppWWdjMlYwVTNsdFltOXNSR1Z6WXloUFltcGxZM1JRY205MGJ5d2dkR0ZuTENCN1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJSE5sZERvZ1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQ0FnYVdZb2FHRnpLSFJvYVhNc0lFaEpSRVJGVGlrZ0ppWWdhR0Z6S0hSb2FYTmJTRWxFUkVWT1hTd2dkR0ZuS1NsMGFHbHpXMGhKUkVSRlRsMWJkR0ZuWFNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzJWMFUzbHRZbTlzUkdWell5aDBhR2x6TENCMFlXY3NJR055WldGMFpVUmxjMk1vTVN3Z2RtRnNkV1VwS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCeVpYUjFjbTRnYzNsdE8xeHVmVHRjYmx4dWRtRnlJR2x6VTNsdFltOXNJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHbDBJRDA5SUNkemVXMWliMnduTzF4dWZUdGNibHh1ZG1GeUlDUmtaV1pwYm1WUWNtOXdaWEowZVNBOUlHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblI1S0dsMExDQnJaWGtzSUVRcGUxeHVJQ0JwWmloRUlDWW1JR2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtwS1h0Y2JpQWdJQ0JwWmlnaFJDNWxiblZ0WlhKaFlteGxLWHRjYmlBZ0lDQWdJR2xtS0NGb1lYTW9hWFFzSUVoSlJFUkZUaWtwYzJWMFJHVnpZeWhwZEN3Z1NFbEVSRVZPTENCamNtVmhkR1ZFWlhOaktERXNJSHQ5S1NrN1hHNGdJQ0FnSUNCcGRGdElTVVJFUlU1ZFcydGxlVjBnUFNCMGNuVmxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppaG9ZWE1vYVhRc0lFaEpSRVJGVGlrZ0ppWWdhWFJiU0VsRVJFVk9YVnRyWlhsZEtXbDBXMGhKUkVSRlRsMWJhMlY1WFNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnUkNBOUlGOWpjbVZoZEdVb1JDd2dlMlZ1ZFcxbGNtRmliR1U2SUdOeVpXRjBaVVJsYzJNb01Dd2dabUZzYzJVcGZTazdYRzRnSUNBZ2ZTQnlaWFIxY200Z2MyVjBVM2x0WW05c1JHVnpZeWhwZEN3Z2EyVjVMQ0JFS1R0Y2JpQWdmU0J5WlhSMWNtNGdjMlYwUkdWell5aHBkQ3dnYTJWNUxDQkVLVHRjYm4wN1hHNTJZWElnSkdSbFptbHVaVkJ5YjNCbGNuUnBaWE1nUFNCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBhV1Z6S0dsMExDQlFLWHRjYmlBZ1lXNVBZbXBsWTNRb2FYUXBPMXh1SUNCMllYSWdhMlY1Y3lBOUlHVnVkVzFMWlhsektGQWdQU0IwYjBsUFltcGxZM1FvVUNrcFhHNGdJQ0FnTENCcElDQWdJRDBnTUZ4dUlDQWdJQ3dnYkNBOUlHdGxlWE11YkdWdVozUm9YRzRnSUNBZ0xDQnJaWGs3WEc0Z0lIZG9hV3hsS0d3Z1BpQnBLU1JrWldacGJtVlFjbTl3WlhKMGVTaHBkQ3dnYTJWNUlEMGdhMlY1YzF0cEt5dGRMQ0JRVzJ0bGVWMHBPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPMXh1ZG1GeUlDUmpjbVZoZEdVZ1BTQm1kVzVqZEdsdmJpQmpjbVZoZEdVb2FYUXNJRkFwZTF4dUlDQnlaWFIxY200Z1VDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z1gyTnlaV0YwWlNocGRDa2dPaUFrWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhmWTNKbFlYUmxLR2wwS1N3Z1VDazdYRzU5TzF4dWRtRnlJQ1J3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlNBOUlHWjFibU4wYVc5dUlIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxLR3RsZVNsN1hHNGdJSFpoY2lCRklEMGdhWE5GYm5WdExtTmhiR3dvZEdocGN5d2dhMlY1S1R0Y2JpQWdjbVYwZFhKdUlFVWdmSHdnSVdoaGN5aDBhR2x6TENCclpYa3BJSHg4SUNGb1lYTW9RV3hzVTNsdFltOXNjeXdnYTJWNUtTQjhmQ0JvWVhNb2RHaHBjeXdnU0VsRVJFVk9LU0FtSmlCMGFHbHpXMGhKUkVSRlRsMWJhMlY1WFZ4dUlDQWdJRDhnUlNBNklIUnlkV1U3WEc1OU8xeHVkbUZ5SUNSblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvYVhRc0lHdGxlU2w3WEc0Z0lIWmhjaUJFSUQwZ1oyVjBSR1Z6WXlocGRDQTlJSFJ2U1U5aWFtVmpkQ2hwZENrc0lHdGxlU2s3WEc0Z0lHbG1LRVFnSmlZZ2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dKaVlnSVNob1lYTW9hWFFzSUVoSlJFUkZUaWtnSmlZZ2FYUmJTRWxFUkVWT1hWdHJaWGxkS1NsRUxtVnVkVzFsY21GaWJHVWdQU0IwY25WbE8xeHVJQ0J5WlhSMWNtNGdSRHRjYm4wN1hHNTJZWElnSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNZ1BTQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLR2wwS1h0Y2JpQWdkbUZ5SUc1aGJXVnpJQ0E5SUdkbGRFNWhiV1Z6S0hSdlNVOWlhbVZqZENocGRDa3BYRzRnSUNBZ0xDQnlaWE4xYkhRZ1BTQmJYVnh1SUNBZ0lDd2dhU0FnSUNBZ0lEMGdNRnh1SUNBZ0lDd2dhMlY1TzF4dUlDQjNhR2xzWlNodVlXMWxjeTVzWlc1bmRHZ2dQaUJwS1dsbUtDRm9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVJRDBnYm1GdFpYTmJhU3NyWFNrZ0ppWWdhMlY1SUNFOUlFaEpSRVJGVGlseVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUdGNiblpoY2lBa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektHbDBLWHRjYmlBZ2RtRnlJRzVoYldWeklDQTlJR2RsZEU1aGJXVnpLSFJ2U1U5aWFtVmpkQ2hwZENrcFhHNGdJQ0FnTENCeVpYTjFiSFFnUFNCYlhWeHVJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCM2FHbHNaU2h1WVcxbGN5NXNaVzVuZEdnZ1BpQnBLV2xtS0doaGN5aEJiR3hUZVcxaWIyeHpMQ0JyWlhrZ1BTQnVZVzFsYzF0cEt5dGRLU2x5WlhOMWJIUXVjSFZ6YUNoQmJHeFRlVzFpYjJ4elcydGxlVjBwTzF4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUdGNiblpoY2lBa2MzUnlhVzVuYVdaNUlEMGdablZ1WTNScGIyNGdjM1J5YVc1bmFXWjVLR2wwS1h0Y2JpQWdhV1lvYVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCcGMxTjViV0p2YkNocGRDa3BjbVYwZFhKdU95QXZMeUJKUlRnZ2NtVjBkWEp1Y3lCemRISnBibWNnYjI0Z2RXNWtaV1pwYm1Wa1hHNGdJSFpoY2lCaGNtZHpJRDBnVzJsMFhWeHVJQ0FnSUN3Z2FTQWdJQ0E5SURGY2JpQWdJQ0FzSUNRa0lDQWdQU0JoY21kMWJXVnVkSE5jYmlBZ0lDQXNJSEpsY0d4aFkyVnlMQ0FrY21Wd2JHRmpaWEk3WEc0Z0lIZG9hV3hsS0NRa0xteGxibWQwYUNBK0lHa3BZWEpuY3k1d2RYTm9LQ1FrVzJrcksxMHBPMXh1SUNCeVpYQnNZV05sY2lBOUlHRnlaM05iTVYwN1hHNGdJR2xtS0hSNWNHVnZaaUJ5WlhCc1lXTmxjaUE5UFNBblpuVnVZM1JwYjI0bktTUnlaWEJzWVdObGNpQTlJSEpsY0d4aFkyVnlPMXh1SUNCcFppZ2tjbVZ3YkdGalpYSWdmSHdnSVdselFYSnlZWGtvY21Wd2JHRmpaWElwS1hKbGNHeGhZMlZ5SUQwZ1puVnVZM1JwYjI0b2EyVjVMQ0IyWVd4MVpTbDdYRzRnSUNBZ2FXWW9KSEpsY0d4aFkyVnlLWFpoYkhWbElEMGdKSEpsY0d4aFkyVnlMbU5oYkd3b2RHaHBjeXdnYTJWNUxDQjJZV3gxWlNrN1hHNGdJQ0FnYVdZb0lXbHpVM2x0WW05c0tIWmhiSFZsS1NseVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUgwN1hHNGdJR0Z5WjNOYk1WMGdQU0J5WlhCc1lXTmxjanRjYmlBZ2NtVjBkWEp1SUY5emRISnBibWRwWm5rdVlYQndiSGtvSkVwVFQwNHNJR0Z5WjNNcE8xeHVmVHRjYm5aaGNpQmlkV2RuZVVwVFQwNGdQU0FrWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ2RtRnlJRk1nUFNBa1UzbHRZbTlzS0NrN1hHNGdJQzh2SUUxVElFVmtaMlVnWTI5dWRtVnlkSE1nYzNsdFltOXNJSFpoYkhWbGN5QjBieUJLVTA5T0lHRnpJSHQ5WEc0Z0lDOHZJRmRsWWt0cGRDQmpiMjUyWlhKMGN5QnplVzFpYjJ3Z2RtRnNkV1Z6SUhSdklFcFRUMDRnWVhNZ2JuVnNiRnh1SUNBdkx5QldPQ0IwYUhKdmQzTWdiMjRnWW05NFpXUWdjM2x0WW05c2MxeHVJQ0J5WlhSMWNtNGdYM04wY21sdVoybG1lU2hiVTEwcElDRTlJQ2RiYm5Wc2JGMG5JSHg4SUY5emRISnBibWRwWm5rb2UyRTZJRk45S1NBaFBTQW5lMzBuSUh4OElGOXpkSEpwYm1kcFpua29UMkpxWldOMEtGTXBLU0FoUFNBbmUzMG5PMXh1ZlNrN1hHNWNiaTh2SURFNUxqUXVNUzR4SUZONWJXSnZiQ2hiWkdWelkzSnBjSFJwYjI1ZEtWeHVhV1lvSVhWelpVNWhkR2wyWlNsN1hHNGdJQ1JUZVcxaWIyd2dQU0JtZFc1amRHbHZiaUJUZVcxaWIyd29LWHRjYmlBZ0lDQnBaaWhwYzFONWJXSnZiQ2gwYUdsektTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb0oxTjViV0p2YkNCcGN5QnViM1FnWVNCamIyNXpkSEoxWTNSdmNpY3BPMXh1SUNBZ0lISmxkSFZ5YmlCM2NtRndLSFZwWkNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01DQS9JR0Z5WjNWdFpXNTBjMXN3WFNBNklIVnVaR1ZtYVc1bFpDa3BPMXh1SUNCOU8xeHVJQ0J5WldSbFptbHVaU2drVTNsdFltOXNMbkJ5YjNSdmRIbHdaU3dnSjNSdlUzUnlhVzVuSnl3Z1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tYdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhenRjYmlBZ2ZTazdYRzVjYmlBZ2FYTlRlVzFpYjJ3Z1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbDBJR2x1YzNSaGJtTmxiMllnSkZONWJXSnZiRHRjYmlBZ2ZUdGNibHh1SUNBa0xtTnlaV0YwWlNBZ0lDQWdQU0FrWTNKbFlYUmxPMXh1SUNBa0xtbHpSVzUxYlNBZ0lDQWdQU0FrY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN1hHNGdJQ1F1WjJWMFJHVnpZeUFnSUNBOUlDUm5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJN1hHNGdJQ1F1YzJWMFJHVnpZeUFnSUNBOUlDUmtaV1pwYm1WUWNtOXdaWEowZVR0Y2JpQWdKQzV6WlhSRVpYTmpjeUFnSUQwZ0pHUmxabWx1WlZCeWIzQmxjblJwWlhNN1hHNGdJQ1F1WjJWMFRtRnRaWE1nSUNBOUlDUnVZVzFsY3k1blpYUWdQU0FrWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3p0Y2JpQWdKQzVuWlhSVGVXMWliMnh6SUQwZ0pHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenRjYmx4dUlDQnBaaWhFUlZORFVrbFFWRTlTVXlBbUppQWhjbVZ4ZFdseVpTZ25MaThrTG14cFluSmhjbmtuS1NsN1hHNGdJQ0FnY21Wa1pXWnBibVVvVDJKcVpXTjBVSEp2ZEc4c0lDZHdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2NzSUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTd2dkSEoxWlNrN1hHNGdJSDFjYm4xY2JseHVkbUZ5SUhONWJXSnZiRk4wWVhScFkzTWdQU0I3WEc0Z0lDOHZJREU1TGpRdU1pNHhJRk41YldKdmJDNW1iM0lvYTJWNUtWeHVJQ0FuWm05eUp6b2dablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdhR0Z6S0ZONWJXSnZiRkpsWjJsemRISjVMQ0JyWlhrZ0t6MGdKeWNwWEc0Z0lDQWdJQ0EvSUZONWJXSnZiRkpsWjJsemRISjVXMnRsZVYxY2JpQWdJQ0FnSURvZ1UzbHRZbTlzVW1WbmFYTjBjbmxiYTJWNVhTQTlJQ1JUZVcxaWIyd29hMlY1S1R0Y2JpQWdmU3hjYmlBZ0x5OGdNVGt1TkM0eUxqVWdVM2x0WW05c0xtdGxlVVp2Y2loemVXMHBYRzRnSUd0bGVVWnZjam9nWm5WdVkzUnBiMjRnYTJWNVJtOXlLR3RsZVNsN1hHNGdJQ0FnY21WMGRYSnVJR3RsZVU5bUtGTjViV0p2YkZKbFoybHpkSEo1TENCclpYa3BPMXh1SUNCOUxGeHVJQ0IxYzJWVFpYUjBaWEk2SUdaMWJtTjBhVzl1S0NsN0lITmxkSFJsY2lBOUlIUnlkV1U3SUgwc1hHNGdJSFZ6WlZOcGJYQnNaVG9nWm5WdVkzUnBiMjRvS1hzZ2MyVjBkR1Z5SUQwZ1ptRnNjMlU3SUgxY2JuMDdYRzR2THlBeE9TNDBMakl1TWlCVGVXMWliMnd1YUdGelNXNXpkR0Z1WTJWY2JpOHZJREU1TGpRdU1pNHpJRk41YldKdmJDNXBjME52Ym1OaGRGTndjbVZoWkdGaWJHVmNiaTh2SURFNUxqUXVNaTQwSUZONWJXSnZiQzVwZEdWeVlYUnZjbHh1THk4Z01Ua3VOQzR5TGpZZ1UzbHRZbTlzTG0xaGRHTm9YRzR2THlBeE9TNDBMakl1T0NCVGVXMWliMnd1Y21Wd2JHRmpaVnh1THk4Z01Ua3VOQzR5TGprZ1UzbHRZbTlzTG5ObFlYSmphRnh1THk4Z01Ua3VOQzR5TGpFd0lGTjViV0p2YkM1emNHVmphV1Z6WEc0dkx5QXhPUzQwTGpJdU1URWdVM2x0WW05c0xuTndiR2wwWEc0dkx5QXhPUzQwTGpJdU1USWdVM2x0WW05c0xuUnZVSEpwYldsMGFYWmxYRzR2THlBeE9TNDBMakl1TVRNZ1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGblhHNHZMeUF4T1M0MExqSXVNVFFnVTNsdFltOXNMblZ1YzJOdmNHRmliR1Z6WEc0a0xtVmhZMmd1WTJGc2JDZ29YRzRnSUNkb1lYTkpibk4wWVc1alpTeHBjME52Ym1OaGRGTndjbVZoWkdGaWJHVXNhWFJsY21GMGIzSXNiV0YwWTJnc2NtVndiR0ZqWlN4elpXRnlZMmdzSnlBclhHNGdJQ2R6Y0dWamFXVnpMSE53YkdsMExIUnZVSEpwYldsMGFYWmxMSFJ2VTNSeWFXNW5WR0ZuTEhWdWMyTnZjR0ZpYkdWekoxeHVLUzV6Y0d4cGRDZ25MQ2NwTENCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhaaGNpQnplVzBnUFNCM2EzTW9hWFFwTzF4dUlDQnplVzFpYjJ4VGRHRjBhV056VzJsMFhTQTlJSFZ6WlU1aGRHbDJaU0EvSUhONWJTQTZJSGR5WVhBb2MzbHRLVHRjYm4wcE8xeHVYRzV6WlhSMFpYSWdQU0IwY25WbE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeUFySUNSbGVIQnZjblF1Vnl3Z2UxTjViV0p2YkRvZ0pGTjViV0p2YkgwcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFONWJXSnZiQ2NzSUhONWJXSnZiRk4wWVhScFkzTXBPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0YxYzJWT1lYUnBkbVVzSUNkUFltcGxZM1FuTENCN1hHNGdJQzh2SURFNUxqRXVNaTR5SUU5aWFtVmpkQzVqY21WaGRHVW9UeUJiTENCUWNtOXdaWEowYVdWelhTbGNiaUFnWTNKbFlYUmxPaUFrWTNKbFlYUmxMRnh1SUNBdkx5QXhPUzR4TGpJdU5DQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWxjYmlBZ1pHVm1hVzVsVUhKdmNHVnlkSGs2SUNSa1pXWnBibVZRY205d1pYSjBlU3hjYmlBZ0x5OGdNVGt1TVM0eUxqTWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblJwWlhNb1R5d2dVSEp2Y0dWeWRHbGxjeWxjYmlBZ1pHVm1hVzVsVUhKdmNHVnlkR2xsY3pvZ0pHUmxabWx1WlZCeWIzQmxjblJwWlhNc1hHNGdJQzh2SURFNUxqRXVNaTQySUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9UeXdnVUNsY2JpQWdaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU9pQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUxGeHVJQ0F2THlBeE9TNHhMakl1TnlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loUEtWeHVJQ0JuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6T2lBa1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5eGNiaUFnTHk4Z01Ua3VNUzR5TGpnZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aFBLVnh1SUNCblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITTZJQ1JuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhOY2JuMHBPMXh1WEc0dkx5QXlOQzR6TGpJZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZG1Gc2RXVWdXeXdnY21Wd2JHRmpaWElnV3l3Z2MzQmhZMlZkWFNsY2JpUktVMDlPSUNZbUlDUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0NGMWMyVk9ZWFJwZG1VZ2ZId2dZblZuWjNsS1UwOU9LU3dnSjBwVFQwNG5MQ0I3YzNSeWFXNW5hV1o1T2lBa2MzUnlhVzVuYVdaNWZTazdYRzVjYmk4dklERTVMalF1TXk0MUlGTjViV0p2YkM1d2NtOTBiM1I1Y0dWYlFFQjBiMU4wY21sdVoxUmhaMTFjYm5ObGRGUnZVM1J5YVc1blZHRm5LQ1JUZVcxaWIyd3NJQ2RUZVcxaWIyd25LVHRjYmk4dklESXdMakl1TVM0NUlFMWhkR2hiUUVCMGIxTjBjbWx1WjFSaFoxMWNibk5sZEZSdlUzUnlhVzVuVkdGbktFMWhkR2dzSUNkTllYUm9KeXdnZEhKMVpTazdYRzR2THlBeU5DNHpMak1nU2xOUFRsdEFRSFJ2VTNSeWFXNW5WR0ZuWFZ4dWMyVjBWRzlUZEhKcGJtZFVZV2NvWjJ4dlltRnNMa3BUVDA0c0lDZEtVMDlPSnl3Z2RISjFaU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWxjell1WVhKeVlYa3VhWFJsY21GMGIzSW5LVHRjYm5aaGNpQkpkR1Z5WVhSdmNuTWdQU0J5WlhGMWFYSmxLQ2N1THlRdWFYUmxjbUYwYjNKekp5azdYRzVKZEdWeVlYUnZjbk11VG05a1pVeHBjM1FnUFNCSmRHVnlZWFJ2Y25NdVNGUk5URU52Ykd4bFkzUnBiMjRnUFNCSmRHVnlZWFJ2Y25NdVFYSnlZWGs3SWl3aUx5OGdjMmhwYlNCbWIzSWdkWE5wYm1jZ2NISnZZMlZ6Y3lCcGJpQmljbTkzYzJWeVhHNWNiblpoY2lCd2NtOWpaWE56SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN2ZUdGNiblpoY2lCeGRXVjFaU0E5SUZ0ZE8xeHVkbUZ5SUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc1MllYSWdZM1Z5Y21WdWRGRjFaWFZsTzF4dWRtRnlJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVZjRTVsZUhSVWFXTnJLQ2tnZTF4dUlDQWdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2FXWWdLR04xY25KbGJuUlJkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ2NYVmxkV1VnUFNCamRYSnlaVzUwVVhWbGRXVXVZMjl1WTJGMEtIRjFaWFZsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHhkV1YxWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1pISmhhVzVSZFdWMVpTZ3BPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pISmhhVzVSZFdWMVpTZ3BJSHRjYmlBZ0lDQnBaaUFvWkhKaGFXNXBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnZEdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb1kyeGxZVzVWY0U1bGVIUlVhV05yS1R0Y2JpQWdJQ0JrY21GcGJtbHVaeUE5SUhSeWRXVTdYRzVjYmlBZ0lDQjJZWElnYkdWdUlEMGdjWFZsZFdVdWJHVnVaM1JvTzF4dUlDQWdJSGRvYVd4bEtHeGxiaWtnZTF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J4ZFdWMVpUdGNiaUFnSUNBZ0lDQWdjWFZsZFdVZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ3NyY1hWbGRXVkpibVJsZUNBOElHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSmxiblJSZFdWMVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeGRXVjFaVWx1WkdWNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdZM1Z5Y21WdWRGRjFaWFZsSUQwZ2JuVnNiRHRjYmlBZ0lDQmtjbUZwYm1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUdOc1pXRnlWR2x0Wlc5MWRDaDBhVzFsYjNWMEtUdGNibjFjYmx4dWNISnZZMlZ6Y3k1dVpYaDBWR2xqYXlBOUlHWjFibU4wYVc5dUlDaG1kVzRwSUh0Y2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01TazdYRzRnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4S1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F4T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21kelcya2dMU0F4WFNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnhkV1YxWlM1d2RYTm9LRzVsZHlCSmRHVnRLR1oxYml3Z1lYSm5jeWtwTzF4dUlDQWdJR2xtSUNoeGRXVjFaUzVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdJV1J5WVdsdWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1pISmhhVzVSZFdWMVpTd2dNQ2s3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVMeThnZGpnZ2JHbHJaWE1nY0hKbFpHbGpkR2xpYkdVZ2IySnFaV04wYzF4dVpuVnVZM1JwYjI0Z1NYUmxiU2htZFc0c0lHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NW1kVzRnUFNCbWRXNDdYRzRnSUNBZ2RHaHBjeTVoY25KaGVTQTlJR0Z5Y21GNU8xeHVmVnh1U1hSbGJTNXdjbTkwYjNSNWNHVXVjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11Wm5WdUxtRndjR3g1S0c1MWJHd3NJSFJvYVhNdVlYSnlZWGtwTzF4dWZUdGNibkJ5YjJObGMzTXVkR2wwYkdVZ1BTQW5Zbkp2ZDNObGNpYzdYRzV3Y205alpYTnpMbUp5YjNkelpYSWdQU0IwY25WbE8xeHVjSEp2WTJWemN5NWxibllnUFNCN2ZUdGNibkJ5YjJObGMzTXVZWEpuZGlBOUlGdGRPMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVJRDBnSnljN0lDOHZJR1Z0Y0hSNUlITjBjbWx1WnlCMGJ5QmhkbTlwWkNCeVpXZGxlSEFnYVhOemRXVnpYRzV3Y205alpYTnpMblpsY25OcGIyNXpJRDBnZTMwN1hHNWNibVoxYm1OMGFXOXVJRzV2YjNBb0tTQjdmVnh1WEc1d2NtOWpaWE56TG05dUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdVlXUmtUR2x6ZEdWdVpYSWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZibU5sSUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011YjJabUlEMGdibTl2Y0R0Y2JuQnliMk5sYzNNdWNtVnRiM1psVEdsemRHVnVaWElnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVkJiR3hNYVhOMFpXNWxjbk1nUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVsYldsMElEMGdibTl2Y0R0Y2JseHVjSEp2WTJWemN5NWlhVzVrYVc1bklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNCeWIyTmxjM011WW1sdVpHbHVaeUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1OU8xeHVYRzV3Y205alpYTnpMbU4zWkNBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJQ2N2SnlCOU8xeHVjSEp2WTJWemN5NWphR1JwY2lBOUlHWjFibU4wYVc5dUlDaGthWElwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0J5YjJObGMzTXVZMmhrYVhJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVmVHRjYm5CeWIyTmxjM011ZFcxaGMyc2dQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SURBN0lIMDdYRzRpTENJdktpcGNiaUFxSUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TkN3Z1JtRmpaV0p2YjJzc0lFbHVZeTVjYmlBcUlFRnNiQ0J5YVdkb2RITWdjbVZ6WlhKMlpXUXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUWxORUxYTjBlV3hsSUd4cFkyVnVjMlVnWm05MWJtUWdhVzRnZEdobFhHNGdLaUJvZEhSd2N6b3ZMM0poZHk1bmFYUm9kV0l1WTI5dEwyWmhZMlZpYjI5ckwzSmxaMlZ1WlhKaGRHOXlMMjFoYzNSbGNpOU1TVU5GVGxORklHWnBiR1V1SUVGdVhHNGdLaUJoWkdScGRHbHZibUZzSUdkeVlXNTBJRzltSUhCaGRHVnVkQ0J5YVdkb2RITWdZMkZ1SUdKbElHWnZkVzVrSUdsdUlIUm9aU0JRUVZSRlRsUlRJR1pwYkdVZ2FXNWNiaUFxSUhSb1pTQnpZVzFsSUdScGNtVmpkRzl5ZVM1Y2JpQXFMMXh1WEc0aEtHWjFibU4wYVc5dUtHZHNiMkpoYkNrZ2UxeHVJQ0JjSW5WelpTQnpkSEpwWTNSY0lqdGNibHh1SUNCMllYSWdhR0Z6VDNkdUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JpQWdkbUZ5SUhWdVpHVm1hVzVsWkRzZ0x5OGdUVzl5WlNCamIyMXdjbVZ6YzJsaWJHVWdkR2hoYmlCMmIybGtJREF1WEc0Z0lIWmhjaUFrVTNsdFltOXNJRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlEOGdVM2x0WW05c0lEb2dlMzA3WEc0Z0lIWmhjaUJwZEdWeVlYUnZjbE41YldKdmJDQTlJQ1JUZVcxaWIyd3VhWFJsY21GMGIzSWdmSHdnWENKQVFHbDBaWEpoZEc5eVhDSTdYRzRnSUhaaGNpQjBiMU4wY21sdVoxUmhaMU41YldKdmJDQTlJQ1JUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NnZkh3Z1hDSkFRSFJ2VTNSeWFXNW5WR0ZuWENJN1hHNWNiaUFnZG1GeUlHbHVUVzlrZFd4bElEMGdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdYQ0p2WW1wbFkzUmNJanRjYmlBZ2RtRnlJSEoxYm5ScGJXVWdQU0JuYkc5aVlXd3VjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxPMXh1SUNCcFppQW9jblZ1ZEdsdFpTa2dlMXh1SUNBZ0lHbG1JQ2hwYmsxdlpIVnNaU2tnZTF4dUlDQWdJQ0FnTHk4Z1NXWWdjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxJR2x6SUdSbFptbHVaV1FnWjJ4dlltRnNiSGtnWVc1a0lIZGxKM0psSUdsdUlHRWdiVzlrZFd4bExGeHVJQ0FnSUNBZ0x5OGdiV0ZyWlNCMGFHVWdaWGh3YjNKMGN5QnZZbXBsWTNRZ2FXUmxiblJwWTJGc0lIUnZJSEpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaUzVjYmlBZ0lDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjblZ1ZEdsdFpUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z1JHOXVKM1FnWW05MGFHVnlJR1YyWVd4MVlYUnBibWNnZEdobElISmxjM1FnYjJZZ2RHaHBjeUJtYVd4bElHbG1JSFJvWlNCeWRXNTBhVzFsSUhkaGMxeHVJQ0FnSUM4dklHRnNjbVZoWkhrZ1pHVm1hVzVsWkNCbmJHOWlZV3hzZVM1Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0F2THlCRVpXWnBibVVnZEdobElISjFiblJwYldVZ1oyeHZZbUZzYkhrZ0tHRnpJR1Y0Y0dWamRHVmtJR0o1SUdkbGJtVnlZWFJsWkNCamIyUmxLU0JoY3lCbGFYUm9aWEpjYmlBZ0x5OGdiVzlrZFd4bExtVjRjRzl5ZEhNZ0tHbG1JSGRsSjNKbElHbHVJR0VnYlc5a2RXeGxLU0J2Y2lCaElHNWxkeXdnWlcxd2RIa2diMkpxWldOMExseHVJQ0J5ZFc1MGFXMWxJRDBnWjJ4dlltRnNMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaU0E5SUdsdVRXOWtkV3hsSUQ4Z2JXOWtkV3hsTG1WNGNHOXlkSE1nT2lCN2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCM2NtRndLR2x1Ym1WeVJtNHNJRzkxZEdWeVJtNHNJSE5sYkdZc0lIUnllVXh2WTNOTWFYTjBLU0I3WEc0Z0lDQWdMeThnU1dZZ2IzVjBaWEpHYmlCd2NtOTJhV1JsWkN3Z2RHaGxiaUJ2ZFhSbGNrWnVMbkJ5YjNSdmRIbHdaU0JwYm5OMFlXNWpaVzltSUVkbGJtVnlZWFJ2Y2k1Y2JpQWdJQ0IyWVhJZ1oyVnVaWEpoZEc5eUlEMGdUMkpxWldOMExtTnlaV0YwWlNnb2IzVjBaWEpHYmlCOGZDQkhaVzVsY21GMGIzSXBMbkJ5YjNSdmRIbHdaU2s3WEc0Z0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCdVpYY2dRMjl1ZEdWNGRDaDBjbmxNYjJOelRHbHpkQ0I4ZkNCYlhTazdYRzVjYmlBZ0lDQXZMeUJVYUdVZ0xsOXBiblp2YTJVZ2JXVjBhRzlrSUhWdWFXWnBaWE1nZEdobElHbHRjR3hsYldWdWRHRjBhVzl1Y3lCdlppQjBhR1VnTG01bGVIUXNYRzRnSUNBZ0x5OGdMblJvY205M0xDQmhibVFnTG5KbGRIVnliaUJ0WlhSb2IyUnpMbHh1SUNBZ0lHZGxibVZ5WVhSdmNpNWZhVzUyYjJ0bElEMGdiV0ZyWlVsdWRtOXJaVTFsZEdodlpDaHBibTVsY2tadUxDQnpaV3htTENCamIyNTBaWGgwS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJuWlc1bGNtRjBiM0k3WEc0Z0lIMWNiaUFnY25WdWRHbHRaUzUzY21Gd0lEMGdkM0poY0R0Y2JseHVJQ0F2THlCVWNua3ZZMkYwWTJnZ2FHVnNjR1Z5SUhSdklHMXBibWx0YVhwbElHUmxiM0IwYVcxcGVtRjBhVzl1Y3k0Z1VtVjBkWEp1Y3lCaElHTnZiWEJzWlhScGIyNWNiaUFnTHk4Z2NtVmpiM0prSUd4cGEyVWdZMjl1ZEdWNGRDNTBjbmxGYm5SeWFXVnpXMmxkTG1OdmJYQnNaWFJwYjI0dUlGUm9hWE1nYVc1MFpYSm1ZV05sSUdOdmRXeGtYRzRnSUM4dklHaGhkbVVnWW1WbGJpQW9ZVzVrSUhkaGN5QndjbVYyYVc5MWMyeDVLU0JrWlhOcFoyNWxaQ0IwYnlCMFlXdGxJR0VnWTJ4dmMzVnlaU0IwYnlCaVpWeHVJQ0F2THlCcGJuWnZhMlZrSUhkcGRHaHZkWFFnWVhKbmRXMWxiblJ6TENCaWRYUWdhVzRnWVd4c0lIUm9aU0JqWVhObGN5QjNaU0JqWVhKbElHRmliM1YwSUhkbFhHNGdJQzh2SUdGc2NtVmhaSGtnYUdGMlpTQmhiaUJsZUdsemRHbHVaeUJ0WlhSb2IyUWdkMlVnZDJGdWRDQjBieUJqWVd4c0xDQnpieUIwYUdWeVpTZHpJRzV2SUc1bFpXUmNiaUFnTHk4Z2RHOGdZM0psWVhSbElHRWdibVYzSUdaMWJtTjBhVzl1SUc5aWFtVmpkQzRnVjJVZ1kyRnVJR1YyWlc0Z1oyVjBJR0YzWVhrZ2QybDBhQ0JoYzNOMWJXbHVaMXh1SUNBdkx5QjBhR1VnYldWMGFHOWtJSFJoYTJWeklHVjRZV04wYkhrZ2IyNWxJR0Z5WjNWdFpXNTBMQ0J6YVc1alpTQjBhR0YwSUdoaGNIQmxibk1nZEc4Z1ltVWdkSEoxWlZ4dUlDQXZMeUJwYmlCbGRtVnllU0JqWVhObExDQnpieUIzWlNCa2IyNG5kQ0JvWVhabElIUnZJSFJ2ZFdOb0lIUm9aU0JoY21kMWJXVnVkSE1nYjJKcVpXTjBMaUJVYUdWY2JpQWdMeThnYjI1c2VTQmhaR1JwZEdsdmJtRnNJR0ZzYkc5allYUnBiMjRnY21WeGRXbHlaV1FnYVhNZ2RHaGxJR052YlhCc1pYUnBiMjRnY21WamIzSmtMQ0IzYUdsamFGeHVJQ0F2THlCb1lYTWdZU0J6ZEdGaWJHVWdjMmhoY0dVZ1lXNWtJSE52SUdodmNHVm1kV3hzZVNCemFHOTFiR1FnWW1VZ1kyaGxZWEFnZEc4Z1lXeHNiMk5oZEdVdVhHNGdJR1oxYm1OMGFXOXVJSFJ5ZVVOaGRHTm9LR1p1TENCdlltb3NJR0Z5WnlrZ2UxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2V5QjBlWEJsT2lCY0ltNXZjbTFoYkZ3aUxDQmhjbWM2SUdadUxtTmhiR3dvYjJKcUxDQmhjbWNwSUgwN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2V5QjBlWEJsT2lCY0luUm9jbTkzWENJc0lHRnlaem9nWlhKeUlIMDdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdkbUZ5SUVkbGJsTjBZWFJsVTNWemNHVnVaR1ZrVTNSaGNuUWdQU0JjSW5OMWMzQmxibVJsWkZOMFlYSjBYQ0k3WEc0Z0lIWmhjaUJIWlc1VGRHRjBaVk4xYzNCbGJtUmxaRmxwWld4a0lEMGdYQ0p6ZFhOd1pXNWtaV1JaYVdWc1pGd2lPMXh1SUNCMllYSWdSMlZ1VTNSaGRHVkZlR1ZqZFhScGJtY2dQU0JjSW1WNFpXTjFkR2x1WjF3aU8xeHVJQ0IyWVhJZ1IyVnVVM1JoZEdWRGIyMXdiR1YwWldRZ1BTQmNJbU52YlhCc1pYUmxaRndpTzF4dVhHNGdJQzh2SUZKbGRIVnlibWx1WnlCMGFHbHpJRzlpYW1WamRDQm1jbTl0SUhSb1pTQnBibTVsY2tadUlHaGhjeUIwYUdVZ2MyRnRaU0JsWm1abFkzUWdZWE5jYmlBZ0x5OGdZbkpsWVd0cGJtY2diM1YwSUc5bUlIUm9aU0JrYVhOd1lYUmphQ0J6ZDJsMFkyZ2djM1JoZEdWdFpXNTBMbHh1SUNCMllYSWdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJDQTlJSHQ5TzF4dVhHNGdJQzh2SUVSMWJXMTVJR052Ym5OMGNuVmpkRzl5SUdaMWJtTjBhVzl1Y3lCMGFHRjBJSGRsSUhWelpTQmhjeUIwYUdVZ0xtTnZibk4wY25WamRHOXlJR0Z1WkZ4dUlDQXZMeUF1WTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbElIQnliM0JsY25ScFpYTWdabTl5SUdaMWJtTjBhVzl1Y3lCMGFHRjBJSEpsZEhWeWJpQkhaVzVsY21GMGIzSmNiaUFnTHk4Z2IySnFaV04wY3k0Z1JtOXlJR1oxYkd3Z2MzQmxZeUJqYjIxd2JHbGhibU5sTENCNWIzVWdiV0Y1SUhkcGMyZ2dkRzhnWTI5dVptbG5kWEpsSUhsdmRYSmNiaUFnTHk4Z2JXbHVhV1pwWlhJZ2JtOTBJSFJ2SUcxaGJtZHNaU0IwYUdVZ2JtRnRaWE1nYjJZZ2RHaGxjMlVnZEhkdklHWjFibU4wYVc5dWN5NWNiaUFnWm5WdVkzUnBiMjRnUjJWdVpYSmhkRzl5S0NrZ2UzMWNiaUFnWm5WdVkzUnBiMjRnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjRvS1NCN2ZWeHVJQ0JtZFc1amRHbHZiaUJIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaU2dwSUh0OVhHNWNiaUFnZG1GeUlFZHdJRDBnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVRY205MGIzUjVjR1V1Y0hKdmRHOTBlWEJsSUQwZ1IyVnVaWEpoZEc5eUxuQnliM1J2ZEhsd1pUdGNiaUFnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsSUQwZ1IzQXVZMjl1YzNSeWRXTjBiM0lnUFNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmxCeWIzUnZkSGx3WlR0Y2JpQWdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBiM0lnUFNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymp0Y2JpQWdSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVmJkRzlUZEhKcGJtZFVZV2RUZVcxaWIyeGRJRDBnUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjR1WkdsemNHeGhlVTVoYldVZ1BTQmNJa2RsYm1WeVlYUnZja1oxYm1OMGFXOXVYQ0k3WEc1Y2JpQWdMeThnU0dWc2NHVnlJR1p2Y2lCa1pXWnBibWx1WnlCMGFHVWdMbTVsZUhRc0lDNTBhSEp2ZHl3Z1lXNWtJQzV5WlhSMWNtNGdiV1YwYUc5a2N5QnZaaUIwYUdWY2JpQWdMeThnU1hSbGNtRjBiM0lnYVc1MFpYSm1ZV05sSUdsdUlIUmxjbTF6SUc5bUlHRWdjMmx1WjJ4bElDNWZhVzUyYjJ0bElHMWxkR2h2WkM1Y2JpQWdablZ1WTNScGIyNGdaR1ZtYVc1bFNYUmxjbUYwYjNKTlpYUm9iMlJ6S0hCeWIzUnZkSGx3WlNrZ2UxeHVJQ0FnSUZ0Y0ltNWxlSFJjSWl3Z1hDSjBhSEp2ZDF3aUxDQmNJbkpsZEhWeWJsd2lYUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLRzFsZEdodlpDa2dlMXh1SUNBZ0lDQWdjSEp2ZEc5MGVYQmxXMjFsZEdodlpGMGdQU0JtZFc1amRHbHZiaWhoY21jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJsdWRtOXJaU2h0WlhSb2IyUXNJR0Z5WnlrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjblZ1ZEdsdFpTNXBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVJRDBnWm5WdVkzUnBiMjRvWjJWdVJuVnVLU0I3WEc0Z0lDQWdkbUZ5SUdOMGIzSWdQU0IwZVhCbGIyWWdaMlZ1Um5WdUlEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ0ppWWdaMlZ1Um5WdUxtTnZibk4wY25WamRHOXlPMXh1SUNBZ0lISmxkSFZ5YmlCamRHOXlYRzRnSUNBZ0lDQS9JR04wYjNJZ1BUMDlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVJSHg4WEc0Z0lDQWdJQ0FnSUM4dklFWnZjaUIwYUdVZ2JtRjBhWFpsSUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1SUdOdmJuTjBjblZqZEc5eUxDQjBhR1VnWW1WemRDQjNaU0JqWVc1Y2JpQWdJQ0FnSUNBZ0x5OGdaRzhnYVhNZ2RHOGdZMmhsWTJzZ2FYUnpJQzV1WVcxbElIQnliM0JsY25SNUxseHVJQ0FnSUNBZ0lDQW9ZM1J2Y2k1a2FYTndiR0Y1VG1GdFpTQjhmQ0JqZEc5eUxtNWhiV1VwSUQwOVBTQmNJa2RsYm1WeVlYUnZja1oxYm1OMGFXOXVYQ0pjYmlBZ0lDQWdJRG9nWm1Gc2MyVTdYRzRnSUgwN1hHNWNiaUFnY25WdWRHbHRaUzV0WVhKcklEMGdablZ1WTNScGIyNG9aMlZ1Um5WdUtTQjdYRzRnSUNBZ2FXWWdLRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlrZ2UxeHVJQ0FnSUNBZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LR2RsYmtaMWJpd2dSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNVFjbTkwYjNSNWNHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCblpXNUdkVzR1WDE5d2NtOTBiMTlmSUQwZ1IyVnVaWEpoZEc5eVJuVnVZM1JwYjI1UWNtOTBiM1I1Y0dVN1hHNGdJQ0FnSUNCcFppQW9JU2gwYjFOMGNtbHVaMVJoWjFONWJXSnZiQ0JwYmlCblpXNUdkVzRwS1NCN1hHNGdJQ0FnSUNBZ0lHZGxia1oxYmx0MGIxTjBjbWx1WjFSaFoxTjViV0p2YkYwZ1BTQmNJa2RsYm1WeVlYUnZja1oxYm1OMGFXOXVYQ0k3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHZGxia1oxYmk1d2NtOTBiM1I1Y0dVZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0Vkd0tUdGNiaUFnSUNCeVpYUjFjbTRnWjJWdVJuVnVPMXh1SUNCOU8xeHVYRzRnSUM4dklGZHBkR2hwYmlCMGFHVWdZbTlrZVNCdlppQmhibmtnWVhONWJtTWdablZ1WTNScGIyNHNJR0JoZDJGcGRDQjRZQ0JwY3lCMGNtRnVjMlp2Y20xbFpDQjBiMXh1SUNBdkx5QmdlV2xsYkdRZ2NtVm5aVzVsY21GMGIzSlNkVzUwYVcxbExtRjNjbUZ3S0hncFlDd2djMjhnZEdoaGRDQjBhR1VnY25WdWRHbHRaU0JqWVc0Z2RHVnpkRnh1SUNBdkx5QmdkbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQkJkMkZwZEVGeVozVnRaVzUwWUNCMGJ5QmtaWFJsY20xcGJtVWdhV1lnZEdobElIbHBaV3hrWldRZ2RtRnNkV1VnYVhOY2JpQWdMeThnYldWaGJuUWdkRzhnWW1VZ1lYZGhhWFJsWkM0Z1UyOXRaU0J0WVhrZ1kyOXVjMmxrWlhJZ2RHaGxJRzVoYldVZ2IyWWdkR2hwY3lCdFpYUm9iMlFnZEc5dlhHNGdJQzh2SUdOMWRHVnplU3dnWW5WMElIUm9aWGtnWVhKbElHTjFjbTExWkdkbGIyNXpMbHh1SUNCeWRXNTBhVzFsTG1GM2NtRndJRDBnWm5WdVkzUnBiMjRvWVhKbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkJkMkZwZEVGeVozVnRaVzUwS0dGeVp5azdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnUVhkaGFYUkJjbWQxYldWdWRDaGhjbWNwSUh0Y2JpQWdJQ0IwYUdsekxtRnlaeUE5SUdGeVp6dGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJRUZ6ZVc1alNYUmxjbUYwYjNJb1oyVnVaWEpoZEc5eUtTQjdYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNTJiMnRsS0cxbGRHaHZaQ3dnWVhKbkxDQnlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0IwY25sRFlYUmphQ2huWlc1bGNtRjBiM0piYldWMGFHOWtYU3dnWjJWdVpYSmhkRzl5TENCaGNtY3BPMXh1SUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFkyOXlaQzVoY21jcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUhaaGNpQjJZV3gxWlNBOUlISmxjM1ZzZEM1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUdsdWMzUmhibU5sYjJZZ1FYZGhhWFJCY21kMWJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZG1Gc2RXVXVZWEpuS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuWnZhMlVvWENKdVpYaDBYQ0lzSUhaaGJIVmxMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzUyYjJ0bEtGd2lkR2h5YjNkY0lpd2daWEp5TENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZCeWIyMXBjMlV1Y21WemIyeDJaU2gyWVd4MVpTa3VkR2hsYmlobWRXNWpkR2x2YmloMWJuZHlZWEJ3WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJR0VnZVdsbGJHUmxaQ0JRY205dGFYTmxJR2x6SUhKbGMyOXNkbVZrTENCcGRITWdabWx1WVd3Z2RtRnNkV1VnWW1WamIyMWxjMXh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9aU0F1ZG1Gc2RXVWdiMllnZEdobElGQnliMjFwYzJVOGUzWmhiSFZsTEdSdmJtVjlQaUJ5WlhOMWJIUWdabTl5SUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdOMWNuSmxiblFnYVhSbGNtRjBhVzl1TGlCSlppQjBhR1VnVUhKdmJXbHpaU0JwY3lCeVpXcGxZM1JsWkN3Z2FHOTNaWFpsY2l3Z2RHaGxYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2NtVnpkV3gwSUdadmNpQjBhR2x6SUdsMFpYSmhkR2x2YmlCM2FXeHNJR0psSUhKbGFtVmpkR1ZrSUhkcGRHZ2dkR2hsSUhOaGJXVmNiaUFnSUNBZ0lDQWdJQ0F2THlCeVpXRnpiMjR1SUU1dmRHVWdkR2hoZENCeVpXcGxZM1JwYjI1eklHOW1JSGxwWld4a1pXUWdVSEp2YldselpYTWdZWEpsSUc1dmRGeHVJQ0FnSUNBZ0lDQWdJQzh2SUhSb2NtOTNiaUJpWVdOcklHbHVkRzhnZEdobElHZGxibVZ5WVhSdmNpQm1kVzVqZEdsdmJpd2dZWE1nYVhNZ2RHaGxJR05oYzJWY2JpQWdJQ0FnSUNBZ0lDQXZMeUIzYUdWdUlHRnVJR0YzWVdsMFpXUWdVSEp2YldselpTQnBjeUJ5WldwbFkzUmxaQzRnVkdocGN5QmthV1ptWlhKbGJtTmxJR2x1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZbVZvWVhacGIzSWdZbVYwZDJWbGJpQjVhV1ZzWkNCaGJtUWdZWGRoYVhRZ2FYTWdhVzF3YjNKMFlXNTBMQ0JpWldOaGRYTmxJR2wwWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZV3hzYjNkeklIUm9aU0JqYjI1emRXMWxjaUIwYnlCa1pXTnBaR1VnZDJoaGRDQjBieUJrYnlCM2FYUm9JSFJvWlNCNWFXVnNaR1ZrWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjbVZxWldOMGFXOXVJQ2h6ZDJGc2JHOTNJR2wwSUdGdVpDQmpiMjUwYVc1MVpTd2diV0Z1ZFdGc2JIa2dMblJvY205M0lHbDBJR0poWTJ0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJwYm5SdklIUm9aU0JuWlc1bGNtRjBiM0lzSUdGaVlXNWtiMjRnYVhSbGNtRjBhVzl1TENCM2FHRjBaWFpsY2lrdUlGZHBkR2hjYmlBZ0lDQWdJQ0FnSUNBdkx5QmhkMkZwZEN3Z1lua2dZMjl1ZEhKaGMzUXNJSFJvWlhKbElHbHpJRzV2SUc5d2NHOXlkSFZ1YVhSNUlIUnZJR1Y0WVcxcGJtVWdkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdjbVZxWldOMGFXOXVJSEpsWVhOdmJpQnZkWFJ6YVdSbElIUm9aU0JuWlc1bGNtRjBiM0lnWm5WdVkzUnBiMjRzSUhOdklIUm9aVnh1SUNBZ0lDQWdJQ0FnSUM4dklHOXViSGtnYjNCMGFXOXVJR2x6SUhSdklIUm9jbTkzSUdsMElHWnliMjBnZEdobElHRjNZV2wwSUdWNGNISmxjM05wYjI0c0lHRnVaRnh1SUNBZ0lDQWdJQ0FnSUM4dklHeGxkQ0IwYUdVZ1oyVnVaWEpoZEc5eUlHWjFibU4wYVc5dUlHaGhibVJzWlNCMGFHVWdaWGhqWlhCMGFXOXVMbHh1SUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzUyWVd4MVpTQTlJSFZ1ZDNKaGNIQmxaRHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUgwc0lISmxhbVZqZENrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd2NtOWpaWE56SUQwOVBTQmNJbTlpYW1WamRGd2lJQ1ltSUhCeWIyTmxjM011Wkc5dFlXbHVLU0I3WEc0Z0lDQWdJQ0JwYm5admEyVWdQU0J3Y205alpYTnpMbVJ2YldGcGJpNWlhVzVrS0dsdWRtOXJaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhCeVpYWnBiM1Z6VUhKdmJXbHpaVHRjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR1Z1Y1hWbGRXVW9iV1YwYUc5a0xDQmhjbWNwSUh0Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdOaGJHeEpiblp2YTJWWGFYUm9UV1YwYUc5a1FXNWtRWEpuS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVc1MmIydGxLRzFsZEdodlpDd2dZWEpuTENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIQnlaWFpwYjNWelVISnZiV2x6WlNBOVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUdWdWNYVmxkV1VnYUdGeklHSmxaVzRnWTJGc2JHVmtJR0psWm05eVpTd2dkR2hsYmlCM1pTQjNZVzUwSUhSdklIZGhhWFFnZFc1MGFXeGNiaUFnSUNBZ0lDQWdMeThnWVd4c0lIQnlaWFpwYjNWeklGQnliMjFwYzJWeklHaGhkbVVnWW1WbGJpQnlaWE52YkhabFpDQmlaV1p2Y21VZ1kyRnNiR2x1WnlCcGJuWnZhMlVzWEc0Z0lDQWdJQ0FnSUM4dklITnZJSFJvWVhRZ2NtVnpkV3gwY3lCaGNtVWdZV3gzWVhseklHUmxiR2wyWlhKbFpDQnBiaUIwYUdVZ1kyOXljbVZqZENCdmNtUmxjaTRnU1daY2JpQWdJQ0FnSUNBZ0x5OGdaVzV4ZFdWMVpTQm9ZWE1nYm05MElHSmxaVzRnWTJGc2JHVmtJR0psWm05eVpTd2dkR2hsYmlCcGRDQnBjeUJwYlhCdmNuUmhiblFnZEc5Y2JpQWdJQ0FnSUNBZ0x5OGdZMkZzYkNCcGJuWnZhMlVnYVcxdFpXUnBZWFJsYkhrc0lIZHBkR2h2ZFhRZ2QyRnBkR2x1WnlCdmJpQmhJR05oYkd4aVlXTnJJSFJ2SUdacGNtVXNYRzRnSUNBZ0lDQWdJQzh2SUhOdklIUm9ZWFFnZEdobElHRnplVzVqSUdkbGJtVnlZWFJ2Y2lCbWRXNWpkR2x2YmlCb1lYTWdkR2hsSUc5d2NHOXlkSFZ1YVhSNUlIUnZJR1J2WEc0Z0lDQWdJQ0FnSUM4dklHRnVlU0J1WldObGMzTmhjbmtnYzJWMGRYQWdhVzRnWVNCd2NtVmthV04wWVdKc1pTQjNZWGt1SUZSb2FYTWdjSEpsWkdsamRHRmlhV3hwZEhsY2JpQWdJQ0FnSUNBZ0x5OGdhWE1nZDJoNUlIUm9aU0JRY205dGFYTmxJR052Ym5OMGNuVmpkRzl5SUhONWJtTm9jbTl1YjNWemJIa2dhVzUyYjJ0bGN5QnBkSE5jYmlBZ0lDQWdJQ0FnTHk4Z1pYaGxZM1YwYjNJZ1kyRnNiR0poWTJzc0lHRnVaQ0IzYUhrZ1lYTjVibU1nWm5WdVkzUnBiMjV6SUhONWJtTm9jbTl1YjNWemJIbGNiaUFnSUNBZ0lDQWdMeThnWlhobFkzVjBaU0JqYjJSbElHSmxabTl5WlNCMGFHVWdabWx5YzNRZ1lYZGhhWFF1SUZOcGJtTmxJSGRsSUdsdGNHeGxiV1Z1ZENCemFXMXdiR1ZjYmlBZ0lDQWdJQ0FnTHk4Z1lYTjVibU1nWm5WdVkzUnBiMjV6SUdsdUlIUmxjbTF6SUc5bUlHRnplVzVqSUdkbGJtVnlZWFJ2Y25Nc0lHbDBJR2x6SUdWemNHVmphV0ZzYkhsY2JpQWdJQ0FnSUNBZ0x5OGdhVzF3YjNKMFlXNTBJSFJ2SUdkbGRDQjBhR2x6SUhKcFoyaDBMQ0JsZG1WdUlIUm9iM1ZuYUNCcGRDQnlaWEYxYVhKbGN5QmpZWEpsTGx4dUlDQWdJQ0FnSUNCd2NtVjJhVzkxYzFCeWIyMXBjMlVnUHlCd2NtVjJhVzkxYzFCeWIyMXBjMlV1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0JqWVd4c1NXNTJiMnRsVjJsMGFFMWxkR2h2WkVGdVpFRnlaeXhjYmlBZ0lDQWdJQ0FnSUNBdkx5QkJkbTlwWkNCd2NtOXdZV2RoZEdsdVp5Qm1ZV2xzZFhKbGN5QjBieUJRY205dGFYTmxjeUJ5WlhSMWNtNWxaQ0JpZVNCc1lYUmxjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHbHVkbTlqWVhScGIyNXpJRzltSUhSb1pTQnBkR1Z5WVhSdmNpNWNiaUFnSUNBZ0lDQWdJQ0JqWVd4c1NXNTJiMnRsVjJsMGFFMWxkR2h2WkVGdVpFRnlaMXh1SUNBZ0lDQWdJQ0FwSURvZ1kyRnNiRWx1ZG05clpWZHBkR2hOWlhSb2IyUkJibVJCY21jb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkVaV1pwYm1VZ2RHaGxJSFZ1YVdacFpXUWdhR1ZzY0dWeUlHMWxkR2h2WkNCMGFHRjBJR2x6SUhWelpXUWdkRzhnYVcxd2JHVnRaVzUwSUM1dVpYaDBMRnh1SUNBZ0lDOHZJQzUwYUhKdmR5d2dZVzVrSUM1eVpYUjFjbTRnS0hObFpTQmtaV1pwYm1WSmRHVnlZWFJ2Y2sxbGRHaHZaSE1wTGx4dUlDQWdJSFJvYVhNdVgybHVkbTlyWlNBOUlHVnVjWFZsZFdVN1hHNGdJSDFjYmx4dUlDQmtaV1pwYm1WSmRHVnlZWFJ2Y2sxbGRHaHZaSE1vUVhONWJtTkpkR1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXBPMXh1WEc0Z0lDOHZJRTV2ZEdVZ2RHaGhkQ0J6YVcxd2JHVWdZWE41Ym1NZ1puVnVZM1JwYjI1eklHRnlaU0JwYlhCc1pXMWxiblJsWkNCdmJpQjBiM0FnYjJaY2JpQWdMeThnUVhONWJtTkpkR1Z5WVhSdmNpQnZZbXBsWTNSek95QjBhR1Y1SUdwMWMzUWdjbVYwZFhKdUlHRWdVSEp2YldselpTQm1iM0lnZEdobElIWmhiSFZsSUc5bVhHNGdJQzh2SUhSb1pTQm1hVzVoYkNCeVpYTjFiSFFnY0hKdlpIVmpaV1FnWW5rZ2RHaGxJR2wwWlhKaGRHOXlMbHh1SUNCeWRXNTBhVzFsTG1GemVXNWpJRDBnWm5WdVkzUnBiMjRvYVc1dVpYSkdiaXdnYjNWMFpYSkdiaXdnYzJWc1ppd2dkSEo1VEc5amMweHBjM1FwSUh0Y2JpQWdJQ0IyWVhJZ2FYUmxjaUE5SUc1bGR5QkJjM2x1WTBsMFpYSmhkRzl5S0Z4dUlDQWdJQ0FnZDNKaGNDaHBibTVsY2tadUxDQnZkWFJsY2tadUxDQnpaV3htTENCMGNubE1iMk56VEdsemRDbGNiaUFnSUNBcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhKMWJuUnBiV1V1YVhOSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlodmRYUmxja1p1S1Z4dUlDQWdJQ0FnUHlCcGRHVnlJQzh2SUVsbUlHOTFkR1Z5Um00Z2FYTWdZU0JuWlc1bGNtRjBiM0lzSUhKbGRIVnliaUIwYUdVZ1puVnNiQ0JwZEdWeVlYUnZjaTVjYmlBZ0lDQWdJRG9nYVhSbGNpNXVaWGgwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWh5WlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBMbVJ2Ym1VZ1B5QnlaWE4xYkhRdWRtRnNkV1VnT2lCcGRHVnlMbTVsZUhRb0tUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z2JXRnJaVWx1ZG05clpVMWxkR2h2WkNocGJtNWxja1p1TENCelpXeG1MQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUhOMFlYUmxJRDBnUjJWdVUzUmhkR1ZUZFhOd1pXNWtaV1JUZEdGeWREdGNibHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCcGJuWnZhMlVvYldWMGFHOWtMQ0JoY21jcElIdGNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnUjJWdVUzUmhkR1ZGZUdWamRYUnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVIyVnVaWEpoZEc5eUlHbHpJR0ZzY21WaFpIa2djblZ1Ym1sdVoxd2lLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tITjBZWFJsSUQwOVBTQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJblJvY205M1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJoY21jN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCQ1pTQm1iM0puYVhacGJtY3NJSEJsY2lBeU5TNHpMak11TXk0eklHOW1JSFJvWlNCemNHVmpPbHh1SUNBZ0lDQWdJQ0F2THlCb2RIUndjem92TDNCbGIzQnNaUzV0YjNwcGJHeGhMbTl5Wnk5K2FtOXlaVzVrYjNKbVppOWxjell0WkhKaFpuUXVhSFJ0YkNOelpXTXRaMlZ1WlhKaGRHOXljbVZ6ZFcxbFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa2IyNWxVbVZ6ZFd4MEtDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSGRvYVd4bElDaDBjblZsS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWld4bFoyRjBaU0E5SUdOdmJuUmxlSFF1WkdWc1pXZGhkR1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtaV3hsWjJGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHRaWFJvYjJRZ1BUMDlJRndpY21WMGRYSnVYQ0lnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnS0cxbGRHaHZaQ0E5UFQwZ1hDSjBhSEp2ZDF3aUlDWW1JR1JsYkdWbllYUmxMbWwwWlhKaGRHOXlXMjFsZEdodlpGMGdQVDA5SUhWdVpHVm1hVzVsWkNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFRWdjbVYwZFhKdUlHOXlJSFJvY205M0lDaDNhR1Z1SUhSb1pTQmtaV3hsWjJGMFpTQnBkR1Z5WVhSdmNpQm9ZWE1nYm04Z2RHaHliM2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzFsZEdodlpDa2dZV3gzWVhseklIUmxjbTFwYm1GMFpYTWdkR2hsSUhscFpXeGtLaUJzYjI5d0xseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVrWld4bFoyRjBaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmtaV3hsWjJGMFpTQnBkR1Z5WVhSdmNpQm9ZWE1nWVNCeVpYUjFjbTRnYldWMGFHOWtMQ0JuYVhabElHbDBJR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05vWVc1alpTQjBieUJqYkdWaGJpQjFjQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhSMWNtNU5aWFJvYjJRZ1BTQmtaV3hsWjJGMFpTNXBkR1Z5WVhSdmNsdGNJbkpsZEhWeWJsd2lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhSMWNtNU5aWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJSFJ5ZVVOaGRHTm9LSEpsZEhWeWJrMWxkR2h2WkN3Z1pHVnNaV2RoZEdVdWFYUmxjbUYwYjNJc0lHRnlaeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobElISmxkSFZ5YmlCdFpYUm9iMlFnZEdoeVpYY2dZVzRnWlhoalpYQjBhVzl1TENCc1pYUWdkR2hoZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHVjRZMlZ3ZEdsdmJpQndjbVYyWVdsc0lHOTJaWElnZEdobElHOXlhV2RwYm1Gc0lISmxkSFZ5YmlCdmNpQjBhSEp2ZHk1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYUm9iMlFnUFNCY0luUm9jbTkzWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYldWMGFHOWtJRDA5UFNCY0luSmxkSFZ5Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU52Ym5ScGJuVmxJSGRwZEdnZ2RHaGxJRzkxZEdWeUlISmxkSFZ5Yml3Z2JtOTNJSFJvWVhRZ2RHaGxJR1JsYkdWbllYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2wwWlhKaGRHOXlJR2hoY3lCaVpXVnVJSFJsY20xcGJtRjBaV1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0IwY25sRFlYUmphQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1ZuWVhSbExtbDBaWEpoZEc5eVcyMWxkR2h2WkYwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bFoyRjBaUzVwZEdWeVlYUnZjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaMXh1SUNBZ0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVrWld4bFoyRjBaU0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRXhwYTJVZ2NtVjBkWEp1YVc1bklHZGxibVZ5WVhSdmNpNTBhSEp2ZHloMWJtTmhkV2RvZENrc0lHSjFkQ0IzYVhSb2IzVjBJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYjNabGNtaGxZV1FnYjJZZ1lXNGdaWGgwY21FZ1puVnVZM1JwYjI0Z1kyRnNiQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOUlGd2lkR2h5YjNkY0lqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJFWld4bFoyRjBaU0JuWlc1bGNtRjBiM0lnY21GdUlHRnVaQ0JvWVc1a2JHVmtJR2wwY3lCdmQyNGdaWGhqWlhCMGFXOXVjeUJ6YjF4dUlDQWdJQ0FnSUNBZ0lDOHZJSEpsWjJGeVpHeGxjM01nYjJZZ2QyaGhkQ0IwYUdVZ2JXVjBhRzlrSUhkaGN5d2dkMlVnWTI5dWRHbHVkV1VnWVhNZ2FXWWdhWFFnYVhOY2JpQWdJQ0FnSUNBZ0lDQXZMeUJjSW01bGVIUmNJaUIzYVhSb0lHRnVJSFZ1WkdWbWFXNWxaQ0JoY21jdVhHNGdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0p1WlhoMFhDSTdYRzRnSUNBZ0lDQWdJQ0FnWVhKbklEMGdkVzVrWldacGJtVmtPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR2x1Wm04Z1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBibVp2TG1SdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhSYlpHVnNaV2RoZEdVdWNtVnpkV3gwVG1GdFpWMGdQU0JwYm1adkxuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNXVaWGgwSUQwZ1pHVnNaV2RoZEdVdWJtVjRkRXh2WXp0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JIWlc1VGRHRjBaVk4xYzNCbGJtUmxaRmxwWld4a08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2x1Wm04N1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYldWMGFHOWtJRDA5UFNCY0ltNWxlSFJjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUZObGRIUnBibWNnWTI5dWRHVjRkQzVmYzJWdWRDQm1iM0lnYkdWbllXTjVJSE4xY0hCdmNuUWdiMllnUW1GaVpXd25jMXh1SUNBZ0lDQWdJQ0FnSUM4dklHWjFibU4wYVc5dUxuTmxiblFnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzV6Wlc1MElEMGdZMjl1ZEdWNGRDNWZjMlZ1ZENBOUlHRnlaenRjYmx4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHMWxkR2h2WkNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSE4wWVhSbElEMDlQU0JIWlc1VGRHRjBaVk4xYzNCbGJtUmxaRk4wWVhKMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUVkbGJsTjBZWFJsUTI5dGNHeGxkR1ZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1lYSm5PMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoamIyNTBaWGgwTG1ScGMzQmhkR05vUlhoalpYQjBhVzl1S0dGeVp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmthWE53WVhSamFHVmtJR1Y0WTJWd2RHbHZiaUIzWVhNZ1kyRjFaMmgwSUdKNUlHRWdZMkYwWTJnZ1lteHZZMnNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdWdUlHeGxkQ0IwYUdGMElHTmhkR05vSUdKc2IyTnJJR2hoYm1Sc1pTQjBhR1VnWlhoalpYQjBhVzl1SUc1dmNtMWhiR3g1TGx4dUlDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a0lEMGdYQ0p1WlhoMFhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtY2dQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYldWMGFHOWtJRDA5UFNCY0luSmxkSFZ5Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVoWW5KMWNIUW9YQ0p5WlhSMWNtNWNJaXdnWVhKbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhOMFlYUmxJRDBnUjJWdVUzUmhkR1ZGZUdWamRYUnBibWM3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJSFJ5ZVVOaGRHTm9LR2x1Ym1WeVJtNHNJSE5sYkdZc0lHTnZiblJsZUhRcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpYm05eWJXRnNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCaGJpQmxlR05sY0hScGIyNGdhWE1nZEdoeWIzZHVJR1p5YjIwZ2FXNXVaWEpHYml3Z2QyVWdiR1ZoZG1VZ2MzUmhkR1VnUFQwOVhHNGdJQ0FnSUNBZ0lDQWdMeThnUjJWdVUzUmhkR1ZGZUdWamRYUnBibWNnWVc1a0lHeHZiM0FnWW1GamF5Qm1iM0lnWVc1dmRHaGxjaUJwYm5adlkyRjBhVzl1TGx4dUlDQWdJQ0FnSUNBZ0lITjBZWFJsSUQwZ1kyOXVkR1Y0ZEM1a2IyNWxYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lFZGxibE4wWVhSbFEyOXRjR3hsZEdWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUVkbGJsTjBZWFJsVTNWemNHVnVaR1ZrV1dsbGJHUTdYRzVjYmlBZ0lDQWdJQ0FnSUNCMllYSWdhVzVtYnlBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ5WldOdmNtUXVZWEpuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaRzl1WlRvZ1kyOXVkR1Y0ZEM1a2IyNWxYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpXTnZjbVF1WVhKbklEMDlQU0JEYjI1MGFXNTFaVk5sYm5ScGJtVnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQzVrWld4bFoyRjBaU0FtSmlCdFpYUm9iMlFnUFQwOUlGd2libVY0ZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRVJsYkdsaVpYSmhkR1ZzZVNCbWIzSm5aWFFnZEdobElHeGhjM1FnYzJWdWRDQjJZV3gxWlNCemJ5QjBhR0YwSUhkbElHUnZiaWQwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGalkybGtaVzUwWVd4c2VTQndZWE56SUdsMElHOXVJSFJ2SUhSb1pTQmtaV3hsWjJGMFpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lYSm5JRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXNW1ienRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCSFpXNVRkR0YwWlVOdmJYQnNaWFJsWkR0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJFYVhOd1lYUmphQ0IwYUdVZ1pYaGpaWEIwYVc5dUlHSjVJR3h2YjNCcGJtY2dZbUZqYXlCaGNtOTFibVFnZEc4Z2RHaGxYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kyOXVkR1Y0ZEM1a2FYTndZWFJqYUVWNFkyVndkR2x2YmloaGNtY3BJR05oYkd3Z1lXSnZkbVV1WEc0Z0lDQWdJQ0FnSUNBZ2JXVjBhRzlrSUQwZ1hDSjBhSEp2ZDF3aU8xeHVJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnTHk4Z1JHVm1hVzVsSUVkbGJtVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdWUyNWxlSFFzZEdoeWIzY3NjbVYwZFhKdWZTQnBiaUIwWlhKdGN5QnZaaUIwYUdWY2JpQWdMeThnZFc1cFptbGxaQ0F1WDJsdWRtOXJaU0JvWld4d1pYSWdiV1YwYUc5a0xseHVJQ0JrWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNb1IzQXBPMXh1WEc0Z0lFZHdXMmwwWlhKaGRHOXlVM2x0WW05c1hTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlPMXh1WEc0Z0lFZHdXM1J2VTNSeWFXNW5WR0ZuVTNsdFltOXNYU0E5SUZ3aVIyVnVaWEpoZEc5eVhDSTdYRzVjYmlBZ1IzQXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYQ0piYjJKcVpXTjBJRWRsYm1WeVlYUnZjbDFjSWp0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQndkWE5vVkhKNVJXNTBjbmtvYkc5amN5a2dlMXh1SUNBZ0lIWmhjaUJsYm5SeWVTQTlJSHNnZEhKNVRHOWpPaUJzYjJOeld6QmRJSDA3WEc1Y2JpQWdJQ0JwWmlBb01TQnBiaUJzYjJOektTQjdYRzRnSUNBZ0lDQmxiblJ5ZVM1allYUmphRXh2WXlBOUlHeHZZM05iTVYwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tESWdhVzRnYkc5amN5a2dlMXh1SUNBZ0lDQWdaVzUwY25rdVptbHVZV3hzZVV4dll5QTlJR3h2WTNOYk1sMDdYRzRnSUNBZ0lDQmxiblJ5ZVM1aFpuUmxja3h2WXlBOUlHeHZZM05iTTEwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NTBjbmxGYm5SeWFXVnpMbkIxYzJnb1pXNTBjbmtwTzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVnpaWFJVY25sRmJuUnllU2hsYm5SeWVTa2dlMXh1SUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JsYm5SeWVTNWpiMjF3YkdWMGFXOXVJSHg4SUh0OU8xeHVJQ0FnSUhKbFkyOXlaQzUwZVhCbElEMGdYQ0p1YjNKdFlXeGNJanRjYmlBZ0lDQmtaV3hsZEdVZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNCbGJuUnllUzVqYjIxd2JHVjBhVzl1SUQwZ2NtVmpiM0prTzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1EyOXVkR1Y0ZENoMGNubE1iMk56VEdsemRDa2dlMXh1SUNBZ0lDOHZJRlJvWlNCeWIyOTBJR1Z1ZEhKNUlHOWlhbVZqZENBb1pXWm1aV04wYVhabGJIa2dZU0IwY25rZ2MzUmhkR1Z0Wlc1MElIZHBkR2h2ZFhRZ1lTQmpZWFJqYUZ4dUlDQWdJQzh2SUc5eUlHRWdabWx1WVd4c2VTQmliRzlqYXlrZ1oybDJaWE1nZFhNZ1lTQndiR0ZqWlNCMGJ5QnpkRzl5WlNCMllXeDFaWE1nZEdoeWIzZHVJR1p5YjIxY2JpQWdJQ0F2THlCc2IyTmhkR2x2Ym5NZ2QyaGxjbVVnZEdobGNtVWdhWE1nYm04Z1pXNWpiRzl6YVc1bklIUnllU0J6ZEdGMFpXMWxiblF1WEc0Z0lDQWdkR2hwY3k1MGNubEZiblJ5YVdWeklEMGdXM3NnZEhKNVRHOWpPaUJjSW5KdmIzUmNJaUI5WFR0Y2JpQWdJQ0IwY25sTWIyTnpUR2x6ZEM1bWIzSkZZV05vS0hCMWMyaFVjbmxGYm5SeWVTd2dkR2hwY3lrN1hHNGdJQ0FnZEdocGN5NXlaWE5sZENoMGNuVmxLVHRjYmlBZ2ZWeHVYRzRnSUhKMWJuUnBiV1V1YTJWNWN5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDa2dlMXh1SUNBZ0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2EyVjVjeTV3ZFhOb0tHdGxlU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHdGxlWE11Y21WMlpYSnpaU2dwTzF4dVhHNGdJQ0FnTHk4Z1VtRjBhR1Z5SUhSb1lXNGdjbVYwZFhKdWFXNW5JR0Z1SUc5aWFtVmpkQ0IzYVhSb0lHRWdibVY0ZENCdFpYUm9iMlFzSUhkbElHdGxaWEJjYmlBZ0lDQXZMeUIwYUdsdVozTWdjMmx0Y0d4bElHRnVaQ0J5WlhSMWNtNGdkR2hsSUc1bGVIUWdablZ1WTNScGIyNGdhWFJ6Wld4bUxseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ1WlhoMEtDa2dlMXh1SUNBZ0lDQWdkMmhwYkdVZ0tHdGxlWE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCclpYbHpMbkJ2Y0NncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlHbHVJRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUXVkbUZzZFdVZ1BTQnJaWGs3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkQzVrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdWRzhnWVhadmFXUWdZM0psWVhScGJtY2dZVzRnWVdSa2FYUnBiMjVoYkNCdlltcGxZM1FzSUhkbElHcDFjM1FnYUdGdVp5QjBhR1VnTG5aaGJIVmxYRzRnSUNBZ0lDQXZMeUJoYm1RZ0xtUnZibVVnY0hKdmNHVnlkR2xsY3lCdlptWWdkR2hsSUc1bGVIUWdablZ1WTNScGIyNGdiMkpxWldOMElHbDBjMlZzWmk0Z1ZHaHBjMXh1SUNBZ0lDQWdMeThnWVd4emJ5Qmxibk4xY21WeklIUm9ZWFFnZEdobElHMXBibWxtYVdWeUlIZHBiR3dnYm05MElHRnViMjU1YldsNlpTQjBhR1VnWm5WdVkzUnBiMjR1WEc0Z0lDQWdJQ0J1WlhoMExtUnZibVVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdmVHRjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCMllXeDFaWE1vYVhSbGNtRmliR1VwSUh0Y2JpQWdJQ0JwWmlBb2FYUmxjbUZpYkdVcElIdGNiaUFnSUNBZ0lIWmhjaUJwZEdWeVlYUnZjazFsZEdodlpDQTlJR2wwWlhKaFlteGxXMmwwWlhKaGRHOXlVM2x0WW05c1hUdGNiaUFnSUNBZ0lHbG1JQ2hwZEdWeVlYUnZjazFsZEdodlpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsY21GMGIzSk5aWFJvYjJRdVkyRnNiQ2hwZEdWeVlXSnNaU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FYUmxjbUZpYkdVdWJtVjRkQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWeVlXSnNaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tDRnBjMDVoVGlocGRHVnlZV0pzWlM1c1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ0xURXNJRzVsZUhRZ1BTQm1kVzVqZEdsdmJpQnVaWGgwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ3JLMmtnUENCcGRHVnlZV0pzWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTlBkMjR1WTJGc2JDaHBkR1Z5WVdKc1pTd2dhU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRDNTJZV3gxWlNBOUlHbDBaWEpoWW14bFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwTG1SdmJtVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGVIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkQzUyWVd4MVpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCdVpYaDBMbVJ2Ym1VZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFF1Ym1WNGRDQTlJRzVsZUhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1VtVjBkWEp1SUdGdUlHbDBaWEpoZEc5eUlIZHBkR2dnYm04Z2RtRnNkV1Z6TGx4dUlDQWdJSEpsZEhWeWJpQjdJRzVsZUhRNklHUnZibVZTWlhOMWJIUWdmVHRjYmlBZ2ZWeHVJQ0J5ZFc1MGFXMWxMblpoYkhWbGN5QTlJSFpoYkhWbGN6dGNibHh1SUNCbWRXNWpkR2x2YmlCa2IyNWxVbVZ6ZFd4MEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN0lIWmhiSFZsT2lCMWJtUmxabWx1WldRc0lHUnZibVU2SUhSeWRXVWdmVHRjYmlBZ2ZWeHVYRzRnSUVOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eU9pQkRiMjUwWlhoMExGeHVYRzRnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0hOcmFYQlVaVzF3VW1WelpYUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISmxkaUE5SURBN1hHNGdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQXdPMXh1SUNBZ0lDQWdMeThnVW1WelpYUjBhVzVuSUdOdmJuUmxlSFF1WDNObGJuUWdabTl5SUd4bFoyRmplU0J6ZFhCd2IzSjBJRzltSUVKaFltVnNKM05jYmlBZ0lDQWdJQzh2SUdaMWJtTjBhVzl1TG5ObGJuUWdhVzF3YkdWdFpXNTBZWFJwYjI0dVhHNGdJQ0FnSUNCMGFHbHpMbk5sYm5RZ1BTQjBhR2x6TGw5elpXNTBJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnZEdocGN5NWtiMjVsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0IwYUdsekxtUmxiR1ZuWVhSbElEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG1admNrVmhZMmdvY21WelpYUlVjbmxGYm5SeWVTazdYRzVjYmlBZ0lDQWdJR2xtSUNnaGMydHBjRlJsYlhCU1pYTmxkQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCdVlXMWxJR2x1SUhSb2FYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5Qk9iM1FnYzNWeVpTQmhZbTkxZENCMGFHVWdiM0IwYVcxaGJDQnZjbVJsY2lCdlppQjBhR1Z6WlNCamIyNWthWFJwYjI1ek9seHVJQ0FnSUNBZ0lDQWdJR2xtSUNodVlXMWxMbU5vWVhKQmRDZ3dLU0E5UFQwZ1hDSjBYQ0lnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGelQzZHVMbU5oYkd3b2RHaHBjeXdnYm1GdFpTa2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJV2x6VG1GT0tDdHVZVzFsTG5Oc2FXTmxLREVwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGMxdHVZVzFsWFNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzNSdmNEb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IwYUdsekxtUnZibVVnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2NtOXZkRVZ1ZEhKNUlEMGdkR2hwY3k1MGNubEZiblJ5YVdWeld6QmRPMXh1SUNBZ0lDQWdkbUZ5SUhKdmIzUlNaV052Y21RZ1BTQnliMjkwUlc1MGNua3VZMjl0Y0d4bGRHbHZianRjYmlBZ0lDQWdJR2xtSUNoeWIyOTBVbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnliMjkwVW1WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjblpoYkR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWkdsemNHRjBZMmhGZUdObGNIUnBiMjQ2SUdaMWJtTjBhVzl1S0dWNFkyVndkR2x2YmlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVpHOXVaU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJsZUdObGNIUnBiMjQ3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhaaGNpQmpiMjUwWlhoMElEMGdkR2hwY3p0Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdoaGJtUnNaU2hzYjJNc0lHTmhkV2RvZENrZ2UxeHVJQ0FnSUNBZ0lDQnlaV052Y21RdWRIbHdaU0E5SUZ3aWRHaHliM2RjSWp0Y2JpQWdJQ0FnSUNBZ2NtVmpiM0prTG1GeVp5QTlJR1Y0WTJWd2RHbHZianRjYmlBZ0lDQWdJQ0FnWTI5dWRHVjRkQzV1WlhoMElEMGdiRzlqTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSVNGallYVm5hSFE3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhNdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QXRMV2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdkR2hwY3k1MGNubEZiblJ5YVdWelcybGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVmpiM0prSUQwZ1pXNTBjbmt1WTI5dGNHeGxkR2x2Ymp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWlc1MGNua3VkSEo1VEc5aklEMDlQU0JjSW5KdmIzUmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRVY0WTJWd2RHbHZiaUIwYUhKdmQyNGdiM1YwYzJsa1pTQnZaaUJoYm5rZ2RISjVJR0pzYjJOcklIUm9ZWFFnWTI5MWJHUWdhR0Z1Wkd4bFhHNGdJQ0FnSUNBZ0lDQWdMeThnYVhRc0lITnZJSE5sZENCMGFHVWdZMjl0Y0d4bGRHbHZiaUIyWVd4MVpTQnZaaUIwYUdVZ1pXNTBhWEpsSUdaMWJtTjBhVzl1SUhSdlhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdoeWIzY2dkR2hsSUdWNFkyVndkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0Z3aVpXNWtYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dWdWRISjVMblJ5ZVV4dll5QThQU0IwYUdsekxuQnlaWFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnYUdGelEyRjBZMmdnUFNCb1lYTlBkMjR1WTJGc2JDaGxiblJ5ZVN3Z1hDSmpZWFJqYUV4dlkxd2lLVHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdhR0Z6Um1sdVlXeHNlU0E5SUdoaGMwOTNiaTVqWVd4c0tHVnVkSEo1TENCY0ltWnBibUZzYkhsTWIyTmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGelEyRjBZMmdnSmlZZ2FHRnpSbWx1WVd4c2VTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNISmxkaUE4SUdWdWRISjVMbU5oZEdOb1RHOWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9ZVzVrYkdVb1pXNTBjbmt1WTJGMFkyaE1iMk1zSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG5CeVpYWWdQQ0JsYm5SeWVTNW1hVzVoYkd4NVRHOWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9ZVzVrYkdVb1pXNTBjbmt1Wm1sdVlXeHNlVXh2WXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2hoYzBOaGRHTm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdjbVYySUR3Z1pXNTBjbmt1WTJGMFkyaE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hoYm1Sc1pTaGxiblJ5ZVM1allYUmphRXh2WXl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHaGhjMFpwYm1Gc2JIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuQnlaWFlnUENCbGJuUnllUzVtYVc1aGJHeDVURzlqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVW9aVzUwY25rdVptbHVZV3hzZVV4dll5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWRISjVJSE4wWVhSbGJXVnVkQ0IzYVhSb2IzVjBJR05oZEdOb0lHOXlJR1pwYm1Gc2JIbGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHRmljblZ3ZERvZ1puVnVZM1JwYjI0b2RIbHdaU3dnWVhKbktTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxuUnllVXh2WXlBOFBTQjBhR2x6TG5CeVpYWWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lHaGhjMDkzYmk1allXeHNLR1Z1ZEhKNUxDQmNJbVpwYm1Gc2JIbE1iMk5jSWlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSEpsZGlBOElHVnVkSEo1TG1acGJtRnNiSGxNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ1ptbHVZV3hzZVVWdWRISjVJRDBnWlc1MGNuazdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHWnBibUZzYkhsRmJuUnllU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDaDBlWEJsSUQwOVBTQmNJbUp5WldGclhDSWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ2RIbHdaU0E5UFQwZ1hDSmpiMjUwYVc1MVpWd2lLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lHWnBibUZzYkhsRmJuUnllUzUwY25sTWIyTWdQRDBnWVhKbklDWW1YRzRnSUNBZ0lDQWdJQ0FnWVhKbklEdzlJR1pwYm1Gc2JIbEZiblJ5ZVM1bWFXNWhiR3g1VEc5aktTQjdYRzRnSUNBZ0lDQWdJQzh2SUVsbmJtOXlaU0IwYUdVZ1ptbHVZV3hzZVNCbGJuUnllU0JwWmlCamIyNTBjbTlzSUdseklHNXZkQ0JxZFcxd2FXNW5JSFJ2SUdGY2JpQWdJQ0FnSUNBZ0x5OGdiRzlqWVhScGIyNGdiM1YwYzJsa1pTQjBhR1VnZEhKNUwyTmhkR05vSUdKc2IyTnJMbHh1SUNBZ0lDQWdJQ0JtYVc1aGJHeDVSVzUwY25rZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdjbVZqYjNKa0lEMGdabWx1WVd4c2VVVnVkSEo1SUQ4Z1ptbHVZV3hzZVVWdWRISjVMbU52YlhCc1pYUnBiMjRnT2lCN2ZUdGNiaUFnSUNBZ0lISmxZMjl5WkM1MGVYQmxJRDBnZEhsd1pUdGNiaUFnSUNBZ0lISmxZMjl5WkM1aGNtY2dQU0JoY21jN1hHNWNiaUFnSUNBZ0lHbG1JQ2htYVc1aGJHeDVSVzUwY25rcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dVpYaDBJRDBnWm1sdVlXeHNlVVZ1ZEhKNUxtWnBibUZzYkhsTWIyTTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJYQnNaWFJsS0hKbFkyOXlaQ2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJEYjI1MGFXNTFaVk5sYm5ScGJtVnNPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiMjF3YkdWMFpUb2dablZ1WTNScGIyNG9jbVZqYjNKa0xDQmhablJsY2t4dll5a2dlMXh1SUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJbUp5WldGclhDSWdmSHhjYmlBZ0lDQWdJQ0FnSUNCeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKamIyNTBhVzUxWlZ3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUhKbFkyOXlaQzVoY21jN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0luSmxkSFZ5Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNuWmhiQ0E5SUhKbFkyOXlaQzVoY21jN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1WNGRDQTlJRndpWlc1a1hDSTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJbTV2Y20xaGJGd2lJQ1ltSUdGbWRHVnlURzlqS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1WNGRDQTlJR0ZtZEdWeVRHOWpPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm1hVzVwYzJnNklHWjFibU4wYVc5dUtHWnBibUZzYkhsTWIyTXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCMGFHbHpMblJ5ZVVWdWRISnBaWE11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lBdExXa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVkSEo1SUQwZ2RHaHBjeTUwY25sRmJuUnlhV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlc1MGNua3VabWx1WVd4c2VVeHZZeUE5UFQwZ1ptbHVZV3hzZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl0Y0d4bGRHVW9aVzUwY25rdVkyOXRjR3hsZEdsdmJpd2daVzUwY25rdVlXWjBaWEpNYjJNcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYzJWMFZISjVSVzUwY25rb1pXNTBjbmtwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCRGIyNTBhVzUxWlZObGJuUnBibVZzTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUZ3aVkyRjBZMmhjSWpvZ1puVnVZM1JwYjI0b2RISjVURzlqS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUNBdElERTdJR2tnUGowZ01Ec2dMUzFwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYm5SeWVTQTlJSFJvYVhNdWRISjVSVzUwY21sbGMxdHBYVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG5SeWVVeHZZeUE5UFQwZ2RISjVURzlqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUdWdWRISjVMbU52YlhCc1pYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJblJvY205M1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwYUhKdmQyNGdQU0J5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6WlhSVWNubEZiblJ5ZVNobGJuUnllU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhSEp2ZDI0N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVkdobElHTnZiblJsZUhRdVkyRjBZMmdnYldWMGFHOWtJRzExYzNRZ2IyNXNlU0JpWlNCallXeHNaV1FnZDJsMGFDQmhJR3h2WTJGMGFXOXVYRzRnSUNBZ0lDQXZMeUJoY21kMWJXVnVkQ0IwYUdGMElHTnZjbkpsYzNCdmJtUnpJSFJ2SUdFZ2EyNXZkMjRnWTJGMFkyZ2dZbXh2WTJzdVhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKcGJHeGxaMkZzSUdOaGRHTm9JR0YwZEdWdGNIUmNJaWs3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1JsYkdWbllYUmxXV2xsYkdRNklHWjFibU4wYVc5dUtHbDBaWEpoWW14bExDQnlaWE4xYkhST1lXMWxMQ0J1WlhoMFRHOWpLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtUmxiR1ZuWVhSbElEMGdlMXh1SUNBZ0lDQWdJQ0JwZEdWeVlYUnZjam9nZG1Gc2RXVnpLR2wwWlhKaFlteGxLU3hjYmlBZ0lDQWdJQ0FnY21WemRXeDBUbUZ0WlRvZ2NtVnpkV3gwVG1GdFpTeGNiaUFnSUNBZ0lDQWdibVY0ZEV4dll6b2dibVY0ZEV4dlkxeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdjbVYwZFhKdUlFTnZiblJwYm5WbFUyVnVkR2x1Wld3N1hHNGdJQ0FnZlZ4dUlDQjlPMXh1ZlNrb1hHNGdJQzh2SUVGdGIyNW5JSFJvWlNCMllYSnBiM1Z6SUhSeWFXTnJjeUJtYjNJZ2IySjBZV2x1YVc1bklHRWdjbVZtWlhKbGJtTmxJSFJ2SUhSb1pTQm5iRzlpWVd4Y2JpQWdMeThnYjJKcVpXTjBMQ0IwYUdseklITmxaVzF6SUhSdklHSmxJSFJvWlNCdGIzTjBJSEpsYkdsaFlteGxJSFJsWTJodWFYRjFaU0IwYUdGMElHUnZaWE1nYm05MFhHNGdJQzh2SUhWelpTQnBibVJwY21WamRDQmxkbUZzSUNoM2FHbGphQ0IyYVc5c1lYUmxjeUJEYjI1MFpXNTBJRk5sWTNWeWFYUjVJRkJ2YkdsamVTa3VYRzRnSUhSNWNHVnZaaUJuYkc5aVlXd2dQVDA5SUZ3aWIySnFaV04wWENJZ1B5Qm5iRzlpWVd3Z09seHVJQ0IwZVhCbGIyWWdkMmx1Wkc5M0lEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z2QybHVaRzkzSURwY2JpQWdkSGx3Wlc5bUlITmxiR1lnUFQwOUlGd2liMkpxWldOMFhDSWdQeUJ6Wld4bUlEb2dkR2hwYzF4dUtUdGNiaUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1THk4Z1JHbHpkSEpwWW5WMGFXOXVJR1pwYkdVZ1ptOXlJRTFsYzNOaFoyVkdZV04wYjNKNUxtcHpJRnh1THk4Z2RtVnljMmx2YmpvZ01DNHpMakJjYmk4dklFeGhjM1FnWW5WcGJHUTZJRmRsWkNCS2RXNGdNamtnTWpBeE5pQXhPRG94T0Rvek1pQkhUVlFyTURFd01DQW9WMFZUVkNsY2JseHVJV1oxYm1OMGFXOXVLR1VwZTJsbUtGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmxlSEJ2Y25SekppWmNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnYlc5a2RXeGxLVzF2WkhWc1pTNWxlSEJ2Y25SelBXVW9LVHRsYkhObElHbG1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdSbFptbHVaU1ltWkdWbWFXNWxMbUZ0WkNsa1pXWnBibVVvVzEwc1pTazdaV3h6Wlh0MllYSWdkRHQwUFZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQjNhVzVrYjNjL2QybHVaRzkzT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQm5iRzlpWVd3L1oyeHZZbUZzT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnpaV3htUDNObGJHWTZkR2hwY3l4MExrMWxjM05oWjJWR1lXTjBiM0o1UFdVb0tYMTlLR1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTdjbVYwZFhKdUlHWjFibU4wYVc5dUlIUW9aU3h5TEc0cGUyWjFibU4wYVc5dUlHOG9ZU3h6S1h0cFppZ2hjbHRoWFNsN2FXWW9JV1ZiWVYwcGUzWmhjaUIxUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlISmxjWFZwY21VbUpuSmxjWFZwY21VN2FXWW9JWE1tSm5VcGNtVjBkWEp1SUhVb1lTd2hNQ2s3YVdZb2FTbHlaWFIxY200Z2FTaGhMQ0V3S1R0MllYSWdiRDF1WlhjZ1JYSnliM0lvWENKRFlXNXViM1FnWm1sdVpDQnRiMlIxYkdVZ0oxd2lLMkVyWENJblhDSXBPM1JvY205M0lHd3VZMjlrWlQxY0lrMVBSRlZNUlY5T1QxUmZSazlWVGtSY0lpeHNmWFpoY2lCalBYSmJZVjA5ZTJWNGNHOXlkSE02ZTMxOU8yVmJZVjFiTUYwdVkyRnNiQ2hqTG1WNGNHOXlkSE1zWm5WdVkzUnBiMjRvZENsN2RtRnlJSEk5WlZ0aFhWc3hYVnQwWFR0eVpYUjFjbTRnYnloeVAzSTZkQ2w5TEdNc1l5NWxlSEJ2Y25SekxIUXNaU3h5TEc0cGZYSmxkSFZ5YmlCeVcyRmRMbVY0Y0c5eWRITjlabTl5S0haaGNpQnBQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzWVQwd08yRThiaTVzWlc1bmRHZzdZU3NyS1c4b2JsdGhYU2s3Y21WMGRYSnVJRzk5S0hzeE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBYdGNJbVJsWm1GMWJIUmNJanBsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5amNtVmhkR1ZjSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlkzSmxZWFJsWENJNk1UZDlYU3d5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlrWldacGJtVXRjSEp2Y0dWeWRIbGNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVYQ0k2TVRoOVhTd3pPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHRjSW1SbFptRjFiSFJjSWpwbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW1jbVZsZW1WY0lpa3NYMTlsYzAxdlpIVnNaVG9oTUgxOUxIdGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZabkpsWlhwbFhDSTZNVGw5WFN3ME9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBYdGNJbVJsWm1GMWJIUmNJanBsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNKY0lpa3NYMTlsYzAxdlpIVnNaVG9oTUgxOUxIdGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlYQ0k2TWpCOVhTdzFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHRjSW1SbFptRjFiSFJjSWpwbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMRjlmWlhOTmIyUjFiR1U2SVRCOWZTeDdYQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWmNJam95TVgxZExEWTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTllMXdpWkdWbVlYVnNkRndpT21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwydGxlWE5jSWlrc1gxOWxjMDF2WkhWc1pUb2hNSDE5TEh0Y0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdmEyVjVjMXdpT2pJeWZWMHNOenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejE3WENKa1pXWmhkV3gwWENJNlpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZjMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3hmWDJWelRXOWtkV3hsT2lFd2ZYMHNlMXdpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2TWpOOVhTdzRPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQWHRjSW1SbFptRjFiSFJjSWpwbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMM041YldKdmJGd2lLU3hmWDJWelRXOWtkV3hsT2lFd2ZYMHNlMXdpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNONWJXSnZiRndpT2pJMGZWMHNPVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejE3WENKa1pXWmhkV3gwWENJNlpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl6ZVcxaWIyd3ZhWFJsY21GMGIzSmNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5emVXMWliMnd2YVhSbGNtRjBiM0pjSWpveU5YMWRMREV3T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdjaTVmWDJWelRXOWtkV3hsUFNFd0xISmJYQ0prWldaaGRXeDBYQ0pkUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVNobElHbHVjM1JoYm1ObGIyWWdkQ2twZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrTmhibTV2ZENCallXeHNJR0VnWTJ4aGMzTWdZWE1nWVNCbWRXNWpkR2x2Ymx3aUtYMTlMSHQ5WFN3eE1UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzJaMWJtTjBhVzl1SUc0b1pTbDdjbVYwZFhKdUlHVW1KbVV1WDE5bGMwMXZaSFZzWlQ5bE9udGNJbVJsWm1GMWJIUmNJanBsZlgxeUxsOWZaWE5OYjJSMWJHVTlJVEE3ZG1GeUlHODlaU2hjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlVndpS1N4cFBXNG9ieWs3Y2x0Y0ltUmxabUYxYkhSY0lsMDlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0dVc2RDbDdabTl5S0haaGNpQnlQVEE3Y2p4MExteGxibWQwYUR0eUt5c3BlM1poY2lCdVBYUmJjbDA3Ymk1bGJuVnRaWEpoWW14bFBXNHVaVzUxYldWeVlXSnNaWHg4SVRFc2JpNWpiMjVtYVdkMWNtRmliR1U5SVRBc1hDSjJZV3gxWlZ3aWFXNGdiaVltS0c0dWQzSnBkR0ZpYkdVOUlUQXBMQ2d3TEdsYlhDSmtaV1poZFd4MFhDSmRLU2hsTEc0dWEyVjVMRzRwZlgxeVpYUjFjbTRnWm5WdVkzUnBiMjRvZEN4eUxHNHBlM0psZEhWeWJpQnlKaVpsS0hRdWNISnZkRzkwZVhCbExISXBMRzRtSm1Vb2RDeHVLU3gwZlgwb0tYMHNlMXdpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WkdWbWFXNWxMWEJ5YjNCbGNuUjVYQ0k2TW4xZExERXlPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZYSXVYMTlsYzAxdlpIVnNaVDBoTUR0MllYSWdiejFsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdloyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aUtTeHBQVzRvYnlrc1lUMWxLRndpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5WENJcExITTliaWhoS1R0eVcxd2laR1ZtWVhWc2RGd2lYVDFtZFc1amRHbHZiaUIxS0dVc2RDeHlLWHR1ZFd4c1BUMDlaU1ltS0dVOVJuVnVZM1JwYjI0dWNISnZkRzkwZVhCbEtUdDJZWElnYmowb01DeHpXMXdpWkdWbVlYVnNkRndpWFNrb1pTeDBLVHRwWmloMmIybGtJREE5UFQxdUtYdDJZWElnYnowb01DeHBXMXdpWkdWbVlYVnNkRndpWFNrb1pTazdjbVYwZFhKdUlHNTFiR3c5UFQxdlAzWnZhV1FnTURwMUtHOHNkQ3h5S1gxcFppaGNJblpoYkhWbFhDSnBiaUJ1S1hKbGRIVnliaUJ1TG5aaGJIVmxPM1poY2lCaFBXNHVaMlYwTzJsbUtIWnZhV1FnTUNFOVBXRXBjbVYwZFhKdUlHRXVZMkZzYkNoeUtYMTlMSHRjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDJkbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2x3aU9qUXNYQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2TlgxZExERXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZYSXVYMTlsYzAxdlpIVnNaVDBoTUR0MllYSWdiejFsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aUtTeHBQVzRvYnlrc1lUMWxLRndpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WTNKbFlYUmxYQ0lwTEhNOWJpaGhLU3gxUFdVb1hDSXVMaTlvWld4d1pYSnpMM1I1Y0dWdlpsd2lLU3hzUFc0b2RTazdjbHRjSW1SbFptRjFiSFJjSWwwOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloY0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQjBKaVp1ZFd4c0lUMDlkQ2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aVUzVndaWElnWlhod2NtVnpjMmx2YmlCdGRYTjBJR1ZwZEdobGNpQmlaU0J1ZFd4c0lHOXlJR0VnWm5WdVkzUnBiMjRzSUc1dmRDQmNJaXNvWENKMWJtUmxabWx1WldSY0lqMDlkSGx3Wlc5bUlIUS9YQ0oxYm1SbFptbHVaV1JjSWpvb01DeHNXMXdpWkdWbVlYVnNkRndpWFNrb2RDa3BLVHRsTG5CeWIzUnZkSGx3WlQwb01DeHpXMXdpWkdWbVlYVnNkRndpWFNrb2RDWW1kQzV3Y205MGIzUjVjR1VzZTJOdmJuTjBjblZqZEc5eU9udDJZV3gxWlRwbExHVnVkVzFsY21GaWJHVTZJVEVzZDNKcGRHRmliR1U2SVRBc1kyOXVabWxuZFhKaFlteGxPaUV3ZlgwcExIUW1KaWhwVzF3aVpHVm1ZWFZzZEZ3aVhUOG9NQ3hwVzF3aVpHVm1ZWFZzZEZ3aVhTa29aU3gwS1RwbExsOWZjSEp2ZEc5Zlh6MTBLWDE5TEh0Y0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyTnlaV0YwWlZ3aU9qRXNYQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2Tnl4Y0lpNHVMMmhsYkhCbGNuTXZkSGx3Wlc5bVhDSTZNVFY5WFN3eE5EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUxd2lkWE5sSUhOMGNtbGpkRndpTzJaMWJtTjBhVzl1SUc0b1pTbDdjbVYwZFhKdUlHVW1KbVV1WDE5bGMwMXZaSFZzWlQ5bE9udGNJbVJsWm1GMWJIUmNJanBsZlgxeUxsOWZaWE5OYjJSMWJHVTlJVEE3ZG1GeUlHODlaU2hjSWk0dUwyaGxiSEJsY25NdmRIbHdaVzltWENJcExHazliaWh2S1R0eVcxd2laR1ZtWVhWc2RGd2lYVDFtZFc1amRHbHZiaWhsTEhRcGUybG1LQ0ZsS1hSb2NtOTNJRzVsZHlCU1pXWmxjbVZ1WTJWRmNuSnZjaWhjSW5Sb2FYTWdhR0Z6YmlkMElHSmxaVzRnYVc1cGRHbGhiR2x6WldRZ0xTQnpkWEJsY2lncElHaGhjMjRuZENCaVpXVnVJR05oYkd4bFpGd2lLVHR5WlhSMWNtNGhkSHg4WENKdlltcGxZM1JjSWlFOVBTaGNJblZ1WkdWbWFXNWxaRndpUFQxMGVYQmxiMllnZEQ5Y0luVnVaR1ZtYVc1bFpGd2lPaWd3TEdsYlhDSmtaV1poZFd4MFhDSmRLU2gwS1NrbUpsd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JSFEvWlRwMGZYMHNlMXdpTGk0dmFHVnNjR1Z5Y3k5MGVYQmxiMlpjSWpveE5YMWRMREUxT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmWEl1WDE5bGMwMXZaSFZzWlQwaE1EdDJZWElnYnoxbEtGd2lMaTR2WTI5eVpTMXFjeTl6ZVcxaWIyd3ZhWFJsY21GMGIzSmNJaWtzYVQxdUtHOHBMR0U5WlNoY0lpNHVMMk52Y21VdGFuTXZjM2x0WW05c1hDSXBMSE05YmloaEtTeDFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhOYlhDSmtaV1poZFd4MFhDSmRKaVpjSW5ONWJXSnZiRndpUFQxMGVYQmxiMllnYVZ0Y0ltUmxabUYxYkhSY0lsMC9ablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFI1Y0dWdlppQmxmVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlNZbVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjMXRjSW1SbFptRjFiSFJjSWwwbUptVXVZMjl1YzNSeWRXTjBiM0k5UFQxelcxd2laR1ZtWVhWc2RGd2lYVDljSW5ONWJXSnZiRndpT25SNWNHVnZaaUJsZlR0eVcxd2laR1ZtWVhWc2RGd2lYVDFjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCelcxd2laR1ZtWVhWc2RGd2lYU1ltWENKemVXMWliMnhjSWowOVBYVW9hVnRjSW1SbFptRjFiSFJjSWwwcFAyWjFibU4wYVc5dUtHVXBlM0psZEhWeWJsd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUJsUDF3aWRXNWtaV1pwYm1Wa1hDSTZkU2hsS1gwNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHVW1KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhOYlhDSmtaV1poZFd4MFhDSmRKaVpsTG1OdmJuTjBjblZqZEc5eVBUMDljMXRjSW1SbFptRjFiSFJjSWwwL1hDSnplVzFpYjJ4Y0lqcGNJblZ1WkdWbWFXNWxaRndpUFQxMGVYQmxiMllnWlQ5Y0luVnVaR1ZtYVc1bFpGd2lPblVvWlNsOWZTeDdYQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiRndpT2pnc1hDSXVMaTlqYjNKbExXcHpMM041YldKdmJDOXBkR1Z5WVhSdmNsd2lPamw5WFN3eE5qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MWxLRndpY21WblpXNWxjbUYwYjNJdGNuVnVkR2x0WlZ3aUtYMHNlMXdpY21WblpXNWxjbUYwYjNJdGNuVnVkR2x0WlZ3aU9qazRmVjBzTVRjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtTnlaV0YwWlZ3aUtUdDJZWElnYmoxbEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpS1M1UFltcGxZM1E3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHNHVZM0psWVhSbEtHVXNkQ2w5ZlN4N1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0k2TXpFc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVkzSmxZWFJsWENJNk9EVjlYU3d4T0RwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTJVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1WENJcE8zWmhjaUJ1UFdVb1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0lwTGs5aWFtVmpkRHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQnVMbVJsWm1sdVpWQnliM0JsY25SNUtHVXNkQ3h5S1gxOUxIdGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWpvek1TeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lqbzRObjFkTERFNU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW1jbVZsZW1WY0lpa3NkQzVsZUhCdmNuUnpQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMazlpYW1WamRDNW1jbVZsZW1WOUxIdGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWpvek1TeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW1jbVZsZW1WY0lqbzROMzFkTERJd09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSmNJaWs3ZG1GeUlHNDlaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lpa3VUMkpxWldOME8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFwZTNKbGRIVnliaUJ1TG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhsTEhRcGZYMHNlMXdpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aU9qTXhMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjbHdpT2pnNGZWMHNNakU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrc2RDNWxlSEJ2Y25SelBXVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJcExrOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBabjBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak14TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMlpjSWpvNE9YMWRMREl5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1clpYbHpYQ0lwTEhRdVpYaHdiM0owY3oxbEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpS1M1UFltcGxZM1F1YTJWNWMzMHNlMXdpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aU9qTXhMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbXRsZVhOY0lqbzVNSDFkTERJek9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMSFF1Wlhod2IzSjBjejFsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lLUzVQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJaOUxIdGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWpvek1TeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSTZPVEY5WFN3eU5EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV6ZVcxaWIyeGNJaWtzWlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1kY0lpa3NaU2hjSWk0dUx5NHVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzVoYzNsdVl5MXBkR1Z5WVhSdmNsd2lLU3hsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pjdWMzbHRZbTlzTG05aWMyVnlkbUZpYkdWY0lpa3NkQzVsZUhCdmNuUnpQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMbE41YldKdmJIMHNlMXdpTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlZ3aU9qTXhMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMblJ2TFhOMGNtbHVaMXdpT2preUxGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c1hDSTZPVFFzWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tnk1emVXMWliMnd1WVhONWJtTXRhWFJsY21GMGIzSmNJam81TlN4Y0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1dlluTmxjblpoWW14bFhDSTZPVFo5WFN3eU5UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VhWFJsY21GMGIzSmNJaWtzWlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12ZDJWaUxtUnZiUzVwZEdWeVlXSnNaVndpS1N4MExtVjRjRzl5ZEhNOVpTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlgzZHJjeTFsZUhSY0lpa3VaaWhjSW1sMFpYSmhkRzl5WENJcGZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOTNhM010WlhoMFhDSTZPRElzWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0pjSWpvNU15eGNJaTR1THk0dUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlZ3aU9qazNmVjBzTWpZNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdhV1lvWENKbWRXNWpkR2x2Ymx3aUlUMTBlWEJsYjJZZ1pTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb1pTdGNJaUJwY3lCdWIzUWdZU0JtZFc1amRHbHZiaUZjSWlrN2NtVjBkWEp1SUdWOWZTeDdmVjBzTWpjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b0tYdDlmU3g3ZlYwc01qZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYVhNdGIySnFaV04wWENJcE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHRwWmlnaGJpaGxLU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9aU3RjSWlCcGN5QnViM1FnWVc0Z2IySnFaV04wSVZ3aUtUdHlaWFIxY200Z1pYMTlMSHRjSWk0dlgybHpMVzlpYW1WamRGd2lPalEzZlYwc01qazZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOTBieTFzWlc1bmRHaGNJaWtzYVQxbEtGd2lMaTlmZEc4dGFXNWtaWGhjSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQm1kVzVqZEdsdmJpaDBMSElzWVNsN2RtRnlJSE1zZFQxdUtIUXBMR3c5YnloMUxteGxibWQwYUNrc1l6MXBLR0VzYkNrN2FXWW9aU1ltY2lFOWNpbDdabTl5S0R0c1BtTTdLV2xtS0hNOWRWdGpLeXRkTEhNaFBYTXBjbVYwZFhKdUlUQjlaV3h6WlNCbWIzSW9PMncrWXp0akt5c3BhV1lvS0dWOGZHTWdhVzRnZFNrbUpuVmJZMTA5UFQxeUtYSmxkSFZ5YmlCbGZIeGpmSHd3TzNKbGRIVnliaUZsSmlZdE1YMTlmU3g3WENJdUwxOTBieTFwYm1SbGVGd2lPamMwTEZ3aUxpOWZkRzh0YVc5aWFtVmpkRndpT2pjMkxGd2lMaTlmZEc4dGJHVnVaM1JvWENJNk56ZDlYU3d6TURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWHQ5TG5SdlUzUnlhVzVuTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2JpNWpZV3hzS0dVcExuTnNhV05sS0Rnc0xURXBmWDBzZTMxZExETXhPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWRDNWxlSEJ2Y25SelBYdDJaWEp6YVc5dU9sd2lNaTQwTGpCY0luMDdYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JRjlmWlNZbUtGOWZaVDF1S1gwc2UzMWRMRE15T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyRXRablZ1WTNScGIyNWNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHRwWmlodUtHVXBMSFp2YVdRZ01EMDlQWFFwY21WMGRYSnVJR1U3YzNkcGRHTm9LSElwZTJOaGMyVWdNVHB5WlhSMWNtNGdablZ1WTNScGIyNG9jaWw3Y21WMGRYSnVJR1V1WTJGc2JDaDBMSElwZlR0allYTmxJREk2Y21WMGRYSnVJR1oxYm1OMGFXOXVLSElzYmlsN2NtVjBkWEp1SUdVdVkyRnNiQ2gwTEhJc2JpbDlPMk5oYzJVZ016cHlaWFIxY200Z1puVnVZM1JwYjI0b2NpeHVMRzhwZTNKbGRIVnliaUJsTG1OaGJHd29kQ3h5TEc0c2J5bDlmWEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQmxMbUZ3Y0d4NUtIUXNZWEpuZFcxbGJuUnpLWDE5ZlN4N1hDSXVMMTloTFdaMWJtTjBhVzl1WENJNk1qWjlYU3d6TXpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHBaaWgyYjJsa0lEQTlQV1VwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpUTJGdUozUWdZMkZzYkNCdFpYUm9iMlFnYjI0Z0lGd2lLMlVwTzNKbGRIVnliaUJsZlgwc2UzMWRMRE0wT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFNGbEtGd2lMaTlmWm1GcGJITmNJaWtvWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnTnlFOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSHQ5TEZ3aVlWd2lMSHRuWlhRNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z04zMTlLUzVoZlNsOUxIdGNJaTR2WDJaaGFXeHpYQ0k2TXpsOVhTd3pOVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5cGN5MXZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMbVJ2WTNWdFpXNTBMR2s5YmlodktTWW1iaWh2TG1OeVpXRjBaVVZzWlcxbGJuUXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYVQ5dkxtTnlaV0YwWlVWc1pXMWxiblFvWlNrNmUzMTlmU3g3WENJdUwxOW5iRzlpWVd4Y0lqbzBNQ3hjSWk0dlgybHpMVzlpYW1WamRGd2lPalEzZlYwc016WTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlYQ0pqYjI1emRISjFZM1J2Y2l4b1lYTlBkMjVRY205d1pYSjBlU3hwYzFCeWIzUnZkSGx3WlU5bUxIQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxMSFJ2VEc5allXeGxVM1J5YVc1bkxIUnZVM1J5YVc1bkxIWmhiSFZsVDJaY0lpNXpjR3hwZENoY0lpeGNJaWw5TEh0OVhTd3pOenBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5dlltcGxZM1F0YTJWNWMxd2lLU3h2UFdVb1hDSXVMMTl2WW1wbFkzUXRaMjl3YzF3aUtTeHBQV1VvWENJdUwxOXZZbXBsWTNRdGNHbGxYQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdDJZWElnZEQxdUtHVXBMSEk5Ynk1bU8ybG1LSElwWm05eUtIWmhjaUJoTEhNOWNpaGxLU3gxUFdrdVppeHNQVEE3Y3k1c1pXNW5kR2crYkRzcGRTNWpZV3hzS0dVc1lUMXpXMndySzEwcEppWjBMbkIxYzJnb1lTazdjbVYwZFhKdUlIUjlmU3g3WENJdUwxOXZZbXBsWTNRdFoyOXdjMXdpT2pZeExGd2lMaTlmYjJKcVpXTjBMV3RsZVhOY0lqbzJOQ3hjSWk0dlgyOWlhbVZqZEMxd2FXVmNJam8yTlgxZExETTRPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJkc2IySmhiRndpS1N4dlBXVW9YQ0l1TDE5amIzSmxYQ0lwTEdrOVpTaGNJaTR2WDJOMGVGd2lLU3hoUFdVb1hDSXVMMTlvYVdSbFhDSXBMSE05WENKd2NtOTBiM1I1Y0dWY0lpeDFQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYkN4akxHWXNjRDFsSm5VdVJpeGtQV1VtZFM1SExHZzlaU1oxTGxNc2VUMWxKblV1VUN4dFBXVW1kUzVDTEhZOVpTWjFMbGNzWHoxa1AyODZiMXQwWFh4OEtHOWJkRjA5ZTMwcExHSTlYMXR6WFN4blBXUS9ianBvUDI1YmRGMDZLRzViZEYxOGZIdDlLVnR6WFR0a0ppWW9jajEwS1R0bWIzSW9iQ0JwYmlCeUtXTTlJWEFtSm1jbUpuWnZhV1FnTUNFOVBXZGJiRjBzWXlZbWJDQnBiaUJmZkh3b1pqMWpQMmRiYkYwNmNsdHNYU3hmVzJ4ZFBXUW1KbHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUdkYmJGMC9jbHRzWFRwdEppWmpQMmtvWml4dUtUcDJKaVpuVzJ4ZFBUMW1QMloxYm1OMGFXOXVLR1VwZTNaaGNpQjBQV1oxYm1OMGFXOXVLSFFzY2l4dUtYdHBaaWgwYUdseklHbHVjM1JoYm1ObGIyWWdaU2w3YzNkcGRHTm9LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BlMk5oYzJVZ01EcHlaWFIxY200Z2JtVjNJR1U3WTJGelpTQXhPbkpsZEhWeWJpQnVaWGNnWlNoMEtUdGpZWE5sSURJNmNtVjBkWEp1SUc1bGR5QmxLSFFzY2lsOWNtVjBkWEp1SUc1bGR5QmxLSFFzY2l4dUtYMXlaWFIxY200Z1pTNWhjSEJzZVNoMGFHbHpMR0Z5WjNWdFpXNTBjeWw5TzNKbGRIVnliaUIwVzNOZFBXVmJjMTBzZEgwb1ppazZlU1ltWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1pqOXBLRVoxYm1OMGFXOXVMbU5oYkd3c1ppazZaaXg1SmlZb0tGOHVkbWx5ZEhWaGJIeDhLRjh1ZG1seWRIVmhiRDE3ZlNrcFcyeGRQV1lzWlNaMUxsSW1KbUltSmlGaVcyeGRKaVpoS0dJc2JDeG1LU2twZlR0MUxrWTlNU3gxTGtjOU1peDFMbE05TkN4MUxsQTlPQ3gxTGtJOU1UWXNkUzVYUFRNeUxIVXVWVDAyTkN4MUxsSTlNVEk0TEhRdVpYaHdiM0owY3oxMWZTeDdYQ0l1TDE5amIzSmxYQ0k2TXpFc1hDSXVMMTlqZEhoY0lqb3pNaXhjSWk0dlgyZHNiMkpoYkZ3aU9qUXdMRndpTGk5ZmFHbGtaVndpT2pReWZWMHNNems2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2RISjVlM0psZEhWeWJpRWhaU2dwZldOaGRHTm9LSFFwZTNKbGRIVnliaUV3ZlgxOUxIdDlYU3cwTURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQWFF1Wlhod2IzSjBjejFjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2QybHVaRzkzSmlaM2FXNWtiM2N1VFdGMGFEMDlUV0YwYUQ5M2FXNWtiM2M2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlITmxiR1ltSm5ObGJHWXVUV0YwYUQwOVRXRjBhRDl6Wld4bU9rWjFibU4wYVc5dUtGd2ljbVYwZFhKdUlIUm9hWE5jSWlrb0tUdGNJbTUxYldKbGNsd2lQVDEwZVhCbGIyWWdYMTluSmlZb1gxOW5QVzRwZlN4N2ZWMHNOREU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMTdmUzVvWVhOUGQyNVFjbTl3WlhKMGVUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnYmk1allXeHNLR1VzZENsOWZTeDdmVjBzTkRJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZiMkpxWldOMExXUndYQ0lwTEc4OVpTaGNJaTR2WDNCeWIzQmxjblI1TFdSbGMyTmNJaWs3ZEM1bGVIQnZjblJ6UFdVb1hDSXVMMTlrWlhOamNtbHdkRzl5YzF3aUtUOW1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUc0dVppaGxMSFFzYnlneExISXBLWDA2Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQmxXM1JkUFhJc1pYMTlMSHRjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0k2TXpRc1hDSXVMMTl2WW1wbFkzUXRaSEJjSWpvMU5peGNJaTR2WDNCeWIzQmxjblI1TFdSbGMyTmNJam8yTjMxZExEUXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQV1VvWENJdUwxOW5iRzlpWVd4Y0lpa3VaRzlqZFcxbGJuUW1KbVJ2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRIMHNlMXdpTGk5ZloyeHZZbUZzWENJNk5EQjlYU3cwTkRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3owaFpTaGNJaTR2WDJSbGMyTnlhWEIwYjNKelhDSXBKaVloWlNoY0lpNHZYMlpoYVd4elhDSXBLR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRGNoUFU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxLRndpTGk5ZlpHOXRMV055WldGMFpWd2lLU2hjSW1ScGRsd2lLU3hjSW1GY0lpeDdaMlYwT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURkOWZTa3VZWDBwZlN4N1hDSXVMMTlrWlhOamNtbHdkRzl5YzF3aU9qTTBMRndpTGk5ZlpHOXRMV055WldGMFpWd2lPak0xTEZ3aUxpOWZabUZwYkhOY0lqb3pPWDFkTERRMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMk52Wmx3aUtUdDBMbVY0Y0c5eWRITTlUMkpxWldOMEtGd2llbHdpS1M1d2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTZ3dLVDlQWW1wbFkzUTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0pUZEhKcGJtZGNJajA5YmlobEtUOWxMbk53YkdsMEtGd2lYQ0lwT2s5aWFtVmpkQ2hsS1gxOUxIdGNJaTR2WDJOdlpsd2lPak13ZlYwc05EWTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmWTI5bVhDSXBPM1F1Wlhod2IzSjBjejFCY25KaGVTNXBjMEZ5Y21GNWZIeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJa0Z5Y21GNVhDSTlQVzRvWlNsOWZTeDdYQ0l1TDE5amIyWmNJam96TUgxZExEUTNPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnlibHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsUDI1MWJHd2hQVDFsT2x3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlHVjlmU3g3ZlYwc05EZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0MllYSWdiajFsS0Z3aUxpOWZiMkpxWldOMExXTnlaV0YwWlZ3aUtTeHZQV1VvWENJdUwxOXdjbTl3WlhKMGVTMWtaWE5qWENJcExHazlaU2hjSWk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGblhDSXBMR0U5ZTMwN1pTaGNJaTR2WDJocFpHVmNJaWtvWVN4bEtGd2lMaTlmZDJ0elhDSXBLRndpYVhSbGNtRjBiM0pjSWlrc1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjMzBwTEhRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3WlM1d2NtOTBiM1I1Y0dVOWJpaGhMSHR1WlhoME9tOG9NU3h5S1gwcExHa29aU3gwSzF3aUlFbDBaWEpoZEc5eVhDSXBmWDBzZTF3aUxpOWZhR2xrWlZ3aU9qUXlMRndpTGk5ZmIySnFaV04wTFdOeVpXRjBaVndpT2pVMUxGd2lMaTlmY0hKdmNHVnlkSGt0WkdWelkxd2lPalkzTEZ3aUxpOWZjMlYwTFhSdkxYTjBjbWx1WnkxMFlXZGNJam8zTUN4Y0lpNHZYM2RyYzF3aU9qZ3pmVjBzTkRrNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanQyWVhJZ2JqMWxLRndpTGk5ZmJHbGljbUZ5ZVZ3aUtTeHZQV1VvWENJdUwxOWxlSEJ2Y25SY0lpa3NhVDFsS0Z3aUxpOWZjbVZrWldacGJtVmNJaWtzWVQxbEtGd2lMaTlmYUdsa1pWd2lLU3h6UFdVb1hDSXVMMTlvWVhOY0lpa3NkVDFsS0Z3aUxpOWZhWFJsY21GMGIzSnpYQ0lwTEd3OVpTaGNJaTR2WDJsMFpYSXRZM0psWVhSbFhDSXBMR005WlNoY0lpNHZYM05sZEMxMGJ5MXpkSEpwYm1jdGRHRm5YQ0lwTEdZOVpTaGNJaTR2WDI5aWFtVmpkQzFuY0c5Y0lpa3NjRDFsS0Z3aUxpOWZkMnR6WENJcEtGd2lhWFJsY21GMGIzSmNJaWtzWkQwaEtGdGRMbXRsZVhNbUpsd2libVY0ZEZ3aWFXNWJYUzVyWlhsektDa3BMR2c5WENKQVFHbDBaWEpoZEc5eVhDSXNlVDFjSW10bGVYTmNJaXh0UFZ3aWRtRnNkV1Z6WENJc2RqMW1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQjBhR2x6ZlR0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBMSElzWHl4aUxHY3NSU2w3YkNoeUxIUXNYeWs3ZG1GeUlHb3NkeXhQTEUwOVpuVnVZM1JwYjI0b1pTbDdhV1lvSVdRbUptVWdhVzRnVWlseVpYUjFjbTRnVWx0bFhUdHpkMmwwWTJnb1pTbDdZMkZ6WlNCNU9uSmxkSFZ5YmlCbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdVpYY2djaWgwYUdsekxHVXBmVHRqWVhObElHMDZjbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHNWxkeUJ5S0hSb2FYTXNaU2w5ZlhKbGRIVnliaUJtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1WlhjZ2NpaDBhR2x6TEdVcGZYMHNlRDEwSzF3aUlFbDBaWEpoZEc5eVhDSXNVRDFpUFQxdExHczlJVEVzVWoxbExuQnliM1J2ZEhsd1pTeFRQVkpiY0YxOGZGSmJhRjE4ZkdJbUpsSmJZbDBzUVQxVGZIeE5LR0lwTEZROVlqOVFQMDBvWENKbGJuUnlhV1Z6WENJcE9rRTZkbTlwWkNBd0xFNDlYQ0pCY25KaGVWd2lQVDEwUDFJdVpXNTBjbWxsYzN4OFV6cFRPMmxtS0U0bUppaFBQV1lvVGk1allXeHNLRzVsZHlCbEtTa3NUeUU5UFU5aWFtVmpkQzV3Y205MGIzUjVjR1VtSmloaktFOHNlQ3doTUNrc2JueDhjeWhQTEhBcGZIeGhLRThzY0N4MktTa3BMRkFtSmxNbUpsTXVibUZ0WlNFOVBXMG1KaWhyUFNFd0xFRTlablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdVeTVqWVd4c0tIUm9hWE1wZlNrc2JpWW1JVVY4ZkNGa0ppWWhheVltVWx0d1hYeDhZU2hTTEhBc1FTa3NkVnQwWFQxQkxIVmJlRjA5ZGl4aUtXbG1LR285ZTNaaGJIVmxjenBRUDBFNlRTaHRLU3hyWlhsek9tYy9RVHBOS0hrcExHVnVkSEpwWlhNNlZIMHNSU2xtYjNJb2R5QnBiaUJxS1hjZ2FXNGdVbng4YVNoU0xIY3NhbHQzWFNrN1pXeHpaU0J2S0c4dVVDdHZMa1lxS0dSOGZHc3BMSFFzYWlrN2NtVjBkWEp1SUdwOWZTeDdYQ0l1TDE5bGVIQnZjblJjSWpvek9DeGNJaTR2WDJoaGMxd2lPalF4TEZ3aUxpOWZhR2xrWlZ3aU9qUXlMRndpTGk5ZmFYUmxjaTFqY21WaGRHVmNJam8wT0N4Y0lpNHZYMmwwWlhKaGRHOXljMXdpT2pVeExGd2lMaTlmYkdsaWNtRnllVndpT2pVekxGd2lMaTlmYjJKcVpXTjBMV2R3YjF3aU9qWXlMRndpTGk5ZmNtVmtaV1pwYm1WY0lqbzJPQ3hjSWk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGblhDSTZOekFzWENJdUwxOTNhM05jSWpvNE0zMWRMRFV3T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdWUzWmhiSFZsT25Rc1pHOXVaVG9oSVdWOWZYMHNlMzFkTERVeE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBYdDlmU3g3ZlYwc05USTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV3RsZVhOY0lpa3NiejFsS0Z3aUxpOWZkRzh0YVc5aWFtVmpkRndpS1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBLWHRtYjNJb2RtRnlJSElzYVQxdktHVXBMR0U5YmlocEtTeHpQV0V1YkdWdVozUm9MSFU5TUR0elBuVTdLV2xtS0dsYmNqMWhXM1VySzExZFBUMDlkQ2x5WlhSMWNtNGdjbjE5TEh0Y0lpNHZYMjlpYW1WamRDMXJaWGx6WENJNk5qUXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelo5WFN3MU16cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MGhNSDBzZTMxZExEVTBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDNWcFpGd2lLU2hjSW0xbGRHRmNJaWtzYnoxbEtGd2lMaTlmYVhNdGIySnFaV04wWENJcExHazlaU2hjSWk0dlgyaGhjMXdpS1N4aFBXVW9YQ0l1TDE5dlltcGxZM1F0WkhCY0lpa3VaaXh6UFRBc2RUMVBZbXBsWTNRdWFYTkZlSFJsYm5OcFlteGxmSHhtZFc1amRHbHZiaWdwZTNKbGRIVnliaUV3ZlN4c1BTRmxLRndpTGk5ZlptRnBiSE5jSWlrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RTaFBZbXBsWTNRdWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5Nb2UzMHBLWDBwTEdNOVpuVnVZM1JwYjI0b1pTbDdZU2hsTEc0c2UzWmhiSFZsT250cE9sd2lUMXdpS3lBckszTXNkenA3ZlgxOUtYMHNaajFtZFc1amRHbHZiaWhsTEhRcGUybG1LQ0Z2S0dVcEtYSmxkSFZ5Ymx3aWMzbHRZbTlzWENJOVBYUjVjR1Z2WmlCbFAyVTZLRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJsUDF3aVUxd2lPbHdpVUZ3aUtTdGxPMmxtS0NGcEtHVXNiaWtwZTJsbUtDRjFLR1VwS1hKbGRIVnlibHdpUmx3aU8ybG1LQ0YwS1hKbGRIVnlibHdpUlZ3aU8yTW9aU2w5Y21WMGRYSnVJR1ZiYmwwdWFYMHNjRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LQ0ZwS0dVc2Jpa3BlMmxtS0NGMUtHVXBLWEpsZEhWeWJpRXdPMmxtS0NGMEtYSmxkSFZ5YmlFeE8yTW9aU2w5Y21WMGRYSnVJR1ZiYmwwdWQzMHNaRDFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYkNZbWFDNU9SVVZFSmlaMUtHVXBKaVloYVNobExHNHBKaVpqS0dVcExHVjlMR2c5ZEM1bGVIQnZjblJ6UFh0TFJWazZiaXhPUlVWRU9pRXhMR1poYzNSTFpYazZaaXhuWlhSWFpXRnJPbkFzYjI1R2NtVmxlbVU2WkgxOUxIdGNJaTR2WDJaaGFXeHpYQ0k2TXprc1hDSXVMMTlvWVhOY0lqbzBNU3hjSWk0dlgybHpMVzlpYW1WamRGd2lPalEzTEZ3aUxpOWZiMkpxWldOMExXUndYQ0k2TlRZc1hDSXVMMTkxYVdSY0lqbzRNSDFkTERVMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMkZ1TFc5aWFtVmpkRndpS1N4dlBXVW9YQ0l1TDE5dlltcGxZM1F0WkhCelhDSXBMR2s5WlNoY0lpNHZYMlZ1ZFcwdFluVm5MV3RsZVhOY0lpa3NZVDFsS0Z3aUxpOWZjMmhoY21Wa0xXdGxlVndpS1NoY0lrbEZYMUJTVDFSUFhDSXBMSE05Wm5WdVkzUnBiMjRvS1h0OUxIVTlYQ0p3Y205MGIzUjVjR1ZjSWl4c1BXWjFibU4wYVc5dUtDbDdkbUZ5SUhRc2NqMWxLRndpTGk5ZlpHOXRMV055WldGMFpWd2lLU2hjSW1sbWNtRnRaVndpS1N4dVBXa3ViR1Z1WjNSb0xHODlYQ0krWENJN1ptOXlLSEl1YzNSNWJHVXVaR2x6Y0d4aGVUMWNJbTV2Ym1WY0lpeGxLRndpTGk5ZmFIUnRiRndpS1M1aGNIQmxibVJEYUdsc1pDaHlLU3h5TG5OeVl6MWNJbXBoZG1GelkzSnBjSFE2WENJc2REMXlMbU52Ym5SbGJuUlhhVzVrYjNjdVpHOWpkVzFsYm5Rc2RDNXZjR1Z1S0Nrc2RDNTNjbWwwWlNoY0lqeHpZM0pwY0hRK1pHOWpkVzFsYm5RdVJqMVBZbXBsWTNROEwzTmpjbWx3ZEZ3aUsyOHBMSFF1WTJ4dmMyVW9LU3hzUFhRdVJqdHVMUzA3S1dSbGJHVjBaU0JzVzNWZFcybGJibDFkTzNKbGRIVnliaUJzS0NsOU8zUXVaWGh3YjNKMGN6MVBZbXBsWTNRdVkzSmxZWFJsZkh4bWRXNWpkR2x2YmlobExIUXBlM1poY2lCeU8zSmxkSFZ5YmlCdWRXeHNJVDA5WlQ4b2MxdDFYVDF1S0dVcExISTlibVYzSUhNc2MxdDFYVDF1ZFd4c0xISmJZVjA5WlNrNmNqMXNLQ2tzZG05cFpDQXdQVDA5ZEQ5eU9tOG9jaXgwS1gxOUxIdGNJaTR2WDJGdUxXOWlhbVZqZEZ3aU9qSTRMRndpTGk5ZlpHOXRMV055WldGMFpWd2lPak0xTEZ3aUxpOWZaVzUxYlMxaWRXY3RhMlY1YzF3aU9qTTJMRndpTGk5ZmFIUnRiRndpT2pRekxGd2lMaTlmYjJKcVpXTjBMV1J3YzF3aU9qVTNMRndpTGk5ZmMyaGhjbVZrTFd0bGVWd2lPamN4ZlYwc05UWTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmWVc0dGIySnFaV04wWENJcExHODlaU2hjSWk0dlgybGxPQzFrYjIwdFpHVm1hVzVsWENJcExHazlaU2hjSWk0dlgzUnZMWEJ5YVcxcGRHbDJaVndpS1N4aFBVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlVHR5TG1ZOVpTaGNJaTR2WDJSbGMyTnlhWEIwYjNKelhDSXBQMDlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVRwbWRXNWpkR2x2YmlobExIUXNjaWw3YVdZb2JpaGxLU3gwUFdrb2RDd2hNQ2tzYmloeUtTeHZLWFJ5ZVh0eVpYUjFjbTRnWVNobExIUXNjaWw5WTJGMFkyZ29jeWw3ZldsbUtGd2laMlYwWENKcGJpQnlmSHhjSW5ObGRGd2lhVzRnY2lsMGFISnZkeUJVZVhCbFJYSnliM0lvWENKQlkyTmxjM052Y25NZ2JtOTBJSE4xY0hCdmNuUmxaQ0ZjSWlrN2NtVjBkWEp1WENKMllXeDFaVndpYVc0Z2NpWW1LR1ZiZEYwOWNpNTJZV3gxWlNrc1pYMTlMSHRjSWk0dlgyRnVMVzlpYW1WamRGd2lPakk0TEZ3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWpvek5DeGNJaTR2WDJsbE9DMWtiMjB0WkdWbWFXNWxYQ0k2TkRRc1hDSXVMMTkwYnkxd2NtbHRhWFJwZG1WY0lqbzNPWDFkTERVM09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMjlpYW1WamRDMWtjRndpS1N4dlBXVW9YQ0l1TDE5aGJpMXZZbXBsWTNSY0lpa3NhVDFsS0Z3aUxpOWZiMkpxWldOMExXdGxlWE5jSWlrN2RDNWxlSEJ2Y25SelBXVW9YQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lLVDlQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN6cG1kVzVqZEdsdmJpaGxMSFFwZTI4b1pTazdabTl5S0haaGNpQnlMR0U5YVNoMEtTeHpQV0V1YkdWdVozUm9MSFU5TUR0elBuVTdLVzR1WmlobExISTlZVnQxS3l0ZExIUmJjbDBwTzNKbGRIVnliaUJsZlgwc2Uxd2lMaTlmWVc0dGIySnFaV04wWENJNk1qZ3NYQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lPak0wTEZ3aUxpOWZiMkpxWldOMExXUndYQ0k2TlRZc1hDSXVMMTl2WW1wbFkzUXRhMlY1YzF3aU9qWTBmVjBzTlRnNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZiMkpxWldOMExYQnBaVndpS1N4dlBXVW9YQ0l1TDE5d2NtOXdaWEowZVMxa1pYTmpYQ0lwTEdrOVpTaGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lpa3NZVDFsS0Z3aUxpOWZkRzh0Y0hKcGJXbDBhWFpsWENJcExITTlaU2hjSWk0dlgyaGhjMXdpS1N4MVBXVW9YQ0l1TDE5cFpUZ3RaRzl0TFdSbFptbHVaVndpS1N4c1BVOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0k3Y2k1bVBXVW9YQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lLVDlzT21aMWJtTjBhVzl1S0dVc2RDbDdhV1lvWlQxcEtHVXBMSFE5WVNoMExDRXdLU3gxS1hSeWVYdHlaWFIxY200Z2JDaGxMSFFwZldOaGRHTm9LSElwZTMxcFppaHpLR1VzZENrcGNtVjBkWEp1SUc4b0lXNHVaaTVqWVd4c0tHVXNkQ2tzWlZ0MFhTbDlmU3g3WENJdUwxOWtaWE5qY21sd2RHOXljMXdpT2pNMExGd2lMaTlmYUdGelhDSTZOREVzWENJdUwxOXBaVGd0Wkc5dExXUmxabWx1WlZ3aU9qUTBMRndpTGk5ZmIySnFaV04wTFhCcFpWd2lPalkxTEZ3aUxpOWZjSEp2Y0dWeWRIa3RaR1Z6WTF3aU9qWTNMRndpTGk5ZmRHOHRhVzlpYW1WamRGd2lPamMyTEZ3aUxpOWZkRzh0Y0hKcGJXbDBhWFpsWENJNk56bDlYU3cxT1RwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOTBieTFwYjJKcVpXTjBYQ0lwTEc4OVpTaGNJaTR2WDI5aWFtVmpkQzFuYjNCdVhDSXBMbVlzYVQxN2ZTNTBiMU4wY21sdVp5eGhQVndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUIzYVc1a2IzY21KbmRwYm1SdmR5WW1UMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTS9UMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9kMmx1Wkc5M0tUcGJYU3h6UFdaMWJtTjBhVzl1S0dVcGUzUnllWHR5WlhSMWNtNGdieWhsS1gxallYUmphQ2gwS1h0eVpYUjFjbTRnWVM1emJHbGpaU2dwZlgwN2RDNWxlSEJ2Y25SekxtWTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR0VtSmx3aVcyOWlhbVZqZENCWGFXNWtiM2RkWENJOVBXa3VZMkZzYkNobEtUOXpLR1VwT204b2JpaGxLU2w5ZlN4N1hDSXVMMTl2WW1wbFkzUXRaMjl3Ymx3aU9qWXdMRndpTGk5ZmRHOHRhVzlpYW1WamRGd2lPamMyZlYwc05qQTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV3RsZVhNdGFXNTBaWEp1WVd4Y0lpa3NiejFsS0Z3aUxpOWZaVzUxYlMxaWRXY3RhMlY1YzF3aUtTNWpiMjVqWVhRb1hDSnNaVzVuZEdoY0lpeGNJbkJ5YjNSdmRIbHdaVndpS1R0eUxtWTlUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTjhmR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ1S0dVc2J5bDlmU3g3WENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJNk16WXNYQ0l1TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJGd2lPall6ZlYwc05qRTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdHlMbVk5VDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVUzbHRZbTlzYzMwc2UzMWRMRFl5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgyaGhjMXdpS1N4dlBXVW9YQ0l1TDE5MGJ5MXZZbXBsWTNSY0lpa3NhVDFsS0Z3aUxpOWZjMmhoY21Wa0xXdGxlVndpS1NoY0lrbEZYMUJTVDFSUFhDSXBMR0U5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHQwTG1WNGNHOXlkSE05VDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bWZIeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaVDF2S0dVcExHNG9aU3hwS1Q5bFcybGRPbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUdVdVkyOXVjM1J5ZFdOMGIzSW1KbVVnYVc1emRHRnVZMlZ2WmlCbExtTnZibk4wY25WamRHOXlQMlV1WTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbE9tVWdhVzV6ZEdGdVkyVnZaaUJQWW1wbFkzUS9ZVHB1ZFd4c2ZYMHNlMXdpTGk5ZmFHRnpYQ0k2TkRFc1hDSXVMMTl6YUdGeVpXUXRhMlY1WENJNk56RXNYQ0l1TDE5MGJ5MXZZbXBsWTNSY0lqbzNPSDFkTERZek9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMmhoYzF3aUtTeHZQV1VvWENJdUwxOTBieTFwYjJKcVpXTjBYQ0lwTEdrOVpTaGNJaTR2WDJGeWNtRjVMV2x1WTJ4MVpHVnpYQ0lwS0NFeEtTeGhQV1VvWENJdUwxOXphR0Z5WldRdGEyVjVYQ0lwS0Z3aVNVVmZVRkpQVkU5Y0lpazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSElzY3oxdktHVXBMSFU5TUN4c1BWdGRPMlp2Y2loeUlHbHVJSE1wY2lFOVlTWW1iaWh6TEhJcEppWnNMbkIxYzJnb2NpazdabTl5S0R0MExteGxibWQwYUQ1MU95bHVLSE1zY2oxMFczVXJLMTBwSmlZb2Zta29iQ3h5S1h4OGJDNXdkWE5vS0hJcEtUdHlaWFIxY200Z2JIMTlMSHRjSWk0dlgyRnljbUY1TFdsdVkyeDFaR1Z6WENJNk1qa3NYQ0l1TDE5b1lYTmNJam8wTVN4Y0lpNHZYM05vWVhKbFpDMXJaWGxjSWpvM01TeGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lqbzNObjFkTERZME9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzWENJcExHODlaU2hjSWk0dlgyVnVkVzB0WW5WbkxXdGxlWE5jSWlrN2RDNWxlSEJ2Y25SelBVOWlhbVZqZEM1clpYbHpmSHhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnYmlobExHOHBmWDBzZTF3aUxpOWZaVzUxYlMxaWRXY3RhMlY1YzF3aU9qTTJMRndpTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXeGNJam8yTTMxZExEWTFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdjaTVtUFh0OUxuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxmU3g3ZlYwc05qWTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmWlhod2IzSjBYQ0lwTEc4OVpTaGNJaTR2WDJOdmNtVmNJaWtzYVQxbEtGd2lMaTlmWm1GcGJITmNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJOUtHOHVUMkpxWldOMGZIeDdmU2xiWlYxOGZFOWlhbVZqZEZ0bFhTeGhQWHQ5TzJGYlpWMDlkQ2h5S1N4dUtHNHVVeXR1TGtZcWFTaG1kVzVqZEdsdmJpZ3BlM0lvTVNsOUtTeGNJazlpYW1WamRGd2lMR0VwZlgwc2Uxd2lMaTlmWTI5eVpWd2lPak14TEZ3aUxpOWZaWGh3YjNKMFhDSTZNemdzWENJdUwxOW1ZV2xzYzF3aU9qTTVmVjBzTmpjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBLWHR5WlhSMWNtNTdaVzUxYldWeVlXSnNaVG9oS0RFbVpTa3NZMjl1Wm1sbmRYSmhZbXhsT2lFb01pWmxLU3gzY21sMFlXSnNaVG9oS0RRbVpTa3NkbUZzZFdVNmRIMTlmU3g3ZlYwc05qZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlaU2hjSWk0dlgyaHBaR1ZjSWlsOUxIdGNJaTR2WDJocFpHVmNJam8wTW4xZExEWTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJsekxXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOWhiaTF2WW1wbFkzUmNJaWtzYVQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0c4b1pTa3NJVzRvZENrbUptNTFiR3doUFQxMEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2loMEsxd2lPaUJqWVc0bmRDQnpaWFFnWVhNZ2NISnZkRzkwZVhCbElWd2lLWDA3ZEM1bGVIQnZjblJ6UFh0elpYUTZUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltZkh3b1hDSmZYM0J5YjNSdlgxOWNJbWx1ZTMwL1puVnVZM1JwYjI0b2RDeHlMRzRwZTNSeWVYdHVQV1VvWENJdUwxOWpkSGhjSWlrb1JuVnVZM1JwYjI0dVkyRnNiQ3hsS0Z3aUxpOWZiMkpxWldOMExXZHZjR1JjSWlrdVppaFBZbXBsWTNRdWNISnZkRzkwZVhCbExGd2lYMTl3Y205MGIxOWZYQ0lwTG5ObGRDd3lLU3h1S0hRc1cxMHBMSEk5SVNoMElHbHVjM1JoYm1ObGIyWWdRWEp5WVhrcGZXTmhkR05vS0c4cGUzSTlJVEI5Y21WMGRYSnVJR1oxYm1OMGFXOXVLR1VzZENsN2NtVjBkWEp1SUdrb1pTeDBLU3h5UDJVdVgxOXdjbTkwYjE5ZlBYUTZiaWhsTEhRcExHVjlmU2g3ZlN3aE1TazZkbTlwWkNBd0tTeGphR1ZqYXpwcGZYMHNlMXdpTGk5ZllXNHRiMkpxWldOMFhDSTZNamdzWENJdUwxOWpkSGhjSWpvek1peGNJaTR2WDJsekxXOWlhbVZqZEZ3aU9qUTNMRndpTGk5ZmIySnFaV04wTFdkdmNHUmNJam8xT0gxZExEY3dPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDI5aWFtVmpkQzFrY0Z3aUtTNW1MRzg5WlNoY0lpNHZYMmhoYzF3aUtTeHBQV1VvWENJdUwxOTNhM05jSWlrb1hDSjBiMU4wY21sdVoxUmhaMXdpS1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJVbUppRnZLR1U5Y2o5bE9tVXVjSEp2ZEc5MGVYQmxMR2twSmladUtHVXNhU3g3WTI5dVptbG5kWEpoWW14bE9pRXdMSFpoYkhWbE9uUjlLWDE5TEh0Y0lpNHZYMmhoYzF3aU9qUXhMRndpTGk5ZmIySnFaV04wTFdSd1hDSTZOVFlzWENJdUwxOTNhM05jSWpvNE0zMWRMRGN4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzTm9ZWEpsWkZ3aUtTaGNJbXRsZVhOY0lpa3NiejFsS0Z3aUxpOWZkV2xrWENJcE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdibHRsWFh4OEtHNWJaVjA5YnlobEtTbDlmU3g3WENJdUwxOXphR0Z5WldSY0lqbzNNaXhjSWk0dlgzVnBaRndpT2pnd2ZWMHNOekk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZloyeHZZbUZzWENJcExHODlYQ0pmWDJOdmNtVXRhbk5mYzJoaGNtVmtYMTljSWl4cFBXNWJiMTE4ZkNodVcyOWRQWHQ5S1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHbGJaVjE4ZkNocFcyVmRQWHQ5S1gxOUxIdGNJaTR2WDJkc2IySmhiRndpT2pRd2ZWMHNOek02VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmRHOHRhVzUwWldkbGNsd2lLU3h2UFdVb1hDSXVMMTlrWldacGJtVmtYQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDeHlLWHQyWVhJZ2FTeGhMSE05VTNSeWFXNW5LRzhvZENrcExIVTliaWh5S1N4c1BYTXViR1Z1WjNSb08zSmxkSFZ5YmlCMVBEQjhmSFUrUFd3L1pUOWNJbHdpT25admFXUWdNRG9vYVQxekxtTm9ZWEpEYjJSbFFYUW9kU2tzYVR3MU5USTVObng4YVQ0MU5qTXhPWHg4ZFNzeFBUMDliSHg4S0dFOWN5NWphR0Z5UTI5a1pVRjBLSFVyTVNrcFBEVTJNekl3Zkh4aFBqVTNNelF6UDJVL2N5NWphR0Z5UVhRb2RTazZhVHBsUDNNdWMyeHBZMlVvZFN4MUt6SXBPaWhwTFRVMU1qazJQRHd4TUNrcktHRXROVFl6TWpBcEt6WTFOVE0yS1gxOWZTeDdYQ0l1TDE5a1pXWnBibVZrWENJNk16TXNYQ0l1TDE5MGJ5MXBiblJsWjJWeVhDSTZOelY5WFN3M05EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTkwYnkxcGJuUmxaMlZ5WENJcExHODlUV0YwYUM1dFlYZ3NhVDFOWVhSb0xtMXBianQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z1pUMXVLR1VwTEdVOE1EOXZLR1VyZEN3d0tUcHBLR1VzZENsOWZTeDdYQ0l1TDE5MGJ5MXBiblJsWjJWeVhDSTZOelY5WFN3M05UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFUxaGRHZ3VZMlZwYkN4dlBVMWhkR2d1Wm14dmIzSTdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJwYzA1aFRpaGxQU3RsS1Q4d09paGxQakEvYnpwdUtTaGxLWDE5TEh0OVhTdzNOanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5cGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyUmxabWx1WldSY0lpazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ1S0c4b1pTa3BmWDBzZTF3aUxpOWZaR1ZtYVc1bFpGd2lPak16TEZ3aUxpOWZhVzlpYW1WamRGd2lPalExZlYwc056YzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmZEc4dGFXNTBaV2RsY2x3aUtTeHZQVTFoZEdndWJXbHVPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlQ0d1AyOG9iaWhsS1N3NU1EQTNNVGs1TWpVME56UXdPVGt4S1Rvd2ZYMHNlMXdpTGk5ZmRHOHRhVzUwWldkbGNsd2lPamMxZlYwc056ZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmWkdWbWFXNWxaRndpS1R0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlFOWlhbVZqZENodUtHVXBLWDE5TEh0Y0lpNHZYMlJsWm1sdVpXUmNJam96TTMxZExEYzVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJsekxXOWlhbVZqZEZ3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0cFppZ2hiaWhsS1NseVpYUjFjbTRnWlR0MllYSWdjaXh2TzJsbUtIUW1KbHdpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltS0hJOVpTNTBiMU4wY21sdVp5a21KaUZ1S0c4OWNpNWpZV3hzS0dVcEtTbHlaWFIxY200Z2J6dHBaaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmloeVBXVXVkbUZzZFdWUFppa21KaUZ1S0c4OWNpNWpZV3hzS0dVcEtTbHlaWFIxY200Z2J6dHBaaWdoZENZbVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWW9jajFsTG5SdlUzUnlhVzVuS1NZbUlXNG9iejF5TG1OaGJHd29aU2twS1hKbGRIVnliaUJ2TzNSb2NtOTNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJpZDBJR052Ym5abGNuUWdiMkpxWldOMElIUnZJSEJ5YVcxcGRHbDJaU0IyWVd4MVpWd2lLWDE5TEh0Y0lpNHZYMmx6TFc5aWFtVmpkRndpT2pRM2ZWMHNPREE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMHdMRzg5VFdGMGFDNXlZVzVrYjIwb0tUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0pUZVcxaWIyd29YQ0l1WTI5dVkyRjBLSFp2YVdRZ01EMDlQV1UvWENKY0lqcGxMRndpS1Y5Y0lpd29LeXR1SzI4cExuUnZVM1J5YVc1bktETTJLU2w5ZlN4N2ZWMHNPREU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZloyeHZZbUZzWENJcExHODlaU2hjSWk0dlgyTnZjbVZjSWlrc2FUMWxLRndpTGk5ZmJHbGljbUZ5ZVZ3aUtTeGhQV1VvWENJdUwxOTNhM010WlhoMFhDSXBMSE05WlNoY0lpNHZYMjlpYW1WamRDMWtjRndpS1M1bU8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXZMbE41YldKdmJIeDhLRzh1VTNsdFltOXNQV2svZTMwNmJpNVRlVzFpYjJ4OGZIdDlLVHRjSWw5Y0lqMDlaUzVqYUdGeVFYUW9NQ2w4ZkdVZ2FXNGdkSHg4Y3loMExHVXNlM1poYkhWbE9tRXVaaWhsS1gwcGZYMHNlMXdpTGk5ZlkyOXlaVndpT2pNeExGd2lMaTlmWjJ4dlltRnNYQ0k2TkRBc1hDSXVMMTlzYVdKeVlYSjVYQ0k2TlRNc1hDSXVMMTl2WW1wbFkzUXRaSEJjSWpvMU5peGNJaTR2WDNkcmN5MWxlSFJjSWpvNE1uMWRMRGd5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3Y2k1bVBXVW9YQ0l1TDE5M2EzTmNJaWw5TEh0Y0lpNHZYM2RyYzF3aU9qZ3pmVjBzT0RNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZjMmhoY21Wa1hDSXBLRndpZDJ0elhDSXBMRzg5WlNoY0lpNHZYM1ZwWkZ3aUtTeHBQV1VvWENJdUwxOW5iRzlpWVd4Y0lpa3VVM2x0WW05c0xHRTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnYVN4elBYUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdibHRsWFh4OEtHNWJaVjA5WVNZbWFWdGxYWHg4S0dFL2FUcHZLU2hjSWxONWJXSnZiQzVjSWl0bEtTbDlPM011YzNSdmNtVTlibjBzZTF3aUxpOWZaMnh2WW1Gc1hDSTZOREFzWENJdUwxOXphR0Z5WldSY0lqbzNNaXhjSWk0dlgzVnBaRndpT2pnd2ZWMHNPRFE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdDJZWElnYmoxbEtGd2lMaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6WENJcExHODlaU2hjSWk0dlgybDBaWEl0YzNSbGNGd2lLU3hwUFdVb1hDSXVMMTlwZEdWeVlYUnZjbk5jSWlrc1lUMWxLRndpTGk5ZmRHOHRhVzlpYW1WamRGd2lLVHQwTG1WNGNHOXlkSE05WlNoY0lpNHZYMmwwWlhJdFpHVm1hVzVsWENJcEtFRnljbUY1TEZ3aVFYSnlZWGxjSWl4bWRXNWpkR2x2YmlobExIUXBlM1JvYVhNdVgzUTlZU2hsS1N4MGFHbHpMbDlwUFRBc2RHaHBjeTVmYXoxMGZTeG1kVzVqZEdsdmJpZ3BlM1poY2lCbFBYUm9hWE11WDNRc2REMTBhR2x6TGw5ckxISTlkR2hwY3k1ZmFTc3JPM0psZEhWeWJpRmxmSHh5UGoxbExteGxibWQwYUQ4b2RHaHBjeTVmZEQxMmIybGtJREFzYnlneEtTazZYQ0pyWlhselhDSTlQWFEvYnlnd0xISXBPbHdpZG1Gc2RXVnpYQ0k5UFhRL2J5Z3dMR1ZiY2wwcE9tOG9NQ3hiY2l4bFczSmRYU2w5TEZ3aWRtRnNkV1Z6WENJcExHa3VRWEpuZFcxbGJuUnpQV2t1UVhKeVlYa3NiaWhjSW10bGVYTmNJaWtzYmloY0luWmhiSFZsYzF3aUtTeHVLRndpWlc1MGNtbGxjMXdpS1gwc2Uxd2lMaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6WENJNk1qY3NYQ0l1TDE5cGRHVnlMV1JsWm1sdVpWd2lPalE1TEZ3aUxpOWZhWFJsY2kxemRHVndYQ0k2TlRBc1hDSXVMMTlwZEdWeVlYUnZjbk5jSWpvMU1TeGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lqbzNObjFkTERnMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMlY0Y0c5eWRGd2lLVHR1S0c0dVV5eGNJazlpYW1WamRGd2lMSHRqY21WaGRHVTZaU2hjSWk0dlgyOWlhbVZqZEMxamNtVmhkR1ZjSWlsOUtYMHNlMXdpTGk5ZlpYaHdiM0owWENJNk16Z3NYQ0l1TDE5dlltcGxZM1F0WTNKbFlYUmxYQ0k2TlRWOVhTdzROanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5bGVIQnZjblJjSWlrN2JpaHVMbE1yYmk1R0tpRmxLRndpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJaWtzWENKUFltcGxZM1JjSWl4N1pHVm1hVzVsVUhKdmNHVnlkSGs2WlNoY0lpNHZYMjlpYW1WamRDMWtjRndpS1M1bWZTbDlMSHRjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0k2TXpRc1hDSXVMMTlsZUhCdmNuUmNJam96T0N4Y0lpNHZYMjlpYW1WamRDMWtjRndpT2pVMmZWMHNPRGM2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmFYTXRiMkpxWldOMFhDSXBMRzg5WlNoY0lpNHZYMjFsZEdGY0lpa3ViMjVHY21WbGVtVTdaU2hjSWk0dlgyOWlhbVZqZEMxellYQmNJaWtvWENKbWNtVmxlbVZjSWl4bWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1puVnVZM1JwYjI0b2RDbDdjbVYwZFhKdUlHVW1KbTRvZENrL1pTaHZLSFFwS1RwMGZYMHBmU3g3WENJdUwxOXBjeTF2WW1wbFkzUmNJam8wTnl4Y0lpNHZYMjFsZEdGY0lqbzFOQ3hjSWk0dlgyOWlhbVZqZEMxellYQmNJam8yTm4xZExEZzRPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZiMkpxWldOMExXZHZjR1JjSWlrdVpqdGxLRndpTGk5ZmIySnFaV04wTFhOaGNGd2lLU2hjSW1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjbHdpTEdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlHOG9iaWhsS1N4MEtYMTlLWDBzZTF3aUxpOWZiMkpxWldOMExXZHZjR1JjSWpvMU9DeGNJaTR2WDI5aWFtVmpkQzF6WVhCY0lqbzJOaXhjSWk0dlgzUnZMV2x2WW1wbFkzUmNJam8zTm4xZExEZzVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDNSdkxXOWlhbVZqZEZ3aUtTeHZQV1VvWENJdUwxOXZZbXBsWTNRdFozQnZYQ0lwTzJVb1hDSXVMMTl2WW1wbFkzUXRjMkZ3WENJcEtGd2laMlYwVUhKdmRHOTBlWEJsVDJaY0lpeG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQm1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdieWh1S0dVcEtYMTlLWDBzZTF3aUxpOWZiMkpxWldOMExXZHdiMXdpT2pZeUxGd2lMaTlmYjJKcVpXTjBMWE5oY0Z3aU9qWTJMRndpTGk5ZmRHOHRiMkpxWldOMFhDSTZOemg5WFN3NU1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTkwYnkxdlltcGxZM1JjSWlrc2J6MWxLRndpTGk5ZmIySnFaV04wTFd0bGVYTmNJaWs3WlNoY0lpNHZYMjlpYW1WamRDMXpZWEJjSWlrb1hDSnJaWGx6WENJc1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlHOG9iaWhsS1NsOWZTbDlMSHRjSWk0dlgyOWlhbVZqZEMxclpYbHpYQ0k2TmpRc1hDSXVMMTl2WW1wbFkzUXRjMkZ3WENJNk5qWXNYQ0l1TDE5MGJ5MXZZbXBsWTNSY0lqbzNPSDFkTERreE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMlY0Y0c5eWRGd2lLVHR1S0c0dVV5eGNJazlpYW1WamRGd2lMSHR6WlhSUWNtOTBiM1I1Y0dWUFpqcGxLRndpTGk5ZmMyVjBMWEJ5YjNSdlhDSXBMbk5sZEgwcGZTeDdYQ0l1TDE5bGVIQnZjblJjSWpvek9DeGNJaTR2WDNObGRDMXdjbTkwYjF3aU9qWTVmVjBzT1RJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0OUxIdDlYU3c1TXpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTF3aWRYTmxJSE4wY21samRGd2lPM1poY2lCdVBXVW9YQ0l1TDE5emRISnBibWN0WVhSY0lpa29JVEFwTzJVb1hDSXVMMTlwZEdWeUxXUmxabWx1WlZ3aUtTaFRkSEpwYm1jc1hDSlRkSEpwYm1kY0lpeG1kVzVqZEdsdmJpaGxLWHQwYUdsekxsOTBQVk4wY21sdVp5aGxLU3gwYUdsekxsOXBQVEI5TEdaMWJtTjBhVzl1S0NsN2RtRnlJR1VzZEQxMGFHbHpMbDkwTEhJOWRHaHBjeTVmYVR0eVpYUjFjbTRnY2o0OWRDNXNaVzVuZEdnL2UzWmhiSFZsT25admFXUWdNQ3hrYjI1bE9pRXdmVG9vWlQxdUtIUXNjaWtzZEdocGN5NWZhU3M5WlM1c1pXNW5kR2dzZTNaaGJIVmxPbVVzWkc5dVpUb2hNWDBwZlNsOUxIdGNJaTR2WDJsMFpYSXRaR1ZtYVc1bFhDSTZORGtzWENJdUwxOXpkSEpwYm1jdFlYUmNJam8zTTMxZExEazBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN2RtRnlJRzQ5WlNoY0lpNHZYMmRzYjJKaGJGd2lLU3h2UFdVb1hDSXVMMTlvWVhOY0lpa3NhVDFsS0Z3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWlrc1lUMWxLRndpTGk5ZlpYaHdiM0owWENJcExITTlaU2hjSWk0dlgzSmxaR1ZtYVc1bFhDSXBMSFU5WlNoY0lpNHZYMjFsZEdGY0lpa3VTMFZaTEd3OVpTaGNJaTR2WDJaaGFXeHpYQ0lwTEdNOVpTaGNJaTR2WDNOb1lYSmxaRndpS1N4bVBXVW9YQ0l1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWjF3aUtTeHdQV1VvWENJdUwxOTFhV1JjSWlrc1pEMWxLRndpTGk5ZmQydHpYQ0lwTEdnOVpTaGNJaTR2WDNkcmN5MWxlSFJjSWlrc2VUMWxLRndpTGk5ZmQydHpMV1JsWm1sdVpWd2lLU3h0UFdVb1hDSXVMMTlyWlhsdlpsd2lLU3gyUFdVb1hDSXVMMTlsYm5WdExXdGxlWE5jSWlrc1h6MWxLRndpTGk5ZmFYTXRZWEp5WVhsY0lpa3NZajFsS0Z3aUxpOWZZVzR0YjJKcVpXTjBYQ0lwTEdjOVpTaGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lpa3NSVDFsS0Z3aUxpOWZkRzh0Y0hKcGJXbDBhWFpsWENJcExHbzlaU2hjSWk0dlgzQnliM0JsY25SNUxXUmxjMk5jSWlrc2R6MWxLRndpTGk5ZmIySnFaV04wTFdOeVpXRjBaVndpS1N4UFBXVW9YQ0l1TDE5dlltcGxZM1F0WjI5d2JpMWxlSFJjSWlrc1RUMWxLRndpTGk5ZmIySnFaV04wTFdkdmNHUmNJaWtzZUQxbEtGd2lMaTlmYjJKcVpXTjBMV1J3WENJcExGQTlaU2hjSWk0dlgyOWlhbVZqZEMxclpYbHpYQ0lwTEdzOVRTNW1MRkk5ZUM1bUxGTTlUeTVtTEVFOWJpNVRlVzFpYjJ3c1ZEMXVMa3BUVDA0c1RqMVVKaVpVTG5OMGNtbHVaMmxtZVN4SlBWd2ljSEp2ZEc5MGVYQmxYQ0lzVlQxa0tGd2lYMmhwWkdSbGJsd2lLU3hEUFdRb1hDSjBiMUJ5YVcxcGRHbDJaVndpS1N4TVBYdDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsTEVZOVl5aGNJbk41YldKdmJDMXlaV2RwYzNSeWVWd2lLU3hDUFdNb1hDSnplVzFpYjJ4elhDSXBMRVE5WXloY0ltOXdMWE41YldKdmJITmNJaWtzUnoxUFltcGxZM1JiU1Ywc1N6MWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJCTEZrOWJpNVJUMkpxWldOMExIRTlJVmw4ZkNGWlcwbGRmSHdoV1Z0SlhTNW1hVzVrUTJocGJHUXNlajFwSmlac0tHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEY2hQWGNvVWloN2ZTeGNJbUZjSWl4N1oyVjBPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRklvZEdocGN5eGNJbUZjSWl4N2RtRnNkV1U2TjMwcExtRjlmU2twTG1GOUtUOW1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5YXloSExIUXBPMjRtSm1SbGJHVjBaU0JIVzNSZExGSW9aU3gwTEhJcExHNG1KbVVoUFQxSEppWlNLRWNzZEN4dUtYMDZVaXhYUFdaMWJtTjBhVzl1S0dVcGUzWmhjaUIwUFVKYlpWMDlkeWhCVzBsZEtUdHlaWFIxY200Z2RDNWZhejFsTEhSOUxFZzlTeVltWENKemVXMWliMnhjSWowOWRIbHdaVzltSUVFdWFYUmxjbUYwYjNJL1puVnVZM1JwYjI0b1pTbDdjbVYwZFhKdVhDSnplVzFpYjJ4Y0lqMDlkSGx3Wlc5bUlHVjlPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsSUdsdWMzUmhibU5sYjJZZ1FYMHNWajFtZFc1amRHbHZiaWhsTEhRc2NpbDdjbVYwZFhKdUlHVTlQVDFISmlaV0tFUXNkQ3h5S1N4aUtHVXBMSFE5UlNoMExDRXdLU3hpS0hJcExHOG9RaXgwS1Q4b2NpNWxiblZ0WlhKaFlteGxQeWh2S0dVc1ZTa21KbVZiVlYxYmRGMG1KaWhsVzFWZFczUmRQU0V4S1N4eVBYY29jaXg3Wlc1MWJXVnlZV0pzWlRwcUtEQXNJVEVwZlNrcE9paHZLR1VzVlNsOGZGSW9aU3hWTEdvb01TeDdmU2twTEdWYlZWMWJkRjA5SVRBcExIb29aU3gwTEhJcEtUcFNLR1VzZEN4eUtYMHNTajFtZFc1amRHbHZiaWhsTEhRcGUySW9aU2s3Wm05eUtIWmhjaUJ5TEc0OWRpaDBQV2NvZENrcExHODlNQ3hwUFc0dWJHVnVaM1JvTzJrK2J6c3BWaWhsTEhJOWJsdHZLeXRkTEhSYmNsMHBPM0psZEhWeWJpQmxmU3drUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdUlIWnZhV1FnTUQwOVBYUS9keWhsS1RwS0tIY29aU2tzZENsOUxGZzlablZ1WTNScGIyNG9aU2w3ZG1GeUlIUTlUQzVqWVd4c0tIUm9hWE1zWlQxRktHVXNJVEFwS1R0eVpYUjFjbTRoS0hSb2FYTTlQVDFISmladktFSXNaU2ttSmlGdktFUXNaU2twSmlZb0lTaDBmSHdoYnloMGFHbHpMR1VwZkh3aGJ5aENMR1VwZkh4dktIUm9hWE1zVlNrbUpuUm9hWE5iVlYxYlpWMHBmSHgwS1gwc1VUMW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtHVTlaeWhsS1N4MFBVVW9kQ3doTUNrc1pTRTlQVWQ4ZkNGdktFSXNkQ2w4Zkc4b1JDeDBLU2w3ZG1GeUlISTlheWhsTEhRcE8zSmxkSFZ5YmlGeWZId2hieWhDTEhRcGZIeHZLR1VzVlNrbUptVmJWVjFiZEYxOGZDaHlMbVZ1ZFcxbGNtRmliR1U5SVRBcExISjlmU3hhUFdaMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2RDeHlQVk1vWnlobEtTa3NiajFiWFN4cFBUQTdjaTVzWlc1bmRHZythVHNwYnloQ0xIUTljbHRwS3l0ZEtYeDhkRDA5Vlh4OGREMDlkWHg4Ymk1d2RYTm9LSFFwTzNKbGRIVnliaUJ1ZlN4bFpUMW1kVzVqZEdsdmJpaGxLWHRtYjNJb2RtRnlJSFFzY2oxbFBUMDlSeXh1UFZNb2NqOUVPbWNvWlNrcExHazlXMTBzWVQwd08yNHViR1Z1WjNSb1BtRTdLU0Z2S0VJc2REMXVXMkVySzEwcGZIeHlKaVloYnloSExIUXBmSHhwTG5CMWMyZ29RbHQwWFNrN2NtVjBkWEp1SUdsOU8wdDhmQ2hCUFdaMWJtTjBhVzl1S0NsN2FXWW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFRXBkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lVM2x0WW05c0lHbHpJRzV2ZENCaElHTnZibk4wY25WamRHOXlJVndpS1R0MllYSWdaVDF3S0dGeVozVnRaVzUwY3k1c1pXNW5kR2crTUQ5aGNtZDFiV1Z1ZEhOYk1GMDZkbTlwWkNBd0tTeDBQV1oxYm1OMGFXOXVLSElwZTNSb2FYTTlQVDFISmlaMExtTmhiR3dvUkN4eUtTeHZLSFJvYVhNc1ZTa21KbThvZEdocGMxdFZYU3hsS1NZbUtIUm9hWE5iVlYxYlpWMDlJVEVwTEhvb2RHaHBjeXhsTEdvb01TeHlLU2w5TzNKbGRIVnliaUJwSmlaeEppWjZLRWNzWlN4N1kyOXVabWxuZFhKaFlteGxPaUV3TEhObGREcDBmU2tzVnlobEtYMHNjeWhCVzBsZExGd2lkRzlUZEhKcGJtZGNJaXhtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxsOXJmU2tzVFM1bVBWRXNlQzVtUFZZc1pTaGNJaTR2WDI5aWFtVmpkQzFuYjNCdVhDSXBMbVk5VHk1bVBWb3NaU2hjSWk0dlgyOWlhbVZqZEMxd2FXVmNJaWt1WmoxWUxHVW9YQ0l1TDE5dlltcGxZM1F0WjI5d2Mxd2lLUzVtUFdWbExHa21KaUZsS0Z3aUxpOWZiR2xpY21GeWVWd2lLU1ltY3loSExGd2ljSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1ZjSWl4WUxDRXdLU3hvTG1ZOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlGY29aQ2hsS1NsOUtTeGhLR0V1Unl0aExsY3JZUzVHS2lGTExIdFRlVzFpYjJ3NlFYMHBPMlp2Y2loMllYSWdkR1U5WENKb1lYTkpibk4wWVc1alpTeHBjME52Ym1OaGRGTndjbVZoWkdGaWJHVXNhWFJsY21GMGIzSXNiV0YwWTJnc2NtVndiR0ZqWlN4elpXRnlZMmdzYzNCbFkybGxjeXh6Y0d4cGRDeDBiMUJ5YVcxcGRHbDJaU3gwYjFOMGNtbHVaMVJoWnl4MWJuTmpiM0JoWW14bGMxd2lMbk53YkdsMEtGd2lMRndpS1N4eVpUMHdPM1JsTG14bGJtZDBhRDV5WlRzcFpDaDBaVnR5WlNzclhTazdabTl5S0haaGNpQjBaVDFRS0dRdWMzUnZjbVVwTEhKbFBUQTdkR1V1YkdWdVozUm9QbkpsT3lsNUtIUmxXM0psS3l0ZEtUdGhLR0V1VXl0aExrWXFJVXNzWENKVGVXMWliMnhjSWl4N1hDSm1iM0pjSWpwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2J5aEdMR1VyUFZ3aVhDSXBQMFpiWlYwNlJsdGxYVDFCS0dVcGZTeHJaWGxHYjNJNlpuVnVZM1JwYjI0b1pTbDdhV1lvU0NobEtTbHlaWFIxY200Z2JTaEdMR1VwTzNSb2NtOTNJRlI1Y0dWRmNuSnZjaWhsSzF3aUlHbHpJRzV2ZENCaElITjViV0p2YkNGY0lpbDlMSFZ6WlZObGRIUmxjanBtZFc1amRHbHZiaWdwZTNFOUlUQjlMSFZ6WlZOcGJYQnNaVHBtZFc1amRHbHZiaWdwZTNFOUlURjlmU2tzWVNoaExsTXJZUzVHS2lGTExGd2lUMkpxWldOMFhDSXNlMk55WldGMFpUb2tMR1JsWm1sdVpWQnliM0JsY25SNU9sWXNaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN6cEtMR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNqcFJMR2RsZEU5M2JsQnliM0JsY25SNVRtRnRaWE02V2l4blpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITTZaV1Y5S1N4VUppWmhLR0V1VXl0aExrWXFLQ0ZMZkh4c0tHWjFibU4wYVc5dUtDbDdkbUZ5SUdVOVFTZ3BPM0psZEhWeWJsd2lXMjUxYkd4ZFhDSWhQVTRvVzJWZEtYeDhYQ0o3ZlZ3aUlUMU9LSHRoT21WOUtYeDhYQ0o3ZlZ3aUlUMU9LRTlpYW1WamRDaGxLU2w5S1Nrc1hDSktVMDlPWENJc2UzTjBjbWx1WjJsbWVUcG1kVzVqZEdsdmJpaGxLWHRwWmloMmIybGtJREFoUFQxbEppWWhTQ2hsS1NsN1ptOXlLSFpoY2lCMExISXNiajFiWlYwc2J6MHhPMkZ5WjNWdFpXNTBjeTVzWlc1bmRHZytienNwYmk1d2RYTm9LR0Z5WjNWdFpXNTBjMXR2S3l0ZEtUdHlaWFIxY200Z2REMXVXekZkTEZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlIUW1KaWh5UFhRcExDRnlKaVpmS0hRcGZId29kRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LSEltSmloMFBYSXVZMkZzYkNoMGFHbHpMR1VzZENrcExDRklLSFFwS1hKbGRIVnliaUIwZlNrc2Jsc3hYVDEwTEU0dVlYQndiSGtvVkN4dUtYMTlmU2tzUVZ0SlhWdERYWHg4WlNoY0lpNHZYMmhwWkdWY0lpa29RVnRKWFN4RExFRmJTVjB1ZG1Gc2RXVlBaaWtzWmloQkxGd2lVM2x0WW05c1hDSXBMR1lvVFdGMGFDeGNJazFoZEdoY0lpd2hNQ2tzWmlodUxrcFRUMDRzWENKS1UwOU9YQ0lzSVRBcGZTeDdYQ0l1TDE5aGJpMXZZbXBsWTNSY0lqb3lPQ3hjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0k2TXpRc1hDSXVMMTlsYm5WdExXdGxlWE5jSWpvek55eGNJaTR2WDJWNGNHOXlkRndpT2pNNExGd2lMaTlmWm1GcGJITmNJam96T1N4Y0lpNHZYMmRzYjJKaGJGd2lPalF3TEZ3aUxpOWZhR0Z6WENJNk5ERXNYQ0l1TDE5b2FXUmxYQ0k2TkRJc1hDSXVMMTlwY3kxaGNuSmhlVndpT2pRMkxGd2lMaTlmYTJWNWIyWmNJam8xTWl4Y0lpNHZYMnhwWW5KaGNubGNJam8xTXl4Y0lpNHZYMjFsZEdGY0lqbzFOQ3hjSWk0dlgyOWlhbVZqZEMxamNtVmhkR1ZjSWpvMU5TeGNJaTR2WDI5aWFtVmpkQzFrY0Z3aU9qVTJMRndpTGk5ZmIySnFaV04wTFdkdmNHUmNJam8xT0N4Y0lpNHZYMjlpYW1WamRDMW5iM0J1WENJNk5qQXNYQ0l1TDE5dlltcGxZM1F0WjI5d2JpMWxlSFJjSWpvMU9TeGNJaTR2WDI5aWFtVmpkQzFuYjNCelhDSTZOakVzWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpT2pZMExGd2lMaTlmYjJKcVpXTjBMWEJwWlZ3aU9qWTFMRndpTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZMXdpT2pZM0xGd2lMaTlmY21Wa1pXWnBibVZjSWpvMk9DeGNJaTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuWENJNk56QXNYQ0l1TDE5emFHRnlaV1JjSWpvM01peGNJaTR2WDNSdkxXbHZZbXBsWTNSY0lqbzNOaXhjSWk0dlgzUnZMWEJ5YVcxcGRHbDJaVndpT2pjNUxGd2lMaTlmZFdsa1hDSTZPREFzWENJdUwxOTNhM05jSWpvNE15eGNJaTR2WDNkcmN5MWtaV1pwYm1WY0lqbzRNU3hjSWk0dlgzZHJjeTFsZUhSY0lqbzRNbjFkTERrMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR2WDNkcmN5MWtaV1pwYm1WY0lpa29YQ0poYzNsdVkwbDBaWEpoZEc5eVhDSXBmU3g3WENJdUwxOTNhM010WkdWbWFXNWxYQ0k2T0RGOVhTdzVOanBiWm5WdVkzUnBiMjRvWlN4MExISXBlMlVvWENJdUwxOTNhM010WkdWbWFXNWxYQ0lwS0Z3aWIySnpaWEoyWVdKc1pWd2lLWDBzZTF3aUxpOWZkMnR6TFdSbFptbHVaVndpT2pneGZWMHNPVGM2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRsS0Z3aUxpOWxjell1WVhKeVlYa3VhWFJsY21GMGIzSmNJaWs3Wm05eUtIWmhjaUJ1UFdVb1hDSXVMMTluYkc5aVlXeGNJaWtzYnoxbEtGd2lMaTlmYUdsa1pWd2lLU3hwUFdVb1hDSXVMMTlwZEdWeVlYUnZjbk5jSWlrc1lUMWxLRndpTGk5ZmQydHpYQ0lwS0Z3aWRHOVRkSEpwYm1kVVlXZGNJaWtzY3oxYlhDSk9iMlJsVEdsemRGd2lMRndpUkU5TlZHOXJaVzVNYVhOMFhDSXNYQ0pOWldScFlVeHBjM1JjSWl4Y0lsTjBlV3hsVTJobFpYUk1hWE4wWENJc1hDSkRVMU5TZFd4bFRHbHpkRndpWFN4MVBUQTdkVHcxTzNVckt5bDdkbUZ5SUd3OWMxdDFYU3hqUFc1YmJGMHNaajFqSmlaakxuQnliM1J2ZEhsd1pUdG1KaVloWmx0aFhTWW1ieWhtTEdFc2JDa3NhVnRzWFQxcExrRnljbUY1Zlgwc2Uxd2lMaTlmWjJ4dlltRnNYQ0k2TkRBc1hDSXVMMTlvYVdSbFhDSTZORElzWENJdUwxOXBkR1Z5WVhSdmNuTmNJam8xTVN4Y0lpNHZYM2RyYzF3aU9qZ3pMRndpTGk5bGN6WXVZWEp5WVhrdWFYUmxjbUYwYjNKY0lqbzROSDFkTERrNE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN0tHWjFibU4wYVc5dUtISXBlM1poY2lCdVBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnlQM0k2WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhkcGJtUnZkejkzYVc1a2IzYzZYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSE5sYkdZL2MyVnNaanAwYUdsekxHODliaTV5WldkbGJtVnlZWFJ2Y2xKMWJuUnBiV1VtSms5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0c0cExtbHVaR1Y0VDJZb1hDSnlaV2RsYm1WeVlYUnZjbEoxYm5ScGJXVmNJaWsrUFRBc2FUMXZKaVp1TG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlR0cFppaHVMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaVDEyYjJsa0lEQXNkQzVsZUhCdmNuUnpQV1VvWENJdUwzSjFiblJwYldWY0lpa3NieWx1TG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlQxcE8yVnNjMlVnZEhKNWUyUmxiR1YwWlNCdUxuSmxaMlZ1WlhKaGRHOXlVblZ1ZEdsdFpYMWpZWFJqYUNoaEtYdHVMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaVDEyYjJsa0lEQjlmU2t1WTJGc2JDaDBhR2x6TEZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQm5iRzlpWVd3L1oyeHZZbUZzT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnpaV3htUDNObGJHWTZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhkcGJtUnZkejkzYVc1a2IzYzZlMzBwZlN4N1hDSXVMM0oxYm5ScGJXVmNJam81T1gxZExEazVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdLR1oxYm1OMGFXOXVLR1VwZXlGbWRXNWpkR2x2YmlobEtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCeUtHVXNkQ3h5TEc0cGUzWmhjaUJwUFU5aWFtVmpkQzVqY21WaGRHVW9LSFI4Zkc4cExuQnliM1J2ZEhsd1pTa3NZVDF1WlhjZ1pDaHVmSHhiWFNrN2NtVjBkWEp1SUdrdVgybHVkbTlyWlQxaktHVXNjaXhoS1N4cGZXWjFibU4wYVc5dUlHNG9aU3gwTEhJcGUzUnllWHR5WlhSMWNtNTdkSGx3WlRwY0ltNXZjbTFoYkZ3aUxHRnlaenBsTG1OaGJHd29kQ3h5S1gxOVkyRjBZMmdvYmlsN2NtVjBkWEp1ZTNSNWNHVTZYQ0owYUhKdmQxd2lMR0Z5WnpwdWZYMTlablZ1WTNScGIyNGdieWdwZTMxbWRXNWpkR2x2YmlCcEtDbDdmV1oxYm1OMGFXOXVJR0VvS1h0OVpuVnVZM1JwYjI0Z2N5aGxLWHRiWENKdVpYaDBYQ0lzWENKMGFISnZkMXdpTEZ3aWNtVjBkWEp1WENKZExtWnZja1ZoWTJnb1puVnVZM1JwYjI0b2RDbDdaVnQwWFQxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2RHaHBjeTVmYVc1MmIydGxLSFFzWlNsOWZTbDlablZ1WTNScGIyNGdkU2hsS1h0MGFHbHpMbUZ5WnoxbGZXWjFibU4wYVc5dUlHd29aU2w3Wm5WdVkzUnBiMjRnZENoeUxHOHNhU3hoS1h0MllYSWdjejF1S0dWYmNsMHNaU3h2S1R0cFppaGNJblJvY205M1hDSWhQVDF6TG5SNWNHVXBlM1poY2lCc1BYTXVZWEpuTEdNOWJDNTJZV3gxWlR0eVpYUjFjbTRnWXlCcGJuTjBZVzVqWlc5bUlIVS9VSEp2YldselpTNXlaWE52YkhabEtHTXVZWEpuS1M1MGFHVnVLR1oxYm1OMGFXOXVLR1VwZTNRb1hDSnVaWGgwWENJc1pTeHBMR0VwZlN4bWRXNWpkR2x2YmlobEtYdDBLRndpZEdoeWIzZGNJaXhsTEdrc1lTbDlLVHBRY205dGFYTmxMbkpsYzI5c2RtVW9ZeWt1ZEdobGJpaG1kVzVqZEdsdmJpaGxLWHRzTG5aaGJIVmxQV1VzYVNoc0tYMHNZU2w5WVNoekxtRnlaeWw5Wm5WdVkzUnBiMjRnY2lobExISXBlMloxYm1OMGFXOXVJRzRvS1h0eVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2JpeHZLWHQwS0dVc2NpeHVMRzhwZlNsOWNtVjBkWEp1SUc4OWJ6OXZMblJvWlc0b2JpeHVLVHB1S0NsOVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIQnliMk5sYzNNbUpuQnliMk5sYzNNdVpHOXRZV2x1SmlZb2REMXdjbTlqWlhOekxtUnZiV0ZwYmk1aWFXNWtLSFFwS1R0MllYSWdienQwYUdsekxsOXBiblp2YTJVOWNuMW1kVzVqZEdsdmJpQmpLR1VzZEN4eUtYdDJZWElnYnoxM08zSmxkSFZ5YmlCbWRXNWpkR2x2YmlocExHRXBlMmxtS0c4OVBUMU5LWFJvY205M0lHNWxkeUJGY25KdmNpaGNJa2RsYm1WeVlYUnZjaUJwY3lCaGJISmxZV1I1SUhKMWJtNXBibWRjSWlrN2FXWW9iejA5UFhncGUybG1LRndpZEdoeWIzZGNJajA5UFdrcGRHaHliM2NnWVR0eVpYUjFjbTRnZVNncGZXWnZjaWc3T3lsN2RtRnlJSE05Y2k1a1pXeGxaMkYwWlR0cFppaHpLWHRwWmloY0luSmxkSFZ5Ymx3aVBUMDlhWHg4WENKMGFISnZkMXdpUFQwOWFTWW1jeTVwZEdWeVlYUnZjbHRwWFQwOVBXMHBlM0l1WkdWc1pXZGhkR1U5Ym5Wc2JEdDJZWElnZFQxekxtbDBaWEpoZEc5eVcxd2ljbVYwZFhKdVhDSmRPMmxtS0hVcGUzWmhjaUJzUFc0b2RTeHpMbWwwWlhKaGRHOXlMR0VwTzJsbUtGd2lkR2h5YjNkY0lqMDlQV3d1ZEhsd1pTbDdhVDFjSW5Sb2NtOTNYQ0lzWVQxc0xtRnlaenRqYjI1MGFXNTFaWDE5YVdZb1hDSnlaWFIxY201Y0lqMDlQV2twWTI5dWRHbHVkV1Y5ZG1GeUlHdzliaWh6TG1sMFpYSmhkRzl5VzJsZExITXVhWFJsY21GMGIzSXNZU2s3YVdZb1hDSjBhSEp2ZDF3aVBUMDliQzUwZVhCbEtYdHlMbVJsYkdWbllYUmxQVzUxYkd3c2FUMWNJblJvY205M1hDSXNZVDFzTG1GeVp6dGpiMjUwYVc1MVpYMXBQVndpYm1WNGRGd2lMR0U5YlR0MllYSWdZejFzTG1GeVp6dHBaaWdoWXk1a2IyNWxLWEpsZEhWeWJpQnZQVThzWXp0eVczTXVjbVZ6ZFd4MFRtRnRaVjA5WXk1MllXeDFaU3h5TG01bGVIUTljeTV1WlhoMFRHOWpMSEl1WkdWc1pXZGhkR1U5Ym5Wc2JIMXBaaWhjSW01bGVIUmNJajA5UFdrcGNpNXpaVzUwUFhJdVgzTmxiblE5WVR0bGJITmxJR2xtS0Z3aWRHaHliM2RjSWowOVBXa3BlMmxtS0c4OVBUMTNLWFJvY205M0lHODllQ3hoTzNJdVpHbHpjR0YwWTJoRmVHTmxjSFJwYjI0b1lTa21KaWhwUFZ3aWJtVjRkRndpTEdFOWJTbDlaV3h6WlZ3aWNtVjBkWEp1WENJOVBUMXBKaVp5TG1GaWNuVndkQ2hjSW5KbGRIVnlibHdpTEdFcE8yODlUVHQyWVhJZ2JEMXVLR1VzZEN4eUtUdHBaaWhjSW01dmNtMWhiRndpUFQwOWJDNTBlWEJsS1h0dlBYSXVaRzl1WlQ5NE9rODdkbUZ5SUdNOWUzWmhiSFZsT213dVlYSm5MR1J2Ym1VNmNpNWtiMjVsZlR0cFppaHNMbUZ5WnlFOVBWQXBjbVYwZFhKdUlHTTdjaTVrWld4bFoyRjBaU1ltWENKdVpYaDBYQ0k5UFQxcEppWW9ZVDF0S1gxbGJITmxYQ0owYUhKdmQxd2lQVDA5YkM1MGVYQmxKaVlvYnoxNExHazlYQ0owYUhKdmQxd2lMR0U5YkM1aGNtY3BmWDE5Wm5WdVkzUnBiMjRnWmlobEtYdDJZWElnZEQxN2RISjVURzlqT21WYk1GMTlPekVnYVc0Z1pTWW1LSFF1WTJGMFkyaE1iMk05WlZzeFhTa3NNaUJwYmlCbEppWW9kQzVtYVc1aGJHeDVURzlqUFdWYk1sMHNkQzVoWm5SbGNreHZZejFsV3pOZEtTeDBhR2x6TG5SeWVVVnVkSEpwWlhNdWNIVnphQ2gwS1gxbWRXNWpkR2x2YmlCd0tHVXBlM1poY2lCMFBXVXVZMjl0Y0d4bGRHbHZibng4ZTMwN2RDNTBlWEJsUFZ3aWJtOXliV0ZzWENJc1pHVnNaWFJsSUhRdVlYSm5MR1V1WTI5dGNHeGxkR2x2YmoxMGZXWjFibU4wYVc5dUlHUW9aU2w3ZEdocGN5NTBjbmxGYm5SeWFXVnpQVnQ3ZEhKNVRHOWpPbHdpY205dmRGd2lmVjBzWlM1bWIzSkZZV05vS0dZc2RHaHBjeWtzZEdocGN5NXlaWE5sZENnaE1DbDlablZ1WTNScGIyNGdhQ2hsS1h0cFppaGxLWHQyWVhJZ2REMWxXMkpkTzJsbUtIUXBjbVYwZFhKdUlIUXVZMkZzYkNobEtUdHBaaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbExtNWxlSFFwY21WMGRYSnVJR1U3YVdZb0lXbHpUbUZPS0dVdWJHVnVaM1JvS1NsN2RtRnlJSEk5TFRFc2JqMW1kVzVqZEdsdmJpQnZLQ2w3Wm05eUtEc3JLM0k4WlM1c1pXNW5kR2c3S1dsbUtIWXVZMkZzYkNobExISXBLWEpsZEhWeWJpQnZMblpoYkhWbFBXVmJjbDBzYnk1a2IyNWxQU0V4TEc4N2NtVjBkWEp1SUc4dWRtRnNkV1U5YlN4dkxtUnZibVU5SVRBc2IzMDdjbVYwZFhKdUlHNHVibVY0ZEQxdWZYMXlaWFIxY201N2JtVjRkRHA1ZlgxbWRXNWpkR2x2YmlCNUtDbDdjbVYwZFhKdWUzWmhiSFZsT20wc1pHOXVaVG9oTUgxOWRtRnlJRzBzZGoxUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMRjg5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1UzbHRZbTlzUDFONWJXSnZiRHA3ZlN4aVBWOHVhWFJsY21GMGIzSjhmRndpUUVCcGRHVnlZWFJ2Y2x3aUxHYzlYeTUwYjFOMGNtbHVaMVJoWjN4OFhDSkFRSFJ2VTNSeWFXNW5WR0ZuWENJc1JUMWNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdkQ3hxUFdVdWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbE8ybG1LR29wY21WMGRYSnVJSFp2YVdRb1JTWW1LSFF1Wlhod2IzSjBjejFxS1NrN2FqMWxMbkpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaVDFGUDNRdVpYaHdiM0owY3pwN2ZTeHFMbmR5WVhBOWNqdDJZWElnZHoxY0luTjFjM0JsYm1SbFpGTjBZWEowWENJc1R6MWNJbk4xYzNCbGJtUmxaRmxwWld4a1hDSXNUVDFjSW1WNFpXTjFkR2x1WjF3aUxIZzlYQ0pqYjIxd2JHVjBaV1JjSWl4UVBYdDlMR3M5WVM1d2NtOTBiM1I1Y0dVOWJ5NXdjbTkwYjNSNWNHVTdhUzV3Y205MGIzUjVjR1U5YXk1amIyNXpkSEoxWTNSdmNqMWhMR0V1WTI5dWMzUnlkV04wYjNJOWFTeGhXMmRkUFdrdVpHbHpjR3hoZVU1aGJXVTlYQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibHdpTEdvdWFYTkhaVzVsY21GMGIzSkdkVzVqZEdsdmJqMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJsSmlabExtTnZibk4wY25WamRHOXlPM0psZEhWeWJpRWhkQ1ltS0hROVBUMXBmSHhjSWtkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1WENJOVBUMG9kQzVrYVhOd2JHRjVUbUZ0Wlh4OGRDNXVZVzFsS1NsOUxHb3ViV0Z5YXoxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1QMDlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmlobExHRXBPaWhsTGw5ZmNISnZkRzlmWHoxaExHY2dhVzRnWlh4OEtHVmJaMTA5WENKSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymx3aUtTa3NaUzV3Y205MGIzUjVjR1U5VDJKcVpXTjBMbU55WldGMFpTaHJLU3hsZlN4cUxtRjNjbUZ3UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdVpYY2dkU2hsS1gwc2N5aHNMbkJ5YjNSdmRIbHdaU2tzYWk1aGMzbHVZejFtZFc1amRHbHZiaWhsTEhRc2JpeHZLWHQyWVhJZ2FUMXVaWGNnYkNoeUtHVXNkQ3h1TEc4cEtUdHlaWFIxY200Z2FpNXBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVLSFFwUDJrNmFTNXVaWGgwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1a2IyNWxQMlV1ZG1Gc2RXVTZhUzV1WlhoMEtDbDlLWDBzY3locktTeHJXMkpkUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTjlMR3RiWjEwOVhDSkhaVzVsY21GMGIzSmNJaXhyTG5SdlUzUnlhVzVuUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1WENKYmIySnFaV04wSUVkbGJtVnlZWFJ2Y2wxY0luMHNhaTVyWlhselBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBWdGRPMlp2Y2loMllYSWdjaUJwYmlCbEtYUXVjSFZ6YUNoeUtUdHlaWFIxY200Z2RDNXlaWFpsY25ObEtDa3NablZ1WTNScGIyNGdiaWdwZTJadmNpZzdkQzVzWlc1bmRHZzdLWHQyWVhJZ2NqMTBMbkJ2Y0NncE8ybG1LSElnYVc0Z1pTbHlaWFIxY200Z2JpNTJZV3gxWlQxeUxHNHVaRzl1WlQwaE1TeHVmWEpsZEhWeWJpQnVMbVJ2Ym1VOUlUQXNibjE5TEdvdWRtRnNkV1Z6UFdnc1pDNXdjbTkwYjNSNWNHVTllMk52Ym5OMGNuVmpkRzl5T21Rc2NtVnpaWFE2Wm5WdVkzUnBiMjRvWlNsN2FXWW9kR2hwY3k1d2NtVjJQVEFzZEdocGN5NXVaWGgwUFRBc2RHaHBjeTV6Wlc1MFBYUm9hWE11WDNObGJuUTliU3gwYUdsekxtUnZibVU5SVRFc2RHaHBjeTVrWld4bFoyRjBaVDF1ZFd4c0xIUm9hWE11ZEhKNVJXNTBjbWxsY3k1bWIzSkZZV05vS0hBcExDRmxLV1p2Y2loMllYSWdkQ0JwYmlCMGFHbHpLVndpZEZ3aVBUMDlkQzVqYUdGeVFYUW9NQ2ttSm5ZdVkyRnNiQ2gwYUdsekxIUXBKaVloYVhOT1lVNG9LM1F1YzJ4cFkyVW9NU2twSmlZb2RHaHBjMXQwWFQxdEtUdGNibjBzYzNSdmNEcG1kVzVqZEdsdmJpZ3BlM1JvYVhNdVpHOXVaVDBoTUR0MllYSWdaVDEwYUdsekxuUnllVVZ1ZEhKcFpYTmJNRjBzZEQxbExtTnZiWEJzWlhScGIyNDdhV1lvWENKMGFISnZkMXdpUFQwOWRDNTBlWEJsS1hSb2NtOTNJSFF1WVhKbk8zSmxkSFZ5YmlCMGFHbHpMbkoyWVd4OUxHUnBjM0JoZEdOb1JYaGpaWEIwYVc5dU9tWjFibU4wYVc5dUtHVXBlMloxYm1OMGFXOXVJSFFvZEN4dUtYdHlaWFIxY200Z2FTNTBlWEJsUFZ3aWRHaHliM2RjSWl4cExtRnlaejFsTEhJdWJtVjRkRDEwTENFaGJuMXBaaWgwYUdsekxtUnZibVVwZEdoeWIzY2daVHRtYjNJb2RtRnlJSEk5ZEdocGN5eHVQWFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdndE1UdHVQajB3T3kwdGJpbDdkbUZ5SUc4OWRHaHBjeTUwY25sRmJuUnlhV1Z6VzI1ZExHazlieTVqYjIxd2JHVjBhVzl1TzJsbUtGd2ljbTl2ZEZ3aVBUMDlieTUwY25sTWIyTXBjbVYwZFhKdUlIUW9YQ0psYm1SY0lpazdhV1lvYnk1MGNubE1iMk04UFhSb2FYTXVjSEpsZGlsN2RtRnlJR0U5ZGk1allXeHNLRzhzWENKallYUmphRXh2WTF3aUtTeHpQWFl1WTJGc2JDaHZMRndpWm1sdVlXeHNlVXh2WTF3aUtUdHBaaWhoSmlaektYdHBaaWgwYUdsekxuQnlaWFk4Ynk1allYUmphRXh2WXlseVpYUjFjbTRnZENodkxtTmhkR05vVEc5akxDRXdLVHRwWmloMGFHbHpMbkJ5WlhZOGJ5NW1hVzVoYkd4NVRHOWpLWEpsZEhWeWJpQjBLRzh1Wm1sdVlXeHNlVXh2WXlsOVpXeHpaU0JwWmloaEtYdHBaaWgwYUdsekxuQnlaWFk4Ynk1allYUmphRXh2WXlseVpYUjFjbTRnZENodkxtTmhkR05vVEc5akxDRXdLWDFsYkhObGUybG1LQ0Z6S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5SeWVTQnpkR0YwWlcxbGJuUWdkMmwwYUc5MWRDQmpZWFJqYUNCdmNpQm1hVzVoYkd4NVhDSXBPMmxtS0hSb2FYTXVjSEpsZGp4dkxtWnBibUZzYkhsTWIyTXBjbVYwZFhKdUlIUW9ieTVtYVc1aGJHeDVURzlqS1gxOWZYMHNZV0p5ZFhCME9tWjFibU4wYVc5dUtHVXNkQ2w3Wm05eUtIWmhjaUJ5UFhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ3RNVHR5UGowd095MHRjaWw3ZG1GeUlHNDlkR2hwY3k1MGNubEZiblJ5YVdWelczSmRPMmxtS0c0dWRISjVURzlqUEQxMGFHbHpMbkJ5WlhZbUpuWXVZMkZzYkNodUxGd2labWx1WVd4c2VVeHZZMXdpS1NZbWRHaHBjeTV3Y21WMlBHNHVabWx1WVd4c2VVeHZZeWw3ZG1GeUlHODlianRpY21WaGEzMTlieVltS0Z3aVluSmxZV3RjSWowOVBXVjhmRndpWTI5dWRHbHVkV1ZjSWowOVBXVXBKaVp2TG5SeWVVeHZZenc5ZENZbWREdzlieTVtYVc1aGJHeDVURzlqSmlZb2J6MXVkV3hzS1R0MllYSWdhVDF2UDI4dVkyOXRjR3hsZEdsdmJqcDdmVHR5WlhSMWNtNGdhUzUwZVhCbFBXVXNhUzVoY21jOWRDeHZQM1JvYVhNdWJtVjRkRDF2TG1acGJtRnNiSGxNYjJNNmRHaHBjeTVqYjIxd2JHVjBaU2hwS1N4UWZTeGpiMjF3YkdWMFpUcG1kVzVqZEdsdmJpaGxMSFFwZTJsbUtGd2lkR2h5YjNkY0lqMDlQV1V1ZEhsd1pTbDBhSEp2ZHlCbExtRnlaenRjSW1KeVpXRnJYQ0k5UFQxbExuUjVjR1Y4ZkZ3aVkyOXVkR2x1ZFdWY0lqMDlQV1V1ZEhsd1pUOTBhR2x6TG01bGVIUTlaUzVoY21jNlhDSnlaWFIxY201Y0lqMDlQV1V1ZEhsd1pUOG9kR2hwY3k1eWRtRnNQV1V1WVhKbkxIUm9hWE11Ym1WNGREMWNJbVZ1WkZ3aUtUcGNJbTV2Y20xaGJGd2lQVDA5WlM1MGVYQmxKaVowSmlZb2RHaHBjeTV1WlhoMFBYUXBmU3htYVc1cGMyZzZablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ3RNVHQwUGowd095MHRkQ2w3ZG1GeUlISTlkR2hwY3k1MGNubEZiblJ5YVdWelczUmRPMmxtS0hJdVptbHVZV3hzZVV4dll6MDlQV1VwY21WMGRYSnVJSFJvYVhNdVkyOXRjR3hsZEdVb2NpNWpiMjF3YkdWMGFXOXVMSEl1WVdaMFpYSk1iMk1wTEhBb2Npa3NVSDE5TEZ3aVkyRjBZMmhjSWpwbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlIUTlkR2hwY3k1MGNubEZiblJ5YVdWekxteGxibWQwYUMweE8zUStQVEE3TFMxMEtYdDJZWElnY2oxMGFHbHpMblJ5ZVVWdWRISnBaWE5iZEYwN2FXWW9jaTUwY25sTWIyTTlQVDFsS1h0MllYSWdiajF5TG1OdmJYQnNaWFJwYjI0N2FXWW9YQ0owYUhKdmQxd2lQVDA5Ymk1MGVYQmxLWHQyWVhJZ2J6MXVMbUZ5Wnp0d0tISXBmWEpsZEhWeWJpQnZmWDEwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0pwYkd4bFoyRnNJR05oZEdOb0lHRjBkR1Z0Y0hSY0lpbDlMR1JsYkdWbllYUmxXV2xsYkdRNlpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUIwYUdsekxtUmxiR1ZuWVhSbFBYdHBkR1Z5WVhSdmNqcG9LR1VwTEhKbGMzVnNkRTVoYldVNmRDeHVaWGgwVEc5ak9uSjlMRkI5Zlgwb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVS9aVHBjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnZDJsdVpHOTNQM2RwYm1SdmR6cGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjMlZzWmo5elpXeG1PblJvYVhNcGZTa3VZMkZzYkNoMGFHbHpMRndpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCbmJHOWlZV3cvWjJ4dlltRnNPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCelpXeG1QM05sYkdZNlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JSGRwYm1SdmR6OTNhVzVrYjNjNmUzMHBmU3g3ZlYwc01UQXdPbHRtZFc1amRHbHZiaWgwTEhJc2JpbDdJV1oxYm1OMGFXOXVLSFFzYmlsN1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdaU1ltWlM1aGJXUS9aU2hiWFN4dUtUcGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnY2lZbWNpNWxlSEJ2Y25SelAzSXVaWGh3YjNKMGN6MXVLQ2s2ZEM1MGRqUTliaWdwZlNoMGFHbHpMR1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnWlNobEtYdHlaWFIxY200Z1pXNWpiMlJsVlZKSktHVXBMbkpsY0d4aFkyVW9MeVV5TlZzd0xUbGRXekF0T1Ywdlp5eG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJaVZjSWl0bExuTjFZbk4wY21sdVp5Z3pLWDBwZldaMWJtTjBhVzl1SUhRb2RDbDdkbUZ5SUhJOVhDSmNJanR3VzNRdVkyaGhja0YwS0RBcFhTWW1LSEk5ZEM1amFHRnlRWFFvTUNrc2REMTBMbk4xWW5OMGNtbHVaeWd4S1NrN2RtRnlJRzQ5WENKY0lpeHZQVndpWENJc2FUMGhNQ3hoUFNFeExITTlJVEU3WENJclhDSTlQVDF5UDJrOUlURTZYQ0l1WENJOVBUMXlQeWh2UFZ3aUxsd2lMRzQ5WENJdVhDSXBPbHdpTDF3aVBUMDljajhvYnoxY0lpOWNJaXh1UFZ3aUwxd2lLVHBjSWlOY0lqMDlQWEkvS0c4OVhDSWpYQ0lzYVQwaE1TazZYQ0k3WENJOVBUMXlQeWh2UFZ3aU8xd2lMRzQ5WENJN1hDSXNZVDBoTUN4elBTRXdLVHBjSWo5Y0lqMDlQWEkvS0c4OVhDSS9YQ0lzYmoxY0lpWmNJaXhoUFNFd0tUcGNJaVpjSWowOVBYSW1KaWh2UFZ3aUpsd2lMRzQ5WENJbVhDSXNZVDBoTUNrN1ptOXlLSFpoY2lCMVBWdGRMR3c5ZEM1emNHeHBkQ2hjSWl4Y0lpa3NZejFiWFN4bVBYdDlMR2c5TUR0b1BHd3ViR1Z1WjNSb08yZ3JLeWw3ZG1GeUlIazliRnRvWFN4dFBXNTFiR3c3YVdZb2VTNXBibVJsZUU5bUtGd2lPbHdpS1NFOVBTMHhLWHQyWVhJZ2RqMTVMbk53YkdsMEtGd2lPbHdpS1R0NVBYWmJNRjBzYlQxd1lYSnpaVWx1ZENoMld6RmRMREV3S1gxbWIzSW9kbUZ5SUY4OWUzMDdaRnQ1TG1Ob1lYSkJkQ2g1TG14bGJtZDBhQzB4S1YwN0tWOWJlUzVqYUdGeVFYUW9lUzVzWlc1bmRHZ3RNU2xkUFNFd0xIazllUzV6ZFdKemRISnBibWNvTUN4NUxteGxibWQwYUMweEtUdDJZWElnWWoxN2RISjFibU5oZEdVNmJTeHVZVzFsT25rc2MzVm1abWxqWlhNNlgzMDdZeTV3ZFhOb0tHSXBMR1piZVYwOVlpeDFMbkIxYzJnb2VTbDlkbUZ5SUdjOVpuVnVZM1JwYjI0b2RDbDdabTl5S0haaGNpQnlQVndpWENJc2RUMHdMR3c5TUR0c1BHTXViR1Z1WjNSb08yd3JLeWw3ZG1GeUlHWTlZMXRzWFN4d1BYUW9aaTV1WVcxbEtUdHBaaWh1ZFd4c1BUMDljSHg4ZG05cFpDQXdQVDA5Y0h4OFFYSnlZWGt1YVhOQmNuSmhlU2h3S1NZbU1EMDlQWEF1YkdWdVozUm9mSHhjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnY0NZbU1EMDlQVTlpYW1WamRDNXJaWGx6S0hBcExteGxibWQwYUNsMUt5czdaV3h6WlNCcFppaHlLejFzUFQwOWRUOXZPbTU4ZkZ3aUxGd2lMRUZ5Y21GNUxtbHpRWEp5WVhrb2NDa3BlMkVtSmloeUt6MW1MbTVoYldVclhDSTlYQ0lwTzJadmNpaDJZWElnWkQwd08yUThjQzVzWlc1bmRHZzdaQ3NyS1dRK01DWW1LSElyUFdZdWMzVm1abWxqWlhOYlhDSXFYQ0pkUDI1OGZGd2lMRndpT2x3aUxGd2lMR1l1YzNWbVptbGpaWE5iWENJcVhDSmRKaVpoSmlZb2NpczlaaTV1WVcxbEsxd2lQVndpS1Nrc2NpczlhVDlsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvY0Z0a1hTa3VjbVZ3YkdGalpTZ3ZJUzluTEZ3aUpUSXhYQ0lwT21Vb2NGdGtYU2w5Wld4elpTQnBaaWhjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnY0NsN1lTWW1JV1l1YzNWbVptbGpaWE5iWENJcVhDSmRKaVlvY2lzOVppNXVZVzFsSzF3aVBWd2lLVHQyWVhJZ2FEMGhNRHRtYjNJb2RtRnlJSGtnYVc0Z2NDbG9mSHdvY2lzOVppNXpkV1ptYVdObGMxdGNJaXBjSWwwL2JueDhYQ0lzWENJNlhDSXNYQ0lwTEdnOUlURXNjaXM5YVQ5bGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2VTa3VjbVZ3YkdGalpTZ3ZJUzluTEZ3aUpUSXhYQ0lwT21Vb2VTa3NjaXM5Wmk1emRXWm1hV05sYzF0Y0lpcGNJbDAvWENJOVhDSTZYQ0lzWENJc2NpczlhVDlsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvY0Z0NVhTa3VjbVZ3YkdGalpTZ3ZJUzluTEZ3aUpUSXhYQ0lwT21Vb2NGdDVYU2w5Wld4elpTQmhKaVlvY2lzOVppNXVZVzFsTEhNbUpsd2lYQ0k5UFQxd2ZId29jaXM5WENJOVhDSXBLU3h1ZFd4c0lUMW1MblJ5ZFc1allYUmxKaVlvY0Qxd0xuTjFZbk4wY21sdVp5Z3dMR1l1ZEhKMWJtTmhkR1VwS1N4eUt6MXBQMlZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h3S1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2h3S1gxeVpYUjFjbTRnY24wN2NtVjBkWEp1SUdjdWRtRnlUbUZ0WlhNOWRTeDdjSEpsWm1sNE9tOHNjM1ZpYzNScGRIVjBhVzl1T21kOWZXWjFibU4wYVc5dUlISW9aU2w3YVdZb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ2Npa3BjbVYwZFhKdUlHNWxkeUJ5S0dVcE8yWnZjaWgyWVhJZ2JqMWxMbk53YkdsMEtGd2llMXdpS1N4dlBWdHVMbk5vYVdaMEtDbGRMR2s5VzEwc1lUMWJYU3h6UFZ0ZE8yNHViR1Z1WjNSb1BqQTdLWHQyWVhJZ2RUMXVMbk5vYVdaMEtDa3NiRDExTG5Od2JHbDBLRndpZlZ3aUtWc3dYU3hqUFhVdWMzVmljM1J5YVc1bktHd3ViR1Z1WjNSb0t6RXBMR1k5ZENoc0tUdGhMbkIxYzJnb1ppNXpkV0p6ZEdsMGRYUnBiMjRwTEdrdWNIVnphQ2htTG5CeVpXWnBlQ2tzYnk1d2RYTm9LR01wTEhNOWN5NWpiMjVqWVhRb1ppNXpkV0p6ZEdsMGRYUnBiMjR1ZG1GeVRtRnRaWE1wZlhSb2FYTXVabWxzYkQxbWRXNWpkR2x2YmlobEtYdG1iM0lvZG1GeUlIUTliMXN3WFN4eVBUQTdjanhoTG14bGJtZDBhRHR5S3lzcGUzWmhjaUJ1UFdGYmNsMDdkQ3M5YmlobEtTeDBLejF2VzNJck1WMTljbVYwZFhKdUlIUjlMSFJvYVhNdWRtRnlUbUZ0WlhNOWN5eDBhR2x6TG5SbGJYQnNZWFJsUFdWOVpuVnVZM1JwYjI0Z2JpaGxMSFFwZTJsbUtHVTlQVDEwS1hKbGRIVnliaUV3TzJsbUtHVW1KblFtSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbEppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdkQ2w3YVdZb1FYSnlZWGt1YVhOQmNuSmhlU2hsS1NFOVBVRnljbUY1TG1selFYSnlZWGtvZENrcGNtVjBkWEp1SVRFN2FXWW9RWEp5WVhrdWFYTkJjbkpoZVNobEtTbDdhV1lvWlM1c1pXNW5kR2doUFQxMExteGxibWQwYUNseVpYUjFjbTRoTVR0bWIzSW9kbUZ5SUhJOU1EdHlQR1V1YkdWdVozUm9PM0lyS3lscFppZ2hiaWhsVzNKZExIUmJjbDBwS1hKbGRIVnliaUV4ZldWc2MyVjdkbUZ5SUc4N1ptOXlLRzhnYVc0Z1pTbHBaaWgyYjJsa0lEQTlQVDEwVzI5ZEppWjJiMmxrSURBaFBUMWxXMjlkS1hKbGRIVnliaUV4TzJadmNpaHZJR2x1SUhRcGFXWW9kbTlwWkNBd1BUMDlaVnR2WFNZbWRtOXBaQ0F3SVQwOWRGdHZYU2x5WlhSMWNtNGhNVHRtYjNJb2J5QnBiaUJsS1dsbUtDRnVLR1ZiYjEwc2RGdHZYU2twY21WMGRYSnVJVEY5Y21WMGRYSnVJVEI5Y21WMGRYSnVJVEY5Wm5WdVkzUnBiMjRnYnlobEtYdDJZWElnZEQxVGRISnBibWNvWlNrdWNtVndiR0ZqWlNndlhseGNjeXQ4WEZ4ekt5UXZaeXhjSWx3aUtTNXRZWFJqYUNndlhpaGJYanBjWEM4L0kxMHJPaWsvS0Z4Y0wxeGNMeWcvT2x0ZU9rQmRLaWcvT2pwYlhqcEFYU29wUDBBcFB5Z29XMTQ2WEZ3dlB5TmRLaWtvUHpvNktGeGNaQ29wS1Q4cEtUOG9XMTQvSTEwcUtTaGNYRDliWGlOZEtpay9LQ05iWEZ4elhGeFRYU29wUHk4cE8zSmxkSFZ5YmlCMFAzdG9jbVZtT25SYk1GMThmRndpWENJc2NISnZkRzlqYjJ3NmRGc3hYWHg4WENKY0lpeGhkWFJvYjNKcGRIazZkRnN5WFh4OFhDSmNJaXhvYjNOME9uUmJNMTE4ZkZ3aVhDSXNhRzl6ZEc1aGJXVTZkRnMwWFh4OFhDSmNJaXh3YjNKME9uUmJOVjE4ZkZ3aVhDSXNjR0YwYUc1aGJXVTZkRnMyWFh4OFhDSmNJaXh6WldGeVkyZzZkRnMzWFh4OFhDSmNJaXhvWVhOb09uUmJPRjE4ZkZ3aVhDSjlPbTUxYkd4OVpuVnVZM1JwYjI0Z2FTaGxMSFFwZTJaMWJtTjBhVzl1SUhJb1pTbDdkbUZ5SUhROVcxMDdjbVYwZFhKdUlHVXVjbVZ3YkdGalpTZ3ZYaWhjWEM1Y1hDNC9LRnhjTDN3a0tTa3JMeXhjSWx3aUtTNXlaWEJzWVdObEtDOWNYQzhvWEZ3dUtGeGNMM3drS1NrckwyY3NYQ0l2WENJcExuSmxjR3hoWTJVb0wxeGNMMXhjTGx4Y0xpUXZMRndpTHk0dUwxd2lLUzV5WlhCc1lXTmxLQzljWEM4L1cxNWNYQzlkS2k5bkxHWjFibU4wYVc5dUtHVXBlMXdpTHk0dVhDSTlQVDFsUDNRdWNHOXdLQ2s2ZEM1d2RYTm9LR1VwZlNrc2RDNXFiMmx1S0Z3aVhDSXBMbkpsY0d4aFkyVW9MMTVjWEM4dkxGd2lMMXdpUFQwOVpTNWphR0Z5UVhRb01Day9YQ0l2WENJNlhDSmNJaWw5Y21WMGRYSnVJSFE5YnloMGZIeGNJbHdpS1N4bFBXOG9aWHg4WENKY0lpa3NkQ1ltWlQ4b2RDNXdjbTkwYjJOdmJIeDhaUzV3Y205MGIyTnZiQ2tyS0hRdWNISnZkRzlqYjJ4OGZIUXVZWFYwYUc5eWFYUjVQM1F1WVhWMGFHOXlhWFI1T21VdVlYVjBhRzl5YVhSNUtTdHlLSFF1Y0hKdmRHOWpiMng4ZkhRdVlYVjBhRzl5YVhSNWZIeGNJaTljSWowOVBYUXVjR0YwYUc1aGJXVXVZMmhoY2tGMEtEQXBQM1F1Y0dGMGFHNWhiV1U2ZEM1d1lYUm9ibUZ0WlQ4b1pTNWhkWFJvYjNKcGRIa21KaUZsTG5CaGRHaHVZVzFsUDF3aUwxd2lPbHdpWENJcEsyVXVjR0YwYUc1aGJXVXVjMnhwWTJVb01DeGxMbkJoZEdodVlXMWxMbXhoYzNSSmJtUmxlRTltS0Z3aUwxd2lLU3N4S1N0MExuQmhkR2h1WVcxbE9tVXVjR0YwYUc1aGJXVXBLeWgwTG5CeWIzUnZZMjlzZkh4MExtRjFkR2h2Y21sMGVYeDhkQzV3WVhSb2JtRnRaVDkwTG5ObFlYSmphRHAwTG5ObFlYSmphSHg4WlM1elpXRnlZMmdwSzNRdWFHRnphRHB1ZFd4c2ZXWjFibU4wYVc5dUlHRW9aU2w3Y21WMGRYSnVJR1V1YzNCc2FYUW9YQ0lqWENJcFd6QmRmV1oxYm1OMGFXOXVJSE1vWlN4MEtYdHBaaWhsSmlaY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pTbHBaaWgyYjJsa0lEQTlQVDEwUDNROVpTNXBaRHBjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlM1cFpDWW1LSFE5YVNoMExHVXVhV1FwTEdVdWFXUTlkQ2tzUVhKeVlYa3VhWE5CY25KaGVTaGxLU2xtYjNJb2RtRnlJSEk5TUR0eVBHVXViR1Z1WjNSb08zSXJLeWx6S0dWYmNsMHNkQ2s3Wld4elpYdGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdaUzRrY21WbUppWW9aUzRrY21WbVBXa29kQ3hsTGlSeVpXWXBLVHRtYjNJb2RtRnlJRzRnYVc0Z1pTbGNJbVZ1ZFcxY0lpRTlQVzRtSm5Nb1pWdHVYU3gwS1gxOVpuVnVZM1JwYjI0Z2RTaGxLWHRsUFdWOGZGd2laVzVjSWp0MllYSWdkRDFGVzJWZE8zSmxkSFZ5YmlCbWRXNWpkR2x2YmlobEtYdDJZWElnY2oxMFcyVXVZMjlrWlYxOGZHZGJaUzVqYjJSbFhUdHBaaWhjSW5OMGNtbHVaMXdpSVQxMGVYQmxiMllnY2lseVpYUjFjbTVjSWxWdWEyNXZkMjRnWlhKeWIzSWdZMjlrWlNCY0lpdGxMbU52WkdVclhDSTZJRndpSzBwVFQwNHVjM1J5YVc1bmFXWjVLR1V1YldWemMyRm5aVkJoY21GdGN5azdkbUZ5SUc0OVpTNXdZWEpoYlhNN2NtVjBkWEp1SUhJdWNtVndiR0ZqWlNndlhGeDdLRnRlZTMxZEtpbGNYSDB2Wnl4bWRXNWpkR2x2YmlobExIUXBlM1poY2lCeVBXNWJkRjA3Y21WMGRYSnVYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEo4ZkZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCeVAzSTZaWDBwZlgxbWRXNWpkR2x2YmlCc0tHVXNkQ3h5TEc0c2J5bDdhV1lvUlhKeWIzSXVZMkZzYkNoMGFHbHpLU3gyYjJsa0lEQTlQVDFsS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs1dklHVnljbTl5SUdOdlpHVWdjM1Z3Y0d4cFpXUTZJRndpSzI0cE8zUm9hWE11YldWemMyRm5aVDFjSWx3aUxIUm9hWE11Y0dGeVlXMXpQWFFzZEdocGN5NWpiMlJsUFdVc2RHaHBjeTVrWVhSaFVHRjBhRDF5Zkh4Y0lsd2lMSFJvYVhNdWMyTm9aVzFoVUdGMGFEMXVmSHhjSWx3aUxIUm9hWE11YzNWaVJYSnliM0p6UFc5OGZHNTFiR3c3ZG1GeUlHazlibVYzSUVWeWNtOXlLSFJvYVhNdWJXVnpjMkZuWlNrN2FXWW9kR2hwY3k1emRHRmphejFwTG5OMFlXTnJmSHhwTG5OMFlXTnJkSEpoWTJVc0lYUm9hWE11YzNSaFkyc3BkSEo1ZTNSb2NtOTNJR2w5WTJGMFkyZ29hU2w3ZEdocGN5NXpkR0ZqYXoxcExuTjBZV05yZkh4cExuTjBZV05yZEhKaFkyVjlmV1oxYm1OMGFXOXVJR01vWlN4MEtYdHBaaWgwTG5OMVluTjBjbWx1Wnlnd0xHVXViR1Z1WjNSb0tUMDlQV1VwZTNaaGNpQnlQWFF1YzNWaWMzUnlhVzVuS0dVdWJHVnVaM1JvS1R0cFppaDBMbXhsYm1kMGFENHdKaVpjSWk5Y0lqMDlQWFF1WTJoaGNrRjBLR1V1YkdWdVozUm9MVEVwZkh4Y0lpTmNJajA5UFhJdVkyaGhja0YwS0RBcGZIeGNJajljSWowOVBYSXVZMmhoY2tGMEtEQXBLWEpsZEhWeWJpRXdmWEpsZEhWeWJpRXhmV1oxYm1OMGFXOXVJR1lvWlNsN2RtRnlJSFFzY2l4dVBXNWxkeUJvTEc4OWUzTmxkRVZ5Y205eVVtVndiM0owWlhJNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdVhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVS9kR2hwY3k1c1lXNW5kV0ZuWlNobEtUb29jajFsTENFd0tYMHNZV1JrUm05eWJXRjBPbVoxYm1OMGFXOXVLQ2w3Ymk1aFpHUkdiM0p0WVhRdVlYQndiSGtvYml4aGNtZDFiV1Z1ZEhNcGZTeHNZVzVuZFdGblpUcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdaVDhvUlZ0bFhYeDhLR1U5WlM1emNHeHBkQ2hjSWkxY0lpbGJNRjBwTENFaFJWdGxYU1ltS0hROVpTeGxLU2s2ZEgwc1lXUmtUR0Z1WjNWaFoyVTZablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjanRtYjNJb2NpQnBiaUIyS1hSYmNsMG1KaUYwVzNaYmNsMWRKaVlvZEZ0MlczSmRYVDEwVzNKZEtUdDJZWElnYmoxbExuTndiR2wwS0Z3aUxWd2lLVnN3WFR0cFppaEZXMjVkS1h0RlcyVmRQVTlpYW1WamRDNWpjbVZoZEdVb1JWdHVYU2s3Wm05eUtISWdhVzRnZENsY0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdSVnR1WFZ0eVhTWW1LRVZiYmwxYmNsMDlkRnR5WFNrc1JWdGxYVnR5WFQxMFczSmRmV1ZzYzJVZ1JWdGxYVDEwTEVWYmJsMDlkRHR5WlhSMWNtNGdkR2hwYzMwc1puSmxjMmhCY0drNlpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVppZ3BPM0psZEhWeWJpQmxKaVowTG14aGJtZDFZV2RsS0dVcExIUjlMSFpoYkdsa1lYUmxPbVoxYm1OMGFXOXVLR1VzYnl4cExHRXBlM1poY2lCelBYVW9kQ2tzYkQxeVAyWjFibU4wYVc5dUtHVXNkQ3h1S1h0eVpYUjFjbTRnY2lobExIUXNiaWw4ZkhNb1pTeDBMRzRwZlRwekxHTTlibVYzSUdnb2Jpd29JVEVwTEd3c2FTeGhLVHRjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnYnlZbUtHODlleVJ5WldZNmIzMHBMR011WVdSa1UyTm9aVzFoS0Z3aVhDSXNieWs3ZG1GeUlHWTlZeTUyWVd4cFpHRjBaVUZzYkNobExHOHNiblZzYkN4dWRXeHNMRndpWENJcE8zSmxkSFZ5YmlGbUppWmhKaVlvWmoxakxtSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLR1VzYnlrcExIUm9hWE11WlhKeWIzSTlaaXgwYUdsekxtMXBjM05wYm1jOVl5NXRhWE56YVc1bkxIUm9hWE11ZG1Gc2FXUTliblZzYkQwOVBXWXNkR2hwY3k1MllXeHBaSDBzZG1Gc2FXUmhkR1ZTWlhOMWJIUTZablZ1WTNScGIyNG9LWHQyWVhJZ1pUMTdmVHR5WlhSMWNtNGdkR2hwY3k1MllXeHBaR0YwWlM1aGNIQnNlU2hsTEdGeVozVnRaVzUwY3lrc1pYMHNkbUZzYVdSaGRHVk5kV3gwYVhCc1pUcG1kVzVqZEdsdmJpaGxMRzhzYVN4aEtYdDJZWElnY3oxMUtIUXBMR3c5Y2o5bWRXNWpkR2x2YmlobExIUXNiaWw3Y21WMGRYSnVJSElvWlN4MExHNHBmSHh6S0dVc2RDeHVLWDA2Y3l4alBXNWxkeUJvS0c0c0tDRXdLU3hzTEdrc1lTazdYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JRzhtSmlodlBYc2tjbVZtT205OUtTeGpMbUZrWkZOamFHVnRZU2hjSWx3aUxHOHBMR011ZG1Gc2FXUmhkR1ZCYkd3b1pTeHZMRzUxYkd3c2JuVnNiQ3hjSWx3aUtTeGhKaVpqTG1KaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektHVXNieWs3ZG1GeUlHWTllMzA3Y21WMGRYSnVJR1l1WlhKeWIzSnpQV011WlhKeWIzSnpMR1l1YldsemMybHVaejFqTG0xcGMzTnBibWNzWmk1MllXeHBaRDB3UFQwOVppNWxjbkp2Y25NdWJHVnVaM1JvTEdaOUxHRmtaRk5qYUdWdFlUcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQnVMbUZrWkZOamFHVnRZUzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdkbGRGTmphR1Z0WVRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdUxtZGxkRk5qYUdWdFlTNWhjSEJzZVNodUxHRnlaM1Z0Wlc1MGN5bDlMR2RsZEZOamFHVnRZVTFoY0RwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdUxtZGxkRk5qYUdWdFlVMWhjQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdkbGRGTmphR1Z0WVZWeWFYTTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdiaTVuWlhSVFkyaGxiV0ZWY21sekxtRndjR3g1S0c0c1lYSm5kVzFsYm5SektYMHNaMlYwVFdsemMybHVaMVZ5YVhNNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2JpNW5aWFJOYVhOemFXNW5WWEpwY3k1aGNIQnNlU2h1TEdGeVozVnRaVzUwY3lsOUxHUnliM0JUWTJobGJXRnpPbVoxYm1OMGFXOXVLQ2w3Ymk1a2NtOXdVMk5vWlcxaGN5NWhjSEJzZVNodUxHRnlaM1Z0Wlc1MGN5bDlMR1JsWm1sdVpVdGxlWGR2Y21RNlpuVnVZM1JwYjI0b0tYdHVMbVJsWm1sdVpVdGxlWGR2Y21RdVlYQndiSGtvYml4aGNtZDFiV1Z1ZEhNcGZTeGtaV1pwYm1WRmNuSnZjanBtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvWENKemRISnBibWRjSWlFOWRIbHdaVzltSUdWOGZDRXZYbHRCTFZwZEt5aGZXMEV0V2wwcktTb2tMeTUwWlhOMEtHVXBLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJa052WkdVZ2JtRnRaU0J0ZFhOMElHSmxJR0VnYzNSeWFXNW5JR2x1SUZWUVVFVlNYME5CVTBWZlYwbFVTRjlWVGtSRlVsTkRUMUpGVTF3aUtUdHBaaWhjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnZEh4OGRDVXhJVDA5TUh4OGREd3haVFFwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpUTI5a1pTQnVkVzFpWlhJZ2JYVnpkQ0JpWlNCaGJpQnBiblJsWjJWeUlENGdNVEF3TURCY0lpazdhV1lvWENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlIWmJaVjBwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpUlhKeWIzSWdZV3h5WldGa2VTQmtaV1pwYm1Wa09pQmNJaXRsSzF3aUlHRnpJRndpSzNaYlpWMHBPMmxtS0Z3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQmZXM1JkS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtWeWNtOXlJR052WkdVZ1lXeHlaV0ZrZVNCMWMyVmtPaUJjSWl0ZlczUmRLMXdpSUdGeklGd2lLM1FwTzNaYlpWMDlkQ3hmVzNSZFBXVXNaMXRsWFQxblczUmRQWEk3Wm05eUtIWmhjaUJ1SUdsdUlFVXBlM1poY2lCdlBVVmJibDA3YjF0bFhTWW1LRzliZEYwOWIxdDBYWHg4YjF0bFhTbDlmU3h5WlhObGREcG1kVzVqZEdsdmJpZ3BlMjR1Y21WelpYUW9LU3gwYUdsekxtVnljbTl5UFc1MWJHd3NkR2hwY3k1dGFYTnphVzVuUFZ0ZExIUm9hWE11ZG1Gc2FXUTlJVEI5TEcxcGMzTnBibWM2VzEwc1pYSnliM0k2Ym5Wc2JDeDJZV3hwWkRvaE1DeHViM0p0VTJOb1pXMWhPbk1zY21WemIyeDJaVlZ5YkRwcExHZGxkRVJ2WTNWdFpXNTBWWEpwT21Fc1pYSnliM0pEYjJSbGN6cDJmVHR5WlhSMWNtNGdieTVzWVc1bmRXRm5aU2hsZkh4Y0ltVnVYQ0lwTEc5OVQySnFaV04wTG10bGVYTjhmQ2hQWW1wbFkzUXVhMlY1Y3oxbWRXNWpkR2x2YmlncGUzWmhjaUJsUFU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3NkRDBoZTNSdlUzUnlhVzVuT201MWJHeDlMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsS0Z3aWRHOVRkSEpwYm1kY0lpa3NjajFiWENKMGIxTjBjbWx1WjF3aUxGd2lkRzlNYjJOaGJHVlRkSEpwYm1kY0lpeGNJblpoYkhWbFQyWmNJaXhjSW1oaGMwOTNibEJ5YjNCbGNuUjVYQ0lzWENKcGMxQnliM1J2ZEhsd1pVOW1YQ0lzWENKd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pWd2lMRndpWTI5dWMzUnlkV04wYjNKY0lsMHNiajF5TG14bGJtZDBhRHR5WlhSMWNtNGdablZ1WTNScGIyNG9ieWw3YVdZb1hDSnZZbXBsWTNSY0lpRTlkSGx3Wlc5bUlHOG1KbHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUc5OGZHNTFiR3c5UFQxdktYUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pQWW1wbFkzUXVhMlY1Y3lCallXeHNaV1FnYjI0Z2JtOXVMVzlpYW1WamRGd2lLVHQyWVhJZ2FUMWJYVHRtYjNJb2RtRnlJR0VnYVc0Z2J5bGxMbU5oYkd3b2J5eGhLU1ltYVM1d2RYTm9LR0VwTzJsbUtIUXBabTl5S0haaGNpQnpQVEE3Y3p4dU8zTXJLeWxsTG1OaGJHd29ieXh5VzNOZEtTWW1hUzV3ZFhOb0tISmJjMTBwTzNKbGRIVnliaUJwZlgwb0tTa3NUMkpxWldOMExtTnlaV0YwWlh4OEtFOWlhbVZqZEM1amNtVmhkR1U5Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtDbDdmWEpsZEhWeWJpQm1kVzVqZEdsdmJpaDBLWHRwWmlneElUMDlZWEpuZFcxbGJuUnpMbXhsYm1kMGFDbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlBZbXBsWTNRdVkzSmxZWFJsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzl1YkhrZ1lXTmpaWEIwY3lCdmJtVWdjR0Z5WVcxbGRHVnlMbHdpS1R0eVpYUjFjbTRnWlM1d2NtOTBiM1I1Y0dVOWRDeHVaWGNnWlgxOUtDa3BMRUZ5Y21GNUxtbHpRWEp5WVhsOGZDaEJjbkpoZVM1cGMwRnljbUY1UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aVcyOWlhbVZqZENCQmNuSmhlVjFjSWowOVBVOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2hsS1gwcExFRnljbUY1TG5CeWIzUnZkSGx3WlM1cGJtUmxlRTltZkh3b1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMlk5Wm5WdVkzUnBiMjRvWlNsN2FXWW9iblZzYkQwOVBYUm9hWE1wZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2p0MllYSWdkRDFQWW1wbFkzUW9kR2hwY3lrc2NqMTBMbXhsYm1kMGFENCtQakE3YVdZb01EMDlQWElwY21WMGRYSnVMVEU3ZG1GeUlHNDlNRHRwWmloaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUGpFbUppaHVQVTUxYldKbGNpaGhjbWQxYldWdWRITmJNVjBwTEc0aFBUMXVQMjQ5TURvd0lUMDliaVltYmlFOVBURXZNQ1ltYmlFOVBTMG9NUzh3S1NZbUtHNDlLRzQrTUh4OExURXBLazFoZEdndVpteHZiM0lvVFdGMGFDNWhZbk1vYmlrcEtTa3NiajQ5Y2lseVpYUjFjbTR0TVR0bWIzSW9kbUZ5SUc4OWJqNDlNRDl1T2sxaGRHZ3ViV0Y0S0hJdFRXRjBhQzVoWW5Nb2Jpa3NNQ2s3Ynp4eU8yOHJLeWxwWmlodklHbHVJSFFtSm5SYmIxMDlQVDFsS1hKbGRIVnliaUJ2TzNKbGRIVnliaTB4ZlNrc1QySnFaV04wTG1selJuSnZlbVZ1Zkh3b1QySnFaV04wTG1selJuSnZlbVZ1UFdaMWJtTjBhVzl1S0dVcGUyWnZjaWgyWVhJZ2REMWNJblIyTkY5MFpYTjBYMlp5YjNwbGJsOXJaWGxjSWp0bExtaGhjMDkzYmxCeWIzQmxjblI1S0hRcE95bDBLejFOWVhSb0xuSmhibVJ2YlNncE8zUnllWHR5WlhSMWNtNGdaVnQwWFQwaE1DeGtaV3hsZEdVZ1pWdDBYU3doTVgxallYUmphQ2h5S1h0eVpYUjFjbTRoTUgxOUtUdDJZWElnY0QxN1hDSXJYQ0k2SVRBc1hDSWpYQ0k2SVRBc1hDSXVYQ0k2SVRBc1hDSXZYQ0k2SVRBc1hDSTdYQ0k2SVRBc1hDSS9YQ0k2SVRBc1hDSW1YQ0k2SVRCOUxHUTllMXdpS2x3aU9pRXdmVHR5TG5CeWIzUnZkSGx3WlQxN2RHOVRkSEpwYm1jNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z2RHaHBjeTUwWlcxd2JHRjBaWDBzWm1sc2JFWnliMjFQWW1wbFkzUTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFJvYVhNdVptbHNiQ2htZFc1amRHbHZiaWgwS1h0eVpYUjFjbTRnWlZ0MFhYMHBmWDA3ZG1GeUlHZzlablZ1WTNScGIyNG9aU3gwTEhJc2JpeHZLWHRwWmloMGFHbHpMbTFwYzNOcGJtYzlXMTBzZEdocGN5NXRhWE56YVc1blRXRndQWHQ5TEhSb2FYTXVabTl5YldGMFZtRnNhV1JoZEc5eWN6MWxQMDlpYW1WamRDNWpjbVZoZEdVb1pTNW1iM0p0WVhSV1lXeHBaR0YwYjNKektUcDdmU3gwYUdsekxuTmphR1Z0WVhNOVpUOVBZbXBsWTNRdVkzSmxZWFJsS0dVdWMyTm9aVzFoY3lrNmUzMHNkR2hwY3k1amIyeHNaV04wVFhWc2RHbHdiR1U5ZEN4MGFHbHpMbVZ5Y205eWN6MWJYU3gwYUdsekxtaGhibVJzWlVWeWNtOXlQWFEvZEdocGN5NWpiMnhzWldOMFJYSnliM0k2ZEdocGN5NXlaWFIxY201RmNuSnZjaXh1SmlZb2RHaHBjeTVqYUdWamExSmxZM1Z5YzJsMlpUMGhNQ3gwYUdsekxuTmpZVzV1WldROVcxMHNkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVQVnRkTEhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmxOamFHVnRZWE05VzEwc2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVZtRnNhV1JoZEdsdmJrVnljbTl5Y3oxYlhTeDBhR2x6TG5aaGJHbGtZWFJsWkZOamFHVnRZWE5MWlhrOVhDSjBkalJmZG1Gc2FXUmhkR2x2Ymw5cFpGd2lMSFJvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVUMWNJblIyTkY5MllXeHBaR0YwYVc5dVgyVnljbTl5YzE5cFpGd2lLU3h2SmlZb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWelBTRXdMSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelBYdDlMSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBwTEhSb2FYTXVaWEp5YjNKU1pYQnZjblJsY2oxeWZIeDFLRndpWlc1Y0lpa3NYQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSFJvYVhNdVpYSnliM0pTWlhCdmNuUmxjaWwwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0prWldKMVoxd2lLVHRwWmloMGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2N6MTdmU3hsS1dadmNpaDJZWElnYVNCcGJpQmxMbVJsWm1sdVpXUkxaWGwzYjNKa2N5bDBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjMXRwWFQxbExtUmxabWx1WldSTFpYbDNiM0prYzF0cFhTNXpiR2xqWlNnd0tYMDdhQzV3Y205MGIzUjVjR1V1WkdWbWFXNWxTMlY1ZDI5eVpEMW1kVzVqZEdsdmJpaGxMSFFwZTNSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcyVmRQWFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJWZGZIeGJYU3gwYUdsekxtUmxabWx1WldSTFpYbDNiM0prYzF0bFhTNXdkWE5vS0hRcGZTeG9MbkJ5YjNSdmRIbHdaUzVqY21WaGRHVkZjbkp2Y2oxbWRXNWpkR2x2YmlobExIUXNjaXh1TEc4c2FTeGhLWHQyWVhJZ2N6MXVaWGNnYkNobExIUXNjaXh1TEc4cE8zSmxkSFZ5YmlCekxtMWxjM05oWjJVOWRHaHBjeTVsY25KdmNsSmxjRzl5ZEdWeUtITXNhU3hoS1N4emZTeG9MbkJ5YjNSdmRIbHdaUzV5WlhSMWNtNUZjbkp2Y2oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1pYMHNhQzV3Y205MGIzUjVjR1V1WTI5c2JHVmpkRVZ5Y205eVBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmxKaVowYUdsekxtVnljbTl5Y3k1d2RYTm9LR1VwTEc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5CeVpXWnBlRVZ5Y205eWN6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN1ptOXlLSFpoY2lCdVBXVTdiangwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2c3YmlzcktYUm9hWE11WlhKeWIzSnpXMjVkUFhSb2FYTXVaWEp5YjNKelcyNWRMbkJ5WldacGVGZHBkR2dvZEN4eUtUdHlaWFIxY200Z2RHaHBjMzBzYUM1d2NtOTBiM1I1Y0dVdVltRnVWVzVyYm05M2JsQnliM0JsY25ScFpYTTlablZ1WTNScGIyNG9aU3gwS1h0bWIzSW9kbUZ5SUhJZ2FXNGdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5bDdkbUZ5SUc0OWRHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxsVk9TMDVQVjA1ZlVGSlBVRVZTVkZrc2UzQmhkR2c2Y24wc2NpeGNJbHdpTEc1MWJHd3NaU3gwS1N4dlBYUm9hWE11YUdGdVpHeGxSWEp5YjNJb2JpazdhV1lvYnlseVpYUjFjbTRnYjMxeVpYUjFjbTRnYm5Wc2JIMHNhQzV3Y205MGIzUjVjR1V1WVdSa1JtOXliV0YwUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUdVcGUyWnZjaWgyWVhJZ2NpQnBiaUJsS1hSb2FYTXVZV1JrUm05eWJXRjBLSElzWlZ0eVhTazdjbVYwZFhKdUlIUm9hWE45ZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKelcyVmRQWFI5TEdndWNISnZkRzkwZVhCbExuSmxjMjlzZG1WU1pXWnpQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9kbTlwWkNBd0lUMDlaUzRrY21WbUtYdHBaaWgwUFhSOGZIdDlMSFJiWlM0a2NtVm1YU2x5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMa05KVWtOVlRFRlNYMUpGUmtWU1JVNURSU3g3ZFhKc2N6cFBZbXBsWTNRdWEyVjVjeWgwS1M1cWIybHVLRndpTENCY0lpbDlMRndpWENJc1hDSmNJaXh1ZFd4c0xIWnZhV1FnTUN4bEtUdDBXMlV1SkhKbFpsMDlJVEFzWlQxMGFHbHpMbWRsZEZOamFHVnRZU2hsTGlSeVpXWXNkQ2w5Y21WMGRYSnVJR1Y5TEdndWNISnZkRzkwZVhCbExtZGxkRk5qYUdWdFlUMW1kVzVqZEdsdmJpaGxMSFFwZTNaaGNpQnlPMmxtS0hadmFXUWdNQ0U5UFhSb2FYTXVjMk5vWlcxaGMxdGxYU2x5WlhSMWNtNGdjajEwYUdsekxuTmphR1Z0WVhOYlpWMHNkR2hwY3k1eVpYTnZiSFpsVW1WbWN5aHlMSFFwTzNaaGNpQnVQV1VzYnoxY0lsd2lPMmxtS0dVdWFXNWtaWGhQWmloY0lpTmNJaWtoUFQwdE1TWW1LRzg5WlM1emRXSnpkSEpwYm1jb1pTNXBibVJsZUU5bUtGd2lJMXdpS1NzeEtTeHVQV1V1YzNWaWMzUnlhVzVuS0RBc1pTNXBibVJsZUU5bUtGd2lJMXdpS1NrcExGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQjBhR2x6TG5OamFHVnRZWE5iYmwwcGUzSTlkR2hwY3k1elkyaGxiV0Z6VzI1ZE8zWmhjaUJwUFdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENodktUdHBaaWhjSWx3aVBUMDlhU2x5WlhSMWNtNGdkR2hwY3k1eVpYTnZiSFpsVW1WbWN5aHlMSFFwTzJsbUtGd2lMMXdpSVQwOWFTNWphR0Z5UVhRb01Da3BjbVYwZFhKdU8yWnZjaWgyWVhJZ1lUMXBMbk53YkdsMEtGd2lMMXdpS1M1emJHbGpaU2d4S1N4elBUQTdjenhoTG14bGJtZDBhRHR6S3lzcGUzWmhjaUIxUFdGYmMxMHVjbVZ3YkdGalpTZ3ZmakV2Wnl4Y0lpOWNJaWt1Y21Wd2JHRmpaU2d2ZmpBdlp5eGNJbjVjSWlrN2FXWW9kbTlwWkNBd1BUMDljbHQxWFNsN2NqMTJiMmxrSURBN1luSmxZV3Q5Y2oxeVczVmRmV2xtS0hadmFXUWdNQ0U5UFhJcGNtVjBkWEp1SUhSb2FYTXVjbVZ6YjJ4MlpWSmxabk1vY2l4MEtYMTJiMmxrSURBOVBUMTBhR2x6TG0xcGMzTnBibWRiYmwwbUppaDBhR2x6TG0xcGMzTnBibWN1Y0hWemFDaHVLU3gwYUdsekxtMXBjM05wYm1kYmJsMDliaXgwYUdsekxtMXBjM05wYm1kTllYQmJibDA5YmlsOUxHZ3VjSEp2ZEc5MGVYQmxMbk5sWVhKamFGTmphR1Z0WVhNOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1VwS1dadmNpaDJZWElnY2owd08zSThaUzVzWlc1bmRHZzdjaXNyS1hSb2FYTXVjMlZoY21Ob1UyTm9aVzFoY3lobFczSmRMSFFwTzJWc2MyVWdhV1lvWlNZbVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVXBlMXdpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJsTG1sa0ppWmpLSFFzWlM1cFpDa21Kblp2YVdRZ01EMDlQWFJvYVhNdWMyTm9aVzFoYzF0bExtbGtYU1ltS0hSb2FYTXVjMk5vWlcxaGMxdGxMbWxrWFQxbEtUdG1iM0lvZG1GeUlHNGdhVzRnWlNscFppaGNJbVZ1ZFcxY0lpRTlQVzRwYVdZb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVmJibDBwZEdocGN5NXpaV0Z5WTJoVFkyaGxiV0Z6S0dWYmJsMHNkQ2s3Wld4elpTQnBaaWhjSWlSeVpXWmNJajA5UFc0cGUzWmhjaUJ2UFdFb1pWdHVYU2s3YnlZbWRtOXBaQ0F3UFQwOWRHaHBjeTV6WTJobGJXRnpXMjlkSmlaMmIybGtJREE5UFQxMGFHbHpMbTFwYzNOcGJtZE5ZWEJiYjEwbUppaDBhR2x6TG0xcGMzTnBibWROWVhCYmIxMDlieWw5Zlgwc2FDNXdjbTkwYjNSNWNHVXVZV1JrVTJOb1pXMWhQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9YQ0p6ZEhKcGJtZGNJaUU5ZEhsd1pXOW1JR1Y4ZkZ3aWRXNWtaV1pwYm1Wa1hDSTlQWFI1Y0dWdlppQjBLWHRwWmloY0ltOWlhbVZqZEZ3aUlUMTBlWEJsYjJZZ1pYeDhYQ0p6ZEhKcGJtZGNJaUU5ZEhsd1pXOW1JR1V1YVdRcGNtVjBkWEp1TzNROVpTeGxQWFF1YVdSOVpUMDlQV0VvWlNrclhDSWpYQ0ltSmlobFBXRW9aU2twTEhSb2FYTXVjMk5vWlcxaGMxdGxYVDEwTEdSbGJHVjBaU0IwYUdsekxtMXBjM05wYm1kTllYQmJaVjBzY3loMExHVXBMSFJvYVhNdWMyVmhjbU5vVTJOb1pXMWhjeWgwTEdVcGZTeG9MbkJ5YjNSdmRIbHdaUzVuWlhSVFkyaGxiV0ZOWVhBOVpuVnVZM1JwYjI0b0tYdDJZWElnWlQxN2ZUdG1iM0lvZG1GeUlIUWdhVzRnZEdocGN5NXpZMmhsYldGektXVmJkRjA5ZEdocGN5NXpZMmhsYldGelczUmRPM0psZEhWeWJpQmxmU3hvTG5CeWIzUnZkSGx3WlM1blpYUlRZMmhsYldGVmNtbHpQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVnRkTzJadmNpaDJZWElnY2lCcGJpQjBhR2x6TG5OamFHVnRZWE1wWlNZbUlXVXVkR1Z6ZENoeUtYeDhkQzV3ZFhOb0tISXBPM0psZEhWeWJpQjBmU3hvTG5CeWIzUnZkSGx3WlM1blpYUk5hWE56YVc1blZYSnBjejFtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFiWFR0bWIzSW9kbUZ5SUhJZ2FXNGdkR2hwY3k1dGFYTnphVzVuVFdGd0tXVW1KaUZsTG5SbGMzUW9jaWw4ZkhRdWNIVnphQ2h5S1R0eVpYUjFjbTRnZEgwc2FDNXdjbTkwYjNSNWNHVXVaSEp2Y0ZOamFHVnRZWE05Wm5WdVkzUnBiMjRvS1h0MGFHbHpMbk5qYUdWdFlYTTllMzBzZEdocGN5NXlaWE5sZENncGZTeG9MbkJ5YjNSdmRIbHdaUzV5WlhObGREMW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWJXbHpjMmx1WnoxYlhTeDBhR2x6TG0xcGMzTnBibWROWVhBOWUzMHNkR2hwY3k1bGNuSnZjbk05VzExOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRV3hzUFdaMWJtTjBhVzl1S0dVc2RDeHlMRzRzYnlsN2RtRnlJR2s3YVdZb2REMTBhR2x6TG5KbGMyOXNkbVZTWldaektIUXBMQ0YwS1hKbGRIVnliaUJ1ZFd4c08ybG1LSFFnYVc1emRHRnVZMlZ2WmlCc0tYSmxkSFZ5YmlCMGFHbHpMbVZ5Y205eWN5NXdkWE5vS0hRcExIUTdkbUZ5SUdFc2N6MTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZ3NkVDF1ZFd4c0xHTTliblZzYkR0cFppaDBhR2x6TG1Ob1pXTnJVbVZqZFhKemFYWmxKaVpsSmlaY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ1pTbDdhV1lvYVQwaGRHaHBjeTV6WTJGdWJtVmtMbXhsYm1kMGFDeGxXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMHBlM1poY2lCbVBXVmJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhTNXBibVJsZUU5bUtIUXBPMmxtS0dZaFBUMHRNU2x5WlhSMWNtNGdkR2hwY3k1bGNuSnZjbk05ZEdocGN5NWxjbkp2Y25NdVkyOXVZMkYwS0dWYmRHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1WFZ0bVhTa3NiblZzYkgxcFppaFBZbXBsWTNRdWFYTkdjbTk2Wlc0b1pTa21KaWhoUFhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmk1cGJtUmxlRTltS0dVcExHRWhQVDB0TVNrcGUzWmhjaUJ3UFhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmxOamFHVnRZWE5iWVYwdWFXNWtaWGhQWmloMEtUdHBaaWh3SVQwOUxURXBjbVYwZFhKdUlIUm9hWE11WlhKeWIzSnpQWFJvYVhNdVpYSnliM0p6TG1OdmJtTmhkQ2gwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpXMkZkVzNCZEtTeHVkV3hzZldsbUtIUm9hWE11YzJOaGJtNWxaQzV3ZFhOb0tHVXBMRTlpYW1WamRDNXBjMFp5YjNwbGJpaGxLU2xoUFQwOUxURW1KaWhoUFhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmk1c1pXNW5kR2dzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1TG5CMWMyZ29aU2tzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjeTV3ZFhOb0tGdGRLU2tzZFQxMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0Z6VzJGZExteGxibWQwYUN4MGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0Z6VzJGZFczVmRQWFFzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1Vm1Gc2FXUmhkR2x2YmtWeWNtOXljMXRoWFZ0MVhUMWJYVHRsYkhObGUybG1LQ0ZsVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjBwZEhKNWUwOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsTEhSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlU3g3ZG1Gc2RXVTZXMTBzWTI5dVptbG5kWEpoWW14bE9pRXdmU2tzVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVXNkR2hwY3k1MllXeHBaR0YwYVc5dVJYSnliM0p6UzJWNUxIdDJZV3gxWlRwYlhTeGpiMjVtYVdkMWNtRmliR1U2SVRCOUtYMWpZWFJqYUNoa0tYdGxXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMDlXMTBzWlZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkUFZ0ZGZXTTlaVnQwYUdsekxuWmhiR2xrWVhSbFpGTmphR1Z0WVhOTFpYbGRMbXhsYm1kMGFDeGxXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMWJZMTA5ZEN4bFczUm9hWE11ZG1Gc2FXUmhkR2x2YmtWeWNtOXljMHRsZVYxYlkxMDlXMTE5ZlhaaGNpQm9QWFJvYVhNdVpYSnliM0p6TG14bGJtZDBhQ3g1UFhSb2FYTXVkbUZzYVdSaGRHVkNZWE5wWXlobExIUXNieWw4ZkhSb2FYTXVkbUZzYVdSaGRHVk9kVzFsY21saktHVXNkQ3h2S1h4OGRHaHBjeTUyWVd4cFpHRjBaVk4wY21sdVp5aGxMSFFzYnlsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVTaGxMSFFzYnlsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUW9aU3gwTEc4cGZIeDBhR2x6TG5aaGJHbGtZWFJsUTI5dFltbHVZWFJwYjI1ektHVXNkQ3h2S1h4OGRHaHBjeTUyWVd4cFpHRjBaVWg1Y0dWeWJXVmthV0VvWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFJtOXliV0YwS0dVc2RDeHZLWHg4ZEdocGN5NTJZV3hwWkdGMFpVUmxabWx1WldSTFpYbDNiM0prY3lobExIUXNieWw4Zkc1MWJHdzdhV1lvYVNsN1ptOXlLRHQwYUdsekxuTmpZVzV1WldRdWJHVnVaM1JvT3lsN2RtRnlJRzA5ZEdocGN5NXpZMkZ1Ym1Wa0xuQnZjQ2dwTzJSbGJHVjBaU0J0VzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjE5ZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1UFZ0ZExIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhNOVcxMTlhV1lvZVh4OGFDRTlQWFJvYVhNdVpYSnliM0p6TG14bGJtZDBhQ2xtYjNJb08zSW1Kbkl1YkdWdVozUm9mSHh1SmladUxteGxibWQwYURzcGUzWmhjaUIyUFhJbUpuSXViR1Z1WjNSb1Axd2lYQ0lyY2k1d2IzQW9LVHB1ZFd4c0xGODliaVltYmk1c1pXNW5kR2cvWENKY0lpdHVMbkJ2Y0NncE9tNTFiR3c3ZVNZbUtIazllUzV3Y21WbWFYaFhhWFJvS0hZc1h5a3BMSFJvYVhNdWNISmxabWw0UlhKeWIzSnpLR2dzZGl4ZktYMXlaWFIxY200Z2JuVnNiQ0U5UFhVL2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVZtRnNhV1JoZEdsdmJrVnljbTl5YzF0aFhWdDFYVDEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h6S1RwdWRXeHNJVDA5WXlZbUtHVmJkR2hwY3k1MllXeHBaR0YwYVc5dVJYSnliM0p6UzJWNVhWdGpYVDEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h6S1Nrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2loNUtYMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZHYjNKdFlYUTlablZ1WTNScGIyNG9aU3gwS1h0cFppaGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdkQzVtYjNKdFlYUjhmQ0YwYUdsekxtWnZjbTFoZEZaaGJHbGtZWFJ2Y25OYmRDNW1iM0p0WVhSZEtYSmxkSFZ5YmlCdWRXeHNPM1poY2lCeVBYUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXQwTG1admNtMWhkRjB1WTJGc2JDaHVkV3hzTEdVc2RDazdjbVYwZFhKdVhDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlISjhmRndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJ5UDNSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1R1QxSk5RVlJmUTFWVFZFOU5MSHR0WlhOellXZGxPbko5TEZ3aVhDSXNYQ0l2Wm05eWJXRjBYQ0lzYm5Wc2JDeGxMSFFwT25JbUpsd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQnlQM1JvYVhNdVkzSmxZWFJsUlhKeWIzSW9kaTVHVDFKTlFWUmZRMVZUVkU5TkxIdHRaWE56WVdkbE9uSXViV1Z6YzJGblpYeDhYQ0kvWENKOUxISXVaR0YwWVZCaGRHaDhmRndpWENJc2NpNXpZMmhsYldGUVlYUm9mSHhjSWk5bWIzSnRZWFJjSWl4dWRXeHNMR1VzZENrNmJuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWRVpXWnBibVZrUzJWNWQyOXlaSE05Wm5WdVkzUnBiMjRvWlN4MExISXBlMlp2Y2loMllYSWdiaUJwYmlCMGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2N5bHBaaWhjSW5WdVpHVm1hVzVsWkZ3aUlUMTBlWEJsYjJZZ2RGdHVYU2xtYjNJb2RtRnlJRzg5ZEdocGN5NWtaV1pwYm1Wa1MyVjVkMjl5WkhOYmJsMHNhVDB3TzJrOGJ5NXNaVzVuZEdnN2FTc3JLWHQyWVhJZ1lUMXZXMmxkTEhNOVlTaGxMSFJiYmwwc2RDeHlLVHRwWmloY0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2MzeDhYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JSE1wY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9kaTVMUlZsWFQxSkVYME5WVTFSUFRTeDdhMlY1T200c2JXVnpjMkZuWlRwemZTeGNJbHdpTEZ3aVhDSXNiblZzYkN4bExIUXBMbkJ5WldacGVGZHBkR2dvYm5Wc2JDeHVLVHRwWmloekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjeWw3ZG1GeUlIVTljeTVqYjJSbE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUIxS1h0cFppZ2hkbHQxWFNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKVmJtUmxabWx1WldRZ1pYSnliM0lnWTI5a1pTQW9kWE5sSUdSbFptbHVaVVZ5Y205eUtUb2dYQ0lyZFNrN2RUMTJXM1ZkZldWc2MyVmNJbTUxYldKbGNsd2lJVDEwZVhCbGIyWWdkU1ltS0hVOWRpNUxSVmxYVDFKRVgwTlZVMVJQVFNrN2RtRnlJR3c5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhNdWJXVnpjMkZuWlQ5ekxtMWxjM05oWjJVNmUydGxlVHB1TEcxbGMzTmhaMlU2Y3k1dFpYTnpZV2RsZkh4Y0lqOWNJbjBzWXoxekxuTmphR1Z0WVZCaGRHaDhmRndpTDF3aUsyNHVjbVZ3YkdGalpTZ3ZmaTluTEZ3aWZqQmNJaWt1Y21Wd2JHRmpaU2d2WEZ3dkwyY3NYQ0orTVZ3aUtUdHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMUxHd3NjeTVrWVhSaFVHRjBhSHg4Ym5Wc2JDeGpMRzUxYkd3c1pTeDBLWDE5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRbUZ6YVdNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVPM0psZEhWeWJpaHVQWFJvYVhNdWRtRnNhV1JoZEdWVWVYQmxLR1VzZEN4eUtTay9iaTV3Y21WbWFYaFhhWFJvS0c1MWJHd3NYQ0owZVhCbFhDSXBPaWh1UFhSb2FYTXVkbUZzYVdSaGRHVkZiblZ0S0dVc2RDeHlLU2svYmk1d2NtVm1hWGhYYVhSb0tHNTFiR3dzWENKMGVYQmxYQ0lwT201MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVkhsd1pUMW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtIWnZhV1FnTUQwOVBYUXVkSGx3WlNseVpYUjFjbTRnYm5Wc2JEdDJZWElnY2oxMGVYQmxiMllnWlR0dWRXeHNQVDA5WlQ5eVBWd2liblZzYkZ3aU9rRnljbUY1TG1selFYSnlZWGtvWlNrbUppaHlQVndpWVhKeVlYbGNJaWs3ZG1GeUlHNDlkQzUwZVhCbE8wRnljbUY1TG1selFYSnlZWGtvYmlsOGZDaHVQVnR1WFNrN1ptOXlLSFpoY2lCdlBUQTdienh1TG14bGJtZDBhRHR2S3lzcGUzWmhjaUJwUFc1YmIxMDdhV1lvYVQwOVBYSjhmRndpYVc1MFpXZGxjbHdpUFQwOWFTWW1YQ0p1ZFcxaVpYSmNJajA5UFhJbUptVWxNVDA5UFRBcGNtVjBkWEp1SUc1MWJHeDljbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNUpUbFpCVEVsRVgxUlpVRVVzZTNSNWNHVTZjaXhsZUhCbFkzUmxaRHB1TG1wdmFXNG9YQ0l2WENJcGZTeGNJbHdpTEZ3aVhDSXNiblZzYkN4bExIUXBmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVWdWRXMDlablZ1WTNScGIyNG9aU3gwS1h0cFppaDJiMmxrSURBOVBUMTBXMXdpWlc1MWJWd2lYU2x5WlhSMWNtNGdiblZzYkR0bWIzSW9kbUZ5SUhJOU1EdHlQSFJiWENKbGJuVnRYQ0pkTG14bGJtZDBhRHR5S3lzcGUzWmhjaUJ2UFhSYlhDSmxiblZ0WENKZFczSmRPMmxtS0c0b1pTeHZLU2x5WlhSMWNtNGdiblZzYkgxeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtWT1ZVMWZUVWxUVFVGVVEwZ3NlM1poYkhWbE9sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJLVTA5T1AwcFRUMDR1YzNSeWFXNW5hV1o1S0dVcE9tVjlMRndpWENJc1hDSmNJaXh1ZFd4c0xHVXNkQ2w5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFRuVnRaWEpwWXoxbWRXNWpkR2x2YmlobExIUXNjaWw3Y21WMGRYSnVJSFJvYVhNdWRtRnNhV1JoZEdWTmRXeDBhWEJzWlU5bUtHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVTFwYmsxaGVDaGxMSFFzY2lsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZPWVU0b1pTeDBMSElwZkh4dWRXeHNmVHQyWVhJZ2VUMU5ZWFJvTG5CdmR5Z3lMQzAxTVNrc2JUMHhMWGs3YUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWTmRXeDBhWEJzWlU5bVBXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlISTlkQzV0ZFd4MGFYQnNaVTltZkh4MExtUnBkbWx6YVdKc1pVSjVPMmxtS0hadmFXUWdNRDA5UFhJcGNtVjBkWEp1SUc1MWJHdzdhV1lvWENKdWRXMWlaWEpjSWowOWRIbHdaVzltSUdVcGUzWmhjaUJ1UFdVdmNpVXhPMmxtS0c0K1BYa21KbTQ4YlNseVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGs1VlRVSkZVbDlOVlV4VVNWQk1SVjlQUml4N2RtRnNkV1U2WlN4dGRXeDBhWEJzWlU5bU9uSjlMRndpWENJc1hDSmNJaXh1ZFd4c0xHVXNkQ2w5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUV2x1VFdGNFBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb1hDSnVkVzFpWlhKY0lpRTlkSGx3Wlc5bUlHVXBjbVYwZFhKdUlHNTFiR3c3YVdZb2RtOXBaQ0F3SVQwOWRDNXRhVzVwYlhWdEtYdHBaaWhsUEhRdWJXbHVhVzExYlNseVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGs1VlRVSkZVbDlOU1U1SlRWVk5MSHQyWVd4MVpUcGxMRzFwYm1sdGRXMDZkQzV0YVc1cGJYVnRmU3hjSWx3aUxGd2lMMjFwYm1sdGRXMWNJaXh1ZFd4c0xHVXNkQ2s3YVdZb2RDNWxlR05zZFhOcGRtVk5hVzVwYlhWdEppWmxQVDA5ZEM1dGFXNXBiWFZ0S1hKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VGxWTlFrVlNYMDFKVGtsTlZVMWZSVmhEVEZWVFNWWkZMSHQyWVd4MVpUcGxMRzFwYm1sdGRXMDZkQzV0YVc1cGJYVnRmU3hjSWx3aUxGd2lMMlY0WTJ4MWMybDJaVTFwYm1sdGRXMWNJaXh1ZFd4c0xHVXNkQ2w5YVdZb2RtOXBaQ0F3SVQwOWRDNXRZWGhwYlhWdEtYdHBaaWhsUG5RdWJXRjRhVzExYlNseVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGs1VlRVSkZVbDlOUVZoSlRWVk5MSHQyWVd4MVpUcGxMRzFoZUdsdGRXMDZkQzV0WVhocGJYVnRmU3hjSWx3aUxGd2lMMjFoZUdsdGRXMWNJaXh1ZFd4c0xHVXNkQ2s3YVdZb2RDNWxlR05zZFhOcGRtVk5ZWGhwYlhWdEppWmxQVDA5ZEM1dFlYaHBiWFZ0S1hKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VGxWTlFrVlNYMDFCV0VsTlZVMWZSVmhEVEZWVFNWWkZMSHQyWVd4MVpUcGxMRzFoZUdsdGRXMDZkQzV0WVhocGJYVnRmU3hjSWx3aUxGd2lMMlY0WTJ4MWMybDJaVTFoZUdsdGRXMWNJaXh1ZFd4c0xHVXNkQ2w5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUbUZPUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdVhDSnVkVzFpWlhKY0lpRTlkSGx3Wlc5bUlHVS9iblZzYkRwcGMwNWhUaWhsS1QwOVBTRXdmSHhsUFQwOU1TOHdmSHhsUFQwOUxTZ3hMekFwUDNSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1T1ZVMUNSVkpmVGs5VVgwRmZUbFZOUWtWU0xIdDJZV3gxWlRwbGZTeGNJbHdpTEZ3aUwzUjVjR1ZjSWl4dWRXeHNMR1VzZENrNmJuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVGRISnBibWM5Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQjBhR2x6TG5aaGJHbGtZWFJsVTNSeWFXNW5UR1Z1WjNSb0tHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVk4wY21sdVoxQmhkSFJsY200b1pTeDBMSElwZkh4dWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlZOMGNtbHVaMHhsYm1kMGFEMW1kVzVqZEdsdmJpaGxMSFFwZTNKbGRIVnlibHdpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJsUDI1MWJHdzZkbTlwWkNBd0lUMDlkQzV0YVc1TVpXNW5kR2dtSm1VdWJHVnVaM1JvUEhRdWJXbHVUR1Z1WjNSb1AzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNVRWRkpKVGtkZlRFVk9SMVJJWDFOSVQxSlVMSHRzWlc1bmRHZzZaUzVzWlc1bmRHZ3NiV2x1YVcxMWJUcDBMbTFwYmt4bGJtZDBhSDBzWENKY0lpeGNJaTl0YVc1TVpXNW5kR2hjSWl4dWRXeHNMR1VzZENrNmRtOXBaQ0F3SVQwOWRDNXRZWGhNWlc1bmRHZ21KbVV1YkdWdVozUm9QblF1YldGNFRHVnVaM1JvUDNSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1VFZGSkpUa2RmVEVWT1IxUklYMHhQVGtjc2UyeGxibWQwYURwbExteGxibWQwYUN4dFlYaHBiWFZ0T25RdWJXRjRUR1Z1WjNSb2ZTeGNJbHdpTEZ3aUwyMWhlRXhsYm1kMGFGd2lMRzUxYkd3c1pTeDBLVHB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVk4wY21sdVoxQmhkSFJsY200OVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pYeDhYQ0p6ZEhKcGJtZGNJaUU5ZEhsd1pXOW1JSFF1Y0dGMGRHVnliaVltSVNoMExuQmhkSFJsY200Z2FXNXpkR0Z1WTJWdlppQlNaV2RGZUhBcEtYSmxkSFZ5YmlCdWRXeHNPM1poY2lCeU8ybG1LSFF1Y0dGMGRHVnliaUJwYm5OMFlXNWpaVzltSUZKbFowVjRjQ2x5UFhRdWNHRjBkR1Z5Ymp0bGJITmxlM1poY2lCdUxHODlYQ0pjSWl4cFBYUXVjR0YwZEdWeWJpNXRZWFJqYUNndlhseGNMeWd1S3lsY1hDOG9XMmx0WjEwcUtTUXZLVHRwUHlodVBXbGJNVjBzYnoxcFd6SmRLVHB1UFhRdWNHRjBkR1Z5Yml4eVBXNWxkeUJTWldkRmVIQW9iaXh2S1gxeVpYUjFjbTRnY2k1MFpYTjBLR1VwUDI1MWJHdzZkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMbE5VVWtsT1IxOVFRVlJVUlZKT0xIdHdZWFIwWlhKdU9uUXVjR0YwZEdWeWJuMHNYQ0pjSWl4Y0lpOXdZWFIwWlhKdVhDSXNiblZzYkN4bExIUXBmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z1FYSnlZWGt1YVhOQmNuSmhlU2hsS1Q5MGFHbHpMblpoYkdsa1lYUmxRWEp5WVhsTVpXNW5kR2dvWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFFYSnlZWGxWYm1seGRXVkpkR1Z0Y3lobExIUXNjaWw4ZkhSb2FYTXVkbUZzYVdSaGRHVkJjbkpoZVVsMFpXMXpLR1VzZEN4eUtYeDhiblZzYkRwdWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVUR1Z1WjNSb1BXWjFibU4wYVc5dUtHVXNkQ2w3ZG1GeUlISTdjbVYwZFhKdUlIWnZhV1FnTUNFOVBYUXViV2x1U1hSbGJYTW1KbVV1YkdWdVozUm9QSFF1YldsdVNYUmxiWE1tSmloeVBYUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNUJVbEpCV1Y5TVJVNUhWRWhmVTBoUFVsUXNlMnhsYm1kMGFEcGxMbXhsYm1kMGFDeHRhVzVwYlhWdE9uUXViV2x1U1hSbGJYTjlMRndpWENJc1hDSXZiV2x1U1hSbGJYTmNJaXh1ZFd4c0xHVXNkQ2tzZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh5S1NrL2NqcDJiMmxrSURBaFBUMTBMbTFoZUVsMFpXMXpKaVpsTG14bGJtZDBhRDUwTG0xaGVFbDBaVzF6SmlZb2NqMTBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVRVkpTUVZsZlRFVk9SMVJJWDB4UFRrY3NlMnhsYm1kMGFEcGxMbXhsYm1kMGFDeHRZWGhwYlhWdE9uUXViV0Y0U1hSbGJYTjlMRndpWENJc1hDSXZiV0Y0U1hSbGJYTmNJaXh1ZFd4c0xHVXNkQ2tzZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh5S1NrL2NqcHVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1Vlc1cGNYVmxTWFJsYlhNOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloMExuVnVhWEYxWlVsMFpXMXpLV1p2Y2loMllYSWdjajB3TzNJOFpTNXNaVzVuZEdnN2Npc3JLV1p2Y2loMllYSWdiejF5S3pFN2J6eGxMbXhsYm1kMGFEdHZLeXNwYVdZb2JpaGxXM0pkTEdWYmIxMHBLWHQyWVhJZ2FUMTBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVRVkpTUVZsZlZVNUpVVlZGTEh0dFlYUmphREU2Y2l4dFlYUmphREk2YjMwc1hDSmNJaXhjSWk5MWJtbHhkV1ZKZEdWdGMxd2lMRzUxYkd3c1pTeDBLVHRwWmloMGFHbHpMbWhoYm1Sc1pVVnljbTl5S0drcEtYSmxkSFZ5YmlCcGZYSmxkSFZ5YmlCdWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVGeWNtRjVTWFJsYlhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXVhWFJsYlhNcGNtVjBkWEp1SUc1MWJHdzdkbUZ5SUc0c2J6dHBaaWhCY25KaGVTNXBjMEZ5Y21GNUtIUXVhWFJsYlhNcEtYdG1iM0lvYnowd08yODhaUzVzWlc1bmRHZzdieXNyS1dsbUtHODhkQzVwZEdWdGN5NXNaVzVuZEdncGUybG1LRzQ5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsVzI5ZExIUXVhWFJsYlhOYmIxMHNXMjlkTEZ0Y0ltbDBaVzF6WENJc2IxMHNjaXRjSWk5Y0lpdHZLU2x5WlhSMWNtNGdibjFsYkhObElHbG1LSFp2YVdRZ01DRTlQWFF1WVdSa2FYUnBiMjVoYkVsMFpXMXpLV2xtS0Z3aVltOXZiR1ZoYmx3aVBUMTBlWEJsYjJZZ2RDNWhaR1JwZEdsdmJtRnNTWFJsYlhNcGUybG1LQ0YwTG1Ga1pHbDBhVzl1WVd4SmRHVnRjeVltS0c0OWRHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrRlNVa0ZaWDBGRVJFbFVTVTlPUVV4ZlNWUkZUVk1zZTMwc1hDSXZYQ0lyYnl4Y0lpOWhaR1JwZEdsdmJtRnNTWFJsYlhOY0lpeHVkV3hzTEdVc2RDa3NkR2hwY3k1b1lXNWtiR1ZGY25KdmNpaHVLU2twY21WMGRYSnVJRzU5Wld4elpTQnBaaWh1UFhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWlZ0dlhTeDBMbUZrWkdsMGFXOXVZV3hKZEdWdGN5eGJiMTBzVzF3aVlXUmthWFJwYjI1aGJFbDBaVzF6WENKZExISXJYQ0l2WENJcmJ5a3BjbVYwZFhKdUlHNTlaV3h6WlNCbWIzSW9iejB3TzI4OFpTNXNaVzVuZEdnN2J5c3JLV2xtS0c0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobFcyOWRMSFF1YVhSbGJYTXNXMjlkTEZ0Y0ltbDBaVzF6WENKZExISXJYQ0l2WENJcmJ5a3BjbVYwZFhKdUlHNDdjbVYwZFhKdUlHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQySnFaV04wUFdaMWJtTjBhVzl1S0dVc2RDeHlLWHR5WlhSMWNtNWNJbTlpYW1WamRGd2lJVDEwZVhCbGIyWWdaWHg4Ym5Wc2JEMDlQV1Y4ZkVGeWNtRjVMbWx6UVhKeVlYa29aU2svYm5Wc2JEcDBhR2x6TG5aaGJHbGtZWFJsVDJKcVpXTjBUV2x1VFdGNFVISnZjR1Z5ZEdsbGN5aGxMSFFzY2lsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUlNaWEYxYVhKbFpGQnliM0JsY25ScFpYTW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsVDJKcVpXTjBVSEp2Y0dWeWRHbGxjeWhsTEhRc2NpbDhmSFJvYVhNdWRtRnNhV1JoZEdWUFltcGxZM1JFWlhCbGJtUmxibU5wWlhNb1pTeDBMSElwZkh4dWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5aWFtVmpkRTFwYmsxaGVGQnliM0JsY25ScFpYTTlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjaXh1UFU5aWFtVmpkQzVyWlhsektHVXBPM0psZEhWeWJpQjJiMmxrSURBaFBUMTBMbTFwYmxCeWIzQmxjblJwWlhNbUptNHViR1Z1WjNSb1BIUXViV2x1VUhKdmNHVnlkR2xsY3lZbUtISTlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFKVGtsTlZVMHNlM0J5YjNCbGNuUjVRMjkxYm5RNmJpNXNaVzVuZEdnc2JXbHVhVzExYlRwMExtMXBibEJ5YjNCbGNuUnBaWE45TEZ3aVhDSXNYQ0l2YldsdVVISnZjR1Z5ZEdsbGMxd2lMRzUxYkd3c1pTeDBLU3gwYUdsekxtaGhibVJzWlVWeWNtOXlLSElwS1Q5eU9uWnZhV1FnTUNFOVBYUXViV0Y0VUhKdmNHVnlkR2xsY3lZbWJpNXNaVzVuZEdnK2RDNXRZWGhRY205d1pYSjBhV1Z6SmlZb2NqMTBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUMEpLUlVOVVgxQlNUMUJGVWxSSlJWTmZUVUZZU1UxVlRTeDdjSEp2Y0dWeWRIbERiM1Z1ZERwdUxteGxibWQwYUN4dFlYaHBiWFZ0T25RdWJXRjRVSEp2Y0dWeWRHbGxjMzBzWENKY0lpeGNJaTl0WVhoUWNtOXdaWEowYVdWelhDSXNiblZzYkN4bExIUXBMSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9jaWtwUDNJNmJuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JTWlhGMWFYSmxaRkJ5YjNCbGNuUnBaWE05Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWgyYjJsa0lEQWhQVDEwTG5KbGNYVnBjbVZrS1dadmNpaDJZWElnY2owd08zSThkQzV5WlhGMWFYSmxaQzVzWlc1bmRHZzdjaXNyS1h0MllYSWdiajEwTG5KbGNYVnBjbVZrVzNKZE8ybG1LSFp2YVdRZ01EMDlQV1ZiYmwwcGUzWmhjaUJ2UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmVWtWUlZVbFNSVVFzZTJ0bGVUcHVmU3hjSWx3aUxGd2lMM0psY1hWcGNtVmtMMXdpSzNJc2JuVnNiQ3hsTEhRcE8ybG1LSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9ieWtwY21WMGRYSnVJRzk5ZlhKbGRIVnliaUJ1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTlpYW1WamRGQnliM0JsY25ScFpYTTlablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1TzJadmNpaDJZWElnYnlCcGJpQmxLWHQyWVhJZ2FUMXlLMXdpTDF3aUsyOHVjbVZ3YkdGalpTZ3ZmaTluTEZ3aWZqQmNJaWt1Y21Wd2JHRmpaU2d2WEZ3dkwyY3NYQ0orTVZ3aUtTeGhQU0V4TzJsbUtIWnZhV1FnTUNFOVBYUXVjSEp2Y0dWeWRHbGxjeVltZG05cFpDQXdJVDA5ZEM1d2NtOXdaWEowYVdWelcyOWRKaVlvWVQwaE1DeHVQWFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aVnR2WFN4MExuQnliM0JsY25ScFpYTmJiMTBzVzI5ZExGdGNJbkJ5YjNCbGNuUnBaWE5jSWl4dlhTeHBLU2twY21WMGRYSnVJRzQ3YVdZb2RtOXBaQ0F3SVQwOWRDNXdZWFIwWlhKdVVISnZjR1Z5ZEdsbGN5bG1iM0lvZG1GeUlITWdhVzRnZEM1d1lYUjBaWEp1VUhKdmNHVnlkR2xsY3lsN2RtRnlJSFU5Ym1WM0lGSmxaMFY0Y0NoektUdHBaaWgxTG5SbGMzUW9ieWttSmloaFBTRXdMRzQ5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsVzI5ZExIUXVjR0YwZEdWeWJsQnliM0JsY25ScFpYTmJjMTBzVzI5ZExGdGNJbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpYQ0lzYzEwc2FTa3BLWEpsZEhWeWJpQnVmV2xtS0dFcGRHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWW9kR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmFWMDlJVEFzWkdWc1pYUmxJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhVjBwTzJWc2MyVWdhV1lvZG05cFpDQXdJVDA5ZEM1aFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN5bDdhV1lvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6SmlZb2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iYVYwOUlUQXNaR1ZzWlhSbElIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmFWMHBMRndpWW05dmJHVmhibHdpUFQxMGVYQmxiMllnZEM1aFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN5bDdhV1lvSVhRdVlXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTW1KaWh1UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmUVVSRVNWUkpUMDVCVEY5UVVrOVFSVkpVU1VWVExIdHJaWGs2YjMwc1hDSmNJaXhjSWk5aFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGMxd2lMRzUxYkd3c1pTeDBLUzV3Y21WbWFYaFhhWFJvS0c4c2JuVnNiQ2tzZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh1S1NrcGNtVjBkWEp1SUc1OVpXeHpaU0JwWmlodVBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pWdHZYU3gwTG1Ga1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWekxGdHZYU3hiWENKaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGMxd2lYU3hwS1NseVpYUjFjbTRnYm4xbGJITmxJSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeVltSVhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMmxkSmlZb2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0cFhUMGhNQ2w5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUMkpxWldOMFJHVndaVzVrWlc1amFXVnpQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmp0cFppaDJiMmxrSURBaFBUMTBMbVJsY0dWdVpHVnVZMmxsY3lsbWIzSW9kbUZ5SUc4Z2FXNGdkQzVrWlhCbGJtUmxibU5wWlhNcGFXWW9kbTlwWkNBd0lUMDlaVnR2WFNsN2RtRnlJR2s5ZEM1a1pYQmxibVJsYm1OcFpYTmJiMTA3YVdZb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHa3BlMmxtS0hadmFXUWdNRDA5UFdWYmFWMG1KaWh1UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmUkVWUVJVNUVSVTVEV1Y5TFJWa3NlMnRsZVRwdkxHMXBjM05wYm1jNmFYMHNYQ0pjSWl4Y0lsd2lMRzUxYkd3c1pTeDBLUzV3Y21WbWFYaFhhWFJvS0c1MWJHd3NieWt1Y0hKbFptbDRWMmwwYUNodWRXeHNMRndpWkdWd1pXNWtaVzVqYVdWelhDSXBMSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9iaWtwS1hKbGRIVnliaUJ1ZldWc2MyVWdhV1lvUVhKeVlYa3VhWE5CY25KaGVTaHBLU2xtYjNJb2RtRnlJR0U5TUR0aFBHa3ViR1Z1WjNSb08yRXJLeWw3ZG1GeUlITTlhVnRoWFR0cFppaDJiMmxrSURBOVBUMWxXM05kSmlZb2JqMTBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaTEh0clpYazZieXh0YVhOemFXNW5Pbk45TEZ3aVhDSXNYQ0l2WENJcllTeHVkV3hzTEdVc2RDa3VjSEpsWm1sNFYybDBhQ2h1ZFd4c0xHOHBMbkJ5WldacGVGZHBkR2dvYm5Wc2JDeGNJbVJsY0dWdVpHVnVZMmxsYzF3aUtTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHNHBLU2x5WlhSMWNtNGdibjFsYkhObElHbG1LRzQ5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEdrc1cxMHNXMXdpWkdWd1pXNWtaVzVqYVdWelhDSXNiMTBzY2lrcGNtVjBkWEp1SUc1OWNtVjBkWEp1SUc1MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUTI5dFltbHVZWFJwYjI1elBXWjFibU4wYVc5dUtHVXNkQ3h5S1h0eVpYUjFjbTRnZEdocGN5NTJZV3hwWkdGMFpVRnNiRTltS0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVRnVlVTltS0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVOXVaVTltS0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVNXZkQ2hsTEhRc2NpbDhmRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRV3hzVDJZOVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXVZV3hzVDJZcGNtVjBkWEp1SUc1MWJHdzdabTl5S0haaGNpQnVMRzg5TUR0dlBIUXVZV3hzVDJZdWJHVnVaM1JvTzI4ckt5bDdkbUZ5SUdrOWRDNWhiR3hQWmx0dlhUdHBaaWh1UFhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWlN4cExGdGRMRnRjSW1Gc2JFOW1YQ0lzYjEwc2Npa3BjbVYwZFhKdUlHNTljbVYwZFhKdUlHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFFXNTVUMlk5Wm5WdVkzUnBiMjRvWlN4MExISXBlMmxtS0hadmFXUWdNRDA5UFhRdVlXNTVUMllwY21WMGRYSnVJRzUxYkd3N2RtRnlJRzRzYnl4cFBWdGRMR0U5ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzNSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lZbUtHNDlkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5eHZQWFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoektUdG1iM0lvZG1GeUlITTlJVEFzZFQwd08zVThkQzVoYm5sUFppNXNaVzVuZEdnN2RTc3JLWHQwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUxIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUtUdDJZWElnYkQxMExtRnVlVTltVzNWZExHTTlkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9MR1k5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEd3c1cxMHNXMXdpWVc1NVQyWmNJaXgxWFN4eUtUdHBaaWh1ZFd4c1BUMDlaaVltWXowOVBYUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFDbDdhV1lvZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01DeGhLU3gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wZTJadmNpaDJZWElnY0NCcGJpQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lsdlczQmRQU0V3TEdSbGJHVjBaU0J1VzNCZE8yWnZjaWgyWVhJZ1pDQnBiaUIwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliWkYxOGZDaHVXMlJkUFNFd0tUdHpQU0V4TzJOdmJuUnBiblZsZlhKbGRIVnliaUJ1ZFd4c2ZXWW1KbWt1Y0hWemFDaG1MbkJ5WldacGVGZHBkR2dvYm5Wc2JDeGNJbHdpSzNVcExuQnlaV1pwZUZkcGRHZ29iblZzYkN4Y0ltRnVlVTltWENJcEtYMXlaWFIxY200Z2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWW9kR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MXVMSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelBXOHBMSE0vS0drOWFTNWpiMjVqWVhRb2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb1lTa3BMSFJvYVhNdVpYSnliM0p6UFhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc1lTa3NkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMa0ZPV1Y5UFJsOU5TVk5UU1U1SExIdDlMRndpWENJc1hDSXZZVzU1VDJaY0lpeHBMR1VzZENrcE9uWnZhV1FnTUgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlBibVZQWmoxbWRXNWpkR2x2YmlobExIUXNjaWw3YVdZb2RtOXBaQ0F3UFQwOWRDNXZibVZQWmlseVpYUjFjbTRnYm5Wc2JEdDJZWElnYml4dkxHazliblZzYkN4aFBWdGRMSE05ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzNSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lZbUtHNDlkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5eHZQWFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoektUdG1iM0lvZG1GeUlIVTlNRHQxUEhRdWIyNWxUMll1YkdWdVozUm9PM1VyS3lsN2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWW9kR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MTdmU3gwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MTdmU2s3ZG1GeUlHdzlkQzV2Ym1WUFpsdDFYU3hqUFhSb2FYTXVaWEp5YjNKekxteGxibWQwYUN4bVBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pTeHNMRnRkTEZ0Y0ltOXVaVTltWENJc2RWMHNjaWs3YVdZb2JuVnNiRDA5UFdZbUptTTlQVDEwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2dwZTJsbUtHNTFiR3doUFQxcEtYSmxkSFZ5YmlCMGFHbHpMbVZ5Y205eWN6MTBhR2x6TG1WeWNtOXljeTV6YkdsalpTZ3dMSE1wTEhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFRrVmZUMFpmVFZWTVZFbFFURVVzZTJsdVpHVjRNVHBwTEdsdVpHVjRNanAxZlN4Y0lsd2lMRndpTDI5dVpVOW1YQ0lzYm5Wc2JDeGxMSFFwTzJsbUtHazlkU3gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wZTJadmNpaDJZWElnY0NCcGJpQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lsdlczQmRQU0V3TEdSbGJHVjBaU0J1VzNCZE8yWnZjaWgyWVhJZ1pDQnBiaUIwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliWkYxOGZDaHVXMlJkUFNFd0tYMTlaV3h6WlNCbUppWmhMbkIxYzJnb1ppbDljbVYwZFhKdUlIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTliaXgwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MXZLU3h1ZFd4c1BUMDlhVDhvWVQxaExtTnZibU5oZENoMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNoektTa3NkR2hwY3k1bGNuSnZjbk05ZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvTUN4ektTeDBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUMDVGWDA5R1gwMUpVMU5KVGtjc2UzMHNYQ0pjSWl4Y0lpOXZibVZQWmx3aUxHRXNaU3gwS1NrNktIUm9hWE11WlhKeWIzSnpQWFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLREFzY3lrc2JuVnNiQ2w5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFRtOTBQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHBaaWgyYjJsa0lEQTlQVDEwTG01dmRDbHlaWFIxY200Z2JuVnNiRHQyWVhJZ2JpeHZMR2s5ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzNSb2FYTXVkSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lZbUtHNDlkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5eHZQWFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoekxIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNOWUzMHNkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNOWUzMHBPM1poY2lCaFBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pTeDBMbTV2ZEN4dWRXeHNMRzUxYkd3c2Npa3NjejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2hwS1R0eVpYUjFjbTRnZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01DeHBLU3gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFc0c2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05Ynlrc2JuVnNiRDA5UFdFbUpqQTlQVDF6TG14bGJtZDBhRDkwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VGs5VVgxQkJVMU5GUkN4N2ZTeGNJbHdpTEZ3aUwyNXZkRndpTEc1MWJHd3NaU3gwS1RwdWRXeHNmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlVoNWNHVnliV1ZrYVdFOVpuVnVZM1JwYjI0b1pTeDBMRzRwZTJsbUtDRjBMbXhwYm10ektYSmxkSFZ5YmlCdWRXeHNPMlp2Y2loMllYSWdieXhwUFRBN2FUeDBMbXhwYm10ekxteGxibWQwYUR0cEt5c3BlM1poY2lCaFBYUXViR2x1YTNOYmFWMDdhV1lvWENKa1pYTmpjbWxpWldSaWVWd2lQVDA5WVM1eVpXd3BlMlp2Y2loMllYSWdjejF1WlhjZ2NpaGhMbWh5WldZcExIVTlJVEFzYkQwd08ydzhjeTUyWVhKT1lXMWxjeTVzWlc1bmRHZzdiQ3NyS1dsbUtDRW9jeTUyWVhKT1lXMWxjMXRzWFdsdUlHVXBLWHQxUFNFeE8ySnlaV0ZyZldsbUtIVXBlM1poY2lCalBYTXVabWxzYkVaeWIyMVBZbXBsWTNRb1pTa3NaajE3SkhKbFpqcGpmVHRwWmlodlBYUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pTeG1MRnRkTEZ0Y0lteHBibXR6WENJc2FWMHNiaWtwY21WMGRYSnVJRzk5ZlgxOU8zWmhjaUIyUFh0SlRsWkJURWxFWDFSWlVFVTZNQ3hGVGxWTlgwMUpVMDFCVkVOSU9qRXNRVTVaWDA5R1gwMUpVMU5KVGtjNk1UQXNUMDVGWDA5R1gwMUpVMU5KVGtjNk1URXNUMDVGWDA5R1gwMVZURlJKVUV4Rk9qRXlMRTVQVkY5UVFWTlRSVVE2TVRNc1RsVk5Ra1ZTWDAxVlRGUkpVRXhGWDA5R09qRXdNQ3hPVlUxQ1JWSmZUVWxPU1UxVlRUb3hNREVzVGxWTlFrVlNYMDFKVGtsTlZVMWZSVmhEVEZWVFNWWkZPakV3TWl4T1ZVMUNSVkpmVFVGWVNVMVZUVG94TURNc1RsVk5Ra1ZTWDAxQldFbE5WVTFmUlZoRFRGVlRTVlpGT2pFd05DeE9WVTFDUlZKZlRrOVVYMEZmVGxWTlFrVlNPakV3TlN4VFZGSkpUa2RmVEVWT1IxUklYMU5JVDFKVU9qSXdNQ3hUVkZKSlRrZGZURVZPUjFSSVgweFBUa2M2TWpBeExGTlVVa2xPUjE5UVFWUlVSVkpPT2pJd01peFBRa3BGUTFSZlVGSlBVRVZTVkVsRlUxOU5TVTVKVFZWTk9qTXdNQ3hQUWtwRlExUmZVRkpQVUVWU1ZFbEZVMTlOUVZoSlRWVk5Pak13TVN4UFFrcEZRMVJmVWtWUlZVbFNSVVE2TXpBeUxFOUNTa1ZEVkY5QlJFUkpWRWxQVGtGTVgxQlNUMUJGVWxSSlJWTTZNekF6TEU5Q1NrVkRWRjlFUlZCRlRrUkZUa05aWDB0RldUb3pNRFFzUVZKU1FWbGZURVZPUjFSSVgxTklUMUpVT2pRd01DeEJVbEpCV1Y5TVJVNUhWRWhmVEU5T1J6bzBNREVzUVZKU1FWbGZWVTVKVVZWRk9qUXdNaXhCVWxKQldWOUJSRVJKVkVsUFRrRk1YMGxVUlUxVE9qUXdNeXhHVDFKTlFWUmZRMVZUVkU5Tk9qVXdNQ3hMUlZsWFQxSkVYME5WVTFSUFRUbzFNREVzUTBsU1ExVk1RVkpmVWtWR1JWSkZUa05GT2pZd01DeFZUa3RPVDFkT1gxQlNUMUJGVWxSWk9qRmxNMzBzWHoxN2ZUdG1iM0lvZG1GeUlHSWdhVzRnZGlsZlczWmJZbDFkUFdJN2RtRnlJR2M5ZTBsT1ZrRk1TVVJmVkZsUVJUcGNJa2x1ZG1Gc2FXUWdkSGx3WlRvZ2UzUjVjR1Y5SUNobGVIQmxZM1JsWkNCN1pYaHdaV04wWldSOUtWd2lMRVZPVlUxZlRVbFRUVUZVUTBnNlhDSk9ieUJsYm5WdElHMWhkR05vSUdadmNqb2dlM1poYkhWbGZWd2lMRUZPV1Y5UFJsOU5TVk5UU1U1SE9pZEVZWFJoSUdSdlpYTWdibTkwSUcxaGRHTm9JR0Z1ZVNCelkyaGxiV0Z6SUdaeWIyMGdYQ0poYm5sUFpsd2lKeXhQVGtWZlQwWmZUVWxUVTBsT1J6b25SR0YwWVNCa2IyVnpJRzV2ZENCdFlYUmphQ0JoYm5rZ2MyTm9aVzFoY3lCbWNtOXRJRndpYjI1bFQyWmNJaWNzVDA1RlgwOUdYMDFWVEZSSlVFeEZPaWRFWVhSaElHbHpJSFpoYkdsa0lHRm5ZV2x1YzNRZ2JXOXlaU0IwYUdGdUlHOXVaU0J6WTJobGJXRWdabkp2YlNCY0ltOXVaVTltWENJNklHbHVaR2xqWlhNZ2UybHVaR1Y0TVgwZ1lXNWtJSHRwYm1SbGVESjlKeXhPVDFSZlVFRlRVMFZFT2lkRVlYUmhJRzFoZEdOb1pYTWdjMk5vWlcxaElHWnliMjBnWENKdWIzUmNJaWNzVGxWTlFrVlNYMDFWVEZSSlVFeEZYMDlHT2x3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCdWIzUWdZU0J0ZFd4MGFYQnNaU0J2WmlCN2JYVnNkR2x3YkdWUFpuMWNJaXhPVlUxQ1JWSmZUVWxPU1UxVlRUcGNJbFpoYkhWbElIdDJZV3gxWlgwZ2FYTWdiR1Z6Y3lCMGFHRnVJRzFwYm1sdGRXMGdlMjFwYm1sdGRXMTlYQ0lzVGxWTlFrVlNYMDFKVGtsTlZVMWZSVmhEVEZWVFNWWkZPbHdpVm1Gc2RXVWdlM1poYkhWbGZTQnBjeUJsY1hWaGJDQjBieUJsZUdOc2RYTnBkbVVnYldsdWFXMTFiU0I3YldsdWFXMTFiWDFjSWl4T1ZVMUNSVkpmVFVGWVNVMVZUVHBjSWxaaGJIVmxJSHQyWVd4MVpYMGdhWE1nWjNKbFlYUmxjaUIwYUdGdUlHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNUbFZOUWtWU1gwMUJXRWxOVlUxZlJWaERURlZUU1ZaRk9sd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5QmxjWFZoYkNCMGJ5QmxlR05zZFhOcGRtVWdiV0Y0YVcxMWJTQjdiV0Y0YVcxMWJYMWNJaXhPVlUxQ1JWSmZUazlVWDBGZlRsVk5Ra1ZTT2x3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCdWIzUWdZU0IyWVd4cFpDQnVkVzFpWlhKY0lpeFRWRkpKVGtkZlRFVk9SMVJJWDFOSVQxSlVPbHdpVTNSeWFXNW5JR2x6SUhSdmJ5QnphRzl5ZENBb2UyeGxibWQwYUgwZ1kyaGhjbk1wTENCdGFXNXBiWFZ0SUh0dGFXNXBiWFZ0ZlZ3aUxGTlVVa2xPUjE5TVJVNUhWRWhmVEU5T1J6cGNJbE4wY21sdVp5QnBjeUIwYjI4Z2JHOXVaeUFvZTJ4bGJtZDBhSDBnWTJoaGNuTXBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZOVVVrbE9SMTlRUVZSVVJWSk9PbHdpVTNSeWFXNW5JR1J2WlhNZ2JtOTBJRzFoZEdOb0lIQmhkSFJsY200NklIdHdZWFIwWlhKdWZWd2lMRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFKVGtsTlZVMDZYQ0pVYjI4Z1ptVjNJSEJ5YjNCbGNuUnBaWE1nWkdWbWFXNWxaQ0FvZTNCeWIzQmxjblI1UTI5MWJuUjlLU3dnYldsdWFXMTFiU0I3YldsdWFXMTFiWDFjSWl4UFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlFWaEpUVlZOT2x3aVZHOXZJRzFoYm5rZ2NISnZjR1Z5ZEdsbGN5QmtaV1pwYm1Wa0lDaDdjSEp2Y0dWeWRIbERiM1Z1ZEgwcExDQnRZWGhwYlhWdElIdHRZWGhwYlhWdGZWd2lMRTlDU2tWRFZGOVNSVkZWU1ZKRlJEcGNJazFwYzNOcGJtY2djbVZ4ZFdseVpXUWdjSEp2Y0dWeWRIazZJSHRyWlhsOVhDSXNUMEpLUlVOVVgwRkVSRWxVU1U5T1FVeGZVRkpQVUVWU1ZFbEZVenBjSWtGa1pHbDBhVzl1WVd3Z2NISnZjR1Z5ZEdsbGN5QnViM1FnWVd4c2IzZGxaRndpTEU5Q1NrVkRWRjlFUlZCRlRrUkZUa05aWDB0RldUcGNJa1JsY0dWdVpHVnVZM2tnWm1GcGJHVmtJQzBnYTJWNUlHMTFjM1FnWlhocGMzUTZJSHR0YVhOemFXNW5mU0FvWkhWbElIUnZJR3RsZVRvZ2UydGxlWDBwWENJc1FWSlNRVmxmVEVWT1IxUklYMU5JVDFKVU9sd2lRWEp5WVhrZ2FYTWdkRzl2SUhOb2IzSjBJQ2g3YkdWdVozUm9mU2tzSUcxcGJtbHRkVzBnZTIxcGJtbHRkVzE5WENJc1FWSlNRVmxmVEVWT1IxUklYMHhQVGtjNlhDSkJjbkpoZVNCcGN5QjBiMjhnYkc5dVp5QW9lMnhsYm1kMGFIMHBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEVGU1VrRlpYMVZPU1ZGVlJUcGNJa0Z5Y21GNUlHbDBaVzF6SUdGeVpTQnViM1FnZFc1cGNYVmxJQ2hwYm1ScFkyVnpJSHR0WVhSamFERjlJR0Z1WkNCN2JXRjBZMmd5ZlNsY0lpeEJVbEpCV1Y5QlJFUkpWRWxQVGtGTVgwbFVSVTFUT2x3aVFXUmthWFJwYjI1aGJDQnBkR1Z0Y3lCdWIzUWdZV3hzYjNkbFpGd2lMRVpQVWsxQlZGOURWVk5VVDAwNlhDSkdiM0p0WVhRZ2RtRnNhV1JoZEdsdmJpQm1ZV2xzWldRZ0tIdHRaWE56WVdkbGZTbGNJaXhMUlZsWFQxSkVYME5WVTFSUFRUcGNJa3RsZVhkdmNtUWdabUZwYkdWa09pQjdhMlY1ZlNBb2UyMWxjM05oWjJWOUtWd2lMRU5KVWtOVlRFRlNYMUpGUmtWU1JVNURSVHBjSWtOcGNtTjFiR0Z5SUNSeVpXWnpPaUI3ZFhKc2MzMWNJaXhWVGt0T1QxZE9YMUJTVDFCRlVsUlpPbHdpVlc1cmJtOTNiaUJ3Y205d1pYSjBlU0FvYm05MElHbHVJSE5qYUdWdFlTbGNJbjA3YkM1d2NtOTBiM1I1Y0dVOVQySnFaV04wTG1OeVpXRjBaU2hGY25KdmNpNXdjbTkwYjNSNWNHVXBMR3d1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eVBXd3NiQzV3Y205MGIzUjVjR1V1Ym1GdFpUMWNJbFpoYkdsa1lYUnBiMjVGY25KdmNsd2lMR3d1Y0hKdmRHOTBlWEJsTG5CeVpXWnBlRmRwZEdnOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmlodWRXeHNJVDA5WlNZbUtHVTlaUzV5WlhCc1lXTmxLQzkrTDJjc1hDSitNRndpS1M1eVpYQnNZV05sS0M5Y1hDOHZaeXhjSW40eFhDSXBMSFJvYVhNdVpHRjBZVkJoZEdnOVhDSXZYQ0lyWlN0MGFHbHpMbVJoZEdGUVlYUm9LU3h1ZFd4c0lUMDlkQ1ltS0hROWRDNXlaWEJzWVdObEtDOStMMmNzWENKK01Gd2lLUzV5WlhCc1lXTmxLQzljWEM4dlp5eGNJbjR4WENJcExIUm9hWE11YzJOb1pXMWhVR0YwYUQxY0lpOWNJaXQwSzNSb2FYTXVjMk5vWlcxaFVHRjBhQ2tzYm5Wc2JDRTlQWFJvYVhNdWMzVmlSWEp5YjNKektXWnZjaWgyWVhJZ2NqMHdPM0k4ZEdocGN5NXpkV0pGY25KdmNuTXViR1Z1WjNSb08zSXJLeWwwYUdsekxuTjFZa1Z5Y205eWMxdHlYUzV3Y21WbWFYaFhhWFJvS0dVc2RDazdjbVYwZFhKdUlIUm9hWE45TzNaaGNpQkZQWHQ5TEdvOVppZ3BPM0psZEhWeWJpQnFMbUZrWkV4aGJtZDFZV2RsS0Z3aVpXNHRaMkpjSWl4bktTeHFMblIyTkQxcUxHcDlLWDBzZTMxZExERXdNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHNG9aU2w3Y21WMGRYSnVJR1VtSm1VdVgxOWxjMDF2WkhWc1pUOWxPbnRjSW1SbFptRjFiSFJjSWpwbGZYMVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvY2l4Y0lsOWZaWE5OYjJSMWJHVmNJaXg3ZG1Gc2RXVTZJVEI5S1N4eUxrMWxjM05oWjJWR1lXTjBiM0o1UFhadmFXUWdNRHQyWVhJZ2J6MWxLRndpTGk5dFpYTnpZV2RsTFdaaFkzUnZjbmt2VFdWemMyRm5aVVpoWTNSdmNubGNJaWtzYVQxdUtHOHBPM0l1VFdWemMyRm5aVVpoWTNSdmNuazlhVnRjSW1SbFptRjFiSFJjSWwxOUxIdGNJaTR2YldWemMyRm5aUzFtWVdOMGIzSjVMMDFsYzNOaFoyVkdZV04wYjNKNVhDSTZNVEEwZlYwc01UQXlPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5TEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhJdVRXVnpjMkZuWlZSNWNHVTljaTVOWlhOellXZGxQWFp2YVdRZ01EdDJZWElnYnoxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0lwTEdrOWJpaHZLU3hoUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lpa3NjejF1S0dFcExIVTljaTVOWlhOellXZGxQV1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnWlNoMExISXNiaXh2TEdFcGV5Z3dMR2xiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TEdVcExIUm9hWE11YVdROWRDeDBhR2x6TG1aeWIyMDljaXgwYUdsekxuUnZQVzRzZEdocGN5NTBlWEJsUFc4c2RHaHBjeTVpYjJSNVBXRjljbVYwZFhKdUtEQXNjMXRjSW1SbFptRjFiSFJjSWwwcEtHVXNXM3RyWlhrNlhDSmhjM05sY25SSlpHVnVkR2wwZVZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVdWOGZDRjBLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbTFsYzNOaFoyVXNJSFJ2YTJWdUlIUnZJR0psSUhKbGJXOTJaV1FzSUdGdVpDQmhjM05sY25SbFpFbGtaVzUwYVhSNUlHMTFjM1FnWW1VZ2NISnZkbWxrWldSY0lpazdkbUZ5SUhJOWRHaHBjeTVpYjJSNU8zSmxkSFZ5YmlCeUxtbGtWRzlyWlc0OWJuVnNiQ3h5TG1GemMyVnlkR1ZrU1dSbGJuUnBkSGs5ZEN4MGFHbHpMbUp2WkhrOWNpeDBhR2x6Zlgwc2UydGxlVHBjSW1Ga1pFbGtWRzlyWlc1Y0lpeDJZV3gxWlRwbWRXNWpkR2x2YmlobEtYdHBaaWdoWlNsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdFpYTnpZV2RsTENCMGIydGxiaUIwYnlCaVpTQmhaR1JsWkN3Z2JYVnpkQ0JpWlNCd2NtOTJhV1JsWkZ3aUtUdDJZWElnZEQxMGFHbHpMbUp2WkhrN2NtVjBkWEp1SUhRdWFXUlViMnRsYmoxbExIUm9hWE11WW05a2VUMTBMSFJvYVhOOWZTeDdhMlY1T2x3aVlXUmtRV05qWlhOelZHOXJaVzVjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsS1h0cFppZ2haU2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0p0WlhOellXZGxMQ0IwYjJ0bGJpQjBieUJpWlNCaFpHUmxaQ3dnYlhWemRDQmlaU0J3Y205MmFXUmxaRndpS1R0MllYSWdkRDEwYUdsekxtSnZaSGs3Y21WMGRYSnVJSFF1WVdOalpYTnpWRzlyWlc0OVpTeDBhR2x6TG1KdlpIazlkQ3gwYUdsemZYMWRLU3hsZlNncE8zSXVUV1Z6YzJGblpWUjVjR1U5ZTBOU1JVRlVSVHBjSW1OeVpXRjBaVndpTEZKRlFVUTZYQ0p5WldGa1hDSXNWVkJFUVZSRk9sd2lkWEJrWVhSbFhDSXNSRVZNUlZSRk9sd2laR1ZzWlhSbFhDSXNVMVZDVTBOU1NVSkZPbHdpYzNWaWMyTnlhV0psWENJc1hHNVZUbE5WUWxORFVrbENSVHBjSW5WdWMzVmljMk55YVdKbFhDSXNVa1ZUVUU5T1UwVTZYQ0p5WlhOd2IyNXpaVndpTEVaUFVsZEJVa1E2WENKbWIzSjNZWEprWENJc1JWaEZRMVZVUlRwY0ltVjRaV04xZEdWY0luMDdjbHRjSW1SbFptRjFiSFJjSWwwOWRYMHNlMXdpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnNZWE56UTJGc2JFTm9aV05yWENJNk1UQXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTmNJam94TVgxZExERXdNenBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8yWjFibU4wYVc5dUlHNG9aU2w3Y21WMGRYSnVJR1VtSm1VdVgxOWxjMDF2WkhWc1pUOWxPbnRjSW1SbFptRjFiSFJjSWpwbGZYMW1kVzVqZEdsdmJpQnZLR1VwZTNaaGNpQjBQU2d3TEhWYlhDSmtaV1poZFd4MFhDSmRLU2hsS1M1eVpXUjFZMlVvWm5WdVkzUnBiMjRvZEN4eUtYdHlaWFIxY200Z2RGdGxXM0pkWFQxeUxIUjlMSHQ5S1R0eVpYUjFjbTRvTUN4aFcxd2laR1ZtWVhWc2RGd2lYU2tvS0RBc2RWdGNJbVJsWm1GMWJIUmNJbDBwS0dVcExuSmxaSFZqWlNobWRXNWpkR2x2YmloMExISXBlM0psZEhWeWJpQjBXM0pkUFdWYmNsMHNkSDBzWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhSYlpWMTlLU2w5VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISXNYQ0pmWDJWelRXOWtkV3hsWENJc2UzWmhiSFZsT2lFd2ZTa3NjaTVWVUVSQlZFVmZUMUJGVWtGVVNVOU9QWEl1UVZSVVVrbENWVlJGWDFSWlVFVTljaTVTUlVGVFQwNWZVRWhTUVZORlBYSXVVa1ZUVUU5T1UwVmZRMDlFUlQxeUxrVjRaV04xZEdWTlpYTnpZV2RsUW05a2VUMXlMbEpsYzNCdmJuTmxUV1Z6YzJGblpVSnZaSGs5Y2k1R2IzSjNZWEprVFdWemMyRm5aVUp2WkhrOWNpNVZjR1JoZEdWTlpYTnpZV2RsUW05a2VUMXlMa1JsYkdWMFpVMWxjM05oWjJWQ2IyUjVQWEl1VW1WaFpFMWxjM05oWjJWQ2IyUjVQWEl1UTNKbFlYUmxUV1Z6YzJGblpVSnZaSGs5Y2k1TlpYTnpZV2RsUW05a2VUMTJiMmxrSURBN2RtRnlJR2s5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZabkpsWlhwbFhDSXBMR0U5YmlocEtTeHpQV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwydGxlWE5jSWlrc2RUMXVLSE1wTEd3OVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZabHdpS1N4alBXNG9iQ2tzWmoxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTVjSWlrc2NEMXVLR1lwTEdROVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJtaGxjbWwwYzF3aUtTeG9QVzRvWkNrc2VUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnNZWE56UTJGc2JFTm9aV05yWENJcExHMDliaWg1S1N4MlBXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTmNJaWtzWHoxdUtIWXBPM0l1Ulc1MWJUMXZPM1poY2lCaVBYSXVUV1Z6YzJGblpVSnZaSGs5Wm5WdVkzUnBiMjRvS1h0bWRXNWpkR2x2YmlCbEtIUXNjaXh1TEc4c2FTbDdLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc1pTa3NkR2hwY3k1cFpGUnZhMlZ1UFhRc2RHaHBjeTVoWTJObGMzTlViMnRsYmoxeUxIUm9hWE11Y21WemIzVnlZMlU5Yml4MGFHbHpMbk5qYUdWdFlUMXZMSFJvYVhNdVlYTnpaWEowWldSSlpHVnVkR2wwZVQxcGZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NobExGdDdhMlY1T2x3aVlXUmtWbWxoWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN2FXWW9JV1VwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZG1saElGVlNUQ0IwYnlCaVpTQmhaR1JsWkN3Z2JYVnpkQ0JpWlNCd2NtOTJhV1JsWkZ3aUtUdHlaWFIxY200Z2RHaHBjeTUyYVdFOVpTeDBhR2x6ZlgxZEtTeGxmU2dwTEdjOUtISXVRM0psWVhSbFRXVnpjMkZuWlVKdlpIazlablZ1WTNScGIyNG9aU2w3Wm5WdVkzUnBiMjRnZENobExISXNiaXh2TEdrc1lTeHpLWHRwWmlnb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1N3aFpTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlVhR1VnZG1Gc2RXVWdjR0Z5WVcxbGRHVnlJR2x6SUc1MWJHeGNJaWs3ZG1GeUlIVTlLREFzY0Z0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tEQXNZMXRjSW1SbFptRjFiSFJjSWwwcEtIUXBMbU5oYkd3b2RHaHBjeXh1TEc4c2FTeGhMSE1zWVN4ektTazdjbVYwZFhKdUlIVXVkbUZzZFdVOVpTeHlKaVlvZFM1d2IyeHBZM2s5Y2lrc2RYMXlaWFIxY200b01DeG9XMXdpWkdWbVlYVnNkRndpWFNrb2RDeGxLU3gwZlNoaUtTeHlMbEpsWVdSTlpYTnpZV2RsUW05a2VUMW1kVzVqZEdsdmJpaGxLWHRtZFc1amRHbHZiaUIwS0dVc2NpeHVMRzhzYVN4aExITXNkU2w3S0RBc2JWdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNkQ2s3ZG1GeUlHdzlLREFzY0Z0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tEQXNZMXRjSW1SbFptRjFiSFJjSWwwcEtIUXBMbU5oYkd3b2RHaHBjeXhsTEhJc2JpeHZMR2twS1R0eVpYUjFjbTRnWVNZbUtHd3VZWFIwY21saWRYUmxQV0VwTEhNbUppaHNMbU55YVhSbGNtbGhVM2x1ZEdGNFBYTXBMSFVtSmloc0xtTnlhWFJsY21saFBYVXBMR3g5Y21WMGRYSnVLREFzYUZ0Y0ltUmxabUYxYkhSY0lsMHBLSFFzWlNrc2RIMG9ZaWtzY2k1RVpXeGxkR1ZOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoS1h0cFppZ29NQ3h0VzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l4MEtTeHVJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BlM1poY2lCelBTZ3dMSEJiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TENnd0xHTmJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTNWpZV3hzS0hSb2FYTXNaU3h5TEc1MWJHd3NieXhwS1NrN2N5NWphR2xzWkhKbGJsSmxjMjkxY21ObGN6MXVmV1ZzYzJVZ2RtRnlJSE05S0RBc2NGdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNLREFzWTF0Y0ltUmxabUYxYkhSY0lsMHBLSFFwTG1OaGJHd29kR2hwY3l4bExISXNiaXh2TEdrcEtUdHlaWFIxY200Z1lTWW1LSE11WVhSMGNtbGlkWFJsUFdFcExDZ3dMSEJiWENKa1pXWmhkV3gwWENKZEtTaHpLWDF5WlhSMWNtNG9NQ3hvVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N4MGZTaGlLU3h5TGxWd1pHRjBaVTFsYzNOaFoyVkNiMlI1UFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5TEc0c2J5eHBMR0VzY3lsN0tEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zZENrN2RtRnlJSFU5S0RBc2NGdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNLREFzWTF0Y0ltUmxabUYxYkhSY0lsMHBLSFFwTG1OaGJHd29kR2hwY3l4bExISXNiaXh2TEdrcEtUdHlaWFIxY200Z2RTNWhkSFJ5YVdKMWRHVTlZU3gxTG5aaGJIVmxQWE1zZFgxeVpYUjFjbTRvTUN4b1cxd2laR1ZtWVhWc2RGd2lYU2tvZEN4bEtTd29NQ3hmVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hiZTJ0bGVUcGNJbUZrWkVGMGRISnBZblYwWlZSNWNHVmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxLWHRsSmlZb2RHaHBjeTVoZEhSeWFXSjFkR1ZVZVhCbFBXVXBmWDBzZTJ0bGVUcGNJbUZrWkU5d1pYSmhkR2x2Ymx3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVcGUyVW1KaWgwYUdsekxtOXdaWEpoZEdsdmJqMWxLWDE5WFNrc2RIMG9ZaWtzY2k1R2IzSjNZWEprVFdWemMyRm5aVUp2WkhrOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR2tzWVNsN0tEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zZENrN2RtRnlJSE05S0RBc2NGdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNLREFzWTF0Y0ltUmxabUYxYkhSY0lsMHBLSFFwTG1OaGJHd29kR2hwY3l4bExISXNiaXh2TEdrcEtUdHlaWFIxY200Z2N5NXRaWE56WVdkbFBXRXNjMzF5WlhSMWNtNG9NQ3hvVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N4MGZTaGlLU3h5TGxKbGMzQnZibk5sVFdWemMyRm5aVUp2WkhrOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR2twZXlnd0xHMWJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMSFFwTzNaaGNpQmhQU2d3TEhCYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxDZ3dMR05iWENKa1pXWmhkV3gwWENKZEtTaDBLUzVqWVd4c0tIUm9hWE1zWlN4eUxHNHBLVHR5WlhSMWNtNGdieVltS0dFdVkyOWtaVDF2TEdFdVpHVnpZM0pwY0hScGIyNDlaMXR2WFNrc2FTWW1LR0V1ZG1Gc2RXVTlhU2tzWVgxeVpYUjFjbTRvTUN4b1cxd2laR1ZtWVhWc2RGd2lYU2tvZEN4bEtTeDBmU2hpS1N4eUxrVjRaV04xZEdWTlpYTnpZV2RsUW05a2VUMW1kVzVqZEdsdmJpaGxLWHRtZFc1amRHbHZiaUIwS0dVc2NpeHVMRzhzYVN4aExITXBleWd3TEcxYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxIUXBPM1poY2lCMVBTZ3dMSEJiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TENnd0xHTmJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTNWpZV3hzS0hSb2FYTXNaU3h5TEc0c2J5eHBLU2s3Y21WMGRYSnVJSFV1YldWMGFHOWtQV0VzY3lZbUtITWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVUOTFMbkJoY21GdGN6MXpPblV1Y0dGeVlXMXpQVnR6WFNrc2RYMXlaWFIxY200b01DeG9XMXdpWkdWbVlYVnNkRndpWFNrb2RDeGxLU3gwZlNoaUtTeHlMbEpGVTFCUFRsTkZYME5QUkVVOWJ5aDdNVEF3T2x3aU1UQXdYQ0lzTVRBeE9sd2lNVEF4WENJc01qQXdPbHdpTWpBd1hDSXNNakF4T2x3aU1qQXhYQ0lzTWpBeU9sd2lNakF5WENJc01qQXpPbHdpTWpBelhDSXNNakEwT2x3aU1qQTBYQ0lzTWpBMU9sd2lNakExWENJc01qQTJPbHdpTWpBMlhDSXNNekF3T2x3aU16QXdYQ0lzTXpBeE9sd2lNekF4WENJc016QXlPbHdpTXpBeVhDSXNNekF6T2x3aU16QXpYQ0lzTXpBME9sd2lNekEwWENJc016QTFPbHdpTXpBMVhDSXNNekEzT2x3aU16QTNYQ0lzTkRBd09sd2lOREF3WENJc05EQXhPbHdpTkRBeFhDSXNOREF5T2x3aU5EQXlYQ0lzTkRBek9sd2lOREF6WENJc05EQTBPbHdpTkRBMFhDSXNOREExT2x3aU5EQTFYQ0lzTkRBMk9sd2lOREEyWENJc05EQTNPbHdpTkRBM1hDSXNOREE0T2x3aU5EQTRYQ0lzTkRBNU9sd2lOREE1WENJc05ERXdPbHdpTkRFd1hDSXNOREV4T2x3aU5ERXhYQ0lzTkRFeU9sd2lOREV5WENJc05ERXpPbHdpTkRFelhDSXNOREUwT2x3aU5ERTBYQ0lzTkRFMU9sd2lOREUxWENJc05ERTJPbHdpTkRFMlhDSXNOREUzT2x3aU5ERTNYQ0lzTkRJMk9sd2lOREkyWENJc05UQXdPbHdpTlRBd1hDSXNOVEF4T2x3aU5UQXhYQ0lzTlRBeU9sd2lOVEF5WENJc05UQXpPbHdpTlRBelhDSXNOVEEwT2x3aU5UQTBYQ0lzTlRBMU9sd2lOVEExWENKOUtTeHlMbEpGUVZOUFRsOVFTRkpCVTBVOWJ5aDdNVEF3T2x3aVEyOXVkR2x1ZFdWY0lpd3hNREU2WENKVGQybDBZMmhwYm1jZ1VISnZkRzlqYjJ4elhDSXNNakF3T2x3aVQwdGNJaXd5TURFNlhDSkRjbVZoZEdWa1hDSXNNakF5T2x3aVFXTmpaWEIwWldSY0lpd3lNRE02WENKT2IyNHRRWFYwYUc5eWFYUmhkR2wyWlNCSmJtWnZjbTFoZEdsdmJsd2lMREl3TkRwY0lrNXZJRU52Ym5SbGJuUmNJaXd5TURVNlhDSlNaWE5sZENCRGIyNTBaVzUwWENJc01qQTJPbHdpVUdGeWRHbGhiQ0JEYjI1MFpXNTBYQ0lzTXpBd09sd2lUWFZzZEdsd2JHVWdRMmh2YVdObGMxd2lMRE13TVRwY0lrMXZkbVZrSUZCbGNtMWhibVZ1ZEd4NVhDSXNNekF5T2x3aVJtOTFibVJjSWl3ek1ETTZYQ0pUWldVZ1QzUm9aWEpjSWl3ek1EUTZYQ0pPYjNRZ1RXOWthV1pwWldSY0lpd3pNRFU2WENKVmMyVWdVSEp2ZUhsY0lpd3pNRGM2WENKVVpXMXdiM0poY25rZ1VtVmthWEpsWTNSY0lpdzBNREE2WENKQ1lXUWdVbVZ4ZFdWemRGd2lMRFF3TVRwY0lsVnVZWFYwYUc5eWFYcGxaRndpTERRd01qcGNJbEJoZVcxbGJuUWdVbVZ4ZFdseVpXUmNJaXcwTURNNlhDSkdiM0ppYVdSa1pXNWNJaXcwTURRNlhDSk9iM1FnUm05MWJtUmNJaXcwTURVNlhDSk5aWFJvYjJRZ1RtOTBJRUZzYkc5M1pXUmNJaXcwTURZNlhDSk9iM1FnUVdOalpYQjBZV0pzWlZ3aUxEUXdOenBjSWxCeWIzaDVJRUYxZEdobGJuUnBZMkYwYVc5dUlGSmxjWFZwY21Wa1hDSXNOREE0T2x3aVVtVnhkV1Z6ZENCVWFXMWxiM1YwWENJc05EQTVPbHdpUTI5dVpteHBZM1JjSWl3ME1UQTZYQ0pIYjI1bFhDSXNOREV4T2x3aVRHVnVaM1JvSUZKbGNYVnBjbVZrWENJc05ERXlPbHdpVUhKbFkyOXVaR2wwYVc5dUlFWmhhV3hsWkZ3aUxEUXhNenBjSWxCaGVXeHZZV1FnVkc5dklFeGhjbWRsWENJc05ERTBPbHdpVW1WeGRXVnpkQzFWVWtrZ1ZHOXZJRXh2Ym1kY0lpdzBNVFU2WENKVmJuTjFjSEJ2Y25SbFpDQk5aV1JwWVNCVWVYQmxYQ0lzTkRFMk9sd2lVbUZ1WjJVZ1RtOTBJRk5oZEdselptbGhZbXhsWENJc05ERTNPbHdpUlhod1pXTjBZWFJwYjI0Z1JtRnBiR1ZrWENJc05ESTJPbHdpVlhCbmNtRmtaU0JTWlhGMWFYSmxaRndpTERVd01EcGNJa2x1ZEdWeWJtRnNJRk5sY25abGNpQkZjbkp2Y2x3aUxEVXdNVHBjSWs1dmRDQkpiWEJzWlcxbGJuUmxaRndpTERVd01qcGNJa0poWkNCSFlYUmxkMkY1WENJc05UQXpPbHdpVTJWeWRtbGpaU0JWYm1GMllXbHNZV0pzWlZ3aUxEVXdORHBjSWtkaGRHVjNZWGtnVkdsdFpTMXZkWFJjSWl3MU1EVTZYQ0pJVkZSUUlGWmxjbk5wYjI0Z1RtOTBJRk4xY0hCdmNuUmxaRndpZlNrcE8zSXVRVlJVVWtsQ1ZWUkZYMVJaVUVVOWJ5aDdUMEpLUlVOVU9sd2lUMEpLUlVOVVhDSXNRVkpTUVZrNlhDSkJVbEpCV1Z3aWZTa3NjaTVWVUVSQlZFVmZUMUJGVWtGVVNVOU9QVzhvZTBGRVJEcGNJa0ZFUkZ3aUxGSkZUVTlXUlRwY0lsSkZUVTlXUlZ3aWZTazdjbHRjSW1SbFptRjFiSFJjSWwwOVluMHNlMXdpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5bWNtVmxlbVZjSWpvekxGd2lZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1YQ0k2TlN4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZhMlY1YzF3aU9qWXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkyeGhjM05EWVd4c1EyaGxZMnRjSWpveE1DeGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amNtVmhkR1ZEYkdGemMxd2lPakV4TEZ3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMmx1YUdWeWFYUnpYQ0k2TVRNc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12Y0c5emMybGliR1ZEYjI1emRISjFZM1J2Y2xKbGRIVnlibHdpT2pFMGZWMHNNVEEwT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdablZ1WTNScGIyNGdiaWhsS1h0eVpYUjFjbTRnWlNZbVpTNWZYMlZ6VFc5a2RXeGxQMlU2ZTF3aVpHVm1ZWFZzZEZ3aU9tVjlmVTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoeUxGd2lYMTlsYzAxdlpIVnNaVndpTEh0MllXeDFaVG9oTUgwcExISXVTV1JIWlc1bGNtRjBiM0k5ZG05cFpDQXdPM1poY2lCdlBXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwzSmxaMlZ1WlhKaGRHOXlYQ0lwTEdrOWJpaHZLU3hoUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWmNJaWtzY3oxdUtHRXBMSFU5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamExd2lLU3hzUFc0b2RTa3NZejFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk55WldGMFpVTnNZWE56WENJcExHWTliaWhqS1N4d1BXVW9YQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmNHOXpjMmxpYkdWRGIyNXpkSEoxWTNSdmNsSmxkSFZ5Ymx3aUtTeGtQVzRvY0Nrc2FEMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyZGxkRndpS1N4NVBXNG9hQ2tzYlQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJsdWFHVnlhWFJ6WENJcExIWTliaWh0S1N4ZlBXVW9YQ0l1TGk5eVpWUklTVTVMVDJKcVpXTjBMMUpsZEdocGJtdFBZbXBsWTNRdWFuTmNJaWtzWWoxdUtGOHBMR2M5WlNoY0lpNHZUV1Z6YzJGblpTNXFjMXdpS1N4RlBXNG9aeWtzYWoxbEtGd2lMaTlOWlhOellXZGxRbTlrZVM1cWMxd2lLU3gzUFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5S1hzb01DeHNXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1R0MllYSWdiajBvTUN4a1cxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5d29NQ3h6VzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2t1WTJGc2JDaDBhR2x6TEdVc2Npa3BPM0psZEhWeWJpQnVMbTE1UjJWdVpYSmhkRzl5UFNodVpYY2dUeWt1YVdSTllXdGxjaWdwTEc1OWNtVjBkWEp1S0RBc2RsdGNJbVJsWm1GMWJIUmNJbDBwS0hRc1pTa3NLREFzWmx0Y0ltUmxabUYxYkhSY0lsMHBLSFFzVzN0clpYazZYQ0oyWVd4cFpHRjBaVndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VwZTNKbGRIVnliaWd3TEhsYlhDSmtaV1poZFd4MFhDSmRLU2dvTUN4elcxd2laR1ZtWVhWc2RGd2lYU2tvZEM1d2NtOTBiM1I1Y0dVcExGd2lkbUZzYVdSaGRHVmNJaXgwYUdsektTNWpZV3hzS0hSb2FYTXNaU2w5ZlN4N2EyVjVPbHdpWTNKbFlYUmxRM0psWVhSbFRXVnpjMkZuWlZKbGNYVmxjM1JjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsTEhRc2NpeHVLWHRwWmlnaFpYeDhJWFI4ZkNGeUtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltWnliMjBzSUhSdkxDQmhibVFnZG1Gc2RXVWdiMllnYjJKcVpXTjBJSFJ2SUdKbElHTnlaV0YwWldRZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc4OWRHaHBjeTV0ZVVkbGJtVnlZWFJ2Y2k1dVpYaDBLQ2t1ZG1Gc2RXVXNhVDF1WlhjZ2FpNURjbVZoZEdWTlpYTnpZV2RsUW05a2VTaHlMRzRzYm5Wc2JDeHVkV3hzTEc1MWJHd3NiblZzYkN4dWRXeHNLU3hoUFc1bGR5QkZXMXdpWkdWbVlYVnNkRndpWFNodkxHVXNkQ3huTGsxbGMzTmhaMlZVZVhCbExrTlNSVUZVUlN4cEtUdHlaWFIxY200Z1lYMTlMSHRyWlhrNlhDSmpjbVZoZEdWR2IzSjNZWEprVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9JV1Y4ZkNGMGZId2hjaWwwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ptY205dExDQjBieXdnWVc1a0lHMWxjM05oWjJVZ2RHOGdabTl5ZDJGeVpDQk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2JqMTBhR2x6TG0xNVIyVnVaWEpoZEc5eUxtNWxlSFFvS1M1MllXeDFaU3h2UFc1bGR5QnFMa1p2Y25kaGNtUk5aWE56WVdkbFFtOWtlU2h1ZFd4c0xHNTFiR3dzYm5Wc2JDeHVkV3hzTEc1MWJHd3NjaWtzYVQxdVpYY2dSVnRjSW1SbFptRjFiSFJjSWwwb2JpeGxMSFFzWnk1TlpYTnpZV2RsVkhsd1pTNUdUMUpYUVZKRUxHOHBPM0psZEhWeWJpQnBmWDBzZTJ0bGVUcGNJbU55WldGMFpVUmxiR1YwWlUxbGMzTmhaMlZTWlhGMVpYTjBYQ0lzZG1Gc2RXVTZablZ1WTNScGIyNG9aU3gwTEhJc2JpbDdhV1lvSVdWOGZDRjBLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbVp5YjIwZ1lXNWtJSFJ2SUhCaGNtRnRaWFJsY25NZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc4OWRHaHBjeTV0ZVVkbGJtVnlZWFJ2Y2k1dVpYaDBLQ2t1ZG1Gc2RXVXNhVDF1WlhjZ2FpNUVaV3hsZEdWTlpYTnpZV2RsUW05a2VTaHVkV3hzTEc1MWJHd3NjaXh1TEc1MWJHd3NiblZzYkNrc1lUMXVaWGNnUlZ0Y0ltUmxabUYxYkhSY0lsMG9ieXhsTEhRc1p5NU5aWE56WVdkbFZIbHdaUzVFUlV4RlZFVXNhU2s3Y21WMGRYSnVJR0Y5ZlN4N2EyVjVPbHdpWTNKbFlYUmxWWEJrWVhSbFRXVnpjMkZuWlZKbGNYVmxjM1JjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsTEhRc2NpeHVMRzhwZTJsbUtDRmxmSHdoZEh4OElYSXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2labkp2YlN3Z1lXNWtJSFJ2SUdGdVpDQjJZV3gxWlNCTlZWTlVJR0psSUhOd1pXTnBabWxsWkZ3aUtUdDJZWElnYVQxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpTeGhQVzVsZHlCcUxsVndaR0YwWlUxbGMzTmhaMlZDYjJSNUtHNTFiR3dzYm5Wc2JDeHVMRzUxYkd3c2JuVnNiQ3h2TEhJcExITTlibVYzSUVWYlhDSmtaV1poZFd4MFhDSmRLR2tzWlN4MExHY3VUV1Z6YzJGblpWUjVjR1V1VlZCRVFWUkZMR0VwTzNKbGRIVnliaUJ6Zlgwc2UydGxlVHBjSW1OeVpXRjBaVkpsWVdSTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHBlMmxtS0NGbGZId2hkSHg4SVhJcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVpuSnZiU3dnZEc4Z1lXNWtJSFJvWlNCeVpYTnZkWEpqWlNCMGJ5QnlaV0ZrSUdaeWIyMGdUVlZUVkNCaVpTQnpjR1ZqYVdacFpXUmNJaWs3ZG1GeUlHODlkR2hwY3k1dGVVZGxibVZ5WVhSdmNpNXVaWGgwS0NrdWRtRnNkV1VzYVQxdVpYY2dhaTVTWldGa1RXVnpjMkZuWlVKdlpIa29iblZzYkN4dWRXeHNMSElzYm5Wc2JDeHVkV3hzTEc0c2JuVnNiQ3h1ZFd4c0tTeGhQVzVsZHlCRlcxd2laR1ZtWVhWc2RGd2lYU2h2TEdVc2RDeG5MazFsYzNOaFoyVlVlWEJsTGxKRlFVUXNhU2s3Y21WMGRYSnVJR0Y5ZlN4N2EyVjVPbHdpWTNKbFlYUmxVM1ZpYzJOeWFXSmxUV1Z6YzJGblpWSmxjWFZsYzNSY0lpeDJZV3gxWlRwbWRXNWpkR2x2YmlobExIUXNjaWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCMGJ5QmhibVFnZEdobElISmxjMjkxY21ObElIUnZJSE4xWW5OamNtbGlaU0IwYnlCTlZWTlVJR0psSUhOd1pXTnBabWxsWkZ3aUtUdDJZWElnYmoxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpTeHZQVzVsZHlCcUxrMWxjM05oWjJWQ2IyUjVLRzUxYkd3c2JuVnNiQ3h5TEc1MWJHd3NiblZzYkNrc2FUMXVaWGNnUlZ0Y0ltUmxabUYxYkhSY0lsMG9iaXhsTEhRc1p5NU5aWE56WVdkbFZIbHdaUzVUVlVKVFExSkpRa1VzYnlrN2NtVjBkWEp1SUdsOWZTeDdhMlY1T2x3aVkzSmxZWFJsVlc1emRXSnpZM0pwWW1WTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUtYdHBaaWdoWlh4OElYUjhmQ0Z5S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1aeWIyMHNJSFJ2SUdGdVpDQjBhR1VnY21WemIzVnlZMlVnZEc4Z2MzVmljMk55YVdKbElIUnZJRTFWVTFRZ1ltVWdjM0JsWTJsbWFXVmtYQ0lwTzNaaGNpQnVQWFJvYVhNdWJYbEhaVzVsY21GMGIzSXVibVY0ZENncExuWmhiSFZsTEc4OWJtVjNJR291VFdWemMyRm5aVUp2Wkhrb2JuVnNiQ3h1ZFd4c0xISXNiblZzYkN4dWRXeHNLU3hwUFc1bGR5QkZXMXdpWkdWbVlYVnNkRndpWFNodUxHVXNkQ3huTGsxbGMzTmhaMlZVZVhCbExsVk9VMVZDVTBOU1NVSkZMRzhwTzNKbGRIVnliaUJwZlgwc2UydGxlVHBjSW1OeVpXRjBaVVY0WldOMWRHVk5aWE56WVdkbFVtVnhkV1Z6ZEZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVc2RDeHlMRzRwZTJsbUtDRmxmSHdoZEh4OElYSXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2labkp2YlN3Z2RHOGdZVzVrSUhSb1pTQnRaWFJvYjJRZ2RHOGdaWGhsWTNWMFpTQk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2J6MTBhR2x6TG0xNVIyVnVaWEpoZEc5eUxtNWxlSFFvS1M1MllXeDFaU3hwUFc1bGR5QnFMa1Y0WldOMWRHVk5aWE56WVdkbFFtOWtlU2h1ZFd4c0xHNTFiR3dzYm5Wc2JDeHVkV3hzTEc1MWJHd3NjaXh1S1N4aFBXNWxkeUJGVzF3aVpHVm1ZWFZzZEZ3aVhTaHZMR1VzZEN4bkxrMWxjM05oWjJWVWVYQmxMa1ZZUlVOVlZFVXNhU2s3Y21WMGRYSnVJR0Y5ZlN4N2EyVjVPbHdpWTNKbFlYUmxUV1Z6YzJGblpWSmxjM0J2Ym5ObFhDSXNkbUZzZFdVNlpuVnVZM1JwYjI0b1pTeDBMSElzYmlsN2FXWW9JWFFwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY21WemNHOXVjMlVnUTI5a1pTQk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2J6MXVaWGNnYWk1U1pYTndiMjV6WlUxbGMzTmhaMlZDYjJSNUtHNTFiR3dzYm5Wc2JDeHVkV3hzTEhRc2NpeHVLVHR5WlhSMWNtNGdibVYzSUVWYlhDSmtaV1poZFd4MFhDSmRLR1V1YVdRc1pTNTBieXhsTG1aeWIyMHNaeTVOWlhOellXZGxWSGx3WlM1U1JWTlFUMDVUUlN4dktYMTlMSHRyWlhrNlhDSm5aVzVsY21GMFpVMWxjM05oWjJWU1pYTndiMjV6WlZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVc2RDeHlLWHRwWmlnaFpYeDhJWFFwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYldWemMyRm5aU0JoYm1RZ2NtVnpjRzl1YzJVZ1kyOWtaU0JOVlZOVUlHSmxJSE53WldOcFptbGxaRndpS1R0MllYSWdiajFsTG1KdlpIa3NiejF1TG1sa1ZHOXJaVzRzYVQxdUxtRmpZMlZ6YzFSdmEyVnVMR0U5Ymk1eVpYTnZkWEpqWlN4elBXNWxkeUJxTGxKbGMzQnZibk5sVFdWemMyRm5aVUp2Wkhrb2J5eHBMR0VzZEN4eUtTeDFQWFJvYVhNdWJYbEhaVzVsY21GMGIzSXVibVY0ZENncExuWmhiSFZsTzNKbGRIVnliaUJ1WlhjZ1JWdGNJbVJsWm1GMWJIUmNJbDBvZFN4bExuUnZMR1V1Wm5KdmJTeG5MazFsYzNOaFoyVlVlWEJsTGxKRlUxQlBUbE5GTEhNcGZYMWRLU3gwZlNoaVcxd2laR1ZtWVhWc2RGd2lYU2tzVHoxeUxrbGtSMlZ1WlhKaGRHOXlQV1oxYm1OMGFXOXVLQ2w3Wm5WdVkzUnBiMjRnWlNncGV5Z3dMR3hiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TEdVcGZYSmxkSFZ5Ymlnd0xHWmJYQ0prWldaaGRXeDBYQ0pkS1NobExGdDdhMlY1T2x3aWFXUk5ZV3RsY2x3aUxIWmhiSFZsT21sYlhDSmtaV1poZFd4MFhDSmRMbTFoY21zb1puVnVZM1JwYjI0Z2RDZ3BlM1poY2lCbE8zSmxkSFZ5YmlCcFcxd2laR1ZtWVhWc2RGd2lYUzUzY21Gd0tHWjFibU4wYVc5dUtIUXBlMlp2Y2lnN095bHpkMmwwWTJnb2RDNXdjbVYyUFhRdWJtVjRkQ2w3WTJGelpTQXdPbVU5TVR0allYTmxJREU2YVdZb0lTaGxQREZsTmlrcGUzUXVibVY0ZEQwMk8ySnlaV0ZyZlhKbGRIVnliaUIwTG01bGVIUTlOQ3hsS3lzN1kyRnpaU0EwT25RdWJtVjRkRDB4TzJKeVpXRnJPMk5oYzJVZ05qcGpZWE5sWENKbGJtUmNJanB5WlhSMWNtNGdkQzV6ZEc5d0tDbDlmU3gwTEhSb2FYTXBmU2w5WFNrc1pYMG9LVHR5VzF3aVpHVm1ZWFZzZEZ3aVhUMTNmU3g3WENJdUxpOXlaVlJJU1U1TFQySnFaV04wTDFKbGRHaHBibXRQWW1wbFkzUXVhbk5jSWpveE1EVXNYQ0l1TDAxbGMzTmhaMlV1YW5OY0lqb3hNRElzWENJdUwwMWxjM05oWjJWQ2IyUjVMbXB6WENJNk1UQXpMRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJNk5TeGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amJHRnpjME5oYkd4RGFHVmphMXdpT2pFd0xGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOeVpXRjBaVU5zWVhOelhDSTZNVEVzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZaMlYwWENJNk1USXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmFXNW9aWEpwZEhOY0lqb3hNeXhjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdVhDSTZNVFFzWENKaVlXSmxiQzF5ZFc1MGFXMWxMM0psWjJWdVpYSmhkRzl5WENJNk1UWjlYU3d4TURVNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJ1S0dVcGUzSmxkSFZ5YmlCbEppWmxMbDlmWlhOTmIyUjFiR1UvWlRwN1hDSmtaV1poZFd4MFhDSTZaWDE5VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISXNYQ0pmWDJWelRXOWtkV3hsWENJc2UzWmhiSFZsT2lFd2ZTa3NjaTVTWlhSb2FXNXJUMkpxWldOMFBYWnZhV1FnTUR0MllYSWdiejFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk5zWVhOelEyRnNiRU5vWldOclhDSXBMR2s5YmlodktTeGhQV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZM0psWVhSbFEyeGhjM05jSWlrc2N6MXVLR0VwTEhVOVpTaGNJblIyTkZ3aUtTeHNQVzRvZFNrc1l6MXlMbEpsZEdocGJtdFBZbXBsWTNROVpuVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLSFFzY2lsN0tEQXNhVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNrN2RHaHBjeTUyWVd4cFpHRjBhVzl1UFhRc2RHaHBjeTV6WTJobGJXRTljbjF5WlhSMWNtNG9NQ3h6VzF3aVpHVm1ZWFZzZEZ3aVhTa29aU3hiZTJ0bGVUcGNJblpoYkdsa1lYUmxYQ0lzZG1Gc2RXVTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJU0YwYUdsekxuTmphR1Z0WVNZbWJGdGNJbVJsWm1GMWJIUmNJbDB1ZG1Gc2FXUmhkR1VvWlN4MGFHbHpMbk5qYUdWdFlTbDlmVjBwTEdWOUtDazdjbHRjSW1SbFptRjFiSFJjSWwwOVkzMHNlMXdpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnNZWE56UTJGc2JFTm9aV05yWENJNk1UQXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkzSmxZWFJsUTJ4aGMzTmNJam94TVN4MGRqUTZNVEF3ZlYxOUxIdDlMRnN4TURGZEtTZ3hNREVwZlNrN1hHNHZMeU1nYzI5MWNtTmxUV0Z3Y0dsdVoxVlNURDFOWlhOellXZGxSbUZqZEc5eWVTNXFjeTV0WVhCY2JpSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JseHVMeW9xWEc0cUlFQmhkWFJvYjNJZ2JXbGpZV1ZzY0dWa2NtOXpZVUJuYldGcGJDNWpiMjFjYmlvZ1RXbHVhVzFoYkNCcGJuUmxjbVpoWTJVZ1lXNWtJR2x0Y0d4bGJXVnVkR0YwYVc5dUlIUnZJSE5sYm1RZ1lXNWtJSEpsWTJWcGRtVWdiV1Z6YzJGblpYTXVJRWwwSUdOaGJpQmlaU0J5WlhWelpXUWdhVzRnYldGdWVTQjBlWEJsSUc5bUlHTnZiWEJ2Ym1WdWRITXVYRzRxSUVOdmJYQnZibVZ1ZEhNZ2RHaGhkQ0J1WldWa0lHRWdiV1Z6YzJGblpTQnplWE4wWlcwZ2MyaHZkV3hrSUhKbFkyVnBkbVVnZEdocGN5QmpiR0Z6Y3lCaGN5QmhJR1JsY0dWdVpHVnVZM2tnYjNJZ1pYaDBaVzVrSUdsMExseHVLaUJGZUhSbGJuTnBiMjV6SUhOb2IzVnNaQ0JwYlhCc1pXMWxiblFnZEdobElHWnZiR3h2ZDJsdVp5QndjbWwyWVhSbElHMWxkR2h2WkhNNklGOXZibEJ2YzNSTlpYTnpZV2RsSUdGdVpDQmZjbVZuYVhOMFpYSkZlSFJsY201aGJFeHBjM1JsYm1WeVhHNHFMMXh1WTJ4aGMzTWdRblZ6SUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNCZmJYTm5TV1E2SUc1MWJXSmxjanRjYmlBZ1gzTjFZbk5qY21sd2RHbHZibk02SUR4MWNtdzZJRTF6WjB4cGMzUmxibVZ5VzEwK1hHNWNiaUFnWDNKbGMzQnZibk5sVkdsdFpVOTFkRG9nYm5WdFltVnlYRzRnSUY5eVpYTndiMjV6WlVOaGJHeGlZV05yY3pvZ1BIVnliQ3RwWkRvZ0tHMXpaeWtnUFQ0Z2RtOXBaRDVjYmx4dUlDQXFMMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ1gzUm9hWE11WDIxelowbGtJRDBnTUR0Y2JpQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlIdDlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzSmxjM0J2Ym5ObFZHbHRaVTkxZENBOUlEVXdNREE3SUM4dlpHVm1ZWFZzZENCMGJ5QXpjMXh1SUNBZ0lGOTBhR2x6TGw5eVpYTndiMjV6WlVOaGJHeGlZV05yY3lBOUlIdDlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzSmxaMmx6ZEdWeVJYaDBaWEp1WVd4TWFYTjBaVzVsY2lncE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVbVZuYVhOMFpYSWdiR2x6ZEdWdVpYSWdkRzhnY21WalpXbDJaU0J0WlhOellXZGxJSGRvWlc0Z1hDSnRjMmN1ZEc4Z1BUMDlJSFZ5YkZ3aUxseHVJQ0FxSUZOd1pXTnBZV3dnZFhKc0lGd2lLbHdpSUdadmNpQmtaV1poZFd4MElHeHBjM1JsYm1WeUlHbHpJR0ZqWTJWd2RHVmtJSFJ2SUdsdWRHVnlZMlZ3ZENCaGJHd2diV1Z6YzJGblpYTXVYRzRnSUNvZ1FIQmhjbUZ0SUh0VlVreDlJSFZ5YkNCQlpHUnlaWE56SUhSdklHbHVkR1Z5WTJWd2RDd2dkR2hoSUdseklHbHVJSFJvWlNCdFpYTnpZV2RsSUZ3aWRHOWNJbHh1SUNBcUlFQndZWEpoYlNCN1RHbHpkR1Z1WlhKOUlHeHBjM1JsYm1WeUlHeHBjM1JsYm1WeVhHNGdJQ29nUUhKbGRIVnliaUI3VFhOblRHbHpkR1Z1WlhKOUlHbHVjM1JoYm1ObElHOW1JRTF6WjB4cGMzUmxibVZ5WEc0Z0lDb3ZYRzRnSUdGa1pFeHBjM1JsYm1WeUtIVnliQ3dnYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdsMFpXMGdQU0J1WlhjZ1RYTm5UR2x6ZEdWdVpYSW9YM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1zSUhWeWJDd2diR2x6ZEdWdVpYSXBPMXh1SUNBZ0lHeGxkQ0JwZEdWdFRHbHpkQ0E5SUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elczVnliRjA3WEc0Z0lDQWdhV1lnS0NGcGRHVnRUR2x6ZENrZ2UxeHVJQ0FnSUNBZ2FYUmxiVXhwYzNRZ1BTQmJYVHRjYmlBZ0lDQWdJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzNWeWJGMGdQU0JwZEdWdFRHbHpkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBkR1Z0VEdsemRDNXdkWE5vS0dsMFpXMHBPMXh1SUNBZ0lISmxkSFZ5YmlCcGRHVnRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGJuVmhiR3g1SUdGa1pDQmhJSEpsYzNCdmJuTmxJR3hwYzNSbGJtVnlMaUJQYm14NUlHOXVaU0JzYVhOMFpXNWxjaUJ3WlhJZ2JXVnpjMkZuWlNCSlJDQnphRzkxYkdRZ1pYaHBjM1F1WEc0Z0lDQXFJRUZVUlU1VVNVOU9MQ0IwYUdWeVpTQnBjeUJ1YnlCMGFXMWxiM1YwSUdadmNpQjBhR2x6SUd4cGMzUmxibVZ5TGx4dUlDQWdLaUJVYUdVZ2JHbHpkR1Z1WlhJZ2MyaHZkV3hrSUdKbElISmxiVzkyWldRZ2QybDBhQ0JoSUhKbGJXOTJaVkpsYzNCdmJuTmxUR2x6ZEdWdVpYSXNJR1poYVd4cGJtY2dkRzhnWkc4Z2RHaHBjeUIzYVd4c0lISmxjM1ZzZENCcGJpQmhJSFZ1Y21Wc1pXRnpaV1FnYldWdGIzSjVJSEJ5YjJKc1pXMHVYRzRnSUNBcUlFQndZWEpoYlNCN1ZWSk1mU0IxY213Z1QzSnBaMmx1SUdGa1pISmxjM01nYjJZZ2RHaGxJRzFsYzNOaFoyVWdjMlZ1ZEN3Z1hDSnRjMmN1Wm5KdmJWd2lMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JYTm5TV1FnVFdWemMyRm5aU0JKUkNCMGFHRjBJR2x6SUhKbGRIVnlibVZrSUdaeWIyMGdkR2hsSUhCdmMzUk5aWE56WVdkbExseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCeVpYTndiMjV6WlV4cGMzUmxibVZ5SUVOaGJHeGlZV05ySUdaMWJtTjBhVzl1SUdadmNpQjBhR1VnY21WemNHOXVjMlZjYmlBZ0lDb3ZYRzRnSUdGa1pGSmxjM0J2Ym5ObFRHbHpkR1Z1WlhJb2RYSnNMQ0J0YzJkSlpDd2djbVZ6Y0c5dWMyVk1hWE4wWlc1bGNpa2dlMXh1SUNBZ0lIUm9hWE11WDNKbGMzQnZibk5sUTJGc2JHSmhZMnR6VzNWeWJDQXJJRzF6WjBsa1hTQTlJSEpsYzNCdmJuTmxUR2x6ZEdWdVpYSTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WdGIzWmxJSFJvWlNCeVpYTndiMjV6WlNCc2FYTjBaVzVsY2k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRWVWt4OUlIVnliQ0JQY21sbmFXNGdZV1JrY21WemN5QnZaaUIwYUdVZ2JXVnpjMkZuWlNCelpXNTBMQ0JjSW0xelp5NW1jbTl0WENJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J0YzJkSlpDQWdUV1Z6YzJGblpTQkpSQ0IwYUdGMElHbHpJSEpsZEhWeWJtVmtJR1p5YjIwZ2RHaGxJSEJ2YzNSTlpYTnpZV2RsWEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVZTWlhOd2IyNXpaVXhwYzNSbGJtVnlLSFZ5YkN3Z2JYTm5TV1FwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmNtVnpjRzl1YzJWRFlXeHNZbUZqYTNOYmRYSnNJQ3NnYlhOblNXUmRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGJXOTJaU0JoYkd3Z1pYaHBjM1JsYm5RZ2JHbHpkR1Z1WlhKeklHWnZjaUIwYUdVZ1ZWSk1YRzRnSUNBcUlFQndZWEpoYlNBZ2UxVlNUSDBnZFhKc0lFRmtaSEpsYzNNZ2NtVm5hWE4wWlhKbFpGeHVJQ0FnS2k5Y2JpQWdjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpUMllvZFhKc0tTQjdYRzRnSUNBZ1pHVnNaWFJsSUhSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmRYSnNYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSVpXeHdaWElnYldWMGFHOWtJSFJ2SUdKcGJtUWdiR2x6ZEdWdVpYSnpJQ2hwYmlCaWIzUm9JR1JwY21WamRHbHZibk1wSUdsdWRHOGdiM1JvWlhJZ1RXbHVhVUoxY3lCMFlYSm5aWFF1WEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMVZTVEgwZ2IzVjBWWEpzSUU5MWRHSnZkVzVrSUZWU1RDd2djbVZuYVhOMFpYSWdiR2x6ZEdWdVpYSWdabTl5SUhWeWJDQnBiaUJrYVhKbFkzUnBiMjRnWENKMGFHbHpJQzArSUhSaGNtZGxkRndpWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMVZTVEgwZ2FXNVZjbXdnU1c1aWIzVnVaQ0JWVWt3c0lISmxaMmx6ZEdWeUlHeHBjM1JsYm1WeUlHWnZjaUIxY213Z2FXNGdaR2x5WldOMGFXOXVJRndpZEdGeVoyVjBJQzArSUhSb2FYTmNJbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5hVzVwUW5WemZTQjBZWEpuWlhRZ1ZHaGxJRzkwYUdWeUlIUmhjbWRsZENCTmFXNXBRblZ6WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMEp2ZFc1a2ZTQmhiaUJ2WW1wbFkzUWdkR2hoZENCamIyNTBZV2x1Y3lCMGFHVWdjSEp2Y0dWeWRHbGxjeUJiZEdocGMweHBjM1JsYm1WeUxDQjBZWEpuWlhSTWFYTjBaVzVsY2wwZ1lXNWtJSFJvWlNCMWJtSnBibVFnYldWMGFHOWtMbHh1SUNBZ0tpOWNiaUFnWW1sdVpDaHZkWFJWY213c0lHbHVWWEpzTENCMFlYSm5aWFFwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUhSb2FYTk1hWE4wYmlBOUlGOTBhR2x6TG1Ga1pFeHBjM1JsYm1WeUtHOTFkRlZ5YkN3Z0tHMXpaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ2RHRnlaMlYwTG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JzWlhRZ2RHRnlaMlYwVEdsemRHNGdQU0IwWVhKblpYUXVZV1JrVEdsemRHVnVaWElvYVc1VmNtd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJRjkwYUdsekxuQnZjM1JOWlhOellXZGxLRzF6WnlrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnZEdocGMweHBjM1JsYm1WeU9pQjBhR2x6VEdsemRHNHNYRzRnSUNBZ0lDQjBZWEpuWlhSTWFYTjBaVzVsY2pvZ2RHRnlaMlYwVEdsemRHNHNYRzRnSUNBZ0lDQjFibUpwYm1RNklDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYUdselRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEdGeVoyVjBUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJQzh2Y0hWaWJHbHphQ0J2YmlCa1pXWmhkV3gwSUd4cGMzUmxibVZ5YzF4dUlDQmZjSFZpYkdsemFFOXVSR1ZtWVhWc2RDaHRjMmNwSUh0Y2JpQWdJQ0F2TDJseklIUm9aWEpsSUdGdWVTQmNJaXBjSWlBb1pHVm1ZWFZzZENrZ2JHbHpkR1Z1WlhKelAxeHVJQ0FnSUd4bGRDQnBkR1Z0VEdsemRDQTlJSFJvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iSnlvblhUdGNiaUFnSUNCcFppQW9hWFJsYlV4cGMzUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzQjFZbXhwYzJoUGJpaHBkR1Z0VEdsemRDd2diWE5uS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkwzQjFZbXhwYzJnZ2IyNGdZU0J6ZFdKelkzSnBjSFJwYjI0Z2JHbHpkQzVjYmlBZ1gzQjFZbXhwYzJoUGJpaHBkR1Z0VEdsemRDd2diWE5uS1NCN1hHNGdJQ0FnYVhSbGJVeHBjM1F1Wm05eVJXRmphQ2dvYzNWaUtTQTlQaUI3WEc0Z0lDQWdJQ0J6ZFdJdVgyTmhiR3hpWVdOcktHMXpaeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmNtVnpjRzl1YzJWRFlXeHNZbUZqYXlocGJrMXpaeXdnY21WemNHOXVjMlZEWVd4c1ltRmpheWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMMkYxZEc5dFlYUnBZeUJ0WVc1aFoyVnRaVzUwSUc5bUlISmxjM0J2Ym5ObElHaGhibVJzWlhKelhHNGdJQ0FnYVdZZ0tISmxjM0J2Ym5ObFEyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lHeGxkQ0J5WlhOd2IyNXpaVWxrSUQwZ2FXNU5jMmN1Wm5KdmJTQXJJR2x1VFhObkxtbGtPMXh1SUNBZ0lDQWdYM1JvYVhNdVgzSmxjM0J2Ym5ObFEyRnNiR0poWTJ0elczSmxjM0J2Ym5ObFNXUmRJRDBnY21WemNHOXVjMlZEWVd4c1ltRmphenRjYmx4dUlDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE53YjI1elpVWjFiaUE5SUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXR5WlhOd2IyNXpaVWxrWFR0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXR5WlhOd2IyNXpaVWxrWFR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvY21WemNHOXVjMlZHZFc0cElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pYSnliM0pOYzJjZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dhVzVOYzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdOdlpHVTZJRFF3T0N3Z1pHVnpZem9nSjFKbGMzQnZibk5sSUhScGJXVnZkWFFoSnl3Z2RtRnNkV1U2SUdsdVRYTm5JSDFjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WemNHOXVjMlZHZFc0b1pYSnliM0pOYzJjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlMQ0JmZEdocGN5NWZjbVZ6Y0c5dWMyVlVhVzFsVDNWMEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQmZiMjVTWlhOd2IyNXpaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYVdZZ0tHMXpaeTUwZVhCbElEMDlQU0FuY21WemNHOXVjMlVuS1NCN1hHNGdJQ0FnSUNCc1pYUWdjbVZ6Y0c5dWMyVkpaQ0E5SUcxelp5NTBieUFySUcxelp5NXBaRHRjYmlBZ0lDQWdJR3hsZENCeVpYTndiMjV6WlVaMWJpQTlJRjkwYUdsekxsOXlaWE53YjI1elpVTmhiR3hpWVdOcmMxdHlaWE53YjI1elpVbGtYVHRjYmx4dUlDQWdJQ0FnTHk5cFppQnBkQ2R6SUdFZ2NISnZkbWx6YVc5dVlXd2djbVZ6Y0c5dWMyVXNJR1J2YmlkMElHUmxiR1YwWlNCeVpYTndiMjV6WlNCc2FYTjBaVzVsY2x4dUlDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtTnZaR1VnUGowZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0JmZEdocGN5NWZjbVZ6Y0c5dWMyVkRZV3hzWW1GamEzTmJjbVZ6Y0c5dWMyVkpaRjA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpVWjFiaWtnZTF4dUlDQWdJQ0FnSUNCeVpYTndiMjV6WlVaMWJpaHRjMmNwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0F2TDNKbFkyVnBkbVVnYldWemMyRm5aWE1nWm5KdmJTQmxlSFJsY201aGJDQnBiblJsY21aaFkyVmNiaUFnWDI5dVRXVnpjMkZuWlNodGMyY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2FXWWdLQ0ZmZEdocGN5NWZiMjVTWlhOd2IyNXpaU2h0YzJjcEtTQjdYRzRnSUNBZ0lDQnNaWFFnYVhSbGJVeHBjM1FnUFNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdHRjMmN1ZEc5ZE8xeHVJQ0FnSUNBZ2FXWWdLR2wwWlcxTWFYTjBLU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl3ZFdKc2FYTm9UMjRvYVhSbGJVeHBjM1FzSUcxelp5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNIVmliR2x6YUU5dVJHVm1ZWFZzZENodGMyY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjluWlc1SlpDaHBiazF6WnlrZ2UxeHVJQ0FnSUM4dlZFOUVUem9nYUc5M0lHUnZJSGRsSUcxaGJtRm5aU0J0WlhOellXZGxJRWxFSjNNL0lGTm9iM1ZzWkNCcGRDQmlaU0JoSUdkc2IySmhiQ0J5ZFc1MGFXMWxJR052ZFc1MFpYSXNJRzl5SUhCbGNpQlZVa3dnWVdSa2NtVnpjejljYmlBZ0lDQXZMMGRzYjJKaGJDQmpiM1Z1ZEdWeUlIZHBiR3dnYm05MElIZHZjbXNzSUdKbFkyRjFjMlVnZEdobGNtVWdkMmxzYkNCaVpTQnRkV3gwYVhCc1pTQk5hVzVwUW5WeklHbHVjM1JoYm1ObGN5RmNiaUFnSUNBdkwxQmxjaUJWVWt3c0lHTmhiaUJpWlNCaElHeHZkQ0J2WmlCa1lYUmhJSFJ2SUcxaGFXNTBZV2x1SVZ4dUlDQWdJQzh2VFdGNVltVWdZU0JqYjNWdWRHVnlJSEJsY2lCTmFXNXBRblZ6SUdsdWMzUmhibU5sTGlCVWFHbHpJR2x6SUhSb1pTQmhjM04xYldWa0lITnZiSFYwYVc5dUlHWnZjaUJ1YjNjdVhHNGdJQ0FnYVdZZ0tDRnBiazF6Wnk1cFpDQjhmQ0JwYmsxelp5NXBaQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZmJYTm5TV1FyS3p0Y2JpQWdJQ0FnSUdsdVRYTm5MbWxrSUQwZ2RHaHBjeTVmYlhOblNXUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVMlZ1WkNCdFpYTnpZV2RsY3lCMGJ5QnNiMk5oYkNCc2FYTjBaVzVsY25Nc0lHOXlJR2xtSUc1dmRDQmxlR2x6ZEhNZ2RHOGdaWGgwWlhKdVlXd2diR2x6ZEdWdVpYSnpMbHh1SUNBcUlFbDBKM01nYUdGeklHRnVJRzl3ZEdsdmJtRnNJRzFsWTJoaGJtbHpiU0JtYjNJZ1lYVjBiMjFoZEdsaklHMWhibUZuWlcxbGJuUWdiMllnY21WemNHOXVjMlVnYUdGdVpHeGxjbk11WEc0Z0lDb2dWR2hsSUhKbGMzQnZibk5sSUdoaGJtUnNaWElnZDJsc2JDQmlaU0IxYm5KbFoybHpkR1Z5WldRZ1lXWjBaWElnY21WalpXbDJhVzVuSUhSb1pTQnlaWE53YjI1elpTd2diM0lnWVdaMFpYSWdjbVZ6Y0c5dWMyVWdkR2x0Wlc5MWRDQW9aR1ZtWVhWc2RDQjBieUF6Y3lrdVhHNGdJQ29nUUhCaGNtRnRJQ0I3VFdWemMyRm5aWDBnYlhObklFMWxjM05oWjJVZ2RHOGdjMlZ1WkM0Z1RXVnpjMkZuWlNCSlJDQnBjeUJoZFhSdmJXRjBhV05oYkd4NUlHRmtaR1ZrSUhSdklIUm9aU0J0WlhOellXZGxMbHh1SUNBcUlFQndZWEpoYlNBZ2UwWjFibU4wYVc5dWZTQnlaWE53YjI1elpVTmhiR3hpWVdOcklFOXdkR2x2Ym1Gc0lIQmhjbUZ0WlhSbGNpd2dhV1lnZEdobElHUmxkbVZzYjNCbGNpQjNhR0YwSjNNZ1lYVjBiMjFoZEdsaklISmxjM0J2Ym5ObElHMWhibUZuWlcxbGJuUXVYRzRnSUNvZ1FISmxkSFZ5YmlCN2JuVnRZbVZ5ZlNCU1pYUjFjbTV6SUhSb1pTQnRaWE56WVdkbElFbEVMQ0JwYmlCallYTmxJR2wwSUhOb2IzVnNaQ0JpWlNCdVpXVmtaV1FnWm05eUlHMWhiblZoYkNCdFlXNWhaMlZ0Wlc1MElHOW1JSFJvWlNCeVpYTndiMjV6WlNCb1lXNWtiR1Z5TGx4dUlDQXFMMXh1SUNCd2IzTjBUV1Z6YzJGblpTaHBiazF6Wnl3Z2NtVnpjRzl1YzJWRFlXeHNZbUZqYXlrZ2V5QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFNXZkQ0J3ZFdKc2FXTWdZWFpoYVd4aFlteGxMQ0IxYzJWa0lHSjVJSFJvWlNCamJHRnpjeUJsZUhSbGJuTnBiMjRnYVcxd2JHVnRaVzUwWVhScGIyNHNJSFJ2SUhCeWIyTmxjM01nYldWemMyRm5aWE1nWm5KdmJTQjBhR1VnY0hWaWJHbGpJRndpY0c5emRFMWxjM05oWjJWY0lpQjNhWFJvYjNWMElHRWdjbVZuYVhOMFpYSmxaQ0JzYVhOMFpXNWxjaTVjYmlBZ0lDb2dWWE5sWkNCMGJ5QnpaVzVrSUhSb1pTQnRaWE56WVdkbElIUnZJR0Z1SUdWNGRHVnlibUZzSUdsdWRHVnlabUZqWlN3Z2JHbHJaU0JoSUZkbFlsZHZjbXRsY2l3Z1NVWnlZVzFsTENCbGRHTXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJVdVRXVnpjMkZuWlgwZ2JYTm5JRTFsYzNOaFoyVmNiaUFnSUNvdlhHNGdJRjl2YmxCdmMzUk5aWE56WVdkbEtHMXpaeWtnZXlBdkttbHRjR3hsYldWdWRHRjBhVzl1SUhkcGJHd2djMlZ1WkNCdFpYTnpZV2RsSUhSdklHVjRkR1Z5Ym1Gc0lITjVjM1JsYlNvdklIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RtOTBJSEIxWW14cFl5QmhkbUZwYkdGaWJHVXNJSFZ6WldRZ1lua2dkR2hsSUdOc1lYTnpJR1Y0ZEdWdWMybHZiaUJwYlhCc1pXMWxiblJoZEdsdmJpd2dkRzhnY0hKdlkyVnpjeUJoYkd3Z2JXVnpjMkZuWlhNZ2RHaGhkQ0JsYm5SbGNpQjBhR1VnVFdsdWFVSjFjeUJtY205dElHRnVJR1Y0ZEdWeWJtRnNJR2x1ZEdWeVptRmpaU3dnYkdsclpTQmhJRmRsWWxkdmNtdGxjaXdnU1VaeVlXMWxMQ0JsZEdNdVhHNGdJQ0FxSUZSb2FYTWdiV1YwYUc5a0lHbHpJR05oYkd4bFpDQnZibVVnZEdsdFpTQnBiaUIwYUdVZ1kyOXVjM1J5ZFdOMGIzSWdkRzhnY21WbmFYTjBaWElnWlhoMFpYSnVZV3dnYkdsemRHVnVaWEp6TGx4dUlDQWdLaUJVYUdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnZDJsc2JDQndjbTlpWVdKc2VTQmpZV3hzSUhSb1pTQmNJbDl2YmsxbGMzTmhaMlZjSWlCdFpYUm9iMlFnZEc4Z2NIVmliR2x6YUNCcGJpQjBhR1VnYkc5allXd2diR2x6ZEdWdVpYSnpMbHh1SUNBZ0tpQkVUeUJPVDFRZ1kyRnNiQ0JjSW5CdmMzUk5aWE56WVdkbFhDSXNJSFJvWlhKbElHbHpJR0VnWkdGdVoyVnlJSFJvWVhRZ2RHaGxJRzFsYzNOaFoyVWdaVzUwWlhKeklHbHVJR0VnWTNsamJHVWhYRzRnSUNBcUwxeHVJQ0JmY21WbmFYTjBaWEpGZUhSbGNtNWhiRXhwYzNSbGJtVnlLQ2tnZXlBdkttbHRjR3hsYldWdWRHRjBhVzl1SUhkcGJHd2djbVZuYVhOMFpYSWdaWGgwWlhKdVlXd2diR2x6ZEdWdVpYSWdZVzVrSUdOaGJHd2dYQ0owYUdsekxsOXZiazFsYzNOaFoyVW9iWE5uS1Z3aUlDb3ZJSDFjYmx4dWZWeHVYRzVqYkdGemN5Qk5jMmRNYVhOMFpXNWxjaUI3WEc0Z0lDOHFJSEJ5YVhaaGRHVmNiaUFnWDNOMVluTmpjbWx3ZEdsdmJuTTZJRHh6ZEhKcGJtYzZJRTF6WjB4cGMzUmxibVZ5VzEwK08xeHVJQ0JmZFhKc09pQnpkSEpwYm1jN1hHNGdJRjlqWVd4c1ltRmphem9nS0cxelp5a2dQVDRnZG05cFpEdGNiaUFnS2k5Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loemRXSnpZM0pwY0hScGIyNXpMQ0IxY213c0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1eklEMGdjM1ZpYzJOeWFYQjBhVzl1Y3p0Y2JpQWdJQ0JmZEdocGN5NWZkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lGOTBhR2x6TGw5allXeHNZbUZqYXlBOUlHTmhiR3hpWVdOck8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhWeWJDZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzVnliRHNnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlcxdmRtVWdkR2hwY3lCc2FYTjBaVzVsY2lCbWNtOXRJSFJvWlNCQ2RYTmNiaUFnSUNvdlhHNGdJSEpsYlc5MlpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJSE4xWW5NZ1BTQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRmZEdocGN5NWZkWEpzWFR0Y2JpQWdJQ0JwWmlBb2MzVmljeWtnZTF4dUlDQWdJQ0FnYkdWMElHbHVaR1Y0SUQwZ2MzVmljeTVwYm1SbGVFOW1LRjkwYUdsektUdGNiaUFnSUNBZ0lITjFZbk11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjYmx4dUlDQWdJQ0FnTHk5cFppQjBhR1Z5WlNCaGNtVWdibThnYkdsemRHVnVaWEp6TENCeVpXMXZkbVVnZEdobElITjFZbk5qY21sd2RHbHZiaUJsYm5ScGNtVnNlUzVjYmlBZ0lDQWdJR2xtSUNoemRXSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJYM1JvYVhNdVgzVnliRjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRUoxY3p0Y2JpSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JtbHRjRzl5ZENCQ2RYTWdabkp2YlNBbkxpOUNkWE1uTzF4dWFXMXdiM0owSUZCcGNHVnNhVzVsSUdaeWIyMGdKeTR2VUdsd1pXeHBibVVuTzF4dVhHNHZLaXBjYmlvZ1FHRjFkR2h2Y2lCdGFXTmhaV3h3WldSeWIzTmhRR2R0WVdsc0xtTnZiVnh1S2lCTlpYTnpZV2RsSUVKVlV5QkpiblJsY21aaFkyVWdhWE1nWVc0Z1pYaDBaVzV6YVc5dUlHOW1JSFJvWlNCQ2RYTmNiaW9nU1hRZ1pHOWxjMjRuZENCemRYQndiM0owSUhSb1pTQmtaV1poZFd4MElDY3FKeUJzYVhOMFpXNWxjaXdnYVc1emRHVmhaQ0JwZENCMWMyVnpJSFJvWlNCeVpXZHBjM1J5ZVM1eVpYTnZiSFpsS0M0dUtWeHVLaTljYm1Oc1lYTnpJRTFsYzNOaFoyVkNkWE1nWlhoMFpXNWtjeUJDZFhNZ2UxeHVJQ0F2S2lCd2NtbDJZWFJsWEc0Z0lGOXlaV2RwYzNSeWVUb2dVbVZuYVhOMGNubGNiaUFnWDJadmNuZGhjbVJ6T2lCN0lEeG1jbTl0TFhWeWJENDZJSHNnWm13NklFMXpaMHhwYzNSbGJtVnlMQ0J6WVc1a1ltOTRWRzlWY214ek9pQk5ZWEFvVTJGdVpHSnZlQ3dnVzNSdkxYVnliRjBwTENCMWNteFViMU5oYm1SaWIzZzZJSHNnZEc4dGRYSnNPaUJUWVc1a1ltOTRJSDBnZlNCOVhHNWNiaUFnWDNCcGNHVnNhVzVsT2lCUWFYQmxiR2x1WlZ4dUlDQXFMMXh1WEc0Z0lDOHZWRTlFVHpvZ1puVjBkWEpsSUc5d2RHbHRhWHBoZEdsdmJseHVJQ0F2THpFdUlHMWxjM05oWjJVZ1ltRjBZMmdnY0hKdlkyVnpjMmx1WnlCM2FYUm9JSE5sZEVsdWRHVnlkbUZzWEc0Z0lDOHZNaTRnY21WemIyeDJaU0JrWldaaGRXeDBJR2RoZEdWM1lYa3ZjSEp2ZEc5emRIVmlJSGRwZEdnZ2NtVm5hWE4wWlhJdWNtVnpiMngyWlZ4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKbFoybHpkSEo1S1NCN1hHNGdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQjBhR2x6TGw5eVpXZHBjM1J5ZVNBOUlISmxaMmx6ZEhKNU8xeHVJQ0FnSUhSb2FYTXVYMlp2Y25kaGNtUnpJRDBnZTMwN1hHNWNiaUFnSUNCMGFHbHpMbDl3YVhCbGJHbHVaU0E5SUc1bGR5QlFhWEJsYkdsdVpTZ29aWEp5YjNJcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkUVNWQkZURWxPUlMxRlVsSlBVam9nSnl3Z1NsTlBUaTV6ZEhKcGJtZHBabmtvWlhKeWIzSXBLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRDQndhWEJsYkdsdVpTZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzQnBjR1ZzYVc1bE95QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnZjM1FnWVNCdFpYTnpZV2RsSUdadmNpQnliM1YwYVc1bkxpQkpkQ0IzYVd4c0lHWnBjbk4wSUhObFlYSmphQ0JtYjNJZ1lTQnNhWE4wWlc1bGNpd2dhV1lnZEdobGNtVWdhWE1nYm04Z2IyNWxMQ0JwZENCelpXNWtjeUIwYnlCaElHVjRkR1Z5Ym1Gc0lISnZkWFJwYm1jZ2RYTnBibWNnZEdobElGOXZibEJ2YzNSTlpYTnpZV2RsTGx4dUlDQWdLaUJGZUhSbGNtNWhiQ0J5YjNWMGFXNW5JSFZ6WlNCMGFHVWdjbVZuYVhOMGNua3VjbVZ6YjJ4MlpTZ3VMaWtnYldWMGFHOWtJSFJ2SUdSbFkybGtaU0IwYUdVZ1pHVnpkR2x1WVhScGIyNGdjMkZ1WkdKdmVDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlgwZ2FXNU5jMmNnSUNBZ0lDQWdJQ0FnSUNCS1UwOU9JSGRwZEdnZ2JXRnVaR0YwYjNKNUlFMWxjM05oWjJVZ2MzUnlkV04wZFhKbElIdHBaQ3dnZEhsd1pTd2dabkp2YlN3Z2RHOTlYRzRnSUNBcUlFQndZWEpoYlNBZ2UwTmhiR3hpWVdOcmZTQnlaWE53YjI1elpVTmhiR3hpWVdOcklFOXdkR2x2Ym1Gc0lHTmhiR3hpWVdOcklHbG1JR0VnY21WemNHOXVjMlVnYVhNZ1pYaHdaV04wWldRZ1puSnZiU0IwYUdVZ2NtVnhkV1Z6ZEM0Z1FTQnlaWE53YjI1elpTQjNhV3hzSUdKbElHRnNkMkY1Y3lCelpXNTBMQ0JsZG1WdUlHbG1JR2wwSUdseklHRWdYQ0pVYVcxbGIzVjBYQ0l1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMjUxYldKbGNuMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR1VnVFdWemMyRm5aU0JwWkZ4dUlDQWdLaTljYmlBZ2NHOXpkRTFsYzNOaFoyVW9hVzVOYzJjc0lISmxjM0J2Ym5ObFEyRnNiR0poWTJzcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMmRsYmtsa0tHbHVUWE5uS1R0Y2JseHVJQ0FnSUY5MGFHbHpMbDl3YVhCbGJHbHVaUzV3Y205alpYTnpLR2x1VFhObkxDQW9iWE5uS1NBOVBpQjdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOXlaWE53YjI1elpVTmhiR3hpWVdOcktHbHVUWE5uTENCeVpYTndiMjV6WlVOaGJHeGlZV05yS1R0Y2JseHVJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NWZiMjVTWlhOd2IyNXpaU2h0YzJjcEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCcGRHVnRUR2x6ZENBOUlGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXMjF6Wnk1MGIxMDdYRzRnSUNBZ0lDQWdJR2xtSUNocGRHVnRUR2x6ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2Wkc4Z2JtOTBJSEIxWW14cGMyZ2diMjRnWkdWbVlYVnNkQ0JoWkdSeVpYTnpMQ0JpWldOaGRYTmxJRzltSUd4dmIzQmlZV05ySUdONVkyeGxYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM0IxWW14cGMyaFBiaWhwZEdWdFRHbHpkQ3dnYlhObktUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2TDJsbUlIUm9aWEpsSUdseklHNXZJR3hwYzNSbGJtVnlMQ0J6Wlc1a0lIUnZJR1Y0ZEdWeWJtRnNJR2x1ZEdWeVptRmpaVnh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl2YmxCdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJwYmsxelp5NXBaRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQlpHUnpJR0Z1SUdWNGRHVnlibUZzSUhCMVlteHBjMmdnWVdSa2NtVnpjeUJzYVhOMFpXNWxjaTRnUlhabGNua2diV1Z6YzJGblpTQm1iM0lnZEdobElHRmtaSEpsYzNNZ2QybHNiQ0JpWlNCbWIzSjNZWEprWldRZ2RHOGdkR2hsSUdWNGRHVnlibUZzSUhKdmRYUnBibWNnWW5rZ1gyOXVVRzl6ZEUxbGMzTmhaMlV1WEc0Z0lDQXFJRlJvYVhNZ2JXVmhibk1zSUdWMlpXNGdhV1lnZEdobGNtVWdhWE1nWVNCc2FYTjBaVzVsY2lCbWIzSWdkR2hsSUdGa1pISmxjM01zSUdsMElIZHBiR3dnWVd4emJ5QnpaVzVrSUhSb1pTQnRaWE56WVdkbElIUnZJSFJvWlNCbGVIUmxjbTVoYkNCeWIzVjBhVzVuTGx4dUlDQWdLaUJBY0dGeVlXMGdlMVZTVEgwZ1puSnZiU0JRZFdKc2FYTm9JR0ZrWkhKbGMzTXVYRzRnSUNBcUwxeHVJQ0JoWkdSUWRXSnNhWE5vS0daeWIyMHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OTJaWEpwWm5rZ2FXWWdabTl5ZDJGeVpDQmxlR2x6ZEZ4dUlDQWdJR3hsZENCeVpXWkRiM1Z1ZENBOUlGOTBhR2x6TGw5bWIzSjNZWEprYzF0bWNtOXRYVHRjYmlBZ0lDQnBaaUFvSVhKbFprTnZkVzUwS1NCN1hHNGdJQ0FnSUNCc1pYUWdabTl5ZDJGeVpFeHBjM1JsYm1WeUlEMGdYM1JvYVhNdVlXUmtUR2x6ZEdWdVpYSW9abkp2YlN3Z0tHMXpaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVFVJdFVGVkNURWxUU0RvZ0tDQW5JQ3NnWm5KdmJTQXJJQ2NnS1NjcE8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmIyNVFiM04wVFdWemMyRm5aU2h0YzJjcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSEpsWmtOdmRXNTBJRDBnZTF4dUlDQWdJQ0FnSUNCamIzVnVkR1Z5T2lBd0xGeHVJQ0FnSUNBZ0lDQm1iRG9nWm05eWQyRnlaRXhwYzNSbGJtVnlMRnh1SUNBZ0lDQWdJQ0J5WlcxdmRtVTZJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZkVzUwWlhJdExUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVqYjNWdWRHVnlJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVpzTG5KbGJXOTJaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5bWIzSjNZWEprYzF0bWNtOXRYVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdYM1JvYVhNdVgyWnZjbmRoY21SelcyWnliMjFkSUQwZ2NtVm1RMjkxYm5RN1hHNGdJQ0I5WEc1Y2JpQWdJSEpsWmtOdmRXNTBMbU52ZFc1MFpYSXJLenRjYmlBZ0lISmxkSFZ5YmlCeVpXWkRiM1Z1ZER0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJaR1J6SUdFZ1ptOXlkMkZ5WkNCc2FYTjBaVzVsY2lCbWIzSWdZU0J0WlhOellXZGxJR1JsYzNScGJtRjBhVzl1TGlCRmRtVnllU0J0WlhOellXZGxJSEpsWVdOb2FXNW5JR0Z1SUdGa1pISmxjM01nZDJsc2JDQmlaU0JoYkhOdklITmxiblFnZEc4Z2RHaGxJR1p2Y25kaGNtUWdZV1JrY21WemN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0VlVreDlJR1p5YjIwZ1RXVnpjMkZuWlNCa1pYTjBhVzVoZEdsdmJpd2dhWFFuY3lCaFkzUjFZV3hzZVNCMGFHVWdabWxsYkdRZ1hDSjBiMXdpSUc5bUlIUm9aU0J0WlhOellXZGxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxVlNUSDBnZEc4Z0lDQkdiM0ozWVhKa0lHRmtaSEpsYzNNdVhHNGdJQ0FxTDF4dUlDQWdZV1JrUm05eWQyRnlaQ2htY205dExDQjBieWtnZTF4dUlDQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1aFpHUk1hWE4wWlc1bGNpaG1jbTl0TENBb2JYTm5LU0E5UGlCN1hHNGdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMDFDTFVaUFVsZEJVa1E2SUNnZ0p5QXJJR1p5YjIwZ0t5QW5JSFJ2SUNjZ0t5QjBieUFySUNjZ0tTY3BPMXh1SUNBZ0lDQWdJRjkwYUdsekxtWnZjbmRoY21Rb2RHOHNJRzF6WnlrN1hHNGdJQ0FnSUgwcE8xeHVJQ0FnZlZ4dVhHNGdJQ0F2S2lwY2JpQWdJQ0FxSUVwMWMzUWdabTl5ZDJGeVpDZHpJR0VnYldWemMyRm5aU0IwYnlCMGFHVWdabTl5ZDJGeVpDQmhaR1J5WlhOekxpQk1hWE4wWlc1bGNuTWdjMmh2ZFd4a0lHSmxJR0YyWVdsc1lXSnNaU0JtYjNJZ2RHaGxJR1p2Y25kaGNtUWdZV1JrY21WemN5NWNiaUFnSUNBcUlFQndZWEpoYlNBZ2UxVlNUSDBnZFhKc0lFWnZjbmRoY21RZ1lXUmtjbVZ6Y3k1Y2JpQWdJQ0FxSUVCd1lYSmhiU0FnZTAxbGMzTmhaMlY5SUcxelp5Qk5aWE56WVdkbElIUnZJR1p2Y25kaGNtUmNiaUFnSUNBcUwxeHVJQ0FnWm05eWQyRnlaQ2gxY213c0lHMXpaeWtnZTF4dUlDQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJR3hsZENCcGRHVnRUR2x6ZENBOUlGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXM1Z5YkYwN1hHNGdJQ0FnSUdsbUlDaHBkR1Z0VEdsemRDa2dlMXh1SUNBZ0lDQWdJRjkwYUdsekxsOXdkV0pzYVhOb1QyNG9hWFJsYlV4cGMzUXNJRzF6WnlrN1hHNGdJQ0FnSUgxY2JpQWdJSDFjYmx4dUlDQWdMeTlrWldaaGRXeDBJSEp2ZFhSbExDQnBaaUIwYUdWeVpTQmhjbVVnYm04Z2JHbHpkR1Z1WlhKeklHRjJZV2xzWVdKc1pTQm1iM0lnWVNCdFpYTnpZV2RsSUdSbGMzUnBibUYwYVc5dUxseHVJQ0FnWDI5dVVHOXpkRTFsYzNOaFoyVW9iWE5uS1NCN1hHNGdJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnTHk5eVpYTnZiSFpsSUdWNGRHVnlibUZzSUhCeWIzUnZjM1IxWWk0dUxseHVJQ0FnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmt1Y21WemIyeDJaU2h0YzJjdWRHOHBMblJvWlc0b0tISnZkWFJsS1NBOVBpQjdYRzRnSUNBZ0lDQWdYM1JvYVhNdVptOXlkMkZ5WkNoeWIzVjBaU3dnYlhObktUdGNiaUFnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pTa2dlMXh1SUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkU1JWTlBURlpGTFVWU1VrOVNPaUFuTENCbEtUdGNiaUFnSUNBZ2ZTazdYRzRnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRTFsYzNOaFoyVkNkWE03WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc1Y2JpOHFLbHh1S2lCQVlYVjBhRzl5SUcxcFkyRmxiSEJsWkhKdmMyRkFaMjFoYVd3dVkyOXRYRzRxSUZObGNYVmxibU5wWVd3Z2NISnZZMlZ6YzI5eUlHOW1JRzFsZEdodlpITXVJRk5wYldsc1lYSWdkRzhnYUc5M0lGTmxjWFZsYm5ScFlXd2dVSEp2YldselpTZHpJSGR2Y21zc0lHSjFkQ0JpWlhSMFpYSWdabWwwSUdadmNpQnRaWE56WVdkbElIQnliMk5sYzNOcGJtY3VYRzRxSUU1dmNtMWhiQ0IxYzJVZ1ptOXlJSFJvYVhNc0lHbHpJSFJ2SUdsdWRHVnlZMlZ3ZENCaGJHd2diV1Z6YzJGblpYTWdkMmwwYUNCamIyNW1hV2QxY21Wa0lHaGhibVJzWlhKekxDQmhibVFnWVdOMElHRmpZMjl5WkdsdVoyeDVMbHh1S2k5Y2JtTnNZWE56SUZCcGNHVnNhVzVsSUh0Y2JpQWdMeW9nY0hWaWJHbGpYRzRnSUNBZ2FHRnVaR3hsY25NNklDZ29VR2x3WlVOdmJuUmxlSFFwSUQwK0lIWnZhV1FwVzExY2JpQWdJQ0J2YmtaaGFXdzZJQ2hsY25KdmNpa2dQVDRnZG05cFpGeHVJQ0FxTDF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0Y5dmJrWmhhV3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdWFHRnVaR3hsY25NZ1BTQmJYVHRjYmlBZ0lDQmZkR2hwY3k1dmJrWmhhV3dnUFNCZmIyNUdZV2xzTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVjMlZ5ZENCaElHMWxjM05oWjJVZ2FXNGdkR2hsSUhCcGNHVnNhVzVsSUhGMVpYVmxMaUJCYkd3Z2JXVnpjMkZuWlhNZ1lYSmxJSGR5WVhCd1pXUWdkMmwwYUNCaElGQnBjR1ZEYjI1MFpYaDBMbHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbGZTQnRjMmNnSUNBZ0lDQWdUV1Z6YzJGblpTQm1iM0lnZEdobElIRjFaWFZsWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlME5oYkd4aVlXTnJmU0J2YmtSbGJHbDJaWElnVjJobGJpQnRaWE56WVdkbElHbHpJR1pwYm1semFHVmtJSEJ5YjJObGMzTnBibWNnWm5KdmJTQmhiR3dnYUdGdVpHeGxjbk1zSUdsMElIZHBiR3dnWW1VZ1pHVnNhWFpsY21Wa0lHbHVJSFJvYVhNZ1kyRnNiR0poWTJzdVhHNGdJQ0FxTDF4dUlDQndjbTlqWlhOektHMXpaeXdnYjI1RVpXeHBkbVZ5S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtSUNoZmRHaHBjeTVvWVc1a2JHVnljeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCc1pYUWdhWFJsY2lBOUlHNWxkeUJKZEdWeVlYUnZjaWhmZEdocGN5NW9ZVzVrYkdWeWN5azdYRzRnSUNBZ0lDQnBkR1Z5TG01bGVIUW9ibVYzSUZCcGNHVkRiMjUwWlhoMEtGOTBhR2x6TENCcGRHVnlMQ0J0YzJjc0lHOXVSR1ZzYVhabGNpa3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdmJrUmxiR2wyWlhJb2JYTm5LVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNHFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2Jpb2dWM0poY0hCbGNpQmhjbTkxYm1RZ1lTQnRaWE56WVdkbElIUm9ZWFFnWVdSa2N5QmhZM1JwYjI1eklIUm9ZWFFnWTJGdUlHSmxJR1pwY21Wa0lHSjVJR0Z1ZVNCcGJuUmxjbU5sY0hSdmNpQm9ZVzVrYkdWeUxseHVLaUJVYUdVZ1VHbHdaV3hwYm1VZ2FYTWdZWE41Ym1Ob2NtOXViM1Z6TENCemJ5QmhiaUJvWVc1a2JHVnlJSE5vYjNWc1pDQmhiSGRoZVhNZ1kyRnNiQ0JoYmlCaFkzUnBiMjRzSUhSb1pTQmtaV1poZFd4MElHOXVaU0JwY3lCY0ltNWxlSFFvS1Z3aVhHNHFMMXh1WTJ4aGMzTWdVR2x3WlVOdmJuUmxlSFFnZTF4dUlDQXZLaUJ3Y21sMllYUmxYRzRnSUNBZ1gybHVVM1J2Y0RvZ1ltOXZiR1ZoYmx4dVhHNGdJQ0FnWDNCcGNHVnNhVzVsT2lCUWFYQmxiR2x1WlZ4dUlDQWdJRjlwZEdWeU9pQkpkR1Z5WVhSdmNseHVJQ0FnSUY5dGMyYzZJRTFsYzNOaFoyVmNiaUFnS2k5Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lod2FYQmxiR2x1WlN3Z2FYUmxjaXdnYlhObkxDQnZia1JsYkdsMlpYSXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDJsdVUzUnZjQ0E5SUdaaGJITmxPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzQnBjR1ZzYVc1bElEMGdjR2x3Wld4cGJtVTdYRzRnSUNBZ1gzUm9hWE11WDJsMFpYSWdQU0JwZEdWeU8xeHVJQ0FnSUY5MGFHbHpMbDl0YzJjZ1BTQnRjMmM3WEc0Z0lDQWdYM1JvYVhNdVgyOXVSR1ZzYVhabGNpQTlJRzl1UkdWc2FYWmxjanRjYmlBZ2ZWeHVYRzRnSUdkbGRDQndhWEJsYkdsdVpTZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzQnBjR1ZzYVc1bE95QjlYRzVjYmlBZ1oyVjBJRzF6WnlncElIc2djbVYwZFhKdUlIUm9hWE11WDIxelp6c2dmVnh1SUNCelpYUWdiWE5uS0dsdVRYTm5LU0I3SUhSb2FYTXVYMjF6WnlBOUlHbHVUWE5uT3lCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCeWIyTmxaV1FnZEc4Z2RHaGxJRzVsZUhRZ2FXNTBaWEpqWlhCMGIzSWdhR0Z1Wkd4bGNpd2dkVzVzWlhOeklIUm9aWEpsSUhkaGN5QmhiaUJsY25KdmNpNGdTV1lnYVhRbmN5QjBhR1VnYkdGemRDQnZibVVzSUhCeWIyTmxaV1FnZEc4Z2IyNUVaV3hwZG1WeUlHaGhibVJzWlhJdVhHNGdJQ0FxTDF4dUlDQnVaWGgwS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JwWmlBb0lWOTBhR2x6TGw5cGJsTjBiM0FwSUh0Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1ZmFYUmxjaTVvWVhOT1pYaDBLU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlwZEdWeUxtNWxlSFFvWDNSb2FYTXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgyOXVSR1ZzYVhabGNpaGZkR2hwY3k1ZmJYTm5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVUhKdlkyVmxaQ0JrYVhKbFkzUnNlU0IwYnlCMGFHVWdiMjVFWld4cGRtVnlJR2hoYm1Sc1pYSXNJSFZ1YkdWemN5QjBhR1Z5WlNCM1lYTWdZVzRnWlhKeWIzSXVYRzRnSUNBcUwxeHVJQ0JrWld4cGRtVnlLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLQ0ZmZEdocGN5NWZhVzVUZEc5d0tTQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmFXNVRkRzl3SUQwZ2RISjFaVHRjYmlBZ0lDQWdJRjkwYUdsekxsOXZia1JsYkdsMlpYSW9YM1JvYVhNdVgyMXpaeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUUxaGNtc2dkR2hsSUdOdmJuUmxlSFFnZDJsMGFDQmhiaUJsY25KdmNpQmhibVFnY0hKdlkyVmxaQ0IwYnlCMGFHVWdiMjVHWVdsc0lHaGhibVJzWlhJdVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTF0MGVYQmxYWDBnWlhKeWIzSWdXMlJsYzJOeWFYQjBhVzl1WFZ4dUlDQWdLaTljYmlBZ1ptRnBiQ2hsY25KdmNpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9JVjkwYUdsekxsOXBibE4wYjNBcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJsTjBiM0FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDl3YVhCbGJHbHVaUzV2YmtaaGFXd3BJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYM0JwY0dWc2FXNWxMbTl1Um1GcGJDaGxjbkp2Y2lrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtTnNZWE56SUVsMFpYSmhkRzl5SUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNBZ0lGOXBibVJsZURvZ2JuVnRZbVZ5WEc0Z0lDQWdYMkZ5Y21GNU9pQmJYVnh1SUNBcUwxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHRnljbUY1S1NCN1hHNGdJQ0FnZEdocGN5NWZhVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQjBhR2x6TGw5aGNuSmhlU0E5SUdGeWNtRjVPMXh1SUNCOVhHNWNiaUFnWjJWMElHaGhjMDVsZUhRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1WkdWNElEd2dkR2hwY3k1ZllYSnlZWGt1YkdWdVozUm9JQzBnTVR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0J1WlhoMEtDa2dlMXh1SUNBZ0lIUm9hWE11WDJsdVpHVjRLeXM3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJGeWNtRjVXM1JvYVhNdVgybHVaR1Y0WFR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUWFYQmxiR2x1WlR0Y2JpSXNJaThxS2x4dUtpQkRiR0Z6Y3lCM2FYUm9JSFJvWlNCamNubHdkRzluY21Gd2FHbGpJR1oxYm1OMGFXOXVjeUJtYjNJZ2RHaGxJR0YxZEdobGJuUnBZMkYwYVc5dUlIQnliM1J2WTI5c1hHNHFYRzRxTDF4dVkyeGhjM01nUTNKNWNIUnZJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCbGJtTnZaR1VnWVNCaWVYUmxRWEp5WVhrZ2RtRnNkV1VnYVc0Z1ltRnpaU0EyTkNCbGJtTnZaR1ZjYmlBZ0tpQkFjR0Z5WVcwZ0lDQjdZbmwwWlVGeWNtRjVmU0FnSUNCMllXeDFaU0FnSUNCaWVYUmxRWEp5WVhrZ2RtRnNkV1ZjYmlBZ0tpQkFjbVYwZFhKdUlDQjdjM1J5YVc1bmZTQWdJR1Z1WTI5a1pXUWdkbUZzZFdWY2JpQWdLaTljYmlBZ1pXNWpiMlJsS0haaGJIVmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHSjBiMkVvZG1Gc2RXVXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWkdWamIyUmxJR0VnWW1GelpUWTBJSFpoYkhWbElHbHVJR0VnYm1WM0lGVnBiblE0UVhKeVlYbGNiaUFnS2lCQWNHRnlZVzBnSUNCN2MzUnlhVzVuZlNBZ0lDQjJZV3gxWlNBZ0lDQjJZV3gxWlNCbGJtTnZaR1ZrSUdsdUlHSmhjMlVnTmpSY2JpQWdLaUJBY21WMGRYSnVJQ0I3WW5sMFpVRnljbUY1ZlNCa1pXTnZaR1ZrVm1Gc2RXVmNiaUFnS2k5Y2JpQWdaR1ZqYjJSbEtIWmhiSFZsS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVmFXNTBPRUZ5Y21GNUtFcFRUMDR1Y0dGeWMyVW9KMXNuSUNzZ1lYUnZZaWgyWVd4MVpTa2dLeUFuWFNjcEtUdGNiaUFnZlZ4dVhHNGdJR1Z1WTNKNWNIUlNVMEVvY0hWaVMyVjVMQ0JrWVhSaEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlwYlhCdmNuUlNVMEZsYm1OeWVYQjBTMlY1S0c1bGR5QlZhVzUwT0VGeWNtRjVLSEIxWWt0bGVTa3BMblJvWlc0b1puVnVZM1JwYjI0b2NIVmliR2xqUzJWNUtTQjdYRzVjYmlBZ0lDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNWxibU55ZVhCMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQW5VbE5CTFU5QlJWQW5YRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hWaWJHbGpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaElDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ1pHRjBZU0I1YjNVZ2QyRnVkQ0IwYnlCbGJtTnllWEIwWEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvWlc1amNubHdkR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0Z1SUVGeWNtRjVRblZtWm1WeUlHTnZiblJoYVc1cGJtY2dkR2hsSUdWdVkzSjVjSFJsWkNCa1lYUmhYRzRnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxXVnVZM0o1Y0hSU1UwRW5MQ0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGxibU55ZVhCMFpXUXBLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0c1bGR5QlZhVzUwT0VGeWNtRjVLR1Z1WTNKNWNIUmxaQ2twTzF4dVhHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaVzVqY25sd2RGSlRRU2NzSUdWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0JrWldOeWVYQjBVbE5CS0hCeWFYWkxaWGtzSUdSaGRHRXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJsdGNHOXlkRkpUUVdSbFkzSjVjSFJMWlhrb2NISnBka3RsZVNrdWRHaGxiaWhtZFc1amRHbHZiaWh3Y21sMllYUmxTMlY1S1NCN1hHNWNiaUFnSUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1a1pXTnllWEIwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJMVTlCUlZBblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEpwZG1GMFpVdGxlU3dnTHk5bWNtOXRJR2RsYm1WeVlYUmxTMlY1SUc5eUlHbHRjRzl5ZEV0bGVTQmhZbTkyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVNBdkwwRnljbUY1UW5WbVptVnlJRzltSUhSb1pTQmtZWFJoWEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvWkdWamNubHdkR1ZrS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHVmpjbmx3ZEdWa1JHRjBZU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR1JsWTNKNWNIUmxaQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WkdWamNubHdkRkpUUVNjc0lHUmxZM0o1Y0hSbFpFUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1pHVmpjbmx3ZEdWa1JHRjBZU2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWtaV055ZVhCMFVsTkJKeXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ2MybG5ibEpUUVNod2NtbDJTMlY1TENCa1lYUmhLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJTVTBGemFXZHVTMlY1S0hCeWFYWkxaWGtwTG5Sb1pXNG9ablZ1WTNScGIyNG9jSEpwZG1GMFpVdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1YzJsbmJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMUpUUVZOVFFTMVFTME5UTVMxMk1WODFKMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWFYWmhkR1ZMWlhrc0lDOHZabkp2YlNCblpXNWxjbUYwWlV0bGVTQnZjaUJwYlhCdmNuUkxaWGtnWVdKdmRtVmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkxZEdZNFJXNWpiMlJsS0dSaGRHRXBJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QnphV2R1WEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYzJsbmJtRjBkWEpsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0Z1SUVGeWNtRjVRblZtWm1WeUlHTnZiblJoYVc1cGJtY2dkR2hsSUhOcFoyNWhkSFZ5WlZ4dUlDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTF6YVdkdVVsTkJKeXdnYm1WM0lGVnBiblE0UVhKeVlYa29jMmxuYm1GMGRYSmxLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodVpYY2dWV2x1ZERoQmNuSmhlU2h6YVdkdVlYUjFjbVVwS1R0Y2JseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMWE5wWjI1U1UwRW5MQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbklwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIWmxjbWxtZVZKVFFTaHdkV0pMWlhrc0lHUmhkR0VzSUhOcFoyNWhkSFZ5WlNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZhVzF3YjNKMFVsTkJkbVZ5YVdaNVMyVjVLSEIxWWt0bGVTa3VkR2hsYmlobWRXNWpkR2x2Ymlod2RXSnNhV05MWlhrcElIdGNibHh1SUNBZ0lDQWdJQ0JqY25sd2RHOHVjM1ZpZEd4bExuWmxjbWxtZVNoY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0oxSlRRVk5UUVMxUVMwTlRNUzEyTVY4MUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEIxWW14cFkwdGxlU3dnTHk5bWNtOXRJR2RsYm1WeVlYUmxTMlY1SUc5eUlHbHRjRzl5ZEV0bGVTQmhZbTkyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMmxuYm1GMGRYSmxMQ0F2TDBGeWNtRjVRblZtWm1WeUlHOW1JSFJvWlNCemFXZHVZWFIxY21WY2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOTFkR1k0Ulc1amIyUmxLR1JoZEdFcElDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ2RHaGxJR1JoZEdGY2JpQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2YmlocGMzWmhiR2xrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0VnWW05dmJHVmhiaUJ2YmlCM2FHVjBhR1Z5SUhSb1pTQnphV2R1WVhSMWNtVWdhWE1nZEhKMVpTQnZjaUJ1YjNSY2JpQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0ZG1WeWFXWjVVbE5CSnl3Z2FYTjJZV3hwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHBjM1poYkdsa0tUdGNibHh1SUNBZ0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFhabGNtbG1lVkpUUVNjc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWlc1amNubHdkRUZGVXloclpYa3NJR1JoZEdFc0lHbDJLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJCUlZOclpYa29hMlY1S1M1MGFHVnVLR1oxYm1OMGFXOXVLR0ZsYzB0bGVTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVaVzVqY25sd2RDaGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMEZGVXkxRFFrTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMFJ2YmlkMElISmxMWFZ6WlNCcGJtbDBhV0ZzYVhwaGRHbHZiaUIyWldOMGIzSnpJVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMEZzZDJGNWN5Qm5aVzVsY21GMFpTQmhJRzVsZHlCcGRpQmxkbVZ5ZVNCMGFXMWxJSGx2ZFhJZ1pXNWpjbmx3ZENGY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhZNklHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdWelMyVjVMQ0F2TDJaeWIyMGdaMlZ1WlhKaGRHVkxaWGtnYjNJZ2FXMXdiM0owUzJWNUlHRmliM1psWEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmRYUm1PRVZ1WTI5a1pTaGtZWFJoS1NBdkwwRnljbUY1UW5WbVptVnlJRzltSUdSaGRHRWdlVzkxSUhkaGJuUWdkRzhnWlc1amNubHdkRnh1SUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR1Z1WTNKNWNIUmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QmhiaUJCY25KaGVVSjFabVpsY2lCamIyNTBZV2x1YVc1bklIUm9aU0JsYm1OeWVYQjBaV1FnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxbGJtTnllWEIwUVVWVEp5d2dibVYzSUZWcGJuUTRRWEp5WVhrb1pXNWpjbmx3ZEdWa0tTazdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h1WlhjZ1ZXbHVkRGhCY25KaGVTaGxibU55ZVhCMFpXUXBLVHRjYmx4dUlDQWdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxXVnVZM0o1Y0hSQlJWTW5MQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbklwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHUmxZM0o1Y0hSQlJWTW9hMlY1TENCa1lYUmhMQ0JwZGlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZhVzF3YjNKMFFVVlRhMlY1S0d0bGVTa3VkR2hsYmlobWRXNWpkR2x2YmloaFpYTkxaWGtwSUh0Y2JseHVJQ0FnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1SbFkzSjVjSFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkQlJWTXRRMEpESnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhZNklHbDJYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdWelMyVjVMQ0F2TDJaeWIyMGdaMlZ1WlhKaGRHVkxaWGtnYjNJZ2FXMXdiM0owUzJWNUlHRmliM1psWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoSUM4dlFYSnlZWGxDZFdabVpYSWdiMllnZEdobElHUmhkR0ZjYmlBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWhrWldOeWVYQjBaV1FwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCa1pXTnZaR1ZrUkdGMFlTQTlJRjkwYUdsekxsOTFkR1k0UkdWamIyUmxLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHUmxZM0o1Y0hSbFpDa3BPMXh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWtaV055ZVhCMFFVVlRKeXdnWkdWamIyUmxaRVJoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aR1ZqYjJSbFpFUmhkR0VwTzF4dVhHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaR1ZqY25sd2RFRkZVeWNzSUdWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dZM0psWVhSbGN5QmhJR2hoYzJnZ2RYTnBibWNnZEdobElFaE5RVU1nWVd4bmIzSnBkR2h0WEc0Z0lDb2dRSEJoY21GdElDQjdZbmwwWlVGeWNtRjVmU0FnSUNCclpYa2dJQ0FnSUNBZ2EyVjVJSFJ2SUdKbElIVnpaV1FnYVc0Z2RHaGxJR2h0WVdOY2JpQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJQ0FnSUNBZ1pHRjBZU0FnSUNBZ0lDQnBibVp2Y20xaGRHbHZiaUIwYnlCaVpTQm9ZWE5vWldSY2JpQWdLaUJBY21WMGRYSnVJQ0I3WW5sMFpVRnljbUY1ZlNBZ0lITnBaMjVoZEhWeVpTQWdjbVZ6ZFd4MGFXNW5JR2hoYzJoY2JpQWdLaTljYmlBZ2FHRnphRWhOUVVNb2EyVjVMQ0JrWVhSaEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmYVcxd2IzSjBTRTFCUTJ0bGVTaHJaWGtwTG5Sb1pXNG9ablZ1WTNScGIyNG9hRzFoWTB0bGVTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVjMmxuYmloY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZElUVUZESjF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQm9iV0ZqUzJWNUxDQXZMMlp5YjIwZ1oyVnVaWEpoZEdWTFpYa2diM0lnYVcxd2IzSjBTMlY1SUdGaWIzWmxYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOTFkR1k0Ulc1amIyUmxLR1JoZEdFcElDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ1pHRjBZU0I1YjNVZ2QyRnVkQ0IwYnlCemFXZHVYRzRnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jMmxuYm1GMGRYSmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV2hoYzJoSVRVRkRKeXdnYzJsbmJtRjBkWEpsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2Y21WMGRYSnVjeUJoYmlCQmNuSmhlVUoxWm1abGNpQmpiMjUwWVdsdWFXNW5JSFJvWlNCemFXZHVZWFIxY21WY2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkeUJWYVc1ME9FRnljbUY1S0hOcFoyNWhkSFZ5WlNrcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0YUdGemFFaE5RVU1uTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ2RtVnlhV1pwWlhNZ1lXNGdhR0Z6YUNCMWMybHVaeUIwYUdVZ1NFMUJReUJoYkdkdmNtbDBhRzFjYmlBZ0tpQkFjR0Z5WVcwZ0lIdGllWFJsUVhKeVlYbDlJQ0FnSUd0bGVTQWdJQ0FnSUNCclpYa2dkRzhnWW1VZ2RYTmxaQ0JwYmlCMGFHVWdhRzFoWTF4dUlDQXFJRUJ3WVhKaGJTQWdlM04wY21sdVozMGdJQ0FnSUNCa1lYUmhJQ0FnSUNBZ0lHbHVabTl5YldGMGFXOXVJSFJ2SUdKbElHaGhjMmhsWkNCMGJ5QmpiMjF3WVhKbFhHNGdJQ29nUUhCaGNtRnRJQ0I3WW5sMFpVRnljbUY1ZlNBZ2MybG5ibUYwZFhKbElDQWdhR0Z6YUNCMGJ5QmpiMjF3WVhKbElIZHBkR2dnZEdobElISmxZMlZwZG1Wa0lHUmhkR0ZjYmlBZ0tpQkFjbVYwZFhKdUlDQjdZbTl2YkdWaGJuMGdJQ0JwYzNaaGJHbGtJQ0FnSUNCaWIyOXNaV0Z1SUhOaGVXbHVaeUJwWmlCMGFHVWdaR0YwWVNCamIzSnlaWE53YjI1a2N5QjBieUIwYUdVZ2FHRnphQ0J5WldObGFYWmxaRnh1SUNBcUwxeHVJQ0IyWlhKcFpubElUVUZES0d0bGVTd2daR0YwWVN3Z2MybG5ibUYwZFhKbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmYVcxd2IzSjBTRTFCUTJ0bGVTaHJaWGtwTG5Sb1pXNG9ablZ1WTNScGIyNG9hRzFoWTB0bGVTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVkbVZ5YVdaNUtGeHVJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkSVRVRkRKMXh1SUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdhRzFoWTB0bGVTd2dMeTltY205dElHZGxibVZ5WVhSbFMyVjVJRzl5SUdsdGNHOXlkRXRsZVNCaFltOTJaVnh1SUNBZ0lDQWdJQ0FnSUhOcFoyNWhkSFZ5WlN3Z0x5OUJjbkpoZVVKMVptWmxjaUJ2WmlCMGFHVWdjMmxuYm1GMGRYSmxYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM1YwWmpoRmJtTnZaR1VvWkdGMFlTa2dMeTlCY25KaGVVSjFabVpsY2lCdlppQjBhR1VnWkdGMFlWeHVJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtHbHpkbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVNCaWIyOXNaV0Z1SUc5dUlIZG9aWFJvWlhJZ2RHaGxJSE5wWjI1aGRIVnlaU0JwY3lCMGNuVmxJRzl5SUc1dmRGeHVJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxMlpYSnBabmxJVFVGREp5d2dhWE4yWVd4cFpDazdYRzRnSUNBZ0lDQWdJQ0FnS0dsemRtRnNhV1FwSUQ4Z2NtVnpiMngyWlNocGMzWmhiR2xrS1NBNklISmxhbVZqZENocGMzWmhiR2xrS1R0Y2JseHVJQ0FnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkamNubHdkRzh0ZG1WeWFXWjVTRTFCUXljc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR2RsYm1WeVlYUmxjeUJoSUZKVFFTQndkV0pzYVdNdmNISnBkbUYwWlNCclpYa2djR0ZwY2lCM2FYUm9JR0VnYlc5a2RXeDFjeUJzWlc1bmRHZ2diMllnTWpBME9DQmlhWFJ6WEc0Z0lDb2dRSEpsZEhWeWJpQWdlMHBUVDA1OUlDQWdhMlY1VUdGcGNpQWdJQ0JxYzI5dUlHTnZiblJoYVc1cGJtY2dkR2hsSUhCMVlteHBZeUJoYm1RZ2NISnBkbUYwWlNCclpYbHpYRzRnSUNvdlhHNGdJR2RsYm1WeVlYUmxVbE5CUzJWNVVHRnBjaWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JyWlhsUVlXbHlJRDBnZTMwN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMbWRsYm1WeVlYUmxTMlY1S0Z4dUlDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQkxWQlRVeWNzWEc0Z0lDQWdJQ0FnSUcxdlpIVnNkWE5NWlc1bmRHZzZJREl3TkRnc0lDOHZZMkZ1SUdKbElERXdNalFzSURJd05EZ3NJRzl5SURRd09UWmNiaUFnSUNBZ0lDQWdjSFZpYkdsalJYaHdiMjVsYm5RNklHNWxkeUJWYVc1ME9FRnljbUY1S0Zzd2VEQXhMQ0F3ZURBd0xDQXdlREF4WFNrc1hHNGdJQ0FnSUNBZ0lHaGhjMmc2SUh0dVlXMWxPaUFuVTBoQkxUSTFOaWQ5SUM4dlkyRnVJR0psSUNkVFNFRXRNU2NzSUNkVFNFRXRNalUySnl3Z0oxTklRUzB6T0RRbkxDQnZjaUFuVTBoQkxUVXhNaWRjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0IwY25WbExDQXZMM2RvWlhSb1pYSWdkR2hsSUd0bGVTQnBjeUJsZUhSeVlXTjBZV0pzWlNBb2FTNWxMaUJqWVc0Z1ltVWdkWE5sWkNCcGJpQmxlSEJ2Y25STFpYa3BYRzRnSUNBZ0lDQmJKM05wWjI0bkxDQW5kbVZ5YVdaNUoxMGdMeTlqWVc0Z1ltVWdZVzU1SUdOdmJXSnBibUYwYVc5dUlHOW1JQ2R6YVdkdUp5QmhibVFnSjNabGNtbG1lU2RjYmx4dUlDQWdJQ0FnS1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdZU0JyWlhsd1lXbHlJRzlpYW1WamRGeHVJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0d0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNWxlSEJ2Y25STFpYa29YRzRnSUNBZ0lDQWdJQ0FnSjNOd2Eya25MQ0F2TDJOaGJpQmlaU0FuYW5kckp5QW9jSFZpYkdsaklHOXlJSEJ5YVhaaGRHVXBMQ0FuYzNCcmFTY2dLSEIxWW14cFl5QnZibXg1S1N3Z2IzSWdKM0JyWTNNNEp5QW9jSEpwZG1GMFpTQnZibXg1S1Z4dUlDQWdJQ0FnSUNBZ0lHdGxlUzV3ZFdKc2FXTkxaWGtnTHk5allXNGdZbVVnWVNCd2RXSnNhV05MWlhrZ2IzSWdjSEpwZG1GMFpVdGxlU3dnWVhNZ2JHOXVaeUJoY3lCbGVIUnlZV04wWVdKc1pTQjNZWE1nZEhKMVpWeHVJQ0FnSUNBZ0lDQXBMblJvWlc0b1puVnVZM1JwYjI0b2NIVmliR2xqUzJWNUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUhSb1pTQmxlSEJ2Y25SbFpDQnJaWGtnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJR3RsZVZCaGFYSXVjSFZpYkdsaklDQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtIQjFZbXhwWTB0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR055ZVhCMGJ5NXpkV0owYkdVdVpYaHdiM0owUzJWNUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNCclkzTTRKeXdnTHk5allXNGdZbVVnSjJwM2F5Y2dLSEIxWW14cFl5QnZjaUJ3Y21sMllYUmxLU3dnSjNOd2Eya25JQ2h3ZFdKc2FXTWdiMjVzZVNrc0lHOXlJQ2R3YTJOek9DY2dLSEJ5YVhaaGRHVWdiMjVzZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVM1d2NtbDJZWFJsUzJWNUlDOHZZMkZ1SUdKbElHRWdjSFZpYkdsalMyVjVJRzl5SUhCeWFYWmhkR1ZMWlhrc0lHRnpJR3h2Ym1jZ1lYTWdaWGgwY21GamRHRmliR1VnZDJGeklIUnlkV1ZjYmlBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtIQnlhWFpoZEdWTFpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCclpYbFFZV2x5TG5CeWFYWmhkR1VnSUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvY0hKcGRtRjBaVXRsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdkbGJtVnlZWFJsVWxOQlMyVjVVR0ZwY2ljc0lHdGxlVkJoYVhJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hyWlhsUVlXbHlLVHRjYmx4dUlDQWdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWhsY25JcE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1IyVnVaWEpoZEdWeklHRWdNVEk0SUdKcGRDQnlZVzVrYjIwZ2RtRnNkV1V1WEc0Z0lDb2dRSEpsZEhWeWJpQjdZbmwwWlVGeWNtRjVmU0FnWVhKeVlYa2dJQ0FnY21GdVpHOXRJSFpoYkhWbFhHNGdJQ292WEc0Z0lHZGxibVZ5WVhSbFNWWW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0JoY25KaGVTQTlJRzVsZHlBZ1ZXbHVkRGhCY25KaGVTZ3hOaWs3WEc0Z0lDQWdZM0o1Y0hSdkxtZGxkRkpoYm1SdmJWWmhiSFZsY3loaGNuSmhlU2s3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZWEp5WVhrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkhaVzVsY21GMFpYTWdZU0F5TlRZZ1ltbDBJSEpoYm1SdmJTQjJZV3gxWlM0Z016SWdZbWwwY3lCaGNtVWdaWGgwY21GMFpXUWdabkp2YlNCMGFHVWdiV0ZqYUdsdVpTQjBhVzFsTEZ4dUlDQXFJSFJvWlNCeVpXMWhhVzVwYm1jZ1lYSmxJR2RsYm1WeVlYUmxaQ0J5WVc1a2IyMXNlVnh1SUNBcUlFQnlaWFIxY200Z2UySjVkR1ZCY25KaGVYMGdJR0Z5Y21GNUlDQWdJSEpoYm1SdmJTQjJZV3gxWlZ4dUlDQXFMMXh1SUNCblpXNWxjbUYwWlZKaGJtUnZiU2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdGeWNtRjVJRDBnYm1WM0lDQlZhVzUwT0VGeWNtRjVLRE15S1R0Y2JpQWdJQ0JqY25sd2RHOHVaMlYwVW1GdVpHOXRWbUZzZFdWektHRnljbUY1S1R0Y2JseHVJQ0FnSUd4bGRDQmtZWFJsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNCc1pYUWdaR0YwWlVWdVkyOWtaV1FnUFNCZmRHaHBjeTVmZFhSbU9FVnVZMjlrWlNoa1lYUmxLVHRjYmx4dUlDQWdJQzh2WlhoMGNtRmpkQ0IwYUdVZ2JHVmhjM1FnYzJsbmJtbG1hV05oYm5RZ05DQmllWFJsY3lCcGJpQjBhR1VnWkdGMFpWeHVJQ0FnSUd4bGRDQm1hVzVoYkVSaGRHVWdQU0JrWVhSbFJXNWpiMlJsWkM1emJHbGpaU2hrWVhSbFJXNWpiMlJsWkM1c1pXNW5kR2dnTFNBMExDQmtZWFJsUlc1amIyUmxaQzVzWlc1bmRHZ3BPMXh1WEc0Z0lDQWdMeThnWVdSa0lHbHVJSFJvWlNCbWFYSnpkQ0EwSUdKNWRHVnpJRzltSUhSb1pTQmhjbkpoZVNCMGFHVWdZbmwwWlhNZ1pYaDBjbUZqZEdWa0lIQnlaWFpwYjNWemJIazdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQTBPeUJwS3lzcElIc2dZWEp5WVhsYmFWMGdQU0JtYVc1aGJFUmhkR1ZiYVYwN0lIMWNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJuWlc1bGNtRjBaWE1nWVNCd2NtVnRZWE4wWlhJZ2MyVmpjbVYwSUNoUVRWTXBJRzltSURRNElHSjVkR1Z6SUNnek9EUWdZbWwwY3lrZ2NtRnVaRzl0YkhsY2JpQWdLaUJBY21WMGRYSnVJSHRpZVhSbFFYSnlZWGw5SUNCaGNuSmhlU0FnSUNCd2NtVnRZWE4wWlhJZ2MyVmpjbVYwSUd0bGVWeHVJQ0FxTDF4dUlDQm5aVzVsY21GMFpWQk5VeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdGeWNtRjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29ORGdwTzF4dUlDQWdJR055ZVhCMGJ5NW5aWFJTWVc1a2IyMVdZV3gxWlhNb1lYSnlZWGtwTzF4dUlDQWdJSEpsZEhWeWJpQmhjbkpoZVR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHZGxibVZ5WVhSbGN5QmhJRzFoYzNSbGNrdGxlU0J6WldOeVpYUWdLRkJOVXlrZ2IyWWdORGdnWW5sMFpYTWdLRE00TkNCaWFYUnpLU0IxYzJsdVp5QjBhR1VnY0hKbGJXRnpkR1Z5SUhObFkzSmxkQ0JoYm1SY2JpQWdLaUIwZDI4Z2NtRnVaRzl0YzF4dUlDQXFJRUJ5WlhSMWNtNGdlMko1ZEdWQmNuSmhlWDBnSUdGeWNtRjVJQ0FnSUcxaGMzUmxjaUJ6WldOeVpYUWdhMlY1SUhkcGRHZ2dORGdnWW5sMFpYTmNiaUFnS2k5Y2JpQWdaMlZ1WlhKaGRHVk5ZWE4wWlhKVFpXTnlaWFFvYUcxaFkwdGxlU3dnWkdGMFlTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCc1pYUWdhMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvTkRncE8xeHVJQ0FnSUNBZ2JHVjBJSE5sWldRZ1BTQmtZWFJoTzF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmWkdsblpYTjBLR2h0WVdOTFpYa3BMblJvWlc0b0tHUnBaMlZ6ZEdWa1MyVjVLU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFHRnphRWhOUVVNb1pHbG5aWE4wWldSTFpYa3NJSE5sWldRcExuUm9aVzRvWm5WdVkzUnBiMjRvYTJWNWNHRnlkREFwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2WTI5d2VTQjBhR1VnWm1seWMzUWdNeklnWW5sMFpYTWdhVzUwYnlCMGFHVWdhMlY1WEc0Z0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQXpNanNnYVNzcktTQjdJR3RsZVZ0cFhTQTlJR3RsZVhCaGNuUXdXMmxkT3lCOVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1oaGMyaElUVUZES0dScFoyVnpkR1ZrUzJWNUxDQnpaV1ZrSUNzZ2EyVjVjR0Z5ZERBcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9hMlY1Y0dGeWRERXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZZMjl3ZVNCMGFHVWdabWx5YzNRZ01UWWdZbmwwWlhNZ2RHOGdkR2hsSUd0bGVTQnlaVzFoYVc1cGJtY2dNVFlnWW5sMFpYTmNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SURFMk95QnBLeXNwSUhzZ2EyVjVXMmtnS3lBek1sMGdQU0JyWlhsd1lYSjBNVnRwWFRzZ2ZWeHVJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxblpXNWxjbUYwWlUxaGMzUmxjbE5sWTNKbGRDY3NJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHJaWGtwTzF4dVhHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaMlZ1WlhKaGRHVk5ZWE4wWlhKVFpXTnlaWFFuTENCbGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQm5aVzVsY21GMFpYTWdZbTkwYUNCMWMyVnljeUJOUVVNZ1lXNWtJR1Z1WTNKNWNIUnBiMjRnYTJWNWN5NGdaMlZ1WlhKaGRHVWdZWE1nYjNWMGNIVjBJR0Z1SUdGeWNtRjVYRzRnSUNvZ2QybDBhQ0EwSUdKNWRHVkJjbkpoZVNCbFlXTm9JSGRwZEdnZ016SWdZbmwwWlhOY2JpQWdLaUJBY0dGeVlXMGdJSHRpZVhSbFFYSnlZWGw5SUNBZ0lDQWdJQ0J6WldOeVpYUWdJQ0FnSUNBZ2MyVmpjbVYwSUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUVoTlFVTWdablZ1WTNScGIyNWNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNCa1lYUmhJQ0FnSUNBZ0lDQWdhVzVtYjNKdFlYUnBiMjRnZEc4Z1ltVWdkWE5sWkNCaGN5QnpaV1ZrWEc0Z0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhrOFlubDBaVUZ5Y21GNVBuMGdhMlY1SUNBZ0lDQWdJQ0FnSUdGeWNtRjVJSGRwZEdnZ2RHaGxJR2x1Wm05eWJXRjBhVzl1SUhSdklHZGxibVZ5WVhSbElHdGxlWE5jYmlBZ0tpOWNiaUFnWjJWdVpYSmhkR1ZMWlhsektHaHRZV05MWlhrc0lHUmhkR0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JzWlhRZ2EyVjVJRDBnVzEwN1hHNGdJQ0FnSUNCc1pYUWdjMlZsWkNBOUlHUmhkR0U3WEc1Y2JpQWdJQ0FnSUM4dklHbDBaWEpoZEdVZ05DQjBhVzFsY3lCMGJ5QnZZblJoYVc0Z1lTQXhNREkwSUd0bGVTQnphWHBsWEc0Z0lDQWdJQ0JmZEdocGN5NW9ZWE5vU0UxQlF5aG9iV0ZqUzJWNUxDQnpaV1ZrS1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVhCaGNuUXdLU0I3WEc0Z0lDQWdJQ0FnSUd0bGVTNXdkWE5vS0d0bGVYQmhjblF3S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbWhoYzJoSVRVRkRLR2h0WVdOTFpYa3NJSE5sWldRZ0t5QnJaWGx3WVhKME1DazdYRzVjYmlBZ0lDQWdJSDBwTG5Sb1pXNG9ablZ1WTNScGIyNG9hMlY1Y0dGeWRERXBJSHRjYmlBZ0lDQWdJQ0FnYTJWNUxuQjFjMmdvYTJWNWNHRnlkREVwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVhR0Z6YUVoTlFVTW9hRzFoWTB0bGVTd2djMlZsWkNBcklHdGxlWEJoY25ReEtUdGNibHh1SUNBZ0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHJaWGx3WVhKME1pa2dlMXh1SUNBZ0lDQWdJQ0JyWlhrdWNIVnphQ2hyWlhsd1lYSjBNaWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NW9ZWE5vU0UxQlF5aG9iV0ZqUzJWNUxDQnpaV1ZrSUNzZ2EyVjVjR0Z5ZERJcE8xeHVYRzRnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlWEJoY25RektTQjdYRzRnSUNBZ0lDQWdJR3RsZVM1d2RYTm9LR3RsZVhCaGNuUXpLVHRjYmx4dUlDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaMlZ1WlhKaGRHVkxaWGx6Snl3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hyWlhrcE8xeHVYRzRnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV2RsYm1WeVlYUmxTMlY1Y3ljc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb2FHMWhZMHRsZVN3Z1pHRjBZU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmFXMXdiM0owVWxOQmMybG5ia3RsZVNod2NtbDJTMlY1S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWFXMXdiM0owUzJWNUtGeHVJQ0FnSUNBZ0lDQWdJQ2R3YTJOek9DY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEc0Z0lDQWdJQ0FnSUNBZ2NISnBka3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQjdJQ0FnTHk5MGFHVnpaU0JoY21VZ2RHaGxJR0ZzWjI5eWFYUm9iU0J2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQlUxTkJMVkJMUTFNeExYWXhYelVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6YURvZ2UyNWhiV1U2SUNkVFNFRXRNalUySjMwZ0x5OWpZVzRnWW1VZ0oxTklRUzB4Snl3Z0oxTklRUzB5TlRZbkxDQW5VMGhCTFRNNE5DY3NJRzl5SUNkVFNFRXROVEV5SjF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZEhKMVpTd2dMeTkzYUdWMGFHVnlJSFJvWlNCclpYa2dhWE1nWlhoMGNtRmpkR0ZpYkdVZ0tHa3VaUzRnWTJGdUlHSmxJSFZ6WldRZ2FXNGdaWGh3YjNKMFMyVjVLVnh1SUNBZ0lDQWdJQ0FnSUZzbmMybG5iaWRkSUM4dkozWmxjbWxtZVNjZ1ptOXlJSEIxWW14cFl5QnJaWGtnYVcxd2IzSjBMQ0FuYzJsbmJpY2dabTl5SUhCeWFYWmhkR1VnYTJWNUlHbHRjRzl5ZEhOY2JpQWdJQ0FnSUNsY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEJ5YVhaaGRHVkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0x5OXlaWFIxY201eklHRWdjSFZpYkdsalMyVjVJQ2h2Y2lCd2NtbDJZWFJsUzJWNUlHbG1JSGx2ZFNCaGNtVWdhVzF3YjNKMGFXNW5JR0VnY0hKcGRtRjBaU0JyWlhrcFhHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJOeWVYQjBieTFmYVcxd2IzSjBVbE5CYzJsbmJrdGxlU2NzSUhCeWFYWmhkR1ZMWlhrcE8xeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtIQnlhWFpoZEdWTFpYa3BPMXh1WEc0Z0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblkzSjVjSFJ2TFY5cGJYQnZjblJTVTBGemFXZHVTMlY1Snl3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjlwYlhCdmNuUlNVMEYyWlhKcFpubExaWGtvY0hWaVMyVjVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1YVcxd2IzSjBTMlY1S0Z4dUlDQWdJQ0FnSUNBZ0lDZHpjR3RwSnl3Z0x5OWpZVzRnWW1VZ0oycDNheWNnS0hCMVlteHBZeUJ2Y2lCd2NtbDJZWFJsS1N3Z0ozTndhMmtuSUNod2RXSnNhV01nYjI1c2VTa3NJRzl5SUNkd2EyTnpPQ2NnS0hCeWFYWmhkR1VnYjI1c2VTbGNiaUFnSUNBZ0lDQWdJQ0J3ZFdKTFpYa3NYRzRnSUNBZ0lDQWdJQ0FnZXlBZ0lDOHZkR2hsYzJVZ1lYSmxJSFJvWlNCaGJHZHZjbWwwYUcwZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0oxSlRRVk5UUVMxUVMwTlRNUzEyTVY4MUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGMyZzZJSHR1WVcxbE9pQW5VMGhCTFRJMU5pZDlJQzh2WTJGdUlHSmxJQ2RUU0VFdE1TY3NJQ2RUU0VFdE1qVTJKeXdnSjFOSVFTMHpPRFFuTENCdmNpQW5VMGhCTFRVeE1pZGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lIUnlkV1VzSUM4dmQyaGxkR2hsY2lCMGFHVWdhMlY1SUdseklHVjRkSEpoWTNSaFlteGxJQ2hwTG1VdUlHTmhiaUJpWlNCMWMyVmtJR2x1SUdWNGNHOXlkRXRsZVNsY2JpQWdJQ0FnSUNBZ0lDQmJKM1psY21sbWVTZGRJQzh2SjNabGNtbG1lU2NnWm05eUlIQjFZbXhwWXlCclpYa2dhVzF3YjNKMExDQW5jMmxuYmljZ1ptOXlJSEJ5YVhaaGRHVWdhMlY1SUdsdGNHOXlkSE5jYmlBZ0lDQWdJQ2xjYmlBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtIQjFZbXhwWTB0bGVTa2dlMXh1SUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVNCd2RXSnNhV05MWlhrZ0tHOXlJSEJ5YVhaaGRHVkxaWGtnYVdZZ2VXOTFJR0Z5WlNCcGJYQnZjblJwYm1jZ1lTQndjbWwyWVhSbElHdGxlU2xjYmlBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRjJaWEpwWm5sTFpYa25MQ0J3ZFdKc2FXTkxaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hCMVlteHBZMHRsZVNrN1hHNWNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RqY25sd2RHOHRYMmx0Y0c5eWRGSlRRWFpsY21sbWVVdGxlU2NzSUdWeWNpazdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbklwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZhVzF3YjNKMFVsTkJaVzVqY25sd2RFdGxlU2h3ZFdKTFpYa3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVwYlhCdmNuUkxaWGtvWEc0Z0lDQWdJQ0FnSUNBZ0ozTndhMmtuTENBdkwyTmhiaUJpWlNBbmFuZHJKeUFvY0hWaWJHbGpJRzl5SUhCeWFYWmhkR1VwTENBbmMzQnJhU2NnS0hCMVlteHBZeUJ2Ym14NUtTd2diM0lnSjNCclkzTTRKeUFvY0hKcGRtRjBaU0J2Ym14NUtWeHVJQ0FnSUNBZ0lDQWdJSEIxWWt0bGVTeGNiaUFnSUNBZ0lDQWdJQ0I3SUNBZ0x5OTBhR1Z6WlNCaGNtVWdkR2hsSUdGc1oyOXlhWFJvYlNCdmNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJMVTlCUlZBbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGemFEb2dlMjVoYldVNklDZFRTRUV0TWpVMkozMGdMeTlqWVc0Z1ltVWdKMU5JUVMweEp5d2dKMU5JUVMweU5UWW5MQ0FuVTBoQkxUTTROQ2NzSUc5eUlDZFRTRUV0TlRFeUoxeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lGc25aVzVqY25sd2RDZGRJQzh2SjJWdVkzSjVjSFFuSUc5eUlDZDNjbUZ3UzJWNUp5Qm1iM0lnY0hWaWJHbGpJR3RsZVNCcGJYQnZjblFnYjNKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlka1pXTnllWEIwSnlCdmNpQW5kVzUzY21Gd1MyVjVKeUJtYjNJZ2NISnBkbUYwWlNCclpYa2dhVzF3YjNKMGMxeHVJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvY0hWaWJHbGpTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QmhJSEIxWW14cFkwdGxlU0FvYjNJZ2NISnBkbUYwWlV0bGVTQnBaaUI1YjNVZ1lYSmxJR2x0Y0c5eWRHbHVaeUJoSUhCeWFYWmhkR1VnYTJWNUtWeHVJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WDJsdGNHOXlkRkpUUVdWdVkzSjVjSFJMWlhrbkxDQndkV0pzYVdOTFpYa3BPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEIxWW14cFkwdGxlU2s3WEc1Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZGpjbmx3ZEc4dFgybHRjRzl5ZEZKVFFXVnVZM0o1Y0hSTFpYa25MQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gybHRjRzl5ZEZKVFFXUmxZM0o1Y0hSTFpYa29jSEpwZGt0bGVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMbWx0Y0c5eWRFdGxlU2hjYmlBZ0lDQWdJQ0FnSUNBbmNHdGpjemduTENBdkwyTmhiaUJpWlNBbmFuZHJKeUFvY0hWaWJHbGpJRzl5SUhCeWFYWmhkR1VwTENBbmMzQnJhU2NnS0hCMVlteHBZeUJ2Ym14NUtTd2diM0lnSjNCclkzTTRKeUFvY0hKcGRtRjBaU0J2Ym14NUtWeHVJQ0FnSUNBZ0lDQWdJSEJ5YVhaTFpYa3NYRzRnSUNBZ0lDQWdJQ0FnZXlBZ0lDOHZkR2hsYzJVZ1lYSmxJSFJvWlNCaGJHZHZjbWwwYUcwZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ0oxSlRRUzFQUVVWUUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGMyZzZJSHR1WVcxbE9pQW5VMGhCTFRJMU5pZDlJQzh2WTJGdUlHSmxJQ2RUU0VFdE1TY3NJQ2RUU0VFdE1qVTJKeXdnSjFOSVFTMHpPRFFuTENCdmNpQW5VMGhCTFRVeE1pZGNiaUFnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lIUnlkV1VzSUM4dmQyaGxkR2hsY2lCMGFHVWdhMlY1SUdseklHVjRkSEpoWTNSaFlteGxJQ2hwTG1VdUlHTmhiaUJpWlNCMWMyVmtJR2x1SUdWNGNHOXlkRXRsZVNsY2JpQWdJQ0FnSUNBZ0lDQmJKMlJsWTNKNWNIUW5YU0F2THlkbGJtTnllWEIwSnlCdmNpQW5kM0poY0V0bGVTY2dabTl5SUhCMVlteHBZeUJyWlhrZ2FXMXdiM0owSUc5eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4blpHVmpjbmx3ZENjZ2IzSWdKM1Z1ZDNKaGNFdGxlU2NnWm05eUlIQnlhWFpoZEdVZ2EyVjVJR2x0Y0c5eWRITmNiaUFnSUNBZ0lDbGNiaUFnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hCeWFYWmhkR1ZMWlhrcElIdGNiaUFnSUNBZ0lDQWdMeTl5WlhSMWNtNXpJR0VnY0hWaWJHbGpTMlY1SUNodmNpQndjbWwyWVhSbFMyVjVJR2xtSUhsdmRTQmhjbVVnYVcxd2IzSjBhVzVuSUdFZ2NISnBkbUYwWlNCclpYa3BYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxZmFXMXdiM0owVWxOQlpHVmpjbmx3ZEV0bGVTY3NJSEJ5YVhaaGRHVkxaWGtwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hCeWFYWmhkR1ZMWlhrcE8xeHVYRzRnSUNBZ0lDQjlLUzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduWTNKNWNIUnZMVjlwYlhCdmNuUlNVMEZrWldOeWVYQjBTMlY1Snl3Z1pYSnlLVHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR052Ym1OaGRGQk5VM2RwZEdoU1lXNWtiMjF6S0hCdGN5d2dkRzlTWVc1a2IyMHNJR1p5YjIxU1lXNWtiMjBwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdacGJtRnNTMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvY0cxekxteGxibWQwYUNBcklIUnZVbUZ1Wkc5dExteGxibWQwYUNBcklHWnliMjFTWVc1a2IyMHViR1Z1WjNSb0tUdGNibHh1SUNBZ0lDOHZJR0ZrWkNCUWNtVnRZWE4wWlhKTFpYbGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIQnRjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1ptbHVZV3hMWlhsYmFWMGdQU0J3YlhOYmFWMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OWhaR1FnZEc4Z2NtRnVaRzl0WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IwYjFKaGJtUnZiUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ1ptbHVZV3hMWlhsYmFTQXJJSEJ0Y3k1c1pXNW5kR2hkSUQwZ2NHMXpXMmxkTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2WVdSa0lHWnliMjBnY21GdVpHOXRYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQm1jbTl0VW1GdVpHOXRMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCbWFXNWhiRXRsZVZ0cElDc2djRzF6TG14bGJtZDBhQ0FySUhSdlVtRnVaRzl0TG14bGJtZDBhRjBnUFNCd2JYTmJhVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHWnBibUZzUzJWNU8xeHVJQ0I5WEc1Y2JpQWdYMmRsYm1WeVlYUmxNalUyWW1sMFMyVjVLQ2tnZTF4dUlDQWdJR3hsZENCaGNuSmhlU0E5SUc1bGR5QWdWV2x1ZERoQmNuSmhlU2d6TWlrN1hHNGdJQ0FnWTNKNWNIUnZMbWRsZEZKaGJtUnZiVlpoYkhWbGN5aGhjbkpoZVNrN1hHNWNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJwYlhCdmNuUnpJSFJvWlNCelpXTnlaWFFnZEc4Z2RHaGxJRWhOUVVNZ1puVnVZM1JwYjI1Y2JpQWdLaUJBY0dGeVlXMGdJSHRpZVhSbFFYSnlZWGw5SUNBZ1lYSnlZWGxDZFdabVpYSWdJQ0FnSUdKNWRHVnpJSFJ2SUdsdGNHOXlkQ0JoY3lCclpYbGNiaUFnS2lCQWNtVjBkWEp1SUh0S1UwOU9mU0FnSUNBZ0lDQnJaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlU0J5WldGa2VTQjBieUJpWlNCMWMyVmtJR2x1SUhSb1pTQklUVUZESUdOeWVYQjBiMmR5WVhCb2FXTWdablZ1WTNScGIyNWNiaUFnS2k5Y2JpQWdYMmx0Y0c5eWRFaE5RVU5yWlhrb1lYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZlpHbG5aWE4wS0dGeWNtRjVRblZtWm1WeUtTNTBhR1Z1S0NoclpYa3BJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1sdGNHOXlkRXRsZVNoY2JpQWdJQ0FnSUNBZ0ozSmhkeWNzSUM4dlkyRnVJR0psSUNkcWQyc25JRzl5SUNkeVlYY25YRzRnSUNBZ0lDQWdJR3RsZVN4Y2JpQWdJQ0FnSUNBZ2V5QWdJQzh2ZEdocGN5QnBjeUIwYUdVZ1lXeG5iM0pwZEdodElHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblNFMUJReWNzWEc0Z0lDQWdJQ0FnSUNBZ2FHRnphRG9nZTI1aGJXVTZJQ2RUU0VFdE1qVTJKMzBzSUM4dlkyRnVJR0psSUNkVFNFRXRNU2NzSUNkVFNFRXRNalUySnl3Z0oxTklRUzB6T0RRbkxDQnZjaUFuVTBoQkxUVXhNaWRjYmlBZ0lDQWdJQ0FnSUNCc1pXNW5kR2c2SURJMU5pQXZMMjl3ZEdsdmJtRnNMQ0JwWmlCNWIzVWdkMkZ1ZENCNWIzVnlJR3RsZVNCc1pXNW5kR2dnZEc4Z1pHbG1abVZ5SUdaeWIyMGdkR2hsSUdoaGMyZ2dablZ1WTNScGIyNG5jeUJpYkc5amF5QnNaVzVuZEdoY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkSEoxWlN3Z0x5OTNhR1YwYUdWeUlIUm9aU0JyWlhrZ2FYTWdaWGgwY21GamRHRmliR1VnS0drdVpTNGdZMkZ1SUdKbElIVnpaV1FnYVc0Z1pYaHdiM0owUzJWNUtWeHVJQ0FnSUNBZ0lDQmJKM05wWjI0bkxDQW5kbVZ5YVdaNUoxMGdMeTlqWVc0Z1ltVWdZVzU1SUdOdmJXSnBibUYwYVc5dUlHOW1JQ2R6YVdkdUp5QmhibVFnSjNabGNtbG1lU2RjYmlBZ0lDQWdJQ0FnS1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2Y21WMGRYSnVjeUIwYUdVZ2MzbHRiV1YwY21saklHdGxlVnh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWZhVzF3YjNKMFNFMUJRMnRsZVNjc0lHdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoclpYa3BPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZlpHbG5aWE4wS0haaGJIVmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1WkdsblpYTjBLRnh1SUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZFRTRUV0TWpVMkoxeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnTHk5VWFHVWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5Qm9ZWE5vSUdGeklHRnVJRUZ5Y21GNVFuVm1abVZ5WEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaG9ZWE5vS1NCN1hHNGdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QjBhR1VnYUdGemFDQmhjeUJoYmlCQmNuSmhlVUoxWm1abGNseHVJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WkdsblpYTjBKeXdnYm1WM0lGVnBiblE0UVhKeVlYa29hR0Z6YUNrcE8xeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkeUJWYVc1ME9FRnljbUY1S0doaGMyZ3BLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1WTJGMFkyZ29ablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeUtUdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMmx0Y0c5eWRFRkZVMnRsZVNoaGNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1YVcxd2IzSjBTMlY1S0Z4dUlDQWdJQ0FnSUNBZ0lDZHlZWGNuTENBdkwyTmhiaUJpWlNBbmFuZHJKeUJ2Y2lBbmNtRjNKMXh1SUNBZ0lDQWdJQ0FnSUdGeWNtRjVRblZtWm1WeUxGeHVJQ0FnSUNBZ0lDQWdJSHNnSUNBdkwzUm9hWE1nYVhNZ2RHaGxJR0ZzWjI5eWFYUm9iU0J2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuUVVWVExVTkNReWRjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJSFJ5ZFdVc0lDOHZkMmhsZEdobGNpQjBhR1VnYTJWNUlHbHpJR1Y0ZEhKaFkzUmhZbXhsSUNocExtVXVJR05oYmlCaVpTQjFjMlZrSUdsdUlHVjRjRzl5ZEV0bGVTbGNiaUFnSUNBZ0lDQWdJQ0JiSjJWdVkzSjVjSFFuTENBblpHVmpjbmx3ZENkZElDOHZZMkZ1SUdKbElDZGxibU55ZVhCMEp5d2dKMlJsWTNKNWNIUW5MQ0FuZDNKaGNFdGxlU2NzSUc5eUlDZDFibmR5WVhCTFpYa25YRzRnSUNBZ0lDQXBYRzRnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2YmloclpYa3BJSHRjYmlBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUhSb1pTQnplVzF0WlhSeWFXTWdhMlY1WEc0Z0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MXBiWEJ2Y25SQlJWTnJaWGtuTENCclpYa3BPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR3RsZVNrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZGpjbmx3ZEc4dGFXMXdiM0owUVVWVGEyVjVKeXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lGOTFkR1k0Ulc1amIyUmxLSE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZSbGVIUkZibU52WkdWeUtDZDFkR1l0T0NjcExtVnVZMjlrWlNoektUdGNiaUFnZlZ4dVhHNGdJRjkxZEdZNFJHVmpiMlJsS0hNcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGUmxlSFJFWldOdlpHVnlLQ2QxZEdZdE9DY3BMbVJsWTI5a1pTaHpLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JEY25sd2RHODdYRzRpTENJdktpcGNiaW9nVkdobElFbGtaVzUwYVhSNUlFUmhkR0VnVFc5a1pXd2dhWE1nZFhObFpDQjBieUJ0YjJSbGJDQjBhR1VnY21WVVNFbE9TeUJWYzJWeUlHVnVkR2wwZVM0Z1ZHaGxJRWxrWlc1MGFYUjVJR1JoZEdFZ2JXOWtaV3dnYVhNZ2FHRnVaR3hsWkNCaWVTQkpaR1Z1ZEdsMGVTQk5ZVzVoWjJWdFpXNTBJR1oxYm1OMGFXOXVZV3hwZEhrdVhHNHFYRzRxTDF4dVkyeGhjM01nU1dSbGJuUnBkSGtnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0dkMWFXUXNJSFI1Y0dVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVaM1ZwWkNBOUlHZDFhV1E3WEc0Z0lDQWdYM1JvYVhNdWRIbHdaU0E5SUhSNWNHVTdYRzRnSUNBZ1gzUm9hWE11YVdSbGJuUnBabWxsY25OTWFYTjBJRDBnZTMwN1hHNWNiaUFnZlZ4dVhHNGdJR0ZrWkVsa1pXNTBhWFI1S0dsa1pXNTBhV1pwWlhJcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCcFpHVnVkR2wwZVVsdVptOXliV0YwYVc5dUlEMGdlMXh1SUNBZ0lDQWdhV1JCYzNObGNuUnBiMjQ2SUNjbkxGeHVJQ0FnSUNBZ2MyVnlkbWxqWlVGa1pISmxjM002SUNjbkxGeHVJQ0FnSUNBZ1lYVjBhR1Z1ZEdsallYUnBiMjVFWVhSaE9pQW5KeXhjYmlBZ0lDQWdJR0YxZEdodmNtbHpZWFJwYjI1RVlYUmhPaUFuSnl4Y2JpQWdJQ0FnSUhWelpYSlFjbTltYVd4bE9pQW5KMXh1SUNBZ0lIMDdYRzRnSUNBZ1gzUm9hWE11YVdSbGJuUnBabWxsY25OTWFYTjBXMmxrWlc1MGFXWnBaWEpkSUQwZ2FXUmxiblJwZEhsSmJtWnZjbTFoZEdsdmJqdGNiaUFnZlZ4dVhHNGdJR0ZrWkVsa1FYTnpaWEowYVc5dUtHbGtaVzUwYVdacFpYSXNJR0Z6YzJWeWRHbHZiaXdnYVdSd0xDQnpZMjl3WlNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2JtVjNTV1JCYzNObGNuUnBiMjRnUFNCdVpYY2dTV1JCYzNObGNuUnBiMjRvWVhOelpYSjBhVzl1TENCcFpIQXNJSE5qYjNCbEtUdGNibHh1SUNBZ0lGOTBhR2x6TG1sa1FYTnpaWEowYVc5dVRHbHpkQzV3ZFhOb0tHNWxkMGxrUVhOelpYSjBhVzl1S1R0Y2JpQWdmVnh1ZlZ4dVhHNWpiR0Z6Y3lCSlpFRnpjMlZ5ZEdsdmJpQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9ZWE56WlhKMGFXOXVMQ0JwWkhBc0lITmpiM0JsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxtRnpjMlZ5ZEdsdmJpQTlJR0Z6YzJWeWRHbHZianRjYmlBZ0lDQmZkR2hwY3k1cFpIQWdQU0JwWkhBN1hHNGdJQ0FnWDNSb2FYTXVjMk52Y0dVZ1BTQnpZMjl3WlR0Y2JpQWdmVnh1WEc1OVhHNWNibU5zWVhOeklFbGtWbUZzYVdSaGRHbHZiaUI3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYVdSbGJuUnBkSGtzSUdOdmJuUmxiblJ6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1cFpHVnVkR2wwZVNBOUlHbGtaVzUwYVhSNU8xeHVJQ0FnSUY5MGFHbHpMbU52Ym5SbGJuUnpJRDBnWTI5dWRHVnVkSE03WEc0Z0lIMWNibHh1SUNCMllXeHBaR0YwWlhNb2FXUmxiblJwZEhrc0lHTnZiblJsYm5SektTQjdYRzRnSUNBZ0x5OVVUMFJQSUdsdGNHeGxiV1Z1ZENCMGFHVWdiRzluYVdOY2JseHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFbGtaVzUwYVhSNU8xeHVJaXdpWEc1cGJYQnZjblFnZTJScGRtbGtaVlZTVEN3Z1oyVjBWWE5sY2xWU1RFWnliMjFGYldGcGJDd2daMlYwVlhObGNrVnRZV2xzUm5KdmJWVlNUQ3dnYVhORVlYUmhUMkpxWldOMFZWSk1mU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3k1cWN5YzdYRzVwYlhCdmNuUWdTV1JsYm5ScGRIa2dabkp2YlNBbkxpOUpaR1Z1ZEdsMGVTYzdYRzVwYlhCdmNuUWdRM0o1Y0hSdklHWnliMjBnSnk0dlEzSjVjSFJ2Snp0Y2JseHVMeW9xWEc0cVhHNHFJRlJvWlNCSlpHVnVkR2wwZVNCTmIyUjFiR1VnS0Vsa0lFMXZaSFZzWlNrZ2FYTWdkR2hsSUdOdmJYQnZibVZ1ZENCeVpYTndiMjV6YVdKc1pTQm1iM0lnYUdGdVpHeHBibWNnZEdobFhHNHFJSFZ6WlhJZ2FXUmxiblJwZEhrZ1lXNWtJSFJvWlNCaGMzTnZZMmxoZEdsdmJpQnZaaUIwYUdseklHbGtaVzUwYVhSNUlIZHBkR2dnZEdobElFaDVjR1Z5ZEhrZ2FXNXpkR0Z1WTJWekxGeHVLaUJwYmlCdmNtUmxjaUIwYnlCdFlXdGxJRWg1Y0dWeWRIa2dhVzV6ZEdGdVkyVnpJR2xrWlc1MGFXWnBZV0pzWlM0Z1ZHaGxJR2xrWlc1MGFYUjVJR2x1SUhSb1pTQnlaVlJJU1U1TElIQnliMnBsWTNSY2Jpb2dhWE1nYm05MElHWnBlR1ZrSUhSdklHRWdkVzVwY1hWbElFbGtaVzUwYVhSNUlGTmxjblpwWTJVZ1VISnZkbWxrWlhJc0lHSjFkQ0J2WW5SaGFXNWxaQ0IwYUhKdmRXZG9JSE5sZG1WeVlXeGNiaW9nWkdsbVptVnlaVzUwSUVsa1pXNTBhWFI1SUhOdmRYSmpaWE11SUZkcGRHZ2dkR2hwY3lCaGNIQnliMkZqYUN3Z2RHaGxJRWxrSUUxdlpIVnNaU0J3Y205MmFXUmxjeUIwYnlCMGFHVWdkWE5sY2lCMGFHVmNiaW9nYjNCMGFXOXVJSFJ2SUdOb2IyOXpaU0IwYUdVZ2NISmxabVZ5Y21Wa0lHMWxkR2h2WkNCbWIzSWdZWFYwYUdWdWRHbGpZWFJwYjI0dVhHNHFJRlJvYVhNZ2JXOWtkV3hsSUhkcGJHd2dkR2gxY3lCaFlteGxJSFJ2SUhOMWNIQnZjblFnYlhWc2RHbHdiR1VnU1dSbGJuUnBkSGtnWVdOeGRXbHphWFJwYjI0Z2JXVjBhRzlrY3l4Y2Jpb2djM1ZqYUNCaGN5QlBjR1Z1U1VRZ1kyOXVibVZqZENBeExqQXNJRXRsY21KbGNtOXpJRk41YzNSbGJTd2diM0lnWVhWMGFHVnVkR2xqWVhScGIyNGdkR2h5YjNWbmFDQnpiV0Z5ZENCallYSmtjeTVjYmlvZ1JtOXlJR1Y0WVcxd2JHVXNJR0VnZFhObGNpQjNhWFJvSUdFZ1IyOXZaMnhsSUdGalkyOTFiblFnWTJGdUlIVnpaU0IwYUdVZ1IyOXZaMnhsSUdGeklHRnVJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnlJSFJ2SUhCeWIzWnBaR1VnU1dSbGJuUnBkSGtnVkc5clpXNXpMRnh1S2lBZ2QyaHBZMmdnWTJGdUlHSmxJSFZ6WldRZ1lua2dkR2hsSUVsa1pXNTBhWFI1SUUxdlpIVnNaU0IwYnlCaGMzTnZZMmxoZEdVZ2FYUWdkMmwwYUNCaElFaDVjR1Z5ZEhrZ2FXNXpkR0Z1WTJVdVhHNHFYRzRxSUZSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ2RYTmxjeUJoSUc1dlpHVWdjR0ZqYTJGblpTd2dkR2hsSUVobGJHeHZTbE1zSUhkb2FXTm9JR2x6SUdFZ1kyeHBaVzUwTFhOcFpHVWdTbUYyWVZOamNtbHdkQ0JCVUVrZ1ptOXlJR0YxZEdobGJuUnBZMkYwYVc5dVhHNHFJSFJvWVhRZ1ptRmphV3hwZEdGMFpYTWdkR2hsSUhKbGNYVmxjM1J6SUdadmNpQjBhR1VnVDNCbGJrbEVJR052Ym01bFkzUWdjSEp2ZEc5amIyd3VJRlJvYVhNZ2JXVjBhRzlrSUdGc2JHOTNjeUJtYjNJZ2MyOXRaU0JoWW5OMGNtRmpkR2x2Ymx4dUtpQjNhR1Z1SUcxaGEybHVaeUJ5WlhGMVpYTjBjeUJtYjNJZ1pHbG1abVZ5Wlc1MElFbGtaVzUwYVhSNUlGQnliM1pwWkdWeWN5d2djM1ZqYUNCaGN5QlBjR1Z1U1VRZ1kyOXVibVZqZENCMWMyVmtJR0o1SUVkdmIyZHNaU3dnUm1GalpXSnZiMnNzSUUxcFkzSnZjMjltZEN3Z1ptOXlJR1Y0WVcxd2JHVXVYRzRxWEc0cUlGZG9aVzRnWVNCeVpYRjFaWE4wSUdadmNpQmhJSFZ6WlhJZ2FXUmxiblJwZEhrZ2FYTWdiV0ZrWlNCMWMybHVaeUIwYUdVZ2JXVjBhRzlrSUd4dloybHVWMmwwYUZKUUtHbGtaVzUwYVdacFpYSXNJSE5qYjNCbEtTeGNiaW9nZEdocGN5QnRaWFJvYjJRZ2QybHNiQ0JoYm1Gc2VYTmxJSFJvWlNCSlpHVnVkR2wwZVNCUWNtOTJhV1JsY2lCamFHOXpaVzRnZEc4Z2IySjBZV2x1SUdGdUlHbGtaVzUwYVhSNUlHRnVaQ0IzYVd4c0lIVnpaU0IwYUdVZ1NHVnNiRzlLVXlCdWIyUmxJSEJoWTJ0aFoyVmNiaW9nZDJsMGFDQjBhR1VnYzJWc1pXTjBaV1FnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnWVc1a0lHbGtaVzUwYVhSNUlITmpiM0JsTGlCQlpuUmxjaUIwYUdVZ1NHVnNiRzlLVXlCeVpYRjFaWE4wSUdadmNpQmhiaUJCWTJObGMzTWdWRzlyWlc1Y2Jpb2dkRzhnZEdobElFbGtaVzUwYVhSNUlGQnliM1pwWkdWeWN5d2dkR2hsSUhWelpYSWdkMmxzYkNCaVpTQndjbTl0Y0hSbFpDQjBieUJoZFhSb1pXNTBhV05oZEdVZ2RHOTNZWEprY3lCMGFHVWdTV1JsYm5ScGRIa2dVSEp2ZG1sa1pYSXVYRzRxSUZWd2IyNGdjbVZqWldsMmFXNW5JSFJvWlNCQlkyTmxjM01nVkc5clpXNHNJSFJvYVhNZ2RHOXJaVzRnYVhNZ2RtRnNhV1JoZEdWa0lIZHBkR2dnWVNCU1JWTlVablZzSUhkbFlpQnpaWEoyYVdObElISmxjWFZsYzNRZ2RHOGdZVzRnWlc1a2NHOXBiblJjYmlvZ2IyNGdkR2hsSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUVGMWRHaHZjbWw2WVhScGIyNGdVMlZ5ZG1WeUxDQmhibVFnWVdaMFpYSWdkR2hsSUhaaGJHbGtZWFJwYjI0Z2FYTWdaRzl1WlN4Y2Jpb2dZVzRnU1VRZ2RHOXJaVzRnYVhNZ2IySjBZV2x1WldRZ2QybDBhQ0IwYUdVZ2FXNW1iM0p0WVhScGIyNGdZV05qYjNKa2FXNW5JSFJ2SUhSb1pTQnpZMjl3WlNCeVpYRjFhWEpsWkM1Y2Jpb2dWR2hwY3lCSlJDQjBiMnRsYmlCcGN5QjBhR1Z1SUhCeVpYTmxjblpsWkNCcGJpQjBhR2x6SUcxdlpIVnNaU0IwYUdGMElHTmhiaUJ2WW5SaGFXNWxaQ0IwYUhKdmRXZG9JSFJvWlNCblpYUkpaR1Z1ZEdsMGFXVnpLQ2xjYmlvZ1lXNWtJR2x6SUhCaGMzTmxaQ0JoY3lCeVpYUjFjbTRnZG1Gc2RXVWdiMllnZEdobElHeHZaMmx1VjJsMGFGSlFJR1oxYm1OMGFXOXVMaUJVYUdVZ2JXVjBhRzlrY3lCblpXNWxjbUYwWlVGemMyVnlkR2x2YmlCaGJtUWdkbUZzYVdSaGRHVkJjM05sY25ScGIyNGdhR0YyWlNCdWIzUWdlV1YwSUdKbFpXNGdaR1YyWld4dmNHVmtMbHh1S2x4dUtpOWNibU5zWVhOeklFbGtaVzUwYVhSNVRXOWtkV3hsSUh0Y2JseHVJQ0F2S2lwY2JpQWdLaUJVYUdseklHbHpJSFJvWlNCamIyNXpkSEoxWTNSdmNpQjBieUJwYm1sMGFXRnNhWE5sSUhSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ2FYUWdaRzlsY3lCdWIzUWdjbVZ4ZFdseVpTQmhibmtnYVc1d2RYUXVYRzRnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5S0hKMWJuUnBiV1ZWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYVdZZ0tDRnlkVzUwYVcxbFZWSk1LU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0oxYm5ScGJXVlZVa3dnYVhNZ2JXbHpjMmx1Wnk0bktUdGNibHh1SUNBZ0lGOTBhR2x6TGw5eWRXNTBhVzFsVlZKTUlEMGdjblZ1ZEdsdFpWVlNURHRjYmlBZ0lDQmZkR2hwY3k1ZmFXUnRWVkpNSUQwZ2NuVnVkR2x0WlZWU1RDQXJJQ2N2YVdSdEp6dGNibHh1SUNBZ0lGOTBhR2x6TGw5a2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b1gzUm9hWE11WDNKMWJuUnBiV1ZWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUM4dmRHOGdjM1J2Y21VZ2FYUmxiWE1nZDJsMGFDQjBhR2x6SUdadmNtMWhkRG9nZTJsa1pXNTBhWFI1T2lCcFpHVnVkR2wwZVZWU1RDd2dkRzlyWlc0NklIUnZhMlZ1U1VSOVhHNGdJQ0FnWDNSb2FYTXVhV1JsYm5ScGRHbGxjeUE5SUZ0ZE8xeHVJQ0FnSUd4bGRDQnVaWGRKWkdWdWRHbDBlU0E5SUc1bGR5QkpaR1Z1ZEdsMGVTZ25aM1ZwWkNjc0owaFZUVUZPSnlrN1hHNGdJQ0FnWDNSb2FYTXVhV1JsYm5ScGRIa2dQU0J1WlhkSlpHVnVkR2wwZVR0Y2JpQWdJQ0JmZEdocGN5NWpjbmx3ZEc4Z1BTQnVaWGNnUTNKNWNIUnZLQ2s3WEc1Y2JpQWdJQ0F2TDNOMGIzSmxjeUIwYUdVZ1lYTnpiMk5wWVhScGIyNGdiMllnZEdobElHUmhkR0ZQWW1wbFkzUWdZVzVrSUhSb1pTQkllWEJsY25SNUlISmxaMmx6ZEdWeVpXUWdkMmwwYUdsdVhHNGdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkSE5KWkdWdWRHbDBlU0E5SUh0OU8xeHVYRzRnSUNBZ0x5OGdhR0Z6YUZSaFlteGxJSFJ2SUhOMGIzSmxJR0ZzYkNCMGFHVWdZM0o1Y0hSdklHbHVabTl5YldGMGFXOXVJR0psZEhkbFpXNGdkSGR2SUdoNWNHVnlkR2xsYzF4dUlDQWdJRjkwYUdsekxtTm9ZWFJMWlhseklEMGdlMzA3WEc1Y2JpQWdJQ0F2THlCb1lYTm9WR0ZpYkdVZ2RHOGdjM1J2Y21VZ2RHaGxJSE41YlcxbGRISnBZeUJyWlhseklIUnZJR0psSUhWelpXUWdhVzRnZEdobElHTm9ZWFFnWjNKdmRYQmNiaUFnSUNCZmRHaHBjeTVrWVhSaFQySnFaV04wVTJWemMybHZia3RsZVhNZ1BTQjdmVHRjYmx4dUlDQWdJQzh2Wm1GcGJITmhabVVnZEc4Z1pXNWhZbXhsTDJScGMyRmliR1VnWVd4c0lIUm9aU0JqY21sd2RHOW5jbUZ3YUdsaklHWjFibU4wYVc5dWMxeHVJQ0FnSUY5MGFHbHpMbWx6Vkc5VmMyVkZibU55ZVhCMGFXOXVJRDBnZEhKMVpUdGNibHh1SUNBZ0lDOHZJSFpsY21sbWFXTmhkR2x2YmlCdlppQnViMlJsU2xNc0lHRnVaQ0JwYmlCallYTmxJR2wwSUdseklHNXZaR1ZLVXlCMGFHVnVJR1JwYzJGaWJHVWdaVzVqY25sd2RHbHZibHh1SUNBZ0lDOHZJRlJQUkU4Z2FXMXdjbTkyWlNCc1lYUmxjaXdnZEdocGN5QmxlR2x6ZEhNZ1ltVmpZWFZ6WlNCMGFHVWdZM0o1Y0hSdklHeHBZaUIxYzJWeklHSnliM2R6WlhJZ1kzSjVjSFJ2WjNKaGNHaHBZeUJ0WlhSb2IyUnpYRzRnSUNBZ0x5OWZkR2hwY3k1cGMxUnZWWE5sUlc1amNubHdkR2x2YmlBOUlDaDNhVzVrYjNjcElEOGdkSEoxWlNBNklHWmhiSE5sTzF4dVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQnlaWFIxY200Z2RHaGxJRzFsYzNOaFoyVkNkWE1nYVc0Z2RHaHBjeUJTWldkcGMzUnllVnh1SUNBcUlFQndZWEpoYlNCN1RXVnpjMkZuWlVKMWMzMGdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVkNkWE5jYmlBZ0tpOWNiaUFnWjJWMElHMWxjM05oWjJWQ2RYTW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVFpYUWdkR2hsSUcxbGMzTmhaMlZDZFhNZ2FXNGdkR2hwY3lCU1pXZHBjM1J5ZVZ4dUlDQXFJRUJ3WVhKaGJTQjdUV1Z6YzJGblpVSjFjMzBnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZDZFhOY2JpQWdLaTljYmlBZ2MyVjBJRzFsYzNOaFoyVkNkWE1vYldWemMyRm5aVUoxY3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQU0J0WlhOellXZGxRblZ6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ2NtVjBkWEp1SUhSb1pTQnlaV2RwYzNSeWVTQnBiaUIwYUdseklHbGtUVzlrZFd4bFhHNGdJQ29nUUhCaGNtRnRJSHR5WldkcGMzUnllWDBnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkSEo1WEc0Z0lDb3ZYRzRnSUdkbGRDQnlaV2RwYzNSeWVTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZjbVZuYVhOMGNuazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJUWlhRZ2RHaGxJSEpsWjJsemRISjVJR2x1SUhSb2FYTWdhV1JOYjJSMWJHVmNiaUFnS2lCQWNHRnlZVzBnZTNKbFoybHpkSEo1ZlNBZ0lDQWdjbVZuWEc0Z0lDb3ZYRzRnSUhObGRDQnlaV2RwYzNSeWVTaHlaV2RwYzNSeWVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnWDNSb2FYTXVYM0psWjJsemRISjVJRDBnY21WbmFYTjBjbms3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGJ5QnlaWFIxY200Z1lXeHNJSFJvWlNCcFpHVnVkR2wwYVdWeklISmxaMmx6ZEdWeVpXUWdkMmwwYUdsdUlHRWdjMlZ6YzJsdmJpQmllU0JoSUhWelpYSXVYRzRnSUNvZ1ZHaGxjMlVnYVdSbGJuUnBkR2xsY3lCaGNtVWdjbVYwZFhKdVpXUWdhVzRnWVc0Z1lYSnlZWGtnWTI5dWRHRnBibWx1WnlCaElFcFRUMDRnY0dGamEyRm5aU0JtYjNJZ1pXRmphQ0IxYzJWeUlHbGtaVzUwYVhSNUxseHVJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVQRWxrWlc1MGFYUnBaWE0rZlNBZ0lDQWdJQ0FnSUVsa1pXNTBhWFJwWlhOY2JpQWdLaTljYmlBZ1oyVjBTV1JsYm5ScGRHbGxjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1oyVjBjeUJoYkd3Z2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdaeWIyMGdZU0JuYVhabGJpQjFjMlZ5VlZKTVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnZFhObGNsVlNUQ0FnSUNBZ2RYTmxjaUIxY214Y2JpQWdLaUJBY21WMGRYSnVJSHRLVTA5T2ZTQWdJQ0JwWkdWdWRHbDBlU0FnSUNCcFpHVnVkR2wwZVNCaWRXNWtiR1VnWm5KdmJTQjBhR1VnZFhObGNsVlNURnh1SUNBcUwxeHVJQ0JuWlhSSlpHVnVkR2wwZVNoMWMyVnlWVkpNS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2x1WkdWNElHbHVJRjkwYUdsekxtbGtaVzUwYVhScFpYTXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNUlEMGdYM1JvYVhNdWFXUmxiblJwZEdsbGMxdHBibVJsZUYwN1hHNGdJQ0FnSUNCcFppQW9hV1JsYm5ScGRIa3VhV1JsYm5ScGRIa2dQVDA5SUhWelpYSlZVa3dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsa1pXNTBhWFI1TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFJvY205M0lDZHBaR1Z1ZEdsMGVTQnViM1FnWm05MWJtUW5PMXh1SUNCOVhHNWNiaUFnWjJWMFNXUmxiblJwZEhsUFpraDVjR1Z5ZEhrb2FIbHdaWEowZVZWU1RDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCc1pYUWdjM0JzYVhSVlVrd2dQU0JvZVhCbGNuUjVWVkpNTG5Od2JHbDBLQ2M2THk4bktUdGNiaUFnSUNBZ0lHbG1JQ2h6Y0d4cGRGVlNURnN3WFNBaFBUMGdKMmg1Y0dWeWRIa25LU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDluWlhSSWVYQmxjblI1Um5KdmJVUmhkR0ZQWW1wbFkzUW9hSGx3WlhKMGVWVlNUQ2t1ZEdobGJpZ29hSGx3WlhKMGVWVlNUQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCMWMyVnlWVkpNSUQwZ1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFNIbHdaWEowZVU5M2JtVnlLR2g1Y0dWeWRIbFZVa3dwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gxYzJWeVZWSk1LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2x1WkdWNElHbHVJRjkwYUdsekxtbGtaVzUwYVhScFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFI1SUQwZ1gzUm9hWE11YVdSbGJuUnBkR2xsYzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocFpHVnVkR2wwZVM1cFpHVnVkR2wwZVNBOVBUMGdkWE5sY2xWU1RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEtHbGtaVzUwYVhSNUxtMWxjM05oWjJWSmJtWnZLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLQ2R1YnlCcFpHVnVkR2wwZVNCM1lYTWdabTkxYm1RbktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKVlVrd2dQU0JmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJJZVhCbGNuUjVUM2R1WlhJb2FIbHdaWEowZVZWU1RDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMWMyVnlWVkpNS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQnBiaUJmZEdocGN5NXBaR1Z1ZEdsMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVdSbGJuUnBkSGtnUFNCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6VzJsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwWkdWdWRHbDBlUzVwWkdWdWRHbDBlU0E5UFQwZ2RYTmxjbFZTVENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemIyeDJaU2hwWkdWdWRHbDBlUzV0WlhOellXZGxTVzVtYnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb0oyNXZJR2xrWlc1MGFYUjVJSGRoY3lCbWIzVnVaQzRuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSblZ1WTNScGIyNGdkRzhnY21WMGRYSnVJR0ZzYkNCMGFHVWdkWE5sY25NZ1ZWSk1jeUJ5WldkcGMzUmxjbVZrSUhkcGRHaHBiaUJoSUhObGMzTnBiMjVjYmlBZ0tpQlVhR1Z6WlNCMWMyVnljeUJWVWt4eklHRnlaU0J5WlhSMWNtNWxaQ0JwYmlCaGJpQmhjbkpoZVNCdlppQnpkSEpwYm1kekxseHVJQ0FxSUVCd1lYSmhiU0FnZTBKdmIyeGxZVzU5SUNCbGJXRnBiRVp2Y20xaGRDQW9UM0IwYVc5dVlXd3BJQ0FnWW05dmJHVmhiaUIwYnlCcGJtUnBZMkYwWlNCMGJ5QnlaWFIxY200Z2FXNGdaVzFoYVd3Z1ptOXliV0YwWEc0Z0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhrOFUzUnlhVzVuUG4wZ0lDQWdJQ0FnSUNCMWMyVnljMXh1SUNBcUwxeHVJQ0JuWlhSVmMyVnljMGxFY3lobGJXRnBiRVp2Y20xaGRDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElIVnpaWEp6SUQwZ1cxMDdYRzVjYmlBZ0lDQXZMMmxtSUhKbGNYVmxjM1FnWTI5dFpYTWdkMmwwYUNCMGFHVWdaVzFoYVd4R2IzSnRZWFFnYjNCMGFXOXVMQ0IwYUdWdUlHTnZiblpsY25RZ2RYSnNJSFJ2SUdWdFlXbHNJR1p2Y20xaGRGeHVJQ0FnSUd4bGRDQmpiMjUyWlhKMFpYSWdQU0FvWlcxaGFXeEdiM0p0WVhRcElEOGdaMlYwVlhObGNrVnRZV2xzUm5KdmJWVlNUQ0E2SUNoMllXeDFaU2tnUFQ0Z2UzSmxkSFZ5YmlCMllXeDFaVHQ5TzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVc1a1pYZ2dhVzRnWDNSb2FYTXVhV1JsYm5ScGRHbGxjeWtnZTF4dUlDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNUlEMGdYM1JvYVhNdWFXUmxiblJwZEdsbGMxdHBibVJsZUYwN1hHNGdJQ0FnSUNCMWMyVnljeTV3ZFhOb0tHTnZiblpsY25SbGNpaHBaR1Z1ZEdsMGVTNXBaR1Z1ZEdsMGVTa3BPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZFhObGNuTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCeVpYUjFjbTRnZEdobElITmxiR1ZqZEdWa0lFbGtaVzUwYVhSNUlIZHBkR2hwYmlCaElITmxjM05wYjI1Y2JpQWdLaUJBY21WMGRYSnVJSHRKWkdWdWRHbDBlWDBnSUNBZ0lDQWdJR2xrWlc1MGFYUjVJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRIbGNiaUFnS2k5Y2JpQWdaMlYwUTNWeWNtVnVkRWxrWlc1MGFYUjVLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUhObGRDQjBhR1VnWTNWeWNtVnVkQ0JKWkdWdWRHbDBlU0IzYVhSb0lHRWdaMmwyWlc0Z1NXUmxiblJwZEhsY2JpQWdLaUJBY0dGeVlXMGdlMGxrWlc1MGFYUjVmU0FnSUNBZ0lDQWdhV1JsYm5ScGRIa2dJQ0FnSUNBZ0lDQnBaR1Z1ZEdsMGVWeHVJQ0FxTDF4dUlDQnpaWFJEZFhKeVpXNTBTV1JsYm5ScGRIa29hV1JsYm5ScGRIa3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUY5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVTQTlJR2xrWlc1MGFYUjVPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2NtVnRiM1psSUhSb1pTQmhiaUJwWkdWdWRHbDBlU0JtY205dElIUm9aU0JKWkdWdWRHbDBhV1Z6SUdGeWNtRjVYRzRnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUNBZ0lIVnpaWEpWVWt3Z0lDQWdJQ0IxYzJWeVZWSk1YRzRnSUNvdlhHNGdJR1JsYkdWMFpVbGtaVzUwYVhSNUtIVnpaWEpWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVdSbGJuUnBkSGtnYVc0Z1gzUm9hWE11YVdSbGJuUnBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtbGtaVzUwYVhScFpYTmJhV1JsYm5ScGRIbGRMbWxrWlc1MGFYUjVJRDA5UFNCMWMyVnlWVkpNS1NCN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1sa1pXNTBhWFJwWlhNdWMzQnNhV05sS0dsa1pXNTBhWFI1TENBeEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBhR0YwSUhKbGMyOXNkbVVnWVc1a0lHTnlaV0YwWlNCMGFHVWdaRzl0WVdsdVZWSk1JR2x1SUdOaGMyVWdhWFFnYVhNZ2NISnZkbWxrWldRZ2IyNWxMaUJKWmlCdWIzUXNJSEpsYzI5c2RtVWdkR2hsSUdSbFptRjFiSFFnWkc5dFlXbHVWVkpNWEc0Z0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlDQWdJQ0JwWkhCRWIyMWhhVzRnSUNBZ0lHbGtjRVJ2YldGcGJpQW9UM0IwYVc5dVlXd3BYRzRnSUNvdlhHNGdJRjl5WlhOdmJIWmxSRzl0WVdsdUtHbGtjRVJ2YldGcGJpa2dlMXh1SUNBZ0lHbG1JQ2doYVdSd1JHOXRZV2x1S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnSjJSdmJXRnBiaTFwWkhBNkx5OW5iMjluYkdVdVkyOXRKenRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNka2IyMWhhVzR0YVdSd09pOHZKeUFySUdsa2NFUnZiV0ZwYmp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGJ5QnNiMmRwYmlCaElIVnpaWElnZDJsMGFHbHVJSFJvWlNCelpYTnphVzl1TENCcGRDQjNhV3hzSUhOMFlYSjBJSFJvWlNCd2NtOWpaWE56SUhSdklHOWlkR0ZwYmlCaGJpQkpaR1Z1ZEdsMGVTQm1jbTl0SUdFZ2RYTmxjaXdnYVc1amJIVmthVzVuSUhSb1pTQnlaWEYxWlhOMElHWnZjaUJoYmlCcFpHVnVkR2wwZVNCQmMzTmxjblJwYjI0dUlGUm9aU0JtZFc1amRHbHZiaUJ5WlhSMWNtNXpJR0VnY0hKdmJXbHpaU0IzYVhSb0lIUm9aU0IwYjJ0bGJpQnlaV05sYVhabFpDQmllU0IwYUdVZ2FXUndVSEp2ZUhrdVhHNGdJQ3BjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEpaR1Z1ZEdsbWFXVnlmU0FnSUNBZ0lHbGtaVzUwYVdacFpYSWdJQ0FnSUNCcFpHVnVkR2xtYVdWeVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTJOdmNHVjlJQ0FnSUNBZ0lDQWdJQ0J6WTI5d1pTQWdJQ0FnSUNBZ0lDQWdjMk52Y0dWY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJRkJ5YjIxcGMyVWdJQ0FnSUNBZ0lDQkpSRlJ2YTJWdUlHTnZiblJoYVc1cGJtY2dkR2hsSUhWelpYSWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0tpOWNiaUFnYkc5bmFXNVhhWFJvVWxBb2FXUmxiblJwWm1sbGNpd2djMk52Y0dVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNBdkwxUlBSRThnY21WdGIzWmxJSFJvYVhNZ2RtVnlhV1pwWTJGMGFXOXVJR0Z1WkNCeVpXWmhZM1J2Y2lCMGFHbHpJSEJoY25SY2JpQWdJQ0FnSUY5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJRjkwYUdsekxtZGxkRWxrWlc1MGFYUjVRWE56WlhKMGFXOXVLQ2RwWkdWdWRHbG1hV1Z5Snl3Z0oyOXlhV2RwYmljc0lDZG9hVzUwSnl3Z2FXUmxiblJwWm1sbGNpa3VkR2hsYmlobWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25iRzluYVc1WGFYUm9VbEFuS1R0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoMllXeDFaU2s3WEc0Z0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyeHZaMmx1VjJsMGFGSlFJR1Z5Y2ljcE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHaGhkQ0JtWlhSamFDQmhiaUJwWkdWdWRHbDBlVUZ6YzJWeWRHbHZiaUJtY205dElHRWdkWE5sY2k1Y2JpQWdLbHh1SUNBcUlFQnlaWFIxY200Z2UwbGtRWE56WlhKMGFXOXVmU0FnSUNBZ0lDQWdJQ0FnSUNBZ1NXUkJjM05sY25ScGIyNWNiaUFnS2k5Y2JpQWdaMlYwU1dSbGJuUnBkSGxCYzNObGNuUnBiMjRvYVdSbGJuUnBabWxsY2l3Z2IzSnBaMmx1TENCMWMyVnlibUZ0WlVocGJuUXNJR2xrY0VSdmJXRnBiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbU4xY25KbGJuUkpaR1Z1ZEdsMGVTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDOHZWRTlFVHlCMlpYSnBabmtnZDJobGRHaGxjaUIwYUdVZ2RHOXJaVzRnYVhNZ2MzUnBiR3dnZG1Gc2FXUWdiM0lnYm05MExseHVJQ0FnSUNBZ0lDQXZMeUJ6YUc5MWJHUWdZbVVnYm1WbFpHVmtJSFJ2SUcxaGEyVWdablZ5ZEdobGNpQnlaWEYxWlhOMGN5d2dkRzhnYjJKMFlXbHVJR0VnZG1Gc2FXUWdkRzlyWlc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVVvWDNSb2FYTXVZM1Z5Y21WdWRFbGtaVzUwYVhSNUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNWNiaUFnSUNBZ0lDQWdMeTlEU0VWRFN5QjNhR1YwYUdWeUlHbHpJR0p5YjNkelpYSWdaVzUyYVhKdmJtMWxiblFnYjNJZ2JtOWtaV3B6WEc0Z0lDQWdJQ0FnSUM4dmFXWWdhWFFnYVhNZ1luSnZkM05sY2l3Z2RHaGxiaUJqY21WaGRHVWdZU0JtWVd0bElHbGtaVzUwYVhSNVhHNWNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd2RXSnNhV05MWlhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RYTmxjbXRsZVZCaGFYSTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZaMlZ1WlhKaGRHVnpJSFJvWlNCU1UwRWdhMlY1SUhCaGFYSmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NW5aVzVsY21GMFpWSlRRVXRsZVZCaGFYSW9LUzUwYUdWdUtHWjFibU4wYVc5dUtHdGxlVkJoYVhJcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQndkV0pzYVdOTFpYa2dQU0JpZEc5aEtHdGxlVkJoYVhJdWNIVmliR2xqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNtdGxlVkJoYVhJZ1BTQnJaWGxRWVdseU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNG9jSFZpYkdsalMyVjVMQ0J2Y21sbmFXNHNJQ2NuTENCMWMyVnlhMlY1VUdGcGNpd2dhV1J3Ukc5dFlXbHVLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDFjbXdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtZGxibVZ5WVhSbFFYTnpaWEowYVc5dUtIQjFZbXhwWTB0bGVTd2diM0pwWjJsdUxDQjFjbXdzSUhWelpYSnJaWGxRWVdseUxDQnBaSEJFYjIxaGFXNHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25SWEp5YjNJZ2IyNGdiMkowWVdsdWFXNW5JRWxrWlc1MGFYUjVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlobGNuSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWjJWMFNXUmxiblJwZEhsQmMzTmxjblJwYjI0Z1ptOXlJRzV2WkdWcWN5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnlZVzVrYjIxT2RXMWlaWElnUFNCTllYUm9MbVpzYjI5eUtDaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ01UQXdNREFwSUNzZ01TazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNVFuVnVaR3hsSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhOelpYSjBhVzl1T2lBbllYTnpaWEowYVc5dUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa2NEb25ibTlrWldwekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhWelpYSlFjbTltYVd4bE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaGRtRjBZWEk2SUNkb2RIUndjem92TDJ4b015NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjB2TFZkaFEzSnFWazFOVmkxUkwwRkJRVUZCUVVGQlFVRkpMMEZCUVVGQlFVRkJRVUZ6THpoUGJGWnhRM0JUUWpsakwzQm9iM1J2TG1wd1p5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamJqb2dKM1JsYzNRZ2JtOWtaV3B6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKdVlXMWxPaUFuYm05a1pXcHpMU2NnS3lCeVlXNWtiMjFPZFcxaVpYSWdLeUFuUUc1dlpHVnFjeTVqYjIwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNsVlNURG9nSjNWelpYSTZMeTl1YjJSbGFuTXVZMjl0TDI1dlpHVnFjeTBuSUNzZ2NtRnVaRzl0VG5WdFltVnlYRzRnSUNBZ0lDQWdJQ0FnZlgwN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzVnljbVZ1ZEVsa1pXNTBhWFI1SUQwZ2FXUmxiblJwZEhsQ2RXNWtiR1U3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11YVdSbGJuUnBkR2xsY3k1d2RYTm9LR2xrWlc1MGFYUjVRblZ1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHBaR1Z1ZEdsMGVVSjFibVJzWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRkpsY1hWbGMzUnpJSFJvWlNCSlpIQlFjbTk0ZVNCbWNtOXRJR0VnWjJsMlpXNGdSRzl0WVdsdUlHWnZjaUJoYmlCcFpHVnVkR2wwZVVGemMyVnlkR2x2Ymx4dUlDQXFYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JFOU5VM1J5YVc1bmZTQmpiMjUwWlc1MGN5QWdJQ0FnWTI5dWRHVnVkSE5jYmlBZ0tpQkFjR0Z5WVcwZ0lIdEVUMDFUZEhKcGJtZDlJRzl5YVdkcGJpQWdJQ0FnSUNCdmNtbG5hVzVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEVUMDFUZEhKcGJtZDlJSFZ6WlhKdVlXMWxTR2x1ZENCMWMyVnlibUZ0WlVocGJuUmNiaUFnS2lCQWNHRnlZVzBnSUh0S1UwOU9mU0FnSUNBZ0lHdGxlVkJoYVhJZ0lDQWdJQ0FnZFhObGNpQnJaWGxRWVdseVhHNGdJQ29nUUhKbGRIVnliaUI3U1dSQmMzTmxjblJwYjI1OUlDQWdJQ0FnSUNBZ0lDQWdJQ0JKWkVGemMyVnlkR2x2Ymx4dUlDQXFMMXh1SUNCblpXNWxjbUYwWlVGemMyVnlkR2x2YmloamIyNTBaVzUwY3l3Z2IzSnBaMmx1TENCMWMyVnlibUZ0WlVocGJuUXNJR3RsZVZCaGFYSXNJR2xrY0VSdmJXRnBiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJRjkwYUdsekxsOXlaWE52YkhabFJHOXRZV2x1S0dsa2NFUnZiV0ZwYmlrN1hHNGdJQ0FnYkdWMElHMWxjM05oWjJVN1hHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25aMlZ1WlhKaGRHVkJjM05sY25ScGIyNG5LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0J0WlhOellXZGxJRDBnZTNSNWNHVTZKMlY0WldOMWRHVW5MQ0IwYnpvZ1pHOXRZV2x1TENCbWNtOXRPaUJmZEdocGN5NWZhV1J0VlZKTUxDQmliMlI1T2lCN2NtVnpiM1Z5WTJVNklDZHBaR1Z1ZEdsMGVTY3NJRzFsZEdodlpEb2dKMmRsYm1WeVlYUmxRWE56WlhKMGFXOXVKeXdnY0dGeVlXMXpPaUI3WTI5dWRHVnVkSE02SUdOdmJuUmxiblJ6TENCdmNtbG5hVzQ2SUc5eWFXZHBiaXdnZFhObGNtNWhiV1ZJYVc1ME9pQjFjMlZ5Ym1GdFpVaHBiblI5ZlgwN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WekxuQnZjM1JOWlhOellXZGxLRzFsYzNOaFoyVXNJQ2h5WlhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlISmxjeTVpYjJSNUxuWmhiSFZsTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXViRzluYVc1VmNtd3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0IzYVc0Z1BTQjNhVzVrYjNjdWIzQmxiaWh5WlhOMWJIUXViRzluYVc1VmNtd3NJQ2R2Y0dWdVNVUnlaWEYxWlhOMEp5d2dKM2RwWkhSb1BUZ3dNQ3dnYUdWcFoyaDBQVFl3TUNjcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoM2FXNWtiM2N1WTI5eVpHOTJZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkMmx1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJ4dllXUnpkR0Z5ZENjc0lHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhWeWJDQTlJR1V1ZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZMjlrWlNBOUlDOWNYQ1pqYjJSbFBTZ3VLeWtrTHk1bGVHVmpLSFZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxjbkp2Y2lBOUlDOWNYQ1psY25KdmNqMG9MaXNwSkM4dVpYaGxZeWgxY213cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjJSbElIeDhJR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1TG1Oc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQnZiR3hVYVcxbGNpQTlJSE5sZEVsdWRHVnlkbUZzS0daMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM2FXNHVZMnh2YzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMU52YldVZ1pYSnliM0lnYjJOamRYSmxaQ0IzYUdWdUlIUnllV2x1WnlCMGJ5Qm5aWFFnYVdSbGJuUnBkSGt1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2tsdWRHVnlkbUZzS0hCdmJHeFVhVzFsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hkcGJpNWtiMk4xYldWdWRDNVZVa3d1YVc1a1pYaFBaaWduYVdSZmRHOXJaVzRuS1NBaFBUMGdMVEVnZkh3Z2QybHVMbVJ2WTNWdFpXNTBMbFZTVEM1cGJtUmxlRTltS0d4dlkyRjBhVzl1TG05eWFXZHBiaWtnSVQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1WTJ4bFlYSkpiblJsY25aaGJDaHdiMnhzVkdsdFpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIVnliQ0E5SUNBZ2QybHVMbVJ2WTNWdFpXNTBMbFZTVER0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmx1TG1Oc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hWeWJDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5aGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dOVEF3S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvY21WemRXeDBLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWVhOelpYSjBhVzl1VUdGeWMyVmtJRDBnU2xOUFRpNXdZWEp6WlNoaGRHOWlLSEpsYzNWc2RDNWhjM05sY25ScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJqdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlZFOUVUeUJ5WlcxdmRtVWdkR2hsSUhabGNtbG1hV05oZEdsdmJpQmhibVFnY21WdGIzWmxJSFJvWlNCMGIydGxia2xFU2xOUFRpQm1jbTl0SUhSb1pTQm5iMjluYkdVZ2FXUndVSEp2ZUhrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGemMyVnlkR2x2YmxCaGNuTmxaQzUwYjJ0bGJrbEVTbE5QVGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdSVWIydGxiaUE5SUdGemMyVnlkR2x2YmxCaGNuTmxaQzUwYjJ0bGJrbEVTbE5QVGp0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdSVWIydGxiaUE5SUdGemMyVnlkR2x2YmxCaGNuTmxaRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FXUlViMnRsYmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbWxrWlc1MGFYUjVJRDBnWjJWMFZYTmxjbFZTVEVaeWIyMUZiV0ZwYkNocFpGUnZhMlZ1TG1WdFlXbHNLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFXUmxiblJwZEhrdVlXUmtTV1JsYm5ScGRIa29jbVZ6ZFd4MEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZMmhsWTJzZ2FXWWdaWGhwYzNSeklHRnVlU0JwYm1adlZHOXJaVzRnYVc0Z2RHaGxJSEpsYzNWc2RDQnlaV05sYVhabFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHVabTlVYjJ0bGJpQTlJQ2h5WlhOMWJIUXVhVzVtYjFSdmEyVnVLU0EvSUhKbGMzVnNkQzVwYm1adlZHOXJaVzRnT2lCN2ZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFjMlZ5VUhKdlptbHNaVUoxYm1Sc1pTQTlJSHQxYzJWeWJtRnRaVG9nYVdSVWIydGxiaTVsYldGcGJDd2dZMjQ2SUdsa1ZHOXJaVzR1Ym1GdFpTd2dZWFpoZEdGeU9pQnBibVp2Vkc5clpXNHVjR2xqZEhWeVpTd2diRzlqWVd4bE9pQnBibVp2Vkc5clpXNHViRzlqWVd4bExDQjFjMlZ5VlZKTU9pQm5aWFJWYzJWeVZWSk1Sbkp2YlVWdFlXbHNLR2xrVkc5clpXNHVaVzFoYVd3cGZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OWpjbVZoZEdsdmJpQnZaaUJoSUc1bGR5QktVMDlPSUhkcGRHZ2dkR2hsSUdsa1pXNTBhWFI1SUhSdklITmxibVFnZG1saElHMWxjM05oWjJWelhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JtVjNTV1JsYm5ScGRIa2dQU0I3ZFhObGNsQnliMlpwYkdVNklIVnpaWEpRY205bWFXeGxRblZ1Wkd4bExDQnBaSEE2SUhKbGMzVnNkQzVwWkhBdVpHOXRZV2x1TENCaGMzTmxjblJwYjI0NklISmxjM1ZzZEM1aGMzTmxjblJwYjI1OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbTFsYzNOaFoyVkpibVp2SUQwZ2JtVjNTV1JsYm5ScGRIazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1YTJWNVVHRnBjaUE5SUd0bGVWQmhhWEk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTjFjbkpsYm5SSlpHVnVkR2wwZVNBOUlHNWxkMGxrWlc1MGFYUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YVdSbGJuUnBkR2xsY3k1d2RYTm9LSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0c1bGQwbGtaVzUwYVhSNUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyVnljbTl5SUc5dUlHOWlkR0ZwYm1sdVp5QnBaR1Z1ZEdsMGVTQnBibVp2Y20xaGRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVDFSSVJWSWdWVk5GVWlkVElFbEVSVTVVU1ZSWlhHNGdJQ292WEc1Y2JpQWdMeW9xWEc0Z0lDb2dVbVZ4ZFdWemRITWdkR2hsSUVsa2NGQnliM2g1SUdaeWIyMGdZU0JuYVhabGJpQkViMjFoYVc0Z2RHOGdkbUZzYVdSaGRHVWdZVzRnU1dSbGJuUnBkSGxCYzNObGNuUnBiMjVjYmlBZ0tpQlNaWFIxY201eklHRWdjSEp2YldselpTQjNhWFJvSUhSb1pTQnlaWE4xYkhRZ1puSnZiU0IwYUdVZ2RtRnNhV1JoZEdsdmJpNWNiaUFnS2lCQWNHRnlZVzBnSUh0RVQwMVRkSEpwYm1kOUlHRnpjMlZ5ZEdsdmJseHVJQ0FxSUVCd1lYSmhiU0FnZTBSUFRWTjBjbWx1WjMwZ2IzSnBaMmx1SUNBZ0lDQWdJRzl5YVdkcGJseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUNBZ0lDQWdJQ0FnVUhKdmJXbHpaU0FnSUNBZ0lDQWdJSEJ5YjIxcGMyVWdkMmwwYUNCMGFHVWdjbVZ6ZFd4MElHWnliMjBnZEdobElIWmhiR2xrWVhScGIyNWNiaUFnS2k5Y2JpQWdkbUZzYVdSaGRHVkJjM05sY25ScGIyNG9ZWE56WlhKMGFXOXVMQ0J2Y21sbmFXNHNJR2xrY0VSdmJXRnBiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnWkc5dFlXbHVJRDBnWDNSb2FYTXVYM0psYzI5c2RtVkViMjFoYVc0b2FXUndSRzl0WVdsdUtUdGNibHh1SUNBZ0lHeGxkQ0J0WlhOellXZGxJRDBnZTNSNWNHVTZKMFZZUlVOVlZFVW5MQ0IwYnpvZ1pHOXRZV2x1TENCbWNtOXRPaUJmZEdocGN5NWZhV1J0VlZKTUxDQmliMlI1T2lCN2NtVnpiM1Z5WTJVNklDZHBaR1Z1ZEdsMGVTY3NJRzFsZEdodlpEb2dKM1poYkdsa1lYUmxRWE56WlhKMGFXOXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ2NHRnlZVzF6T2lCN1lYTnpaWEowYVc5dU9pQmhjM05sY25ScGIyNHNJRzl5YVdkcGJqb2diM0pwWjJsdWZYMTlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGMzVnNkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21WemRXeDBMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTjFiSFF1WW05a2VTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGxjbkp2Y2ljc0lISmxjM1ZzZEM1aWIyUjVMbU52WkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdWdVkzSjVjSFJOWlhOellXZGxLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlZ1WTNKNWNIUWdiV1Z6YzJGblpTQW5LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR3hsZENCcGMwaGhibVJUYUdGclpWUjVjR1VnUFNCdFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkb1lXNWtjMmhoYTJVbk8xeHVYRzRnSUNBZ0lDQXZMMmxtSUdseklHNXZkQ0IwYnlCaGNIQnNlU0JsYm1OeWVYQjBhVzl1TENCMGFHVnVJSEpsZEhWeWJuTWdjbVZ6YjJ4MlpWeHVJQ0FnSUNBZ2FXWWdLQ0ZmZEdocGN5NXBjMVJ2VlhObFJXNWpjbmx3ZEdsdmJpQW1KaUFoYVhOSVlXNWtVMmhoYTJWVWVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGxibU55ZVhCMGFXOXVJR1JwYzJGaWJHVmtKeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2MzQnNhWFJsWkZSdlZWSk1JRDBnYldWemMyRm5aUzUwYnk1emNHeHBkQ2duTHljcE8xeHVJQ0FnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1JWVWt3Z1BTQnpjR3hwZEdWa1ZHOVZVa3hiTUYwZ0t5QW5MeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1XekpkSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6TmRPMXh1WEc0Z0lDQWdJQ0JzWlhRZ2FYTlViMFJoZEdGUFltcGxZM1FnUFNCcGMwUmhkR0ZQWW1wbFkzUlZVa3dvWkdGMFlVOWlhbVZqZEZWU1RDazdYRzRnSUNBZ0lDQnNaWFFnYVhOR2NtOXRTSGx3WlhKMGVTQTlJR1JwZG1sa1pWVlNUQ2h0WlhOellXZGxMbVp5YjIwcExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNiaUFnSUNBZ0lHeGxkQ0JwYzFSdlNIbHdaWEowZVNBOUlHUnBkbWxrWlZWU1RDaHRaWE56WVdkbExuUnZLUzUwZVhCbElEMDlQU0FuYUhsd1pYSjBlU2M3WEc1Y2JseHVJQ0FnSUNBZ2FXWWdLR2x6Um5KdmJVaDVjR1Z5ZEhrZ0ppWWdhWE5VYjBoNWNHVnlkSGtwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKVlVrd2dQU0JmZEdocGN5NWZjbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtHMWxjM05oWjJVdVpuSnZiU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFjMlZ5VlZKTUtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQmxlR2x6ZEhNZ1lXNTVJR3RsZVhNZ1ltVjBkMlZsYmlCMGQyOGdkWE5sY25OY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMbVp5YjIwZ0t5QW5QQzArSnlBcklHMWxjM05oWjJVdWRHOWRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hZMmhoZEV0bGVYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhseklEMGdYM1JvYVhNdVgyNWxkME5vWVhSRGNubHdkRzhvYldWemMyRm5aU3dnZFhObGNsVlNUQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTNKbFlYUmxRMmhoZEV0bGVTQmxibU55ZVhCMEp5d2diV1Z6YzJGblpTNW1jbTl0SUNzZ2JXVnpjMkZuWlM1MGJ5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMbVp5YjIwZ0t5QW5QQzArSnlBcklHMWxjM05oWjJVdWRHOWRJRDBnWTJoaGRFdGxlWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1YUdGdVpITm9ZV3RsVUdoaGMyVWdQU0FuYzNSaGNuUklZVzVrVTJoaGEyVW5PMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoamFHRjBTMlY1Y3k1aGRYUm9aVzUwYVdOaGRHVmtJQ1ltSUNGcGMwaGhibVJUYUdGclpWUjVjR1VwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5VVQwUlBJR0Z3Y0d4NUlIUm9aU0J0WlhOellXZGxJRWhCVTBnZ2FuVnpkQ0JzYVd0bElHbHVJR1J2Ym1VZ2FXNGdkR2hsSUdoaGJtUnphR0ZyWlNCd2FHRnpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2wySUQwZ1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxTVllvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1bGJtTnllWEIwUVVWVEtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxVFpYTnphVzl1UzJWNUxDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXNJR2wyS1M1MGFHVnVLR1Z1WTNKNWNIUmxaRlpoYkhWbElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhaaGJIVmxJRDBnZTJsMk9pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR2wyS1N3Z2RtRnNkV1U2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb1pXNWpjbmx3ZEdWa1ZtRnNkV1VwZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsSUQwZ1luUnZZU2hLVTA5T0xuTjBjbWx1WjJsbWVTaDJZV3gxWlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHbHpJR0VnYUdGdVpITm9ZV3RsSUcxbGMzTmhaMlVzSUdwMWMzUWdjbVZ6YjJ4MlpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTklZVzVrVTJoaGEyVlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObExDQnpkR0Z5ZEhNZ1lTQnVaWGNnYUdGdVpITm9ZV3RsSUhCeWIzUnZZMjlzWEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWtiMGhoYm1SVGFHRnJaVkJvWVhObEtHMWxjM05oWjJVc0lHTm9ZWFJMWlhsektTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdVpuSnZiU0FySUNjOExUNG5JQ3NnYldWemMyRm5aUzUwYjEwZ1BTQjJZV3gxWlM1amFHRjBTMlY1Y3p0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaDJZV3gxWlM1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsYm1OeWVYQjBJR2hoYm1SemFHRnJaU0J3Y205MGIyTnZiQ0J3YUdGelpTQW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMMmxtSUdaeWIyMGdhSGx3WlhKMGVTQjBieUJoSUdSaGRHRlBZbXBsWTNSVlVreGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5HY205dFNIbHdaWEowZVNBbUppQnBjMVJ2UkdGMFlVOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdGMFlVOWlhbVZqZENCMllXeDFaU0IwYnlCbGJtTnllWEIwT2lBbkxDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dVhHNGdJQ0FnSUNBZ0lDOHZhV1lnYm04Z2EyVjVJR1Y0YVhOMGN5d2dZM0psWVhSbElHRWdibVYzSUc5dVpTQnBaaUJwY3lCMGFHVWdjbVZ3YjNKMFpYSWdiMllnWkdGMFlVOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCcFppQW9JV1JoZEdGUFltcGxZM1JMWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FYTkllWEJsY25SNVVtVndiM0owWlhJZ1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUlNaWEJ2Y25SbGNsVlNURk41Ym1Ob2IyNXZkWE1vWkdGMFlVOWlhbVZqZEZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2FIbHdaWEowZVNCcGN5QjBhR1VnY21Wd2IzSjBaWElnYjJZZ2RHaGxJR1JoZEdGUFltcGxZM1FnZEdobGJpQm5aVzVsY21GMFpYTWdZU0J6WlhOemFXOXVJR3RsZVZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBoNWNHVnlkSGxTWlhCdmNuUmxjaUFtSmlCcGMwaDVjR1Z5ZEhsU1pYQnZjblJsY2lBOVBUMGdiV1Z6YzJGblpTNW1jbTl0S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpaWE56YVc5dVMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFVtRnVaRzl0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWkdGMFlVOWlhbVZqZEZWU1RGMGdQU0I3YzJWemMybHZia3RsZVRvZ2MyVnpjMmx2Ymt0bGVTd2dhWE5VYjBWdVkzSjVjSFE2SUhSeWRXVjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dlkyaGxZMnNnYVdZZ2RHaGxjbVVnYVhNZ1lXeHlaV0ZrZVNCaElITmxjM05wYjI0Z2EyVjVJR1p2Y2lCMGFHVWdZMmhoZENCeWIyOXRYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhUMkpxWldOMFMyVjVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJoYm1RZ2FXWWdhWE1nZEc4Z1lYQndiSGtnWlc1amNubHdkR2x2Yml3Z1pXNWpjbmx3ZENCMGFHVWdiV1Z6YzJGblpYTmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlUzVwYzFSdlJXNWpjbmx3ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1pHRjBZVTlpYW1WamRFdGxlUzV6WlhOemFXOXVTMlY1TENCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtFcFRUMDR1YzNSeWFXNW5hV1o1S0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcExDQnBkaWt1ZEdobGJpaGxibU55ZVhCMFpXUldZV3gxWlNBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc1bGQxWmhiSFZsSUQwZ1luUnZZU2hLVTA5T0xuTjBjbWx1WjJsbWVTaDdkbUZzZFdVNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9aVzVqY25sd2RHVmtWbUZzZFdVcExDQnBkam9nWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNocGRpbDlLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5VVQwUlBJR0Z3Y0d4NUlIUm9aU0J0WlhOellXZGxJRWhCVTBnZ2FuVnpkQ0JzYVd0bElHbHVJR1J2Ym1VZ2FXNGdkR2hsSUdoaGJtUnphR0ZyWlNCd2FHRnpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVWdQU0J1WlhkV1lXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdibTkwTENCcWRYTjBJSE5sYm1RZ2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCMGFHVWdaMlZ1WlhKaGRHbHZiaUJ2WmlCaElHNWxkeUJ6WlhOemFXOXVJRXRsZVZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnbmQzSnZibWNnYldWemMyRm5aU0IwYnlCa1pXTnllWEIwSnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR1JsWTNKNWNIUk5aWE56WVdkbEtHMWxjM05oWjJVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyUmxZM0o1Y0hRZ2JXVnpjMkZuWlNBbktUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lHeGxkQ0JwYzBoaGJtUlRhR0ZyWlZSNWNHVWdQU0J0WlhOellXZGxMblI1Y0dVZ1BUMDlJQ2RvWVc1a2MyaGhhMlVuTzF4dVhHNGdJQ0FnSUNBdkwybG1JR2x6SUc1dmRDQjBieUJoY0hCc2VTQmxibU55ZVhCMGFXOXVMQ0IwYUdWdUlISmxkSFZ5Ym5NZ2NtVnpiMngyWlZ4dUlDQWdJQ0FnYVdZZ0tDRmZkR2hwY3k1cGMxUnZWWE5sUlc1amNubHdkR2x2YmlBbUppQWhhWE5JWVc1a1UyaGhhMlZVZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Nka1pXTnllWEIwYVc5dUlHUnBjMkZpYkdWa0p5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnNaWFFnYzNCc2FYUmxaRlJ2VlZKTUlEMGdiV1Z6YzJGblpTNTBieTV6Y0d4cGRDZ25MeWNwTzF4dUlDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUlZVa3dnUFNCemNHeHBkR1ZrVkc5VlVreGJNRjBnS3lBbkx5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6SmRJQ3NnSnk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pOZE8xeHVYRzRnSUNBZ0lDQnNaWFFnYVhOVWIwUmhkR0ZQWW1wbFkzUWdQU0JwYzBSaGRHRlBZbXBsWTNSVlVrd29aR0YwWVU5aWFtVmpkRlZTVENrN1hHNGdJQ0FnSUNCc1pYUWdhWE5HY205dFNIbHdaWEowZVNBOUlHUnBkbWxrWlZWU1RDaHRaWE56WVdkbExtWnliMjBwTG5SNWNHVWdQVDA5SUNkb2VYQmxjblI1Snp0Y2JpQWdJQ0FnSUd4bGRDQnBjMVJ2U0hsd1pYSjBlU0E5SUdScGRtbGtaVlZTVENodFpYTnpZV2RsTG5SdktTNTBlWEJsSUQwOVBTQW5hSGx3WlhKMGVTYzdYRzVjYmx4dUlDQWdJQ0FnTHk5cGN5QnBjeUJvZVhCbGNuUjVJSFJ2SUdoNWNHVnlkSGtnWTI5dGJYVnVhV05oZEdsdmJseHVJQ0FnSUNBZ2FXWWdLR2x6Um5KdmJVaDVjR1Z5ZEhrZ0ppWWdhWE5VYjBoNWNHVnlkSGtwSUh0Y2JpQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWkdWamNubHdkQ0JvZVhCbGNuUjVJSFJ2SUdoNWNHVnlkSGtuS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKVlVrd2dQU0JmZEdocGN5NWZjbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtHMWxjM05oWjJVdWRHOHBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RYTmxjbFZTVENrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHTm9ZWFJMWlhseklEMGdYM1JvYVhNdVkyaGhkRXRsZVhOYmJXVnpjMkZuWlM1MGJ5QXJJQ2M4TFQ0bklDc2diV1Z6YzJGblpTNW1jbTl0WFR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdOb1lYUkxaWGx6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeUE5SUY5MGFHbHpMbDl1WlhkRGFHRjBRM0o1Y0hSdktHMWxjM05oWjJVc0lIVnpaWEpWVWt3c0lDZGtaV055ZVhCMEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYUdGMFMyVjVjMXR0WlhOellXZGxMblJ2SUNzZ0p6d3RQaWNnS3lCdFpYTnpZV2RsTG1aeWIyMWRJRDBnWTJoaGRFdGxlWE03WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTm9ZWFJMWlhsekxtRjFkR2hsYm5ScFkyRjBaV1FnSmlZZ0lXbHpTR0Z1WkZOb1lXdGxWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIWmhiSFZsSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaUzVwZGlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOVRaWE56YVc5dVMyVjVMQ0JrWVhSaExDQnBkaWt1ZEdobGJpaGtaV055ZVhCMFpXUkVZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlJsWTNKNWNIUmxaQ0IyWVd4MVpTQW5MQ0JrWldOeWVYQjBaV1JFWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMblpoYkhWbElEMGdaR1ZqY25sd2RHVmtSR0YwWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMGhoYm1SVGFHRnJaVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlrYjBoaGJtUlRhR0ZyWlZCb1lYTmxLRzFsYzNOaFoyVXNJR05vWVhSTFpYbHpLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OXBaaUJwZENCM1lYTWdjM1JoY25SbFpDQmllU0JrYjAxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlIUm9aVzRnWlc1a2N5QjBhR1VnY0hKdmRHOWpiMnhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxJRDA5UFNBbmFHRnVaRk5vWVd0bFJXNWtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWkdWamNubHdkQ0JvWVc1a2MyaGhhMlVnY0hKdmRHOWpiMndnY0doaGMyVWdKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdkMkZ6SUhOMFlYSjBaV1FnWW5rZ1lTQnRaWE56WVdkbExDQjBhR1Z1SUhKbGMyVnVaQ0IwYUdGMElHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWphR0YwUzJWNWMxdHRaWE56WVdkbExuUnZJQ3NnSnp3dFBpY2dLeUJ0WlhOellXZGxMbVp5YjIxZElEMGdkbUZzZFdVdVkyaGhkRXRsZVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9kbUZzZFdVdWJXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0Nka1pXTnllWEIwSUdoaGJtUnphR0ZyWlNCd2NtOTBiMk52YkNCd2FHRnpaU0FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25kM0p2Ym1jZ2JXVnpjMkZuWlNCa2J5QmtaV055ZVhCMEp5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblpYSnliM0lnYjI0Z1pHVmpjbmx3ZENCdFpYTnpZV2RsSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2TDJsbUlHWnliMjBnYUhsd1pYSjBlU0IwYnlCaElHUmhkR0ZQWW1wbFkzUlZVa3hjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhOR2NtOXRTSGx3WlhKMGVTQW1KaUJwYzFSdlJHRjBZVTlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpHRjBZVTlpYW1WamRDQjJZV3gxWlNCMGJ5QmtaV055ZVhCME9pQW5MQ0J0WlhOellXZGxMbUp2WkhrcE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMFMyVjVJRDBnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRk5sYzNOcGIyNUxaWGx6VzJSaGRHRlBZbXBsWTNSVlVreGRPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoVDJKcVpXTjBTMlY1S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDJOb1pXTnJJR2xtSUdseklIUnZJR0Z3Y0d4NUlHVnVZM0o1Y0hScGIyNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlUzVwYzFSdlJXNWpjbmx3ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQmhjbk5sWkZaaGJIVmxJRDBnU2xOUFRpNXdZWEp6WlNoaGRHOWlLRzFsYzNOaFoyVXVZbTlrZVM1MllXeDFaU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2h3WVhKelpXUldZV3gxWlM1cGRpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaVzVqY25sd2RHVmtWbUZzZFdVZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEJoY25ObFpGWmhiSFZsTG5aaGJIVmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkzSjVjSFJCUlZNb1pHRjBZVTlpYW1WamRFdGxlUzV6WlhOemFXOXVTMlY1TENCbGJtTnllWEIwWldSV1lXeDFaU3dnYVhZcExuUm9aVzRvWkdWamNubHdkR1ZrVm1Gc2RXVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NHRnljMlZrVm1Gc2RXVWdQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9aR1ZqY25sd2RHVmtWbUZzZFdVcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlJsWTNKNWNIUmxaQ0JXWVd4MVpTd25MQ0J3WVhKelpXUldZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNBOUlIQmhjbk5sWkZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDJsbUlHNXZkQ3dnYW5WemRDQnlaWFIxY200Z2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeTl5WldwbFkzUW9KMjV2SUhObGMzTnBiMjVMWlhrZ1ptOXlJR05vWVhRZ2NtOXZiU0JtYjNWdVpDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2duZDNKdmJtY2diV1Z6YzJGblpTQjBieUJrWldOeWVYQjBKeWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHUnZUWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRvYzJWdVpHVnlMQ0J5WldObGFYWmxjaWtnZTF4dUlDQWdJR052Ym5OdmJHVXViRzluS0Nka2IwMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVPaUFuTENCelpXNWtaWElzSUhKbFkyVnBkbVZ5S1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wVlZKTU8xeHVYRzRnSUNBZ0x5OGdZMmhsWTJzZ2FXWWdkR2hsSUhObGJtUmxjaUJwY3lCaElHUmhkR0ZQWW1wbFkzUWdZVzVrSUdsbUlITnZJSE4wYjNKbGN5QjBhR0YwSUhaaGJIVmxYRzRnSUNBZ2JHVjBJSEpsY0c5eWRHVnlWVkpNSUQwZ1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFVtVndiM0owWlhKVlVreFRlVzVqYUc5dWIzVnpLSE5sYm1SbGNpazdYRzRnSUNBZ2FXWWdLSEpsY0c5eWRHVnlWVkpNS1NCN1hHNGdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JRDBnYzJWdVpHVnlPMXh1SUNBZ0lDQWdjMlZ1WkdWeUlEMGdjbVZ3YjNKMFpYSlZVa3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUcxelp5QTlJSHRjYmlBZ0lDQWdJSFJ2T2lCeVpXTmxhWFpsY2l4Y2JpQWdJQ0FnSUdaeWIyMDZJSE5sYm1SbGNpeGNiaUFnSUNBZ0lHTmhiR3hpWVdOck9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQmliMlI1T2lCN2FHRnVaSE5vWVd0bFVHaGhjMlU2SUNkemRHRnlkRWhoYm1SVGFHRnJaU2NzSUdsbmJtOXlaVG9nSjJsbmJtOXlaVTFsYzNOaFoyVW5mVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJR2xtSUNnaGMyVnVaR1Z5SUh4OElDRnlaV05sYVhabGNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZxWldOMEtDZHpaVzVrWlhJZ2IzSWdjbVZqWldsMlpYSWdiV2x6YzJsdVp5QnZiaUJrYjAxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUp5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR3hsZENCamFHRjBTMlY1Y3lBOUlGOTBhR2x6TG1Ob1lYUkxaWGx6VzNObGJtUmxjaUFySUNjOExUNG5JQ3NnY21WalpXbDJaWEpkTzF4dUlDQWdJQ0FnYkdWMElIVnpaWEpWVWt3Z1BTQmZkR2hwY3k1ZmNtVm5hWE4wY25rdVoyVjBTSGx3WlhKMGVVOTNibVZ5S0hObGJtUmxjaWs3WEc1Y2JpQWdJQ0FnSUdsbUlDaDFjMlZ5VlZKTUtTQjdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmphR0YwUzJWNWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHTmhiR3hpWVdOcklIUnZJSEpsYzI5c2RtVWdkMmhsYmlCbWFXNXBjMmdnZEdobElHMTFkSFZoYkNCaGRYUm9aVzUwYVdOaGRHbHZibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnlaWE52YkhabFpDQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25ZMkZzYkdKaFkyc2dkbUZzZFdVNkp5d2dkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQnRjMmN1WTJGc2JHSmhZMnNnUFNCeVpYTnZiSFpsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnRjMmN1WkdGMFlVOWlhbVZqZEZWU1RDQTlJR1JoZEdGUFltcGxZM1JWVWt3N1hHNWNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeUE5SUY5MGFHbHpMbDl1WlhkRGFHRjBRM0o1Y0hSdktHMXpaeXdnZFhObGNsVlNUQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTJoaGRFdGxlWE5iYzJWdVpHVnlJQ3NnSnp3dFBpY2dLeUJ5WldObGFYWmxjbDBnUFNCamFHRjBTMlY1Y3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoamFHRjBTMlY1Y3k1aGRYUm9aVzUwYVdOaGRHVmtLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzNSaGNuUlRaWE56YVc5dVMyVjVSWGhqYUdGdVoyVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiem9nYzJWdVpHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nY21WalpXbDJaWEpjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbVJoZEdGUFltcGxZM1JWVWt3Z1BTQmtZWFJoVDJKcVpXTjBWVkpNTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5elpXNWtVbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVLSE4wWVhKMFUyVnpjMmx2Ymt0bGVVVjRZMmhoYm1kbExDQmphR0YwUzJWNWN5a3VkR2hsYmloMllXeDFaU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtIWmhiSFZsTG0xbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ25aWGhqYUdGdVoyVWdiMllnWTJoaGRDQnpaWE56YVc5dVMyVjVJR2x1YVhScFlYUmxaQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJSdlNHRnVaRk5vWVd0bFVHaGhjMlVvYlhObkxDQmphR0YwUzJWNWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25aWEp5YjNJZ2IyNGdaRzlOZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2YmljcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0JmWkc5SVlXNWtVMmhoYTJWUWFHRnpaU2h0WlhOellXZGxMQ0JqYUdGMFMyVjVjeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkb1lXNWtjMmhoYTJWVWVYQmxKeWs3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElHaGhibVJ6YUdGclpWUjVjR1VnUFNCdFpYTnpZV2RsTG1KdlpIa3VhR0Z1WkhOb1lXdGxVR2hoYzJVN1hHNGdJQ0FnSUNCc1pYUWdhWFk3WEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCN2ZUdGNiaUFnSUNBZ0lITjNhWFJqYUNBb2FHRnVaSE5vWVd0bFZIbHdaU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNOMFlYSjBTR0Z1WkZOb1lXdGxKenBjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1clpYbHpMbVp5YjIxU1lXNWtiMjBnUFNCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVlNZVzVrYjIwb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpkR0Z5ZEVoaGJtUlRhR0ZyWlUxelp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdWRHOHNYRzRnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMbVp5YjIwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmMyVnVaR1Z5U0dWc2JHOG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGphR0YwUzJWNWN5NXJaWGx6TG1aeWIyMVNZVzVrYjIwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbk5sYm1SbGNraGxiR3h2SUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2MzUmhjblJJWVc1a1UyaGhhMlZOYzJjc0lIVnVaR1ZtYVc1bFpDd2dZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1YldWemMyRm5aVWx1Wm04cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kyaGxZMnNnYVdZZ2QyRnpJSFJvWlNCbGJtTnllWEIwSUdaMWJtTjBhVzl1SUc5eUlIUm9aU0J0ZFhSMVlXd2dZWFYwYUdWdWRHbGpZWFJwYjI0Z2RHaGhkQ0J5WlhGMVpYTjBJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSE4wWVhKMElHOW1JSFJvWlNCb1lXNWtVMmhoYTJWUWFHRnpaUzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhoZEV0bGVYTXVhVzVwZEdsaGJFMWxjM05oWjJVcElIdHlaWE52YkhabEtIdHRaWE56WVdkbE9pQnpkR0Z5ZEVoaGJtUlRhR0ZyWlUxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdVpuSnZiU0FySUNjOExUNG5JQ3NnYldWemMyRm5aUzUwYjEwZ1BTQmphR0YwUzJWNWN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtITjBZWEowU0dGdVpGTm9ZV3RsVFhObktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM05sYm1SbGNraGxiR3h2SnpwY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkelpXNWtaWEpJWld4c2J5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1oaGJtUnphR0ZyWlVocGMzUnZjbmt1YzJWdVpHVnlTR1ZzYkc4Z1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtWnliMjFTWVc1a2IyMGdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1MGIxSmhibVJ2YlNBOUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVkpoYm1SdmJTZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSE5sYm1SbGNraGxiR3h2VFhObklEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJoaGJtUnphR0ZyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzUwYnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaSE5vWVd0bFVHaGhjMlU2SUNkeVpXTmxhWFpsY2tobGJHeHZKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9ZMmhoZEV0bGVYTXVhMlY1Y3k1MGIxSmhibVJ2YlNsY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbWhoYm1SemFHRnJaVWhwYzNSdmNua3VjbVZqWldsMlpYSklaV3hzYnlBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tITmxibVJsY2tobGJHeHZUWE5uTENCMWJtUmxabWx1WldRc0lHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsR2NtOXRMbTFsYzNOaFoyVkpibVp2S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIdHRaWE56WVdkbE9pQnpaVzVrWlhKSVpXeHNiMDF6Wnl3Z1kyaGhkRXRsZVhNNklHTm9ZWFJMWlhsemZTazdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozSmxZMlZwZG1WeVNHVnNiRzhuT2x4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNKbFkyVnBkbVZ5U0dWc2JHOG5LVHRjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1TG5KbFkyVnBkbVZ5U0dWc2JHOGdQU0JmZEdocGN5NWZabWxzZEdWeVRXVnpjMkZuWlZSdlNHRnphQ2h0WlhOellXZGxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1S0cxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNHBMblJvWlc0b0tIWmhiSFZsS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxjbEIxWW14cFkwdGxlU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1WTI5dWRHVnVkSE11Ym05dVkyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEJ5WlcxaGMzUmxjbE5sWTNKbGRDQTlJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlZCTlV5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSFJ2VW1GdVpHOXRJRDBnYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMbUZ6YzJWeWRHbHZiaUE5SUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b2VYQmxjblI1Vkc4dWNIVmliR2xqUzJWNUlEMGdjbVZqWldsMlpYSlFkV0pzYVdOTFpYazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b2VYQmxjblI1Vkc4dWRYTmxja2xFSUNBZ0lEMGdkbUZzZFdVdVkyOXVkR1Z1ZEhNdVpXMWhhV3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NXJaWGx6TG5SdlVtRnVaRzl0SUNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kRzlTWVc1a2IyMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTV3Y21WdFlYTjBaWEpMWlhrZ1BTQndjbVZ0WVhOMFpYSlRaV055WlhRN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMjVqWVhSTFpYa2dQU0JmZEdocGN5NWpjbmx3ZEc4dVkyOXVZMkYwVUUxVGQybDBhRkpoYm1SdmJYTW9jSEpsYldGemRHVnlVMlZqY21WMExDQmphR0YwUzJWNWN5NXJaWGx6TG5SdlVtRnVaRzl0TENCamFHRjBTMlY1Y3k1clpYbHpMbVp5YjIxU1lXNWtiMjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsVFdGemRHVnlVMlZqY21WMEtHTnZibU5oZEV0bGVTd2dKMjFsYzNOaFoyVklhWE4wYjNKcFl5Y2dLeUJqYUdGMFMyVjVjeTVyWlhsekxuUnZVbUZ1Wkc5dElDc2dZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMmRsYm1WeVlYUmxJSFJvWlNCdFlYTjBaWElnYTJWNVhHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpZ29iV0Z6ZEdWeVMyVjVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtMWhjM1JsY2t0bGVTQTlJRzFoYzNSbGNrdGxlVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVXRsZVhNb2JXRnpkR1Z5UzJWNUxDQW5hMlY1SUdWNGNHRnVjMmx2YmljZ0t5QmphR0YwUzJWNWN5NXJaWGx6TG5SdlVtRnVaRzl0SUNzZ1kyaGhkRXRsZVhNdWEyVjVjeTVtY205dFVtRnVaRzl0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5blpXNWxjbUYwWlNCMGFHVWdjM2x0YldWMGNtbGpJR0Z1WkNCb1lYTm9JR3RsZVhOY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtDaHJaWGx6S1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVlJ2VTJWemMybHZia3RsZVNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0d0bGVYTmJNRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJWTmxjM05wYjI1TFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVWUnZTR0Z6YUV0bGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHdGxlWE5iTWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVWhoYzJoTFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pOZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsMklEMGdYM1JvYVhNdVkzSjVjSFJ2TG1kbGJtVnlZWFJsU1ZZb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxMbWwySUQwZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaHBkaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdoaGMyZ2dkR2hsSUhaaGJIVmxJR0Z1WkNCMGFHVWdhWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJQUkU4Z1lXUmtJSFJvWlNCdFpYTnpZV2RsSUdacFpXeGtjeUIwYnlCMGFHVWdhR0Z6YUZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVvWVhOb1NFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRTR0Z6YUV0bGVTd2dKMjlySnlBcklHbDJLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0Nob1lYTm9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNW9ZWE5vSUQwZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaG9ZWE5vS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5bGJtTnllWEIwSUhSb1pTQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbVZ1WTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVk5sYzNOcGIyNUxaWGtzSUNkdmF5Y3NJR2wyS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtDaGxibU55ZVhCMFpXUkVZWFJoS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzV6ZVcxbGRISnBZMFZ1WTNKNWNIUnBiMjRnUFNCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHVnVZM0o1Y0hSbFpFUmhkR0VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJTVTBFb1kyaGhkRXRsZVhNdWFIbHdaWEowZVZSdkxuQjFZbXhwWTB0bGVTd2dZMmhoZEV0bGVYTXVhMlY1Y3k1d2NtVnRZWE4wWlhKTFpYa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlnb1pXNWpjbmx3ZEdWa1ZtRnNkV1VwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1WVhOemVXMWxkSEpwWTBWdVkzSjVjSFJwYjI0Z1BTQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR1Z1WTNKNWNIUmxaRlpoYkhWbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFsYzNOaFoyVlRkSEoxWTNSMWNtVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZG9ZVzVrYzJoaGEyVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiem9nYldWemMyRm5aUzVtY205dExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1WkhOb1lXdGxVR2hoYzJVNklDZHpaVzVrWlhKRFpYSjBhV1pwWTJGMFpTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMWxjM05oWjJWVWIwaGhjMmdnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsVTNSeWRXTjBkWEpsTENCamFHRjBTMlY1Y3k1clpYbHpMbkJ5WlcxaGMzUmxja3RsZVN3Z1kyaGhkRXRsZVhNdWFIbHdaWEowZVVaeWIyMHViV1Z6YzJGblpVbHVabThwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG5OcFoyNVNVMEVvWTJoaGRFdGxlWE11YUhsd1pYSjBlVVp5YjIwdWNISnBkbUYwWlV0bGVTd2dTbE5QVGk1emRISnBibWRwWm5rb1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVNrZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNodFpYTnpZV2RsVkc5SVlYTm9LU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtITnBaMjVoZEhWeVpTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExuTnBaMjVoZEhWeVpTQTlJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYzJsbmJtRjBkWEpsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1WeVNHVnNiRzlOYzJjZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJ6b2diV1Z6YzJGblpTNW1jbTl0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmliMlI1T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaSE5vWVd0bFVHaGhjMlU2SUNkelpXNWtaWEpEWlhKMGFXWnBZMkYwWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdKMGIyRW9TbE5QVGk1emRISnBibWRwWm5rb2RtRnNkV1VwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1elpXNWtaWEpEWlhKMGFXWnBZMkYwWlNBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tISmxZMlZwZG1WeVNHVnNiRzlOYzJjc0lDZHZheWNnS3lCcGRpd2dZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1YldWemMyRm5aVWx1Wm04cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0h0dFpYTnpZV2RsT2lCeVpXTmxhWFpsY2tobGJHeHZUWE5uTENCamFHRjBTMlY1Y3pvZ1kyaGhkRXRsZVhOOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUgwc0lHVnljbTl5SUQwK0lISmxhbVZqZENobGNuSnZjaWtwTzF4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R6Wlc1a1pYSkRaWEowYVdacFkyRjBaU2M2WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYzJWdVpHVnlRMlZ5ZEdsbWFXTmhkR1VuS1R0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnY21WalpXbDJaV1JXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1S0cxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNHBMblJvWlc0b0tIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkwxUlBSRThnZG1WeWFXWjVJSFJvWlNCemFXZHVZWFIxY21WY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCbGJtTnllWEIwWldSUVRWTWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hKbFkyVnBkbVZrVm1Gc2RXVXVZWE56ZVcxbGRISnBZMFZ1WTNKNWNIUnBiMjRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhObGJtUmxjbEIxWW14cFkwdGxlU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RtRnNkV1V1WTI5dWRHVnVkSE11Ym05dVkyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFIbHdaWEowZVZSdkxtRnpjMlZ5ZEdsdmJpQTlJRzFsYzNOaFoyVXVZbTlrZVM1cFpHVnVkR2wwZVM1aGMzTmxjblJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVWRzh1Y0hWaWJHbGpTMlY1SUQwZ2MyVnVaR1Z5VUhWaWJHbGpTMlY1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMblZ6WlhKSlJDQWdJQ0E5SUhaaGJIVmxMbU52Ym5SbGJuUnpMbVZ0WVdsc08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZM0o1Y0hSU1UwRW9ZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1Y0hKcGRtRjBaVXRsZVN3Z1pXNWpjbmx3ZEdWa1VFMVRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkRmNuSnZjaUJrZFhKcGJtY2dZWFYwYUdWdWRHbGpZWFJwYjI0Z2IyWWdhV1JsYm5ScGRIa25LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeTl2WW5SaGFXNGdkR2hsSUZCeVpXMWhjM1JsY2t0bGVTQjFjMmx1WnlCMGFHVWdjSEpwZG1GMFpTQnJaWGxjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0hCdGN5QTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWNISmxiV0Z6ZEdWeVMyVjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29jRzF6S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElITnBaMjVoZEhWeVpTQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvY21WalpXbDJaV1JXWVd4MVpTNXphV2R1WVhSMWNtVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WalpXbDJaV1J0YzJkVWIwaGhjMmdnUFNCZmRHaHBjeTVmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsTENCamFHRjBTMlY1Y3k1clpYbHpMbkJ5WlcxaGMzUmxja3RsZVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWRtVnlhV1o1VWxOQktHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsVWJ5NXdkV0pzYVdOTFpYa3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtHTm9ZWFJMWlhsekxtaGhibVJ6YUdGclpVaHBjM1J2Y25rcElDc2dTbE5QVGk1emRISnBibWRwWm5rb2NtVmpaV2wyWldSdGMyZFViMGhoYzJncExDQnphV2R1WVhSMWNtVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIyWVd4cFpHRjBaWE1nZEdobElITnBaMjVoZEhWeVpTQnlaV05sYVhabFpGeHVJQ0FnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9jMmxuYmxaaGJHbGtZWFJwYjI1U1pYTjFiSFFnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jMmxuYm1GMGRYSmxJSFpoYkdsa1lYUnBiMjRnY21WemRXeDBJQ2NzSUhOcFoyNVdZV3hwWkdGMGFXOXVVbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMjVqWVhSTFpYa2dQU0JmZEdocGN5NWpjbmx3ZEc4dVkyOXVZMkYwVUUxVGQybDBhRkpoYm1SdmJYTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1d2NtVnRZWE4wWlhKTFpYa3NJR05vWVhSTFpYbHpMbXRsZVhNdWRHOVNZVzVrYjIwc0lHTm9ZWFJMWlhsekxtdGxlWE11Wm5KdmJWSmhibVJ2YlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWTllYTjBaWEpUWldOeVpYUW9ZMjl1WTJGMFMyVjVMQ0FuYldWemMyRm5aVWhwYzNSdmNtbGpKeUFySUdOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMGdLeUJqYUdGMFMyVjVjeTVyWlhsekxtWnliMjFTWVc1a2IyMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJuWlc1bGNtRjBaWE1nZEdobElHMWhjM1JsY2lCclpYbHpJR1p5YjIwZ2RHaGxJRkJ5WlcxaGMzUmxjaUJyWlhrZ1lXNWtJSFJvWlNCeVlXNWtiMjF6WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlodFlYTjBaWEpMWlhrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTV0WVhOMFpYSkxaWGtnUFNCdFlYTjBaWEpMWlhrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWTFpYbHpLRzFoYzNSbGNrdGxlU3dnSjJ0bGVTQmxlSEJoYm5OcGIyNG5JQ3NnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTQXJJR05vWVhSTFpYbHpMbXRsZVhNdVpuSnZiVkpoYm1SdmJTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR2RsYm1WeVlYUmxjeUIwYUdVZ2MzbHRiV1YwY21saklHdGxlWE1nZEc4Z1ltVWdkWE5sWkNCcGJpQjBhR1VnYzNsdGJXVjBjbWxqSUdWdVkzSjVjSFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHdGxlWE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVk5sYzNOcGIyNUxaWGtnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hyWlhseld6QmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVlJ2VTJWemMybHZia3RsZVNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0d0bGVYTmJNVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJVaGhjMmhMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoclpYbHpXekpkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlNHRnphRXRsZVNBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0d0bGVYTmJNMTBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhWFlnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa1ZtRnNkV1V1YVhZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa1ZtRnNkV1V1YzNsdFpYUnlhV05GYm1OeWVYQjBhVzl1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1a1pXTnllWEIwUVVWVEtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVlJ2VTJWemMybHZia3RsZVN3Z1pHRjBZU3dnYVhZcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnZlNrdWRHaGxiaWhrWldOeWVYQjBaV1JFWVhSaElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJSbFkzSjVjSFJsWkVSaGRHRW5MQ0JrWldOeWVYQjBaV1JFWVhSaEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1elpXNWtaWEpEWlhKMGFXWnBZMkYwWlNBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tHMWxjM05oWjJVc0lHUmxZM0o1Y0hSbFpFUmhkR0VnS3lCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JvWVhOb1VtVmpaV2wyWldRZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWFHRnphQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1ZG1WeWFXWjVTRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMGhoYzJoTFpYa3NJR1JsWTNKNWNIUmxaRVJoZEdFZ0t5QnBkaXdnYUdGemFGSmxZMlZwZG1Wa0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvZG1WeWFXWnBaV1JJWVhOb0lDQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0ozSmxjM1ZzZENCdlppQm9ZWE5vSUhabGNtbG1hV05oZEdsdmJpQW5MQ0IyWlhKcFptbGxaRWhoYzJncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRpQTlJRjkwYUdsekxtTnllWEIwYnk1blpXNWxjbUYwWlVsV0tDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hWFlwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrc0lDZHZheUVuTENCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJQUkU4Z1lYQndiSGtnYUdGemFDd2dhblZ6ZENCc2FXdGxJR2x6SUdSdmJtVWdhVzRnZEdobElIQnlaWFpwYjNWeklITjBaWEFnYldWemMyRm5aVnh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvWlc1amNubHdkR1ZrVm1Gc2RXVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWRtRnNkV1VnUFNCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHVnVZM0o1Y0hSbFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMmhoYm1SemFHRnJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2T2lCdFpYTnpZV2RsTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUcxbGMzTmhaMlV1ZEc4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2dKM0psWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1luUnZZU2hLVTA5T0xuTjBjbWx1WjJsbWVTaDJZV3gxWlNrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbWhoYm1SemFHRnJaVWhwYzNSdmNua3VjbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlN3Z0oyOXJJU2NnS3lCcGRpd2dZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1YldWemMyRm5aVWx1Wm04cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11WVhWMGFHVnVkR2xqWVhSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJ5WldObGFYWmxja1pwYm1semFHVmtUV1Z6YzJGblpTd2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozSmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSnpwY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkeVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU2NwTzF4dUlDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtRjFkR2hsYm5ScFkyRjBaV1FnUFNCMGNuVmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdVdWFYWXBPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTI5a1pTaDJZV3gxWlM1MllXeDFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1WkdWamNubHdkRUZGVXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMU5sYzNOcGIyNUxaWGtzSUdSaGRHRXNJR2wyS1M1MGFHVnVLR1JsWTNKNWNIUmxaRVJoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMlJsWTNKNWNIUmxaRVJoZEdFbkxDQmtaV055ZVhCMFpXUkVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbWhoYm1SemFHRnJaVWhwYzNSdmNua3VjbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmtaV055ZVhCMFpXUkVZWFJoSUNzZ2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QnBaaUIwYUdWeVpTQjNZWE1nWVc0Z2FXNXBkR2xoYkNCdFpYTnpZV2RsSUhSb1lYUWdkMkZ6SUdKc2IyTnJaV1FnWVc1a0lITmxibVFnYVhSY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamFHRjBTMlY1Y3k1cGJtbDBhV0ZzVFdWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXNXBkR2xoYkUxbGMzTmhaMlVnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJOeVpXRjBaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmphR0YwUzJWNWN5NXBibWwwYVdGc1RXVnpjMkZuWlM1aWIyUjVMblpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJQUkU4Z1lYQndiSGtnYUdGemFDd2dhblZ6ZENCc2FXdGxJR2x6SUdSdmJtVWdhVzRnZEdobElIQnlaWFpwYjNWeklITjBaWEFnYldWemMyRm5aVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9lMjFsYzNOaFoyVTZJR2x1YVhScFlXeE5aWE56WVdkbExDQmphR0YwUzJWNWN6b2dZMmhoZEV0bGVYTjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDNObGJtUnpJSFJvWlNCelpYTnphVzl1UzJWNUlIUnZJSFJvWlNCemRXSnpZM0pwWW1WeUlHaDVjR1Z5ZEhsY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5elpXNWtVbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVLRzFsYzNOaFoyVXNJR05vWVhSTFpYbHpLUzUwYUdWdUtIWmhiSFZsSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozSmxjRzl5ZEdWeVUyVnpjMmx2Ymt0bGVTYzZYRzVjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnZG1Gc2RXVkpWbUZ1WkVoaGMyZ2dQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9iV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR2hoYzJnZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFpoYkhWbFNWWmhibVJJWVhOb0xtaGhjMmdwTzF4dUlDQWdJQ0FnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaVWxXWVc1a1NHRnphQzVwZGlrN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdWdVkzSjVjSFJsWkZaaGJIVmxJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaVWxXWVc1a1NHRnphQzUyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElIQmhjbk5sWkZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpaWE56YVc5dVMyVjVPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBWVkpNTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxja0ZqYTI1dmQyeGxaR2RsVFhObk8xeHVYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZM0o1Y0hSQlJWTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Vkc5VFpYTnphVzl1UzJWNUxDQmxibU55ZVhCMFpXUldZV3gxWlN3Z2FYWXBMblJvWlc0b1pHVmpjbmx3ZEdWa1ZtRnNkV1VnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSnpaV1JXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvWkdWamNubHdkR1ZrVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnpjMmx2Ymt0bGVTQTlJRjkwYUdsekxtTnllWEIwYnk1a1pXTnZaR1VvY0dGeWMyVmtWbUZzZFdVdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBOUlIQmhjbk5sWkZaaGJIVmxMbVJoZEdGUFltcGxZM1JWVWt3N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbFZHOUlZWE5vSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlN3Z1pHVmpjbmx3ZEdWa1ZtRnNkV1VnS3lCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVkbVZ5YVdaNVNFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIwaGhjMmhMWlhrc0lHMWxjM05oWjJWVWIwaGhjMmdzSUdoaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlob1lYTm9VbVZ6ZFd4MElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmFHRnphQ0J6ZFdOalpYTnpablZzYkhrZ2RtRnNhV1JoZEdWa0lDY3NJR2hoYzJoU1pYTjFiSFFwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWkdGMFlVOWlhbVZqZEZWU1RGMGdQU0FnZTNObGMzTnBiMjVMWlhrNklITmxjM05wYjI1TFpYa3NJR2x6Vkc5RmJtTnllWEIwT2lCMGNuVmxmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhWFlnUFNCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVkpWaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWFYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0dsMktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU55ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVVaeWIyMVRaWE56YVc5dVMyVjVMQ0FuYjJzaElTY3NJR2wyS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHVnVZM0o1Y0hSbFpGWmhiSFZsSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVmpaV2wyWlhKQlkydHViM2RzWldSblpVMXpaeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMmhoYm1SemFHRnJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2T2lCdFpYTnpZV2RsTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUcxbGMzTmhaMlV1ZEc4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2MyaGhhMlZRYUdGelpUb2dKM0psWTJWcGRtVnlRV05yYm05M2JHVmtaMlVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG5aaGJIVmxJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNobGJtTnllWEIwWldSV1lXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aVlJ2U0dGemFDQTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LSEpsWTJWcGRtVnlRV05yYm05M2JHVmtaMlZOYzJjc0lDZHZheUVoSnlBcklHbDJMQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVSbkp2YlM1dFpYTnpZV2RsU1c1bWJ5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVhR0Z6YUVoTlFVTW9ZMmhoZEV0bGVYTXVhMlY1Y3k1b2VYQmxjblI1Um5KdmJVaGhjMmhMWlhrc0lHMWxjM05oWjJWVWIwaGhjMmdwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b2FHRnphR1ZrVFdWemMyRm5aU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHVZV3hXWVd4MVpTQTlJR0owYjJFb1NsTlBUaTV6ZEhKcGJtZHBabmtvZTNaaGJIVmxPaUIyWVd4MVpTNTJZV3gxWlN3Z2FHRnphRG9nWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNob1lYTm9aV1JOWlhOellXZGxLU3dnYVhZNklIWmhiSFZsTG1sMmZTa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV05sYVhabGNrRmphMjV2ZDJ4bFpHZGxUWE5uTG1KdlpIa3VkbUZzZFdVZ1BTQm1hVzVoYkZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoN2JXVnpjMkZuWlRvZ2NtVmpaV2wyWlhKQlkydHViM2RzWldSblpVMXpaeXdnWTJoaGRFdGxlWE02SUdOb1lYUkxaWGx6ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psWTJWcGRtVnlRV05yYm05M2JHVmtaMlVuT2x4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNKbFkyVnBkbVZ5UVdOcmJtOTNiR1ZrWjJVbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnlaV05sYVhabFpIWmhiSFZsU1ZaaGJtUklZWE5vSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCeVpXTmxhWFpsWkVoaGMyZ2dQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hKbFkyVnBkbVZrZG1Gc2RXVkpWbUZ1WkVoaGMyZ3VhR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdhWFlnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa2RtRnNkV1ZKVm1GdVpFaGhjMmd1YVhZcE8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCeVpXTmxhWFpsWkVWdVkzSjVjSFJsWkZaaGJIVmxJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoeVpXTmxhWFpsWkhaaGJIVmxTVlpoYm1SSVlYTm9MblpoYkhWbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NWtaV055ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTd2djbVZqWldsMlpXUkZibU55ZVhCMFpXUldZV3gxWlN3Z2FYWXBMblJvWlc0b1pHVmpjbmx3ZEdWa1ZtRnNkV1VnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTd2daR1ZqY25sd2RHVmtWbUZzZFdVZ0t5QnBkaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMblpsY21sbWVVaE5RVU1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOUlZWE5vUzJWNUxDQm1hV3gwWlhKbFpFMWxjM05oWjJVc0lISmxZMlZwZG1Wa1NHRnphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlob1lYTm9VbVZ6ZFd4MElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RvWVhOb1VtVnpkV3gwSUNjc0lHaGhjMmhTWlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR05oYkd4aVlXTnJJRDBnWTJoaGRFdGxlWE11WTJGc2JHSmhZMnM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5Z25hR0Z1WkZOb1lXdGxSVzVrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2RvWVc1a1UyaGhhMlZGYm1RbktUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZjMlZ1WkZKbGNHOXlkR1Z5VTJWemMybHZia3RsZVNodFpYTnpZV2RsTENCamFHRjBTMlY1Y3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUhObGMzTnBiMjVMWlhsQ2RXNWtiR1VnUFNCZmRHaHBjeTVrWVhSaFQySnFaV04wVTJWemMybHZia3RsZVhOYlkyaGhkRXRsZVhNdVpHRjBZVTlpYW1WamRGVlNURjA3WEc0Z0lDQWdiR1YwSUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp6dGNiaUFnSUNCc1pYUWdkbUZzZFdWVWIwVnVZM0o1Y0hRN1hHNGdJQ0FnYkdWMElITmxjM05wYjI1TFpYazdYRzRnSUNBZ2JHVjBJR2wyTzF4dUlDQWdJR3hsZENCMllXeDFaU0E5SUh0OU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQXZMMmxtSUhSb1pYSmxJR2x6SUc1dmRDQjVaWFFnWVNCelpYTnphVzl1SUV0bGVTd2daMlZ1WlhKaGRHVnpJR0VnYm1WM0lHOXVaVnh1SUNBZ0lDQWdhV1lnS0NGelpYTnphVzl1UzJWNVFuVnVaR3hsS1NCN1hHNGdJQ0FnSUNBZ0lITmxjM05wYjI1TFpYa2dQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWU1lXNWtiMjBvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyTm9ZWFJMWlhsekxtUmhkR0ZQWW1wbFkzUlZVa3hkSUQwZ2UzTmxjM05wYjI1TFpYazZJSE5sYzNOcGIyNUxaWGtzSUdselZHOUZibU55ZVhCME9pQjBjblZsZlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVMWlhrZ1BTQnpaWE56YVc5dVMyVjVRblZ1Wkd4bExuTmxjM05wYjI1TFpYazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoYkhWbFZHOUZibU55ZVhCMElEMGdTbE5QVGk1emRISnBibWRwWm5rb2UzWmhiSFZsT2lCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtITmxjM05wYjI1TFpYa3BMQ0JrWVhSaFQySnFaV04wVlZKTU9pQmphR0YwUzJWNWN5NWtZWFJoVDJKcVpXTjBWVkpNZlNrN1hHNWNiaUFnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjYmlBZ0lDQWdJSFpoYkhWbExtbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNocGRpazdYRzRnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1Wlc1amNubHdkRUZGVXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbEdjbTl0VTJWemMybHZia3RsZVN3Z2RtRnNkV1ZVYjBWdVkzSjVjSFFzSUdsMktTNTBhR1Z1S0dWdVkzSjVjSFJsWkZaaGJIVmxJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNsTmxjM05wYjI1TFpYbE5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYRzRnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQW5jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHVnVZM0o1Y0hSbFpGWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVUWE5uTENCMllXeDFaVlJ2Ulc1amNubHdkQ0FySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVvWVhOb1NFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRTR0Z6YUV0bGVTd2dabWxzZEdWeVpXUk5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMHBMblJvWlc0b2FHRnphR1ZrVFdWemMyRm5aU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhaaGJIVmxWMmwwYUVoaGMyZ2dQU0JpZEc5aEtFcFRUMDR1YzNSeWFXNW5hV1o1S0h0MllXeDFaVG9nY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1VFhObkxtSnZaSGt1ZG1Gc2RXVXNJR2hoYzJnNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUdWa1RXVnpjMkZuWlNrc0lHbDJPaUIyWVd4MVpTNXBkbjBwS1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNsTmxjM05wYjI1TFpYbE5jMmN1WW05a2VTNTJZV3gxWlNBOUlIWmhiSFZsVjJsMGFFaGhjMmc3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvZTIxbGMzTmhaMlU2SUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxkSFZ5Ym5NZ2RHaGxJSEpsY0c5eWRHVnlJR0Z6YzI5amFXRjBaV1FnZEc4Z2RHaGxJR1JoZEdGUFltcGxZM1FnVlZKTVhHNGdJQ29nUUhCaGNtRnRJQ0FnZTFOMGNtbHVaMzBnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkQ0IxY214Y2JpQWdLaUJBY21WMGRYSnVJQ0FnZTFOMGNtbHVaMzBnSUhKbGNHOXlkR1Z5SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBJSFZ5YkNCeVpYQnZjblJsY2x4dUlDQXFMMXh1SUNCZloyVjBTSGx3WlhKMGVVWnliMjFFWVhSaFQySnFaV04wS0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQnNaWFFnYzNCc2FYUmxaRlZTVENBOUlHUmhkR0ZQWW1wbFkzUlZVa3d1YzNCc2FYUW9KeThuS1R0Y2JpQWdJQ0FnSUd4bGRDQm1hVzVoYkZWU1RDQTlJSE53YkdsMFpXUlZVa3hiTUYwZ0t5QW5MeThuSUNzZ2MzQnNhWFJsWkZWU1RGc3lYU0FySUNjdkp5QXJJSE53YkdsMFpXUlZVa3hiTTEwN1hHNWNiaUFnSUNBZ0lDOHZJR05vWldOcklHbG1JR2x6SUhSb1pTQmpjbVZoZEc5eUlHOW1JSFJvWlNCb2VYQmxjblI1WEc0Z0lDQWdJQ0JzWlhRZ2NtVndiM0owWlhKVlVrd2dQU0JmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJTWlhCdmNuUmxjbFZTVEZONWJtTm9iMjV2ZFhNb1ptbHVZV3hWVWt3cE8xeHVYRzRnSUNBZ0lDQnBaaUFvY21Wd2IzSjBaWEpWVWt3cElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWEJ2Y25SbGNsVlNUQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVnlaU0JwY3lCaGJISmxZV1I1SUdGdUlHRnpjMjlqYVdGMGFXOXVJR1p5YjIwZ1lXNGdhSGx3WlhKMGVWVlNUQ0IwYnlCMGFHVWdaR0YwWVU5aWFtVmpkRnh1SUNBZ0lDQWdJQ0JzWlhRZ2MzUnZjbVZrVW1Wd2IzSjBaWEpWVWt3Z1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMGMwbGtaVzUwYVhSNVcyWnBibUZzVlZKTVhUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2MzUnZjbVZrVW1Wd2IzSjBaWEpWVWt3cElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSE4wYjNKbFpGSmxjRzl5ZEdWeVZWSk1LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQjBhR1Z5WlNCcGN5QmhibmtnYUhsd1pYSjBlU0IwYUdGMElITjFZbk5qY21saVpXUWdkR2hsSUdSaGRHRlBZbXBsWTNSVlVreGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MzVmljMk55YVdKbGNraDVjR1Z5ZEhrZ1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUkVZWFJoVDJKcVpXTjBVM1ZpYzJOeWFXSmxja2g1Y0dWeWRIa29aR0YwWVU5aWFtVmpkRlZTVENrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2MzVmljMk55YVdKbGNraDVjR1Z5ZEhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYzNWaWMyTnlhV0psY2toNWNHVnlkSGtwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmxZWEpqYUNCcGJpQmtiMjFoYVc0Z2NtVm5hWE4wY25rZ1ptOXlJSFJvWlNCb2VYQmxjblI1SUdGemMyOWphV0YwWldRZ2RHOGdkR2hsSUdSaGRHRlBZbXBsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObFlYSmphQ0JwYmlCallYTmxJR2x6SUdFZ2MzVmljMk55YVdKbGNpQjNhRzhnZDJGdWRITWdkRzhnYTI1dmR5QjBhR1VnY21Wd2IzSjBaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbFoybHpkSEo1TG1ScGMyTnZkbVZ5UkdGMFlVOWlhbVZqZEZCbGNsVlNUQ2htYVc1aGJGVlNUQ3dnYzNCc2FYUmxaRlZTVEZzeVhTa3VkR2hsYmloa1lYUmhUMkpxWldOMElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVpHRjBZVTlpYW1WamRITkpaR1Z1ZEdsMGVWdG1hVzVoYkZWU1RGMGdQU0JrWVhSaFQySnFaV04wTG5KbGNHOXlkR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR1JoZEdGUFltcGxZM1F1Y21Wd2IzSjBaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnWlhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR1pwYkhSbGNpQjBhR1VnYldWemMyRm5aWE1nZEc4Z2FHRnphQ3dnWW5rZ2NtVnRiM1pwYm1jZ2MyOXRaU0JtYVdWc1pITWdibTkwSUdkbGJtVnlZWFJsWkNCaWVTQjBhR1VnY25WdWRHbHRaU0JqYjNKbFhHNGdJQ29nUUhCaGNtRnRJSHROWlhOellXZGxmU0FnYldWemMyRm5aU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZjYmlBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ0lHUmxZM0o1Y0hSbFpGWmhiSFZsSUNoUGNIUnBiMjVoYkNrZ0lDQWdkbUZzZFdVZ1puSnZiU0JpYjJSNUxuWmhiSFZsSUdsdUlHTmhjMlVnYVhRZ2IzSnBaMmx1WVd4c2VTQmpiMjFsY3lCbGJtTnllWEIwWldSY2JpQWdLaUJBY0dGeVlXMGdlMHBUVDA1OUlDQnBaR1Z1ZEdsMGVTaFBjSFJwYjI1aGJDa2dJQ0FnWVdSa0lIUm9aU0JvZVhCbGNuUjVJR2xrWlc1MGFYUjVJR0Z6YzI5amFXRjBaV1FnYVc0Z1kyRnpaU0JwY3lCdWIzUWdZV1JrWldRZ2RHOGdkR2hsSUdsdWFYUnBZV3dnYldWemMyRm5aVnh1SUNBcUlFQnlaWFIxY200Z2UwMWxjM05oWjJWOUlDQnVaWGNnYldWemMyRm5aU0JtYVd4MFpYSmxaRnh1SUNBcUwxeHVJQ0JmWm1sc2RHVnlUV1Z6YzJGblpWUnZTR0Z6YUNodFpYTnpZV2RsTENCa1pXTnllWEIwWldSV1lXeDFaU3dnYVdSbGJuUnBkSGtwSUh0Y2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0IwZVhCbE9pQnRaWE56WVdkbExuUjVjR1VzWEc0Z0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExtWnliMjBzWEc0Z0lDQWdJQ0IwYnpvZ0lDQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdZbTlrZVRvZ2UxeHVJQ0FnSUNBZ0lDQnBaR1Z1ZEdsMGVUb2dhV1JsYm5ScGRIa2dmSHdnYldWemMyRm5aUzVpYjJSNUxtbGtaVzUwYVhSNUxGeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pHVmpjbmx3ZEdWa1ZtRnNkV1VnZkh3Z2JXVnpjMkZuWlM1aWIyUjVMblpoYkhWbExGeHVJQ0FnSUNBZ0lDQm9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ2JXVnpjMkZuWlM1aWIyUjVMbWhoYm1SemFHRnJaVkJvWVhObFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHZGxibVZ5WVhSbGN5QjBhR1VnYVc1cGRHbGhiQ0J6ZEhKMVkzUjFjbVVnWm05eUlIUm9aU0JyWlhseklHSmxkSGRsWlc0Z2RIZHZJSFZ6WlhKelhHNGdJQ29nUUhCaGNtRnRJSHRLVTA5T2ZTQWdJQ0J0WlhOellXZGxJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzSUcxbGMzTmhaMlVnZEdoaGRDQjBjbWxuWjJWeWN5QjBhR1VnYlhWMGRXRnNJR0YxZEdobGJuUnBZMkYwYVc5dVhHNGdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJQ0IxYzJWeVZWSk1JQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlWVkpNWEc0Z0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQnlaV05sYVhabGNpaFBjSFJwYjI1aGJDa2dJR2x1WkdsallYUmxjeUJwWmlCcGN5QjBhR1VnYzJWdVpHVnlJRzl5SUhSb1pTQnlaV05sYVhabGNpQjBhR0YwSUdOeVpXRjBaWE1nWVNCdVpYY2dZMmhoZENCamNubHdkRzljYmlBZ0tpQkFjbVYwZFhKdUlIdEtVMDlPZlNCdVpYZERhR0YwUTNKNWNIUnZJQ0J1WlhjZ1NsTlBUaUJ6ZEhKMVkzUjFjbVVnWm05eUlIUm9aU0JqYUdGMElHTnllWEIwYjF4dUlDQXFMMXh1SUNCZmJtVjNRMmhoZEVOeWVYQjBieWh0WlhOellXZGxMQ0IxYzJWeVZWSk1MQ0J5WldObGFYWmxjaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQXZMMk5vWldOcklIZG9aWFJvWlhJZ2FYTWdkR2hsSUhObGJtUmxjaUJ2Y2lCMGFHVWdjbVZqWldsMlpYSWdkRzhnWTNKbFlYUmxJR0VnYm1WM0lHTm9ZWFJEY25sd2RHOWNiaUFnSUNBdkwzUnZJRzFoYm5SaGFXNGdZMjl1YzJsemRHVnVZM2tnYjI0Z2RHaGxJR3RsZVhNZ2FXWWdkR2hsSUhKbFkyVnBkbVZ5SUdOeVpXRjBaU0JoSUc1bGR5QmphR0YwUTNKNWNIUnZMRnh1SUNBZ0lDOHZkR2hsYmlCcGJuWmxjblFnZEdobElHWnBaV3hrYzF4dUlDQWdJR3hsZENCbWNtOXRJRDBnS0hKbFkyVnBkbVZ5S1NBL0lHMWxjM05oWjJVdWRHOGdPaUJ0WlhOellXZGxMbVp5YjIwN1hHNGdJQ0FnYkdWMElIUnZJRDBnS0hKbFkyVnBkbVZ5S1NBL0lHMWxjM05oWjJVdVpuSnZiU0E2SUcxbGMzTmhaMlV1ZEc4N1hHNWNiaUFnSUNCc1pYUWdkWE5sY2tsdVptOGdQU0JmZEdocGN5NW5aWFJKWkdWdWRHbDBlU2gxYzJWeVZWSk1LVHRjYmx4dUlDQWdJR3hsZENCdVpYZERhR0YwUTNKNWNIUnZJRDFjYmlBZ0lDQjdYRzRnSUNBZ0lDQm9lWEJsY25SNVJuSnZiVHBjYmlBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnYUhsd1pYSjBlVG9nWm5KdmJTeGNiaUFnSUNBZ0lDQWdkWE5sY2tsRU9pQjFjMlZ5U1c1bWJ5NXRaWE56WVdkbFNXNW1ieTUxYzJWeVVISnZabWxzWlM1MWMyVnlibUZ0WlN4Y2JpQWdJQ0FnSUNBZ2NISnBkbUYwWlV0bGVUb2dkWE5sY2tsdVptOHVhMlY1VUdGcGNpNXdjbWwyWVhSbExGeHVJQ0FnSUNBZ0lDQndkV0pzYVdOTFpYazZJSFZ6WlhKSmJtWnZMbXRsZVZCaGFYSXVjSFZpYkdsakxGeHVJQ0FnSUNBZ0lDQmhjM05sY25ScGIyNDZJSFZ6WlhKSmJtWnZMbUZ6YzJWeWRHbHZiaXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVWx1Wm04NklIVnpaWEpKYm1adkxtMWxjM05oWjJWSmJtWnZYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdhSGx3WlhKMGVWUnZPbHh1SUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0JvZVhCbGNuUjVPaUIwYnl4Y2JpQWdJQ0FnSUNBZ2RYTmxja2xFT2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lIQjFZbXhwWTB0bGVUb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0JoYzNObGNuUnBiMjQ2SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUd0bGVYTTZYRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJR2g1Y0dWeWRIbFViMU5sYzNOcGIyNUxaWGs2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2FIbHdaWEowZVVaeWIyMVRaWE56YVc5dVMyVjVPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUdoNWNHVnlkSGxVYjBoaGMyaExaWGs2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2FIbHdaWEowZVVaeWIyMUlZWE5vUzJWNU9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQWdJSFJ2VW1GdVpHOXRPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUdaeWIyMVNZVzVrYjIwNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdjSEpsYldGemRHVnlTMlY1T2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lHMWhjM1JsY2t0bGVUb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdhR0Z1WkhOb1lXdGxTR2x6ZEc5eWVUb2dlMXh1SUNBZ0lDQWdJQ0J6Wlc1a1pYSklaV3hzYnpvZ2RXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ0lDQnlaV05sYVhabGNraGxiR3h2T2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lITmxibVJsY2tObGNuUnBabWxqWVhSbE9pQjFibVJsWm1sdVpXUXNYRzRnSUNBZ0lDQWdJSEpsWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbE9pQjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQnBibWwwYVdGc1RXVnpjMkZuWlRvZ0tHMWxjM05oWjJVdVltOWtlUzVwWjI1dmNtVXBJRDhnZFc1a1pXWnBibVZrSURvZ2JXVnpjMkZuWlN4Y2JpQWdJQ0FnSUdOaGJHeGlZV05yT2lCdFpYTnpZV2RsTG1OaGJHeGlZV05yTEZ4dUlDQWdJQ0FnWVhWMGFHVnVkR2xqWVhSbFpEb2dabUZzYzJVc1hHNGdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1PaUJ0WlhOellXZGxMbVJoZEdGUFltcGxZM1JWVWt4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZDBOb1lYUkRjbmx3ZEc4N1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1NXUmxiblJwZEhsTmIyUjFiR1U3WEc0aUxDSmpiR0Z6Y3lCRGIyNTBaWGgwSUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1amIyNXpkSEoxWTNSdmNpQTlQVDBnUTI5dWRHVjRkQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblEyRnVJRzV2ZENCamIyNXpkSEoxWTNRZ1lXSnpkSEpoWTNRZ1kyeGhjM011SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpMbU52Ym5OMGNuVmpkRzl5SUQwOVBTQkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblVHeGxZWE5sSUdsdGNHeGxiV1Z1ZENCaFluTjBjbUZqZENCdFpYUm9iMlFnWTI5dWMzUnlkV04wYjNJdUp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHeHZZV1JRYjJ4cFkybGxjeWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeUE5UFQwZ1EyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RMkZ1SUc1dmRDQmpZV3hzSUhOMFlYUnBZeUJoWW5OMGNtRmpkQ0J0WlhSb2IyUWdiRzloWkZCdmJHbGphV1Z6TGljcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVzYjJGa1VHOXNhV05wWlhNZ1BUMDlJRU52Ym5SbGVIUXViRzloWkZCdmJHbGphV1Z6S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZFFiR1ZoYzJVZ2FXMXdiR1Z0Wlc1MElITjBZWFJwWXlCaFluTjBjbUZqZENCdFpYUm9iMlFnYkc5aFpGQnZiR2xqYVdWekxpY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEVieUJ1YjNRZ1kyRnNiQ0J6ZEdGMGFXTWdZV0p6ZEhKaFkzUWdiV1YwYUc5a0lHeHZZV1JRYjJ4cFkybGxjeUJtY205dElHTm9hV3hrTGljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCaFpHUlRkV0p6WTNKcGNIUnBiMjVRYjJ4cFkza29LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTWdQVDA5SUVOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owTmhiaUJ1YjNRZ1kyRnNiQ0J6ZEdGMGFXTWdZV0p6ZEhKaFkzUWdiV1YwYUc5a0lHRmtaRk4xWW5OamNtbHdkR2x2YmxCdmJHbGplUzRuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVZV1JrVTNWaWMyTnlhWEIwYVc5dVVHOXNhV041SUQwOVBTQkRiMjUwWlhoMExtRmtaRk4xWW5OamNtbHdkR2x2YmxCdmJHbGplU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblVHeGxZWE5sSUdsdGNHeGxiV1Z1ZENCemRHRjBhV01nWVdKemRISmhZM1FnYldWMGFHOWtJR0ZrWkZOMVluTmpjbWx3ZEdsdmJsQnZiR2xqZVM0bktUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblJHOGdibTkwSUdOaGJHd2djM1JoZEdsaklHRmljM1J5WVdOMElHMWxkR2h2WkNCaFpHUlRkV0p6WTNKcGNIUnBiMjVRYjJ4cFkza2dabkp2YlNCamFHbHNaQzRuS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCemRHRjBhV01nYVhOVWIxWmxjbWxtZVNncElIdGNiaUFnSUNCcFppQW9kR2hwY3lBOVBUMGdRMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUTJGdUlHNXZkQ0JqWVd4c0lITjBZWFJwWXlCaFluTjBjbUZqZENCdFpYUm9iMlFnYVhOVWIxWmxjbWxtZVM0bktUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YVhOVWIxWmxjbWxtZVNBOVBUMGdRMjl1ZEdWNGRDNXBjMVJ2Vm1WeWFXWjVLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkUWJHVmhjMlVnYVcxd2JHVnRaVzUwSUhOMFlYUnBZeUJoWW5OMGNtRmpkQ0J0WlhSb2IyUWdhWE5VYjFabGNtbG1lUzRuS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUkc4Z2JtOTBJR05oYkd3Z2MzUmhkR2xqSUdGaWMzUnlZV04wSUcxbGRHaHZaQ0JwYzFSdlZtVnlhV1o1SUdaeWIyMGdZMmhwYkdRdUp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjM1JoZEdsaklHZGxkRUZ3Y0d4cFkyRmliR1ZRYjJ4cFkybGxjeWdwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeUE5UFQwZ1EyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RMkZ1SUc1dmRDQmpZV3hzSUhOMFlYUnBZeUJoWW5OMGNtRmpkQ0J0WlhSb2IyUWdaMlYwUVhCd2JHbGpZV0pzWlZCdmJHbGphV1Z6TGljcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVuWlhSQmNIQnNhV05oWW14bFVHOXNhV05wWlhNZ1BUMDlJRU52Ym5SbGVIUXVaMlYwUVhCd2JHbGpZV0pzWlZCdmJHbGphV1Z6S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZFFiR1ZoYzJVZ2FXMXdiR1Z0Wlc1MElITjBZWFJwWXlCaFluTjBjbUZqZENCdFpYUm9iMlFnWjJWMFFYQndiR2xqWVdKc1pWQnZiR2xqYVdWekxpY3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEVieUJ1YjNRZ1kyRnNiQ0J6ZEdGMGFXTWdZV0p6ZEhKaFkzUWdiV1YwYUc5a0lHZGxkRUZ3Y0d4cFkyRmliR1ZRYjJ4cFkybGxjeUJtY205dElHTm9hV3hrTGljcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lITjBZWFJwWXlCaGNIQnNlVkJ2YkdsamFXVnpLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpJRDA5UFNCRGIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZERZVzRnYm05MElHTmhiR3dnYzNSaGRHbGpJR0ZpYzNSeVlXTjBJRzFsZEdodlpDQmhjSEJzZVZCdmJHbGphV1Z6TGljcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVoY0hCc2VWQnZiR2xqYVdWeklEMDlQU0JEYjI1MFpYaDBMbUZ3Y0d4NVVHOXNhV05wWlhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMUJzWldGelpTQnBiWEJzWlcxbGJuUWdjM1JoZEdsaklHRmljM1J5WVdOMElHMWxkR2h2WkNCaGNIQnNlVkJ2YkdsamFXVnpMaWNwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RFYnlCdWIzUWdZMkZzYkNCemRHRjBhV01nWVdKemRISmhZM1FnYldWMGFHOWtJR0Z3Y0d4NVVHOXNhV05wWlhNZ1puSnZiU0JqYUdsc1pDNG5LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J6ZEdGMGFXTWdZWFYwYUc5eWFYTmxLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpJRDA5UFNCRGIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZERZVzRnYm05MElHTmhiR3dnYzNSaGRHbGpJR0ZpYzNSeVlXTjBJRzFsZEdodlpDQmhkWFJvYjNKcGMyVXVKeWs3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxtRjFkR2h2Y21selpTQTlQVDBnUTI5dWRHVjRkQzVoZFhSb2IzSnBjMlVwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxQnNaV0Z6WlNCcGJYQnNaVzFsYm5RZ2MzUmhkR2xqSUdGaWMzUnlZV04wSUcxbGRHaHZaQ0JoZFhSb2IzSnBjMlV1SnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBSdklHNXZkQ0JqWVd4c0lITjBZWFJwWXlCaFluTjBjbUZqZENCdFpYUm9iMlFnWVhWMGFHOXlhWE5sSUdaeWIyMGdZMmhwYkdRdUp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRMjl1ZEdWNGREdGNiaUlzSW1Oc1lYTnpJRTl3WlhKaGRHOXljeUI3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1dmNHVnlZWFJ2Y25NZ1BTQmZkR2hwY3k1elpYUlBjR1Z5WVhSdmNuTW9LVHRjYmlBZ2ZWeHVYRzRnSUhObGRFOXdaWEpoZEc5eWN5Z3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQnZjR1Z5WVhSdmNuTWdQU0I3WEc0Z0lDQWdJQ0JpWlhSM1pXVnVPaUFvY0dGeVlXMXpLU0E5UGlCN0lISmxkSFZ5YmlCZmRHaHBjeTVwYzBKbGRIZGxaVzRvY0dGeVlXMXpXekJkV3pCZExDQndZWEpoYlhOYk1GMWJNVjBzSUhCaGNtRnRjMXN4WFNrN0lIMHNYRzRnSUNBZ0lDQnBiam9nS0hCaGNtRnRjeWtnUFQ0Z2V5QnlaWFIxY200Z2NHRnlZVzF6V3pCZExtbHVaR1Y0VDJZb2NHRnlZVzF6V3pGZEtTQStJQzB4T3lCOUxGeHVJQ0FnSUNBZ1pYRjFZV3h6T2lBb2NHRnlZVzF6S1NBOVBpQjdJSEpsZEhWeWJpQndZWEpoYlhOYk1GMWJNRjBnUFQwOUlDY3FKeUI4ZkNCd1lYSmhiWE5iTUYxYk1GMGdQVDA5SUhCaGNtRnRjMXN4WFRzZ2ZTeGNibHh1SUNBZ0lDQWdiM0k2SUNod1lYSmhiWE1wSUQwK0lIc2djbVYwZFhKdUlIQmhjbUZ0YzFzd1hTQjhmQ0J3WVhKaGJYTmJNVjA3SUgwc1hHNGdJQ0FnSUNCaGJtUTZJQ2h3WVhKaGJYTXBJRDArSUhzZ2NtVjBkWEp1SUhCaGNtRnRjMXN3WFNBbUppQndZWEpoYlhOYk1WMDdJSDBzWEc0Z0lDQWdJQ0J1YjNRNklDaHdZWEpoYlhNcElEMCtJSHNnY21WMGRYSnVJQ0Z3WVhKaGJYTmJNRjA3SUgxY2JpQWdJQ0I5TzF4dUlDQWdJSEpsZEhWeWJpQnZjR1Z5WVhSdmNuTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJXWlhKcFptbGxjeUJwWmlCMGFHVWdZM1Z5Y21WdWRDQjBhVzFsSUdseklHSmxkSGRsWlc0Z2RHaGxJR2RwZG1WdUlITjBZWEowSUdGdVpDQmxibVFnZEdsdFpYTXVYRzRnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUNBZ0lDQnpkR0Z5ZEZ4dUlDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQWdJQ0FnWlc1a1hHNGdJQ29nUUhKbGRIVnliaUI3UW05dmJHVmhibjBnSUNCaWIyOXNaV0Z1WEc0Z0lDb3ZYRzRnSUdselFtVjBkMlZsYmloemRHRnlkQ3dnWlc1a0xDQnViM2NwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJSEJoY25ObFNXNTBLSE4wWVhKMEtUdGNiaUFnSUNCbGJtUWdQU0J3WVhKelpVbHVkQ2hsYm1RcE8xeHVYRzRnSUNBZ2FXWWdLR1Z1WkNBOElITjBZWEowS1NCN1hHNGdJQ0FnSUNCdWIzY2dQU0FvYm05M0lEd2djM1JoY25RcElEOGdibTkzSUNzOUlESTBNREFnT2lCdWIzYzdYRzRnSUNBZ0lDQmxibVFnS3owZ01qUXdNRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z0tHNXZkeUErSUhOMFlYSjBJQ1ltSUc1dmR5QThJR1Z1WkNrN1hHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlBjR1Z5WVhSdmNuTTdYRzRpTENKcGJYQnZjblFnVDNCbGNtRjBiM0p6SUdaeWIyMGdKeTR2VDNCbGNtRjBiM0p6Snp0Y2JseHVMeW9xWEc0cUlGUm9aU0JRYjJ4cFkza2dSR1ZqYVhOcGIyNGdVRzlwYm5RZ0tGQkVVQ2tnWkdWamFXUmxjeUJwWmlCaElHMWxjM05oWjJVZ2FYTWdkRzhnWW1VZ1lYVjBhRzl5YVhObFpDQmllU0JqYUdWamEybHVaeUJoSUhObGRDQnZabHh1S2lCd2IyeHBZMmxsY3k0Z1ZHaGxJSEpsYzI5MWNtTmxJSFJ2SUdKbElIWmxjbWxtYVdWa0lHbHpJSE53WldOcFptbGxaQ0JwYmlCMGFHVWdabWx5YzNRZ2QyOXlaQ0J2WmlCMGFHVWdKMk52Ym1ScGRHbHZiaWNnWm1sbGJHUWdiMlpjYmlvZ1lTQlFiMnhwWTNrZ2IySnFaV04wTGlCVWFHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2RHaGhkQ0IyWlhKcFptbGxjeUJwWmlCMGFHVWdiV1Z6YzJGblpTQnBjeUJqYjIxd2JHbGhiblFnZDJsMGFDQmhJSEJ2YkdsamVTQnBjMXh1S2lCemNHVmphV1pwWldRZ2FXNGdZU0JvWVhOb2RHRmliR1VnZEc4Z1lXeHNiM2NnWkhsdVlXMXBZeUJrWldacGJtbDBhVzl1SUc5bUlIUm9aU0JwYlhCc1pXMWxiblJoZEdsdmJpd2djSEp2ZG1sa2FXNW5YRzRxSUdWNGRHVnVjMmxpYVd4cGRIa2dkRzhnZEdobElGQnZiR2xqZVNCRmJtZHBibVVnWm5WdVkzUnBiMjVoYkdsMGFXVnpMbHh1S2k5Y2JtTnNZWE56SUZCRVVDQjdYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ZHaHBjeUJ0WlhSb2IyUWdhWE1nYVc1MmIydGxaQ0JpZVNCMGFHVWdVRzlzYVdONUlFVnVaMmx1WlNCaGJtUWdhVzV6ZEdGdWRHbGhkR1Z6SUhSb1pTQlFiMnhwWTNrZ1JHVmphWE5wYjI0Z1VHOXBiblF1SUVsMFhHNGdJQ29nYVc1cGRHbGhiR2x6WlhNZ2IzSWdiRzloWkhNZ1puSnZiU0IwYUdVZ1VHVnljMmx6ZEdWdVkyVWdUV0Z1WVdkbGNpQjBhR1VnYjJKcVpXTjBJQ2R0ZVVkeWIzVndjeWNnZEc4Z2MzUnZjbVVnZEdobElIVnpaWEluYzF4dUlDQXFJR2R5YjNWd2N5NWNiaUFnS2lCQWNHRnlZVzBnSUh0U1pXZHBjM1J5ZVgwZ0lDQWdiWFZqYUhKMWJuUnBiV1ZTWldkcGMzUnllVnh1SUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBaWGgwS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdJQ0JmZEdocGN5NXZjR1Z5WVhSdmNuTWdQU0J1WlhjZ1QzQmxjbUYwYjNKektHTnZiblJsZUhRcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWbVZ5YVdacFpYTWdhV1lnZEdobElHZHBkbVZ1SUcxbGMzTmhaMlVnYVhNZ1kyOXRjR3hwWVc1MElIZHBkR2dnZEdobElHZHBkbVZ1SUhCdmJHbGphV1Z6TGlCSlppQnZibVVnYjJZZ2RHaGxJSEJ2YkdsamFXVnpYRzRnSUNvZ1pYWmhiSFZoZEdWeklIUnZJQ2RtWVd4elpTY3NJSFJvWlc0Z2RHaGxJRzFsYzNOaFoyVWdhWE1nYm05MElHRjFkR2h2Y21selpXUXVJRkpsZEhWeWJuTWdkR2hsSUdacGJtRnNJR0YxZEdodmNtbHpZWFJwYjI1Y2JpQWdLaUJrWldOcGMybHZiaUJoYm1RZ1lTQnpaWFFnYjJZZ1lXTjBhVzl1Y3lCMGFHRjBJSEJ2YkdsamFXVnpJRzFoZVNCeVpYRjFhWEpsTGx4dUlDQXFJRUJ3WVhKaGJTQjdUV1Z6YzJGblpYMGdJRzFsYzNOaFoyVmNiaUFnS2lCQWNHRnlZVzBnZTFWU1RIMGdJQ0FnSUNCb2VYQmxjblI1Vkc5V1pYSnBabmxjYmlBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNBZ0lDQndiMnhwWTJsbGMxeHVJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVmU0FnSUZ0aGRYUm9SR1ZqYVhOcGIyNHNJR0ZqZEdsdmJuTmRYRzRnSUNvdlhHNGdJR1YyWVd4MVlYUmxLRzFsYzNOaFoyVXNJSEJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MGN5QTlJRnQwY25WbFhUdGNiaUFnSUNCc1pYUWdZV04wYVc5dWN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnYVc0Z2NHOXNhV05wWlhNcElIdGNiaUFnSUNBZ0lHeGxkQ0J3YjJ4cFkza2dQU0J3YjJ4cFkybGxjMXRwWFR0Y2JpQWdJQ0FnSUd4bGRDQmpiMjVrYVhScGIyNGdQU0J3YjJ4cFkza3VZMjl1WkdsMGFXOXVPMXh1SUNBZ0lDQWdiR1YwSUhabGNtbG1hV1Z6UTI5dVpHbDBhVzl1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdmJtUnBkR2x2YmlBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnZG1WeWFXWnBaWE5EYjI1a2FYUnBiMjRnUFNCZmRHaHBjeTUyWlhKcFptbGxjMEZrZG1GdVkyVmtRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN3WFN3Z1kyOXVaR2wwYVc5dVd6RmRMQ0JqYjI1a2FYUnBiMjViTWwwc0lIQnZiR2xqZVM1elkyOXdaU3dnYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IyWlhKcFptbGxjME52Ym1ScGRHbHZiaUE5SUY5MGFHbHpMblpsY21sbWFXVnpVMmx0Y0d4bFEyOXVaR2wwYVc5dUtHTnZibVJwZEdsdmJpd2djRzlzYVdONUxuTmpiM0JsTENCdFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFpsY21sbWFXVnpRMjl1WkdsMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkSE11Y0hWemFDaHdiMnhwWTNrdVlYVjBhRzl5YVhObEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2h3YjJ4cFkza3VZV04wYVc5dWN5QWhQVDBnVzEwcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCd2IyeHBZM2t1WVdOMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J1WlhkQlkzUnBiMjRnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhSb2IyUTZJSEJ2YkdsamVTNWhZM1JwYjI1elcybGRMbTFsZEdodlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGNtRnRjem9nYldWemMyRm5aVnh1SUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdZV04wYVc5dWN5NXdkWE5vS0c1bGQwRmpkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdZWFYwYUVSbFkybHphVzl1SUQwZ2NtVnpkV3gwY3k1cGJtUmxlRTltS0daaGJITmxLU0E5UFQwZ0xURTdYRzRnSUNBZ2NtVjBkWEp1SUZ0aGRYUm9SR1ZqYVhOcGIyNHNJR0ZqZEdsdmJuTmRPMXh1SUNCOVhHNWNiaUFnZG1WeWFXWnBaWE5UYVcxd2JHVkRiMjVrYVhScGIyNG9ZMjl1WkdsMGFXOXVMQ0J6WTI5d1pTd2diV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElITndiR2wwUTI5dVpHbDBhVzl1SUQwZ1kyOXVaR2wwYVc5dUxuTndiR2wwS0NjZ0p5azdYRzRnSUNBZ2JHVjBJSFpoY21saFlteGxJRDBnYzNCc2FYUkRiMjVrYVhScGIyNWJNRjA3WEc0Z0lDQWdiR1YwSUc5d1pYSmhkRzl5SUQwZ2MzQnNhWFJEYjI1a2FYUnBiMjViTVYwN1hHNWNiaUFnSUNCc1pYUWdjR0Z5WVcxek8xeHVJQ0FnSUdsbUlDaHZjR1Z5WVhSdmNpQTlQVDBnSjJsdUp5a2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVkyOXVkR1Y0ZEM1bmNtOTFjQ0E5SUh0elkyOXdaVG9nYzJOdmNHVXNJR2R5YjNWd09pQnpjR3hwZEVOdmJtUnBkR2x2YmxzeVhTd2daR1Z6ZEdsdVlYUnBiMjQ2SUcxbGMzTmhaMlV1ZEc5OU8xeHVJQ0FnSUNBZ2NHRnlZVzF6SUQwZ1gzUm9hWE11WTI5dWRHVjRkQzVuY205MWNEdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY0dGeVlXMXpJRDBnYzNCc2FYUkRiMjVrYVhScGIyNHVjMnhwWTJVb01pazdYRzRnSUNBZ2ZWeHVJQ0FnSUY5MGFHbHpMbU52Ym5SbGVIUmJkbUZ5YVdGaWJHVmRJRDBnZTIxbGMzTmhaMlU2SUcxbGMzTmhaMlY5TzF4dUlDQWdJR3hsZENCMllXeDFaU0E5SUY5MGFHbHpMbU52Ym5SbGVIUmJkbUZ5YVdGaWJHVmRPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV2Y0dWeVlYUnZjbk11YjNCbGNtRjBiM0p6VzI5d1pYSmhkRzl5WFNoYmNHRnlZVzF6TENCMllXeDFaVjBwTzF4dUlDQjlYRzVjYmlBZ2RtVnlhV1pwWlhOQlpIWmhibU5sWkVOdmJtUnBkR2x2YmlodmNHVnlZWFJ2Y2l3Z2JHVm1kQ3dnY21sbmFIUXNJSE5qYjNCbExDQnRaWE56WVdkbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0IzYUdsc1pTQW9kSGx3Wlc5bUlHeGxablFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQnNaV1owSUQwZ1gzUm9hWE11ZG1WeWFXWnBaWE5CWkhaaGJtTmxaRU52Ym1ScGRHbHZiaWhzWldaMFd6QmRMQ0JzWldaMFd6RmRMQ0JzWldaMFd6SmRMQ0J6WTI5d1pTd2diV1Z6YzJGblpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHlhV2RvZENBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9kSGx3Wlc5bUlISnBaMmgwSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0J5YVdkb2RDQTlJRjkwYUdsekxuWmxjbWxtYVdWelFXUjJZVzVqWldSRGIyNWthWFJwYjI0b2NtbG5hSFJiTUYwc0lISnBaMmgwV3pGZExDQnlhV2RvZEZzeVhTd2djMk52Y0dVc0lHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnlaWE4xYkhSTVpXWjBJRDBnS0hSNWNHVnZaaUJzWldaMElEMDlQU0FuWW05dmJHVmhiaWNwSUQ4Z2JHVm1kQ0E2SUY5MGFHbHpMblpsY21sbWFXVnpVMmx0Y0d4bFEyOXVaR2wwYVc5dUtHeGxablFzSUhOamIzQmxMQ0J0WlhOellXZGxLVHRjYmx4dUlDQWdJR3hsZENCeVpYTjFiSFJTYVdkb2REdGNiaUFnSUNCcFppQW9jbWxuYUhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WemRXeDBVbWxuYUhRZ1BTQW9kSGx3Wlc5bUlISnBaMmgwSUQwOVBTQW5ZbTl2YkdWaGJpY3BJRDhnY21sbmFIUWdPaUJmZEdocGN5NTJaWEpwWm1sbGMxTnBiWEJzWlVOdmJtUnBkR2x2YmloeWFXZG9kQ3dnYzJOdmNHVXNJRzFsYzNOaFoyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV2Y0dWeVlYUnZjbk11YjNCbGNtRjBiM0p6VzI5d1pYSmhkRzl5WFNoYmNtVnpkV3gwVEdWbWRDd2djbVZ6ZFd4MFVtbG5hSFJkS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUVJGQTdYRzRpTENKamJHRnpjeUJRUlZBZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHTnZiblJsZUhRcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxtTnZiblJsZUhRZ1BTQmpiMjUwWlhoME8xeHVJQ0I5WEc1Y2JpQWdaVzVtYjNKalpTaHlaWE4xYkhRcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCaGRYUm9SR1ZqYVhOcGIyNGdQU0J5WlhOMWJIUmJNRjA3WEc0Z0lDQWdiR1YwSUdGamRHbHZibk1nUFNCeVpYTjFiSFJiTVYwN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElHbHVJR0ZqZEdsdmJuTXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxtTnZiblJsZUhSYllXTjBhVzl1YzF0cFhTNXRaWFJvYjJSZEtHRmpkR2x2Ym5OYmFWMHVjR0Z5WVcxekxDQmhkWFJvUkdWamFYTnBiMjRwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cWMyVnVaRUYxZEc5dFlYUnBZMDFsYzNOaFoyVW9LU0I3ZlZ4dVhHNGdJR1p2Y25kaGNtUlViMGxFS0NrZ2UzMWNibHh1SUNCbWIzSjNZWEprVkc5SWVYQmxjblI1S0NrZ2UzMHFMMXh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGQkZVRHRjYmlJc0lpOHZhbk5vYVc1MElHSnliM2R6WlhJNmRISjFaU3dnYW5GMVpYSjVPaUIwY25WbFhHNWNiaTh2YVcxd2IzSjBJSEJsY25OcGMzUmxibU5sVFdGdVlXZGxjaUJtY205dElDZHpaWEoyYVdObExXWnlZVzFsZDI5eWF5OWthWE4wTDFCbGNuTnBjM1JsYm1ObFRXRnVZV2RsY2ljN1hHNWNibWx0Y0c5eWRDQlFSVkFnWm5KdmJTQW5MaTlRUlZBbk8xeHVhVzF3YjNKMElGQkVVQ0JtY205dElDY3VMMUJFVUNjN1hHNWNiaThxS2x4dUtpQlVhR1VnVUc5c2FXTjVJRVZ1WjJsdVpTQnBiblJsY21ObGNIUnpJR0ZzYkNCMGFHVWdiV1Z6YzJGblpYTWdjMlZ1ZENCMGFISnZkV2RvSUhSb1pTQk5aWE56WVdkbElFSjFjeUJoYm1RZ1lYQndiR2xsY3lCMGFHVmNiaW9nY0c5c2FXTnBaWE1nWkdWbWFXNWxaQ0JpZVNCMGFHVWdjMlZ5ZG1salpTQndjbTkyYVdSbGNpQmhibVFnZEdobElIVnpaWEl1WEc0cUwxeHVZMnhoYzNNZ1VHOXNhV041Ulc1bmFXNWxJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQlVhR2x6SUcxbGRHaHZaQ0JwY3lCcGJuWnZhMlZrSUdKNUlIUm9aU0JTZFc1MGFXMWxWVUVnWVc1a0lHbHVjM1JoYm5ScFlYUmxjeUIwYUdVZ1VHOXNhV041SUVWdVoybHVaUzRnUVNCUWIyeHBZM2tnUkdWamFYTnBiMjVjYmlBZ0tpQlFiMmx1ZENBb1VFUlFLU0JoYm1RZ1lTQlFiMnhwWTNrZ1JXNW1iM0pqWlcxbGJuUWdVRzlwYm5RZ0tGQkZVQ2tnWVhKbElHbHVhWFJwWVd4cGMyVmtJR1p2Y2lCMGFHVWdaWFpoYkhWaGRHbHZiaUJ2WmlCd2IyeHBZMmxsYzF4dUlDQXFJR0Z1WkNCMGFHVWdaVzVtYjNKalpXMWxiblFnYjJZZ1lXUmthWFJwYjI1aGJDQmhZM1JwYjI1ekxDQnlaWE53WldOMGFYWmxiSGt1WEc0Z0lDb2dRSEJoY21GdElDQjdTV1JsYm5ScGRIbE5iMlIxYkdWOUlDQWdJR2xrWlc1MGFYUjVUVzlrZFd4bFhHNGdJQ29nUUhCaGNtRnRJQ0I3VW1WbmFYTjBjbmw5SUNBZ0lDQWdJQ0FnSUhKMWJuUnBiV1ZTWldkcGMzUnllVnh1SUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNTBaWGgwS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdJQ0JmZEdocGN5NWpiMjUwWlhoMExuQmtjQ0E5SUc1bGR5QlFSRkFvWTI5dWRHVjRkQ2s3WEc0Z0lDQWdYM1JvYVhNdVkyOXVkR1Y0ZEM1d1pYQWdQU0J1WlhjZ1VFVlFLR052Ym5SbGVIUXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUVhOemIyTnBZWFJsY3lCMGFHVWdaMmwyWlc0Z2NHOXNhV05wWlhNZ2QybDBhQ0JoSUhOamIzQmxMaUJVYUdVZ2NHOXpjMmxpYkdVZ2MyTnZjR1Z6SUdGeVpTQW5aMnh2WW1Gc0p5d2dKMmg1Y0dWeWRIa25JR0Z1WkZ4dUlDQXFJQ2QxYzJWeUp5NWNiaUFnS2lCQWNHRnlZVzBnSUh0UWIyeHBZM2xiWFgwZ0lIQnZiR2xqYVdWelhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUNCelkyOXdaVnh1SUNBcUwxeHVJQ0JoWkdSUWIyeHBZMmxsY3lodVpYZFFiMnhwWTJsbGN5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiWGxRYjJ4cFkybGxjeUE5SUY5MGFHbHpMbU52Ym5SbGVIUXVjRzlzYVdOcFpYTTdYRzRnSUNBZ2FXWWdLRzE1VUc5c2FXTnBaWE1nUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdiWGxRYjJ4cFkybGxjeUE5SUh0OU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ2FXNGdibVYzVUc5c2FXTnBaWE1wSUh0Y2JpQWdJQ0FnSUd4bGRDQnVaWGRRYjJ4cFkza2dQU0J1WlhkUWIyeHBZMmxsYzF0cFhUdGNiaUFnSUNBZ0lHeGxkQ0J6WTI5d1pTQTlJRzVsZDFCdmJHbGplUzV6WTI5d1pUdGNiaUFnSUNBZ0lHbG1JQ2h0ZVZCdmJHbGphV1Z6VzNOamIzQmxYU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJRzE1VUc5c2FXTnBaWE5iYzJOdmNHVmRJRDBnVzEwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcUlHbHVJRzE1VUc5c2FXTnBaWE5iYzJOdmNHVmRLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmxlR2x6ZEdsdVoxQnZiR2xqZVNBOUlHMTVVRzlzYVdOcFpYTmJjMk52Y0dWZFcycGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYaHBjM1JwYm1kUWIyeHBZM2t1WTI5dVpHbDBhVzl1SUQwOVBTQnVaWGRRYjJ4cFkza3VZMjl1WkdsMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y21WdGIzWmxVRzlzYVdOcFpYTW9ibVYzVUc5c2FXTnBaWE5iYVYwdVkyOXVaR2wwYVc5dUtUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiWGxRYjJ4cFkybGxjMXR6WTI5d1pWMHVjSFZ6YUNodVpYZFFiMnhwWTJsbGMxdHBYU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYM1JvYVhNdVkyOXVkR1Y0ZEM1d2IyeHBZMmxsY3lBOUlHMTVVRzlzYVdOcFpYTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJTWlcxdmRtVnpJSFJvWlNCd2IyeHBZM2tnZDJsMGFDQjBhR1VnWjJsMlpXNGdTVVFnWm5KdmJTQjBhR1VnWjJsMlpXNGdjMk52Y0dVdUlFbG1JSEJ2YkdsamVVbEVJR2x6SUNjcUp5d2djbVZ0YjNabGN5QmhiR3dnY0c5c2FXTnBaWE1nWVhOemIyTnBZWFJsWkNCM2FYUm9JSFJvWlNCbmFYWmxiaUJ6WTI5d1pTNWNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNCd2IyeHBZM2xKUkZ4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJSE5qYjNCbFhHNGdJQ292WEc0Z0lISmxiVzkyWlZCdmJHbGphV1Z6S0hOamIzQmxMQ0JqYjI1a2FYUnBiMjRwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J0ZVZCdmJHbGphV1Z6SUQwZ1gzUm9hWE11WTI5dWRHVjRkQzV3YjJ4cFkybGxjenRjYmx4dUlDQWdJR2xtSUNoelkyOXdaU0FoUFQwZ0p5b25LU0I3WEc1Y2JpQWdJQ0FnSUdsbUlDaHpZMjl3WlNCcGJpQnRlVkJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjVrYVhScGIyNGdJVDA5SUNjcUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndiMnhwWTJsbGN5QTlJRzE1VUc5c2FXTnBaWE5iYzJOdmNHVmRPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQjBlWEJsVDJaRGIyNWthWFJwYjI0Z1BTQjBlWEJsYjJZZ1kyOXVaR2wwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnYVc0Z2NHOXNhV05wWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjBlWEJsVDJaUWIyeHBZM2xEYjI1a2FYUnBiMjRnUFNCMGVYQmxiMllnY0c5c2FXTnBaWE5iYVYwdVkyOXVaR2wwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1ZQWmtOdmJtUnBkR2x2YmlBOVBUMGdkSGx3WlU5bVVHOXNhV041UTI5dVpHbDBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsVDJaRGIyNWthWFJwYjI0Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnZiR2xqYVdWelcybGRMbU52Ym1ScGRHbHZiaUE5UFQwZ1kyOXVaR2wwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YjJ4cFkybGxjeTV6Y0d4cFkyVW9hU3dnTVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3SUM4dmRIbHdaVzltSUdOdmJtUnBkR2x2YmlBOUlHOWlhbVZqZENBb1lXUjJZVzVqWldRZ2NHOXNhV041S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1aGNtVkZjWFZoYkVGeWNtRjVjeWh3YjJ4cFkybGxjMXRwWFM1amIyNWthWFJwYjI0c0lHTnZibVJwZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmJHbGphV1Z6TG5Od2JHbGpaU2hwTENBeEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRzE1VUc5c2FXTnBaWE5iYzJOdmNHVmRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WTI5dWRHVjRkQzV3YjJ4cFkybGxjeUE5SUcxNVVHOXNhV05wWlhNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWDNSb2FYTXVZMjl1ZEdWNGRDNXdiMnhwWTJsbGN5QTlJSHQ5TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdGeVpVVnhkV0ZzUVhKeVlYbHpLR0Z5Y21GNU1Td2dZWEp5WVhreUtTQjdYRzRnSUNBZ2FXWWdLR0Z5Y21GNU1TNXNaVzVuZEdnZ0lUMDlJR0Z5Y21GNU1pNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYm5WdFJXeGxiV1Z1ZEhNZ1BTQmhjbkpoZVRFdWJHVnVaM1JvTzF4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYm5WdFJXeGxiV1Z1ZEhNN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHRnljbUY1TVZ0cFhTQnBibk4wWVc1alpXOW1JRUZ5Y21GNUlDWW1JR0Z5Y21GNU1sdHBYU0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZWEp5WVhreFcybGRMbVZ4ZFdGc2N5aGhjbkpoZVRKYmFWMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dGeWNtRjVNVnRwWFNBaFBUMGdZWEp5WVhreVcybGRLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQlVhR2x6SUcxbGRHaHZaQ0JwY3lCbGVHVmpkWFJsWkNCM2FHVnVJR0VnYldWemMyRm5aU0JwY3lCcGJuUmxjbU5sY0hSbFpDQnBiaUIwYUdVZ1RXVnpjMkZuWlNCQ2RYTXVJRlJvWlNCbWFYSnpkQ0J6ZEdWd0lHbHpJSFJvWlZ4dUlDQXFJR0Z6YzJsbmJtMWxiblFnYjJZZ2RHaGxJR2xrWlc1MGFYUjVJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQjBhR1VnYldWemMyRm5aUzRnVkdobElITmxZMjl1WkNCemRHVndJR2x6SUhSb1pTQmxkbUZzZFdGMGFXOXVJRzltSUhSb1pWeHVJQ0FxSUdGd2NHeHBZMkZpYkdVZ2NHOXNhV05wWlhNZ2FXNGdiM0prWlhJZ2RHOGdiMkowWVdsdUlHRnVJR0YxZEdodmNtbHpZWFJwYjI0Z1pHVmphWE5wYjI0NklHbG1JR0VnY0c5c2FXTjVJR1YyWVd4MVlYUmxjeUIwYjF4dUlDQXFJR1poYkhObExDQjBhR1Z1SUhSb1pTQnRaWE56WVdkbElHbHpJSFZ1WVhWMGFHOXlhWE5sWkM0Z1ZHaGxJSFJvYVhKa0lITjBaWEFnYVhNZ2RHaGxJR1Z1Wm05eVkyVnRaVzUwSUc5bUlIUm9aU0JoWTNScGIyNXpJSFJvWVhSY2JpQWdLaUJ3YjJ4cFkybGxjeUJ0WVhrZ2NtVnhkV2x5WlM0Z1JtbHVZV3hzZVN3Z2RHaGxJRzFsYzNOaFoyVWdhWE1nYzNSaGJYQmxaQ0JoY3lCaGRYUm9iM0pwYzJWa0lHOXlJRzV2ZENCaGJtUWdhWE1nY21WMGRYSnVaV1FnZEc5Y2JpQWdLaUIwYUdVZ1RXVnpjMkZuWlNCQ2RYTXNJSGRvWlhKbElHbDBJSGRwYkd3Z1ltVWdabTl5ZDJGeVpHVmtJRzl5SUdKc2IyTnJaV1F1WEc0Z0lDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpYMGdJRzFsYzNOaFoyVmNiaUFnS2k5Y2JpQWdZWFYwYUc5eWFYTmxLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpiMjUwWlhoMExtRjFkR2h2Y21selpTaHRaWE56WVdkbEtUdGNiaUFnZlZ4dVhHNGdJR2RsZEVkeWIzVndjMDVoYldWektITmpiM0JsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnYlhsSGNtOTFjSE1nUFNCZmRHaHBjeTVqYjI1MFpYaDBMbWR5YjNWd2N6dGNiaUFnSUNCc1pYUWdaM0p2ZFhCelRtRnRaWE1nUFNCYlhUdGNiaUFnSUNCcFppQW9iWGxIY205MWNITmJjMk52Y0dWZElDRTlQU0I3ZlNrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ1ozSnZkWEJPWVcxbElHbHVJRzE1UjNKdmRYQnpXM05qYjNCbFhTa2dlMXh1SUNBZ0lDQWdJQ0JuY205MWNITk9ZVzFsY3k1d2RYTm9LR2R5YjNWd1RtRnRaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbmNtOTFjSE5PWVcxbGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRkpsZEhKcFpYWmxjeUIwYUdVZ1ozSnZkWEFnZDJsMGFDQjBhR1VnWjJsMlpXNGdaM0p2ZFhBZ2JtRnRaU0JtY205dElIUm9aU0JRUkZBdVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnWjNKdmRYQk9ZVzFsWEc0Z0lDb2dRSEpsZEhWeWJpQjdRWEp5WVhsOUlDQWdaM0p2ZFhCY2JpQWdLaTljYmlBZ1oyVjBUR2x6ZENoelkyOXdaU3dnWjNKdmRYQk9ZVzFsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnYlhsSGNtOTFjSE1nUFNCZmRHaHBjeTVqYjI1MFpYaDBMbWR5YjNWd2N6dGNiaUFnSUNCc1pYUWdiV1Z0WW1WeWN5QTlJRnRkTzF4dUlDQWdJR2xtSUNodGVVZHliM1Z3YzF0elkyOXdaVjBnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ0ZVVkeWIzVndjMXR6WTI5d1pWMWJaM0p2ZFhCT1lXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnRaVzFpWlhKeklEMGdiWGxIY205MWNITmJjMk52Y0dWZFcyZHliM1Z3VG1GdFpWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ0WlcxaVpYSnpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUTNKbFlYUmxjeUJoSUdkeWIzVndJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1V1WEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdaM0p2ZFhCT1lXMWxYRzRnSUNvdlhHNGdJR055WldGMFpVeHBjM1FvYzJOdmNHVXNJSFI1Y0dVc0lHZHliM1Z3VG1GdFpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiWGxIY205MWNITWdQU0JmZEdocGN5NWpiMjUwWlhoMExtZHliM1Z3Y3p0Y2JpQWdJQ0JwWmlBb2JYbEhjbTkxY0hOYmMyTnZjR1ZkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJRzE1UjNKdmRYQnpXM05qYjNCbFhTQTlJSHQ5TzF4dUlDQWdJSDFjYmlBZ0lDQnRlVWR5YjNWd2MxdHpZMjl3WlYxYlozSnZkWEJPWVcxbFhTQTlJRnRkTzF4dVhHNGdJQ0FnYkdWMElIQnZiR2xqZVNBOUlIdGNiaUFnSUNBZ0lHRjFkR2h2Y21selpUb2dabUZzYzJVc1hHNGdJQ0FnSUNCamIyNWthWFJwYjI0NklIUjVjR1VnS3lBbklHbHVJQ2NnS3lCbmNtOTFjRTVoYldVc1hHNGdJQ0FnSUNCelkyOXdaVG9nYzJOdmNHVXNYRzRnSUNBZ0lDQmhZM1JwYjI1ek9pQmJYVnh1SUNBZ0lIMDdYRzRnSUNBZ1gzUm9hWE11WVdSa1VHOXNhV05wWlhNb1czQnZiR2xqZVYwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUcxNVIzSnZkWEJ6TzF4dUlDQjlYRzVjYmlBZ1pHVnNaWFJsUjNKdmRYQW9jMk52Y0dVc0lHZHliM1Z3VG1GdFpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiWGxIY205MWNITWdQU0JmZEdocGN5NWpiMjUwWlhoMExtZHliM1Z3Y3p0Y2JpQWdJQ0JrWld4bGRHVWdiWGxIY205MWNITmJjMk52Y0dWZFcyZHliM1Z3VG1GdFpWMDdYRzVjYmlBZ0lDQnNaWFFnYlhsUWIyeHBZMmxsY3lBOUlGOTBhR2x6TG1OdmJuUmxlSFF1Y0c5c2FXTnBaWE03WEc1Y2JpQWdJQ0JzWlhRZ2NHOXNhV05wWlhNZ1BTQnRlVkJ2YkdsamFXVnpXM05qYjNCbFhUdGNiaUFnSUNCbWIzSWdLR3hsZENCcElHbHVJSEJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdJQ0JzWlhRZ1kyOXVaR2wwYVc5dUlEMGdjRzlzYVdOcFpYTmJhVjB1WTI5dVpHbDBhVzl1TG5Od2JHbDBLQ2NnSnlrN1hHNGdJQ0FnSUNCamIyNWthWFJwYjI0dWMyaHBablFvS1R0Y2JpQWdJQ0FnSUd4bGRDQm5jbTkxY0VsdVVHOXNhV041SUQwZ1kyOXVaR2wwYVc5dUxtcHZhVzRvSnlBbktUdGNiaUFnSUNBZ0lHbG1JQ2huY205MWNFbHVVRzlzYVdONUlEMDlQU0JuY205MWNFNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhCdmJHbGphV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCQlpHUnpJSFJvWlNCbmFYWmxiaUIxYzJWeUlHVnRZV2xzSUhSdklIUm9aU0JuY205MWNDQjNhWFJvSUhSb1pTQm5hWFpsYmlCdVlXMWxMbHh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lIVnpaWEpGYldGcGJGeHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUdkeWIzVndUbUZ0WlZ4dUlDQXFMMXh1SUNCaFpHUlViMHhwYzNRb2MyTnZjR1VzSUhSNWNHVXNJR2R5YjNWd1RtRnRaU3dnZFhObGNrVnRZV2xzS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR3hsZENCdGVVZHliM1Z3Y3lBOUlGOTBhR2x6TG1OdmJuUmxlSFF1WjNKdmRYQnpPMXh1SUNBZ0lHbG1JQ2h0ZVVkeWIzVndjMXR6WTI5d1pWMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2JYbEhjbTkxY0hOYmMyTnZjR1ZkSUQwZ2UzMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHRlVWR5YjNWd2MxdHpZMjl3WlYxYlozSnZkWEJPWVcxbFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCdGVVZHliM1Z3Y3lBOUlGOTBhR2x6TG1OeVpXRjBaVXhwYzNRb2MyTnZjR1VzSUhSNWNHVXNJR2R5YjNWd1RtRnRaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h0ZVVkeWIzVndjMXR6WTI5d1pWMWJaM0p2ZFhCT1lXMWxYUzVwYm1SbGVFOW1LSFZ6WlhKRmJXRnBiQ2tnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0J0ZVVkeWIzVndjMXR6WTI5d1pWMWJaM0p2ZFhCT1lXMWxYUzV3ZFhOb0tIVnpaWEpGYldGcGJDazdYRzRnSUNBZ2ZWeHVYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJTWlcxdmRtVnpJSFJvWlNCbmFYWmxiaUIxYzJWeUlHVnRZV2xzSUdaeWIyMGdkR2hsSUdkeWIzVndJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1V1WEc0Z0lDb2dRSEJoY21GdElDQjdVM1J5YVc1bmZTQWdkWE5sY2tWdFlXbHNYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ1ozSnZkWEJPWVcxbFhHNGdJQ292WEc0Z0lISmxiVzkyWlVaeWIyMUhjbTkxY0NoelkyOXdaU3dnWjNKdmRYQk9ZVzFsTENCMWMyVnlSVzFoYVd3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHMTVSM0p2ZFhCeklEMGdYM1JvYVhNdVkyOXVkR1Y0ZEM1bmNtOTFjSE03WEc0Z0lDQWdiR1YwSUdkeWIzVndJRDBnYlhsSGNtOTFjSE5iYzJOdmNHVmRXMmR5YjNWd1RtRnRaVjA3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlHZHliM1Z3S1NCN1hHNGdJQ0FnSUNCcFppQW9aM0p2ZFhCYmFWMGdQVDA5SUhWelpYSkZiV0ZwYkNrZ2UxeHVJQ0FnSUNBZ0lDQm5jbTkxY0M1emNHeHBZMlVvYVN3Z01TazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHZGxkRlJwYldWemJHOTBjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J3YjJ4cFkybGxjeUE5SUY5MGFHbHpMbU52Ym5SbGVIUXVjRzlzYVdOcFpYTXVkWE5sY2p0Y2JpQWdJQ0JzWlhRZ2RHbHRaVkpsYzNSeWFXTjBhVzl1Y3lBOUlGdGRPMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnY0c5c2FXTnBaWE1wSUh0Y2JpQWdJQ0FnSUdsbUlDaHdiMnhwWTJsbGMxdHBYUzVqYjI1a2FYUnBiMjR1YzNCc2FYUW9KeUFuS1Zzd1hTQTlQVDBnSjNScGJXVW5LU0I3WEc0Z0lDQWdJQ0FnSUhScGJXVlNaWE4wY21samRHbHZibk11Y0hWemFDaHdiMnhwWTJsbGMxdHBYUzVqYjI1a2FYUnBiMjRwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHbHRaVkpsYzNSeWFXTjBhVzl1Y3p0Y2JpQWdmVnh1WEc0Z0lHZGxkRlJwYldWemJHOTBRbmxKWkNoamIyNWthWFJwYjI0cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCd2IyeHBZMmxsY3lBOUlGOTBhR2x6TG1OdmJuUmxlSFF1Y0c5c2FXTnBaWE11ZFhObGNqdGNiaUFnSUNCbWIzSWdLR3hsZENCcElHbHVJSEJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NHOXNhV05wWlhOYmFWMHVZMjl1WkdsMGFXOXVJRDA5UFNCamIyNWthWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnZiR2xqYVdWelcybGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkJ2YkdsamVVVnVaMmx1WlR0Y2JpSXNJbWx0Y0c5eWRDQkRiMjUwWlhoMElHWnliMjBnSnk0dUwwTnZiblJsZUhRbk8xeHVhVzF3YjNKMElIdGthWFpwWkdWRmJXRnBiSDBnWm5KdmJTQW5MaTR2TGk0dmRYUnBiSE12ZFhScGJITW5PMXh1WEc0dkwybHRjRzl5ZENCd1pYSnphWE4wWlc1alpVMWhibUZuWlhJZ1puSnZiU0FuTGk0dkxpNHZjR1Z5YzJsemRHVnVZMlV2VUdWeWMybHpkR1Z1WTJWTllXNWhaMlZ5Snp0Y2JseHVZMnhoYzNNZ1EyOXRiVzl1UTNSNElHVjRkR1Z1WkhNZ1EyOXVkR1Y0ZENCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lGOTBhR2x6TG5CdmJHbGphV1Z6SUQwZ1gzUm9hWE11Ykc5aFpGQnZiR2xqYVdWektDazdYRzRnSUNBZ1gzUm9hWE11WjNKdmRYQnpJRDBnZTMwN1hHNGdJSDFjYmx4dUlDQmhjSEJzZVZCdmJHbGphV1Z6S0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J3YjJ4cFkybGxjMUpsYzNWc2RDQTlJRnQwY25WbExDQmJYVjA3WEc0Z0lDQWdiR1YwSUdGd2NHeHBZMkZpYkdWUWIyeHBZMmxsY3lBOUlGOTBhR2x6TG1kbGRFRndjR3hwWTJGaWJHVlFiMnhwWTJsbGN5aHRaWE56WVdkbEtUdGNiaUFnSUNCd2IyeHBZMmxsYzFKbGMzVnNkQ0E5SUY5MGFHbHpMbkJrY0M1bGRtRnNkV0YwWlNodFpYTnpZV2RsTENCaGNIQnNhV05oWW14bFVHOXNhV05wWlhNcE8xeHVJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvSUQwZ1lYQndiR2xqWVdKc1pWQnZiR2xqYVdWekxteGxibWQwYUNBaFBUMGdNRHRjYmlBZ0lDQmZkR2hwY3k1d1pYQXVaVzVtYjNKalpTaHdiMnhwWTJsbGMxSmxjM1ZzZENrN1hHNGdJQ0FnY21WMGRYSnVJSHNnYldWemMyRm5aVG9nYldWemMyRm5aU3dnY0c5c2FXTnBaWE5TWlhOMWJIUTZJSEJ2YkdsamFXVnpVbVZ6ZFd4MElIMDdYRzRnSUgxY2JseHVJQ0J6WlhRZ1pHRjBaU2h1YjNjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR2xtSUNnaGJtOTNMbTFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOWtZWFJsUVhSMGNtbGlkWFJsSUQwZ0tIUjVjR1Z2WmlCdWIzY2dQVDA5SUNkemRISnBibWNuS1NBL0lHNXZkeUE2SUY5MGFHbHpMbDluWlhSRVlYUmxLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzJWMElHUnZiV0ZwYmlod1lYSmhiWE1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lGOTBhR2x6TGw5a2IyMWhhVzVCZEhSeWFXSjFkR1VnUFNCa2FYWnBaR1ZGYldGcGJDaHdZWEpoYlhNdWJXVnpjMkZuWlM1aWIyUjVMbWxrWlc1MGFYUjVMblZ6WlhKUWNtOW1hV3hsTG5WelpYSnVZVzFsS1M1a2IyMWhhVzQ3WEc0Z0lIMWNibHh1SUNCelpYUWdjMjkxY21ObEtIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdYM1JvYVhNdVgzTnZkWEpqWlVGMGRISnBZblYwWlNBOUlIQmhjbUZ0Y3k1dFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VkWE5sY2xCeWIyWnBiR1V1ZFhObGNtNWhiV1U3WEc0Z0lIMWNibHh1SUNCelpYUWdkR2x0WlNodWIzY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUdsbUlDZ2hibTkzTG0xbGMzTmhaMlVwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDkwYVcxbFFYUjBjbWxpZFhSbElEMGdLRzV2ZHlrZ1B5QnViM2NnT2lCZmRHaHBjeTVmWjJWMFZHbHRaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhObGRDQjNaV1ZyWkdGNUtHNXZkeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2FXWWdLQ0Z1YjNjdWJXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDNkbFpXdGtZWGxCZEhSeWFXSjFkR1VnUFNBb2JtOTNLU0EvSUc1dmR5QTZJRjkwYUdsekxsOW5aWFJYWldWclJHRjVLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWjJWMElHUmhkR1VvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDJSaGRHVkJkSFJ5YVdKMWRHVTdYRzRnSUgxY2JseHVJQ0JuWlhRZ1pHOXRZV2x1S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5a2IyMWhhVzVCZEhSeWFXSjFkR1U3WEc0Z0lIMWNibHh1SUNCblpYUWdjMjkxY21ObEtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJRjkwYUdsekxsOXpiM1Z5WTJWQmRIUnlhV0oxZEdVN1hHNGdJSDFjYmx4dUlDQm5aWFFnZEdsdFpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZkR2x0WlVGMGRISnBZblYwWlR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0IzWldWclpHRjVLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbDkzWldWclpHRjVRWFIwY21saWRYUmxPMXh1SUNCOVhHNWNiaUFnWDJkbGRFUmhkR1VvS1NCN1hHNGdJQ0FnYkdWMElHUmhkR1VnUFNCdVpYY2dSR0YwWlNncE8xeHVJQ0FnSUd4bGRDQmtZWGtnUFNCVGRISnBibWNvWkdGMFpTNW5aWFJFWVhSbEtDa3BPMXh1SUNBZ0lHbG1JQ2hrWVhrdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0JrWVhrZ1BTQW5NQ2NnS3lCa1lYazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJRzF2Ym5Sb0lEMGdVM1J5YVc1bktHUmhkR1V1WjJWMFRXOXVkR2dvS1NBcklERXBPMXh1SUNBZ0lHbG1JQ2h0YjI1MGFDNXNaVzVuZEdnZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUcxdmJuUm9JRDBnSnpBbklDc2diVzl1ZEdnN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR1JoZVNBcklDY3ZKeUFySUcxdmJuUm9JQ3NnSnk4bklDc2daR0YwWlM1blpYUkdkV3hzV1dWaGNpZ3BPMXh1SUNCOVhHNWNiaUFnWDJkbGRFeHBjM1FvYzJOdmNHVXNJR2R5YjNWd1RtRnRaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJRzE1UjNKdmRYQnpJRDBnWDNSb2FYTXVaM0p2ZFhCek8xeHVJQ0FnSUd4bGRDQnRaVzFpWlhKeklEMGdXMTA3WEc0Z0lDQWdhV1lnS0cxNVIzSnZkWEJ6VzNOamIzQmxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRzE1UjNKdmRYQnpXM05qYjNCbFhWdG5jbTkxY0U1aGJXVmRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lHMWxiV0psY25NZ1BTQnRlVWR5YjNWd2MxdHpZMjl3WlYxYlozSnZkWEJPWVcxbFhUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzFsYldKbGNuTTdYRzRnSUgxY2JseHVJQ0JmWjJWMFZHbHRaU2dwSUh0Y2JpQWdJQ0JzWlhRZ2JtOTNJRDBnYm1WM0lFUmhkR1VvS1R0Y2JpQWdJQ0JzWlhRZ2JXbHVkWFJsY3lBOUlGTjBjbWx1WnlodWIzY3VaMlYwVFdsdWRYUmxjeWdwS1R0Y2JpQWdJQ0JwWmlBb2JXbHVkWFJsY3k1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmlBZ0lDQWdJRzFwYm5WMFpYTWdQU0FuTUNjZ0t5QnRhVzUxZEdWek8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjR0Z5YzJWSmJuUW9VM1J5YVc1bktHNXZkeTVuWlhSSWIzVnljeWdwS1NBcklHMXBiblYwWlhNcE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEZkbFpXdEVZWGtvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRk4wY21sdVp5aHVaWGNnUkdGMFpTZ3BMbWRsZEVSaGVTZ3BLVHRjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVOdmJXMXZia04wZUR0Y2JpSXNJbWx0Y0c5eWRDQkRiMjF0YjI1RGRIZ2dabkp2YlNBbkxpOURiMjF0YjI1RGRIZ25PMXh1YVcxd2IzSjBJSHRrYVhacFpHVlZVa3dzSUdselJHRjBZVTlpYW1WamRGVlNUSDBnWm5KdmJTQW5MaTR2TGk0dmRYUnBiSE12ZFhScGJITW5PMXh1WEc1amJHRnpjeUJTZFc1MGFXMWxRMjl5WlVOMGVDQmxlSFJsYm1SeklFTnZiVzF2YmtOMGVDQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9hV1JOYjJSMWJHVXNJSEoxYm5ScGJXVlNaV2RwYzNSeWVTa2dlMXh1SUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1cFpFMXZaSFZzWlNBOUlHbGtUVzlrZFd4bE8xeHVJQ0FnSUY5MGFHbHpMbkoxYm5ScGJXVlNaV2RwYzNSeWVTQTlJSEoxYm5ScGJXVlNaV2RwYzNSeWVUdGNiaUFnZlZ4dVhHNGdJR3h2WVdSUWIyeHBZMmxsY3lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYVdZZ0tDRmZkR2hwY3k1emRXSnpVRzlzYVdOcFpYTXBJSHRjYmlBZ0lDQWdJR3hsZENCd2IyeHBZM2tnUFNCN1hHNGdJQ0FnSUNBZ0lITmpiM0JsT2lBbloyeHZZbUZzSnl4Y2JpQWdJQ0FnSUNBZ1kyOXVaR2wwYVc5dU9pQW5jM1ZpYzJOeWFYQjBhVzl1SUdWeGRXRnNjeUFxSnl4Y2JpQWdJQ0FnSUNBZ1lYVjBhRzl5YVhObE9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCaFkzUnBiMjV6T2lCYmUyMWxkR2h2WkRvZ0ozSmxaMmx6ZEdWeVUzVmljMk55YVdKbGNpZDlMQ0I3YldWMGFHOWtPaWRrYjAxMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUozMWRYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdYM1JvYVhNdWMzVmljMUJ2YkdsamFXVnpJRDBnZTMwN1hHNGdJQ0FnSUNCZmRHaHBjeTV6ZFdKelVHOXNhV05wWlhOYmNHOXNhV041TG5OamIzQmxYU0E5SUhCdmJHbGplVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2UzMDdYRzRnSUgxY2JseHVJQ0JmYVhOR2NtOXRVbVZ0YjNSbFUwMG9abkp2YlNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUhOd2JHbDBSbkp2YlNBOUlHWnliMjB1YzNCc2FYUW9Kem92THljcE8xeHVJQ0FnSUhKbGRIVnliaUJ6Y0d4cGRFWnliMjFiTUYwZ1BUMDlJQ2R5ZFc1MGFXMWxKeUFtSmlCbWNtOXRJQ0U5UFNCZmRHaHBjeTV5ZFc1MGFXMWxVbVZuYVhOMGNua3VjblZ1ZEdsdFpWVlNUQ0FySUNjdmMyMG5PMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVW1WMGRYSnVjeUIwYUdVZ2NHOXNhV05wWlhNZ1lYTnpiMk5wWVhSbFpDQjNhWFJvSUdFZ2MyTnZjR1V1WEc0Z0lDb2dRSEJoY21GdElDQWdlMU4wY21sdVozMGdjMk52Y0dWY2JpQWdLaUJBY21WMGRYSnVJQ0I3UVhKeVlYbDlJQ0J3YjJ4cFkybGxjMXh1SUNBcUwxeHVJQ0JuWlhSQmNIQnNhV05oWW14bFVHOXNhV05wWlhNb2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUcxNVVHOXNhV05wWlhNZ1BTQmZkR2hwY3k1d2IyeHBZMmxsY3p0Y2JpQWdJQ0JzWlhRZ2NHOXNhV05wWlhNZ1BTQmJYVHRjYmx4dUlDQWdJR2xtSUNodFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkemRXSnpZM0pwWW1VbklDWW1JRjkwYUdsekxsOXBjMFp5YjIxU1pXMXZkR1ZUVFNodFpYTnpZV2RsTG1aeWIyMHBLU0I3WEc0Z0lDQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRDQTlJRzFsYzNOaFoyVXVZbTlrZVM1eVpYTnZkWEpqWlR0Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1emRXSnpVRzlzYVdOcFpYTmJaR0YwWVU5aWFtVmpkRjBwSUh0Y2JpQWdJQ0FnSUNBZ2NHOXNhV05wWlhNdWNIVnphQ2hmZEdocGN5NXpkV0p6VUc5c2FXTnBaWE5iWkdGMFlVOWlhbVZqZEYwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIbE9ZVzFsSUQwZ1gzUm9hWE11Y25WdWRHbHRaVkpsWjJsemRISjVMbWRsZEVoNWNHVnlkSGxPWVcxbEtGOTBhR2x6TGw5blpYUlZVa3dvYldWemMyRm5aUzUwYnlrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXVjM1ZpYzFCdmJHbGphV1Z6VzJoNWNHVnlkSGxPWVcxbFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhCdmJHbGphV1Z6TG5CMWMyZ29YM1JvYVhNdWMzVmljMUJ2YkdsamFXVnpXMmg1Y0dWeWRIbE9ZVzFsWFNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeTlVVDBSUE9pQmphR0Z1WjJVZ2JtRnRaVnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNUlEMGdYM1JvYVhNdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1kbGRGSmxjRzl5ZEdWeVZWSk1VM2x1WTJodmJtOTFjeWhmZEdocGN5NWZaMlYwVlZKTUtHMWxjM05oWjJVdWRHOHBLVHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdiM2R1WlhJZ1BTQmZkR2hwY3k1eWRXNTBhVzFsVW1WbmFYTjBjbmt1WjJWMFNIbHdaWEowZVU5M2JtVnlLR2g1Y0dWeWRIa3BPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGZkR2hwY3k1emRXSnpVRzlzYVdOcFpYTmJiM2R1WlhKZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IyeHBZMmxsY3k1d2RYTm9LRjkwYUdsekxuTjFZbk5RYjJ4cFkybGxjMXR2ZDI1bGNsMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiMnhwWTJsbGN5NXdkWE5vS0Y5MGFHbHpMbk4xWW5OUWIyeHBZMmxsY3k1bmJHOWlZV3dwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNBdktteGxkQ0JwWkNBOUlHMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlUzUxYzJWeVVISnZabWxzWlM1MWMyVnlibUZ0WlR0Y2JpQWdJQ0JzWlhRZ2FIbHdaWEowZVU1aGJXVWdQU0JmZEdocGN5NXlkVzUwYVcxbFVtVm5hWE4wY25rdVoyVjBTSGx3WlhKMGVVNWhiV1VvYldWemMyRm5aUzVtY205dEtUdGNibHh1SUNBZ0lHbG1JQ2h0ZVZCdmJHbGphV1Z6VzJsa1hTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCd2IyeHBZMmxsY3k1d2RYTm9MbUZ3Y0d4NUtIQnZiR2xqYVdWekxDQnRlVkJ2YkdsamFXVnpXMmxrWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHMTVVRzlzYVdOcFpYTmJhSGx3WlhKMGVVNWhiV1ZkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEJ2YkdsamFXVnpMbkIxYzJndVlYQndiSGtvY0c5c2FXTnBaWE1zSUcxNVVHOXNhV05wWlhOYmFIbHdaWEowZVU1aGJXVmRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYlhsUWIyeHBZMmxsY3k1bmJHOWlZV3dnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjRzlzYVdOcFpYTXVjSFZ6YUM1aGNIQnNlU2h3YjJ4cFkybGxjeXdnYlhsUWIyeHBZMmxsY3k1bmJHOWlZV3dwTzF4dUlDQWdJSDBxTDF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNCcGJpQnRlVkJ2YkdsamFXVnpLU0I3WEc0Z0lDQWdJQ0J3YjJ4cFkybGxjeTV3ZFhOb0xtRndjR3g1S0hCdmJHbGphV1Z6TENCdGVWQnZiR2xqYVdWelcybGRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NHOXNhV05wWlhNN1hHNGdJSDFjYmx4dUlDQmhkWFJvYjNKcGMyVW9iV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSnkwdExTQlFiMnhwWTNrZ1JXNW5hVzVsSUMwdExTY3BPMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0J0WlhOellXZGxMbUp2WkhrZ1BTQnRaWE56WVdkbExtSnZaSGtnZkh3Z2UzMDdYRzRnSUNBZ0lDQnNaWFFnY21WemRXeDBPMXh1SUNBZ0lDQWdiR1YwSUdselZHOVdaWEpwWm5rZ1BTQmZkR2hwY3k1cGMxUnZWbVZ5YVdaNUtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2JHVjBJR2x6U1c1amIyMXBibWROWlhOellXZGxJRDBnWDNSb2FYTXVYMmx6U1c1amIyMXBibWROWlhOellXZGxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdiR1YwSUdselZHOURlWEJvWlhJZ1BTQmZkR2hwY3k1ZmFYTlViME41Y0dobGNrMXZaSFZzWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUdsbUlDaHBjMVJ2Vm1WeWFXWjVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMVJ2UTNsd2FHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1a1pXTnllWEIwS0cxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRjkwYUdsekxtRndjR3g1VUc5c2FXTnBaWE1vYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsUVdOalpYQjBaV1FnUFNCeVpYTjFiSFF1Y0c5c2FXTnBaWE5TWlhOMWJIUmJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVWdQU0J5WlhOMWJIUXViV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsYzNOaFoyVkJZMk5sY0hSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkTlpYTnpZV2RsSUdKc2IyTnJaV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN0lISmxhbVZqZENobGNuSnZjaWs3SUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlGOTBhR2x6TG1Gd2NHeDVVRzlzYVdOcFpYTW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpVRmpZMlZ3ZEdWa0lEMGdjbVZ6ZFd4MExuQnZiR2xqYVdWelVtVnpkV3gwV3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aU0E5SUhKbGMzVnNkQzV0WlhOellXZGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsYzNOaFoyVkJZMk5sY0hSbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZE5aWE56WVdkbElHSnNiMk5yWldRbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHbHpWRzlUWlhSSlJDQTlJRjkwYUdsekxsOXBjMVJ2VTJWMFNVUW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpWRzlUWlhSSlJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WjJWMFNXUmxiblJwZEhrb2JXVnpjMkZuWlNrdWRHaGxiaWhwWkdWdWRHbDBlU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTQTlJR2xrWlc1MGFYUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmZkR2hwY3k1aGNIQnNlVkJ2YkdsamFXVnpLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aVUZqWTJWd2RHVmtJRDBnY21WemRXeDBMbkJ2YkdsamFXVnpVbVZ6ZFd4MFd6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdjbVZ6ZFd4MExtMWxjM05oWjJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRaWE56WVdkbFFXTmpaWEIwWldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVWIwTjVjR2hsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVpXNWpjbmx3ZENodFpYTnpZV2RsS1M1MGFHVnVLRzFsYzNOaFoyVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN0lISmxhbVZqZENobGNuSnZjaWs3SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvSjAxbGMzTmhaMlVnWW14dlkydGxaQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0FvWlhKeWIzSXBJRDArSUhzZ2NtVnFaV04wS0dWeWNtOXlLVHNnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUY5MGFHbHpMbUZ3Y0d4NVVHOXNhV05wWlhNb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlVGalkyVndkR1ZrSUQwZ2NtVnpkV3gwTG5CdmJHbGphV1Z6VW1WemRXeDBXekJkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTQTlJSEpsYzNWc2RDNXRaWE56WVdkbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMWxjM05oWjJWQlkyTmxjSFJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkTlpYTnpZV2RsSUdKc2IyTnJaV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZhWE5VYjFObGRFbEVLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnYzJOb1pXMWhjMVJ2U1dkdWIzSmxJRDBnV3lka2IyMWhhVzR0YVdSd0p5d2dKM0oxYm5ScGJXVW5MQ0FuWkc5dFlXbHVKMTA3WEc0Z0lDQWdiR1YwSUhOd2JHbDBSbkp2YlNBOUlDaHRaWE56WVdkbExtWnliMjBwTG5Od2JHbDBLQ2M2THk4bktUdGNiaUFnSUNCc1pYUWdabkp2YlZOamFHVnRZU0E5SUhOd2JHbDBSbkp2YlZzd1hUdGNibHh1SUNBZ0lISmxkSFZ5YmlCelkyaGxiV0Z6Vkc5SloyNXZjbVV1YVc1a1pYaFBaaWhtY205dFUyTm9aVzFoS1NBOVBUMGdMVEU3WEc0Z0lIMWNibHh1SUNCelpYUWdaM0p2ZFhBb2NHRnlZVzF6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnBaaUFvY0dGeVlXMXpMbWR5YjNWd0lEMDlQU0FuY0hKbFlYVjBhRzl5YVhObFpDY3BJSHRjYmlBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMFZWSk1JRDBnY0dGeVlXMXpMbVJsYzNScGJtRjBhVzl1TG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1MbkJ2Y0NncE8xeHVJQ0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0E5SUdSaGRHRlBZbXBsWTNSVlVreGJNRjBnS3lBbkx5OG5JQ3NnWkdGMFlVOWlhbVZqZEZWU1RGc3lYVHRjYmlBZ0lDQWdJRjkwYUdsekxtZHliM1Z3UVhSMGNtbGlkWFJsSUQwZ1gzUm9hWE11Y25WdWRHbHRaVkpsWjJsemRISjVMbWRsZEZCeVpVRjFkR2hUZFdKelkzSnBZbVZ5Y3loa1lYUmhUMkpxWldOMFZWSk1LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WjNKdmRYQkJkSFJ5YVdKMWRHVWdQU0JmZEdocGN5NWZaMlYwVEdsemRDaHdZWEpoYlhNdWMyTnZjR1VzSUhCaGNtRnRjeTVuY205MWNDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjMlYwSUhOMVluTmpjbWx3ZEdsdmJpaHdZWEpoYlhNcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxuTjFZbk5qY21sd2RHbHZia0YwZEhKcFluVjBaU0E5SUhCaGNtRnRjeTV0WlhOellXZGxMbUp2WkhrdWMzVmljMk55YVdKbGNqdGNiaUFnZlZ4dVhHNGdJR2RsZENCbmNtOTFjQ2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVuY205MWNFRjBkSEpwWW5WMFpUdGNiaUFnZlZ4dVhHNGdJR2RsZENCemRXSnpZM0pwY0hScGIyNG9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVjM1ZpYzJOeWFYQjBhVzl1UVhSMGNtbGlkWFJsTzF4dUlDQjlYRzVjYmlBZ1gybHpTVzVqYjIxcGJtZE5aWE56WVdkbEtHMWxjM05oWjJVcElIdGNiaUFnSUNCeVpYUjFjbTRnS0cxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTa2dQeUIwY25WbElEb2dabUZzYzJVN1hHNGdJSDFjYmx4dUlDQmZaMlYwVlZKTUtIVnliQ2tnZTF4dUlDQWdJR3hsZENCemNHeHBkRlZTVENBOUlIVnliQzV6Y0d4cGRDZ25MeWNwTzF4dUlDQWdJSEpsZEhWeWJpQnpjR3hwZEZWU1RGc3dYU0FySUNjdkx5Y2dLeUJ6Y0d4cGRGVlNURnN5WFNBcklDY3ZKeUFySUhOd2JHbDBWVkpNV3pOZE8xeHVJQ0I5WEc1Y2JpQWdMeTlVVDBSUE9pQjJaWEpwWm5rZ2FXWWdhWE1nYUhsd1pYSjBlU0J2Y2lCa1lYUmhJRzlpYW1WamRGeHVJQ0JuWlhSSlpHVnVkR2wwZVNodFpYTnpZV2RsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtSUNodFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkMWNHUmhkR1VuS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVhV1JOYjJSMWJHVXVaMlYwU1dSbGJuUnBkSGxQWmtoNWNHVnlkSGtvYldWemMyRm5aUzVpYjJSNUxuTnZkWEpqWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0ozSmxjM0J2Ym5ObEp5QW1KaUJ0WlhOellXZGxMbUp2WkhrdWMyOTFjbU5sSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1cFpFMXZaSFZzWlM1blpYUkpaR1Z1ZEdsMGVVOW1TSGx3WlhKMGVTaHRaWE56WVdkbExtSnZaSGt1YzI5MWNtTmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnWm5KdmJTQTlJRjkwYUdsekxsOW5aWFJWVWt3b2JXVnpjMkZuWlM1bWNtOXRLVHRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11YVdSTmIyUjFiR1V1WjJWMFNXUmxiblJwZEhsUFpraDVjR1Z5ZEhrb1gzUm9hWE11WDJkbGRGVlNUQ2htY205dEtTazdYRzRnSUgxY2JseHVJQ0JwYzFSdlZtVnlhV1o1S0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0JzWlhRZ2MyTm9aVzFoYzFSdlNXZHViM0psSUQwZ1d5ZGtiMjFoYVc0dGFXUndKeXdnSjNKMWJuUnBiV1VuTENBblpHOXRZV2x1SjEwN1hHNGdJQ0FnYkdWMElITndiR2wwUm5KdmJTQTlJQ2h0WlhOellXZGxMbVp5YjIwcExuTndiR2wwS0NjNkx5OG5LVHRjYmlBZ0lDQnNaWFFnWm5KdmJWTmphR1Z0WVNBOUlITndiR2wwUm5KdmJWc3dYVHRjYmlBZ0lDQnNaWFFnYzNCc2FYUlVieUE5SUNodFpYTnpZV2RsTG5SdktTNXpjR3hwZENnbk9pOHZKeWs3WEc0Z0lDQWdiR1YwSUhSdlUyTm9aVzFoSUQwZ0lITndiR2wwVkc5Yk1GMDdYRzRnSUNBZ2FXWWdLR1p5YjIxVFkyaGxiV0VnUFQwOUlHMWxjM05oWjJVdVpuSnZiU0I4ZkNCMGIxTmphR1Z0WVNBOVBUMGdiV1Z6YzJGblpTNTBieWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjMk5vWlcxaGMxUnZTV2R1YjNKbExtbHVaR1Y0VDJZb1puSnZiVk5qYUdWdFlTa2dQVDA5SUMweElIeDhJSE5qYUdWdFlYTlViMGxuYm05eVpTNXBibVJsZUU5bUtIUnZVMk5vWlcxaEtTQTlQVDBnTFRFN1hHNGdJSDFjYmx4dUlDQXZMMVJQUkU4Z2RYTmxJSE5qYUdWdFlYTlViMGxuYm05eVpTQnBibk4wWldGa1hHNGdJRjlwYzFSdlEzbHdhR1Z5VFc5a2RXeGxLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnYVhORGNtVmhkR1VnUFNCdFpYTnpZV2RsTG5SNWNHVWdQVDA5SUNkamNtVmhkR1VuTzF4dUlDQWdJR3hsZENCcGMwWnliMjFJZVhCbGNuUjVJRDBnWkdsMmFXUmxWVkpNS0cxbGMzTmhaMlV1Wm5KdmJTa3VkSGx3WlNBOVBUMGdKMmg1Y0dWeWRIa25PMXh1SUNBZ0lHeGxkQ0JwYzFSdlNIbHdaWEowZVNBOUlHUnBkbWxrWlZWU1RDaHRaWE56WVdkbExuUnZLUzUwZVhCbElEMDlQU0FuYUhsd1pYSjBlU2M3WEc0Z0lDQWdiR1YwSUdselZHOUVZWFJoVDJKcVpXTjBJRDBnYVhORVlYUmhUMkpxWldOMFZWSk1LRzFsYzNOaFoyVXVkRzhwTzF4dUlDQWdJR3hsZENCcGMwaGhibVJ6YUdGclpTQTlJRzFsYzNOaFoyVXVkSGx3WlNBOVBUMGdKMmhoYm1SemFHRnJaU2M3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLR2x6UTNKbFlYUmxJQ1ltSUdselJuSnZiVWg1Y0dWeWRIa2dKaVlnYVhOVWIwaDVjR1Z5ZEhrcElIeDhJQ2hwYzBOeVpXRjBaU0FtSmlCcGMwWnliMjFJZVhCbGNuUjVJQ1ltSUdselZHOUVZWFJoVDJKcVpXTjBLU0I4ZkNCcGMwaGhibVJ6YUdGclpUdGNiaUFnZlZ4dVhHNGdJR1JsWTNKNWNIUW9iV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbWxrVFc5a2RXeGxMbVJsWTNKNWNIUk5aWE56WVdkbEtHMWxjM05oWjJVcExuUm9aVzRvWm5WdVkzUnBiMjRvYlhObktTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iWE5uS1R0Y2JpQWdJQ0FnSUgwc0lDaGxjbkp2Y2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JsYm1OeWVYQjBLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVwWkUxdlpIVnNaUzVsYm1OeWVYQjBUV1Z6YzJGblpTaHRaWE56WVdkbEtTNTBhR1Z1S0NodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNodGMyY3BPMXh1SUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHZJRlJQUkU4NklHbHVjM1JsWVdRZ2IyWWdkbVZ5YVdaNWFXNW5JRzFsYzNOaFoyVWdkSGx3WlN3Z2JHOWhaQ0JwZENCcGJpQlFiMnhwWTNsRmJtZHBibVV1WVhCd2JHbGpZV0pzWlZCdmJHbGphV1Z6S0NrZ2FXWWdhWFFnYVhNZ1lTQnpkV0p6WTNKcGNIUnBiMjRnZEc4Z1lTQmtZWFJoSUc5aWFtVmpkRnh1SUNCeVpXZHBjM1JsY2xOMVluTmpjbWxpWlhJb2JXVnpjMkZuWlN3Z1lYVjBhRVJsWTJsemFXOXVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdkRzhnUFNCdFpYTnpZV2RsTG5SdkxuTndiR2wwS0Njdkp5azdYRzRnSUNBZ2JHVjBJR2x6UkdGMFlVOWlhbVZqZEZOMVluTmpjbWx3ZEdsdmJpQTlJSFJ2V3pSZElEMDlQU0FuYzNWaWMyTnlhWEIwYVc5dUp6dGNibHh1SUNBZ0lHbG1JQ2hoZFhSb1JHVmphWE5wYjI0Z0ppWWdhWE5FWVhSaFQySnFaV04wVTNWaWMyTnlhWEIwYVc5dUtTQjdYRzRnSUNBZ0lDQnNaWFFnWkdGMFlVOWlhbVZqZEZWU1RDQTlJRzFsYzNOaFoyVXVkRzh1YzNCc2FYUW9KeThuS1R0Y2JpQWdJQ0FnSUdSaGRHRlBZbXBsWTNSVlVrd3VjRzl3S0NrN1hHNGdJQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1JRDBnWkdGMFlVOWlhbVZqZEZWU1RGc3dYU0FySUNjdkx5Y2dLeUJrWVhSaFQySnFaV04wVlZKTVd6SmRJQ3NnSnk4bklDc2daR0YwWVU5aWFtVmpkRlZTVEZzelhUdGNiaUFnSUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZTWldkcGMzUnllUzV5WldkcGMzUmxjbE4xWW5OamNtbGlaWElvWkdGMFlVOWlhbVZqZEZWU1RDd2diV1Z6YzJGblpTNWliMlI1TG5OMVluTmpjbWxpWlhJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHUnZUWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRvYldWemMyRm5aU3dnWVhWMGFFUmxZMmx6YVc5dUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JzWlhRZ2RHOGdQU0J0WlhOellXZGxMblJ2TG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnYkdWMElHbHpSR0YwWVU5aWFtVmpkRk4xWW5OamNtbHdkR2x2YmlBOUlIUnZXelJkSUQwOVBTQW5jM1ZpYzJOeWFYQjBhVzl1Snp0Y2JseHVJQ0FnSUdsbUlDaGhkWFJvUkdWamFYTnBiMjRnSmlZZ2FYTkVZWFJoVDJKcVpXTjBVM1ZpYzJOeWFYQjBhVzl1S1NCN1hHNGdJQ0FnSUNCc1pYUWdaR0YwWVU5aWFtVmpkRlZTVENBOUlHMWxjM05oWjJVdWRHOHVjM0JzYVhRb0p5OG5LVHRjYmlBZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3dWNHOXdLQ2s3WEc0Z0lDQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlEMGdaR0YwWVU5aWFtVmpkRlZTVEZzd1hTQXJJQ2N2THljZ0t5QmtZWFJoVDJKcVpXTjBWVkpNV3pKZElDc2dKeThuSUNzZ1pHRjBZVTlpYW1WamRGVlNURnN6WFR0Y2JpQWdJQ0FnSUY5MGFHbHpMbWxrVFc5a2RXeGxMbVJ2VFhWMGRXRnNRWFYwYUdWdWRHbGpZWFJwYjI0b1pHRjBZVTlpYW1WamRGVlNUQ3dnYldWemMyRm5aUzVpYjJSNUxuTjFZbk5qY21saVpYSXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjluWlhSTVlYTjBRMjl0Y0c5dVpXNTBUMlpWVWt3b2RYSnNLU0I3WEc0Z0lDQWdiR1YwSUhOd2JHbDBJRDBnZFhKc0xuTndiR2wwS0Njdkp5azdYRzRnSUNBZ2NtVjBkWEp1SUhOd2JHbDBXM053YkdsMExteGxibWQwYUNBdElERmRPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkoxYm5ScGJXVkRiM0psUTNSNE8xeHVJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVMeThnYVcxd2IzSjBJRTFsYzNOaFoyVkdZV04wYjNKNUlHWnliMjBnSnk0dUx5NHVMM0psYzI5MWNtTmxjeTlOWlhOellXZGxSbUZqZEc5eWVTYzdYRzVjYmk4cUtseHVJQ29nUTJ4aGMzTWdkMmxzYkNCaGMyc2dkRzhnZEdobElHMWxjM05oWjJVZ2JtOWtaU0JtYjNJZ1lXUmtjbVZ6YzJWelhHNGdLaTljYm1Oc1lYTnpJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVJSHRjYmlBZ0x5b2djSEpwZG1GMFpWeHVJQ0JmZFhKc09pQlZVa3hjYmlBZ1gySjFjem9nVFdsdWFVSjFjMXh1SUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGNtVmhkR1VnWVc0Z1FXUmtjbVZ6Y3lCQmJHeHZZMkYwYVc5dVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTFWU1RDNVZVa3g5SUNBZ0lDQWdkWEpzSUMwZ2RYSnNJR1p5YjIwZ2QyaHZJR2x6SUhObGJtUnBibWNnZEdobElHMWxjM05oWjJWY2JpQWdJQ29nUUhCaGNtRnRJQ0I3VFdsdWFVSjFjMzBnSUNBZ0lDQmlkWE1nTFNCTmFXNXBRblZ6SUhWelpXUWdabTl5SUdGa1pISmxjM01nWVd4c2IyTmhkR2x2Ymx4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9kWEpzTENCaWRYTXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OGdiR1YwSUcxbGMzTmhaMlZHWVdOMGIzSjVJRDBnYm1WM0lFMWxjM05oWjJWR1lXTjBiM0o1S0NrN1hHNGdJQ0FnTHk5Y2JpQWdJQ0F2THlCZmRHaHBjeTVmYldWemMyRm5aVVpoWTNSdmNua2dQU0J0WlhOellXZGxSbUZqZEc5eWVUdGNiaUFnSUNCZmRHaHBjeTVmZFhKc0lEMGdkWEpzTzF4dUlDQWdJRjkwYUdsekxsOWlkWE1nUFNCaWRYTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nWjJWMElIUm9aU0JWVWt3Z2RtRnNkV1ZjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQlVhR1VnZFhKc0lIWmhiSFZsTzF4dUlDQWdLaTljYmlBZ1oyVjBJSFZ5YkNncElIc2djbVYwZFhKdUlIUm9hWE11WDNWeWJEc2dmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJjMnNnWm05eUlHTnlaV0YwYVc5dUlHOW1JR0VnYm5WdFltVnlJRzltSUVoNWNHVnlkSGtnWVdSa2NtVnpjMlZ6TENCMGJ5QjBhR1VnWkc5dFlXbHVJRzFsYzNOaFoyVWdibTlrWlM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3Ukc5dFlXbHVmU0JrYjIxaGFXNGdMU0JFYjIxaGFXNGdiMllnZEdobElHMWxjM05oWjJVZ2JtOWtaUzVjYmlBZ0lDb2dRSEJoY21GdElDQjdiblZ0WW1WeWZTQnVkVzFpWlhJZ0xTQk9kVzFpWlhJZ2IyWWdZV1JrY21WemMyVnpJSFJ2SUhKbGNYVmxjM1JjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUJ5YjIxcGMyVThTSGx3WlhKMGVWVlNURDU5SUNCQklHeHBjM1FnYjJZZ1NIbHdaWEowZVZWU1RDZHpYRzRnSUNBcUwxeHVJQ0JqY21WaGRHVW9aRzl0WVdsdUxDQnVkVzFpWlhJcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z2JHVjBJRzFsYzNOaFoyVkdZV04wYjNKNUlEMGdYM1JvYVhNdVgyMWxjM05oWjJWR1lXTjBiM0o1TzF4dVhHNGdJQ0FnYkdWMElHMXpaeUE5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJQ2RqY21WaGRHVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNGdLeUFuTDJoNWNHVnlkSGt0WVdSa2NtVnpjeTFoYkd4dlkyRjBhVzl1Snl4Y2JpQWdJQ0FnSUdKdlpIazZJSHQyWVd4MVpUb2dlMjUxYldKbGNqb2diblZ0WW1WeWZYMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ0x5OGdWRTlFVHpvZ1FYQndiSGtnZEdobElHMWxjM05oWjJVZ1ptRmpkRzl5ZVZ4dUlDQWdJQzh2SUZSb1pTQnRjMmN0Ym05a1pTMTJaWEowZUNCemFHOTFiR1FnWW1VZ1kyaGhibWRsWkNCMGFHVWdZbTlrZVNCbWFXVnNaQ0IwYnlCeVpXTmxhWFpsWEc0Z0lDQWdMeThnZEdobElHWnZiR3h2ZDJsdVp5Qm1iM0p0WVhRZ1ltOWtlVG9nZTNaaGJIVmxPaUI3Ym5WdFltVnlPaUJ1ZFcxaVpYSjlmU0JpWldOaGRYTmxYRzRnSUNBZ0x5OGdkR2hsSUcxbGMzTmhaMlVnYVhNZ1oyVnVaWEpoZEdWa0lHbHVJSFJvWVhRZ2QyRjVJR0o1SUhSb1pTQnRaWE56WVdkbElHWmhZM1J2Y25rN1hHNGdJQ0FnTHk4Z2JHVjBJRzF6WnlBOUlHMWxjM05oWjJWR1lXTjBiM0o1TG1OeVpXRjBaVTFsYzNOaFoyVlNaWEYxWlhOMEtGOTBhR2x6TGw5MWNtd3NJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OW9lWEJsY25SNUxXRmtaSEpsYzNNdFlXeHNiMk5oZEdsdmJpY3NJQ2NuTENCN2JuVnRZbVZ5T2lCdWRXMWlaWEo5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQzh2SUZSUFJFODZJR05vWVc1blpTQjBhR2x6SUhKbGMzQnZibk5sSUUxbGMzTmhaMlVnZFhOcGJtY2dkR2hsSUUxbGMzTmhaMlZHWVdOMGIzSjVYRzRnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0cxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWEJzZVM1aWIyUjVMbU52WkdVZ1BUMDlJREl3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jbVZ3YkhrdVltOWtlUzUyWVd4MVpTNWhiR3h2WTJGMFpXUXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WlhCc2VTNWliMlI1TG1SbGMyTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGTmxibVFnWVNCeVpYRjFaWE4wSUhSdklIUm9aU0JrYjIxaGFXNGdiV1Z6YzJGblpTQnViMlJsTENCMGJ5QmtaV0ZzYkc5allYUmxJRzl1WlNCdmNpQnRiM0psSUdGa1pISmxjM05sYzF4dUlDQXFJRUJ3WVhKaGJTQWdlMFJ2YldGcGJuMGdaRzl0WVdsdUlDMGdSRzl0WVdsdUlHOW1JSFJvWlNCdFpYTnpZV2RsSUc1dlpHVXVYRzRnSUNvZ1FIQmhjbUZ0SUNCN1lXUmtjbVZ6YzJWemZTQmhaR1J5WlhOelpYTWdkRzhnY21WeGRXVnpkQ0IwYUdVZ1pHVmhiR3h2WTJGMGFXOXVYRzRnSUNvZ1FISmxkSFZ5Ym5NZ2UxQnliMjFwYzJWOUlDQjBhR1VnY21WemNHOXVjMlVnWW5rZ2RHaGxJRzFsYzNOaFoyVWdibTlrWlZ4dUlDQXFMMXh1SUNCa1pXeGxkR1VvWkc5dFlXbHVMQ0JoWkdSeVpYTnpaWE1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUFuWkdWc1pYUmxKeXdnWm5KdmJUb2dYM1JvYVhNdVgzVnliQ3dnZEc4NklDZGtiMjFoYVc0Nkx5OXRjMmN0Ym05a1pTNG5JQ3NnWkc5dFlXbHVJQ3NnSnk5b2VYQmxjblI1TFdGa1pISmxjM010WVd4c2IyTmhkR2x2Ymljc1hHNGdJQ0FnSUNCaWIyUjVPaUI3WTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdGa1pISmxjM05sYzMxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNibHh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNKbGNHeDVKeXdnY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxjR3g1TG1KdlpIa3VZMjlrWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtISmxjR3g1TG1KdlpIa3VaR1Z6WXlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUVdSa2NtVnpjMEZzYkc5allYUnBiMjQ3WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc1cGJYQnZjblFnVW1WbmFYTjBjbmxFWVhSaFRXOWtaV3dnWm5KdmJTQW5MaTlTWldkcGMzUnllVVJoZEdGTmIyUmxiQ2M3WEc1Y2JpOHFLbHh1S2lBZ0lFQmhkWFJvYjNJNklFZHBiQ0JFYVdGeklDaG5hV3d1WkdsaGMwQjBaV051YVdOdkxuVnNhWE5pYjJFdWNIUXBYRzRxSUNBZ1NIbHdaWEowZVVsdWMzUmhibU5sSUVSaGRHRWdUVzlrWld3Z2RYTmxaQ0IwYnlCdGIyUmxiQ0JwYm5OMFlXNWpaWE1nYjJZZ1NIbHdaWEowYVdWeklISjFibTVwYm1jZ2FXNGdaR1YyYVdObGN5QmhibVFnYzJWeWRtVnljeTVjYmlvdlhHNWpiR0Z6Y3lCSWVYQmxjblI1U1c1emRHRnVZMlVnWlhoMFpXNWtjeUJTWldkcGMzUnllVVJoZEdGTmIyUmxiQ0I3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvYVdRc0lIVnliQ3dnWkdWelkzSnBjSFJ2Y2xWU1RDeGtaWE5qY21sd2RHOXlMQ0JvZVhCbGNuUjVWVkpNTENCMWMyVnlMQ0JuZFdsa0xDQnlkVzUwYVcxbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2MzVndaWElvYVdRc0lIVnliQ3dnWkdWelkzSnBjSFJ2Y2xWU1RDazdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NWZaR1Z6WTNKcGNIUnZjaUE5SUdSbGMyTnlhWEIwYjNJN1hHNGdJQ0FnWDNSb2FYTXVYMmg1Y0dWeWRIbFZVa3dnUFNCb2VYQmxjblI1VlZKTU8xeHVJQ0FnSUY5MGFHbHpMbDkxYzJWeUlEMGdkWE5sY2p0Y2JpQWdJQ0JmZEdocGN5NWZaM1ZwWkNBOUlHZDFhV1E3WEc0Z0lDQWdYM1JvYVhNdVgzSjFiblJwYldVZ1BTQnlkVzUwYVcxbE8xeHVJQ0FnSUY5MGFHbHpMbDlqYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmlBZ2ZWeHVYRzRnSUhObGRDQjFjMlZ5S0dsa1pXNTBhWFI1S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1MWMyVnlJRDBnYVdSbGJuUnBkSGs3WEc0Z0lIMWNibHh1SUNCblpYUWdkWE5sY2lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZmRYTmxjanRjYmlBZ2ZWeHVYRzRnSUdkbGRDQm9lWEJsY25SNVZWSk1LQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbDlvZVhCbGNuUjVWVkpNTzF4dUlDQjlYRzVjYmlBZ1oyVjBJR1JsYzJOeWFYQjBiM0lvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDJSbGMyTnlhWEIwYjNJN1hHNGdJSDFjYmx4dUlDQm5aWFFnYjJKcVpXTjBUbUZ0WlNncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZlpHVnpZM0pwY0hSdmNpNWZiMkpxWldOMFRtRnRaVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JJZVhCbGNuUjVTVzV6ZEdGdVkyVTdYRzRpTENJdktpcGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVRlFnU1c1dmRtSERwOE9qYnlCbElGTnBjM1JsYldGeklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRWxPUlZORExVbEVYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkZWVDBKSlV5Qk9SVlJYVDFKTFV5QlRURnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJHVWtGVlRraFBSa1ZTTFVkRlUwVk1URk5EU0VGR1ZDQmFWVklnUms5RlVrUkZVbFZPUnlCRVJWSWdRVTVIUlZkQlRrUlVSVTRnUms5U1UwTklWVTVISUVVdVZseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlBVa0ZPUjBVZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSR1YxZEhOamFHVWdWR1ZzWld0dmJTQkJSMXh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJCY0dsNlpXVmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdWRVZEU0U1SlUwTklSU0JWVGtsV1JWSlRTVlJCVkNCQ1JWSk1TVTVjYmlwY2Jpb2dUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobElGd2lUR2xqWlc1elpWd2lLVHRjYmlvZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExseHVLaUJaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpcGNiaW9nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlwY2Jpb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTENCemIyWjBkMkZ5WlZ4dUtpQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmlCY0lrRlRJRWxUWENJZ1FrRlRTVk1zWEc0cUlGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XU0JMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xseHVLaUJUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pTQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a1hHNHFJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUtpb3ZYRzVwYlhCdmNuUWdSWFpsYm5SRmJXbDBkR1Z5SUdaeWIyMGdKeTR1TDNWMGFXeHpMMFYyWlc1MFJXMXBkSFJsY2ljN1hHNXBiWEJ2Y25RZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1puSnZiU0FuTGk5QlpHUnlaWE56UVd4c2IyTmhkR2x2YmljN1hHNXBiWEJ2Y25RZ1QySnFaV04wUVd4c2IyTmhkR2x2YmlCbWNtOXRJQ2N1TGk5emVXNWphR1Z5TDA5aWFtVmpkRUZzYkc5allYUnBiMjRuTzF4dWFXMXdiM0owSUVoNWNHVnlkSGxKYm5OMFlXNWpaU0JtY205dElDY3VMMGg1Y0dWeWRIbEpibk4wWVc1alpTYzdYRzVjYm1sdGNHOXlkQ0I3VFdWemMyRm5aVVpoWTNSdmNubDlJR1p5YjIwZ0ozTmxjblpwWTJVdFpuSmhiV1YzYjNKckwyUnBjM1F2VFdWemMyRm5aVVpoWTNSdmNua25PMXh1YVcxd2IzSjBJSHRrYVhacFpHVlZVa3g5SUdaeWIyMGdKeTR1TDNWMGFXeHpMM1YwYVd4ekxtcHpKenRjYmx4dUx5cHBiWEJ2Y25RZ1NXUmxiblJwZEhsTllXNWhaMlZ5SUdaeWIyMGdKeTR2U1dSbGJuUnBkSGxOWVc1aFoyVnlKenRjYm1sdGNHOXlkQ0JFYVhOamIzWmxjbmtnWm5KdmJTQW5MaTlFYVhOamIzWmxjbmtuT3lvdlhHNWNiaThxS2x4dUtpQlNkVzUwYVcxbElGSmxaMmx6ZEhKNUlFbHVkR1Z5Wm1GalpWeHVLaTljYm1Oc1lYTnpJRkpsWjJsemRISjVJR1Y0ZEdWdVpITWdSWFpsYm5SRmJXbDBkR1Z5SUh0Y2JseHVJQ0F2S2lwY2JpQWdLaUJVYnlCcGJtbDBhV0ZzYVhObElIUm9aU0JTZFc1MGFXMWxJRkpsWjJsemRISjVJSGRwZEdnZ2RHaGxJRkoxYm5ScGJXVlZVa3dnZEdoaGRDQjNhV3hzSUdKbElIUm9aU0JpWVhOcGN5QjBieUJrWlhKcGRtVWdkR2hsSUdsdWRHVnlibUZzSUhKMWJuUnBiV1VnWVdSa2NtVnpjMlZ6SUhkb1pXNGdZV3hzYjJOaGRHbHVaeUJoWkdSeVpYTnpaWE1nZEc4Z2FXNTBaWEp1WVd3Z2NuVnVkR2x0WlNCamIyMXdiMjVsYm5RdUlFbHVJR0ZrWkdsMGFXOXVMQ0IwYUdVZ1VtVm5hWE4wY25rZ1pHOXRZV2x1SUdKaFkyc3RaVzVrSUhSdklHSmxJSFZ6WldRZ2RHOGdjbVZ0YjNSbGJIa2djbVZuYVhOMFpYSWdVblZ1ZEdsdFpTQmpiMjF3YjI1bGJuUnpMQ0JwY3lCaGJITnZJSEJoYzNObFpDQmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSXVYRzRnSUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlVKMWMzMGdJQ0FnSUNBZ0lDQWdiWE5uWW5WeklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxeloySjFjMXh1SUNBcUlFQndZWEpoYlNBZ2UwaDVjR1Z5ZEhsU2RXNTBhVzFsVlZKTWZTQWdJSEoxYm5ScGJXVlZVa3dnSUNBZ0lDQWdJQ0FnSUNCeWRXNTBhVzFsVlZKTVhHNGdJQ29nUUhCaGNtRnRJQ0I3UVhCd1UyRnVaR0p2ZUgwZ0lDQWdJQ0FnSUNBZ1lYQndVMkZ1WkdKdmVDQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0ZOaGJtUmliM2hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHlkVzUwYVcxbFEyRjBZV3h2WjNWbGZTQWdJQ0J5ZFc1MGFXMWxRMkYwWVd4dlozVmxJQ0FnSUNBZ2NuVnVkR2x0WlVOaGRHRnNiMmQxWlZ4dUlDQXFJRUJ3WVhKaGJTQWdlMFJ2YldGcGJsVlNUSDBnSUNBZ0lDQWdJQ0FnSUhKbGJXOTBaVkpsWjJsemRISjVJQ0FnSUNBZ0lDQnlaVzF2ZEdWU1pXZHBjM1J5ZVZ4dUlDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFZWSk1MQ0JoY0hCVFlXNWtZbTk0TENCcFpHVnVkR2wwZVUxdlpIVnNaU3dnY25WdWRHbHRaVU5oZEdGc2IyZDFaU3dnY21WdGIzUmxVbVZuYVhOMGNua3BJSHRjYmx4dUlDQWdJSE4xY0dWeUtDazdYRzVjYmlBZ0lDQXZMeUJvYjNjZ2MyOXRaU0JtZFc1amRHbHZibk1nY21WalpXbDJaU0IwYUdVZ2NHRnlZVzFsZEdWeWN5Qm1iM0lnWlhoaGJYQnNaVHBjYmlBZ0lDQXZMeUJ1WlhjZ1VtVm5hWE4wY25rb0oyaDVjR1Z5ZEhrdGNuVnVkR2x0WlRvdkwzTndNUzh4TWpNbkxDQmhjSEJUWVc1a1ltOTRMQ0JwWkUxdlpIVnNaU3dnY21WdGIzUmxVbVZuYVhOMGNua3BPMXh1SUNBZ0lDOHZJSEpsWjJsemRISjVMbkpsWjJsemRHVnlVM1IxWWloellXNWtZbTk0TENBbmMzQXhKeWs3WEc0Z0lDQWdMeThnY21WbmFYTjBjbmt1Y21WbmFYTjBaWEpJZVhCbGNuUjVLSE5oYm1SQ2IzZ3NJQ2RvZVhCbGNuUjVMWEoxYm5ScGJXVTZMeTl6Y0RFdk1USXpKeWs3WEc0Z0lDQWdMeThnY21WbmFYTjBjbmt1Y21WemIyeDJaU2duYUhsd1pYSjBlUzF5ZFc1MGFXMWxPaTh2YzNBeEx6RXlNeWNwTzF4dVhHNGdJQ0FnYVdZZ0tDRnlkVzUwYVcxbFZWSk1LU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KM0oxYm5ScGJXVlZVa3dnYVhNZ2JXbHpjMmx1Wnk0bktUdGNiaUFnSUNBdkttbG1JQ2doY21WdGIzUmxVbVZuYVhOMGNua3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jbVZ0YjNSbFVtVm5hWE4wY25rZ2FYTWdiV2x6YzJsdVp5Y3BPeW92WEc1Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdWNtVm5hWE4wY25sVlVrd2dQU0J5ZFc1MGFXMWxWVkpNSUNzZ0p5OXlaV2RwYzNSeWVTOG5PMXh1SUNBZ0lGOTBhR2x6TG1Gd2NGTmhibVJpYjNnZ1BTQmhjSEJUWVc1a1ltOTRPMXh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZWVWt3Z1BTQnlkVzUwYVcxbFZWSk1PMXh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VnUFNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsTzF4dUlDQWdJRjkwYUdsekxuSmxiVzkwWlZKbFoybHpkSEo1SUQwZ2NtVnRiM1JsVW1WbmFYTjBjbms3WEc0Z0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVZ1BTQnBaR1Z1ZEdsMGVVMXZaSFZzWlR0Y2JpQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsbWFXVnlJRDBnVFdGMGFDNW1iRzl2Y2lnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXdLU0FySURFcE8xeHVYRzRnSUNBZ0x5OGdkR2hsSUdWNGNHbHlaWE1nYVc0Z016WXdNQ3dnY21Wd2NtVnpaVzUwY3lBeElHaHZkWEpjYmlBZ0lDQXZMM1JvWlNCbGVIQnBjbVZ6SUdseklHbHVJSE5sWTI5dVpITXNJSFZ1YVhRZ2IyWWdiV1ZoYzNWeVpTQnlaV05sYVhabFpDQmllU0IwYUdVZ1pHOXRZV2x1SUhKbFoybHpkSEo1WEc0Z0lDQWdYM1JvYVhNdVpYaHdhWEpsYzFScGJXVWdQU0F6TmpBd08xeHVYRzRnSUNBZ1gzUm9hWE11YUhsd1pYSjBhV1Z6VEdsemRGUnZVbVZ0YjNabElEMGdlMzA3WEc0Z0lDQWdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkQ0E5SUZ0ZE8xeHVJQ0FnSUY5MGFHbHpMbkJ5YjNSdmMzUjFZbk5NYVhOMElEMGdlMzA3WEc0Z0lDQWdYM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBJRDBnZTMwN1hHNGdJQ0FnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRXhwYzNRZ1BTQjdmVHRjYmlBZ0lDQmZkR2hwY3k1emRXSnpZM0pwWW1Wa1JHRjBZVTlpYW1WamRFeHBjM1FnUFNCN2ZUdGNiaUFnSUNCZmRHaHBjeTV6WVc1a1ltOTRaWE5NYVhOMElEMGdlM05oYm1SaWIzZzZJSHQ5TENCaGNIQlRZVzVrWW05NE9pQjdmU0I5TzF4dUlDQWdJRjkwYUdsekxuQmxjRXhwYzNRZ1BTQjdmVHRjYmx4dUlDQWdJRjkwYUdsekxsOWtiMjFoYVc0Z1BTQmthWFpwWkdWVlVrd29YM1JvYVhNdWNtVm5hWE4wY25sVlVrd3BMbVJ2YldGcGJqdGNiaUFnSUNCZmRHaHBjeTV6WVc1a1ltOTRaWE5NYVhOMExtRndjRk5oYm1SaWIzaGJjblZ1ZEdsdFpWVlNURjBnUFNCaGNIQlRZVzVrWW05NE8xeHVJQ0FnSUd4bGRDQnRjMmRHWVdOMGIzSjVJRDBnYm1WM0lFMWxjM05oWjJWR1lXTjBiM0o1S0NkbVlXeHpaU2NzSUNkN2ZTY3BPMXh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZHWVdOMGIzSjVJRDBnYlhOblJtRmpkRzl5ZVR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxkSFZ5YmlCMGFHVWdiV1Z6YzJGblpVSjFjeUJwYmlCMGFHbHpJRkpsWjJsemRISjVYRzRnSUNvZ1FIQmhjbUZ0SUh0TlpYTnpZV2RsUW5WemZTQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpVSjFjMXh1SUNBcUwxeHVJQ0JuWlhRZ2JXVnpjMkZuWlVKMWN5Z3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZiV1Z6YzJGblpVSjFjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZObGRDQjBhR1VnYldWemMyRm5aVUoxY3lCcGJpQjBhR2x6SUZKbFoybHpkSEo1WEc0Z0lDb2dRSEJoY21GdElIdE5aWE56WVdkbFFuVnpmU0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVUoxYzF4dUlDQXFMMXh1SUNCelpYUWdiV1Z6YzJGblpVSjFjeWh0WlhOellXZGxRblZ6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5QTlJRzFsYzNOaFoyVkNkWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTVoWkdSTWFYTjBaVzVsY2loZmRHaHBjeTV5WldkcGMzUnllVlZTVEN3Z1puVnVZM1JwYjI0b2JYTm5LU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQjFjMlZ5VlhKc0lEMGdYM1JvYVhNdVgyZGxkRWxrWlc1MGFYUjVRWE56YjJOcFlYUmxaQ2h0YzJjdVltOWtlUzV5WlhOdmRYSmpaU3dnYlhObkxtSnZaSGt1WTNKcGRHVnlhV0VwTzF4dVhHNGdJQ0FnSUNCc1pYUWdjbVZ3YkhrZ1BTQjdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnZEc4NklHMXpaeTVtY205dExDQm1jbTl0T2lCdGMyY3VkRzhzSUdKdlpIazZJSHR5WlhOdmRYSmpaVG9nZFhObGNsVnliSDE5TzF4dUlDQWdJQ0FnY21Wd2JIa3VZbTlrZVM1amIyUmxJRDBnS0hWelpYSlZjbXdwSUQ4Z01qQXdJRG9nTkRBME8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h5WlhCc2VTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMeUJoYkhOdklITmxkQ0IxY0NCdFpYTnpZV2RsUW5WeklHbHVJSFJvWlNCSlpHVnVkR2wwZVUxdlpIVnNaU0JqYjIxd2IyNWxiblJjYmlBZ0lDQXZMeUJVVDBSUElISmxaR1ZtYVc1bElHRWdZbVYwZEdWeUlIZGhlU0IwYnlCaFpHUWdkR2hsSUcxbGMzTmhaMlZDZFhNZ2FXNGdkR2hsSUVsa1RXOWtkV3hsWEc0Z0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdWJXVnpjMkZuWlVKMWN5QTlJRzFsYzNOaFoyVkNkWE03WEc1Y2JpQWdJQ0F2THlCSmJuTjBZV3hzSUVGa1pISmxjM05CYkd4dlkyRjBhVzl1WEc0Z0lDQWdiR1YwSUdGa1pISmxjM05CYkd4dlkyRjBhVzl1SUQwZ2JtVjNJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVLRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0J0WlhOellXZGxRblZ6S1R0Y2JpQWdJQ0JmZEdocGN5NWhaR1J5WlhOelFXeHNiMk5oZEdsdmJpQTlJR0ZrWkhKbGMzTkJiR3h2WTJGMGFXOXVPMXh1WEc0Z0lDQWdMeTlKYm5OMFlXeHNJRTlpYW1WamRFRnNiRzlqWVhScGIyNWNiaUFnSUNCc1pYUWdiMkpxWldOMFFXeHNiMk5oZEdsdmJpQTlJRzVsZHlCUFltcGxZM1JCYkd4dlkyRjBhVzl1S0Y5MGFHbHpMbkpsWjJsemRISjVWVkpNSUNzZ0p5OXZZbXBsWTNRdFlXeHNiMk5oZEdsdmJpY3NJRzFsYzNOaFoyVkNkWE1wTzF4dUlDQWdJRjkwYUdsekxtOWlhbVZqZEVGc2JHOWpZWFJwYjI0Z1BTQnZZbXBsWTNSQmJHeHZZMkYwYVc5dU8xeHVYRzRnSUNBZ0x5cHNaWFFnWkdselkyOTJaWEo1SUQwZ2JtVjNJRVJwYzJOdmRtVnllU2hmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3dnYldWemMyRm5aVUoxY3lrN1hHNGdJQ0FnWDNSb2FYTXVaR2x6WTI5MlpYSjVJRDBnWkdselkyOTJaWEo1TzF4dVhHNGdJQ0FnYkdWMElHbGtaVzUwYVhSNVRXRnVZV2RsY2lBOUlHNWxkeUJKWkdWdWRHbDBlVTFoYm1GblpYSW9KMmg1Y0dWeWRIazZMeTlzYjJOaGJHaHZjM1F2T0RNellUWmxOVEl0TlRFMVlpMDBPVGhpTFdFMU4ySXRaVE5rWVdWbFkyVTBPR1F5Snl3Z1gzUm9hWE11Y25WdWRHbHRaVlZTVEN3Z2JXVnpjMkZuWlVKMWN5azdYRzRnSUNBZ1gzUm9hWE11YVdSbGJuUnBkSGxOWVc1aFoyVnlJRDBnYVdSbGJuUnBkSGxOWVc1aFoyVnlPeW92WEc0Z0lIMWNibHh1SUNCZloyVjBTV1JsYm5ScGRIbEJjM052WTJsaGRHVmtLSFI1Y0dVc0lHaDVjR1Z5ZEhsVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FIbHdaWEowZVNCcGJpQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCZmRHaHBjeTVvZVhCbGNuUnBaWE5NYVhOMFcyaDVjR1Z5ZEhsZE8xeHVJQ0FnSUNBZ2FXWWdLSFpoYkhWbExsOW9lWEJsY25SNVZWSk1JRDA5UFNCb2VYQmxjblI1VlZKTUtTQjdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozVnpaWEp1WVcxbEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNWZkWE5sY2k1MWMyVnlibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkamJpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVXVYM1Z6WlhJdVkyNDdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5iRzlqWVd4bEp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNWZkWE5sY2k1c2IyTmhiR1U3WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWVhaaGRHRnlKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMllXeDFaUzVmZFhObGNpNWhkbUYwWVhJN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRYTmxjbFZTVENjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVdVgzVnpaWEl1ZFhObGNsVlNURHRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2N1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJZV3gxWlM1ZmRYTmxjanRjYmlBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDY25PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBbkp6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEYxWlhKNUlIUm9aU0JrYjIxaGFXNGdjbVZuYVhOMGNua2dabTl5SUdsdVptOXliV0YwYVc5dUlHWnliMjBnWVNCa1lYUmhUMkpxWldOMElGVlNURnh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lDQjFjbXdnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMElGVlNURnh1SUNBcUlFQnlaWFIxY200Z2UwcFRUMDU5SUNBZ0lDQmtZWFJoVDJKcVpXTjBJQ0FnSUNCa1lYUmhJRzlpYW1WamRGeHVJQ0FxTDF4dUlDQmthWE5qYjNabGNrUmhkR0ZQWW1wbFkzUlFaWEpWVWt3b2RYSnNMQ0JrYjIxaGFXNHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmhZM1JwZG1WRWIyMWhhVzQ3WEc1Y2JpQWdJQ0JwWmlBb0lXUnZiV0ZwYmlrZ2UxeHVJQ0FnSUNBZ1lXTjBhWFpsUkc5dFlXbHVJRDBnWDNSb2FYTXVYMlJ2YldGcGJqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVdOMGFYWmxSRzl0WVdsdUlEMGdaRzl0WVdsdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQnRjMmNnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUFuY21WaFpDY3NJR1p5YjIwNklGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmhZM1JwZG1WRWIyMWhhVzRnS3lBbkx5Y3NJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJSFZ5YkN3Z2MyVmhjbU5vT2lka1lYUmhUMkpxWldOMFVHVnlWVkpNSjMxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMElEMGdjbVZ3YkhrdVltOWtlUzUyWVd4MVpUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdGMFlVOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEVZWFJoVDJKcVpXTjBJRzV2ZENCbWIzVnVaQ2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdkWE5sWkNCMGJ5QnlaWFIxY200Z2RHaGxJSE5oYm1SaWIzZ2dhVzV6ZEdGdVkyVWdkMmhsY21VZ2RHaGxJRUZ3Y0d4cFkyRjBhVzl1SUdseklHVjRaV04xZEdsdVp5NGdTWFFnYVhNZ1lYTnpkVzFsWkNCMGFHVnlaU0JwY3lCcWRYTjBJRzl1WlNCQmNIQWdjR1Z5SUZKMWJuUnBiV1VnYVc1emRHRnVZMlV1WEc0Z0lDb3ZYRzRnSUdkbGRFRndjRk5oYm1SaWIzZ29LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVZWEJ3VTJGdVpHSnZlRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSb2FYTWdablZ1WTNScGIyNGdjbVYwZFhKdWN5QjBhR1VnZFhObGNpQmhjM052WTJsaGRHVmtJSFJ2SUhSb1pTQm9lWEJsY25SNUlGVlNURnh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0JvZVhCbGNuUjVWVkpNSUNBZ0lDQWdhSGx3WlhKMGVTQlZVa3hjYmlBZ0tpQkFjbVYwZFhKdUlDQWdlMU4wY21sdVozMGdJQ0FnZFhObGNsVlNUQ0FnSUNBZ0lDQWdJSFZ6WlhJZ1ZWSk1YRzRnSUNvdlhHNGdJR2RsZEVoNWNHVnlkSGxQZDI1bGNpaG9lWEJsY25SNVZWSk1LU0I3WEc1Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0IxYzJWeVZWSk1PMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhVzVrWlhnZ2FXNGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkQ2tnZTF4dUlDQWdJQ0FnYkdWMElHaDVjR1Z5ZEhrZ1BTQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBXMmx1WkdWNFhUdGNiaUFnSUNBZ0lHbG1JQ2hvZVhCbGNuUjVMbWg1Y0dWeWRIbFZVa3dnUFQwOUlHaDVjR1Z5ZEhsVlVrd3BJSHRjYmlBZ0lDQWdJQ0FnZFhObGNsVlNUQ0E5SUdoNWNHVnlkSGt1ZFhObGNpNTFjMlZ5VlZKTU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkWE5sY2xWU1REdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEpsZEhWeWJuTWdkR2hsSUdoNWNHVnlkSGtnVG1GdFpTQm1jbTl0SUdFZ1oybDJaVzRnZFhKc0xpQlVhR2x6SUhWeWJDQmpiM1ZzWkNCaVpTQm1jbTl0SUdFZ1pHRjBZVTlpYW1WamRDQnZjaUJvZVhCbGNuUjVYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJSFZ5YkNBZ0lDQWdJR2g1Y0dWeWRIa2diM0lnWkdGMFlVOWlhbVZqZENCVlVreGNiaUFnS2lCQWNtVjBkWEp1SUNBZ2UxTjBjbWx1WjMwZ0lDQWdhSGx3WlhKMGVVNWhiV1VnSUNBZ0lHaDVjR1Z5ZEhrZ1RtRnRaVnh1SUNBcUwxeHVJQ0JuWlhSSWVYQmxjblI1VG1GdFpTaDFjbXdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdselNIbHdaWEowZVZWU1RDQTlJR1JwZG1sa1pWVlNUQ2gxY213cExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNibHh1SUNBZ0lDOHZkbUZzZFdVZ2RHOGdZbVVnY21WMGRYSnVaV1FnYVc0Z2RHaGxJR1Z1WkZ4dUlDQWdJR3hsZENCb2VYQmxjblI1VG1GdFpUdGNibHh1SUNBZ0lDOHZhV1lnYVhNZ2JtOTBJR0Z1SUdoNWNHVnlkSGtzSUdOb1pXTnJJR2xtSUdseklHRWdaR0YwWVU5aWFtVmpkQ0JoYm1RZ2IySjBZV2x1SUdocGN5QnlaWEJ2Y25SbGNseHVJQ0FnSUd4bGRDQm9lWEJsY25SNVZWSk1JRDBnS0dselNIbHdaWEowZVZWU1RDa2dQeUJvZVhCbGNuUjVWVkpNSUQwZ2RYSnNJRG9nWDNSb2FYTXVaMlYwVW1Wd2IzSjBaWEpWVWt4VGVXNWphRzl1YjNWektIVnliQ2s3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQnBiaUJmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wS1NCN1hHNGdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVTQTlJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JiYVc1a1pYaGRPMXh1SUNBZ0lDQWdhV1lnS0doNWNHVnlkSGt1YUhsd1pYSjBlVlZTVENBOVBUMGdhSGx3WlhKMGVWVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCb2VYQmxjblI1VG1GdFpTQTlJR2g1Y0dWeWRIa3ViMkpxWldOMFRtRnRaVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJvZVhCbGNuUjVUbUZ0WlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHWjFibU4wYVc5dUlIUnZJSEpsZEhWeWJpQjBhR1VnY21Wd2IzSjBaWEpWVWt3Z1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb1pTQmtZWFJoYjJKcVpXTjBJRlZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1YRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFRkSEpwYm1kOUlDQWdJQ0J5WlhCdmNuUmxjbFZTVENBZ0lDQWdJSEpsY0c5eWRHVnlWVkpNWEc0Z0lDb3ZYRzRnSUdkbGRGSmxjRzl5ZEdWeVZWSk1LR1JoZEdGUFltcGxZM1JWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR2xtSUNoa1lYUmhUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aR0YwWVU5aWFtVmpkQzV5WlhCdmNuUmxjaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KMDV2SUhKbGNHOXlkR1Z5SUhkaGN5Qm1iM1Z1WkNjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WMGRYSnVJSFJvWlNCeVpYQnZjblJsY2xWU1RDQmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJR1JoZEdGdlltcGxZM1FnVlZKTUxpQnVieUJ3Y205dGFYTmxJSEpsZEhWeWJtVmtYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJR1JoZEdGUFltcGxZM1JWVWt4Y2JpQWdLaUJBY21WMGRYSnVJQ0FnZTFOMGNtbHVaMzBnSUNBZ0lISmxjRzl5ZEdWeVZWSk1JQ0FnSUNBZ2NtVndiM0owWlhKVlVreGNiaUFnS2k5Y2JpQWdaMlYwVW1Wd2IzSjBaWEpWVWt4VGVXNWphRzl1YjNWektHUmhkR0ZQWW1wbFkzUlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1pHRjBZVTlpYW1WamRDa2dQeUJrWVhSaFQySnFaV04wTG5KbGNHOXlkR1Z5SURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2djbVYwZFhKdWN5QjBhR1VnYUhsd1pYSjBlU0JWVWt3Z2RHaGhkQ0J6ZFdKelkzSnBZbVZrSUhSb1pTQmtZWFJoVDJKcVpXTjBYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJQ0IxY213Z0lDQWdJQ0FnSUNBZ0lDQjFjbXdnWm05eWJXRjBYRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFRkSEpwYm1kOUlDQWdJRWg1Y0dWeWRIa2dWVkpNSUhOMVluTmpjbWxpWldRZ2RHOGdkR2hsSUZWU1RGeHVJQ0FxTDF4dUlDQm5aWFJFWVhSaFQySnFaV04wVTNWaWMyTnlhV0psY2toNWNHVnlkSGtvZFhKc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXpkV0p6WTNKcFltVmtSR0YwWVU5aWFtVmpkRXhwYzNSYmRYSnNYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhKbFoybHpkR1Z5SUdFZ1pHVnphWEpsWkNCa1lYUmhUMkpxWldOMElIUnZJSE4xWW5OamNtbGlaVnh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJQ0FnWkdGMFlVOWlhbVZqZENCVlVreGNiaUFnS2k5Y2JpQWdjbVZuYVhOMFpYSlRkV0p6WTNKcFltVmtSR0YwWVU5aWFtVmpkQ2hrWVhSaFQySnFaV04wVlZKTUxDQm9lWEJsY25SNVZWSk1LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCcFppQW9YM1JvYVhNdWMzVmljMk55YVdKbFpFUmhkR0ZQWW1wbFkzUk1hWE4wVzJSaGRHRlBZbXBsWTNSVlVreGRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TG5OMVluTmpjbWxpWldSRVlYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhTQTlJR2g1Y0dWeWRIbFZVa3c3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUhSb1pTQnNhWE4wSUc5bUlIQnlaU0JoZFhSb2IzSnBjMlZrSUhWelpYSnpJSEpsWTJWcGRtVmtJR2x1SUhSb1pTQmpjbVZoZEdsdmJpQnZaaUJoSUdSaGRHRWdiMkpxWldOMFhHNGdJQ29nUUhCaGNtRnRJQ0FnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1YRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdEJjbkpoZVR4VGRISnBibWMrZlNBZ0lDQWdjSEpsUVhWMGFDQWdJQ0FnSUNBZ0lFeHBjM1FnYjJZZ2NISmxJR0YxZEdodmNtbHpaV1FnZFhObGNuTmNiaUFnS2k5Y2JpQWdaMlYwVUhKbFFYVjBhRk4xWW5OamNtbGlaWEp6S0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBJRDBnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRXhwYzNSYlpHRjBZVTlpYW1WamRGVlNURjA3WEc0Z0lDQWdiR1YwSUhCeVpVRjFkR2dnUFNCYlhUdGNibHh1SUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hHNGdJQ0FnSUNCd2NtVkJkWFJvSUQwZ1pHRjBZVTlpYW1WamRDNXdjbVZCZFhSb08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjSEpsUVhWMGFEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSE5sYm1RZ2NtVnhkV1Z6ZEhNZ2RHOGdkVzV5WldkcGMzUmxjaUJoYkd3Z2FIbHdaWEowYVdWeklISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVYRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFFjbTl0YVhObGZTQWdJQ0FnY21WMGRYSnVJR0VnY0hKdmJXbHpaU0JwWmlCMGFHVWdjbVZ6ZFd4MElHOW1JSFZ1Y21WbmFYTjBjbUYwYVc5dUlHRnNiQ0JvZVhCbGNuUnBaWE5jYmlBZ0tpOWNiaUFnZFc1eVpXZHBjM1JsY2tGc2JFaDVjR1Z5ZEdsbGN5Z3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJSFZ1Y21WbmFYTjBaWEpTWlhOMWJIUnpJRDBnVzEwN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YUhsd1pYSjBhV1Z6VEdsemRDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVNBOUlGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnWDNSb2FYTXVkVzV5WldkcGMzUmxja2g1Y0dWeWRIbEpibk4wWVc1alpTaG9lWEJsY25SNUxuVnpaWEl1ZFhObGNsVlNUQ3dnYUhsd1pYSjBlUzVvZVhCbGNuUjVWVkpNS1R0Y2JpQWdJQ0FnSUNBZ2RXNXlaV2RwYzNSbGNsSmxjM1ZzZEhNdWNIVnphQ2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JRY205dGFYTmxMbUZzYkNoMWJuSmxaMmx6ZEdWeVVtVnpkV3gwY3lrdWRHaGxiaWdvS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2duYzNWalkyVnpjMloxYkd4NUlIVnVjbVZuYVhOMFpYSmxaQ0JoYkd3Z2FIbHdaWEowYVdWekp5azdYRzRnSUNBZ0lDQjlMQ0JsY25KdmNpQTlQaUI3SUhKbGFtVmpkQ2hsY25KdmNpazdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lBZ1puVnVZM1JwYjI0Z2RHOGdkVzV5WldkcGMzUmxjaUJoYmlCb2VYQmxjblI1U1c1emRHRnVZMlVnYVc0Z2RHaGxJRVJ2YldGcGJpQlNaV2RwYzNSeWVWeHVJQ0FxSUNCQWNHRnlZVzBnSUNCN1UzUnlhVzVuZlNBZ0lDQWdJSFZ6WlhJZ0lDQWdJQ0FnSUhWelpYSWdkWEpzWEc0Z0lDb2dJRUJ3WVhKaGJTQWdJSHRUZEhKcGJtZDlJQ0FnSUNBZ2FIbHdaWEowZVVsdWMzUmhibU5sSUNBZ1NIbHdaWEowZVVsdWMyNTBZVzVqWlNCMWNteGNiaUFnS2x4dUlDQXFMMXh1SUNCMWJuSmxaMmx6ZEdWeVNIbHdaWEowZVVsdWMzUmhibU5sS0hWelpYSXNJR2g1Y0dWeWRIbEpibk4wWVc1alpTa2dlMXh1SUNBZ0lDOHZWRTlFVHlCM2IzSnJhVzVuSUdKMWRDQjBhR1VnZFhObGNseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIc2dkSGx3WlRvZ0oyUmxiR1YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUFuWkc5dFlXbHVPaTh2Y21WbmFYTjBjbmt1SnlBcklGOTBhR2x6TGw5a2IyMWhhVzRnS3lBbkx5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VUb2dleUIyWVd4MVpUb2dlM1Z6WlhJNklIVnpaWElzSUdoNWNHVnlkSGxWVWt3NklHaDVjR1Z5ZEhsSmJuTjBZVzVqWlNCOWZYMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZDFibkpsWjJsemRHVnlJR2g1Y0dWeWRIa2dVbVZ3YkhrbkxDQnlaWEJzZVNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQWdablZ1WTNScGIyNGdkRzhnWkdWc1pYUmxJR0Z1SUdSaGRHRlBZbXBsWTNSSmJuTjBZVzVqWlNCcGJpQjBhR1VnUkc5dFlXbHVJRkpsWjJsemRISjVYRzRnSUNvZ0lFQndZWEpoYlNBZ0lIdFRkSEpwYm1kOUlDQWdJRzVoYldVZ0lDQWdJQ0JFWVhSaFQySnFaV04wVG1GdFpWeHVJQ0FxTDF4dUlDQmtaV3hsZEdWRVlYUmhUMkpxWldOMFNXNXpkR0Z1WTJVb2JtRnRaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUhzZ2RIbHdaVG9nSjJSbGJHVjBaU2NzSUdaeWIyMDZJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQW5aRzl0WVdsdU9pOHZjbVZuYVhOMGNua3VKeUFySUY5MGFHbHpMbDlrYjIxaGFXNGdLeUFuTHljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2V5QjJZV3gxWlRvZ2UyNWhiV1U2SUc1aGJXVjlmWDA3WEc1Y2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2QxYm5KbFoybHpkR1Z5SUdSaGRHRlBZbXBsWTNRZ1VtVndiSGtuTENCeVpYQnNlU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGJ5QjFjR1JoZEdVZ1lXNGdTSGx3WlhKMGVWeHVJQ0FxTDF4dUlDQjFjR1JoZEdWSWVYQmxjblI1U1c1emRHRnVZMlVvY21WemIzVnlZMlVzSUhaaGJIVmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0J0WlhOellXZGxJRDBnZXlCMGVYQmxPaUFuVlZCRVFWUkZKeXdnWm5KdmJUb2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQW5aRzl0WVdsdU9pOHZjbVZuYVhOMGNua3VKeUFySUY5MGFHbHpMbDlrYjIxaGFXNGdLeUFuTHljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJSEpsYzI5MWNtTmxMQ0IyWVd4MVpUb2dkbUZzZFdWOWZUdGNibHh1SUNBZ0lGOTBhR2x6TGw5dFpYTnpZV2RsUW5WekxuQnZjM1F1Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVlhCa1lYUmxaQ0JvZVhCbGNuUjVJSEpsY0d4NUp5d2djbVZ3YkhrcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2djbVZuYVhOMFpYSWdZU0J1WlhjZ2MzVmljMk55YVdKbGNpQnBiaUIwYUdVZ1pHRjBZVTlpYW1WamRDQnlaV2RwYzNSbGNtVmtYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UzUnlhVzVuZlNBZ0lHUmhkR0ZQWW1wbFkzUlZVa3dnSUNBZ1pHRjBZVTlpYW1WamRDQlZVa3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdjM1ZpYzJOeWFXSmxjbFZTVENBZ0lDQnpkV0p6WTNKcFltVnlJRlZTVEZ4dUlDQXFMMXh1SUNCeVpXZHBjM1JsY2xOMVluTmpjbWxpWlhJb1pHRjBZVTlpYW1WamRGVlNUQ3dnYzNWaWMyTnlhV0psY2xWU1RDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YVHRjYmx4dUlDQWdJR2xtSUNoa1lYUmhUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQmtZWFJoVDJKcVpXTjBMbk4xWW5OamNtbGlaWEp6TG5CMWMyZ29jM1ZpYzJOeWFXSmxjbFZTVENrN1hHNGdJQ0FnSUNCZmRHaHBjeTVrWVhSaFQySnFaV04wVEdsemRGdGtZWFJoVDJKcVpXTjBWVkpNWFNBOUlHUmhkR0ZQWW1wbFkzUTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2daMlYwSUhSb1pTQnpkV0p6WTNKcFltVnljeUJ5WldkcGMzUmxjbVZrSUhkcGRHaHBiaUJoSUdSaGRHRlBZbXBsWTNSY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3Z0lDQWdaR0YwWVU5aWFtVmpkQ0JWVWt4Y2JpQWdLaUJBY0dGeVlXMGdJSHRCY25KaGVUeFRkSEpwYm1jK2ZTQWdJRk4xWW5OMGNtbGlaWEp6SUV4cGMzUmNiaUFnS2k5Y2JpQWdaMlYwUkdGMFlVOWlhbVZqZEZOMVluTmpjbWxpWlhKektHUmhkR0ZQWW1wbFkzUlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JrWVhSaFQySnFaV04wSUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEV4cGMzUmJaR0YwWVU5aWFtVmpkRlZTVEYwN1hHNWNiaUFnSUNCcFppQW9aR0YwWVU5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1JoZEdGUFltcGxZM1F1YzNWaWMyTnlhV0psY25NN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lDZE9ieUJrWVhSaFQySnFaV04wSUhkaGN5Qm1iM1Z1WkNjN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ZHOGdjbVZuYVhOMFpYSWdZU0J1WlhjZ1JHRjBZU0JQWW1wbFkzUWdhVzRnZEdobElISjFiblJwYldVZ2QyaHBZMmdnY21WMGRYSnVjeUIwYUdVZ1pHRjBZVTlpYW1WamRGVlNUQ0JoYkd4dlkyRjBaV1FnZEc4Z2RHaGxJRzVsZHlCRVlYUmhJRTlpYW1WamRDNWNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdhV1JsYm5ScFptbGxjaUFnSUNBZ0lDQWdJQ0FnSUdsa1pXNTBhV1pwWlhKY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ1pHRjBZVTlpYW1WamRITmphR1Z0WVNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUnpZMmhsYldGY2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ1pHRjBZVTlpYW1WamRGVnliQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZ5YkZ4dUlDQXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMGdJQ0FnSUNCa1lYUmhUMkpxWldOMFVtVndiM0owWlhJZ0lDQWdJQ0FnSUNCa1lYUmhUMkpxWldOMFVtVndiM0owWlhKY2JpQWdLaTljYmlBZ2NtVm5hWE4wWlhKRVlYUmhUMkpxWldOMEtHbGtaVzUwYVdacFpYSXNJR1JoZEdGUFltcGxZM1J6WTJobGJXRXNJR1JoZEdGUFltcGxZM1JWY213c0lHUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNpd2dZWFYwYUc5eWFYTmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdMeTl0WlhOellXZGxJSFJ2SUhKbFoybHpkR1Z5SUhSb1pTQnVaWGNnYUhsd1pYSjBlU3dnZDJsMGFHbHVJSFJvWlNCa2IyMWhhVzRnY21WbmFYTjBjbmxjYmlBZ0lDQWdJR3hsZENCdFpYTnpZV2RsVm1Gc2RXVWdQU0I3Ym1GdFpUb2dhV1JsYm5ScFptbGxjaXdnYzJOb1pXMWhPaUJrWVhSaFQySnFaV04wYzJOb1pXMWhMQ0IxY213NklHUmhkR0ZQWW1wbFkzUlZjbXdzSUdWNGNHbHlaWE02SUY5MGFHbHpMbVY0Y0dseVpYTlVhVzFsTENCeVpYQnZjblJsY2pvZ1pHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUxDQndjbVZCZFhSb09pQmhkWFJvYjNKcGMyVXNJSE4xWW5OamNtbGlaWEp6T2lCYlhYMDdYRzVjYmlBZ0lDQWdJRjkwYUdsekxtUmhkR0ZQWW1wbFkzUk1hWE4wVzJSaGRHRlBZbXBsWTNSVmNteGRJRDBnYldWemMyRm5aVlpoYkhWbE8xeHVYRzRnSUNBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUY5MGFHbHpMbTFsYzNOaFoyVkdZV04wYjNKNUxtTnlaV0YwWlVOeVpXRjBaVTFsYzNOaFoyVlNaWEYxWlhOMEtGeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDeGNiaUFnSUNBZ0lDQWdKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCZmRHaHBjeTV5WldkcGMzUnllVVJ2YldGcGJpQXJJQ2N2Snl4Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlZaaGJIVmxMRnh1SUNBZ0lDQWdJQ0FuY0c5c2FXTjVKMXh1SUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NjOVBUMCtJSEpsWjJsemRHVnlSR0YwWVU5aWFtVmpkQ0JTWlhCc2VUb2dKeXdnY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDZHZheWNwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblpYSnliM0lnYjI0Z2NtVm5hWE4wWlhJZ1JHRjBZVTlpYW1WamRDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnY21WbmFYTjBaWElnWVNCdVpYY2dTSGx3WlhKMGVTQnBiaUIwYUdVZ2NuVnVkR2x0WlNCM2FHbGphQ0J5WlhSMWNtNXpJSFJvWlNCSWVYQmxjblI1VlZKTUlHRnNiRzlqWVhSbFpDQjBieUIwYUdVZ2JtVjNJRWg1Y0dWeWRIa3VYRzRnSUNvZ1FIQmhjbUZ0SUNCN1UyRnVaR0p2ZUgwZ0lDQWdJQ0FnSUNBZ0lDQWdjMkZ1WkdKdmVDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOaGJtUmliM2hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEllWEJsY25SNVEyRjBZV3h2WjNWbFZWSk1mU0JJZVhCbGNuUjVRMkYwWVd4dlozVmxWVkpNSUNBZ1pHVnpZM0pwY0hSdmNseHVJQ0FxSUVCeVpYUjFjbTRnZTBoNWNHVnlkSGxWVWt4OUlDQWdJQ0FnSUNBZ0lFaDVjR1Z5ZEhsVlVreGNiaUFnS2k5Y2JpQWdjbVZuYVhOMFpYSkllWEJsY25SNUtITmhibVJpYjNnc0lHUmxjMk55YVhCMGIzSlZVa3dzSUdSbGMyTnlhWEIwYjNJcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk5aGMzTjFiV2x1WnlCa1pYTmpjbWx3ZEc5eUlHTnZiV1VnYVc0Z2RHaHBjeUJtYjNKdFlYUXNJSFJvWlNCelpYSjJhV05sTFhCeWIzWnBaR1Z5TFdSdmJXRnBiaUIxY213Z2FYTWdjbVYwY21sbGRtVmtJR0o1SUdFZ2MzQnNhWFFnYVc1emRISjFZM1JwYjI1Y2JpQWdJQ0F2TDJoNWNHVnlkSGt0WTJGMFlXeHZaM1ZsT2k4dlBITmxjblpwWTJVdGNISnZkbWxrWlhJdFpHOXRZV2x1UGk4OFkyRjBZV3h2WjNWbExXOWlhbVZqZEMxcFpHVnVkR2xtYVdWeVBseHVJQ0FnSUd4bGRDQmtiMjFoYVc1VmNtd2dQU0JrYVhacFpHVlZVa3dvWkdWelkzSnBjSFJ2Y2xWU1RDa3VaRzl0WVdsdU8xeHVYRzRnSUNBZ2FXWWdLR1J2YldGcGJsVnliQzVwYm1Oc2RXUmxjeWduWTJGMFlXeHZaM1ZsSnlrcElIdGNiaUFnSUNBZ0lHUnZiV0ZwYmxWeWJDQTlJR1J2YldGcGJsVnliQzV5WlhCc1lXTmxLQ2RqWVhSaGJHOW5kV1V1Snl3Z0p5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdVoyVjBTV1JsYm5ScGRIbEJjM05sY25ScGIyNG9LUzUwYUdWdUtHWjFibU4wYVc5dUtISmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnZFhObGNsQnliMlpwYkdVZ1BTQnlaWE4xYkhRdWRYTmxjbEJ5YjJacGJHVTdYRzRnSUNBZ0lDQWdJR3hsZENCcFpHVnVkR2wwZVZWU1RDQTlJSFZ6WlhKUWNtOW1hV3hsTG5WelpYSlZVa3c3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxsOXRaWE56WVdkbFFuVnpJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMDFsYzNOaFoyVkNkWE1nYm05MElHWnZkVzVrSUc5dUlISmxaMmx6ZEdWeVUzUjFZaWNwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZZMkZzYkNCamFHVmpheUJwWmlCMGFHVWdjSEp2ZEc5emRIVmlJR1Y0YVhOMFhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVnpiMngyWlNnbmFIbHdaWEowZVMxeWRXNTBhVzFsT2k4dkp5QXJJR1J2YldGcGJsVnliQ2t1ZEdobGJpaG1kVzVqZEdsdmJpZ3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVm5hWE4wY25sRWIyMWhhVzRnUFNCa2IyMWhhVzVWY213N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUlBSRTg2SUhOb2IzVnNaQ0JpWlNCcGJYQnNaVzFsYm5SbFpDQjNhWFJvSUdGa1pISmxjM05sY3lCd2IyeHNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpiaUIwYUdseklHTmhjMlVnZDJVZ2QybHNiQ0J5WlhGMVpYTjBJR0Z1WkNCeVpYUjFjbTRnYjI1c2VTQnZibVZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0ZrWkhKbGMzTmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVkVzFpWlhKUFprRmtaSEpsYzNObGN5QTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1aFpHUnlaWE56UVd4c2IyTmhkR2x2Ymk1amNtVmhkR1VvWkc5dFlXbHVWWEpzTENCdWRXMWlaWEpQWmtGa1pISmxjM05sY3lrdWRHaGxiaWhtZFc1amRHbHZiaWhoWkdSbGNtVnpjMHhwYzNRcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JsY21WemMweHBjM1F1Wm05eVJXRmphQ2htZFc1amRHbHZiaWhoWkdSeVpYTnpLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1aFpHUk1hWE4wWlc1bGNpaGhaR1J5WlhOeklDc2dKeTl6ZEdGMGRYTW5MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25UV1Z6YzJGblpTQmhaR1JNYVhOMFpXNWxjaUJtYjNJZ09pQW5MQ0JoWkdSeVpYTnpJQ3NnSnk5emRHRjBkWE1nTFQ0Z0p5QWdLeUJ0YzJjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNUlEMGdibVYzSUVoNWNHVnlkSGxKYm5OMFlXNWpaU2hmZEdocGN5NXBaR1Z1ZEdsbWFXVnlMQ0JmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1Z6WTNKcGNIUnZjbFZTVEN3Z1pHVnpZM0pwY0hSdmNpd2dZV1JrWlhKbGMzTk1hWE4wV3pCZExDQjFjMlZ5VUhKdlptbHNaU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZEM1d2RYTm9LR2g1Y0dWeWRIa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2WTJobFkyc2dkMmhsZEdobGNpQjBhR1VnY21WalpXbDJaV1FnYzJGdVltOTRJR1VnUVhCd2JHbGpZWFJwYjI1VFlXNWtZbTk0SUc5eUlHRWdibTl5YldGc0lITmhibVJpYjNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmhibVJpYjNndWRIbHdaU0E5UFQwZ0oyRndjQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV6WVc1a1ltOTRaWE5NYVhOMExtRndjRk5oYm1SaWIzaGJZV1JrWlhKbGMzTk1hWE4wV3pCZFhTQTlJSE5oYm1SaWIzZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMkZ1WkdKdmVDNTBlWEJsSUQwOVBTQW5ibTl5YldGc0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTmhibVJpYjNobGMweHBjM1F1YzJGdVpHSnZlRnRoWkdSbGNtVnpjMHhwYzNSYk1GMWRJRDBnYzJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oxZHliMjVuSUZOaGJtUmliM2hVZVhCbEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WemIzVnlZMlZ6TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIUm9aU0JvZVhCbGNuUjVJSEpsYzI5MWNtTmxjeUJwY3lCaElIWmxZM1J2Y2lCdmNpQmhJSE4wY21sdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVUMFJQSUdSbGJHVjBaU0JzWVhSbGNpQjNhR1Z1SUdOaGRHRnNiMmQxWlNCcGN5Qm1hWGhsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUNoa1pYTmpjbWx3ZEc5eUxtaDVjR1Z5ZEhsVWVYQmxLU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52ZFhKalpYTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZkWEpqWlhNdWNIVnphQ2hrWlhOamNtbHdkRzl5TG1oNWNHVnlkSGxVZVhCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZkWEpqWlhNZ1BTQmtaWE5qY21sd2RHOXlMbWg1Y0dWeWRIbFVlWEJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmxjMk55YVhCMGIzSkVZWFJoVTJOb1pXMWhJRDBnWkdWelkzSnBjSFJ2Y2k1a1lYUmhUMkpxWldOMGN6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGVFkyaGxiV0Z6UVhKeVlYa2dQU0JiWFR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzUm9hWE1nZDJsc2JDQmpjbVZoZEdVZ1lTQmhjbkpoZVNCM2FYUm9JR0VnVUhKdmJXbHpaU0JwYmlCbFlXTm9JSEJ2YzJsMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHbHVaR1Y0SUdsdUlHUmxjMk55YVhCMGIzSkVZWFJoVTJOb1pXMWhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWTmphR1Z0WVhOQmNuSmhlUzV3ZFhOb0tGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1V1WjJWMFJHRjBZVk5qYUdWdFlVUmxjMk55YVhCMGIzSW9aR1Z6WTNKcGNIUnZja1JoZEdGVFkyaGxiV0ZiYVc1a1pYaGRLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaGN5QnpiMjl1SUdGeklIUm9aU0J3Y21WMmFXOTFjeUJoY25KaGVTQnBjeUJqYjIxd2JHVjBaV1FzSUhSb2FYTWdkMmxzYkNCM1lXbDBJR1p2Y2lCMGFHVWdjbVZ6YjJ4MlpTQnZaaUJoYkd3Z2NISnZiV2x6WlhNZ2FXNGdkR2hsSUdGeWNtRjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGQnliMjFwYzJVdVlXeHNLR1JoZEdGVFkyaGxiV0Z6UVhKeVlYa3BMblJvWlc0b1puVnVZM1JwYjI0b1pHRjBZVk5qYUdWdFlYTXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1hV3gwWlhKbFpFUmhkR0ZUWTJobGJXRnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1pHRjBZVk5qYUdWdFlYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoVTJOb1pXMWhJRDBnWkdGMFlWTmphR1Z0WVhOYmFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5WldSRVlYUmhVMk5vWlcxaGN5NXdkWE5vS0dSaGRHRlRZMmhsYldFdWMyOTFjbU5sVUdGamEyRm5aUzV6YjNWeVkyVkRiMlJsTG5CeWIzQmxjblJwWlhNdWMyTm9aVzFsTG1OdmJuTjBZVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMjFsYzNOaFoyVWdkRzhnY21WbmFYTjBaWElnZEdobElHNWxkeUJvZVhCbGNuUjVMQ0IzYVhSb2FXNGdkR2hsSUdSdmJXRnBiaUJ5WldkcGMzUnllVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsVm1Gc2RXVWdQU0I3ZFhObGNqb2dhV1JsYm5ScGRIbFZVa3dzSUNCb2VYQmxjblI1UkdWelkzSnBjSFJ2Y2xWU1REb2daR1Z6WTNKcGNIUnZjbFZTVEN3Z2FIbHdaWEowZVZWU1REb2dZV1JrWlhKbGMzTk1hWE4wV3pCZExDQmxlSEJwY21Wek9pQmZkR2hwY3k1bGVIQnBjbVZ6VkdsdFpTd2djbVZ6YjNWeVkyVnpPaUJ5WlhOdmRYSmpaWE1zSUdSaGRHRlRZMmhsYldWek9pQm1hV3gwWlhKbFpFUmhkR0ZUWTJobGJXRnpmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdYM1JvYVhNdWJXVnpjMkZuWlVaaFkzUnZjbmt1WTNKbFlYUmxRM0psWVhSbFRXVnpjMkZuWlZKbGNYVmxjM1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WldkcGMzUnllVlZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVm1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuY0c5c2FXTjVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbExDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDYzlQVDArSUZKbFoybHpkR1Z5U0hsd1pYSjBlU0JTWlhCc2VUb2dKeXdnY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OTBhVzFsY2lCMGJ5QnJaV1Z3SUhSb1pTQnlaV2RwYzNSeVlYUnBiMjRnWVd4cGRtVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2RHbHRaU0JwY3lCa1pXWnBibVZrSUdKNUlHRWdiR2wwZEd4bElHeGxjM01nZEdoaGJpQm9ZV3htSUc5bUlIUm9aU0JsZUhCcGNtVnpJSFJwYldVZ1pHVm1hVzVsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnJaV1Z3UVd4cGRtVlVhVzFsY2lBOUlITmxkRWx1ZEdWeWRtRnNLR1oxYm1OMGFXOXVLQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUY5MGFHbHpMbTFsYzNOaFoyVkdZV04wYjNKNUxtTnlaV0YwWlVOeVpXRjBaVTFsYzNOaFoyVlNaWEYxWlhOMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NXlaV2RwYzNSeWVVUnZiV0ZwYmlBcklDY3ZKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZaaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmNHOXNhV041SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDYzlQVDArSUV0bFpYQkJiR2wyWlNCU1pYQnNlVG9nSnl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dvS0NoZmRHaHBjeTVsZUhCcGNtVnpWR2x0WlNBdklERXVNU2tnTHlBeUtTQXFJREV3TURBcEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkSWVYQmxjblI1SUZOamFHVnRZWE1uTENCbWFXeDBaWEpsWkVSaGRHRlRZMmhsYldGektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduU0hsd1pYSjBlU0J5WlhOdmRYSmpaWE1uTENCeVpYTnZkWEpqWlhNcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaGhaR1JsY21WemMweHBjM1JiTUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEJaR1J5WlhOeklGSmxZWE52YmpvZ0p5d2djbVZoYzI5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3dnWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25SbUZwYkdWa0lIUnZJRzlpZEdGcGJpQmhiaUJwWkdWdWRHbDBlU2NwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRlJ2SUhWdWNtVm5hWE4wWlhJZ1lTQndjbVYyYVc5MWMyeDVJSEpsWjJsemRHVnlaV1FnU0hsd1pYSjBlVnh1SUNBcUlFQndZWEpoYlNBZ2UwaDVjR1Z5ZEhsVlVreDlJQ0FnSUNBZ0lDQWdJRWg1Y0dWeWRIbFZVa3dnZFhKc0lDQWdJQ0FnSUNCMWNteGNiaUFnS2k5Y2JpQWdkVzV5WldkcGMzUmxja2g1Y0dWeWRIa29kWEpzS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JzWlhRZ1ptOTFibVFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SURBN1hHNWNiaUFnSUNBZ0lHWnZjbHgwS0dsdVpHVjRJRDBnTURzZ2FXNWtaWGdnUENCZmRHaHBjeTVvZVhCbGNuUnBaWE5NYVhOMExteGxibWQwYURzZ2FXNWtaWGdyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlU0E5SUY5MGFHbHpMbWg1Y0dWeWRHbGxjMHhwYzNSYmFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNCcFppQW9hSGx3WlhKMGVTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0doNWNHVnlkSGt1YUhsd1pYSjBlVlZTVENBOVBUMGdkWEpzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR1p2ZFc1a0lEMDlQU0JtWVd4elpTa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KMGg1Y0dWeWRIa2dibTkwSUdadmRXNWtKeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkRnRwYm1SbGVGMDdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9KMGg1Y0dWeWRIa2djM1ZqWTJWemMyWjFiR3g1SUdSbGJHVjBaV1FuS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnWkdselkyOTJaWElnY0hKdmRHOWpiMndnYzNSMVluTWdZWFpoYVd4aFlteGxJR2x1SUhSb1pTQnlkVzUwYVcxbElHWnZjaUJoSUdObGNuUmhhVzRnWkc5dFlXbHVMaUJKWmlCaGRtRnBiR0ZpYkdVc0lHbDBJSEpsZEhWeWJuTWdkR2hsSUhKMWJuUnBiV1VnZFhKc0lHWnZjaUIwYUdVZ2NISnZkRzlqYjJ3Z2MzUjFZaUIwYUdGMElHTnZibTVsWTNSeklIUnZJSFJvWlNCeVpYRjFaWE4wWldRZ1pHOXRZV2x1TGlCU1pYRjFhWEpsWkNCaWVTQjBhR1VnY25WdWRHbHRaU0JDVlZNZ2RHOGdjbTkxZEdVZ2JXVnpjMkZuWlhNZ2RHOGdjbVZ0YjNSbElITmxjblpsY25NZ2IzSWdjR1ZsY25NZ0tHUnZJSGRsSUc1bFpXUWdjMjl0WlhSb2FXNW5JSE5wYldsc1lYSWdabTl5SUVoNWNHVnlkR2xsY3o4cExseHVJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibFZTVEgwZ0lDQWdJQ0FnSUNBZ0lFUnZiV0ZwYmxWU1RDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZ4dUlDQXFJRUJ5WlhSMWNtNGdlMUoxYm5ScGJXVlZVa3g5SUNBZ0lDQWdJQ0FnSUNCU2RXNTBhVzFsVlZKTVhHNGdJQ292WEc0Z0lHUnBjMk52ZG1WeVVISnZkRzl6ZEhWaUtIVnliQ2tnZTF4dUlDQWdJR2xtSUNnaGRYSnNLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUJoY21GdFpYUmxjaUIxY213Z2JtVmxaR1ZrSnlrN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JzWlhRZ2NtVnhkV1Z6ZENBOUlGOTBhR2x6TG5CeWIzUnZjM1IxWW5OTWFYTjBXM1Z5YkYwN1hHNWNiaUFnSUNBZ0lHbG1JQ2h5WlhGMVpYTjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtDZHlaWEYxWlhOMFZYQmtZWFJsSUdOdmRXeGtibHhjSjNRZ1oyVjBJSFJvWlNCUWNtOTBiM04wZFdKVlVrd25LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jbVZ4ZFdWemRDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWJ5QnlaV2RwYzNSbGNpQmhJRzVsZHlCUWNtOTBiMk52YkNCVGRIVmlJR2x1SUhSb1pTQnlkVzUwYVcxbElHbHVZMngxWkdsdVp5QmhjeUJwYm5CMWRDQndZWEpoYldWMFpYSnpJSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QndiM04wVFdWemMyRm5aU3dnZEdobElFUnZiV0ZwYmxWU1RDQjBhR0YwSUdseklHTnZibTVsWTNSbFpDQjNhWFJvSUhSb1pTQnpkSFZpTENCM2FHbGphQ0J5WlhSMWNtNXpJSFJvWlNCU2RXNTBhVzFsVlZKTUlHRnNiRzlqWVhSbFpDQjBieUIwYUdVZ2JtVjNJRkJ5YjNSdlkyOXNVM1IxWWk1Y2JpQWdJQ29nUUhCaGNtRnRJSHRUWVc1a1ltOTRmU0FnSUNBZ0lDQWdVMkZ1WkdKdmVGeHVJQ0FnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlDQWdJQ0JFYjIxaGFXNVZVa3dnYzJWeWRtbGpaU0J3Y205MmFXUmxjaUJrYjIxaGFXNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RIMWNiaUFnSUNvdlhHNGdJSEpsWjJsemRHVnlVM1IxWWloellXNWtZbTk0TENCa2IyMWhhVzVWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lDOHZZMmhsWTJzZ2FXWWdiV1Z6YzJGblpVSjFjeUJwY3lCeVpXZHBjM1JsY21Wa0lHbHVJSEpsWjJsemRISjVJRzl5SUc1dmRGeHVJQ0FnSUNBZ2FXWWdLRjkwYUdsekxsOXRaWE56WVdkbFFuVnpJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtDZE5aWE56WVdkbFFuVnpJRzV2ZENCbWIzVnVaQ0J2YmlCeVpXZHBjM1JsY2xOMGRXSW5LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk5VVQwUlBJR2x0Y0d4bGJXVnVkQ0JoSUhWdWFYRjFaU0J1ZFcxaVpYSWdabTl5SUhSb1pTQndjbTkwYjNOMGRXSlZVa3hjYmlBZ0lDQWdJR2xtSUNnaFpHOXRZV2x1VlZKTUxtbHVaR1Y0VDJZb0oyMXpaeTF1YjJSbExpY3BLU0I3WEc0Z0lDQWdJQ0FnSUdSdmJXRnBibFZTVENBOUlHUnZiV0ZwYmxWU1RDNXpkV0p6ZEhKcGJtY29aRzl0WVdsdVZWSk1MbWx1WkdWNFQyWW9KeTRuS1NBcklERXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNSUQwZ0oyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNVZVa3dnS3lBbkwzQnliM1J2YzNSMVlpOG5JQ3NnVFdGMGFDNW1iRzl2Y2lnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXdLU0FySURFcE8xeHVYRzRnSUNBZ0lDQXZMeUJVVDBSUE9pQlBjSFJwYldsNlpTQjBhR2x6WEc0Z0lDQWdJQ0JmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0a2IyMWhhVzVWVWt4ZElEMGdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNURHRjYmlBZ0lDQWdJRjkwYUdsekxuTmhibVJpYjNobGMweHBjM1F1YzJGdVpHSnZlRnR5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNWFNBOUlITmhibVJpYjNnN1hHNWNiaUFnSUNBZ0lDOHZJSE5oYm1SaWIzZ3VZV1JrVEdsemRHVnVaWElvSnlvbkxDQm1kVzVqZEdsdmJpaHRjMmNwSUh0Y2JpQWdJQ0FnSUM4dklDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDOHZJSDBwTzF4dVhHNGdJQ0FnSUNCeVpYTnZiSFpsS0hKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3cE8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NWhaR1JNYVhOMFpXNWxjaWh5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNSUNzZ0p5OXpkR0YwZFhNbkxDQW9iWE5uS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNodGMyY3VjbVZ6YjNWeVkyVWdQVDA5SUcxelp5NTBieUFySUNjdmMzUmhkSFZ6SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkU2RXNTBhVzFsVUhKdmRHOXpkSFZpVlZKTUwzTjBZWFIxY3lCdFpYTnpZV2RsT2lBbkxDQnRjMmN1WW05a2VTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QjFibkpsWjJsemRHVnlJR0VnY0hKbGRtbHZkWE5zZVNCeVpXZHBjM1JsY21Wa0lIQnliM1J2WTI5c0lITjBkV0pjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEllWEJsY25SNVVuVnVkR2x0WlZWU1RIMGdJQ0JJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUQ0FnSUNBZ2FIbHdaWEowZVZKMWJuUnBiV1ZWVWt4Y2JpQWdLaTljYmlBZ2RXNXlaV2RwYzNSbGNsTjBkV0lvYUhsd1pYSjBlVkoxYm5ScGJXVlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUmJhSGx3WlhKMGVWSjFiblJwYldWVlVreGRPMXh1WEc0Z0lDQWdJQ0JwWmlBb1pHRjBZU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25SWEp5YjNJZ2IyNGdkVzV5WldkcGMzUmxjbE4wZFdJNklFaDVjR1Z5ZEhrZ2JtOTBJR1p2ZFc1a0p5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUmJhSGx3WlhKMGVWSjFiblJwYldWVlVreGRPMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2RRY205MGIzTjBkV0pWVWt3Z2NtVnRiM1psWkNjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ2SUhKbFoybHpkR1Z5SUdFZ2JtVjNJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnlJSEJ5YjNoNUlHbHVJSFJvWlNCeWRXNTBhVzFsSUdsdVkyeDFaR2x1WnlCaGN5QnBibkIxZENCd1lYSmhiV1YwWlhKeklIUm9aU0JtZFc1amRHbHZiaUIwYnlCd2IzTjBUV1Z6YzJGblpTd2dkR2hsSUVSdmJXRnBibFZTVENCMGFHRjBJR2x6SUdOdmJtNWxZM1JsWkNCM2FYUm9JSFJvWlNCemRIVmlMQ0IzYUdsamFDQnlaWFIxY201eklIUm9aU0JTZFc1MGFXMWxWVkpNSUdGc2JHOWpZWFJsWkNCMGJ5QjBhR1VnYm1WM0lGQnliM1J2WTI5c1UzUjFZaTVjYmlBZ0lDb2dRSEJoY21GdElIdFRZVzVrWW05NGZTQWdJQ0FnSUNBZ1UyRnVaR0p2ZUZ4dUlDQWdLaUJBY0dGeVlXMGdJSHRFYjIxaGFXNVZVa3g5SUNBZ0lDQkViMjFoYVc1VlVrd2djMlZ5ZG1salpTQndjbTkyYVdSbGNpQmtiMjFoYVc1Y2JpQWdJQ29nUUhKbGRIVnliaUI3VW5WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNZlZ4dUlDQWdLaTljYmlBZ2NtVm5hWE4wWlhKSlpIQlFjbTk0ZVNoellXNWtZbTk0TENCa2IyMWhhVzVWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCcFpIQlFjbTk0ZVZOMGRXSlZVa3c3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnTHk5amFHVmpheUJwWmlCdFpYTnpZV2RsUW5WeklHbHpJSEpsWjJsemRHVnlaV1FnYVc0Z2NtVm5hWE4wY25rZ2IzSWdibTkwWEc0Z0lDQWdJQ0JwWmlBb1gzUm9hWE11WDIxbGMzTmhaMlZDZFhNZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjAxbGMzTmhaMlZDZFhNZ2JtOTBJR1p2ZFc1a0lHOXVJSEpsWjJsemRHVnlVM1IxWWljcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaSEJRY205NGVWTjBkV0pWVWt3Z1BTQW5aRzl0WVdsdUxXbGtjRG92THljZ0t5QmtiMjFoYVc1VlVrd2dLeUFuTDNOMGRXSXZKeUFySUUxaGRHZ3VabXh2YjNJb0tFMWhkR2d1Y21GdVpHOXRLQ2tnS2lBeE1EQXdNQ2tnS3lBeEtUdGNibHh1SUNBZ0lDQWdMeThnVkU5RVR6b2dUM0IwYVcxcGVtVWdkR2hwYzF4dUlDQWdJQ0FnWDNSb2FYTXVhV1J3VUhKdmVIbE1hWE4wVzJSdmJXRnBibFZTVEYwZ1BTQnBaSEJRY205NGVWTjBkV0pWVWt3N1hHNGdJQ0FnSUNCZmRHaHBjeTV6WVc1a1ltOTRaWE5NYVhOMExuTmhibVJpYjNoYmFXUndVSEp2ZUhsVGRIVmlWVkpNWFNBOUlITmhibVJpYjNnN1hHNWNiaUFnSUNBZ0lDOHZJSE5oYm1SaWIzZ3VZV1JrVEdsemRHVnVaWElvSnlvbkxDQm1kVzVqZEdsdmJpaHRjMmNwSUh0Y2JpQWdJQ0FnSUM4dklDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDOHZJSDBwTzF4dVhHNGdJQ0FnSUNCeVpYTnZiSFpsS0dsa2NGQnliM2g1VTNSMVlsVlNUQ2s3WEc1Y2JpQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtHbGtjRkJ5YjNoNVUzUjFZbFZTVENBcklDY3ZjM1JoZEhWekp5d2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JYTm5MbkpsYzI5MWNtTmxJRDA5UFNCdGMyY3VkRzhnS3lBbkwzTjBZWFIxY3ljcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmFXUndVSEp2ZUhsVGRIVmlWVkpNTDNOMFlYUjFjeUJ0WlhOellXZGxPaUFuTENCdGMyY3VZbTlrZVM1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnWkdselkyOTJaWElnYVdSd1VISnZlSGtnYzNSMVluTWdZWFpoYVd4aFlteGxJR2x1SUhSb1pTQnlkVzUwYVcxbElHWnZjaUJoSUdObGNuUmhhVzRnWkc5dFlXbHVMaUJKWmlCaGRtRnBiR0ZpYkdVc0lHbDBJSEpsZEhWeWJuTWdkR2hsSUhKMWJuUnBiV1VnZFhKc0lHWnZjaUIwYUdVZ2FXUndVSEp2ZUhrZ2MzUjFZaUIwYUdGMElHTnZibTVsWTNSeklIUnZJSFJvWlNCeVpYRjFaWE4wWldRZ1pHOXRZV2x1TGlCU1pYRjFhWEpsWkNCaWVTQjBhR1VnY25WdWRHbHRaU0JDVlZNZ2RHOGdjbTkxZEdVZ2JXVnpjMkZuWlhNZ2RHOGdjbVZ0YjNSbElITmxjblpsY25NZ2IzSWdjR1ZsY25OY2JpQWdLaUJBY0dGeVlXMGdJSHRFYjIxaGFXNVZVa3g5SUNBZ0lDQWdJQ0FnSUNCRWIyMWhhVzVWVWt3Z0lDQWdJQ0FnSUNBZ0lDQjFjbXhjYmlBZ0tpQkFjbVYwZFhKdUlIdFNkVzUwYVcxbFZWSk1mU0FnSUNBZ0lDQWdJQ0FnVW5WdWRHbHRaVlZTVENBZ0lDQWdJQ0FnSUdsa2NGQnliM2g1VlhKc1hHNGdJQ292WEc0Z0lHUnBjMk52ZG1WeVNXUndVSEp2ZUhrb2RYSnNLU0I3WEc0Z0lDQWdhV1lnS0NGMWNtd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VR0Z5WVcxbGRHVnlJSFZ5YkNCdVpXVmtaV1FuS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNjbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJR3hsZENCeVpYRjFaWE4wSUQwZ1gzUm9hWE11YVdSd1VISnZlSGxNYVhOMFczVnliRjA3WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaWEYxWlhOMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0NkeVpYRjFaWE4wVlhCa1lYUmxJR052ZFd4a2JseGNKM1FnWjJWMElIUm9aU0JwWkhCUWNtOTRlVlZTVENjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYRjFaWE4wS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnY21WbmFYTjBaWElnWVNCdVpYY2dVRzlzYVdONUlFVnVabTl5WTJWeUlHbHVJSFJvWlNCeWRXNTBhVzFsSUdsdVkyeDFaR2x1WnlCaGN5QnBibkIxZENCd1lYSmhiV1YwWlhKeklIUm9aU0JtZFc1amRHbHZiaUIwYnlCd2IzTjBUV1Z6YzJGblpTd2dkR2hsSUVoNWNHVnlkSGxWVWt3Z1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb1pTQlFSVkFzSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUZKMWJuUnBiV1ZWVWt3Z1lXeHNiMk5oZEdWa0lIUnZJSFJvWlNCdVpYY2dVRzlzYVdONUlFVnVabTl5WTJWeUlHTnZiWEJ2Ym1WdWRDNWNiaUFnS2lCQWNHRnlZVzBnSUh0TlpYTnpZV2RsTGsxbGMzTmhaMlY5SUhCdmMzUk5aWE56WVdkbElIQnZjM1JOWlhOellXZGxYRzRnSUNvZ1FIQmhjbUZ0SUNCN1NIbHdaWEowZVZWU1RIMGdJQ0FnSUNBZ0lDQWdTSGx3WlhKMGVWVlNUQ0FnSUNBZ0lDQWdJQ0FnSUdoNWNHVnlkSGxjYmlBZ0tpQkFjbVYwZFhKdUlIdEllWEJsY25SNVVuVnVkR2x0WlZWU1RIMGdJQ0JJZVhCbGNuUjVVblZ1ZEdsdFpWVlNURnh1SUNBcUwxeHVJQ0J5WldkcGMzUmxjbEJGVUNod2IzTjBUV1Z6YzJGblpTd2dhSGx3WlhKMGVTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUM4dlZFOUVUeUJqYUdWamF5QjNhR0YwSUhCaGNtRnRaWFJsY2lCcGJpQjBhR1VnY0c5emRFMWxjM05oWjJVZ2RHaGxJSEJsY0NCcGN5NWNiaUFnSUNBZ0lGOTBhR2x6TG5CbGNFeHBjM1JiYUhsd1pYSjBlVjBnUFNCd2IzTjBUV1Z6YzJGblpUdGNiaUFnSUNBZ0lISmxjMjlzZG1Vb0oxQkZVQ0J5WldkcGMzUmxjbVZrSUhkcGRHZ2djM1ZqWTJWemN5Y3BPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QjFibkpsWjJsemRHVnlJR0VnY0hKbGRtbHZkWE5zZVNCeVpXZHBjM1JsY21Wa0lIQnliM1J2WTI5c0lITjBkV0pjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEllWEJsY25SNVVuVnVkR2x0WlZWU1RIMGdJQ0JJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUQ0FnSUNBZ1NIbHdaWEowZVZKMWJuUnBiV1ZWVWt4Y2JpQWdLaTljYmlBZ2RXNXlaV2RwYzNSbGNsQkZVQ2hJZVhCbGNuUjVVblZ1ZEdsdFpWVlNUQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTeHlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUY5MGFHbHpMbkJsY0V4cGMzUmJTSGx3WlhKMGVWSjFiblJwYldWVlVreGRPMXh1WEc0Z0lDQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RRWlhBZ1RtOTBJR1p2ZFc1a0xpY3BPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ25VRVZRSUhOMVkyTmxjM05tZFd4c2VTQnlaVzF2ZG1Wa0xpY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QnlaV05sYVhabElITjBZWFIxY3lCbGRtVnVkSE1nWm5KdmJTQmpiMjF3YjI1bGJuUnpJSEpsWjJsemRHVnlaV1FnYVc0Z2RHaGxJRkpsWjJsemRISjVMbHh1SUNBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJVdVRXVnpjMkZuWlgwZ0lDQWdJRTFsYzNOaFoyVXVUV1Z6YzJGblpTQWdJQ0FnSUNCbGRtVnVkRnh1SUNBcUwxeHVJQ0J2YmtWMlpXNTBLR1YyWlc1MEtTQjdYRzRnSUNBZ0x5OGdWRTlFVHlCaWIyUjVMaTR1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QmthWE5qYjNabGNpQnpZVzVrWW05NFpYTWdZWFpoYVd4aFlteGxJR2x1SUhSb1pTQnlkVzUwYVcxbElHWnZjaUJoSUdObGNuUmhhVzRnWkc5dFlXbHVMaUJTWlhGMWFYSmxaQ0JpZVNCMGFHVWdjblZ1ZEdsdFpTQlZRU0IwYnlCaGRtOXBaQ0J0YjNKbElIUm9ZVzRnYjI1bElITmhibVJpYjNnZ1ptOXlJSFJvWlNCellXMWxJR1J2YldGcGJpNWNiaUFnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlFUnZiV0ZwYmxWU1RDQjFjbXhjYmlBZ0tpQkFjbVYwZFhKdUlIdFNkVzUwYVcxbFUyRnVaR0p2ZUgwZ0lDQWdJQ0FnSUNBZ0lGSjFiblJwYldWVFlXNWtZbTk0WEc0Z0lDb3ZYRzRnSUdkbGRGTmhibVJpYjNnb2RYSnNLU0I3WEc0Z0lDQWdhV1lnS0NGMWNtd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VR0Z5WVcxbGRHVnlJSFZ5YkNCdVpXVmtaV1FuS1R0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnbloyVjBVMkZ1WkdKdmVEb2dKeXdnZFhKc0tUdGNibHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQnlaWEYxWlhOME8xeHVYRzRnSUNBZ0lDQXZMMlpwY25OMElIUnllU0IwYnlCbWFXNWtJSFJvWlNCMWNtd2dhVzRnZEdobElHRndjRk5oYm1SaWIzZ2diR2x6ZEZ4dUlDQWdJQ0FnY21WeGRXVnpkQ0E5SUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdVlYQndVMkZ1WkdKdmVGdDFjbXhkTzF4dVhHNGdJQ0FnSUNBdkwybG1JRzV2SUdGd2NGTmhibVJpYjNnZ2QyRnpJR1p2ZFc1a0xDQjBjbmtnZEc4Z2MyVmhjbU5vSUdsdUlIUm9aU0J1YjNKdFlXd2djMkZ1WkdKdmVHVnpJR3hwYzNSY2JpQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBJRDBnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1ellXNWtZbTk0VzNWeWJGMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWEYxWlhOMEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LSFZ5YkNrdVpHOXRZV2x1TzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnYzJWaGNtTm9JR2x1SUhSb1pTQnpZVzVrWW05NFpYTWdiR2x6ZENCbWIzSWdZU0JsYm5SeWVTQmpiMjUwWVdsdWFXNW5JSFJvWlNCa2IyMWhhVzRnWjJsMlpXNWNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0J6WVc1a1ltOTRJR2x1SUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdWMyRnVaR0p2ZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmhibVJpYjNndWFXNWpiSFZrWlhNb1pHOXRZV2x1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wSUQwZ1gzUm9hWE11YzJGdVpHSnZlR1Z6VEdsemRDNXpZVzVrWW05NFczTmhibVJpYjNoZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0Z5WlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2duYm04Z2MyRnVaR0p2ZUNCbWIzVnVaQ0JtYjNJNklDY2dLeUIxY213cE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYRjFaWE4wS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnZG1WeWFXWjVJR2xtSUhOdmRYSmpaU0JwY3lCMllXeHBaQ0JoYm1RZ2RHOGdjbVZ6YjJ4MlpTQjBZWEpuWlhRZ2NuVnVkR2x0WlNCMWNtd2dZV1JrY21WemN5QnBaaUJ1WldWa1pXUWdLR1ZuSUhCeWIzUnZjM1IxWWlCeWRXNTBhVzFsSUhWeWJDQnBiaUJqWVhObElIUm9aU0J0WlhOellXZGxJR2x6SUhSdklHSmxJR1JwYzNCaGRHTm9aV1FnZEc4Z1lTQnlaVzF2ZEdVZ1pXNWtjRzlwYm5RcExseHVJQ0FxSUVCd1lYSmhiU0FnZTFWU1RDNVZVa3g5SUNCMWNtd2dJQ0FnSUNBZ2RYSnNYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlR4VlVrd3VWVkpNUG4wZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlVnUEZWU1RDNVZVa3crWEc0Z0lDb3ZYRzRnSUhKbGMyOXNkbVVvZFhKc0tTQjdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KM0psYzI5c2RtVWdKeUFySUhWeWJDazdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dmMzQnNhWFFnZEdobElIVnliQ0IwYnlCbWFXNWtJSFJvWlNCa2IyMWhhVzVWVWt3dUlHUmxZV3h6SUhkcGRHZ2dkR2hsSUhWeWJDQm1iM0lnWlhoaGJYQnNaU0JoY3pwY2JpQWdJQ0F2TDF3aWFIbHdaWEowZVMxeWRXNTBhVzFsT2k4dmMzQXhMM0J5YjNSdmMzUjFZaTh4TWpOY0lpeGNiaUFnSUNCc1pYUWdaR2wyYVdSbFpGVlNUQ0E5SUdScGRtbGtaVlZTVENoMWNtd3BPMXh1SUNBZ0lHeGxkQ0JrYjIxaGFXNVZjbXdnUFNCa2FYWnBaR1ZrVlZKTUxtUnZiV0ZwYmp0Y2JpQWdJQ0JzWlhRZ2RIbHdaU0E5SUdScGRtbGtaV1JWVWt3dWRIbHdaVHRjYmx4dUlDQWdJQzh2SUhKbGMyOXNkbVVnZEdobElHUnZiV0ZwYmlCd2NtOTBiM04wZFdJZ2FXNGdZMkZ6WlNCdlppQmhJRzFsYzNOaFoyVWdkRzhnWjJ4dlltRnNJSEpsWjJsemRISjVYRzRnSUNBZ2FXWWdLSFZ5YkM1cGJtTnNkV1JsY3lnbloyeHZZbUZzT2k4dmNtVm5hWE4wY25rbktTa2dlMXh1SUNBZ0lDQWdaRzl0WVdsdVZYSnNJRDBnWDNSb2FYTXVYMlJ2YldGcGJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0JwWmlBb0lXUnZiV0ZwYmxWeWJDNXBibVJsZUU5bUtDZHRjMmN0Ym05a1pTNG5LU0I4ZkNBaFpHOXRZV2x1VlhKc0xtbHVaR1Y0VDJZb0ozSmxaMmx6ZEhKNUxpY3BLU0I3WEc0Z0lDQWdJQ0FnSUdSdmJXRnBibFZ5YkNBOUlHUnZiV0ZwYmxWeWJDNXpkV0p6ZEhKcGJtY29aRzl0WVdsdVZYSnNMbWx1WkdWNFQyWW9KeTRuS1NBcklERXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2NtVnhkV1Z6ZER0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5aRzl0WVdsdUxXbGtjQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENBZ1BTQmZkR2hwY3k1cFpIQlFjbTk0ZVV4cGMzUmJaRzl0WVdsdVZYSnNYVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsY1hWbGMzUWdJRDBnWDNSb2FYTXVjSEp2ZEc5emRIVmljMHhwYzNSYlpHOXRZV2x1VlhKc1hUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdYM1JvYVhNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNuVnVkR2x0WlRwemRIVmlURzloWkdWa0p5d2dablZ1WTNScGIyNG9aRzl0WVdsdVZYSnNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGNYVmxjM1FnSUQwZ1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUmJaRzl0WVdsdVZYSnNYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZFNaWE52YkhabFpDQlFjbTkwYjNOMGRXSTZJQ2NzSUhKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGNYVmxjM1FwTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKMWJuUnBiV1U2YVdSd1VISnZlSGxNYjJGa1pXUW5MQ0JtZFc1amRHbHZiaWhrYjIxaGFXNVZjbXdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnhkV1Z6ZENBZ1BTQmZkR2hwY3k1cFpIQlFjbTk0ZVV4cGMzUmJaRzl0WVdsdVZYSnNYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZFNaWE52YkhabFpDQkpSRkJRY205NGVUb2dKeXdnY21WeGRXVnpkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WeGRXVnpkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2FXWWdLSEpsY1hWbGMzUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjFKbGMyOXNkbVZrT2lBbkxDQnlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWEYxWlhOMEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuWkc5dFlXbHVMV2xrY0NjcElIdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NTBjbWxuWjJWeUtDZHlkVzUwYVcxbE9teHZZV1JKWkhCUWNtOTRlU2NzSUdSdmJXRnBibFZ5YkNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWRISnBaMmRsY2lnbmNuVnVkR2x0WlRwc2IyRmtVM1IxWWljc0lHUnZiV0ZwYmxWeWJDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlNaV2RwYzNSeWVUdGNiaUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNiaThxS2x4dUtpQWdJRUJoZFhSb2IzSTZJRWRwYkNCRWFXRnpJQ2huYVd3dVpHbGhjMEIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFFwWEc0cUlDQWdVbVZuYVhOMGNua2dSR0YwWVNCTmIyUmxiQ0JwYm1Oc2RXUmxjeUJoYkd3Z1QySnFaV04wY3lCMGJ5QmlaU0JvWVc1a2JHVmtJR0o1SUhSb1pTQlNaV2RwYzNSeWVTQm1kVzVqZEdsdmJtRnNhWFI1SUdsdVkyeDFaR2x1WjF4dUtpOWNibU5zWVhOeklGSmxaMmx6ZEhKNVJHRjBZVTF2WkdWc0lIdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHBaQ3dnZFhKc0xDQmtaWE5qY21sd2RHOXlWVkpNTENCemRHRnlkR2x1WjFScGJXVXNJR3hoYzNSTmIyUnBabWxsWkN3Z2MzUmhkSFZ6TENCemRIVmljeXdnYzNSMVluTkRiMjVtYVdkMWNtRjBhVzl1S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxsOXBaQ0E5SUdsa08xeHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQjFjbXc3WEc0Z0lDQWdYM1JvYVhNdVgyUmxjMk55YVhCMGIzSlZVa3dnUFNCa1pYTmpjbWx3ZEc5eVZWSk1PMXh1SUNBZ0lGOTBhR2x6TGw5emRHRnlkR2x1WjFScGJXVWdQU0J6ZEdGeWRHbHVaMVJwYldVN1hHNGdJQ0FnWDNSb2FYTXVYMnhoYzNSTmIyUnBabWxsWkNBOUlHeGhjM1JOYjJScFptbGxaRHRjYmlBZ0lDQmZkR2hwY3k1ZmMzUmhkSFZ6SUQwZ2MzUmhkSFZ6TzF4dUlDQWdJRjkwYUdsekxsOXpkSFZpY3lBOUlITjBkV0p6TzF4dUlDQWdJRjkwYUdsekxsOXpkSFZpYzBOdmJtWnBaM1Z5WVhScGIyNGdQU0J6ZEhWaWMwTnZibVpwWjNWeVlYUnBiMjQ3WEc0Z0lIMWNibHh1SUNCblpYUWdhV1FvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDJsa08xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhWeWJDZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZkWEpzTzF4dUlDQjlYRzVjYmlBZ1oyVjBJR1JsYzJOeWFYQjBiM0lvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDJSbGMyTnlhWEIwYjNKVlVrdzdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JTWldkcGMzUnllVVJoZEdGTmIyUmxiRHRjYmlJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYmx4dWFXMXdiM0owSUNkaVlXSmxiQzF3YjJ4NVptbHNiQ2M3WEc1Y2JpOHZUV0ZwYmlCa1pYQmxibVJsWTJsbGMxeHVhVzF3YjNKMElGSmxaMmx6ZEhKNUlHWnliMjBnSnk0dUwzSmxaMmx6ZEhKNUwxSmxaMmx6ZEhKNUp6dGNibWx0Y0c5eWRDQkpaR1Z1ZEdsMGVVMXZaSFZzWlNCbWNtOXRJQ2N1TGk5cFpHVnVkR2wwZVM5SlpHVnVkR2wwZVUxdlpIVnNaU2M3WEc1cGJYQnZjblFnVUc5c2FXTjVSVzVuYVc1bElHWnliMjBnSnk0dUwzQnZiR2xqZVM5UWIyeHBZM2xGYm1kcGJtVW5PMXh1YVcxd2IzSjBJRTFsYzNOaFoyVkNkWE1nWm5KdmJTQW5MaTR2WW5WekwwMWxjM05oWjJWQ2RYTW5PMXh1THk4Z2FXMXdiM0owSUVkeVlYQm9RMjl1Ym1WamRHOXlJR1p5YjIwZ0p5NHVMMmR5WVhCb1kyOXVibVZqZEc5eUwwZHlZWEJvUTI5dWJtVmpkRzl5Snp0Y2JseHVhVzF3YjNKMElGTjVibU5vWlhKTllXNWhaMlZ5SUdaeWIyMGdKeTR1TDNONWJtTm9aWEl2VTNsdVkyaGxjazFoYm1GblpYSW5PMXh1YVcxd2IzSjBJRkoxYm5ScGJXVkRiM0psUTNSNElHWnliMjBnSnk0dUwzQnZiR2xqZVM5amIyNTBaWGgwTDFKMWJuUnBiV1ZEYjNKbFEzUjRKenRjYmx4dWFXMXdiM0owSUh0a2FYWnBaR1ZWVWt3c0lHVnRjSFI1VDJKcVpXTjBmU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hHNWNiaThxS2x4dUlDb2dVblZ1ZEdsdFpTQlZjMlZ5SUVGblpXNTBJRWx1ZEdWeVptRmpaU0IzYVd4c0lIQnliMk5sYzNNZ1lXeHNJSFJvWlNCa1pYQmxibVJsWTJsbGN5QnZaaUIwYUdVZ1kyOXlaU0J5ZFc1MGFXMWxPMXh1SUNvZ1FHRjFkR2h2Y2lCV2FYUnZjaUJUYVd4MllTQmJkbWwwYjNJdGRDMXphV3gyWVVCMFpXeGxZMjl0TG5CMFhWeHVJQ29nUUhabGNuTnBiMjRnTUM0MExqQmNiaUFxWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM0oxYm5ScGJXVkdZV04wYjNKNWZTQnlkVzUwYVcxbFJtRmpkRzl5ZVNBdElGTndaV05wWm1saklHbHRjR3hsYldWdWRHRjBhVzl1SUdadmNpQmhiR3dnWlc1MmFYSnZibTFsYm5Sek8xeHVJQ29nUUhCeWIzQmxjblI1SUh0U2RXNTBhVzFsUTJGMFlXeHZaM1ZsZlNCeWRXNTBhVzFsUTJGMFlXeHZaM1ZsSUMwZ1EyRjBZV3h2WjNWbElHOW1JR052YlhCdmJtVnVkSE1nWTJGdUlHSmxJR2x1YzNSaGJHeGxaRHRjYmlBcUlFQndjbTl3WlhKMGVTQjdjblZ1ZEdsdFpWVlNUSDBnY25WdWRHbHRaVlZTVENBdElGUm9hWE1nYVdSbGJuUnBabmtnZEdobElHTnZjbVVnY25WdWRHbHRaU3dnYzJodmRXeGtJR0psSUhWdWFYRjFaVHRjYmlBcUlFQndjbTl3WlhKMGVTQjdTV1JsYm5ScGRIbE5iMlIxYkdWOUlHbGtaVzUwYVhSNVRXOWtkV3hsSUMwZ1NXUmxiblJwZEhrZ1RXOWtkV3hsTzF4dUlDb2dRSEJ5YjNCbGNuUjVJSHRRYjJ4cFkzbEZibWRwYm1WOUlIQnZiR2xqZVVWdVoybHVaU0F0SUZCdmJHbGplU0JGYm1kcGJtVWdUVzlrZFd4bE8xeHVJQ29nUUhCeWIzQmxjblI1SUh0U1pXZHBjM1J5ZVgwZ2NtVm5hWE4wY25rZ0xTQlNaV2RwYzNSeWVTQk5iMlIxYkdVN1hHNGdLaUJBY0hKdmNHVnlkSGtnZTAxbGMzTmhaMlZDZFhOOUlHMWxjM05oWjJWQ2RYTWdMU0JOWlhOellXZGxJRUoxY3lCcGN5QjFjMlZrSUd4cGEyVWdZU0J5YjNWMFpYSWdkRzhnY21Wa2FYSmxZM1FnZEdobElHMWxjM05oWjJWeklHWnliMjBnYjI1bElHTnZiWEJ2Ym1WdWRDQjBieUJ2ZEdobGNpaHpLVnh1SUNvZ1FIQnliM0JsY25SNUlIdEhjbUZ3YUVOdmJtNWxZM1J2Y24wZ1ozSmhjR2hEYjI1dVpXTjBiM0lnTFNCSGNtRndhQ0JEYjI1dVpXTjBiM0lnYUdGdVpHeHBibWNnUjFWSlJDQmhibVFnWTI5dWRHRmpkSE5jYmlBcUwxeHVZMnhoYzNNZ1VuVnVkR2x0WlZWQklIdGNibHh1SUNBdktpcGNiaUFnSUNvZ1EzSmxZWFJsSUdFZ2JtVjNJR2x1YzNSaGJtTmxJRzltSUZKMWJuUnBiV1VnVlhObGNpQkJaMlZ1ZEZ4dUlDQWdLaUJBY0dGeVlXMGdlM0oxYm5ScGJXVkdZV04wYjNKNWZTQnlkVzUwYVcxbFJtRmpkRzl5ZVNBdElGTndaV05wWm1saklHbHRjR3hsYldWdWRHRjBhVzl1SUdadmNpQjBhR1VnWlc1MmFYSnZibTFsYm5RZ2QyaGxjbVVnZEdobElHTnZjbVVnY25WdWRHbHRaU0IzYVd4c0lISjFianRjYmlBZ0lDb2dRSEJoY21GdElIdGtiMjFoYVc1OUlHUnZiV0ZwYmxWU1RDQXRJSE53WldOcFpua2dkR2hsSUdSdmJXRnBiaUJpWVhObElHWnZjaUIwYUdVZ2NuVnVkR2x0WlR0Y2JpQWdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLSEoxYm5ScGJXVkdZV04wYjNKNUxDQmtiMjFoYVc0cElIdGNibHh1SUNBZ0lHbG1JQ2doY25WdWRHbHRaVVpoWTNSdmNua3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WR2hsSUhOaGJtUmliM2dnWm1GamRHOXllU0JwY3lCaElHNWxaV1JsWkNCd1lYSmhiV1YwWlhJbktUdGNiaUFnSUNCcFppQW9JV1J2YldGcGJpa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFpiM1VnYm1WbFpDQjBhR1VnWkc5dFlXbHVJRzltSUhKMWJuUnBiV1VuS1R0Y2JseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NXlkVzUwYVcxbFJtRmpkRzl5ZVNBOUlISjFiblJwYldWR1lXTjBiM0o1TzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVZ1BTQnlkVzUwYVcxbFJtRmpkRzl5ZVM1amNtVmhkR1ZTZFc1MGFXMWxRMkYwWVd4dlozVmxLQ2s3WEc1Y2JpQWdJQ0F2THlCVVQwUlBPaUJ3YjNOMElHRnVaQ0J5WlhSMWNtNGdjbVZuYVhOMGNua3ZhSGx3WlhKMGVWSjFiblJwYldWSmJuTjBZVzVqWlNCMGJ5QmhibVFnWm5KdmJTQkNZV05yTFdWdVpDQlRaWEoyYVdObFhHNGdJQ0FnTHk4Z2RHaGxJSEpsYzNCdmJuTmxJR2x6SUd4cGEyVTZJSEoxYm5ScGJXVTZMeTl6Y0RFdk1USXpYRzVjYmlBZ0lDQnNaWFFnY25WdWRHbHRaVlZTVENBOUlDZHlkVzUwYVcxbE9pOHZKeUFySUdSdmJXRnBiaUFySUNjdkp5QXJJRTFoZEdndVpteHZiM0lvS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TURBd01Da2dLeUF4S1R0Y2JpQWdJQ0JmZEdocGN5NXlkVzUwYVcxbFZWSk1JRDBnY25WdWRHbHRaVlZTVER0Y2JpQWdJQ0JmZEdocGN5NWtiMjFoYVc0Z1BTQmtiMjFoYVc0N1hHNWNiaUFnSUNBdkx5QlVUMFJQT2lCamFHVmpheUJwWmlCeWRXNTBhVzFsSUdOaGRHRnNiMmQxWlNCdVpXVmtJSFJvWlNCeWRXNTBhVzFsVlZKTU8xeHVJQ0FnSUY5MGFHbHpMbkoxYm5ScGJXVkRZWFJoYkc5bmRXVXVjblZ1ZEdsdFpWVlNUQ0E5SUhKMWJuUnBiV1ZWVWt3N1hHNWNiaUFnSUNBdkx5Qkpibk4wWVc1MGFXRjBaU0IwYUdVZ2FXUmxiblJwZEhrZ1RXOWtkV3hsWEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhsTmIyUjFiR1VnUFNCdVpYY2dTV1JsYm5ScGRIbE5iMlIxYkdVb2NuVnVkR2x0WlZWU1RDazdYRzVjYmlBZ0lDQXZMeUJWYzJVZ2RHaGxJSE5oYm1SaWIzZ2dabUZqZEc5eWVTQjBieUJqY21WaGRHVWdZVzRnUVhCd1UyRnVaR0p2ZUR0Y2JpQWdJQ0F2THlCSmJpQjBhR1VnWm5WMGRYSmxJR05oYmlCaVpTQmtaV05wWkdWa0lHSjVJSEJ2YkdsamVVVnVaMmx1WlNCcFppQjNaU0J1WldWa1hHNGdJQ0FnTHk4Z1kzSmxZWFJsSUdFZ1FYQndVMkZ1WkdKdmVDQnZjaUJ1YjNRN1hHNGdJQ0FnYkdWMElHRndjRk5oYm1SaWIzZ2dQU0J5ZFc1MGFXMWxSbUZqZEc5eWVTNWpjbVZoZEdWQmNIQlRZVzVrWW05NEtDazdYRzVjYmlBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdVbVZuYVhOMGNua2dUVzlrZFd4bFhHNGdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNua2dQU0J1WlhjZ1VtVm5hWE4wY25rb2NuVnVkR2x0WlZWU1RDd2dZWEJ3VTJGdVpHSnZlQ3dnWDNSb2FYTXVhV1JsYm5ScGRIbE5iMlIxYkdVc0lGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VwTzF4dVhHNGdJQ0FnTHk4Z1NXNXpkR0Z1ZEdsaGRHVWdkR2hsSUUxbGMzTmhaMlVnUW5WelhHNGdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeUE5SUc1bGR5Qk5aWE56WVdkbFFuVnpLRjkwYUdsekxuSmxaMmx6ZEhKNUtUdGNibHh1SUNBZ0lDOHZJRWx1YzNSaGJuUnBZWFJsSUhSb1pTQlFiMnhwWTNrZ1JXNW5hVzVsWEc0Z0lDQWdYM1JvYVhNdWNHOXNhV041Ulc1bmFXNWxJRDBnYm1WM0lGQnZiR2xqZVVWdVoybHVaU2h1WlhjZ1VuVnVkR2x0WlVOdmNtVkRkSGdvWDNSb2FYTXVhV1JsYm5ScGRIbE5iMlIxYkdVc0lGOTBhR2x6TG5KbFoybHpkSEo1S1NrN1hHNWNiaUFnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CcGNHVnNhVzVsTG1oaGJtUnNaWEp6SUQwZ1cxeHVYRzRnSUNBZ0lDQXZMeUJRYjJ4cFkza2diV1Z6YzJGblpTQmhkWFJvYjNKcGMyVmNiaUFnSUNBZ0lHWjFibU4wYVc5dUtHTjBlQ2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV3YjJ4cFkzbEZibWRwYm1VdVlYVjBhRzl5YVhObEtHTjBlQzV0YzJjcExuUm9aVzRvWm5WdVkzUnBiMjRvWTJoaGJtZGxaRTFuY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR04wZUM1dGMyY2dQU0JqYUdGdVoyVmtUV2R6TzF4dUlDQWdJQ0FnSUNBZ0lHTjBlQzV1WlhoMEtDazdYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9jbVZoYzI5dUtUdGNiaUFnSUNBZ0lDQWdJQ0JqZEhndVptRnBiQ2h5WldGemIyNHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0JkTzF4dVhHNGdJQ0FnTHk4Z1FXUmtJSFJ2SUVGd2NDQlRZVzVrWW05NElIUm9aU0JzYVhOMFpXNWxjanRjYmlBZ0lDQmhjSEJUWVc1a1ltOTRMbUZrWkV4cGMzUmxibVZ5S0NjcUp5d2dablZ1WTNScGIyNG9iWE5uS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCU1pXZHBjM1JsY2lCdFpYTnpZV2RsUW5WeklHOXVJRkpsWjJsemRISjVYRzRnSUNBZ1gzUm9hWE11Y21WbmFYTjBjbmt1YldWemMyRm5aVUoxY3lBOUlGOTBhR2x6TG0xbGMzTmhaMlZDZFhNN1hHNWNiaUFnSUNBdkx5QlNaV2RwYzNSbGNpQnlaV2RwYzNSeWVTQnZiaUJKWkdWdWRHbDBlVTF2WkhWc1pWeHVJQ0FnSUY5MGFHbHpMbWxrWlc1MGFYUjVUVzlrZFd4bExuSmxaMmx6ZEhKNUlEMGdYM1JvYVhNdWNtVm5hWE4wY25rN1hHNWNiaUFnSUNCZmRHaHBjeTV5WldkcGMzUnllUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2R5ZFc1MGFXMWxPbXh2WVdSVGRIVmlKeXdnWm5WdVkzUnBiMjRvWkc5dFlXbHVWVkpNS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVzYjJGa1UzUjFZaWhrYjIxaGFXNVZVa3dwTG5Sb1pXNG9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkpsWjJsemRISjVMblJ5YVdkblpYSW9KM0oxYm5ScGJXVTZjM1IxWWt4dllXUmxaQ2NzSUdSdmJXRnBibFZTVENrN1hHNGdJQ0FnSUNCOUtTNWpZWFJqYUNobWRXNWpkR2x2YmloeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduUm1GcGJHVmtJSFJ2SUdSbGNHeHZlU0IwYUdVZ1VISnZkRzlqYjJ4VGRIVmlJR052YlhCdmJtVnVkQ0FuTENCeVpXRnpiMjRwTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lGOTBhR2x6TG5KbFoybHpkSEo1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKMWJuUnBiV1U2Ykc5aFpFbGtjRkJ5YjNoNUp5d2dablZ1WTNScGIyNG9aRzl0WVdsdVZWSk1LU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NXNiMkZrU1dSd1VISnZlSGtvWkc5dFlXbHVWVkpNS1M1MGFHVnVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV5WldkcGMzUnllUzUwY21sbloyVnlLQ2R5ZFc1MGFXMWxPbWxrY0ZCeWIzaDVURzloWkdWa0p5d2daRzl0WVdsdVZWSk1LVHRjYmlBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZEdZV2xzWldRZ2RHOGdaR1Z3Ykc5NUlIUm9aU0JKUkZBZ1VISnZlSGtnWTI5dGNHOXVaVzUwSUNjc0lISmxZWE52YmlrN1hHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdMeThnVlhObElITmhibVJpYjNnZ1ptRmpkRzl5ZVNCMGJ5QjFjMlVnYzNCbFkybG1hV01nYldWMGFHOWtjMXh1SUNBZ0lDOHZJR0Z1WkNCelpYUWdkR2hsSUcxbGMzTmhaMlVnWW5WeklIUnZJSFJvWlNCbVlXTjBiM0o1WEc0Z0lDQWdjblZ1ZEdsdFpVWmhZM1J2Y25rdWJXVnpjMkZuWlVKMWN5QTlJRjkwYUdsekxtMWxjM05oWjJWQ2RYTTdYRzVjYmlBZ0lDQXZMeUJKYm5OMFlXNWphV0YwWlNCMGFHVWdVM2x1WTJobGNrMWhibUZuWlhJN1hHNGdJQ0FnWDNSb2FYTXVjM2x1WTJobGNrMWhibUZuWlhJZ1BTQnVaWGNnVTNsdVkyaGxjazFoYm1GblpYSW9YM1JvYVhNdWNuVnVkR2x0WlZWU1RDd2dYM1JvYVhNdWJXVnpjMkZuWlVKMWN5d2dYM1JvYVhNdWNtVm5hWE4wY25rc0lGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1VwTzF4dVhHNGdJQ0FnTHk4Z1NXNXpkR0Z1ZEdsaGRHVWdkR2hsSUVkeVlYQm9JRU52Ym01bFkzUnZjbHh1SUNBZ0lDOHZJRjkwYUdsekxtZHlZWEJvUTI5dWJtVmpkRzl5SUQwZ2JtVjNJRWR5WVhCb1EyOXVibVZqZEc5eUtGOTBhR2x6TG5KMWJuUnBiV1ZWVWt3c0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNcE8xeHVYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJCWTJOdmJXOWtZWFJsSUdsdWRHVnliM0JsY21GaWFXeHBkSGtnYVc0Z1NESklJR0Z1WkNCd2NtOTBieUJ2YmlCMGFHVWdabXg1SUdadmNpQnVaWGRzZVNCa2FYTmpiM1psY21Wa0lHUmxkbWxqWlhNZ2FXNGdUVEpOWEc0Z0lDb2dRSEJoY21GdElDQjdRMkYwWVd4dlozVmxSR0YwWVU5aWFtVmpkQzVJZVhCbGNuUjVSR1Z6WTNKcGNIUnZjbjBnSUNCa1pYTmpjbWx3ZEc5eUlDQWdJR1JsYzJOeWFYQjBiM0pjYmlBZ0tpOWNiaUFnWkdselkyOTJaWEpJYVhCbGNuUjVLR1JsYzJOeWFYQjBiM0lwSUh0Y2JpQWdJQ0F2THlCQ2IyUjVMaTR1WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCU1pXZHBjM1JsY2lCSWVYQmxjblI1SUdSbGNHeHZlV1ZrSUdKNUlIUm9aU0JCY0hBZ2RHaGhkQ0JwY3lCd1lYTnpaV1FnWVhNZ2FXNXdkWFFnY0dGeVlXMWxkR1Z5TGlCVWJ5QmlaU0IxYzJWa0lIZG9aVzRnUVhCd0lHRnVaQ0JJZVhCbGNuUnBaWE1nWVhKbElHWnliMjBnZEdobElITmhiV1VnWkc5dFlXbHVJRzkwYUdWeWQybHpaU0IwYUdVZ1VuVnVkR2x0WlZWQklIZHBiR3dnY21GcGMyVWdZVzRnWlhoalpYQjBhVzl1SUdGdVpDQjBhR1VnUVhCd0lHaGhjeUIwYnlCMWMyVWdkR2hsSUd4dllXUkllWEJsY25SNUtDNHVLU0JtZFc1amRHbHZiaTVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFBZbXBsWTNSOUlFOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb2VYQmxjblI1U1c1emRHRnVZMlZjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFZVa3d1U0hsd1pYSjBlVU5oZEdGc2IyZDFaVlZTVEgwZ0lDQWdJQ0FnSUNCa1pYTmpjbWx3ZEc5eUlDQWdJQ0FnWkdWelkzSnBjSFJ2Y2x4dUlDQXFMMXh1SUNCeVpXZHBjM1JsY2toNWNHVnlkSGtvYUhsd1pYSjBlVWx1YzNSaGJtTmxMQ0JrWlhOamNtbHdkRzl5S1NCN1hHNGdJQ0FnTHk4Z1FtOWtlUzR1TGx4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JHVndiRzk1SUVoNWNHVnlkSGtnWm5KdmJTQkRZWFJoYkc5bmRXVWdWVkpNWEc0Z0lDb2dRSEJoY21GdElDQjdWVkpNTGtoNWNHVnlkSGxEWVhSaGJHOW5kV1ZWVWt4OUlDQWdJR2g1Y0dWeWRIa2dhSGx3WlhKMGVVUmxjMk55YVhCMGIzSWdkWEpzTzF4dUlDQXFMMXh1SUNCc2IyRmtTSGx3WlhKMGVTaG9lWEJsY25SNVJHVnpZM0pwY0hSdmNsVlNUQ2tnZTF4dVhHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtSUNnaGFIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TSGx3WlhKMGVTQmtaWE5qY21sd2RHOXlJSFZ5YkNCd1lYSmhiV1YwWlhJZ2FYTWdibVZsWkdWa0p5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJR3hsZENCZmFIbHdaWEowZVZWU1REdGNiaUFnSUNBZ0lHeGxkQ0JmYUhsd1pYSjBlVk5oYm1SaWIzZzdYRzRnSUNBZ0lDQnNaWFFnWDJoNWNHVnlkSGxFWlhOamNtbHdkRzl5TzF4dUlDQWdJQ0FnYkdWMElGOW9lWEJsY25SNVUyOTFjbU5sVUdGamEyRm5aVHRjYmx4dUlDQWdJQ0FnYkdWMElHVnljbTl5VW1WaGMyOXVJRDBnWm5WdVkzUnBiMjRvY21WaGMyOXVLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9KMU52YldWMGFHbHVaeUJtWVdsc1pXUWdiMjRnZEdobElHUmxjR3h2ZVNCb2VYQmxjblI1T2lBbkxDQnlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDOHZJRWRsZENCSWVYQmxjblI1SUdSbGMyTnlhWEIwYjNKY2JpQWdJQ0FnSUM4dklGUlBSRTg2SUhSb1pTQnlaWEYxWlhOMElFMXZaSFZzWlNCemFHOTFiR1FnWW1VZ1kyaGhibWRsWkN4Y2JpQWdJQ0FnSUM4dklHSmxZMkYxYzJVZ1lYUWdkR2hwY3lCdGIyMWxiblFnYVhRZ2FYTWdhVzVqYjIxd1lYUnBZbXhsSUhkcGRHZ2dibTlrWldwek8xeHVJQ0FnSUNBZ0x5OGdVSEp2WW1GaWJIa2dkMlVnYm1WbFpDQjBieUJ3WVhOeklHRWdabUZqZEc5eWVTQnNhV3RsSUhkbElHUnZJR1p2Y2lCellXNWtZbTk0WlhNN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KeTB0TFMwdExTMHRMUzB0TFMwdExTMHRMU0JJZVhCbGNuUjVJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTY3BPMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkSFpYUWdhSGx3WlhKMGVTQmtaWE5qY21sd2RHOXlJR1p2Y2lBNkp5d2dhSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dwTzF4dUlDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVdVoyVjBTSGx3WlhKMGVVUmxjMk55YVhCMGIzSW9hSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dwTG5Sb1pXNG9ablZ1WTNScGIyNG9hSGx3WlhKMGVVUmxjMk55YVhCMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1lYUWdkR2hwY3lCd2IybHVkQ3dnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnWENKemRHVndJRElnWVc1a0lETmNJaUJoY3lCemFHOTNiaUJwYmlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxb2VYQmxjblI1TG0xa1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTVRvZ2NtVjBkWEp1SUdoNWNHVnlkSGtnWkdWelkzSnBjSFJ2Y2ljc0lHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCb2VYQmxjblI1SUdOdmJuUmhhVzV6SUhSb1pTQm1kV3hzSUhCaGRHZ2diMllnZEdobElHTmhkR0ZzYjJkMVpTQlZVa3dzSUdVdVp5NWNiaUFnSUNBZ0lDQWdMeThnWTJGMFlXeHZaM1ZsTG5KbGRHaHBibXN1WlhVdkxuZGxiR3d0YTI1dmQyNHZMaTR1TGk0dUxpNHVMbHh1SUNBZ0lDQWdJQ0JmYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0lnUFNCb2VYQmxjblI1UkdWelkzSnBjSFJ2Y2p0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnYzI5MWNtTmxVR0ZqYTJGblpWVlNUQ0E5SUdoNWNHVnlkSGxFWlhOamNtbHdkRzl5TG5OdmRYSmpaVkJoWTJ0aFoyVlZVa3c3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSE52ZFhKalpWQmhZMnRoWjJWVlVrd2dQVDA5SUNjdmMyOTFjbU5sVUdGamEyRm5aU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FIbHdaWEowZVVSbGMyTnlhWEIwYjNJdWMyOTFjbU5sVUdGamEyRm5aVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRWRsZENCMGFHVWdhSGx3WlhKMGVTQnpiM1Z5WTJVZ1kyOWtaVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdWNuVnVkR2x0WlVOaGRHRnNiMmQxWlM1blpYUlRiM1Z5WTJWUVlXTnJZV2RsUm5KdmJWVlNUQ2h6YjNWeVkyVlFZV05yWVdkbFZWSk1LVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHpiM1Z5WTJWUVlXTnJZV2RsS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTWpvZ2NtVjBkWEp1SUdoNWNHVnlkSGtnYzI5MWNtTmxJR052WkdVbktUdGNibHh1SUNBZ0lDQWdJQ0F2THlCaGRDQjBhR2x6SUhCdmFXNTBMQ0IzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0JjSW5OMFpYQWdOQ0JoYm1RZ05Wd2lJR0Z6SUhOb2IzZHVJR2x1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFdoNWNHVnlkSGt1YldSY2JseHVJQ0FnSUNBZ0lDQmZhSGx3WlhKMGVWTnZkWEpqWlZCaFkydGhaMlVnUFNCemIzVnlZMlZRWVdOcllXZGxPMXh1WEc0Z0lDQWdJQ0FnSUM4dlhHNGdJQ0FnSUNBZ0lDOHZJSE4wWlhCeklEWWdMUzBnT1NCaGNtVWdjMnRwY0hCbFpDNWNiaUFnSUNBZ0lDQWdMeThnVkU5RVR6b2diMjRnY21Wc1pXRnpaU0J2WmlCamIzSmxJREF1TWp0Y2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1VISnZiV2x6WlNCMGJ5QmphR1ZqYXlCMGFHVWdjRzlzYVdONUlHVnVaMmx1WlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRzF2WTJzdGRYQWdZMjlrWlR0Y2JpQWdJQ0FnSUNBZ0x5OGdkR1Z0Y0c5eVlYSjVJR052WkdVc0lHOXViSGxjYmlBZ0lDQWdJQ0FnYkdWMElIQnZiR2xqZVNBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCdmJHbGplVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHdiMnhwWTNsU1pYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2N6T2lCeVpYUjFjbTRnY0c5c2FXTjVJR1Z1WjJsdVpTQnlaWE4xYkhRNklDY3NJSEJ2YkdsamVWSmxjM1ZzZENrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQTJJSFJ2SURrZ2IyWWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RhSGx3WlhKMGVTNXRaQ0J5YVdkb2RDQnViM2N1WEc0Z0lDQWdJQ0FnSUM4dlhHNGdJQ0FnSUNBZ0lDOHZJRk4wWlhCeklEWWdMUzBnT1Z4dUlDQWdJQ0FnSUNBdkx5QkJjeUJoSUhKbGMzVnNkQ0J2WmlCMGFHVWdjMmx3Y0dWa0lITjBaWEJ6TENCM1pTQnJibTkzSUdGMElIUm9hWE1nY0c5cGJuUWdhV1lnZDJVZ1pYaGxZM1YwWlZ4dUlDQWdJQ0FnSUNBdkx5QnBibE5oYldWVFlXNWtZbTk0SUc5eUlHNXZkQzVjYmlBZ0lDQWdJQ0FnTHk5Y2JseHVJQ0FnSUNBZ0lDQXZMeUJHYjNJZ2RHVnpkR2x1Wnl3Z2FuVnpkQ0JoYzNOMWJXVWdkMlVnWlhobFkzVjBaU0JwYmlCellXMWxJRk5oYm1SaWIzZ3VYRzRnSUNBZ0lDQWdJR3hsZENCcGJsTmhiV1ZUWVc1a1ltOTRJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdiR1YwSUhOaGJtUmliM2c3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1VTJGdFpWTmhibVJpYjNncElIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9hWE1nWkc5dUozUWdibVZsWkNCaVpTQmhJRkJ5YjIxcGMyVTdYRzRnSUNBZ0lDQWdJQ0FnYzJGdVpHSnZlQ0E5SUY5MGFHbHpMbkpsWjJsemRISjVMbWRsZEVGd2NGTmhibVJpYjNnb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTVRFZ2FHVnlaUzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvYUhsd1pYSjBlVVJsYzJOeWFYQjBiM0pWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUdkbGRGTmhibVJpYjNnc0lIUm9hWE1nZDJsc2JDQnlaWFIxY200Z1lTQndjbTl0YVhObE8xeHVJQ0FnSUNBZ0lDQWdJSE5oYm1SaWIzZ2dQU0JmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJUWVc1a1ltOTRLR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QjBhR2x6SUhkcGJHd2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRJRzl5SUc5dVpTQndjbTl0YVhObElIUnZJR2RsZEZOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WVc1a1ltOTRPMXh1SUNBZ0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHpZVzVrWW05NEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk5Eb2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRKeXdnYzJGdVpHSnZlQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRJR2x1WkdWd1pXNTBaV3g1SUdsbUlHbDBJSEoxYm01cGJtY2dhVzRnZEdobElITmhiV1VnYzJGdVpHSnZlQ0J2Y2lCdWIzUmNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXhOQ0JvWlhKbExseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NjMExqRTZJRlJ5ZVNCMGJ5QnlaV2RwYzNSbGNpQmhJRzVsZHlCellXNWtZbTk0SUNjc0lISmxZWE52YmlrN1hHNWNiaUFnSUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnZEdobElITmhibVJpYjNnZ2FYTWdjbVZuYVhOMFpXUWdabTl5SUhSb2FYTWdhSGx3WlhKMGVTQmtaWE5qY21sd2RHOXlJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ0x5OGdUV0ZyWlNCVGRHVndjeUI0ZUhnZ0xTMHRJSGg0ZUZ4dUlDQWdJQ0FnSUNBdkx5Qkpibk4wWVc1MGFXRjBaU0IwYUdVZ1UyRnVaR0p2ZUZ4dUlDQWdJQ0FnSUNCc1pYUWdjMkZ1WkdKdmVDQTlJRjkwYUdsekxuSjFiblJwYldWR1lXTjBiM0o1TG1OeVpXRjBaVk5oYm1SaWIzZ29LVHRjYmx4dUlDQWdJQ0FnSUNCellXNWtZbTk0TG1Ga1pFeHBjM1JsYm1WeUtDY3FKeXdnWm5WdVkzUnBiMjRvYlhObktTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3BPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdWRHaGxiaWhtZFc1amRHbHZiaWh6WVc1a1ltOTRLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25OVG9nY21WMGRYSnVJSE5oYm1SaWIzZ2dZVzVrSUhKbFoybHpkR1Z5SnlrN1hHNWNiaUFnSUNBZ0lDQWdYMmg1Y0dWeWRIbFRZVzVrWW05NElEMGdjMkZ1WkdKdmVEdGNibHh1SUNBZ0lDQWdJQ0F2THlCU1pXZHBjM1JsY2lCb2VYQmxjblI1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXlaV2RwYzNSeWVTNXlaV2RwYzNSbGNraDVjR1Z5ZEhrb2MyRnVaR0p2ZUN3Z2FIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3NJRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9hSGx3WlhKMGVWVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9Kelk2SUVoNWNHVnlkSGtnZFhKc0xDQmhablJsY2lCeVpXZHBjM1JsY2lCb2VYQmxjblI1Snl3Z2FIbHdaWEowZVZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ2MzUmxjQ0F4TmlCdlppQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtJSEpwWjJoMElHNXZkeTVjYmlBZ0lDQWdJQ0FnWDJoNWNHVnlkSGxWVWt3Z1BTQm9lWEJsY25SNVZWSk1PMXh1WEc0Z0lDQWdJQ0FnSUM4dklFVjRkR1Z1WkNCdmNtbG5hVzVoYkNCb2VYQmxjblI1SUdOdmJtWnBaM1Z5WVhScGIyNDdYRzRnSUNBZ0lDQWdJR3hsZENCamIyNW1hV2QxY21GMGFXOXVJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWlcxd2RIbFBZbXBsWTNRb1gyaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlYUnBiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI0Z1BTQlBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQktVMDlPTG5CaGNuTmxLRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUYwYVc5dUtTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpQTlJRjlvZVhCbGNuUjVSR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUYwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVMbkoxYm5ScGJXVlZVa3dnUFNCZmRHaHBjeTV5ZFc1MGFXMWxWVkpNTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRmRsSUhkcGJHd2daR1Z3Ykc5NUlIUm9aU0JqYjIxd2IyNWxiblFnTFNCemRHVndJREUzSUc5bUlHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxXaDVjR1Z5ZEhrdWJXUWdjbWxuYUhRZ2JtOTNMbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMmg1Y0dWeWRIbFRZVzVrWW05NExtUmxjR3h2ZVVOdmJYQnZibVZ1ZENoZmFIbHdaWEowZVZOdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaU3dnWDJoNWNHVnlkSGxWVWt3c0lHTnZibVpwWjNWeVlYUnBiMjRwTzF4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR1JsY0d4dmVVTnZiWEJ2Ym1WdWRGTjBZWFIxY3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpjNklFUmxjR3h2ZVNCamIyMXdiMjVsYm5RZ2MzUmhkSFZ6SUdadmNpQm9lWEJsY25SNU9pQW5MQ0JrWlhCc2IzbERiMjF3YjI1bGJuUlRkR0YwZFhNcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdNVGtnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0YUhsd1pYSjBlUzV0WkNCeWFXZG9kQ0J1YjNjdVhHNWNiaUFnSUNBZ0lDQWdMeThnUVdSa0lIUm9aU0J0WlhOellXZGxJR0oxY3lCc2FYTjBaVzVsY2lCMGJ5QjBhR1VnWVhCd1UyRnVaR0p2ZUNCdmNpQm9lWEJsY25SVFlXNWtZbTk0TzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOW9lWEJsY25SNVZWSk1MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDQWdJQ0JmYUhsd1pYSjBlVk5oYm1SaWIzZ3VjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBeU1DQnZaaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzFvZVhCbGNuUjVMbTFrSUhKcFoyaDBJRzV2ZHk1Y2JpQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIa2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NuVnVkR2x0WlVoNWNHVnlkSGxWVWt3NklGOW9lWEJsY25SNVZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nWkdWd2JHOTVRMjl0Y0c5dVpXNTBVM1JoZEhWelhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hvZVhCbGNuUjVLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURJeElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxXaDVjR1Z5ZEhrdWJXUWdjbWxuYUhRZ2JtOTNMbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdElFVk9SQ0F0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMG5LVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1WTJGMFkyZ29aWEp5YjNKU1pXRnpiMjRwTzF4dVhHNGdJQ0FnZlNrN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRVJsY0d4dmVTQlRkSFZpSUdaeWIyMGdRMkYwWVd4dlozVmxJRlZTVENCdmNpQmtiMjFoYVc0Z2RYSnNYRzRnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1MbFZTVEgwZ0lDQWdJR1J2YldGcGJpQWdJQ0FnSUNBZ0lDQmtiMjFoYVc1Y2JpQWdLaTljYmlBZ2JHOWhaRk4wZFdJb2NISnZkRzl6ZEhWaVZWSk1LU0I3WEc1Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdhV1lnS0NGd2NtOTBiM04wZFdKVlVrd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25aRzl0WVdsdUlIQmhjbUZ0WlhSbGNpQnBjeUJ1WldWa1pXUW5LVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaHdjbTkwYjNOMGRXSlZVa3dwTG1SdmJXRnBianRjYmx4dUlDQWdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIdGNiaUFnSUNBZ0lDQWdaRzl0WVdsdUlEMGdjSEp2ZEc5emRIVmlWVkpNTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdYM04wZFdKVFlXNWtZbTk0TzF4dUlDQWdJQ0FnYkdWMElGOXpkSFZpUkdWelkzSnBjSFJ2Y2p0Y2JpQWdJQ0FnSUd4bGRDQmZjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNURHRjYmlBZ0lDQWdJR3hsZENCZmMzUjFZbE52ZFhKalpWQmhZMnRoWjJVN1hHNWNiaUFnSUNBZ0lHeGxkQ0JsY25KdmNsSmxZWE52YmlBOUlHWjFibU4wYVc5dUtISmxZWE52YmlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVGIyMWxkR2hwYm1jZ1ptRnBiR1ZrSUc5dUlIUm9aU0JrWlhCc2Iza2diMllnY0hKdmRHOWpiMnh6ZEhWaU9pQW5MQ0J5WldGemIyNHBPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9jbVZoYzI5dUtUdGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQzh2SUVScGMyTnZkbVZ5SUZCeWIzUnZZMjlzSUZOMGRXSmNiaUFnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNCUWNtOTBiMU4wZFdJZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhGeHVKeWs3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0owUnBjMk52ZG1WeUlHOXlJRU55WldGMFpTQmhJRzVsZHlCUWNtOTBiMU4wZFdJZ1ptOXlJR1J2YldGcGJqb2dKeXdnWkc5dFlXbHVLVHRjYmlBZ0lDQWdJRjkwYUdsekxuSmxaMmx6ZEhKNUxtUnBjMk52ZG1WeVVISnZkRzl6ZEhWaUtHUnZiV0ZwYmlrdWRHaGxiaWhtZFc1amRHbHZiaWh5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRWx6SUhKbFoybHpkR1ZrUDF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KekV1SUZCeWIzUnZJRk4wZFdJZ1JHbHpZMjkyWlhKbFpEb2dKeXdnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXlJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklFTm9aV05ySUdsbUlIUm9aU0J6ZEdGMGRYTWdhWE1nYzJGMlpXUWdhVzRnZEdobElITjBZWFIxY3lCdlppQnpZVzVrWW05NE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYzNSMVlpQTlJSHRjYmlBZ0lDQWdJQ0FnSUNCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTU9pQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nSjJSbGNHeHZlV1ZrSjF4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jM1IxWWlrN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNCRlRrUWdMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRYRnh1SnlrN1hHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0xtTmhkR05vS0daMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dVhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUc1dmRDQnlaV2RwYzNSbFpEOWNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjeExpQlFjbTkwYnlCVGRIVmlJRzV2ZENCbWIzVnVaRG9uTENCeVpXRnpiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ015Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBdkx5QjNaU0J1WldWa0lIUnZJR2RsZENCUWNtOTBiMU4wZFdJZ1pHVnpZM0pwY0hSdmNpQnpkR1Z3SURRZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYRzRnSUNBZ0lDQWdJRjkwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVdVoyVjBVM1IxWWtSbGMyTnlhWEIwYjNJb2NISnZkRzl6ZEhWaVZWSk1LVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHpkSFZpUkdWelkzSnBjSFJ2Y2lrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDY3lMaUJ5WlhSMWNtNGdkR2hsSUZCeWIzUnZVM1IxWWlCa1pYTmpjbWx3ZEc5eU9pY3NJSE4wZFdKRVpYTmpjbWx3ZEc5eUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTlNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNiaUFnSUNBZ0lDQWdJQ0JmYzNSMVlrUmxjMk55YVhCMGIzSWdQU0J6ZEhWaVJHVnpZM0pwY0hSdmNqdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpiM1Z5WTJWUVlXTnJZV2RsVlZKTUlEMGdjM1IxWWtSbGMyTnlhWEIwYjNJdWMyOTFjbU5sVUdGamEyRm5aVlZTVER0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemIzVnlZMlZRWVdOcllXZGxWVkpNSUQwOVBTQW5MM052ZFhKalpWQmhZMnRoWjJVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSMVlrUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0J1WldWa0lIUnZJR2RsZENCUWNtOTBiMU4wZFdJZ1UyOTFjbU5sSUdOdlpHVWdabkp2YlNCa1pYTmpjbWx3ZEc5eUlDMGdjM1JsY0NBMklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXlkVzUwYVcxbFEyRjBZV3h2WjNWbExtZGxkRk52ZFhKalpWQmhZMnRoWjJWR2NtOXRWVkpNS0hOdmRYSmpaVkJoWTJ0aFoyVlZVa3dwTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1pYSnliM0pTWldGemIyNHBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtITjBkV0pUYjNWeVkyVlFZV05yWVdkbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDY3pMaUJ5WlhSMWNtNGdkR2hsSUZCeWIzUnZVM1IxWWlCVGIzVnlZMlVnUTI5a1pUb2dKeXdnYzNSMVlsTnZkWEpqWlZCaFkydGhaMlVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQTNJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dVhHNGdJQ0FnSUNBZ0lDQWdYM04wZFdKVGIzVnlZMlZRWVdOcllXZGxJRDBnYzNSMVlsTnZkWEpqWlZCaFkydGhaMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQkRhR1ZqYXlCdmJpQlFSVkFnS0hCdmJHbGplU0JGYm1kcGJtVXBJR2xtSUhkbElHNWxaV1FnZEdobElITmhibVJpYjNnZ1lXNWtJR05vWldOcklHbG1JSFJvWlNCVFlXNWtZbTk0SUVaaFkzUnZjbmtnYUdGMlpTQjBhR1VnWTI5dWRHVjRkQ0J6WVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQndiMnhwWTNrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2IyeHBZM2s3WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hCdmJHbGplU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYjNJZ2IyNWxJSEJ5YjIxcGMyVWdkRzhnWjJWMFUyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11Y21WbmFYTjBjbmt1WjJWMFUyRnVaR0p2ZUNoa2IyMWhhVzRwTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2YmloemRIVmlVMkZ1WkdKdmVDa2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2MwTGlCcFppQjBhR1VnYzJGdVpHSnZlQ0JwY3lCeVpXZHBjM1JsY21Wa0lIUm9aVzRnY21WMGRYSnVJSFJvWlNCellXNWtZbTk0SUNjc0lITjBkV0pUWVc1a1ltOTRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ2VIaDRJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dVhHNGdJQ0FnSUNBZ0lDQWdYM04wZFdKVFlXNWtZbTk0SUQwZ2MzUjFZbE5oYm1SaWIzZzdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSE4wZFdKVFlXNWtZbTk0TzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjMUxpQlRZVzVrWW05NElIZGhjeUJ1YjNRZ1ptOTFibVFzSUdOeVpXRjBhVzVuSUdFZ2JtVjNJRzl1WlNBbkxDQnlaV0Z6YjI0cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kyaGxZMnNnYVdZZ2RHaGxJSE5oYm1SaWIzZ2dhWE1nY21WbmFYTjBaV1FnWm05eUlIUm9hWE1nYzNSMVlpQmtaWE5qY21sd2RHOXlJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJOWVd0bElGTjBaWEJ6SUhoNGVDQXRMUzBnZUhoNFhHNGdJQ0FnSUNBZ0lDQWdMeThnU1c1emRHRnVkR2xoZEdVZ2RHaGxJRk5oYm1SaWIzaGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MyRnVaR0p2ZUNBOUlGOTBhR2x6TG5KMWJuUnBiV1ZHWVdOMGIzSjVMbU55WldGMFpWTmhibVJpYjNnb0tUdGNiaUFnSUNBZ0lDQWdJQ0J6WVc1a1ltOTRMbUZrWkV4cGMzUmxibVZ5S0NjcUp5d2dablZ1WTNScGIyNG9iWE5uS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXRaWE56WVdkbFFuVnpMbkJ2YzNSTlpYTnpZV2RsS0cxelp5azdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMkZ1WkdKdmVEdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jMkZ1WkdKdmVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25OaTRnY21WMGRYSnVJSFJvWlNCellXNWtZbTk0SUdsdWMzUmhibU5sSUdGdVpDQnlaV2RwYzNSbGNpY3NJSE5oYm1SaWIzZ3NJQ2QwYnlCa2IyMWhhVzRnSnl3Z1pHOXRZV2x1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJRjl6ZEhWaVUyRnVaR0p2ZUNBOUlITmhibVJpYjNnN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUhKbFoybHpkR1Z5SUhOMGRXSWdiMjRnY21WbmFYTjBjbmtnTFNCemRHVndJSGg0ZUNCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdWNtVm5hWE4wY25rdWNtVm5hWE4wWlhKVGRIVmlLRjl6ZEhWaVUyRnVaR0p2ZUN3Z1pHOXRZV2x1S1R0Y2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDa2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2MzTGlCeVpYUjFjbTRnZEdobElISjFiblJwYldVZ2NISnZkRzl6ZEhWaUlIVnliRG9nSnl3Z2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lGOXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JRDBnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVER0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUVWNGRHVnVaQ0J2Y21sbmFXNWhiQ0JvZVhCbGNuUjVJR052Ym1acFozVnlZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdOdmJtWnBaM1Z5WVhScGIyNGdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWdGNIUjVUMkpxWldOMEtGOXpkSFZpUkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GMGFXOXVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJpQTlJRTlpYW1WamRDNWhjM05wWjI0b2UzMHNJRXBUVDA0dWNHRnljMlVvWDNOMGRXSkVaWE5qY21sd2RHOXlMbU52Ym1acFozVnlZWFJwYjI0cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZiaUE5SUY5emRIVmlSR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUYwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNHVjblZ1ZEdsdFpWVlNUQ0E5SUY5MGFHbHpMbkoxYm5ScGJXVlZVa3c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJFWlhCc2Iza2dRMjl0Y0c5dVpXNTBJSE4wWlhBZ2VIaDRYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjl6ZEhWaVUyRnVaR0p2ZUM1a1pYQnNiM2xEYjIxd2IyNWxiblFvWDNOMGRXSlRiM1Z5WTJWUVlXTnJZV2RsTG5OdmRYSmpaVU52WkdVc0lISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd3NJR052Ym1acFozVnlZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaGtaWEJzYjNsRGIyMXdiMjVsYm5SVGRHRjBkWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpnNklISmxkSFZ5YmlCa1pYQnNiM2tnWTI5dGNHOXVaVzUwSUdadmNpQnpZVzVrWW05NElITjBZWFIxY3pvZ0p5d2daR1Z3Ykc5NVEyOXRjRzl1Wlc1MFUzUmhkSFZ6S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1FXUmtJSFJvWlNCdFpYTnpZV2RsSUdKMWN5QnNhWE4wWlc1bGNseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDNKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3c0lHWjFibU4wYVc5dUtHMXpaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM04wZFdKVFlXNWtZbTk0TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRXh2WVdRZ1UzUjFZaUJtZFc1amRHbHZiaUJ5WlhOdmJIWmxaQ0IzYVhSb0lITjFZMk5sYzNNN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhOMGRXSWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1PaUJmY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSMWN6b2daR1Z3Ykc5NVEyOXRjRzl1Wlc1MFUzUmhkSFZ6WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYzNSMVlpazdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDY3RMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRJRVZPUkNBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY1hHNG5LVHRjYmx4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1pYSnliM0pTWldGemIyNHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJFWlhCc2Iza2dVM1IxWWlCbWNtOXRJRU5oZEdGc2IyZDFaU0JWVWt3Z2IzSWdaRzl0WVdsdUlIVnliRnh1SUNBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlDQWdJQ0JrYjIxaGFXNGdJQ0FnSUNBZ0lDQWdaRzl0WVdsdVhHNGdJQ292WEc0Z0lHeHZZV1JKWkhCUWNtOTRlU2hwWkhCUWNtOTRlVlZTVENrZ2UxeHVYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdsbUlDZ2hhV1J3VUhKdmVIbFZVa3dwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVkdobElFbEVVQ0JRY205NGVTQlZVa3dnYVhNZ1lTQnVaV1ZrWldRZ2NHRnlZVzFsZEdWeUxDQmpiM1ZzWkNCaVpTQmhJRVJQVFVGSlRpQnZjaUJoSUZWU1RDY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JzWlhRZ1pHOXRZV2x1SUQwZ1pHbDJhV1JsVlZKTUtHbGtjRkJ5YjNoNVZWSk1LUzVrYjIxaGFXNDdYRzVjYmlBZ0lDQWdJR2xtSUNnaFpHOXRZV2x1S1NCN1hHNGdJQ0FnSUNBZ0lHUnZiV0ZwYmlBOUlHbGtjRkJ5YjNoNVZWSk1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ1gzQnliM2g1VTJGdVpHSnZlRHRjYmlBZ0lDQWdJR3hsZENCZmNISnZlSGxFWlhOamNtbHdkRzl5TzF4dUlDQWdJQ0FnYkdWMElGOXlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrdzdYRzRnSUNBZ0lDQnNaWFFnWDNCeWIzaDVVMjkxY21ObFVHRmphMkZuWlR0Y2JseHVJQ0FnSUNBZ2JHVjBJR1Z5Y205eVVtVmhjMjl1SUQwZ1puVnVZM1JwYjI0b2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjFOdmJXVjBhR2x1WnlCbVlXbHNaV1FnYjI0Z2RHaGxJR1JsY0d4dmVTQnZaaUJKWkhCUWNtOTRlVG9nSnl3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBdkx5QkVhWE5qYjNabGNpQkpSRkJRY205NGVWeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2N0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SUVsRVVDQlFjbTk0ZVNCRVpYQnNiM2tnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0WEZ4dUp5azdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjBScGMyTnZkbVZ5SUc5eUlFTnlaV0YwWlNCaElHNWxkeUJKWkhCUWNtOTRlU0JtYjNJZ1pHOXRZV2x1TDFWU1REb2dKeXdnWkc5dFlXbHVLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1eVpXZHBjM1J5ZVM1a2FYTmpiM1psY2tsa2NGQnliM2g1S0dSdmJXRnBiaWt1ZEdobGJpaG1kVzVqZEdsdmJpaHlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrd3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NYTWdjbVZuYVhOMFpXUS9YRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk1TNGdTVVJRVUhKdmVIa2dSR2x6WTI5MlpYSmxaRG9nSnl3Z2NuVnVkR2x0WlVsa2NGQnliM2g1VlZKTUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJRElnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdMeThnVkU5RVR6b2dRMmhsWTJzZ2FXWWdkR2hsSUhOMFlYUjFjeUJwY3lCellYWmxaQ0JwYmlCMGFHVWdjM1JoZEhWeklHOW1JSE5oYm1SaWIzZzdYRzRnSUNBZ0lDQWdJR3hsZENCcFpIQlFjbTk0ZVNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0J5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3c2SUhKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNNklDZGtaWEJzYjNsbFpDZGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0dsa2NGQnliM2g1S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2N0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SUVWT1JDQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNYRzRuS1R0Y2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBdVkyRjBZMmdvWm5WdVkzUnBiMjRvY21WaGMyOXVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdhWE1nYm05MElISmxaMmx6ZEdWa1AxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpFdUlFbGtjRkJ5YjNoNUlHNXZkQ0JtYjNWdVpEb25MQ0J5WldGemIyNHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTXlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNibHh1SUNBZ0lDQWdJQ0F2THlCM1pTQnVaV1ZrSUhSdklHZGxkQ0JRY205MGIxTjBkV0lnWkdWelkzSnBjSFJ2Y2lCemRHVndJRFFnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1V1WjJWMFNXUndVSEp2ZUhsRVpYTmpjbWx3ZEc5eUtHbGtjRkJ5YjNoNVZWSk1LVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHdjbTk0ZVVSbGMyTnlhWEIwYjNJcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25NaTRnVW1WMGRYSnVJSFJvWlNCSlJGQlFjbTk0ZVNCa1pYTmpjbWx3ZEc5eU9pY3NJSEJ5YjNoNVJHVnpZM0pwY0hSdmNpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURVZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYRzRnSUNBZ0lDQWdJQ0FnWDNCeWIzaDVSR1Z6WTNKcGNIUnZjaUE5SUhCeWIzaDVSR1Z6WTNKcGNIUnZjanRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J6YjNWeVkyVlFZV05yWVdkbFZWSk1JRDBnY0hKdmVIbEVaWE5qY21sd2RHOXlMbk52ZFhKalpWQmhZMnRoWjJWVlVrdzdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9jMjkxY21ObFVHRmphMkZuWlZWU1RDQTlQVDBnSnk5emIzVnlZMlZRWVdOcllXZGxKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnliM2g1UkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHNWxaV1FnZEc4Z1oyVjBJRkJ5YjNSdlUzUjFZaUJUYjNWeVkyVWdZMjlrWlNCbWNtOXRJR1JsYzJOeWFYQjBiM0lnTFNCemRHVndJRFlnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG5KMWJuUnBiV1ZEWVhSaGJHOW5kV1V1WjJWMFUyOTFjbU5sVUdGamEyRm5aVVp5YjIxVlVrd29jMjkxY21ObFVHRmphMkZuWlZWU1RDazdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM1allYUmphQ2hsY25KdmNsSmxZWE52YmlsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYzI5MWNtTmxVR0ZqYTJGblpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25NeTRnY21WMGRYSnVJSFJvWlNCSlJGQlFjbTk0ZVNCemIzVnlZMlVnY0dGamEyRm5aVG9nSnl3Z2MyOTFjbU5sVUdGamEyRm5aU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lEY2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc1Y2JpQWdJQ0FnSUNBZ0lDQmZjSEp2ZUhsVGIzVnlZMlZRWVdOcllXZGxJRDBnYzI5MWNtTmxVR0ZqYTJGblpUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklGUlBSRTg2SUVOb1pXTnJJRzl1SUZCRlVDQW9jRzlzYVdONUlFVnVaMmx1WlNrZ2FXWWdkMlVnYm1WbFpDQjBhR1VnYzJGdVpHSnZlQ0JoYm1RZ1kyaGxZMnNnYVdZZ2RHaGxJRk5oYm1SaWIzZ2dSbUZqZEc5eWVTQm9ZWFpsSUhSb1pTQmpiMjUwWlhoMElITmhibVJpYjNnN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhCdmJHbGplU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ2YkdsamVUdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jRzlzYVdONUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2RHaHBjeUIzYVd4c0lISmxkSFZ5YmlCMGFHVWdjMkZ1WkdKdmVDQnZjaUJ2Ym1VZ2NISnZiV2x6WlNCMGJ5Qm5aWFJUWVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJUWVc1a1ltOTRLR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLSEJ5YjNoNVUyRnVaR0p2ZUNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzBMaUJwWmlCMGFHVWdjMkZ1WkdKdmVDQnBjeUJ5WldkcGMzUmxjbVZrSUhSb1pXNGdjbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRKeXdnY0hKdmVIbFRZVzVrWW05NEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUY5d2NtOTRlVk5oYm1SaWIzZ2dQU0J3Y205NGVWTmhibVJpYjNnN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnliM2g1VTJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0xtTmhkR05vS0daMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTlM0Z1UyRnVaR0p2ZUNCM1lYTWdibTkwSUdadmRXNWtMQ0JqY21WaGRHbHVaeUJoSUc1bGR5QnZibVVuTENCeVpXRnpiMjRwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnWTJobFkyc2dhV1lnZEdobElITmhibVJpYjNnZ2FYTWdjbVZuYVhOMFpXUWdabTl5SUhSb2FYTWdjSEp2ZUhrZ1pHVnpZM0pwY0hSdmNpQjFjbXc3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdUV0ZyWlNCVGRHVndjeUI0ZUhnZ0xTMHRJSGg0ZUZ4dUlDQWdJQ0FnSUNBZ0lDOHZJRWx1YzNSaGJuUnBZWFJsSUhSb1pTQlRZVzVrWW05NFhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhOaGJtUmliM2dnUFNCZmRHaHBjeTV5ZFc1MGFXMWxSbUZqZEc5eWVTNWpjbVZoZEdWVFlXNWtZbTk0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdjMkZ1WkdKdmVDNWhaR1JNYVhOMFpXNWxjaWduS2ljc0lHWjFibU4wYVc5dUtHMXpaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0YzJjcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITmhibVJpYjNnN1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtITmhibVJpYjNncElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6WXVJSEpsZEhWeWJpQjBhR1VnYzJGdVpHSnZlQ0JwYm5OMFlXNWpaU0JoYm1RZ2NtVm5hWE4wWlhJbkxDQnpZVzVrWW05NExDQW5kRzhnWkc5dFlXbHVJQ2NzSUdSdmJXRnBiaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZjSEp2ZUhsVFlXNWtZbTk0SUQwZ2MyRnVaR0p2ZUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHNWxaV1FnY21WbmFYTjBaWElnYzNSMVlpQnZiaUJ5WldkcGMzUnllU0F0SUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1eVpXZHBjM1J5ZVM1eVpXZHBjM1JsY2tsa2NGQnliM2g1S0hOaGJtUmliM2dzSUdSdmJXRnBiaWs3WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0hKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzNMaUJTWlhSMWNtNGdkR2hsSUhKMWJuUnBiV1VnU1dSd0lGQnliM2g1SUZWU1REb2dKeXdnY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnWDNKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENBOUlISjFiblJwYldWSlpIQlFjbTk0ZVZWU1REdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklFVjRkR1Z1WkNCdmNtbG5hVzVoYkNCb2VYQmxjblI1SUdOdmJtWnBaM1Z5WVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHTnZibVpwWjNWeVlYUnBiMjRnUFNCN2ZUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0lXVnRjSFI1VDJKcVpXTjBLRjl3Y205NGVVUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCS1UwOU9MbkJoY25ObEtGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZiaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dUlEMGdYM0J5YjNoNVJHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1TG5KMWJuUnBiV1ZWVWt3Z1BTQmZkR2hwY3k1eWRXNTBhVzFsVlZKTU8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVndiRzk1SUVOdmJYQnZibVZ1ZENCemRHVndJSGg0ZUZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmNISnZlSGxUWVc1a1ltOTRMbVJsY0d4dmVVTnZiWEJ2Ym1WdWRDaGZjSEp2ZUhsVGIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1VzSUhKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVEN3Z1kyOXVabWxuZFhKaGRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0dSbGNHeHZlVU52YlhCdmJtVnVkRk4wWVhSMWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25PRG9nY21WMGRYSnVJR1JsY0d4dmVTQmpiMjF3YjI1bGJuUWdabTl5SUhOaGJtUmliM2dnYzNSaGRIVnpPaUFuTENCa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2RHaGxJRzFsYzNOaFoyVWdZblZ6SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1aFpHUk1hWE4wWlc1bGNpaGZjblZ1ZEdsdFpVbGtjRkJ5YjNoNVZWSk1MQ0JtZFc1amRHbHZiaWh0YzJjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5d2NtOTRlVk5oYm1SaWIzZ3VjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1RHOWhaQ0JUZEhWaUlHWjFibU4wYVc5dUlISmxjMjlzZG1Wa0lIZHBkR2dnYzNWalkyVnpjenRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhV1J3VUhKdmVIa2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFNXUndVSEp2ZUhsVlVrdzZJRjl5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwZFhNNklHUmxjR3h2ZVVOdmJYQnZibVZ1ZEZOMFlYUjFjMXh1SUNBZ0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR2xrY0ZCeWIzaDVLVHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KeTB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzBnUlU1RUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExWeGNiaWNwTzF4dVhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzVqWVhSamFDaGxjbkp2Y2xKbFlYTnZiaWs3WEc1Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZWelpXUWdkRzhnWTJobFkyc2dabTl5SUhWd1pHRjBaWE1nWVdKdmRYUWdZMjl0Y0c5dVpXNTBjeUJvWVc1a2JHVmtJR2x1SUhSb1pTQkRZWFJoYkc5bmRXVWdhVzVqYkhWa2FXNW5JSEJ5YjNSdlkyOXNJSE4wZFdKeklHRnVaQ0JJZVhCbGNuUnBaWE11SUdOb1pXTnJJSEpsYkdGMGFXOXVjMmhwY0NCM2FYUm9JR3hwWm1WamVXTnNaU0J0WVc1aFoyVnRaVzUwSUhCeWIzWnBaR1ZrSUdKNUlGTmxjblpwWTJVZ1YyOXlhMlZ5YzF4dUlDQXFJRUJ3WVhKaGJTQWdlME5oZEdGc2IyZDFaVlZTVEgwZ0lDQWdJQ0FnZFhKc0lIVnliRnh1SUNBcUwxeHVJQ0JqYUdWamEwWnZjbFZ3WkdGMFpTaDFjbXdwSUh0Y2JpQWdJQ0F2THlCQ2IyUjVMaTR1WEc0Z0lIMWNibHh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU2RXNTBhVzFsVlVFN1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWpiR0Z6Y3lCUFltcGxZM1JCYkd4dlkyRjBhVzl1SUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNCZmRYSnNPaUJWVWt4Y2JpQWdYMkoxY3pvZ1RXbHVhVUoxYzF4dUlDQXFMMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRjbVZoZEdVZ1lXNGdUMkpxWldOMElFRnNiRzlqWVhScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1MbFZTVEgwZ0lDQWdJQ0IxY213Z0xTQjFjbXdnWm5KdmJTQjNhRzhnYVhNZ2MyVnVaR2x1WnlCMGFHVWdiV1Z6YzJGblpWeHVJQ0FnS2lCQWNHRnlZVzBnSUh0TmFXNXBRblZ6ZlNBZ0lDQWdJR0oxY3lBdElFMXBibWxDZFhNZ2RYTmxaQ0JtYjNJZ1lXUmtjbVZ6Y3lCaGJHeHZZMkYwYVc5dVhHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWgxY213c0lHSjFjeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmRYSnNJRDBnZFhKc08xeHVJQ0FnSUY5MGFHbHpMbDlpZFhNZ1BTQmlkWE03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1oyVjBJSFJvWlNCVlVrd2dkbUZzZFdWY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JVYUdVZ2RYSnNJSFpoYkhWbE8xeHVJQ0FnS2k5Y2JpQWdaMlYwSUhWeWJDZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzVnliRHNnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYzJzZ1ptOXlJR055WldGMGFXOXVJRzltSUdFZ2JuVnRZbVZ5SUc5bUlFOWlhbVZqZENCaFpHUnlaWE56WlhNc0lIUnZJSFJvWlNCa2IyMWhhVzRnYldWemMyRm5aU0J1YjJSbExseHVJQ0FnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzU5SUdSdmJXRnBiaUF0SUVSdmJXRnBiaUJ2WmlCMGFHVWdiV1Z6YzJGblpTQnViMlJsTGx4dUlDQWdLaUJBY0dGeVlXMGdJSHR1ZFcxaVpYSjlJRzUxYldKbGNpQXRJRTUxYldKbGNpQnZaaUJoWkdSeVpYTnpaWE1nZEc4Z2NtVnhkV1Z6ZEZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VUhKdmJXbHpaVHhQWW1wbFkzUlZVa3crZlNBZ1FTQnNhWE4wSUc5bUlFOWlhbVZqZEZWU1RDZHpYRzRnSUNBcUwxeHVJQ0JqY21WaGRHVW9aRzl0WVdsdUxDQnpZMmhsYldVc0lHNTFiV0psY2lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdkRzhnYlhObkxXNXZaR1VnVDJKcVpXTjBRV3hzYjJOaGRHbHZiazFoYm1GblpYSWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ2JHVjBJRzF6WnlBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkamNtVmhkR1VuTENCbWNtOXRPaUJmZEdocGN5NWZkWEpzTENCMGJ6b2dKMlJ2YldGcGJqb3ZMMjF6WnkxdWIyUmxMaWNnS3lCa2IyMWhhVzRnS3lBbkwyOWlhbVZqZEMxaFpHUnlaWE56TFdGc2JHOWpZWFJwYjI0bkxGeHVJQ0FnSUNBZ1ltOWtlVG9nZXlCelkyaGxiV1U2SUhOamFHVnRaU3dnZG1Gc2RXVTZJSHNnYm5WdFltVnlPaUJ1ZFcxaVpYSWdmU0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLRzF6Wnl3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVndiSGt1WW05a2VTNTJZV3gxWlM1aGJHeHZZMkYwWldRcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaHlaWEJzZVM1aWIyUjVMbVJsYzJNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JQWW1wbFkzUkJiR3h2WTJGMGFXOXVPMXh1SWl3aWFXMXdiM0owSUhzZ1pHbDJhV1JsVlZKTUlIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4dWFXMXdiM0owSUZOMVluTmpjbWx3ZEdsdmJpQm1jbTl0SUNjdUwxTjFZbk5qY21sd2RHbHZiaWM3WEc1Y2JtTnNZWE56SUU5aWMyVnlkbVZ5VDJKcVpXTjBJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh3WVhKbGJuUXNJSFZ5YkN3Z1kyaHBiR1J5Wlc1ektTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDl3WVhKbGJuUWdQU0J3WVhKbGJuUTdYRzRnSUNBZ1gzUm9hWE11WDNWeWJDQTlJSFZ5YkR0Y2JpQWdJQ0JmZEdocGN5NWZZMmhwYkdSeVpXNXpJRDBnWTJocGJHUnlaVzV6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMkoxY3lBOUlIQmhjbVZ1ZEM1ZlluVnpPMXh1SUNBZ0lGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpJRDBnZTMwN1hHNGdJSDFjYmx4dUlDQmhaR1JUZFdKelkzSnBjSFJwYjI0b2FIbHdaWEowZVNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0b2VYQmxjblI1WFNBOUlHNWxkeUJUZFdKelkzSnBjSFJwYjI0b1gzUm9hWE11WDJKMWN5d2dhSGx3WlhKMGVTd2dYM1JvYVhNdVgzVnliQ3dnWDNSb2FYTXVYMk5vYVd4a2NtVnVjeXdnWm1Gc2MyVXBPMXh1SUNCOVhHNWNiaUFnY21WdGIzWmxVM1ZpYzJOeWFYQjBhVzl1S0doNWNHVnlkSGtwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENob2VYQmxjblI1S1M1a2IyMWhhVzQ3WEc0Z0lDQWdiR1YwSUc5aWFsVlNURk4xWW5OamNtbHdkR2x2YmlBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDNOMVluTmpjbWx3ZEdsdmJpYzdYRzVjYmlBZ0lDQnNaWFFnYzNWaWMyTnlhWEIwYVc5dUlEMGdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iYUhsd1pYSjBlVjA3WEc0Z0lDQWdhV1lnS0hOMVluTmpjbWx3ZEdsdmJpa2dlMXh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nYldWemMyRm5aU0J6Wlc1MElIUnZJSEpsYlc5MFpTQlNaWEJ2Y25SbGNrOWlhbVZqZENBdFBpQmZiMjVTWlcxdmRHVlZibE4xWW5OamNtbGlaVnh1SUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkMWJuTjFZbk5qY21saVpTY3NJR1p5YjIwNklGOTBhR2x6TGw5d1lYSmxiblF1WDNWeWJDd2dkRzg2SUc5aWFsVlNURk4xWW5OamNtbHdkR2x2Yml4Y2JpQWdJQ0FnSUNBZ1ltOWtlVG9nZXlCeVpYTnZkWEpqWlRvZ1gzUm9hWE11WDNWeWJDQjlYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnTHk5VVQwUlBPaUJ6YUc5MWJHUWdTU0IzWVdsMElHWnZjaUJ5WlhOd2IyNXpaU0JpWldadmNtVWdkVzV6ZFdKelkzSnBZbVVnYjI0Z2JYTm5MVzV2WkdWY2JpQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2MyVnVkQ0IwYnlCdGMyY3RibTlrWlNCVGRXSnpZM0pwY0hScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2QxYm5OMVluTmpjbWxpWlNjc0lHWnliMjA2SUY5MGFHbHpMbDl3WVhKbGJuUXVYM1Z5YkN3Z2RHODZJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OXpiU2NzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUY5MGFHbHpMbDkxY213c0lHTm9hV3hrY21WdVVtVnpiM1Z5WTJWek9pQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1eklIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0J6ZFdKelkzSnBjSFJwYjI0dVgzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tUdGNiaUFnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVhUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlBZbk5sY25abGNrOWlhbVZqZER0Y2JpSXNJbWx0Y0c5eWRDQjdJR1JwZG1sa1pWVlNUQ0I5SUdaeWIyMGdKeTR1TDNWMGFXeHpMM1YwYVd4ekp6dGNibWx0Y0c5eWRDQlRkV0p6WTNKcGNIUnBiMjRnWm5KdmJTQW5MaTlUZFdKelkzSnBjSFJwYjI0bk8xeHVYRzVqYkdGemN5QlNaWEJ2Y25SbGNrOWlhbVZqZENCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2NHRnlaVzUwTENCdmQyNWxjaXdnZFhKc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDl3WVhKbGJuUWdQU0J3WVhKbGJuUTdYRzRnSUNBZ1gzUm9hWE11WDI5M2JtVnlJRDBnYjNkdVpYSTdYRzRnSUNBZ1gzUm9hWE11WDNWeWJDQTlJSFZ5YkR0Y2JseHVJQ0FnSUY5MGFHbHpMbDlpZFhNZ1BTQndZWEpsYm5RdVgySjFjenRjYmx4dUlDQWdJRjkwYUdsekxsOWtiMjFoYVc0Z1BTQmthWFpwWkdWVlVrd29iM2R1WlhJcExtUnZiV0ZwYmp0Y2JpQWdJQ0JmZEdocGN5NWZiMkpxVTNWaWMyTnlhWEIwYjNKVlVrd2dQU0JmZEdocGN5NWZkWEpzSUNzZ0p5OXpkV0p6WTNKcGNIUnBiMjRuTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5NZ1BTQjdmVHRjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1eklEMGdXMTA3WEc0Z0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVRHbHpkR1Z1WlhKeklEMGdXMTA3WEc1Y2JpQWdJQ0JmZEdocGN5NWZabTl5ZDJGeVpITWdQU0I3ZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDloYkd4dlkyRjBaVXhwYzNSbGJtVnljeWdwTzF4dUlDQjlYRzVjYmlBZ1gyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKektDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBdkwyRmtaQ0J6ZFdKelkzSnBjSFJwYjI0Z2JHbHpkR1Z1WlhJdUxpNWNiaUFnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dVRHbHpkR1Z1WlhJZ1BTQmZkR2hwY3k1ZlluVnpMbUZrWkV4cGMzUmxibVZ5S0Y5MGFHbHpMbDl2WW1wVGRXSnpZM0pwY0hSdmNsVlNUQ3dnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1gzUm9hWE11WDI5aWFsTjFZbk5qY21sd2RHOXlWVkpNSUNzZ0p5MVNRMVk2SUNjc0lHMXpaeWs3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLRzF6Wnk1MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM04xWW5OamNtbGlaU2M2SUY5MGFHbHpMbDl2YmxKbGJXOTBaVk4xWW5OamNtbGlaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFc1emRXSnpZM0pwWW1Vbk9pQmZkR2hwY3k1ZmIyNVNaVzF2ZEdWVmJsTjFZbk5qY21saVpTaHRjMmNwT3lCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5jbVZ6Y0c5dWMyVW5PaUJmZEdocGN5NWZiMjVTWlcxdmRHVlNaWE53YjI1elpTaHRjMmNwT3lCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR3hsZENCamFHRnVaMlZWVWt3Z1BTQmZkR2hwY3k1ZmRYSnNJQ3NnSnk5amFHRnVaMlZ6Snp0Y2JpQWdJQ0JmZEdocGN5NWZZMmhoYm1kbFRHbHpkR1Z1WlhJZ1BTQmZkR2hwY3k1ZlluVnpMbUZrWkV4cGMzUmxibVZ5S0dOb1lXNW5aVlZTVEN3Z0tHMXpaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0x5OVVUMFJQT2lCM2FHRjBJSFJ2Wkc4Z2FHVnlaVDhnVTJGMlpTQmphR0Z1WjJWelAxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMU41Ym1Ob1pYSk5ZVzVoWjJWeUxTY2dLeUJqYUdGdVoyVlZVa3dnS3lBbkxWSkRWam9nSnl3Z2JYTm5LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1VEdsemRHVnVaWEl1Y21WdGIzWmxLQ2s3WEc1Y2JpQWdJQ0JmZEdocGN5NWZZMmhoYm1kbFRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hHNWNiaUFnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzVNYVhOMFpXNWxjbk11Wm05eVJXRmphQ2dvWTJ3cElEMCtJSHRjYmlBZ0lDQWdJR05zTG5KbGJXOTJaU2dwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1gzUm9hWE11WDJadmNuZGhjbVJ6S1M1bWIzSkZZV05vS0NoclpYa3BJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbVp2Y25kaGNtUlZibE4xWW5OamNtbGlaU2hyWlhrcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OXlaVzF2ZG1VZ1lXeHNJSE4xWW5OamNtbHdkR2x2Ym5OY2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWN5a3VabTl5UldGamFDZ29hMlY1S1NBOVBpQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRyWlhsZExsOXlaV3hsWVhObFRHbHpkR1Z1WlhKektDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WbmFYTjBaWElnWVNCc2FYTjBaVzVsY2lCcGJpQjBhR1VnYlhObkxXNXZaR1VnWVc1a0lHbHVJSFJvWlNCc2IyTmhiQ0JOWlhOellXZGxRblZ6TENCemJ5QjBhR0YwSUcxbGMzTmhaMlZ6SUc5dUlIUm9hWE1nWVdSa2NtVnpjeUJoY21VZ1ptOXlkMkZ5WkdWa0lIUnZJSFJvWlNCeVpYQnZjblJsY2lCdlltcGxZM1JjYmlBZ0lDb2dRSEJoY21GdElDQjdjM1J5YVc1bmZTQmhaR1J5WlhOeklDMGdWVkpNSUhSdklISmxaMmx6ZEdWeUlIUm9aU0JzYVhOMFpXNWxjbk5jYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdVbVYwZFhKdUlGQnliMjFwYzJVZ1Qwc2diM0lnWlhKeWIzSmNiaUFnSUNvdlhHNGdJR1p2Y25kaGNtUlRkV0p6WTNKcFltVW9ZV1JrY21WemMyVnpLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCMGJ5QjBhR1VnYlhObkxXNXZaR1VnVTNWaWMyTnlhWEIwYVc5dVRXRnVZV2RsY2lCamIyMXdiMjVsYm5SY2JpQWdJQ0JzWlhRZ2JtOWtaVk4xWW5OamNtbGlaVTF6WnlBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkemRXSnpZM0pwWW1VbkxDQm1jbTl0T2lCZmRHaHBjeTVmY0dGeVpXNTBMbDkxY213c0lIUnZPaUFuWkc5dFlXbHVPaTh2YlhObkxXNXZaR1V1SnlBcklGOTBhR2x6TGw5a2IyMWhhVzRnS3lBbkwzTnRKeXhjYmlBZ0lDQWdJR0p2WkhrNklIc2djM1ZpYzJOeWFXSmxPaUJoWkdSeVpYTnpaWE1zSUhOdmRYSmpaVG9nWDNSb2FYTXVYMjkzYm1WeUlIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2JtOWtaVk4xWW5OamNtbGlaVTF6Wnl3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkbWIzSjNZWEprTFhOMVluTmpjbWxpWlMxeVpYTndiMjV6WlNoeVpYQnZjblJsY2lrNklDY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJRzVsZDBadmNuZGhjbVFnUFNCZmRHaHBjeTVmWW5WekxtRmtaRVp2Y25kaGNtUW9YM1JvYVhNdVgzVnliQ3dnWDNSb2FYTXVYMjkzYm1WeUtUdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZabTl5ZDJGeVpITmJZV1JrY21WemMyVnpXekJkWFNBOUlHNWxkMFp2Y25kaGNtUTdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2dwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblJYSnliM0lnYjI0Z2JYTm5MVzV2WkdVZ2MzVmljMk55YVhCMGFXOXVPaUFuSUNzZ2NtVndiSGt1WW05a2VTNWtaWE5qS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlc1U1pXZHBjM1JsY2lCaElHeHBjM1JsYm1WeUlHbHVJSFJvWlNCdGMyY3RibTlrWlNCaGJtUWdhVzRnZEdobElHeHZZMkZzSUUxbGMzTmhaMlZDZFhNc0lITnZJSFJvWVhRZ2JXVnpjMkZuWlhNZ2IyNGdkR2hwY3lCaFpHUnlaWE56SUdGeVpTQnlaVzF2ZG1Wa0lHWnliMjBnWm05eWQyRnlaRnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlHRmtaSEpsYzNNZ0xTQlZVa3dnZEc4Z2RXNHRjbVZuYVhOMFpYSWdkR2hsSUd4cGMzUmxibVZ5YzF4dUlDQWdLaTljYmlBZ1ptOXlkMkZ5WkZWdVUzVmljMk55YVdKbEtHRmtaSEpsYzNNcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMlp2Y25kaGNtUnpXMkZrWkhKbGMzTmRMbkpsYlc5MlpTZ3BPMXh1SUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmWm05eWQyRnlaSE5iWVdSa2NtVnpjMTA3WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdkRzhnZEdobElHMXpaeTF1YjJSbElGTjFZbk5qY21sd2RHbHZiazFoYm1GblpYSWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ2JHVjBJRzV2WkdWVmJsTjFZbk5qY21saVpVMXpaeUE5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJQ2QxYm5OMVluTmpjbWxpWlNjc0lHWnliMjA2SUY5MGFHbHpMbDl3WVhKbGJuUXVYM1Z5YkN3Z2RHODZJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1gzUm9hWE11WDJSdmJXRnBiaUFySUNjdmMyMG5MRnh1SUNBZ0lDQWdZbTlrZVRvZ2V5QnpkV0p6WTNKcFltVTZJRnRoWkdSeVpYTnpYU3dnYzI5MWNtTmxPaUJmZEdocGN5NWZiM2R1WlhJZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLRzV2WkdWVmJsTjFZbk5qY21saVpVMXpaeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVm5hWE4wWlhJZ2JHbHpkR1Z1WlhKeklHWnZjaUJoSUd4cGMzUWdiMllnWTJocGJHUnlaVzV6TGlCUWRXSnNhV01nWTJoaGJtNWxiSE1nZFhObFpDQjBieUIwY21GdWMyMXBkQ0J0WlhOellXZGxjeTVjYmlBZ0lDb2dRSEJoY21GdElDQjdjM1J5YVc1blcxMTlJR05vYVd4a2NtVnVjeUF0SUdOb1lXNXVaV3h6SUhSdklISmxaMmx6ZEdWeVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUZKbGRIVnliaUJRY205dGFYTmxJRTlMSUc5eUlHVnljbTl5WEc0Z0lDQXFMMXh1SUNCaFpHUkRhR2xzWkhKbGJuTW9ZMmhwYkdSeVpXNXpLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1kyaHBiR1J5Wlc1ekxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JHVjBJR05vYVd4a1FtRnpaVlZTVENBOUlGOTBhR2x6TGw5MWNtd2dLeUFuTDJOb2FXeGtjbVZ1THljN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzV6TG5CMWMyZ29ZMmhwYkdSeVpXNXpLVHRjYmx4dUlDQWdJQ0FnTHlwY2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxibk11Wm05eVJXRmphQ2dvWTJocGJHUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR05vYVd4a1NXUWdQU0JqYUdsc1pFSmhjMlZWVWt3Z0t5QmphR2xzWkR0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnYzJWc1prWnZjbmRoY21RZ1BTQmZkR2hwY3k1ZlluVnpMbUZrWkVadmNuZGhjbVFvWTJocGJHUkpaQ3dnYjNkdVpYSXBPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZZMmhwYkdSeVpXNU1hWE4wWlc1bGNuTXVjSFZ6YUNoelpXeG1SbTl5ZDJGeVpDazdYRzRnSUNBZ0lDQjlLVHNxTDF4dVhHNGdJQ0FnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlGdGRPMXh1SUNBZ0lDQWdZMmhwYkdSeVpXNXpMbVp2Y2tWaFkyZ29LR05vYVd4a0tTQTlQaUJ6ZFdKelkzSnBjSFJwYjI1ekxuQjFjMmdvWTJocGJHUkNZWE5sVlZKTUlDc2dZMmhwYkdRcEtUdGNibHh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nYldWemMyRm5aU0J6Wlc1MElIUnZJSFJvWlNCdGMyY3RibTlrWlNCVGRXSnpZM0pwY0hScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUNBZ2JHVjBJRzV2WkdWVGRXSnpZM0pwWW1WTmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2R6ZFdKelkzSnBZbVVuTENCbWNtOXRPaUJmZEdocGN5NWZjR0Z5Wlc1MExsOTFjbXdzSUhSdk9pQW5aRzl0WVdsdU9pOHZiWE5uTFc1dlpHVXVKeUFySUY5MGFHbHpMbDlrYjIxaGFXNGdLeUFuTDNOdEp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QnpkV0p6WTNKcFltVTZJSE4xWW5OamNtbHdkR2x2Ym5Nc0lITnZkWEpqWlRvZ1gzUm9hWE11WDI5M2JtVnlJSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9ibTlrWlZOMVluTmpjbWxpWlUxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHViMlJsTFhOMVluTmpjbWxpWlMxeVpYTndiMjV6WlNoeVpYQnZjblJsY2lrNklDY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMMkZrWkNCamFHbHNaSEpsYmlCc2FYTjBaVzVsY25NZ2IyNGdiRzlqWVd3Z0xpNHVYRzRnSUNBZ0lDQWdJQ0FnYzNWaWMyTnlhWEIwYVc5dWN5NW1iM0pGWVdOb0tDaGphR2xzWkZWU1RDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdOb2FXeGtUR2x6ZEdWdVpYSWdQU0JmZEdocGN5NWZZblZ6TG1Ga1pFeHBjM1JsYm1WeUtHTm9hV3hrVlZKTUxDQW9iWE5uS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZWRTlFVHpvZ2QyaGhkQ0IwYjJSdklHaGxjbVUvSUZOaGRtVWdZMmhwYkdSeVpXNXpQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVTNsdVkyaGxjazFoYm1GblpYSXRKeUFySUdOb2FXeGtWVkpNSUNzZ0p5MVNRMVk2SUNjc0lHMXpaeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1d2RYTm9LR05vYVd4a1RHbHpkR1Z1WlhJcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjMlZzWmtadmNuZGhjbVFnUFNCZmRHaHBjeTVmWW5WekxtRmtaRVp2Y25kaGNtUW9ZMmhwYkdSVlVrd3NJRjkwYUdsekxsOXZkMjVsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZZMmhwYkdSeVpXNU1hWE4wWlc1bGNuTXVjSFZ6YUNoelpXeG1SbTl5ZDJGeVpDazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkRmNuSnZjaUJ2YmlCdGMyY3RibTlrWlNCemRXSnpZM0pwY0hScGIyNDZJQ2NnS3lCeVpYQnNlUzVpYjJSNUxtUmxjMk1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR1JsYkdWMFpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmtiMjFoYVc0Z1BTQmthWFpwWkdWVlVrd29YM1JvYVhNdVgyOTNibVZ5S1M1a2IyMWhhVzQ3WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdaR2x5WldOMGJIa2dkRzhnWVd4c0lITjFZbk5qY21saVpYSnpJRzltSUhSb1pTQnlaWEJ2Y25SbGNseHVJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdkSGx3WlRvZ0oyUmxiR1YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbDl2WW1wVGRXSnpZM0pwY0hSdmNsVlNUQ3dnZEc4NklGOTBhR2x6TGw5MWNtd2dLeUFuTDJOb1lXNW5aWE1uWEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdkRzhnZEdobElHMXpaeTF1YjJSbElFOWlhbVZqZEVGc2JHOWpZWFJwYjI1TllXNWhaMlZ5SUdOdmJYQnZibVZ1ZEZ4dUlDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ2RIbHdaVG9nSjJSbGJHVjBaU2NzSUdaeWIyMDZJRjkwYUdsekxsOXdZWEpsYm5RdVgzVnliQ3dnZEc4NklDZGtiMjFoYVc0Nkx5OXRjMmN0Ym05a1pTNG5JQ3NnWkc5dFlXbHVJQ3NnSnk5dlltcGxZM1F0WVdSa2NtVnpjeTFoYkd4dlkyRjBhVzl1Snl4Y2JpQWdJQ0FnSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUY5MGFHbHpMbDkxY213c0lHTm9hV3hrY21WdVVtVnpiM1Z5WTJWek9pQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1eklIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lGOTBhR2x6TGw5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXdZWEpsYm5RdVgzSmxjRzl5ZEdWeWMxdGZkR2hwY3k1ZmRYSnNYVHRjYmlBZ2ZWeHVYRzRnSUY5dmJsSmxiVzkwWlZKbGMzQnZibk5sS0cxelp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUY5MGFHbHpMbDkxY213c1hHNGdJQ0FnSUNCaWIyUjVPaUI3SUdOdlpHVTZJRzF6Wnk1aWIyUjVMbU52WkdVc0lITnZkWEpqWlRvZ2JYTm5MbVp5YjIwZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeTlHVEU5WExVbE9PaUJ0WlhOellXZGxJSEpsWTJWcGRtVmtJR1p5YjIwZ1UzbHVZMmhsY2lBdFBpQnpkV0p6WTNKcFltVmNiaUFnWDI5dVVtVnRiM1JsVTNWaWMyTnlhV0psS0cxelp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHaDVjR1Z5ZEhsVlVrd2dQU0J0YzJjdVltOWtlUzV6ZFdKelkzSnBZbVZ5TzF4dVhHNGdJQ0FnTHk5MllXeHBaR0YwWlNCcFppQnpkV0p6WTNKcGNIUnBiMjRnWVd4eVpXRmtlU0JsZUdsemRITS9YRzRnSUNBZ2FXWWdLRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxWVWt4ZEtTQjdYRzRnSUNBZ0lDQnNaWFFnWlhKeWIzSk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJR2g1Y0dWeWRIbFZVa3dzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnWTI5a1pUb2dOVEF3TENCa1pYTmpPaUFuVTNWaWMyTnlhWEIwYVc5dUlHWnZjaUFvSnlBcklGOTBhR2x6TGw5MWNtd2dLeUFuSURvZ0p5QXJJQ0JvZVhCbGNuUjVWVkpNSUNzZ0p5a2dZV3h5WldGa2VTQmxlR2x6ZEhNaEp5QjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtHVnljbTl5VFhObktUdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2TDJGemF5QjBieUJ6ZFdKelkzSnBZbVVnZEc4Z1UzbHVZMmhsY2o4Z0tHUmxjR1Z1WkhNZ2IyNGdkR2hsSUc5d1pYSmhkR2x2YmlCdGIyUmxLVnh1SUNBZ0lDOHZWRTlFVHpvZ1oyVjBJRzF2WkdVZ1puSnZiU0J2WW1wbFkzUWhYRzRnSUNBZ2JHVjBJRzF2WkdVZ1BTQW5jM1ZpTDNCMVlpYzdYRzVjYmlBZ0lDQnBaaUFvYlc5a1pTQTlQVDBnSjNOMVlpOXdkV0luS1NCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2JHOWpZV3dnYUhsd1pYSjBlU0JoWkdSeVpYTnpJRk41Ym1Ob1pYSWdMVDRnWDI5dVJtOXlkMkZ5WkZ4dUlDQWdJQ0FnYkdWMElHWnZjbmRoY21STmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RtYjNKM1lYSmtKeXdnWm5KdmJUb2dYM1JvYVhNdVgzVnliQ3dnZEc4NklGOTBhR2x6TGw5dmQyNWxjaXhjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUIwZVhCbE9pQnRjMmN1ZEhsd1pTd2dabkp2YlRvZ2FIbHdaWEowZVZWU1RDd2dkRzg2SUY5MGFHbHpMbDkxY213c0lHbGtaVzUwYVhSNU9pQnRjMmN1WW05a2VTNXBaR1Z1ZEdsMGVTQjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtHWnZjbmRoY21STmMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25abTl5ZDJGeVpDMXlaWEJzZVRvZ0p5d2djbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVZWSk1YU0E5SUc1bGR5QlRkV0p6WTNKcGNIUnBiMjRvWDNSb2FYTXVYMkoxY3l3Z1gzUm9hWE11WDI5M2JtVnlMQ0JmZEdocGN5NWZkWEpzTENCZmRHaHBjeTVmWTJocGJHUnlaVzV6TENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSE4xWW5OamNtbHdkR2x2YmlCeVpYTndiMjV6WlNCelpXNTBJQ2htYjNKM1lYSmtJR1p5YjIwZ2FXNTBaWEp1WVd3Z1NIbHdaWEowZVNsY2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnWW05a2VUb2djbVZ3YkhrdVltOWtlVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUgxY2JseHVJQ0F2TDBaTVQxY3RTVTQ2SUcxbGMzTmhaMlVnY21WalpXbDJaV1FnWm5KdmJTQnlaVzF2ZEdVZ1QySnpaWEoyWlhKUFltcGxZM1FnTFQ0Z2NtVnRiM1psVTNWaWMyTnlhWEIwYVc5dVhHNGdJRjl2YmxKbGJXOTBaVlZ1VTNWaWMyTnlhV0psS0cxelp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHaDVjR1Z5ZEhsVlVrd2dQU0J0YzJjdVltOWtlUzV6ZFdKelkzSnBZbVZ5TzF4dVhHNGdJQ0FnYkdWMElITjFZbk5qY21sd2RHbHZiaUE5SUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcyaDVjR1Z5ZEhsVlVreGRPMXh1SUNBZ0lHbG1JQ2h6ZFdKelkzSnBjSFJwYjI0cElIdGNiaUFnSUNBZ0lITjFZbk5qY21sd2RHbHZiaTVmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwTzF4dUlDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxWVWt4ZE8xeHVYRzRnSUNBZ0lDQXZMMVJQUkU4NklITmxibVFnZFc0dGMzVmljMk55YVdKbElHMWxjM05oWjJVZ2RHOGdVM2x1WTJobGNqOGdLR1JsY0dWdVpITWdiMjRnZEdobElHOXdaWEpoZEdsdmJpQnRiMlJsS1Z4dUlDQWdJSDFjYmx4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VtVndiM0owWlhKUFltcGxZM1E3WEc0aUxDSmpiR0Z6Y3lCVGRXSnpZM0pwY0hScGIyNGdlMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLR0oxY3l3Z2IzZHVaWElzSUhWeWJDd2dZMmhwYkdSeVpXNXpMQ0JwYzFKbGNHOXlkR1Z5S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnWTJocGJHUkNZWE5sVlZKTUlEMGdkWEpzSUNzZ0p5OWphR2xzWkhKbGJpOG5PMXh1SUNBZ0lHeGxkQ0JqYUdGdVoyVlZVa3dnUFNCMWNtd2dLeUFuTDJOb1lXNW5aWE1uTzF4dVhHNGdJQ0FnTHk5d2NtOWpaWE56SUdSbGJHVjBaU0J0WlhOellXZGxYRzRnSUNBZ1gzUm9hWE11WDJSbGJHVjBaVXhwYzNSbGJtVnlJRDBnWW5WekxtRmtaRXhwYzNSbGJtVnlLR05vWVc1blpWVlNUQ3dnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHMXpaeTUwZVhCbElEMDlQU0FuWkdWc1pYUmxKeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VM1ZpYzJOeWFYQjBhVzl1TFVSRlRFVlVSVG9nSnl3Z2JYTm5LVHRjYmx4dUlDQWdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z1lXeHNJSE4xWW5OamNtbGlaWEp6WEc0Z0lDQWdJQ0FnSUd4bGRDQmtaV3hsZEdWTlpYTnpZV2RsVkc5SWVYQmxjblI1SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZGtaV3hsZEdVbkxDQm1jbTl0T2lCdGMyY3Vabkp2YlN3Z2RHODZJRzkzYm1WeUxGeHVJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIc2djbVZ6YjNWeVkyVTZJSFZ5YkNCOVhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnTHk5elpXNWtJR1JsYkdWMFpTQjBieUJvZVhCbGNuUjVYRzRnSUNBZ0lDQWdJR0oxY3k1d2IzTjBUV1Z6YzJGblpTaGtaV3hsZEdWTlpYTnpZV2RsVkc5SWVYQmxjblI1TENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzVmljMk55YVhCMGFXOXVMVVJGVEVWVVJTMVNSVkJNV1RvZ0p5d2djbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYQnNlUzVpYjJSNUxtTnZaR1VnUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ0x5OWhaR1FnWTJoaGJtZGxJSEIxWW14cGMyZ2dZV1JrY21WemN5QnZjaUJtYjNKM1lYSmtYRzRnSUNBZ2FXWWdLR2x6VW1Wd2IzSjBaWElwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUlFkV0pzYVhOb0tHTm9ZVzVuWlZWU1RDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJR0oxY3k1aFpHUkdiM0ozWVhKa0tHTm9ZVzVuWlZWU1RDd2diM2R1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeUE5SUZ0ZE8xeHVJQ0FnSUdOb2FXeGtjbVZ1Y3k1bWIzSkZZV05vS0NoamFHbHNaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR05vYVd4a1NXUWdQU0JqYUdsc1pFSmhjMlZWVWt3Z0t5QmphR2xzWkR0Y2JseHVJQ0FnSUNBZ0x5OWhaR1FnWTJocGJHUnlaVzRnY0hWaWJHbHphQ0JoWkdSeVpYTnpYRzRnSUNBZ0lDQnNaWFFnWTJocGJHUnlaVzVHYjNKM1lYSmtJRDBnWW5WekxtRmtaRkIxWW14cGMyZ29ZMmhwYkdSSlpDazdYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdWNIVnphQ2hqYUdsc1pISmxia1p2Y25kaGNtUXBPMXh1WEc0Z0lDQWdJQ0F2TDJGa1pDQnpaV3htSUdadmNuZGhjbVFnYVdZZ1lXNGdiMkp6WlhKMlpYSmNiaUFnSUNBZ0lHbG1JQ2doYVhOU1pYQnZjblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYzJWc1prWnZjbmRoY21RZ1BTQmlkWE11WVdSa1JtOXlkMkZ5WkNoamFHbHNaRWxrTENCdmQyNWxjaWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeTV3ZFhOb0tITmxiR1pHYjNKM1lYSmtLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZaR1ZzWlhSbFRHbHpkR1Z1WlhJdWNtVnRiM1psS0NrN1hHNWNiaUFnSUNCZmRHaHBjeTVmWTJoaGJtZGxUR2x6ZEdWdVpYSXVjbVZ0YjNabEtDazdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdVptOXlSV0ZqYUNnb1ptOXlkMkZ5WkNrZ1BUNGdlMXh1SUNBZ0lDQWdabTl5ZDJGeVpDNXlaVzF2ZG1Vb0tUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4xWW5OamNtbHdkR2x2Ymp0Y2JpSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JtbHRjRzl5ZENCN0lHUnBkbWxrWlZWU1RDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzVjBhV3h6Snp0Y2JtbHRjRzl5ZENCUFltcGxZM1JCYkd4dlkyRjBhVzl1SUdaeWIyMGdKeTR2VDJKcVpXTjBRV3hzYjJOaGRHbHZiaWM3WEc1cGJYQnZjblFnVW1Wd2IzSjBaWEpQWW1wbFkzUWdabkp2YlNBbkxpOVNaWEJ2Y25SbGNrOWlhbVZqZENjN1hHNXBiWEJ2Y25RZ1QySnpaWEoyWlhKUFltcGxZM1FnWm5KdmJTQW5MaTlQWW5ObGNuWmxjazlpYW1WamRDYzdYRzVwYlhCdmNuUWdkSFkwSUdaeWIyMGdKeTR1TDNWMGFXeHpMM1IyTkNjN1hHNWNibWx0Y0c5eWRDQjdUV1Z6YzJGblpVWmhZM1J2Y25sOUlHWnliMjBnSjNObGNuWnBZMlV0Wm5KaGJXVjNiM0pyTDJScGMzUXZUV1Z6YzJGblpVWmhZM1J2Y25rbk8xeHVYRzR2S2lwY2JpQXFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2JpQXFJRU52Y21VZ1UzbHVZM0p2Ym1sNllYUnBiMjRnYzNsemRHVnRMbHh1SUNvdlhHNWpiR0Z6Y3lCVGVXNWphR1Z5VFdGdVlXZGxjaUI3WEc0Z0lDOHFJSEJ5YVhaaGRHVmNiaUFnWDNWeWJEb2dWVkpNWEc0Z0lGOWlkWE02SUUxcGJtbENkWE5jYmlBZ1gzSmxaMmx6ZEhKNU9pQlNaV2RwYzNSeWVWeHVJQ0JmWVd4c2IyTmhkRzl5T2lCUFltcGxZM1JCYkd4dlkyRjBhVzl1WEc1Y2JpQWdYM0psY0c5eWRHVnljem9nZXlCUFltcGxZM1JWVWt3NklGSmxjRzl5ZEdWeVQySnFaV04wSUgxY2JpQWdYMjlpYzJWeWRtVnljem9nZXlCUFltcGxZM1JWVWt3NklFOWljMlZ5ZG1WeVQySnFaV04wSUgxY2JpQWdLaTljYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5ZFc1MGFXMWxWVkpNTENCaWRYTXNJSEpsWjJsemRISjVMQ0JqWVhSaGJHOW5MQ0JoYkd4dlkyRjBiM0lwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgySjFjeUE5SUdKMWN6dGNiaUFnSUNCZmRHaHBjeTVmY21WbmFYTjBjbmtnUFNCeVpXZHBjM1J5ZVR0Y2JpQWdJQ0JmZEdocGN5NWZZMkYwWVd4dlp5QTlJR05oZEdGc2IyYzdYRzVjYmlBZ0lDQXZMMVJQUkU4NklIUm9aWE5sSUhOb2IzVnNaQ0JpWlNCellYWmxaQ0JwYmlCd1pYSnphWE4wWlc1alpTQmxibWRwYm1VL1hHNGdJQ0FnWDNSb2FYTXVYM1Z5YkNBOUlISjFiblJwYldWVlVrd2dLeUFuTDNOdEp6dGNiaUFnSUNCZmRHaHBjeTVmYjJKcVpXTjBWVkpNSUQwZ2NuVnVkR2x0WlZWU1RDQXJJQ2N2YjJKcVpXTjBMV0ZzYkc5allYUnBiMjRuTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0psY0c5eWRHVnljeUE5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk1nUFNCN2ZUdGNibHh1SUNBZ0lDOHZWRTlFVHpvZ2RHaHBjeUJ6YUc5MWJHUWdibTkwSUdKbElHaGhjbVJqYjJSbFpDRmNiaUFnSUNCZmRHaHBjeTVmWkc5dFlXbHVJRDBnWkdsMmFXUmxWVkpNS0hKMWJuUnBiV1ZWVWt3cExtUnZiV0ZwYmp0Y2JseHVJQ0FnSUY5MGFHbHpMbDl0WmlBOUlHNWxkeUJOWlhOellXZGxSbUZqZEc5eWVTaG1ZV3h6WlN3Z2UzMHBPMXh1WEc0Z0lDQWdhV1lnS0dGc2JHOWpZWFJ2Y2lrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJGc2JHOWpZWFJ2Y2lBOUlHRnNiRzlqWVhSdmNqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMkZzYkc5allYUnZjaUE5SUc1bGR5QlBZbXBsWTNSQmJHeHZZMkYwYVc5dUtGOTBhR2x6TGw5dlltcGxZM1JWVWt3c0lHSjFjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOTBhR2x6TGw5MWNtd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkVGVXNWphR1Z5VFdGdVlXZGxjaTFTUTFZNklDY3NJRzF6WnlrN1hHNGdJQ0FnSUNCemQybDBZMmdnS0cxelp5NTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJOeVpXRjBaU2M2SUY5MGFHbHpMbDl2YmtOeVpXRjBaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWkdWc1pYUmxKem9nWDNSb2FYTXVYMjl1UkdWc1pYUmxLRzF6WnlrN0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R6ZFdKelkzSnBZbVVuT2lCZmRHaHBjeTVmYjI1TWIyTmhiRk4xWW5OamNtbGlaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFc1emRXSnpZM0pwWW1Vbk9pQmZkR2hwY3k1ZmIyNU1iMk5oYkZWdVUzVmljMk55YVdKbEtHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWjJWMElIVnliQ2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM1Z5YkRzZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJRk41Ym1Ob1pYSWdMVDRnWTNKbFlYUmxYRzRnSUY5dmJrTnlaV0YwWlNodGMyY3BJSHRjYmx4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJRzkzYm1WeUlEMGdiWE5uTG1aeWIyMDdYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJR1JwZG1sa1pWVlNUQ2h0YzJjdVpuSnZiU2t1Wkc5dFlXbHVPMXh1WEc0Z0lDQWdhV1lnS0cxelp5NWliMlI1TG5KbGMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWVhWMGFHOXlhWE5sS0cxelp5d2diWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dloyVjBJSE5qYUdWdFlTQm1jbTl0SUdOaGRHRnNiMmQxWlNCaGJtUWdjR0Z5YzJVZ0xUNGdLSE5qYUdWdFpTd2dZMmhwYkdSeVpXNHBYRzRnSUNBZ1gzUm9hWE11WDJOaGRHRnNiMmN1WjJWMFJHRjBZVk5qYUdWdFlVUmxjMk55YVhCMGIzSW9iWE5uTG1KdlpIa3VjMk5vWlcxaEtTNTBhR1Z1S0Noa1pYTmpjbWx3ZEc5eUtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUd4bGRDQndjbTl3WlhKMGFXVnpJRDBnWkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1V1Y0hKdmNHVnlkR2xsY3p0Y2JpQWdJQ0FnSUd4bGRDQnpZMmhsYldVZ1BTQndjbTl3WlhKMGFXVnpMbk5qYUdWdFpTQS9JSEJ5YjNCbGNuUnBaWE11YzJOb1pXMWxMbU52Ym5OMFlXNTBJRG9nSjNKbGMyOTFjbU5sSnp0Y2JpQWdJQ0FnSUd4bGRDQmphR2xzWkhKbGJuTWdQU0J3Y205d1pYSjBhV1Z6TG1Ob2FXeGtjbVZ1SUQ4Z2NISnZjR1Z5ZEdsbGN5NWphR2xzWkhKbGJpNWpiMjV6ZEdGdWRDQTZJRnRkTzF4dVhHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VMk5vWlcxbE9pQW5MQ0J6WTJobGJXVXBPMXh1WEc0Z0lDQWdJQ0F2THlCelkyaGxiV0VnZG1Gc2FXUmhkR2x2Ymx4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1hDSnlkVzV1YVc1bklHOWlhbVZqZENCMllXeHBaR0YwYVc5dUxpNHVYQ0lwTzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdiR1YwSUc5aWFpQTlJRzF6Wnk1aWIyUjVMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYzJOb1pXMWhJRDBnWkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1U3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjBkalF1ZG1Gc2FXUmhkR1ZOZFd4MGFYQnNaU2h2WW1vc0lITmphR1Z0WVNrN1hHNWNiaUFnSUNBZ0lDQWdMeThnWTJobFkyc2djbVZ6ZFd4MElHRnVaQ0IwYUhKdmR5Qmxjbkp2Y2lCcFppQnBiblpoYkdsa1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY21WemRXeDBMblpoYkdsa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtGd2liMkpxWldOMElIWmhiR2xrWVhScGIyNGdabUZwYkdWa0lWd2lMQ0JLVTA5T0xuTjBjbWx1WjJsbWVTaHlaWE4xYkhRdVpYSnliM0p6TENCdWRXeHNMQ0F5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWtaV0oxWnloY0ltOWlhbVZqZERwY0lpd2dTbE5QVGk1emRISnBibWRwWm5rb2IySnFMQ0J1ZFd4c0xDQXlLU3dnWENKY1hISmNYRzV6WTJobGJXRTZYQ0lzSUVwVFQwNHVjM1J5YVc1bmFXWjVLSE5qYUdWdFlTd2diblZzYkN3Z01pa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdWRTlFVHlCMGFHbHpJSE5vYjNWc1pDQjBhSEp2ZHlCaGJpQmxjbkp2Y2x4dUlDQWdJQ0FnSUNBZ0lDOHZkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liMkpxWldOMElIWmhiR2xrWVhScGIyNGdabUZwYkdWa09sd2lMQ0J5WlhOMWJIUXVaWEp5YjNJdWJXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWENKdlltcGxZM1FnZG1Gc2FXUmhkR2x2YmlCemRXTmpaV1ZrWldSY0lpd2djbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9YQ0pGY25KdmNpQmtkWEpwYm1jZ2IySnFaV04wSUhaaGJHbGtZWFJwYjI0NlhDSXNJR1VwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkwzSmxjWFZsYzNRZ1lXUmtjbVZ6Y3lCaGJHeHZZMkYwYVc5dUlHOW1JR0VnYm1WM0lHOWlhbVZqZENCbWNtOXRJSFJvWlNCdGMyY3RibTlrWlZ4dUlDQWdJQ0FnWDNSb2FYTXVYMkZzYkc5allYUnZjaTVqY21WaGRHVW9aRzl0WVdsdUxDQnpZMmhsYldVc0lERXBMblJvWlc0b0tHRnNiRzlqWVhSbFpDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCc1pYUWdiMkpxVlZKTUlEMGdZV3hzYjJOaGRHVmtXekJkTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RCVEV4UFEwRlVUMUlnUTFKRlFWUkZPaWNzSUdGc2JHOWpZWFJsWkNrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhOMVluTmpjbWx3ZEdsdmJsVlNUQ0E5SUc5aWFsVlNUQ0FySUNjdmMzVmljMk55YVhCMGFXOXVKenRjYmx4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VM1ZpYzJOeWFYQjBhVzl1SUZWU1RDY3NJSE4xWW5OamNtbHdkR2x2YmxWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnTHk5VWJ5QnlaV2RwYzNSbGNpQjBhR1VnWkdGMFlVOWlhbVZqZENCcGJpQjBhR1VnY25WdWRHbHRaVkpsWjJsemRISjVYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXlaV2RwYzNSeWVTNXlaV2RwYzNSbGNrUmhkR0ZQWW1wbFkzUW9iWE5uTG1KdlpIa3VkbUZzZFdVdWJtRnRaU3dnYlhObkxtSnZaSGt1ZG1Gc2RXVXVjMk5vWlcxaExDQnZZbXBWVWt3c0lHMXpaeTVpYjJSNUxuWmhiSFZsTG5KbGNHOXlkR1Z5TENCdGMyY3VZbTlrZVM1aGRYUm9iM0pwYzJVcExuUm9aVzRvWm5WdVkzUnBiMjRvY21WemIyeDJaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RFWVhSaFQySnFaV04wSUhOMVkyTmxjM05tZFd4c2VTQnlaV2RwYzNSbGNtVmtKeXdnY21WemIyeDJaU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMMkZzYkNCUFN5QXRQaUJqY21WaGRHVWdjbVZ3YjNKMFpYSWdZVzVrSUhKbFoybHpkR1Z5SUd4cGMzUmxibVZ5YzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhCdmNuUmxjaUE5SUc1bGR5QlNaWEJ2Y25SbGNrOWlhbVZqZENoZmRHaHBjeXdnYjNkdVpYSXNJRzlpYWxWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnY21Wd2IzSjBaWEl1Wm05eWQyRnlaRk4xWW5OamNtbGlaU2hiYjJKcVZWSk1MSE4xWW5OamNtbHdkR2x2YmxWU1RGMHBMblJvWlc0b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ3YjNKMFpYSXVZV1JrUTJocGJHUnlaVzV6S0dOb2FXeGtjbVZ1Y3lrdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5eVpYQnZjblJsY25OYmIySnFWVkpNWFNBOUlISmxjRzl5ZEdWeU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjbVZ6Y0c5dWMyVWdkRzhnVTNsdVkyaGxjaUF0UGlCamNtVmhkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diM2R1WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZXlCamIyUmxPaUF5TURBc0lISmxjMjkxY21ObE9pQnZZbXBWVWt3c0lHTm9hV3hrY21WdVVtVnpiM1Z5WTJWek9pQmphR2xzWkhKbGJuTWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDNObGJtUWdZM0psWVhSbElIUnZJR0ZzYkNCdlluTmxjblpsY25Nc0lISmxjM0J2Ym5ObGN5QjNhV3hzSUdKbElHUmxiR2wyWlhJZ2RHOGdkR2hsSUVoNWNHVnlkSGtnYjNkdVpYSS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZjMk5vWldSMWJHVWdabTl5SUc1bGVIUWdZM2xqYkdVZ2JtVmxaR1ZrTENCaVpXTmhkWE5sSUhSb1pTQlNaWEJ2Y25SbGNpQnphRzkxYkdRZ1ltVWdZWFpoYVd4aFlteGxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMM2RwYkd3Z2FXNTJhWFJsSUc5MGFHVnlJR2g1Y0dWeWRHbGxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWhkWFJvYjNKcGMyVW9iWE5uTENCdlltcFZVa3dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTa3VZMkYwWTJnb0tISmxZWE52YmlrZ1BUNGdlMXh1SUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nWlhKeWIzSWdiV1Z6YzJGblpTQnlaWE53YjI1elpTQjBieUJUZVc1amFHVnlJQzArSUdOeVpXRjBaVnh1SUNBZ0lDQWdiR1YwSUhKbGMzQnZibk5sVFhObklEMGdlMXh1SUNBZ0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCbWNtOXRPaUJ0YzJjdWRHOHNJSFJ2T2lCdmQyNWxjaXhjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQTFNREFzSUdSbGMyTTZJSEpsWVhOdmJpQjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtISmxjM0J2Ym5ObFRYTm5LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5aGRYUm9iM0pwYzJVb2JYTm5MQ0J2WW1wVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQnZZbXBUZFdKelkzSnBjSFJ2Y2xWU1RDQTlJRzlpYWxWU1RDQXJJQ2N2YzNWaWMyTnlhWEIwYVc5dUp6dGNibHh1SUNBZ0lHMXpaeTVpYjJSNUxtRjFkR2h2Y21selpTNW1iM0pGWVdOb0tDaG9lWEJsY25SNVZWSk1LU0E5UGlCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnpaVzVrSUdsdWRtbDBaWE1nZEc4Z2JHbHpkQ0J2WmlCeVpXMXZkR1VnVTNsdVkyaGxjaUF0UGlCZmIyNVNaVzF2ZEdWRGNtVmhkR1VnTFQ0Z2IyNU9iM1JwWm1sallYUnBiMjVjYmlBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lBblkzSmxZWFJsSnl3Z1puSnZiVG9nYjJKcVUzVmljMk55YVhCMGIzSlZVa3dzSUhSdk9pQm9lWEJsY25SNVZWSk1MRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR2xrWlc1MGFYUjVPaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlU3dnYzI5MWNtTmxPaUJ0YzJjdVpuSnZiU3dnZG1Gc2RXVTZJRzF6Wnk1aWIyUjVMblpoYkhWbExDQnpZMmhsYldFNklHMXpaeTVpYjJSNUxuTmphR1Z0WVNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElFUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNpQXRQaUJrWld4bGRHVmNiaUFnWDI5dVJHVnNaWFJsS0cxelp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdiMkpxVlZKTUlEMGdiWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzVjYmlBZ0lDQnNaWFFnYjJKcVpXTjBJRDBnWDNSb2FYTXVYM0psY0c5eWRHVnljMXR2WW1wVlVreGRPMXh1SUNBZ0lHbG1JQ2h2WW1wbFkzUXBJSHRjYmlBZ0lDQWdJQzh2VkU5RVR6b2dhWE1nZEdobGNtVWdZVzU1SUhCdmJHbGplU0IyWlhKcFptbGpZWFJwYjI0Z1ltVm1iM0psSUdSbGJHVjBaVDljYmlBZ0lDQWdJRzlpYW1WamRDNWtaV3hsZEdVb0tUdGNibHh1SUNBZ0lDQWdMeTlVVDBSUE9pQjFibkpsWjJsemRHVnlJRzlpYW1WamREOWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNCcFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQm1jbTl0T2lCdGMyY3VkRzhzSUhSdk9pQnRjMmN1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBeU1EQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHk5R1RFOVhMVWxPT2lCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdiRzlqWVd3Z1UzbHVZMmhsY2lBdFBpQnpkV0p6WTNKcFltVmNiaUFnWDI5dVRHOWpZV3hUZFdKelkzSnBZbVVvYlhObktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUd4bGRDQm9lWEJsY25SNVZWSk1JRDBnYlhObkxtWnliMjA3WEc0Z0lDQWdiR1YwSUc5aWFsVlNUQ0E5SUcxelp5NWliMlI1TG5KbGMyOTFjbU5sTzF4dUlDQWdJR3hsZENCdlltcFZVa3hUZFdKelkzSnBjSFJwYjI0Z1BTQnZZbXBWVWt3Z0t5QW5MM04xWW5OamNtbHdkR2x2YmljN1hHNGdJQ0FnYkdWMElHTm9hV3hrUW1GelpWVlNUQ0E5SUc5aWFsVlNUQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNibHh1SUNBZ0lHeGxkQ0JrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvYjJKcVZWSk1LUzVrYjIxaGFXNDdYRzVjYmlBZ0lDQXZMMmRsZENCelkyaGxiV0VnWm5KdmJTQmpZWFJoYkc5bmRXVWdZVzVrSUhCaGNuTmxJQzArSUNoamFHbHNaSEpsYmlsY2JpQWdJQ0JmZEdocGN5NWZZMkYwWVd4dlp5NW5aWFJFWVhSaFUyTm9aVzFoUkdWelkzSnBjSFJ2Y2lodGMyY3VZbTlrZVM1elkyaGxiV0VwTG5Sb1pXNG9LR1JsYzJOeWFYQjBiM0lwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0J3Y205d1pYSjBhV1Z6SUQwZ1pHVnpZM0pwY0hSdmNpNXpiM1Z5WTJWUVlXTnJZV2RsTG5OdmRYSmpaVU52WkdVdWNISnZjR1Z5ZEdsbGN6dGNiaUFnSUNBZ0lHeGxkQ0JqYUdsc1pISmxibk1nUFNCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUlEOGdjSEp2Y0dWeWRHbGxjeTVqYUdsc1pISmxiaTVqYjI1emRHRnVkQ0E2SUZ0ZE8xeHVYRzRnSUNBZ0lDQXZMMk5vYVd4a2NtVnVJR0ZrWkhKbGMzTmxjMXh1SUNBZ0lDQWdiR1YwSUhOMVluTmpjbWx3ZEdsdmJuTWdQU0JiWFR0Y2JpQWdJQ0FnSUhOMVluTmpjbWx3ZEdsdmJuTXVjSFZ6YUNodlltcFZVa3dnS3lBbkwyTm9ZVzVuWlhNbktUdGNiaUFnSUNBZ0lHTm9hV3hrY21WdWN5NW1iM0pGWVdOb0tDaGphR2xzWkNrZ1BUNGdjM1ZpYzJOeWFYQjBhVzl1Y3k1d2RYTm9LR05vYVd4a1FtRnpaVlZTVENBcklHTm9hV3hrS1NrN1hHNWNiaUFnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSE4xWW5OamNtbGlaU0J0WlhOellXZGxJSFJ2SUhSb1pTQnRjMmN0Ym05a1pTd2djbVZuYVhOMFpYSnBibWNnYkdsemRHVnVaWEp6SUc5dUlIUm9aU0JpY205clpYSmNiaUFnSUNBZ0lHeGxkQ0J1YjJSbFUzVmljMk55YVdKbFRYTm5JRDBnZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuYzNWaWMyTnlhV0psSnl3Z1puSnZiVG9nWDNSb2FYTXVYM1Z5YkN3Z2RHODZJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OXpiU2NzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnYVdSbGJuUnBkSGs2SUcxelp5NWliMlI1TG1sa1pXNTBhWFI1TENCemRXSnpZM0pwWW1VNklITjFZbk5qY21sd2RHbHZibk1zSUhOdmRYSmpaVG9nYUhsd1pYSjBlVlZTVENCOVhHNGdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQXZMM04xWW5OamNtbGlaU0JwYmlCdGMyY3RibTlrWlZ4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaHViMlJsVTNWaWMyTnlhV0psVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyNXZaR1V0YzNWaWMyTnlhV0psTFhKbGMzQnZibk5sS0c5aWMyVnlkbVZ5S1RvZ0p5d2djbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSEpsY0d4NUlIZHBkR2dnY0hKdmRtbHphVzl1WVd3Z2NtVnpjRzl1YzJWY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUdoNWNHVnlkSGxWVWt3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklERXdNQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdOb2FXeGtjbVZ1Y3lCOVhHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMMFpNVDFjdFQxVlVPaUJ6ZFdKelkzSnBZbVVnYldWemMyRm5aU0IwYnlCeVpXMXZkR1VnVW1Wd2IzSjBaWEpQWW1wbFkzUWdMVDRnWDI5dVVtVnRiM1JsVTNWaWMyTnlhV0psWEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJRzlpYWxOMVluTmpjbWxpWlUxelp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkemRXSnpZM0pwWW1VbkxDQm1jbTl0T2lCZmRHaHBjeTVmZFhKc0xDQjBiem9nYjJKcVZWSk1VM1ZpYzJOeWFYQjBhVzl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2V5QnBaR1Z1ZEdsMGVUb2dibTlrWlZOMVluTmpjbWxpWlUxelp5NWliMlI1TG1sa1pXNTBhWFI1TENCemRXSnpZM0pwWW1WeU9pQm9lWEJsY25SNVZWSk1JSDFjYmlBZ0lDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk5emRXSnpZM0pwWW1VZ2RHOGdjbVZ3YjNKMFpYSWdVMDFjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLRzlpYWxOMVluTmpjbWxpWlUxelp5d2dLSEpsY0d4NUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduY21Wd2IzSjBaWEl0YzNWaWMyTnlhV0psTFhKbGMzQnZibk5sT2lBbkxDQnlaWEJzZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiMkp6WlhKMlpYSWdQU0JmZEdocGN5NWZiMkp6WlhKMlpYSnpXMjlpYWxWU1RGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYjJKelpYSjJaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlluTmxjblpsY2lBOUlHNWxkeUJQWW5ObGNuWmxjazlpYW1WamRDaGZkR2hwY3l3Z2IySnFWVkpNTENCamFHbHNaSEpsYm5NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5dlluTmxjblpsY25OYmIySnFWVkpNWFNBOUlHOWljMlZ5ZG1WeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OXlaV2RwYzNSbGNpQm9lWEJsY25SNUlITjFZbk5qY21sd2RHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnZZbk5sY25abGNpNWhaR1JUZFdKelkzSnBjSFJwYjI0b2FIbHdaWEowZVZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTltYjNKM1lYSmtJSFJ2SUdoNWNHVnlkSGs2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxtbGtJRDBnYlhObkxtbGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJzZVM1bWNtOXRJRDBnWDNSb2FYTXVYM1Z5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21Wd2JIa3VkRzhnUFNCb2VYQmxjblI1VlZKTU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9jbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXNhWE4wWlc1bGNpQnlaV3BsWTNSbFpGeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklHMXpaeTVwWkN3Z2RIbHdaVG9nSjNKbGMzQnZibk5sSnl3Z1puSnZiVG9nYlhObkxuUnZMQ0IwYnpvZ2FIbHdaWEowZVZWU1RDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSEpsY0d4NUxtSnZaSGxjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdkwwWk1UMWN0U1U0NklHMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0JzYjJOaGJDQkVZWFJoVDJKcVpXTjBUMkp6WlhKMlpYSWdMVDRnZFc1emRXSnpZM0pwWW1WY2JpQWdYMjl1VEc5allXeFZibE4xWW5OamNtbGlaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHaDVjR1Z5ZEhsVlVrd2dQU0J0YzJjdVpuSnZiVHRjYmlBZ0lDQnNaWFFnYjJKcVZWSk1JRDBnYlhObkxtSnZaSGt1Y21WemIzVnlZMlU3WEc1Y2JpQWdJQ0JzWlhRZ2IySnpaWEoyWlhJZ1BTQmZkR2hwY3k1ZmIySnpaWEoyWlhKelcyOWlhbFZTVEYwN1hHNGdJQ0FnYVdZZ0tHOWljMlZ5ZG1WeUtTQjdYRzRnSUNBZ0lDQXZMMVJQUkU4NklHbHpJSFJvWlhKbElHRnVlU0J3YjJ4cFkza2dkbVZ5YVdacFkyRjBhVzl1SUdKbFptOXlaU0JrWld4bGRHVS9YRzRnSUNBZ0lDQnZZbk5sY25abGNpNXlaVzF2ZG1WVGRXSnpZM0pwY0hScGIyNG9hSGx3WlhKMGVWVlNUQ2s3WEc1Y2JpQWdJQ0FnSUM4dlZFOUVUem9nWkdWemRISnZlU0J2WW1wbFkzUWdhVzRnZEdobElISmxaMmx6ZEhKNVAxeHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklHMXpaeTVtY205dExGeHVJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURJd01DQjlYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnTHk5VVQwUlBPaUJ5WlcxdmRtVWdUMkpxWldOMElHbG1JRzV2SUcxdmNtVWdjM1ZpYzJOeWFYQjBhVzl1UDF4dUlDQWdJQ0FnTHk5a1pXeGxkR1VnWDNSb2FYTXVYMjlpYzJWeWRtVnljMXR2WW1wVlVreGRPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk41Ym1Ob1pYSk5ZVzVoWjJWeU8xeHVJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVMeW9xWEc0Z0tpQkZkbVZ1ZEVWdGFYUjBaWEpjYmlBcUlFRnNiQ0JqYkdGemMyVnpJSGRvYVdOb0lHVjRkR1Z1WkhNZ2RHaHBjeXdnWTJGdUlHaGhkbVVnWVdSa1JYWmxiblJNYVhOMFpXNWxjaUJoYm1RZ2RISnBaMmRsY2lCbGRtVnVkSE03WEc0Z0tpOWNibU5zWVhOeklFVjJaVzUwUlcxcGRIUmxjaUI3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJR0ZrWkVWMlpXNTBUR2x6ZEdWdVpYSWdiR2x6ZEdWdUlHWnZjaUJoYmlCbGRtVnVkRlI1Y0dWY2JpQWdJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0FnSUNBZ0lDQWdJR1YyWlc1MFZIbHdaU0F0SUd4cGMzUmxibWx1WnlCbWIzSWdkR2hwY3lCMGVYQmxJRzltSUdWMlpXNTBYRzRnSUNBcUlFQndZWEpoYlNBZ2UwWjFibU4wYVc5dWZTQWdJQ0FnSUNCallpQWdJQ0FnSUNBZ0xTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpQjNhV3hzSUdKbElHVjRaV04xZEdWa0lIZG9aVzRnZEdobElHVjJaVzUwSUdsMElHbHpJR2x1ZG05clpXUmNiaUFnSUNvdlhHNGdJR0ZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9aWFpsYm5SVWVYQmxMQ0JqWWlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdYM1JvYVhOYlpYWmxiblJVZVhCbFhTQTlJR05pTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVkbTlyWlNCMGFHVWdaWFpsYm5SVWVYQmxYRzRnSUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ1pYWmxiblJVZVhCbElDMGdaWFpsYm5RZ2QybHNiQ0JpWlNCcGJuWnZhMlZrWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMjlpYW1WamRIMGdjR0Z5WVcxeklDMGdjR0Z5WVcxbGRHVnljeUIzYVd4c0lHSmxJSEJoYzNObFpDQjBieUIwYUdVZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2x4dUlDQWdLaTljYmlBZ2RISnBaMmRsY2lobGRtVnVkRlI1Y0dVc0lIQmhjbUZ0Y3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JwWmlBb1gzUm9hWE5iWlhabGJuUlVlWEJsWFNrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE5iWlhabGJuUlVlWEJsWFNod1lYSmhiWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVWMlpXNTBSVzFwZEhSbGNqdGNiaUlzSWk4cVhHNGdRWFYwYUc5eU9pQkhaWEpoYVc1MElFeDFabVlnWVc1a0lHOTBhR1Z5YzF4dUlGbGxZWEk2SURJd01UTmNibHh1SUZSb2FYTWdZMjlrWlNCcGN5QnlaV3hsWVhObFpDQnBiblJ2SUhSb1pTQmNJbkIxWW14cFl5QmtiMjFoYVc1Y0lpQmllU0JwZEhNZ1lYVjBhRzl5S0hNcExpQWdRVzU1WW05a2VTQnRZWGtnZFhObExDQmhiSFJsY2lCaGJtUWdaR2x6ZEhKcFluVjBaU0IwYUdVZ1kyOWtaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TGlBZ1ZHaGxJR0YxZEdodmNpQnRZV3RsY3lCdWJ5Qm5kV0Z5WVc1MFpXVnpMQ0JoYm1RZ2RHRnJaWE1nYm04Z2JHbGhZbWxzYVhSNUlHOW1JR0Z1ZVNCcmFXNWtJR1p2Y2lCMWMyVWdiMllnZEdocGN5QmpiMlJsTGx4dVhHNGdTV1lnZVc5MUlHWnBibVFnWVNCaWRXY2diM0lnYldGclpTQmhiaUJwYlhCeWIzWmxiV1Z1ZEN3Z2FYUWdkMjkxYkdRZ1ltVWdZMjkxY25SbGIzVnpJSFJ2SUd4bGRDQjBhR1VnWVhWMGFHOXlJR3R1YjNjc0lHSjFkQ0JwZENCcGN5QnViM1FnWTI5dGNIVnNjMjl5ZVM1Y2JpQXFMMXh1THk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlQySnFaV04wTDJ0bGVYTS9jbVZrYVhKbFkzUnNiMk5oYkdVOVpXNHRWVk1tY21Wa2FYSmxZM1J6YkhWblBVcGhkbUZUWTNKcGNIUWxNa1pTWldabGNtVnVZMlVsTWtaSGJHOWlZV3hmVDJKcVpXTjBjeVV5Ums5aWFtVmpkQ1V5Um10bGVYTmNibWxtSUNnaFQySnFaV04wTG10bGVYTXBJSHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeUE5SUNobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTkViMjUwUlc1MWJVSjFaeUE5SUNFb2UzUnZVM1J5YVc1bk9pQnVkV3hzZlNrdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW9KM1J2VTNSeWFXNW5KeWtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMjUwUlc1MWJYTWdQU0JiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNSdlUzUnlhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmRHOU1iMk5oYkdWVGRISnBibWNuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkMllXeDFaVTltSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFHRnpUM2R1VUhKdmNHVnlkSGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkcGMxQnliM1J2ZEhsd1pVOW1KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGpiMjV6ZEhKMVkzUnZjaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyNTBSVzUxYlhOTVpXNW5kR2dnUFNCa2IyNTBSVzUxYlhNdWJHVnVaM1JvTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzlpYWlBaFBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzlpYWlBaFBUMGdKMloxYm1OMGFXOXVKeUI4ZkNCdlltb2dQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkUFltcGxZM1F1YTJWNWN5QmpZV3hzWldRZ2IyNGdibTl1TFc5aWFtVmpkQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnVzEwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQWdhVzRnYjJKcUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0doaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFMQ0J3Y205d0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaHdjbTl3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTkViMjUwUlc1MWJVSjFaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1pHOXVkRVZ1ZFcxelRHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQmtiMjUwUlc1MWJYTmJhVjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaGtiMjUwUlc1MWJYTmJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlLU2dwTzF4dWZWeHVMeThnYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHRWVk12Wkc5amN5OVhaV0l2U21GMllWTmpjbWx3ZEM5U1pXWmxjbVZ1WTJVdlIyeHZZbUZzWDA5aWFtVmpkSE12VDJKcVpXTjBMMk55WldGMFpWeHVhV1lnS0NGUFltcGxZM1F1WTNKbFlYUmxLU0I3WEc0Z0lDQWdUMkpxWldOMExtTnlaV0YwWlNBOUlDaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUVZb0tTQjdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0c4cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lDRTlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkUFltcGxZM1F1WTNKbFlYUmxJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHOXViSGtnWVdOalpYQjBjeUJ2Ym1VZ2NHRnlZVzFsZEdWeUxpY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnUmk1d2NtOTBiM1I1Y0dVZ1BTQnZPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkdLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrb0tUdGNibjFjYmk4dklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwcGhkbUZUWTNKcGNIUXZVbVZtWlhKbGJtTmxMMGRzYjJKaGJGOVBZbXBsWTNSekwwRnljbUY1TDJselFYSnlZWGsvY21Wa2FYSmxZM1JzYjJOaGJHVTlaVzR0VlZNbWNtVmthWEpsWTNSemJIVm5QVXBoZG1GVFkzSnBjSFFsTWtaU1pXWmxjbVZ1WTJVbE1rWkhiRzlpWVd4ZlQySnFaV04wY3lVeVJrRnljbUY1SlRKR2FYTkJjbkpoZVZ4dWFXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtTQjdYRzRnSUNBZ1FYSnlZWGt1YVhOQmNuSmhlU0E5SUdaMWJtTjBhVzl1SUNoMlFYSm5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b2RrRnlaeWtnUFQwOUlGd2lXMjlpYW1WamRDQkJjbkpoZVYxY0lqdGNiaUFnSUNCOU8xeHVmVnh1THk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlFYSnlZWGt2YVc1a1pYaFBaajl5WldScGNtVmpkR3h2WTJGc1pUMWxiaTFWVXlaeVpXUnBjbVZqZEhOc2RXYzlTbUYyWVZOamNtbHdkQ1V5UmxKbFptVnlaVzVqWlNVeVJrZHNiMkpoYkY5UFltcGxZM1J6SlRKR1FYSnlZWGtsTWtacGJtUmxlRTltWEc1cFppQW9JVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibVJsZUU5bUtTQjdYRzRnSUNBZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMllnUFNCbWRXNWpkR2x2YmlBb2MyVmhjbU5vUld4bGJXVnVkQ0F2S2l3Z1puSnZiVWx1WkdWNElDb3ZLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhRZ1BTQlBZbXBsWTNRb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaVzRnUFNCMExteGxibWQwYUNBK1BqNGdNRHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9iR1Z1SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0xURTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlHNGdQU0F3TzF4dUlDQWdJQ0FnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzRnUFNCT2RXMWlaWElvWVhKbmRXMWxiblJ6V3pGZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHVJQ0U5UFNCdUtTQjdJQzh2SUhOb2IzSjBZM1YwSUdadmNpQjJaWEpwWm5scGJtY2dhV1lnYVhRbmN5Qk9ZVTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1SUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JpQWhQVDBnTUNBbUppQnVJQ0U5UFNCSmJtWnBibWwwZVNBbUppQnVJQ0U5UFNBdFNXNW1hVzVwZEhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVJRDBnS0c0Z1BpQXdJSHg4SUMweEtTQXFJRTFoZEdndVpteHZiM0lvVFdGMGFDNWhZbk1vYmlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1SUQ0OUlHeGxiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDMHhPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhaaGNpQnJJRDBnYmlBK1BTQXdJRDhnYmlBNklFMWhkR2d1YldGNEtHeGxiaUF0SUUxaGRHZ3VZV0p6S0c0cExDQXdLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDZzdJR3NnUENCc1pXNDdJR3NyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHc2dhVzRnZENBbUppQjBXMnRkSUQwOVBTQnpaV0Z5WTJoRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUgwN1hHNTlYRzVjYmk4dklFZHlkVzVuWlhrZ1QySnFaV04wTG1selJuSnZlbVZ1SUdoaFkydGNibWxtSUNnaFQySnFaV04wTG1selJuSnZlbVZ1S1NCN1hHNGdJQ0FnVDJKcVpXTjBMbWx6Um5KdmVtVnVJRDBnWm5WdVkzUnBiMjRnS0c5aWFpa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVJRDBnWENKMGRqUmZkR1Z6ZEY5bWNtOTZaVzVmYTJWNVhDSTdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHZZbW91YUdGelQzZHVVSEp2Y0dWeWRIa29hMlY1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlDczlJRTFoZEdndWNtRnVaRzl0S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzlpYWx0clpYbGRJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J2WW1wYmEyVjVYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVmVnh1THk4Z1FtRnpaV1FnYjI0NklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW5aWEpoYVc1MGJIVm1aaTkxY21rdGRHVnRjR3hoZEdWekxDQmlkWFFnZDJsMGFDQmhiR3dnZEdobElHUmxMWE4xWW5OMGFYUjFkR2x2YmlCemRIVm1aaUJ5WlcxdmRtVmtYRzVjYm5aaGNpQjFjbWxVWlcxd2JHRjBaVWRzYjJKaGJFMXZaR2xtYVdWeWN5QTlJSHRjYmlBZ0lDQmNJaXRjSWpvZ2RISjFaU3hjYmlBZ0lDQmNJaU5jSWpvZ2RISjFaU3hjYmlBZ0lDQmNJaTVjSWpvZ2RISjFaU3hjYmlBZ0lDQmNJaTljSWpvZ2RISjFaU3hjYmlBZ0lDQmNJanRjSWpvZ2RISjFaU3hjYmlBZ0lDQmNJajljSWpvZ2RISjFaU3hjYmlBZ0lDQmNJaVpjSWpvZ2RISjFaVnh1ZlR0Y2JuWmhjaUIxY21sVVpXMXdiR0YwWlZOMVptWnBZMlZ6SUQwZ2UxeHVJQ0FnSUZ3aUtsd2lPaUIwY25WbFhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCdWIzUlNaV0ZzYkhsUVpYSmpaVzUwUlc1amIyUmxLSE4wY21sdVp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGJtTnZaR1ZWVWtrb2MzUnlhVzVuS1M1eVpYQnNZV05sS0M4bE1qVmJNQzA1WFZzd0xUbGRMMmNzSUdaMWJtTjBhVzl1SUNoa2IzVmliR1ZGYm1OdlpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJjSWlWY0lpQXJJR1J2ZFdKc1pVVnVZMjlrWldRdWMzVmljM1J5YVc1bktETXBPMXh1SUNBZ0lIMHBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFjbWxVWlcxd2JHRjBaVk4xWW5OMGFYUjFkR2x2YmloemNHVmpLU0I3WEc0Z0lDQWdkbUZ5SUcxdlpHbG1hV1Z5SUQwZ1hDSmNJanRjYmlBZ0lDQnBaaUFvZFhKcFZHVnRjR3hoZEdWSGJHOWlZV3hOYjJScFptbGxjbk5iYzNCbFl5NWphR0Z5UVhRb01DbGRLU0I3WEc0Z0lDQWdJQ0FnSUcxdlpHbG1hV1Z5SUQwZ2MzQmxZeTVqYUdGeVFYUW9NQ2s3WEc0Z0lDQWdJQ0FnSUhOd1pXTWdQU0J6Y0dWakxuTjFZbk4wY21sdVp5Z3hLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSE5sY0dGeVlYUnZjaUE5SUZ3aVhDSTdYRzRnSUNBZ2RtRnlJSEJ5WldacGVDQTlJRndpWENJN1hHNGdJQ0FnZG1GeUlITm9iM1ZzWkVWelkyRndaU0E5SUhSeWRXVTdYRzRnSUNBZ2RtRnlJSE5vYjNkV1lYSnBZV0pzWlhNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IyWVhJZ2RISnBiVVZ0Y0hSNVUzUnlhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdhV1lnS0cxdlpHbG1hV1Z5SUQwOVBTQW5LeWNwSUh0Y2JpQWdJQ0FnSUNBZ2MyaHZkV3hrUlhOallYQmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRiMlJwWm1sbGNpQTlQVDBnWENJdVhDSXBJSHRjYmlBZ0lDQWdJQ0FnY0hKbFptbDRJRDBnWENJdVhDSTdYRzRnSUNBZ0lDQWdJSE5sY0dGeVlYUnZjaUE5SUZ3aUxsd2lPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iVzlrYVdacFpYSWdQVDA5SUZ3aUwxd2lLU0I3WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZ3aUwxd2lPMXh1SUNBZ0lDQWdJQ0J6WlhCaGNtRjBiM0lnUFNCY0lpOWNJanRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzF2WkdsbWFXVnlJRDA5UFNBbkl5Y3BJSHRjYmlBZ0lDQWdJQ0FnY0hKbFptbDRJRDBnWENJalhDSTdYRzRnSUNBZ0lDQWdJSE5vYjNWc1pFVnpZMkZ3WlNBOUlHWmhiSE5sTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYlc5a2FXWnBaWElnUFQwOUlDYzdKeWtnZTF4dUlDQWdJQ0FnSUNCd2NtVm1hWGdnUFNCY0lqdGNJanRjYmlBZ0lDQWdJQ0FnYzJWd1lYSmhkRzl5SUQwZ1hDSTdYQ0k3WEc0Z0lDQWdJQ0FnSUhOb2IzZFdZWEpwWVdKc1pYTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBjbWx0Ulcxd2RIbFRkSEpwYm1jZ1BTQjBjblZsTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYlc5a2FXWnBaWElnUFQwOUlDYy9KeWtnZTF4dUlDQWdJQ0FnSUNCd2NtVm1hWGdnUFNCY0lqOWNJanRjYmlBZ0lDQWdJQ0FnYzJWd1lYSmhkRzl5SUQwZ1hDSW1YQ0k3WEc0Z0lDQWdJQ0FnSUhOb2IzZFdZWEpwWVdKc1pYTWdQU0IwY25WbE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JXOWthV1pwWlhJZ1BUMDlJQ2NtSnlrZ2UxeHVJQ0FnSUNBZ0lDQndjbVZtYVhnZ1BTQmNJaVpjSWp0Y2JpQWdJQ0FnSUNBZ2MyVndZWEpoZEc5eUlEMGdYQ0ltWENJN1hHNGdJQ0FnSUNBZ0lITm9iM2RXWVhKcFlXSnNaWE1nUFNCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUIyWVhKT1lXMWxjeUE5SUZ0ZE8xeHVJQ0FnSUhaaGNpQjJZWEpNYVhOMElEMGdjM0JsWXk1emNHeHBkQ2hjSWl4Y0lpazdYRzRnSUNBZ2RtRnlJSFpoY2xOd1pXTnpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlIWmhjbE53WldOTllYQWdQU0I3ZlR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhaaGNreHBjM1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGNrNWhiV1VnUFNCMllYSk1hWE4wVzJsZE8xeHVJQ0FnSUNBZ0lDQjJZWElnZEhKMWJtTmhkR1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnlUbUZ0WlM1cGJtUmxlRTltS0Z3aU9sd2lLU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ3WVhKMGN5QTlJSFpoY2s1aGJXVXVjM0JzYVhRb1hDSTZYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5VG1GdFpTQTlJSEJoY25Seld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RISjFibU5oZEdVZ1BTQndZWEp6WlVsdWRDaHdZWEowYzFzeFhTd2dNVEFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6ZFdabWFXTmxjeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2RYSnBWR1Z0Y0d4aGRHVlRkV1ptYVdObGMxdDJZWEpPWVcxbExtTm9ZWEpCZENoMllYSk9ZVzFsTG14bGJtZDBhQ0F0SURFcFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVm1abWxqWlhOYmRtRnlUbUZ0WlM1amFHRnlRWFFvZG1GeVRtRnRaUzVzWlc1bmRHZ2dMU0F4S1YwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5VG1GdFpTQTlJSFpoY2s1aGJXVXVjM1ZpYzNSeWFXNW5LREFzSUhaaGNrNWhiV1V1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGNsTndaV01nUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25WdVkyRjBaVG9nZEhKMWJtTmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lCMllYSk9ZVzFsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1ZtWm1salpYTTZJSE4xWm1acFkyVnpYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhaaGNsTndaV056TG5CMWMyZ29kbUZ5VTNCbFl5azdYRzRnSUNBZ0lDQWdJSFpoY2xOd1pXTk5ZWEJiZG1GeVRtRnRaVjBnUFNCMllYSlRjR1ZqTzF4dUlDQWdJQ0FnSUNCMllYSk9ZVzFsY3k1d2RYTm9LSFpoY2s1aGJXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdjM1ZpUm5WdVkzUnBiMjRnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1ZHZFc1amRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdYQ0pjSWp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE4wWVhKMFNXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSFpoY2xOd1pXTnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RtRnlVM0JsWXlBOUlIWmhjbE53WldOelcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdkbUZzZFdWR2RXNWpkR2x2YmloMllYSlRjR1ZqTG01aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbElEMDlQU0J1ZFd4c0lIeDhJSFpoYkhWbElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBJQ1ltSUhaaGJIVmxMbXhsYm1kMGFDQTlQVDBnTUNrZ2ZId2dLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjlpYW1WamRDY2dKaVlnVDJKcVpXTjBMbXRsZVhNb2RtRnNkV1VwTG14bGJtZDBhQ0E5UFQwZ01Da3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGeWRFbHVaR1Y0S3lzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOVBUMGdjM1JoY25SSmJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCd2NtVm1hWGc3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQW9jMlZ3WVhKaGRHOXlJSHg4SUZ3aUxGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0haaGJIVmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHphRzkzVm1GeWFXRmliR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQXJQU0IyWVhKVGNHVmpMbTVoYldVZ0t5QmNJajFjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQjJZV3gxWlM1c1pXNW5kR2c3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9haUErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQjJZWEpUY0dWakxuTjFabVpwWTJWeld5Y3FKMTBnUHlBb2MyVndZWEpoZEc5eUlIeDhJRndpTEZ3aUtTQTZJRndpTEZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFpoY2xOd1pXTXVjM1ZtWm1salpYTmJKeW9uWFNBbUppQnphRzkzVm1GeWFXRmliR1Z6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSFpoY2xOd1pXTXVibUZ0WlNBcklGd2lQVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemFHOTFiR1JGYzJOaGNHVWdQeUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvZG1Gc2RXVmJhbDBwTG5KbGNHeGhZMlVvTHlFdlp5d2dYQ0lsTWpGY0lpa2dPaUJ1YjNSU1pXRnNiSGxRWlhKalpXNTBSVzVqYjJSbEtIWmhiSFZsVzJwZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoemFHOTNWbUZ5YVdGaWJHVnpJQ1ltSUNGMllYSlRjR1ZqTG5OMVptWnBZMlZ6V3ljcUoxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlIWmhjbE53WldNdWJtRnRaU0FySUZ3aVBWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1ptbHljM1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXWnBjbk4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1emRXWm1hV05sYzFzbktpZGRJRDhnS0hObGNHRnlZWFJ2Y2lCOGZDQmNJaXhjSWlrZ09pQmNJaXhjSWp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWFYSnpkQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2MyaHZkV3hrUlhOallYQmxJRDhnWlc1amIyUmxWVkpKUTI5dGNHOXVaVzUwS0d0bGVTa3VjbVZ3YkdGalpTZ3ZJUzluTENCY0lpVXlNVndpS1NBNklHNXZkRkpsWVd4c2VWQmxjbU5sYm5SRmJtTnZaR1VvYTJWNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUhaaGNsTndaV011YzNWbVptbGpaWE5iSnlvblhTQS9JQ2M5SnlBNklGd2lMRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdjMmh2ZFd4a1JYTmpZWEJsSUQ4Z1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtIWmhiSFZsVzJ0bGVWMHBMbkpsY0d4aFkyVW9MeUV2Wnl3Z1hDSWxNakZjSWlrZ09pQnViM1JTWldGc2JIbFFaWEpqWlc1MFJXNWpiMlJsS0haaGJIVmxXMnRsZVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITm9iM2RXWVhKcFlXSnNaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSFpoY2xOd1pXTXVibUZ0WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGNtbHRSVzF3ZEhsVGRISnBibWNnZkh3Z2RtRnNkV1VnSVQwOUlGd2lYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCY0lqMWNJanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZG1GeVUzQmxZeTUwY25WdVkyRjBaU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2RtRnNkV1V1YzNWaWMzUnlhVzVuS0RBc0lIWmhjbE53WldNdWRISjFibU5oZEdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdjMmh2ZFd4a1JYTmpZWEJsSUQ4Z1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtIWmhiSFZsS1M1eVpYQnNZV05sS0M4aEwyY3NJRndpSlRJeFhDSXBJRG9nYm05MFVtVmhiR3g1VUdWeVkyVnVkRVZ1WTI5a1pTaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlPMXh1SUNBZ0lITjFZa1oxYm1OMGFXOXVMblpoY2s1aGJXVnpJRDBnZG1GeVRtRnRaWE03WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdjSEpsWm1sNE9pQndjbVZtYVhnc1hHNGdJQ0FnSUNBZ0lITjFZbk4wYVhSMWRHbHZiam9nYzNWaVJuVnVZM1JwYjI1Y2JpQWdJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJWY21sVVpXMXdiR0YwWlNoMFpXMXdiR0YwWlNrZ2UxeHVJQ0FnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlZjbWxVWlcxd2JHRjBaU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlZjbWxVWlcxd2JHRjBaU2gwWlcxd2JHRjBaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJ3WVhKMGN5QTlJSFJsYlhCc1lYUmxMbk53YkdsMEtGd2llMXdpS1R0Y2JpQWdJQ0IyWVhJZ2RHVjRkRkJoY25SeklEMGdXM0JoY25SekxuTm9hV1owS0NsZE8xeHVJQ0FnSUhaaGNpQndjbVZtYVhobGN5QTlJRnRkTzF4dUlDQWdJSFpoY2lCemRXSnpkR2wwZFhScGIyNXpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlIWmhjazVoYldWeklEMGdXMTA3WEc0Z0lDQWdkMmhwYkdVZ0tIQmhjblJ6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNuUWdQU0J3WVhKMGN5NXphR2xtZENncE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzNCbFl5QTlJSEJoY25RdWMzQnNhWFFvWENKOVhDSXBXekJkTzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ0WVdsdVpHVnlJRDBnY0dGeWRDNXpkV0p6ZEhKcGJtY29jM0JsWXk1c1pXNW5kR2dnS3lBeEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdaMWJtTnpJRDBnZFhKcFZHVnRjR3hoZEdWVGRXSnpkR2wwZFhScGIyNG9jM0JsWXlrN1hHNGdJQ0FnSUNBZ0lITjFZbk4wYVhSMWRHbHZibk11Y0hWemFDaG1kVzVqY3k1emRXSnpkR2wwZFhScGIyNHBPMXh1SUNBZ0lDQWdJQ0J3Y21WbWFYaGxjeTV3ZFhOb0tHWjFibU56TG5CeVpXWnBlQ2s3WEc0Z0lDQWdJQ0FnSUhSbGVIUlFZWEowY3k1d2RYTm9LSEpsYldGcGJtUmxjaWs3WEc0Z0lDQWdJQ0FnSUhaaGNrNWhiV1Z6SUQwZ2RtRnlUbUZ0WlhNdVkyOXVZMkYwS0daMWJtTnpMbk4xWW5OMGFYUjFkR2x2Ymk1MllYSk9ZVzFsY3lrN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVptbHNiQ0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaVVoxYm1OMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjBaWGgwVUdGeWRITmJNRjA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzVmljM1JwZEhWMGFXOXVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjFZbk4wYVhSMWRHbHZiaUE5SUhOMVluTjBhWFIxZEdsdmJuTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdjM1ZpYzNScGRIVjBhVzl1S0haaGJIVmxSblZ1WTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlIUmxlSFJRWVhKMGMxdHBJQ3NnTVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TzF4dUlDQWdJSFJvYVhNdWRtRnlUbUZ0WlhNZ1BTQjJZWEpPWVcxbGN6dGNiaUFnSUNCMGFHbHpMblJsYlhCc1lYUmxJRDBnZEdWdGNHeGhkR1U3WEc1OVhHNWNibFZ5YVZSbGJYQnNZWFJsTG5CeWIzUnZkSGx3WlNBOUlIdGNiaUFnSUNCMGIxTjBjbWx1WnpvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MFpXMXdiR0YwWlR0Y2JpQWdJQ0I5TEZ4dUlDQWdJR1pwYkd4R2NtOXRUMkpxWldOME9pQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkd3b1puVnVZM1JwYjI0Z0tIWmhjazVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ2WW1wYmRtRnlUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibjA3WEc1MllYSWdWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDQTlJR1oxYm1OMGFXOXVJRlpoYkdsa1lYUnZja052Ym5SbGVIUW9jR0Z5Wlc1MExDQmpiMnhzWldOMFRYVnNkR2x3YkdVc0lHVnljbTl5VW1Wd2IzSjBaWElzSUdOb1pXTnJVbVZqZFhKemFYWmxMQ0IwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ2RHaHBjeTV0YVhOemFXNW5JRDBnVzEwN1hHNGdJQ0FnZEdocGN5NXRhWE56YVc1blRXRndJRDBnZTMwN1hHNGdJQ0FnZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKeklEMGdjR0Z5Wlc1MElEOGdUMkpxWldOMExtTnlaV0YwWlNod1lYSmxiblF1Wm05eWJXRjBWbUZzYVdSaGRHOXljeWtnT2lCN2ZUdGNiaUFnSUNCMGFHbHpMbk5qYUdWdFlYTWdQU0J3WVhKbGJuUWdQeUJQWW1wbFkzUXVZM0psWVhSbEtIQmhjbVZ1ZEM1elkyaGxiV0Z6S1NBNklIdDlPMXh1SUNBZ0lIUm9hWE11WTI5c2JHVmpkRTExYkhScGNHeGxJRDBnWTI5c2JHVmpkRTExYkhScGNHeGxPMXh1SUNBZ0lIUm9hWE11WlhKeWIzSnpJRDBnVzEwN1hHNGdJQ0FnZEdocGN5NW9ZVzVrYkdWRmNuSnZjaUE5SUdOdmJHeGxZM1JOZFd4MGFYQnNaU0EvSUhSb2FYTXVZMjlzYkdWamRFVnljbTl5SURvZ2RHaHBjeTV5WlhSMWNtNUZjbkp2Y2p0Y2JpQWdJQ0JwWmlBb1kyaGxZMnRTWldOMWNuTnBkbVVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYUdWamExSmxZM1Z5YzJsMlpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OallXNXVaV1JHY205NlpXNGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVNBOUlDZDBkalJmZG1Gc2FXUmhkR2x2Ymw5cFpDYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVTQTlJQ2QwZGpSZmRtRnNhV1JoZEdsdmJsOWxjbkp2Y25OZmFXUW5PMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kSEpoWTJ0VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SeVlXTnJWVzVyYm05M2JsQnliM0JsY25ScFpYTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZTMwN1hHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVpYSnliM0pTWlhCdmNuUmxjaUE5SUdWeWNtOXlVbVZ3YjNKMFpYSWdmSHdnWkdWbVlYVnNkRVZ5Y205eVVtVndiM0owWlhJb0oyVnVKeWs3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxtVnljbTl5VW1Wd2IzSjBaWElnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25aR1ZpZFdjbktUdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NWtaV1pwYm1Wa1MyVjVkMjl5WkhNZ1BTQjdmVHRjYmlBZ0lDQnBaaUFvY0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ3WVhKbGJuUXVaR1ZtYVc1bFpFdGxlWGR2Y21SektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2MxdHJaWGxkSUQwZ2NHRnlaVzUwTG1SbFptbHVaV1JMWlhsM2IzSmtjMXRyWlhsZExuTnNhV05sS0RBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVHRjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG1SbFptbHVaVXRsZVhkdmNtUWdQU0JtZFc1amRHbHZiaUFvYTJWNWQyOXlaQ3dnYTJWNWQyOXlaRVoxYm1OMGFXOXVLU0I3WEc0Z0lDQWdkR2hwY3k1a1pXWnBibVZrUzJWNWQyOXlaSE5iYTJWNWQyOXlaRjBnUFNCMGFHbHpMbVJsWm1sdVpXUkxaWGwzYjNKa2MxdHJaWGwzYjNKa1hTQjhmQ0JiWFR0Y2JpQWdJQ0IwYUdsekxtUmxabWx1WldSTFpYbDNiM0prYzF0clpYbDNiM0prWFM1d2RYTm9LR3RsZVhkdmNtUkdkVzVqZEdsdmJpazdYRzU5TzF4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsUlhKeWIzSWdQU0JtZFc1amRHbHZiaUFvWTI5a1pTd2diV1Z6YzJGblpWQmhjbUZ0Y3l3Z1pHRjBZVkJoZEdnc0lITmphR1Z0WVZCaGRHZ3NJSE4xWWtWeWNtOXljeXdnWkdGMFlTd2djMk5vWlcxaEtTQjdYRzRnSUNBZ2RtRnlJR1Z5Y205eUlEMGdibVYzSUZaaGJHbGtZWFJwYjI1RmNuSnZjaWhqYjJSbExDQnRaWE56WVdkbFVHRnlZVzF6TENCa1lYUmhVR0YwYUN3Z2MyTm9aVzFoVUdGMGFDd2djM1ZpUlhKeWIzSnpLVHRjYmlBZ0lDQmxjbkp2Y2k1dFpYTnpZV2RsSUQwZ2RHaHBjeTVsY25KdmNsSmxjRzl5ZEdWeUtHVnljbTl5TENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNXlaWFIxY201RmNuSnZjaUE5SUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZTF4dUlDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVqYjJ4c1pXTjBSWEp5YjNJZ1BTQm1kVzVqZEdsdmJpQW9aWEp5YjNJcElIdGNiaUFnSUNCcFppQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbk11Y0hWemFDaGxjbkp2Y2lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbkJ5WldacGVFVnljbTl5Y3lBOUlHWjFibU4wYVc5dUlDaHpkR0Z5ZEVsdVpHVjRMQ0JrWVhSaFVHRjBhQ3dnYzJOb1pXMWhVR0YwYUNrZ2UxeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQnpkR0Z5ZEVsdVpHVjRPeUJwSUR3Z2RHaHBjeTVsY25KdmNuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNuTmJhVjBnUFNCMGFHbHpMbVZ5Y205eWMxdHBYUzV3Y21WbWFYaFhhWFJvS0dSaGRHRlFZWFJvTENCelkyaGxiV0ZRWVhSb0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z2MyTm9aVzFoS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnZFc1cmJtOTNibEJoZEdnZ2FXNGdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVZVNUxUazlYVGw5UVVrOVFSVkpVV1N3Z2UzQmhkR2c2SUhWdWEyNXZkMjVRWVhSb2ZTd2dkVzVyYm05M2JsQmhkR2dzSUZ3aVhDSXNJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbUZrWkVadmNtMWhkQ0E5SUdaMWJtTjBhVzl1SUNobWIzSnRZWFFzSUhaaGJHbGtZWFJ2Y2lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1ptOXliV0YwSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdabTl5YldGMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZrWkVadmNtMWhkQ2hyWlhrc0lHWnZjbTFoZEZ0clpYbGRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKelcyWnZjbTFoZEYwZ1BTQjJZV3hwWkdGMGIzSTdYRzU5TzF4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWNtVnpiMngyWlZKbFpuTWdQU0JtZFc1amRHbHZiaUFvYzJOb1pXMWhMQ0IxY214SWFYTjBiM0o1S1NCN1hHNGdJQ0FnYVdZZ0tITmphR1Z0WVZzbkpISmxaaWRkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZFhKc1NHbHpkRzl5ZVNBOUlIVnliRWhwYzNSdmNua2dmSHdnZTMwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxY214SWFYTjBiM0o1VzNOamFHVnRZVnNuSkhKbFppZGRYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NURTVkpEVlV4QlVsOVNSVVpGVWtWT1EwVXNJSHQxY214ek9pQlBZbXBsWTNRdWEyVjVjeWgxY214SWFYTjBiM0o1S1M1cWIybHVLQ2NzSUNjcGZTd2dKeWNzSUNjbkxDQnVkV3hzTENCMWJtUmxabWx1WldRc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkWEpzU0dsemRHOXllVnR6WTJobGJXRmJKeVJ5WldZblhWMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQnpZMmhsYldFZ1BTQjBhR2x6TG1kbGRGTmphR1Z0WVNoelkyaGxiV0ZiSnlSeVpXWW5YU3dnZFhKc1NHbHpkRzl5ZVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnpZMmhsYldFN1hHNTlPMXh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WjJWMFUyTm9aVzFoSUQwZ1puVnVZM1JwYjI0Z0tIVnliQ3dnZFhKc1NHbHpkRzl5ZVNrZ2UxeHVJQ0FnSUhaaGNpQnpZMmhsYldFN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YzJOb1pXMWhjMXQxY214ZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2RHaHBjeTV6WTJobGJXRnpXM1Z5YkYwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hOamFHVnRZU3dnZFhKc1NHbHpkRzl5ZVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCaVlYTmxWWEpzSUQwZ2RYSnNPMXh1SUNBZ0lIWmhjaUJtY21GbmJXVnVkQ0E5SUZ3aVhDSTdYRzRnSUNBZ2FXWWdLSFZ5YkM1cGJtUmxlRTltS0Njakp5a2dJVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJR1p5WVdkdFpXNTBJRDBnZFhKc0xuTjFZbk4wY21sdVp5aDFjbXd1YVc1a1pYaFBaaWhjSWlOY0lpa2dLeUF4S1R0Y2JpQWdJQ0FnSUNBZ1ltRnpaVlZ5YkNBOUlIVnliQzV6ZFdKemRISnBibWNvTUN3Z2RYSnNMbWx1WkdWNFQyWW9YQ0lqWENJcEtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbk5qYUdWdFlYTmJZbUZ6WlZWeWJGMGdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lITmphR1Z0WVNBOUlIUm9hWE11YzJOb1pXMWhjMXRpWVhObFZYSnNYVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnZhVzUwWlhKUVlYUm9JRDBnWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0daeVlXZHRaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ2YVc1MFpYSlFZWFJvSUQwOVBTQmNJbHdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYTnZiSFpsVW1WbWN5aHpZMmhsYldFc0lIVnliRWhwYzNSdmNua3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hCdmFXNTBaWEpRWVhSb0xtTm9ZWEpCZENnd0tTQWhQVDBnWENJdlhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaGNuUnpJRDBnY0c5cGJuUmxjbEJoZEdndWMzQnNhWFFvWENJdlhDSXBMbk5zYVdObEtERXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhCaGNuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyOXRjRzl1Wlc1MElEMGdjR0Z5ZEhOYmFWMHVjbVZ3YkdGalpTZ3ZmakV2Wnl3Z1hDSXZYQ0lwTG5KbGNHeGhZMlVvTDM0d0wyY3NJRndpZmx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpZMmhsYldGYlkyOXRjRzl1Wlc1MFhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2MyTm9aVzFoVzJOdmJYQnZibVZ1ZEYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hOamFHVnRZU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaWE52YkhabFVtVm1jeWh6WTJobGJXRXNJSFZ5YkVocGMzUnZjbmtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpMbTFwYzNOcGJtZGJZbUZ6WlZWeWJGMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xcGMzTnBibWN1Y0hWemFDaGlZWE5sVlhKc0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGFYTnphVzVuVzJKaGMyVlZjbXhkSUQwZ1ltRnpaVlZ5YkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YVhOemFXNW5UV0Z3VzJKaGMyVlZjbXhkSUQwZ1ltRnpaVlZ5YkR0Y2JpQWdJQ0I5WEc1OU8xeHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVjMlZoY21Ob1UyTm9aVzFoY3lBOUlHWjFibU4wYVc5dUlDaHpZMmhsYldFc0lIVnliQ2tnZTF4dUlDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLSE5qYUdWdFlTa3BJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCelkyaGxiV0V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZoY21Ob1UyTm9aVzFoY3loelkyaGxiV0ZiYVYwc0lIVnliQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOamFHVnRZU0FtSmlCMGVYQmxiMllnYzJOb1pXMWhJRDA5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzJOb1pXMWhMbWxrSUQwOVBTQmNJbk4wY21sdVoxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhOVWNuVnpkR1ZrVlhKc0tIVnliQ3dnYzJOb1pXMWhMbWxrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTmphR1Z0WVhOYmMyTm9aVzFoTG1sa1hTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyTm9aVzFoYzF0elkyaGxiV0V1YVdSZElEMGdjMk5vWlcxaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2MyTm9aVzFoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2EyVjVJQ0U5UFNCY0ltVnVkVzFjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaFcydGxlVjBnUFQwOUlGd2liMkpxWldOMFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WldGeVkyaFRZMmhsYldGektITmphR1Z0WVZ0clpYbGRMQ0IxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hMlY1SUQwOVBTQmNJaVJ5WldaY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkWEpwSUQwZ1oyVjBSRzlqZFcxbGJuUlZjbWtvYzJOb1pXMWhXMnRsZVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RYSnBJQ1ltSUhSb2FYTXVjMk5vWlcxaGMxdDFjbWxkSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnZEdocGN5NXRhWE56YVc1blRXRndXM1Z5YVYwZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRhWE56YVc1blRXRndXM1Z5YVYwZ1BTQjFjbWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlPMXh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WVdSa1UyTm9aVzFoSUQwZ1puVnVZM1JwYjI0Z0tIVnliQ3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdMeTl2ZG1WeWJHOWhaRnh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkWEpzSUNFOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdjMk5vWlcxaElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFZ5YkNBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JSFZ5YkM1cFpDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qYUdWdFlTQTlJSFZ5YkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFZ5YkNBOUlITmphR1Z0WVM1cFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZFhKc0lEMDlQU0JuWlhSRWIyTjFiV1Z1ZEZWeWFTaDFjbXdwSUNzZ1hDSWpYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdVbVZ0YjNabElHVnRjSFI1SUdaeVlXZHRaVzUwWEc0Z0lDQWdJQ0FnSUhWeWJDQTlJR2RsZEVSdlkzVnRaVzUwVlhKcEtIVnliQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9hWE11YzJOb1pXMWhjMXQxY214ZElEMGdjMk5vWlcxaE8xeHVJQ0FnSUdSbGJHVjBaU0IwYUdsekxtMXBjM05wYm1kTllYQmJkWEpzWFR0Y2JpQWdJQ0J1YjNKdFUyTm9aVzFoS0hOamFHVnRZU3dnZFhKc0tUdGNiaUFnSUNCMGFHbHpMbk5sWVhKamFGTmphR1Z0WVhNb2MyTm9aVzFoTENCMWNtd3BPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVaMlYwVTJOb1pXMWhUV0Z3SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIWmhjaUJ0WVhBZ1BTQjdmVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2RHaHBjeTV6WTJobGJXRnpLU0I3WEc0Z0lDQWdJQ0FnSUcxaGNGdHJaWGxkSUQwZ2RHaHBjeTV6WTJobGJXRnpXMnRsZVYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnRZWEE3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVuWlhSVFkyaGxiV0ZWY21seklEMGdablZ1WTNScGIyNGdLR1pwYkhSbGNsSmxaMFY0Y0NrZ2UxeHVJQ0FnSUhaaGNpQnNhWE4wSUQwZ1cxMDdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhSb2FYTXVjMk5vWlcxaGN5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXWnBiSFJsY2xKbFowVjRjQ0I4ZkNCbWFXeDBaWEpTWldkRmVIQXVkR1Z6ZENoclpYa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNhWE4wTG5CMWMyZ29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiR2x6ZER0Y2JuMDdYRzVjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG1kbGRFMXBjM05wYm1kVmNtbHpJRDBnWm5WdVkzUnBiMjRnS0dacGJIUmxjbEpsWjBWNGNDa2dlMXh1SUNBZ0lIWmhjaUJzYVhOMElEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIUm9hWE11YldsemMybHVaMDFoY0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdacGJIUmxjbEpsWjBWNGNDQjhmQ0JtYVd4MFpYSlNaV2RGZUhBdWRHVnpkQ2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2FYTjBMbkIxYzJnb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JHbHpkRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbVJ5YjNCVFkyaGxiV0Z6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lIUm9hWE11YzJOb1pXMWhjeUE5SUh0OU8xeHVJQ0FnSUhSb2FYTXVjbVZ6WlhRb0tUdGNibjA3WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1eVpYTmxkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMGFHbHpMbTFwYzNOcGJtY2dQU0JiWFR0Y2JpQWdJQ0IwYUdsekxtMXBjM05wYm1kTllYQWdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxtVnljbTl5Y3lBOUlGdGRPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkJiR3dnUFNCbWRXNWpkR2x2YmlBb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHRjBhRkJoY25SekxDQnpZMmhsYldGUVlYUm9VR0Z5ZEhNc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrZ2UxeHVJQ0FnSUhaaGNpQjBiM0JNWlhabGJEdGNiaUFnSUNCelkyaGxiV0VnUFNCMGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hOamFHVnRZU2s3WEc0Z0lDQWdhV1lnS0NGelkyaGxiV0VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpZMmhsYldFZ2FXNXpkR0Z1WTJWdlppQldZV3hwWkdGMGFXOXVSWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbk11Y0hWemFDaHpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyTm9aVzFoTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCemRHRnlkRVZ5Y205eVEyOTFiblFnUFNCMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnN1hHNGdJQ0FnZG1GeUlHWnliM3BsYmtsdVpHVjRMQ0J6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoU1c1a1pYZ2dQU0J1ZFd4c0xDQnpZMkZ1Ym1Wa1UyTm9aVzFoYzBsdVpHVjRJRDBnYm5Wc2JEdGNiaUFnSUNCcFppQW9kR2hwY3k1amFHVmphMUpsWTNWeWMybDJaU0FtSmlCa1lYUmhJQ1ltSUhSNWNHVnZaaUJrWVhSaElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnSUNCMGIzQk1aWFpsYkNBOUlDRjBhR2x6TG5OallXNXVaV1F1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVnQwYUdsekxuWmhiR2xrWVhSbFpGTmphR1Z0WVhOTFpYbGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJOb1pXMWhTVzVrWlhnZ1BTQmtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjB1YVc1a1pYaFBaaWh6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5qYUdWdFlVbHVaR1Y0SUNFOVBTQXRNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKeklEMGdkR2hwY3k1bGNuSnZjbk11WTI5dVkyRjBLR1JoZEdGYmRHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1WFZ0elkyaGxiV0ZKYm1SbGVGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWFYTkdjbTk2Wlc0b1pHRjBZU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5YjNwbGJrbHVaR1Y0SUQwZ2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdUxtbHVaR1Y0VDJZb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm5KdmVtVnVTVzVrWlhnZ0lUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1p5YjNwbGJsTmphR1Z0WVVsdVpHVjRJRDBnZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjMXRtY205NlpXNUpibVJsZUYwdWFXNWtaWGhQWmloelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG1jbTk2Wlc1VFkyaGxiV0ZKYm1SbGVDQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQjBhR2x6TG1WeWNtOXljeTVqYjI1allYUW9kR2hwY3k1elkyRnVibVZrUm5KdmVtVnVWbUZzYVdSaGRHbHZia1Z5Y205eWMxdG1jbTk2Wlc1SmJtUmxlRjFiWm5KdmVtVnVVMk5vWlcxaFNXNWtaWGhkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMk5oYm01bFpDNXdkWE5vS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1QySnFaV04wTG1selJuSnZlbVZ1S0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWm5KdmVtVnVTVzVrWlhnZ1BUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZlbVZ1U1c1a1pYZ2dQU0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzR1YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxiaTV3ZFhOb0tHUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmxOamFHVnRZWE11Y0hWemFDaGJYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaFNXNWtaWGdnUFNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0Z6VzJaeWIzcGxia2x1WkdWNFhTNXNaVzVuZEdnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRnpXMlp5YjNwbGJrbHVaR1Y0WFZ0elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaFNXNWtaWGhkSUQwZ2MyTm9aVzFoTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVWbUZzYVdSaGRHbHZia1Z5Y205eWMxdG1jbTk2Wlc1SmJtUmxlRjFiYzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVVsdVpHVjRYU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aR0YwWVN3Z2RHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1TENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nVzEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hrWVhSaExDQjBhR2x6TG5aaGJHbGtZWFJwYjI1RmNuSnZjbk5MWlhrc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCYlhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlNVVWdOeTg0SUhkdmNtdGhjbTkxYm1SY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ0MGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGxkSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmJkR2hwY3k1MllXeHBaR0YwYVc5dVJYSnliM0p6UzJWNVhTQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lITmpZVzV1WldSVFkyaGxiV0Z6U1c1a1pYZ2dQU0JrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ0MGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGxkVzNOallXNXVaV1JUWTJobGJXRnpTVzVrWlhoZElEMGdjMk5vWlcxaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdDBhR2x6TG5aaGJHbGtZWFJwYjI1RmNuSnZjbk5MWlhsZFczTmpZVzV1WldSVFkyaGxiV0Z6U1c1a1pYaGRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdaWEp5YjNKRGIzVnVkQ0E5SUhSb2FYTXVaWEp5YjNKekxteGxibWQwYUR0Y2JpQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRbUZ6YVdNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVk9kVzFsY21saktHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxVM1J5YVc1bktHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxRWEp5WVhrb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNRb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWSWVYQmxjbTFsWkdsaEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxSbTl5YldGMEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxSR1ZtYVc1bFpFdGxlWGR2Y21SektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCdWRXeHNPMXh1WEc0Z0lDQWdhV1lnS0hSdmNFeGxkbVZzS1NCN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoMGFHbHpMbk5qWVc1dVpXUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhWFJsYlNBOUlIUm9hWE11YzJOaGJtNWxaQzV3YjNBb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JwZEdWdFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsTmphR1Z0WVhNZ1BTQmJYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWlhKeWIzSWdmSHdnWlhKeWIzSkRiM1Z1ZENBaFBUMGdkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dvWkdGMFlWQmhkR2hRWVhKMGN5QW1KaUJrWVhSaFVHRjBhRkJoY25SekxteGxibWQwYUNrZ2ZId2dLSE5qYUdWdFlWQmhkR2hRWVhKMGN5QW1KaUJ6WTJobGJXRlFZWFJvVUdGeWRITXViR1Z1WjNSb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JoZEdGUVlYSjBJRDBnS0dSaGRHRlFZWFJvVUdGeWRITWdKaVlnWkdGMFlWQmhkR2hRWVhKMGN5NXNaVzVuZEdncElEOGdYQ0pjSWlBcklHUmhkR0ZRWVhSb1VHRnlkSE11Y0c5d0tDa2dPaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITmphR1Z0WVZCaGNuUWdQU0FvYzJOb1pXMWhVR0YwYUZCaGNuUnpJQ1ltSUhOamFHVnRZVkJoZEdoUVlYSjBjeTVzWlc1bmRHZ3BJRDhnWENKY0lpQXJJSE5qYUdWdFlWQmhkR2hRWVhKMGN5NXdiM0FvS1NBNklHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJR1Z5Y205eUxuQnlaV1pwZUZkcGRHZ29aR0YwWVZCaGNuUXNJSE5qYUdWdFlWQmhjblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WbWFYaEZjbkp2Y25Nb1pYSnliM0pEYjNWdWRDd2daR0YwWVZCaGNuUXNJSE5qYUdWdFlWQmhjblFwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRkpibVJsZUNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyWnliM3BsYmtsdVpHVjRYVnR6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoU1c1a1pYaGRJRDBnZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvYzNSaGNuUkZjbkp2Y2tOdmRXNTBLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSE5qWVc1dVpXUlRZMmhsYldGelNXNWtaWGdnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZVnQwYUdsekxuWmhiR2xrWVhScGIyNUZjbkp2Y25OTFpYbGRXM05qWVc1dVpXUlRZMmhsYldGelNXNWtaWGhkSUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb2MzUmhjblJGY25KdmNrTnZkVzUwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrN1hHNTlPMXh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZHYjNKdFlYUWdQU0JtZFc1amRHbHZiaUFvWkdGMFlTd2djMk5vWlcxaEtTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFdVptOXliV0YwSUNFOVBTQW5jM1J5YVc1bkp5QjhmQ0FoZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKelczTmphR1Z0WVM1bWIzSnRZWFJkS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdaWEp5YjNKTlpYTnpZV2RsSUQwZ2RHaHBjeTVtYjNKdFlYUldZV3hwWkdGMGIzSnpXM05qYUdWdFlTNW1iM0p0WVhSZExtTmhiR3dvYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdWeWNtOXlUV1Z6YzJGblpTQTlQVDBnSjNOMGNtbHVaeWNnZkh3Z2RIbHdaVzltSUdWeWNtOXlUV1Z6YzJGblpTQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1R1QxSk5RVlJmUTFWVFZFOU5MQ0I3YldWemMyRm5aVG9nWlhKeWIzSk5aWE56WVdkbGZTd2dKeWNzSUNjdlptOXliV0YwSnl3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHVnljbTl5VFdWemMyRm5aU0FtSmlCMGVYQmxiMllnWlhKeWIzSk5aWE56WVdkbElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtaUFVrMUJWRjlEVlZOVVQwMHNJSHR0WlhOellXZGxPaUJsY25KdmNrMWxjM05oWjJVdWJXVnpjMkZuWlNCOGZDQmNJajljSW4wc0lHVnljbTl5VFdWemMyRm5aUzVrWVhSaFVHRjBhQ0I4ZkNBbkp5d2daWEp5YjNKTlpYTnpZV2RsTG5OamFHVnRZVkJoZEdnZ2ZId2dYQ0l2Wm05eWJXRjBYQ0lzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxSR1ZtYVc1bFpFdGxlWGR2Y21SeklEMGdablZ1WTNScGIyNGdLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaFcydGxlVjBnUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2RtRnNhV1JoZEdsdmJrWjFibU4wYVc5dWN5QTlJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVWMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZG1Gc2FXUmhkR2x2YmtaMWJtTjBhVzl1Y3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1oxYm1NZ1BTQjJZV3hwWkdGMGFXOXVSblZ1WTNScGIyNXpXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUdaMWJtTW9aR0YwWVN3Z2MyTm9aVzFoVzJ0bGVWMHNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVnpkV3gwSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdjbVZ6ZFd4MElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11UzBWWlYwOVNSRjlEVlZOVVQwMHNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJyWlhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJSEpsYzNWc2RGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLUzV3Y21WbWFYaFhhWFJvS0c1MWJHd3NJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbGMzVnNkQ0FtSmlCMGVYQmxiMllnY21WemRXeDBJRDA5UFNBbmIySnFaV04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJqYjJSbElEMGdjbVZ6ZFd4MExtTnZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyUmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lVVnljbTl5UTI5a1pYTmJZMjlrWlYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNWtaV1pwYm1Wa0lHVnljbTl5SUdOdlpHVWdLSFZ6WlNCa1pXWnBibVZGY25KdmNpazZJQ2NnS3lCamIyUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbElEMGdSWEp5YjNKRGIyUmxjMXRqYjJSbFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQmpiMlJsSUNFOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxJRDBnUlhKeWIzSkRiMlJsY3k1TFJWbFhUMUpFWDBOVlUxUlBUVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHMWxjM05oWjJWUVlYSmhiWE1nUFNBb2RIbHdaVzltSUhKbGMzVnNkQzV0WlhOellXZGxJRDA5UFNBbmIySnFaV04wSnlrZ1B5QnlaWE4xYkhRdWJXVnpjMkZuWlNBNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNU9pQnJaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVNklISmxjM1ZzZEM1dFpYTnpZV2RsSUh4OElGd2lQMXdpWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjMk5vWlcxaFVHRjBhQ0E5SUhKbGMzVnNkQzV6WTJobGJXRlFZWFJvSUh4OElDaGNJaTljSWlBcklHdGxlUzV5WlhCc1lXTmxLQzkrTDJjc0lDZCtNQ2NwTG5KbGNHeGhZMlVvTDF4Y0x5OW5MQ0FuZmpFbktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1kyOWtaU3dnYldWemMyRm5aVkJoY21GdGN5d2djbVZ6ZFd4MExtUmhkR0ZRWVhSb0lIeDhJRzUxYkd3c0lITmphR1Z0WVZCaGRHZ3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQnlaV04xY25OcGRtVkRiMjF3WVhKbEtFRXNJRUlwSUh0Y2JpQWdJQ0JwWmlBb1FTQTlQVDBnUWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRUVnSmlZZ1FpQW1KaUIwZVhCbGIyWWdRU0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdRaUE5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hCS1NBaFBUMGdRWEp5WVhrdWFYTkJjbkpoZVNoQ0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29RU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoQkxteGxibWQwYUNBaFBUMGdRaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRUV1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhKbFkzVnljMmwyWlVOdmJYQmhjbVVvUVZ0cFhTd2dRbHRwWFNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCclpYazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3RsZVNCcGJpQkJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFSmJhMlY1WFNBOVBUMGdkVzVrWldacGJtVmtJQ1ltSUVGYmEyVjVYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHdGxlU0JwYmlCQ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VGYmEyVjVYU0E5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JRUpiYTJWNVhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d0bGVTQnBiaUJCS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z5WldOMWNuTnBkbVZEYjIxd1lYSmxLRUZiYTJWNVhTd2dRbHRyWlhsZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1OVhHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRbUZ6YVdNZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVSmhjMmxqS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYRzRnSUNBZ2RtRnlJR1Z5Y205eU8xeHVJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZVZVhCbEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSXVjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmNJblI1Y0dWY0lpazdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZGYm5WdEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSXVjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmNJblI1Y0dWY0lpazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVWVYQmxJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZVZVhCbEtHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0V1ZEhsd1pTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdaR0YwWVZSNWNHVWdQU0IwZVhCbGIyWWdaR0YwWVR0Y2JpQWdJQ0JwWmlBb1pHRjBZU0E5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCa1lYUmhWSGx3WlNBOUlGd2liblZzYkZ3aU8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hrWVhSaEtTa2dlMXh1SUNBZ0lDQWdJQ0JrWVhSaFZIbHdaU0E5SUZ3aVlYSnlZWGxjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdGc2JHOTNaV1JVZVhCbGN5QTlJSE5qYUdWdFlTNTBlWEJsTzF4dUlDQWdJR2xtSUNnaFFYSnlZWGt1YVhOQmNuSmhlU2hoYkd4dmQyVmtWSGx3WlhNcEtTQjdYRzRnSUNBZ0lDQWdJR0ZzYkc5M1pXUlVlWEJsY3lBOUlGdGhiR3h2ZDJWa1ZIbHdaWE5kTzF4dUlDQWdJSDFjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWVd4c2IzZGxaRlI1Y0dWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBlWEJsSUQwZ1lXeHNiM2RsWkZSNWNHVnpXMmxkTzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdaR0YwWVZSNWNHVWdmSHdnS0hSNWNHVWdQVDA5SUZ3aWFXNTBaV2RsY2x3aUlDWW1JR1JoZEdGVWVYQmxJRDA5UFNCY0ltNTFiV0psY2x3aUlDWW1JQ2hrWVhSaElDVWdNU0E5UFQwZ01Da3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrbE9Wa0ZNU1VSZlZGbFFSU3dnZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJrWVhSaFZIbHdaU3hjYmlBZ0lDQWdJQ0FnWlhod1pXTjBaV1E2SUdGc2JHOTNaV1JVZVhCbGN5NXFiMmx1S0Z3aUwxd2lLVnh1SUNBZ0lIMHNJQ2NuTENBbkp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxSVzUxYlNBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFJXNTFiU2hrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9jMk5vWlcxaFcxd2laVzUxYlZ3aVhTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITmphR1Z0WVZ0Y0ltVnVkVzFjSWwwdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVkVzFXWVd3Z1BTQnpZMmhsYldGYlhDSmxiblZ0WENKZFcybGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVmpkWEp6YVhabFEyOXRjR0Z5WlNoa1lYUmhMQ0JsYm5WdFZtRnNLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUZUbFZOWDAxSlUwMUJWRU5JTENCN2RtRnNkV1U2SUNoMGVYQmxiMllnU2xOUFRpQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElEOGdTbE5QVGk1emRISnBibWRwWm5rb1pHRjBZU2tnT2lCa1lYUmhmU3dnSnljc0lDY25MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPZFcxbGNtbGpJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZPZFcxbGNtbGpLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtRnNhV1JoZEdWTmRXeDBhWEJzWlU5bUtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxUV2x1VFdGNEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCMGFHbHpMblpoYkdsa1lYUmxUbUZPS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHVJQ0FnSUNBZ0lDQjhmQ0J1ZFd4c08xeHVmVHRjYmx4dWRtRnlJRU5NVDFORlgwVk9UMVZIU0Y5TVQxY2dQU0JOWVhSb0xuQnZkeWd5TENBdE5URXBPMXh1ZG1GeUlFTk1UMU5GWDBWT1QxVkhTRjlJU1VkSUlEMGdNU0F0SUVOTVQxTkZYMFZPVDFWSFNGOU1UMWM3WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlUxMWJIUnBjR3hsVDJZZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVMTFiSFJwY0d4bFQyWW9aR0YwWVN3Z2MyTm9aVzFoS1NCN1hHNGdJQ0FnZG1GeUlHMTFiSFJwY0d4bFQyWWdQU0J6WTJobGJXRXViWFZzZEdsd2JHVlBaaUI4ZkNCelkyaGxiV0V1WkdsMmFYTnBZbXhsUW5rN1hHNGdJQ0FnYVdZZ0tHMTFiSFJwY0d4bFQyWWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoSUQwOVBTQmNJbTUxYldKbGNsd2lLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaVzFoYVc1a1pYSWdQU0FvWkdGMFlTQXZJRzExYkhScGNHeGxUMllwSUNVZ01UdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGJXRnBibVJsY2lBK1BTQkRURTlUUlY5RlRrOVZSMGhmVEU5WElDWW1JSEpsYldGcGJtUmxjaUE4SUVOTVQxTkZYMFZPVDFWSFNGOUlTVWRJS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazVWVFVKRlVsOU5WVXhVU1ZCTVJWOVBSaXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMTFiSFJwY0d4bFQyWTZJRzExYkhScGNHeGxUMlpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUV2x1VFdGNElEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVk5hVzVOWVhnb1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrWVhSaElDRTlQU0JjSW01MWJXSmxjbHdpS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jMk5vWlcxaExtMXBibWx0ZFcwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVNBOElITmphR1Z0WVM1dGFXNXBiWFZ0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMazVWVFVKRlVsOU5TVTVKVFZWTkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHUmhkR0VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdWFXMTFiVG9nYzJOb1pXMWhMbTFwYm1sdGRXMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lDY25MQ0FuTDIxcGJtbHRkVzBuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoelkyaGxiV0V1WlhoamJIVnphWFpsVFdsdWFXMTFiU0FtSmlCa1lYUmhJRDA5UFNCelkyaGxiV0V1YldsdWFXMTFiU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NU9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVc1cGJYVnRPaUJ6WTJobGJXRXViV2x1YVcxMWJWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2WlhoamJIVnphWFpsVFdsdWFXMTFiU2NzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dFlYaHBiWFZ0SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0VnUGlCelkyaGxiV0V1YldGNGFXMTFiU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NU9WVTFDUlZKZlRVRllTVTFWVFN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCa1lYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZUdsdGRXMDZJSE5qYUdWdFlTNXRZWGhwYlhWdFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0WVhocGJYVnRKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhMbVY0WTJ4MWMybDJaVTFoZUdsdGRXMGdKaVlnWkdGMFlTQTlQVDBnYzJOb1pXMWhMbTFoZUdsdGRXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVRsVk5Ra1ZTWDAxQldFbE5WVTFmUlZoRFRGVlRTVlpGTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdSaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0YVcxMWJUb2djMk5vWlcxaExtMWhlR2x0ZFcxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMlY0WTJ4MWMybDJaVTFoZUdsdGRXMG5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPWVU0Z1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVNWhUaWhrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnSVQwOUlGd2liblZ0WW1WeVhDSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGMwNWhUaWhrWVhSaEtTQTlQVDBnZEhKMVpTQjhmQ0JrWVhSaElEMDlQU0JKYm1acGJtbDBlU0I4ZkNCa1lYUmhJRDA5UFNBdFNXNW1hVzVwZEhrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NU9WVTFDUlZKZlRrOVVYMEZmVGxWTlFrVlNMQ0I3ZG1Gc2RXVTZJR1JoZEdGOUxDQW5KeXdnSnk5MGVYQmxKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVk4wY21sdVp5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxVM1J5YVc1bktHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11ZG1Gc2FXUmhkR1ZUZEhKcGJtZE1aVzVuZEdnb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVlRkSEpwYm1kUVlYUjBaWEp1S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHVJQ0FnSUNBZ0lDQjhmQ0J1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWVGRISnBibWRNWlc1bmRHZ2dQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVk4wY21sdVoweGxibWQwYUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ0lUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWJXbHVUR1Z1WjNSb0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWJHVnVaM1JvSUR3Z2MyTm9aVzFoTG0xcGJreGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVUVkZKSlRrZGZURVZPUjFSSVgxTklUMUpVTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVnVaM1JvT2lCa1lYUmhMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdE9pQnpZMmhsYldFdWJXbHVUR1Z1WjNSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0YVc1TVpXNW5kR2duTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWJXRjRUR1Z1WjNSb0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JoZEdFdWJHVnVaM1JvSUQ0Z2MyTm9aVzFoTG0xaGVFeGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVUVkZKSlRrZGZURVZPUjFSSVgweFBUa2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2c2SUdSaGRHRXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhlR2x0ZFcwNklITmphR1Z0WVM1dFlYaE1aVzVuZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMjFoZUV4bGJtZDBhQ2NzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlZOMGNtbHVaMUJoZEhSbGNtNGdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVk4wY21sdVoxQmhkSFJsY200b1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrWVhSaElDRTlQU0JjSW5OMGNtbHVaMXdpSUh4OElDaDBlWEJsYjJZZ2MyTm9aVzFoTG5CaGRIUmxjbTRnSVQwOUlGd2ljM1J5YVc1blhDSWdKaVlnSVNoelkyaGxiV0V1Y0dGMGRHVnliaUJwYm5OMFlXNWpaVzltSUZKbFowVjRjQ2twS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdjbVZuWlhod08xeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWNHRjBkR1Z5YmlCcGJuTjBZVzVqWlc5bUlGSmxaMFY0Y0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaV2RsZUhBZ1BTQnpZMmhsYldFdWNHRjBkR1Z5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpYjJSNUxDQm1iR0ZuY3lBOUlDY25PMXh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJtYjNJZ2NtVm5kV3hoY2lCbGVIQnlaWE56YVc5dUlHeHBkR1Z5WVd4elhHNGdJQ0FnSUNBZ0lDOHZJRUJ6WldVZ2FIUjBjRG92TDNkM2R5NWxZMjFoTFdsdWRHVnlibUYwYVc5dVlXd3ViM0puTDJWamJXRXRNall5THpVdU1TOGpjMlZqTFRjdU9DNDFYRzRnSUNBZ0lDQWdJSFpoY2lCc2FYUmxjbUZzSUQwZ2MyTm9aVzFoTG5CaGRIUmxjbTR1YldGMFkyZ29MMTVjWEM4b0xpc3BYRnd2S0Z0cGJXZGRLaWtrTHlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hzYVhSbGNtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmliMlI1SUQwZ2JHbDBaWEpoYkZzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdac1lXZHpJRDBnYkdsMFpYSmhiRnN5WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrZ1BTQnpZMmhsYldFdWNHRjBkR1Z5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaV2RsZUhBZ1BTQnVaWGNnVW1WblJYaHdLR0p2Wkhrc0lHWnNZV2R6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGeVpXZGxlSEF1ZEdWemRDaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxsTlVVa2xPUjE5UVFWUlVSVkpPTENCN2NHRjBkR1Z5YmpvZ2MyTm9aVzFoTG5CaGRIUmxjbTU5TENBbkp5d2dKeTl3WVhSMFpYSnVKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVUZ5Y21GNUlEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkJjbkpoZVNoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lHbG1JQ2doUVhKeVlYa3VhWE5CY25KaGVTaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkbUZzYVdSaGRHVkJjbkpoZVV4bGJtZDBhQ2hrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVGeWNtRjVWVzVwY1hWbFNYUmxiWE1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWQmNuSmhlVWwwWlcxektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkJjbkpoZVV4bGJtZDBhQ0E5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUVhKeVlYbE1aVzVuZEdnb1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdkbUZ5SUdWeWNtOXlPMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRXViV2x1U1hSbGJYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ1BDQnpZMmhsYldFdWJXbHVTWFJsYlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlJRDBnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtGU1VrRlpYMHhGVGtkVVNGOVRTRTlTVkN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxibWQwYURvZ1pHRjBZUzVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV2x1YVcxMWJUb2djMk5vWlcxaExtMXBia2wwWlcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTl0YVc1SmRHVnRjeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dFlYaEpkR1Z0Y3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoTG14bGJtZDBhQ0ErSUhOamFHVnRZUzV0WVhoSmRHVnRjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVRVkpTUVZsZlRFVk9SMVJJWDB4UFRrY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlc1bmRHZzZJR1JoZEdFdWJHVnVaM1JvTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxaGVHbHRkVzA2SUhOamFHVnRZUzV0WVhoSmRHVnRjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdmJXRjRTWFJsYlhNbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9aWEp5YjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkJjbkpoZVZWdWFYRjFaVWwwWlcxeklEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkJjbkpoZVZWdWFYRjFaVWwwWlcxektHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0V1ZFc1cGNYVmxTWFJsYlhNcElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrWVhSaExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnYVNBcklERTdJR29nUENCa1lYUmhMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWTNWeWMybDJaVU52YlhCaGNtVW9aR0YwWVZ0cFhTd2daR0YwWVZ0cVhTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eUlEMGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMa0ZTVWtGWlgxVk9TVkZWUlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmd4T2lCcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjBZMmd5T2lCcVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MM1Z1YVhGMVpVbDBaVzF6Snl3Z2JuVnNiQ3dnWkdGMFlTd2djMk5vWlcxaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVUZ5Y21GNVNYUmxiWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlVGeWNtRjVTWFJsYlhNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMbWwwWlcxeklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmxjbkp2Y2l3Z2FUdGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoelkyaGxiV0V1YVhSbGJYTXBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0JrWVhSaExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVNBOElITmphR1Z0WVM1cGRHVnRjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRmJhVjBzSUhOamFHVnRZUzVwZEdWdGMxdHBYU3dnVzJsZExDQmJYQ0pwZEdWdGMxd2lMQ0JwWFN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvSUNzZ1hDSXZYQ0lnS3lCcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHpZMmhsYldFdVlXUmthWFJwYjI1aGJFbDBaVzF6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhOamFHVnRZUzVoWkdScGRHbHZibUZzU1hSbGJYTWdQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMk5vWlcxaExtRmtaR2wwYVc5dVlXeEpkR1Z0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0lnUFNBb2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrRlNVa0ZaWDBGRVJFbFVTVTlPUVV4ZlNWUkZUVk1zSUh0OUxDQW5MeWNnS3lCcExDQW5MMkZrWkdsMGFXOXVZV3hKZEdWdGN5Y3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0cFhTd2djMk5vWlcxaExtRmtaR2wwYVc5dVlXeEpkR1Z0Y3l3Z1cybGRMQ0JiWENKaFpHUnBkR2x2Ym1Gc1NYUmxiWE5jSWwwc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNBcklGd2lMMXdpSUNzZ2FTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYVNBOUlEQTdJR2tnUENCa1lYUmhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRmJhVjBzSUhOamFHVnRZUzVwZEdWdGN5d2dXMmxkTENCYlhDSnBkR1Z0YzF3aVhTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0lDc2dYQ0l2WENJZ0t5QnBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMDdYRzVjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVDJKcVpXTjBJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZQWW1wbFkzUW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUdSaGRHRWdJVDA5SUZ3aWIySnFaV04wWENJZ2ZId2daR0YwWVNBOVBUMGdiblZzYkNCOGZDQkJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeHBaR0YwWlU5aWFtVmpkRTFwYmsxaGVGQnliM0JsY25ScFpYTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUlNaWEYxYVhKbFpGQnliM0JsY25ScFpYTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUlFjbTl3WlhKMGFXVnpLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsVDJKcVpXTjBSR1Z3Wlc1a1pXNWphV1Z6S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tWeHVJQ0FnSUNBZ0lDQjhmQ0J1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JOYVc1TllYaFFjbTl3WlhKMGFXVnpJRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZQWW1wbFkzUk5hVzVOWVhoUWNtOXdaWEowYVdWektHUmhkR0VzSUhOamFHVnRZU2tnZTF4dUlDQWdJSFpoY2lCclpYbHpJRDBnVDJKcVpXTjBMbXRsZVhNb1pHRjBZU2s3WEc0Z0lDQWdkbUZ5SUdWeWNtOXlPMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRXViV2x1VUhKdmNHVnlkR2xsY3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHJaWGx6TG14bGJtZDBhQ0E4SUhOamFHVnRZUzV0YVc1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1UFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlNVNUpUVlZOTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEhsRGIzVnVkRG9nYTJWNWN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXbHVhVzExYlRvZ2MyTm9aVzFoTG0xcGJsQnliM0JsY25ScFpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lDY25MQ0FuTDIxcGJsQnliM0JsY25ScFpYTW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvWlhKeWIzSXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoelkyaGxiV0V1YldGNFVISnZjR1Z5ZEdsbGN5QWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hyWlhsekxteGxibWQwYUNBK0lITmphR1Z0WVM1dFlYaFFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NVBRa3BGUTFSZlVGSlBVRVZTVkVsRlUxOU5RVmhKVFZWTkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRIbERiM1Z1ZERvZ2EyVjVjeTVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0YVcxMWJUb2djMk5vWlcxaExtMWhlRkJ5YjNCbGNuUnBaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkwyMWhlRkJ5YjNCbGNuUnBaWE1uTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JTWlhGMWFYSmxaRkJ5YjNCbGNuUnBaWE1nUFNCbWRXNWpkR2x2YmlCMllXeHBaR0YwWlU5aWFtVmpkRkpsY1hWcGNtVmtVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9jMk5vWlcxaExuSmxjWFZwY21Wa0lDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpZMmhsYldFdWNtVnhkV2x5WldRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnpZMmhsYldFdWNtVnhkV2x5WldSYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVZ0clpYbGRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWlhKeWIzSWdQU0IwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VDBKS1JVTlVYMUpGVVZWSlVrVkVMQ0I3YTJWNU9pQnJaWGw5TENBbkp5d2dKeTl5WlhGMWFYSmxaQzhuSUNzZ2FTd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUMkpxWldOMFVISnZjR1Z5ZEdsbGN5QTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxUMkpxWldOMFVISnZjR1Z5ZEdsbGN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4dUlDQWdJSFpoY2lCbGNuSnZjanRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z1pHRjBZU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdhMlY1VUc5cGJuUmxjbEJoZEdnZ1BTQmtZWFJoVUc5cGJuUmxjbEJoZEdnZ0t5QmNJaTljSWlBcklHdGxlUzV5WlhCc1lXTmxLQzkrTDJjc0lDZCtNQ2NwTG5KbGNHeGhZMlVvTDF4Y0x5OW5MQ0FuZmpFbktUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdadmRXNWtUV0YwWTJnZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5qYUdWdFlTNXdjbTl3WlhKMGFXVnpJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdjMk5vWlcxaExuQnliM0JsY25ScFpYTmJhMlY1WFNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM1Z1WkUxaGRHTm9JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lBOUlIUm9hWE11ZG1Gc2FXUmhkR1ZCYkd3b1pHRjBZVnRyWlhsZExDQnpZMmhsYldFdWNISnZjR1Z5ZEdsbGMxdHJaWGxkTENCYmEyVjVYU3dnVzF3aWNISnZjR1Z5ZEdsbGMxd2lMQ0JyWlhsZExDQnJaWGxRYjJsdWRHVnlVR0YwYUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tITmphR1Z0WVM1d1lYUjBaWEp1VUhKdmNHVnlkR2xsY3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQndZWFIwWlhKdVMyVjVJR2x1SUhOamFHVnRZUzV3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaV2RsZUhBZ1BTQnVaWGNnVW1WblJYaHdLSEJoZEhSbGNtNUxaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV2RsZUhBdWRHVnpkQ2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmRXNWtUV0YwWTJnZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSWdQU0IwYUdsekxuWmhiR2xrWVhSbFFXeHNLR1JoZEdGYmEyVjVYU3dnYzJOb1pXMWhMbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpXM0JoZEhSbGNtNUxaWGxkTENCYmEyVjVYU3dnVzF3aWNHRjBkR1Z5YmxCeWIzQmxjblJwWlhOY0lpd2djR0YwZEdWeWJrdGxlVjBzSUd0bGVWQnZhVzUwWlhKUVlYUm9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2habTkxYm1STllYUmphQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOamFHVnRZUzVoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyWlhsUWIybHVkR1Z5VUdGMGFGMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHJaWGxRYjJsdWRHVnlVR0YwYUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaExtRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpJRDA5UFNCY0ltSnZiMnhsWVc1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWE5qYUdWdFlTNWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0IwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11VDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXl3Z2UydGxlVG9nYTJWNWZTd2dKeWNzSUNjdllXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTG5CeVpXWnBlRmRwZEdnb2EyVjVMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0clpYbGRMQ0J6WTJobGJXRXVZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE1zSUZ0clpYbGRMQ0JiWENKaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGMxd2lYU3dnYTJWNVVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeUFtSmlBaGRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iYTJWNVVHOXBiblJsY2xCaGRHaGRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyWlhsUWIybHVkR1Z5VUdGMGFGMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iYTJWNVVHOXBiblJsY2xCaGRHaGRJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnRsZVZCdmFXNTBaWEpRWVhSb1hUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQySnFaV04wUkdWd1pXNWtaVzVqYVdWeklEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVlBZbXBsWTNSRVpYQmxibVJsYm1OcFpYTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0IyWVhJZ1pYSnliM0k3WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzVrWlhCbGJtUmxibU5wWlhNZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCa1pYQkxaWGtnYVc0Z2MyTm9aVzFoTG1SbGNHVnVaR1Z1WTJsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdGYlpHVndTMlY1WFNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHUmxjQ0E5SUhOamFHVnRZUzVrWlhCbGJtUmxibU5wWlhOYlpHVndTMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHUmxjQ0E5UFQwZ1hDSnpkSEpwYm1kY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVZ0a1pYQmRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXU3dnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVG9nWkdWd1MyVjVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGMzTnBibWM2SUdSbGNGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBMbkJ5WldacGVGZHBkR2dvYm5Wc2JDd2daR1Z3UzJWNUtTNXdjbVZtYVhoWGFYUm9LRzUxYkd3c0lGd2laR1Z3Wlc1a1pXNWphV1Z6WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9aWEp5YjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JsY0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCa1pYQXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWEYxYVhKbFpFdGxlU0E5SUdSbGNGdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoa1lYUmhXM0psY1hWcGNtVmtTMlY1WFNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0lnUFNCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVQwSktSVU5VWDBSRlVFVk9SRVZPUTFsZlMwVlpMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3RsZVRvZ1pHVndTMlY1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVhOemFXNW5PaUJ5WlhGMWFYSmxaRXRsZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2NuTENBbkx5Y2dLeUJwTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcExuQnlaV1pwZUZkcGRHZ29iblZzYkN3Z1pHVndTMlY1S1M1d2NtVm1hWGhYYVhSb0tHNTFiR3dzSUZ3aVpHVndaVzVrWlc1amFXVnpYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtaGhibVJzWlVWeWNtOXlLR1Z5Y205eUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCa1pYQXNJRnRkTENCYlhDSmtaWEJsYm1SbGJtTnBaWE5jSWl3Z1pHVndTMlY1WFN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZEYjIxaWFXNWhkR2x2Ym5NZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVTnZiV0pwYm1GMGFXOXVjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuWmhiR2xrWVhSbFFXeHNUMllvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJSFJvYVhNdWRtRnNhV1JoZEdWQmJubFBaaWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlU5dVpVOW1LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsVG05MEtHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVnh1SUNBZ0lDQWdJQ0I4ZkNCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkJiR3hQWmlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFFXeHNUMllvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNiaUFnSUNCcFppQW9jMk5vWlcxaExtRnNiRTltSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCbGNuSnZjanRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSE5qYUdWdFlTNWhiR3hQWmk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzVmlVMk5vWlcxaElEMGdjMk5vWlcxaExtRnNiRTltVzJsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSWdQU0IwYUdsekxuWmhiR2xrWVhSbFFXeHNLR1JoZEdFc0lITjFZbE5qYUdWdFlTd2dXMTBzSUZ0Y0ltRnNiRTltWENJc0lHbGRMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVUZ1ZVU5bUlEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVkJibmxQWmloa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRXVZVzU1VDJZZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHVnljbTl5Y3lBOUlGdGRPMXh1SUNBZ0lIWmhjaUJ6ZEdGeWRFVnljbTl5UTI5MWJuUWdQU0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2c3WEc0Z0lDQWdkbUZ5SUc5c1pGVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpMQ0J2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNN1hHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ0lDQWdJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnWlhKeWIzSkJkRVZ1WkNBOUlIUnlkV1U3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6WTJobGJXRXVZVzU1VDJZdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2MzVmlVMk5vWlcxaElEMGdjMk5vWlcxaExtRnVlVTltVzJsZE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZja052ZFc1MElEMGdkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9PMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJSE4xWWxOamFHVnRZU3dnVzEwc0lGdGNJbUZ1ZVU5bVhDSXNJR2xkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlQVDBnYm5Wc2JDQW1KaUJsY25KdmNrTnZkVzUwSUQwOVBTQjBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSnpJRDBnZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvTUN3Z2MzUmhjblJGY25KdmNrTnZkVzUwS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3R1YjNkdVMyVjVJR2x1SUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyYm05M2JrdGxlVjBnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhMjV2ZDI1TFpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUIxYm10dWIzZHVTMlY1SUdsdUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnZiR1JMYm05M2JsQnliM0JsY25SNVVHRjBhSE5iZFc1cmJtOTNia3RsZVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzNWdWEyNXZkMjVMWlhsZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQnVaV1ZrSUhSdklHTnZiblJwYm5WbElHeHZiM0JwYm1jZ2MyOGdkMlVnWTJGMFkyZ2dZV3hzSUhSb1pTQndjbTl3WlhKMGVTQmtaV1pwYm1sMGFXOXVjeXdnWW5WMElIZGxJR1J2YmlkMElIZGhiblFnZEc4Z2NtVjBkWEp1SUdGdUlHVnljbTl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSkJkRVZ1WkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXljeTV3ZFhOb0tHVnljbTl5TG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKY0lpQXJJR2twTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKaGJubFBabHdpS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWlhKeWIzSkJkRVZ1WkNrZ2UxeHVJQ0FnSUNBZ0lDQmxjbkp2Y25NZ1BTQmxjbkp2Y25NdVkyOXVZMkYwS0hSb2FYTXVaWEp5YjNKekxuTnNhV05sS0hOMFlYSjBSWEp5YjNKRGIzVnVkQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWN5QTlJSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLREFzSUhOMFlYSjBSWEp5YjNKRGIzVnVkQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11UVU1WlgwOUdYMDFKVTFOSlRrY3NJSHQ5TENCY0lsd2lMQ0JjSWk5aGJubFBabHdpTENCbGNuSnZjbk1zSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ2ZWeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUGJtVlBaaUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsVDI1bFQyWW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0JwWmlBb2MyTm9aVzFoTG05dVpVOW1JRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUIyWVd4cFpFbHVaR1Y0SUQwZ2JuVnNiRHRjYmlBZ0lDQjJZWElnWlhKeWIzSnpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlITjBZWEowUlhKeWIzSkRiM1Z1ZENBOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdiMnhrVlc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNc0lHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjYmlBZ0lDQnBaaUFvZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0FnSUNBZ2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyTm9aVzFoTG05dVpVOW1MbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdlMzA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJSE4xWWxOamFHVnRZU0E5SUhOamFHVnRZUzV2Ym1WUFpsdHBYVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdaWEp5YjNKRGIzVnVkQ0E5SUhSb2FYTXVaWEp5YjNKekxteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCemRXSlRZMmhsYldFc0lGdGRMQ0JiWENKdmJtVlBabHdpTENCcFhTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFQwOUlHNTFiR3dnSmlZZ1pYSnliM0pEYjNWdWRDQTlQVDBnZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNhV1JKYm1SbGVDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkdsa1NXNWtaWGdnUFNCcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5Y3lBOUlIUm9hWE11WlhKeWIzSnpMbk5zYVdObEtEQXNJSE4wWVhKMFJYSnliM0pEYjNWdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NVBUa1ZmVDBaZlRWVk1WRWxRVEVVc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ3hPaUIyWVd4cFpFbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZURJNklHbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMQ0JjSWx3aUxDQmNJaTl2Ym1WUFpsd2lMQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0dWIzZHVTMlY1SUdsdUlIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0cmJtOTNia3RsZVYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iYTI1dmQyNUxaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCMWJtdHViM2R1UzJWNUlHbHVJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmRXNXJibTkzYmt0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzlzWkZWdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelczVnVhMjV2ZDI1TFpYbGRJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNKekxuQjFjMmdvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlHOXNaRlZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUc5c1pFdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIWmhiR2xrU1c1a1pYZ2dQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnWlhKeWIzSnpJRDBnWlhKeWIzSnpMbU52Ym1OaGRDaDBhR2x6TG1WeWNtOXljeTV6YkdsalpTaHpkR0Z5ZEVWeWNtOXlRMjkxYm5RcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbk1nUFNCMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNnd0xDQnpkR0Z5ZEVWeWNtOXlRMjkxYm5RcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrOU9SVjlQUmw5TlNWTlRTVTVITENCN2ZTd2dYQ0pjSWl3Z1hDSXZiMjVsVDJaY0lpd2daWEp5YjNKekxDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0p6SUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01Dd2djM1JoY25SRmNuSnZja052ZFc1MEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU1dmRDQTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxUbTkwS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNXViM1FnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUc5c1pFVnljbTl5UTI5MWJuUWdQU0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2c3WEc0Z0lDQWdkbUZ5SUc5c1pGVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpMQ0J2YkdSTGJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNN1hHNGdJQ0FnYVdZZ0tIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTdYRzRnSUNBZ0lDQWdJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdlMzA3WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVN3Z2MyTm9aVzFoTG01dmRDd2diblZzYkN3Z2JuVnNiQ3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LVHRjYmlBZ0lDQjJZWElnYm05MFJYSnliM0p6SUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb2IyeGtSWEp5YjNKRGIzVnVkQ2s3WEc0Z0lDQWdkR2hwY3k1bGNuSnZjbk1nUFNCMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNnd0xDQnZiR1JGY25KdmNrTnZkVzUwS1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQnZiR1JMYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hsY25KdmNpQTlQVDBnYm5Wc2JDQW1KaUJ1YjNSRmNuSnZjbk11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVUazlVWDFCQlUxTkZSQ3dnZTMwc0lGd2lYQ0lzSUZ3aUwyNXZkRndpTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMDdYRzVjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsU0hsd1pYSnRaV1JwWVNBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFEyOXRZbWx1WVhScGIyNXpLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnYVdZZ0tDRnpZMmhsYldFdWJHbHVhM01wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmxjbkp2Y2p0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOamFHVnRZUzVzYVc1cmN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiR1J2SUQwZ2MyTm9aVzFoTG14cGJtdHpXMmxkTzF4dUlDQWdJQ0FnSUNCcFppQW9iR1J2TG5KbGJDQTlQVDBnWENKa1pYTmpjbWxpWldSaWVWd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdWdGNHeGhkR1VnUFNCdVpYY2dWWEpwVkdWdGNHeGhkR1VvYkdSdkxtaHlaV1lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGc2JGQnlaWE5sYm5RZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SURBN0lHb2dQQ0IwWlcxd2JHRjBaUzUyWVhKT1lXMWxjeTVzWlc1bmRHZzdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doS0hSbGJYQnNZWFJsTG5aaGNrNWhiV1Z6VzJwZElHbHVJR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGc2JGQnlaWE5sYm5RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGc2JGQnlaWE5sYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJOb1pXMWhWWEpzSUQwZ2RHVnRjR3hoZEdVdVptbHNiRVp5YjIxUFltcGxZM1FvWkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhOMVlsTmphR1Z0WVNBOUlIdGNJaVJ5WldaY0lqb2djMk5vWlcxaFZYSnNmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pYSnliM0lnUFNCMGFHbHpMblpoYkdsa1lYUmxRV3hzS0dSaGRHRXNJSE4xWWxOamFHVnRZU3dnVzEwc0lGdGNJbXhwYm10elhDSXNJR2xkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OU8xeHVYRzR2THlCd1lYSnpaVlZTU1NncElHRnVaQ0J5WlhOdmJIWmxWWEpzS0NrZ1lYSmxJR1p5YjIwZ2FIUjBjSE02THk5bmFYTjBMbWRwZEdoMVlpNWpiMjB2TVRBNE9EZzFNRnh1THk4Z0lDQXRJQ0J5Wld4bFlYTmxaQ0JoY3lCd2RXSnNhV01nWkc5dFlXbHVJR0o1SUdGMWRHaHZjaUFvWENKWllXWm1iR1ZjSWlrZ0xTQnpaV1VnWTI5dGJXVnVkSE1nYjI0Z1oybHpkRnh1WEc1bWRXNWpkR2x2YmlCd1lYSnpaVlZTU1NoMWNtd3BJSHRjYmlBZ0lDQjJZWElnYlNBOUlGTjBjbWx1WnloMWNtd3BMbkpsY0d4aFkyVW9MMTVjWEhNcmZGeGNjeXNrTDJjc0lDY25LUzV0WVhSamFDZ3ZYaWhiWGpwY1hDOC9JMTByT2lrL0tGeGNMMXhjTHlnL09sdGVPa0JkS2lnL09qcGJYanBBWFNvcFAwQXBQeWdvVzE0NlhGd3ZQeU5kS2lrb1B6bzZLRnhjWkNvcEtUOHBLVDhvVzE0L0kxMHFLU2hjWEQ5YlhpTmRLaWsvS0NOYlhGeHpYRnhUWFNvcFB5OHBPMXh1SUNBZ0lDOHZJR0YxZEdodmNtbDBlU0E5SUNjdkx5Y2dLeUIxYzJWeUlDc2dKem9uSUNzZ2NHRnpjeUFuUUNjZ0t5Qm9iM04wYm1GdFpTQXJJQ2M2SnlCd2IzSjBYRzRnSUNBZ2NtVjBkWEp1SUNodElEOGdlMXh1SUNBZ0lDQWdJQ0JvY21WbU9pQnRXekJkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0J3Y205MGIyTnZiRG9nYlZzeFhTQjhmQ0FuSnl4Y2JpQWdJQ0FnSUNBZ1lYVjBhRzl5YVhSNU9pQnRXekpkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0JvYjNOME9pQnRXek5kSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0JvYjNOMGJtRnRaVG9nYlZzMFhTQjhmQ0FuSnl4Y2JpQWdJQ0FnSUNBZ2NHOXlkRG9nYlZzMVhTQjhmQ0FuSnl4Y2JpQWdJQ0FnSUNBZ2NHRjBhRzVoYldVNklHMWJObDBnZkh3Z0p5Y3NYRzRnSUNBZ0lDQWdJSE5sWVhKamFEb2diVnMzWFNCOGZDQW5KeXhjYmlBZ0lDQWdJQ0FnYUdGemFEb2diVnM0WFNCOGZDQW5KMXh1SUNBZ0lIMGdPaUJ1ZFd4c0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVnpiMngyWlZWeWJDaGlZWE5sTENCb2NtVm1LU0I3THk4Z1VrWkRJRE01T0RaY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUhKbGJXOTJaVVJ2ZEZObFoyMWxiblJ6S0dsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZkWFJ3ZFhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnYVc1d2RYUXVjbVZ3YkdGalpTZ3ZYaWhjWEM1Y1hDNC9LRnhjTDN3a0tTa3JMeXdnSnljcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2WEZ3dktGeGNMaWhjWEM5OEpDa3BLeTluTENBbkx5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndlhGd3ZYRnd1WEZ3dUpDOHNJQ2N2TGk0dkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hDOC9XMTVjWEM5ZEtpOW5MQ0JtZFc1amRHbHZiaUFvY0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3SUQwOVBTQW5MeTR1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUXVjRzl3S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvY0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRYUndkWFF1YW05cGJpZ25KeWt1Y21Wd2JHRmpaU2d2WGx4Y0x5OHNJR2x1Y0hWMExtTm9ZWEpCZENnd0tTQTlQVDBnSnk4bklEOGdKeThuSURvZ0p5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHaHlaV1lnUFNCd1lYSnpaVlZTU1Nob2NtVm1JSHg4SUNjbktUdGNiaUFnSUNCaVlYTmxJRDBnY0dGeWMyVlZVa2tvWW1GelpTQjhmQ0FuSnlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnSVdoeVpXWWdmSHdnSVdKaGMyVWdQeUJ1ZFd4c0lEb2dLR2h5WldZdWNISnZkRzlqYjJ3Z2ZId2dZbUZ6WlM1d2NtOTBiMk52YkNrZ0sxeHVJQ0FnSUNob2NtVm1MbkJ5YjNSdlkyOXNJSHg4SUdoeVpXWXVZWFYwYUc5eWFYUjVJRDhnYUhKbFppNWhkWFJvYjNKcGRIa2dPaUJpWVhObExtRjFkR2h2Y21sMGVTa2dLMXh1SUNBZ0lISmxiVzkyWlVSdmRGTmxaMjFsYm5SektHaHlaV1l1Y0hKdmRHOWpiMndnZkh3Z2FISmxaaTVoZFhSb2IzSnBkSGtnZkh3Z2FISmxaaTV3WVhSb2JtRnRaUzVqYUdGeVFYUW9NQ2tnUFQwOUlDY3ZKeUEvSUdoeVpXWXVjR0YwYUc1aGJXVWdPaUFvYUhKbFppNXdZWFJvYm1GdFpTQS9JQ2dvWW1GelpTNWhkWFJvYjNKcGRIa2dKaVlnSVdKaGMyVXVjR0YwYUc1aGJXVWdQeUFuTHljZ09pQW5KeWtnS3lCaVlYTmxMbkJoZEdodVlXMWxMbk5zYVdObEtEQXNJR0poYzJVdWNHRjBhRzVoYldVdWJHRnpkRWx1WkdWNFQyWW9KeThuS1NBcklERXBJQ3NnYUhKbFppNXdZWFJvYm1GdFpTa2dPaUJpWVhObExuQmhkR2h1WVcxbEtTa2dLMXh1SUNBZ0lDaG9jbVZtTG5CeWIzUnZZMjlzSUh4OElHaHlaV1l1WVhWMGFHOXlhWFI1SUh4OElHaHlaV1l1Y0dGMGFHNWhiV1VnUHlCb2NtVm1Mbk5sWVhKamFDQTZJQ2hvY21WbUxuTmxZWEpqYUNCOGZDQmlZWE5sTG5ObFlYSmphQ2twSUN0Y2JpQWdJQ0JvY21WbUxtaGhjMmc3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEVSdlkzVnRaVzUwVlhKcEtIVnlhU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjFjbWt1YzNCc2FYUW9KeU1uS1Zzd1hUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JtOXliVk5qYUdWdFlTaHpZMmhsYldFc0lHSmhjMlZWY21rcElIdGNiaUFnSUNCcFppQW9jMk5vWlcxaElDWW1JSFI1Y0dWdlppQnpZMmhsYldFZ1BUMDlJRndpYjJKcVpXTjBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0poYzJWVmNta2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1GelpWVnlhU0E5SUhOamFHVnRZUzVwWkR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2MyTm9aVzFoTG1sa0lEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpWVhObFZYSnBJRDBnY21WemIyeDJaVlZ5YkNoaVlYTmxWWEpwTENCelkyaGxiV0V1YVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOb1pXMWhMbWxrSUQwZ1ltRnpaVlZ5YVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHpZMmhsYldFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITmphR1Z0WVM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xVFkyaGxiV0VvYzJOb1pXMWhXMmxkTENCaVlYTmxWWEpwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaFd5Y2tjbVZtSjEwZ1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0ZiSnlSeVpXWW5YU0E5SUhKbGMyOXNkbVZWY213b1ltRnpaVlZ5YVN3Z2MyTm9aVzFoV3lja2NtVm1KMTBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2EyVjVJR2x1SUhOamFHVnRZU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHJaWGtnSVQwOUlGd2laVzUxYlZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmNtMVRZMmhsYldFb2MyTm9aVzFoVzJ0bGVWMHNJR0poYzJWVmNta3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHVm1ZWFZzZEVWeWNtOXlVbVZ3YjNKMFpYSW9iR0Z1WjNWaFoyVXBJSHRjYmlBZ0lDQnNZVzVuZFdGblpTQTlJR3hoYm1kMVlXZGxJSHg4SUNkbGJpYzdYRzVjYmlBZ0lDQjJZWElnWlhKeWIzSk5aWE56WVdkbGN5QTlJR3hoYm1kMVlXZGxjMXRzWVc1bmRXRm5aVjA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdFpYTnpZV2RsVkdWdGNHeGhkR1VnUFNCbGNuSnZjazFsYzNOaFoyVnpXMlZ5Y205eUxtTnZaR1ZkSUh4OElFVnljbTl5VFdWemMyRm5aWE5FWldaaGRXeDBXMlZ5Y205eUxtTnZaR1ZkTzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHMWxjM05oWjJWVVpXMXdiR0YwWlNBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0lsVnVhMjV2ZDI0Z1pYSnliM0lnWTI5a1pTQmNJaUFySUdWeWNtOXlMbU52WkdVZ0t5QmNJam9nWENJZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNobGNuSnZjaTV0WlhOellXZGxVR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JXVnpjMkZuWlZCaGNtRnRjeUE5SUdWeWNtOXlMbkJoY21GdGN6dGNiaUFnSUNBZ0lDQWdMeThnUVdSaGNIUmxaQ0JtY205dElFTnliMk5yWm05eVpDZHpJSE4xY0hCc1lXNTBLQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFsYzNOaFoyVlVaVzF3YkdGMFpTNXlaWEJzWVdObEtDOWNYSHNvVzE1N2ZWMHFLVnhjZlM5bkxDQm1kVzVqZEdsdmJpQW9kMmh2YkdVc0lIWmhjazVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpkV0pXWVd4MVpTQTlJRzFsYzNOaFoyVlFZWEpoYlhOYmRtRnlUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlITjFZbFpoYkhWbElEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxiMllnYzNWaVZtRnNkV1VnUFQwOUlDZHVkVzFpWlhJbklEOGdjM1ZpVm1Gc2RXVWdPaUIzYUc5c1pUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVHRjYm4xY2JseHVkbUZ5SUVWeWNtOXlRMjlrWlhNZ1BTQjdYRzRnSUNBZ1NVNVdRVXhKUkY5VVdWQkZPaUF3TEZ4dUlDQWdJRVZPVlUxZlRVbFRUVUZVUTBnNklERXNYRzRnSUNBZ1FVNVpYMDlHWDAxSlUxTkpUa2M2SURFd0xGeHVJQ0FnSUU5T1JWOVBSbDlOU1ZOVFNVNUhPaUF4TVN4Y2JpQWdJQ0JQVGtWZlQwWmZUVlZNVkVsUVRFVTZJREV5TEZ4dUlDQWdJRTVQVkY5UVFWTlRSVVE2SURFekxGeHVJQ0FnSUM4dklFNTFiV1Z5YVdNZ1pYSnliM0p6WEc0Z0lDQWdUbFZOUWtWU1gwMVZURlJKVUV4RlgwOUdPaUF4TURBc1hHNGdJQ0FnVGxWTlFrVlNYMDFKVGtsTlZVMDZJREV3TVN4Y2JpQWdJQ0JPVlUxQ1JWSmZUVWxPU1UxVlRWOUZXRU5NVlZOSlZrVTZJREV3TWl4Y2JpQWdJQ0JPVlUxQ1JWSmZUVUZZU1UxVlRUb2dNVEF6TEZ4dUlDQWdJRTVWVFVKRlVsOU5RVmhKVFZWTlgwVllRMHhWVTBsV1JUb2dNVEEwTEZ4dUlDQWdJRTVWVFVKRlVsOU9UMVJmUVY5T1ZVMUNSVkk2SURFd05TeGNiaUFnSUNBdkx5QlRkSEpwYm1jZ1pYSnliM0p6WEc0Z0lDQWdVMVJTU1U1SFgweEZUa2RVU0Y5VFNFOVNWRG9nTWpBd0xGeHVJQ0FnSUZOVVVrbE9SMTlNUlU1SFZFaGZURTlPUnpvZ01qQXhMRnh1SUNBZ0lGTlVVa2xPUjE5UVFWUlVSVkpPT2lBeU1ESXNYRzRnSUNBZ0x5OGdUMkpxWldOMElHVnljbTl5YzF4dUlDQWdJRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFKVGtsTlZVMDZJRE13TUN4Y2JpQWdJQ0JQUWtwRlExUmZVRkpQVUVWU1ZFbEZVMTlOUVZoSlRWVk5PaUF6TURFc1hHNGdJQ0FnVDBKS1JVTlVYMUpGVVZWSlVrVkVPaUF6TURJc1hHNGdJQ0FnVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpvZ016QXpMRnh1SUNBZ0lFOUNTa1ZEVkY5RVJWQkZUa1JGVGtOWlgwdEZXVG9nTXpBMExGeHVJQ0FnSUM4dklFRnljbUY1SUdWeWNtOXljMXh1SUNBZ0lFRlNVa0ZaWDB4RlRrZFVTRjlUU0U5U1ZEb2dOREF3TEZ4dUlDQWdJRUZTVWtGWlgweEZUa2RVU0Y5TVQwNUhPaUEwTURFc1hHNGdJQ0FnUVZKU1FWbGZWVTVKVVZWRk9pQTBNRElzWEc0Z0lDQWdRVkpTUVZsZlFVUkVTVlJKVDA1QlRGOUpWRVZOVXpvZ05EQXpMRnh1SUNBZ0lDOHZJRU4xYzNSdmJTOTFjMlZ5TFdSbFptbHVaV1FnWlhKeWIzSnpYRzRnSUNBZ1JrOVNUVUZVWDBOVlUxUlBUVG9nTlRBd0xGeHVJQ0FnSUV0RldWZFBVa1JmUTFWVFZFOU5PaUExTURFc1hHNGdJQ0FnTHk4Z1UyTm9aVzFoSUhOMGNuVmpkSFZ5WlZ4dUlDQWdJRU5KVWtOVlRFRlNYMUpGUmtWU1JVNURSVG9nTmpBd0xGeHVJQ0FnSUM4dklFNXZiaTF6ZEdGdVpHRnlaQ0IyWVd4cFpHRjBhVzl1SUc5d2RHbHZibk5jYmlBZ0lDQlZUa3RPVDFkT1gxQlNUMUJGVWxSWk9pQXhNREF3WEc1OU8xeHVkbUZ5SUVWeWNtOXlRMjlrWlV4dmIydDFjQ0E5SUh0OU8xeHVabTl5SUNoMllYSWdhMlY1SUdsdUlFVnljbTl5UTI5a1pYTXBJSHRjYmlBZ0lDQkZjbkp2Y2tOdlpHVk1iMjlyZFhCYlJYSnliM0pEYjJSbGMxdHJaWGxkWFNBOUlHdGxlVHRjYm4xY2JuWmhjaUJGY25KdmNrMWxjM05oWjJWelJHVm1ZWFZzZENBOUlIdGNiaUFnSUNCSlRsWkJURWxFWDFSWlVFVTZJRndpU1c1MllXeHBaQ0IwZVhCbE9pQjdkSGx3WlgwZ0tHVjRjR1ZqZEdWa0lIdGxlSEJsWTNSbFpIMHBYQ0lzWEc0Z0lDQWdSVTVWVFY5TlNWTk5RVlJEU0RvZ1hDSk9ieUJsYm5WdElHMWhkR05vSUdadmNqb2dlM1poYkhWbGZWd2lMRnh1SUNBZ0lFRk9XVjlQUmw5TlNWTlRTVTVIT2lCY0lrUmhkR0VnWkc5bGN5QnViM1FnYldGMFkyZ2dZVzU1SUhOamFHVnRZWE1nWm5KdmJTQmNYRndpWVc1NVQyWmNYRndpWENJc1hHNGdJQ0FnVDA1RlgwOUdYMDFKVTFOSlRrYzZJRndpUkdGMFlTQmtiMlZ6SUc1dmRDQnRZWFJqYUNCaGJua2djMk5vWlcxaGN5Qm1jbTl0SUZ4Y1hDSnZibVZQWmx4Y1hDSmNJaXhjYmlBZ0lDQlBUa1ZmVDBaZlRWVk1WRWxRVEVVNklGd2lSR0YwWVNCcGN5QjJZV3hwWkNCaFoyRnBibk4wSUcxdmNtVWdkR2hoYmlCdmJtVWdjMk5vWlcxaElHWnliMjBnWEZ4Y0ltOXVaVTltWEZ4Y0lqb2dhVzVrYVdObGN5QjdhVzVrWlhneGZTQmhibVFnZTJsdVpHVjRNbjFjSWl4Y2JpQWdJQ0JPVDFSZlVFRlRVMFZFT2lCY0lrUmhkR0VnYldGMFkyaGxjeUJ6WTJobGJXRWdabkp2YlNCY1hGd2libTkwWEZ4Y0lsd2lMRnh1SUNBZ0lDOHZJRTUxYldWeWFXTWdaWEp5YjNKelhHNGdJQ0FnVGxWTlFrVlNYMDFWVEZSSlVFeEZYMDlHT2lCY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ2JtOTBJR0VnYlhWc2RHbHdiR1VnYjJZZ2UyMTFiSFJwY0d4bFQyWjlYQ0lzWEc0Z0lDQWdUbFZOUWtWU1gwMUpUa2xOVlUwNklGd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5QnNaWE56SUhSb1lXNGdiV2x1YVcxMWJTQjdiV2x1YVcxMWJYMWNJaXhjYmlBZ0lDQk9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVNklGd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5QmxjWFZoYkNCMGJ5QmxlR05zZFhOcGRtVWdiV2x1YVcxMWJTQjdiV2x1YVcxMWJYMWNJaXhjYmlBZ0lDQk9WVTFDUlZKZlRVRllTVTFWVFRvZ1hDSldZV3gxWlNCN2RtRnNkV1Y5SUdseklHZHlaV0YwWlhJZ2RHaGhiaUJ0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4dUlDQWdJRTVWVFVKRlVsOU5RVmhKVFZWTlgwVllRMHhWVTBsV1JUb2dYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJR1Z4ZFdGc0lIUnZJR1Y0WTJ4MWMybDJaU0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4dUlDQWdJRTVWVFVKRlVsOU9UMVJmUVY5T1ZVMUNSVkk2SUZ3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCdWIzUWdZU0IyWVd4cFpDQnVkVzFpWlhKY0lpeGNiaUFnSUNBdkx5QlRkSEpwYm1jZ1pYSnliM0p6WEc0Z0lDQWdVMVJTU1U1SFgweEZUa2RVU0Y5VFNFOVNWRG9nWENKVGRISnBibWNnYVhNZ2RHOXZJSE5vYjNKMElDaDdiR1Z1WjNSb2ZTQmphR0Z5Y3lrc0lHMXBibWx0ZFcwZ2UyMXBibWx0ZFcxOVhDSXNYRzRnSUNBZ1UxUlNTVTVIWDB4RlRrZFVTRjlNVDA1SE9pQmNJbE4wY21sdVp5QnBjeUIwYjI4Z2JHOXVaeUFvZTJ4bGJtZDBhSDBnWTJoaGNuTXBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4dUlDQWdJRk5VVWtsT1IxOVFRVlJVUlZKT09pQmNJbE4wY21sdVp5QmtiMlZ6SUc1dmRDQnRZWFJqYUNCd1lYUjBaWEp1T2lCN2NHRjBkR1Z5Ym4xY0lpeGNiaUFnSUNBdkx5QlBZbXBsWTNRZ1pYSnliM0p6WEc0Z0lDQWdUMEpLUlVOVVgxQlNUMUJGVWxSSlJWTmZUVWxPU1UxVlRUb2dYQ0pVYjI4Z1ptVjNJSEJ5YjNCbGNuUnBaWE1nWkdWbWFXNWxaQ0FvZTNCeWIzQmxjblI1UTI5MWJuUjlLU3dnYldsdWFXMTFiU0I3YldsdWFXMTFiWDFjSWl4Y2JpQWdJQ0JQUWtwRlExUmZVRkpQVUVWU1ZFbEZVMTlOUVZoSlRWVk5PaUJjSWxSdmJ5QnRZVzU1SUhCeWIzQmxjblJwWlhNZ1pHVm1hVzVsWkNBb2UzQnliM0JsY25SNVEyOTFiblI5S1N3Z2JXRjRhVzExYlNCN2JXRjRhVzExYlgxY0lpeGNiaUFnSUNCUFFrcEZRMVJmVWtWUlZVbFNSVVE2SUZ3aVRXbHpjMmx1WnlCeVpYRjFhWEpsWkNCd2NtOXdaWEowZVRvZ2UydGxlWDFjSWl4Y2JpQWdJQ0JQUWtwRlExUmZRVVJFU1ZSSlQwNUJURjlRVWs5UVJWSlVTVVZUT2lCY0lrRmtaR2wwYVc5dVlXd2djSEp2Y0dWeWRHbGxjeUJ1YjNRZ1lXeHNiM2RsWkZ3aUxGeHVJQ0FnSUU5Q1NrVkRWRjlFUlZCRlRrUkZUa05aWDB0RldUb2dYQ0pFWlhCbGJtUmxibU41SUdaaGFXeGxaQ0F0SUd0bGVTQnRkWE4wSUdWNGFYTjBPaUI3YldsemMybHVaMzBnS0dSMVpTQjBieUJyWlhrNklIdHJaWGw5S1Z3aUxGeHVJQ0FnSUM4dklFRnljbUY1SUdWeWNtOXljMXh1SUNBZ0lFRlNVa0ZaWDB4RlRrZFVTRjlUU0U5U1ZEb2dYQ0pCY25KaGVTQnBjeUIwYjI4Z2MyaHZjblFnS0h0c1pXNW5kR2g5S1N3Z2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeGNiaUFnSUNCQlVsSkJXVjlNUlU1SFZFaGZURTlPUnpvZ1hDSkJjbkpoZVNCcGN5QjBiMjhnYkc5dVp5QW9lMnhsYm1kMGFIMHBMQ0J0WVhocGJYVnRJSHR0WVhocGJYVnRmVndpTEZ4dUlDQWdJRUZTVWtGWlgxVk9TVkZWUlRvZ1hDSkJjbkpoZVNCcGRHVnRjeUJoY21VZ2JtOTBJSFZ1YVhGMVpTQW9hVzVrYVdObGN5QjdiV0YwWTJneGZTQmhibVFnZTIxaGRHTm9NbjBwWENJc1hHNGdJQ0FnUVZKU1FWbGZRVVJFU1ZSSlQwNUJURjlKVkVWTlV6b2dYQ0pCWkdScGRHbHZibUZzSUdsMFpXMXpJRzV2ZENCaGJHeHZkMlZrWENJc1hHNGdJQ0FnTHk4Z1JtOXliV0YwSUdWeWNtOXljMXh1SUNBZ0lFWlBVazFCVkY5RFZWTlVUMDA2SUZ3aVJtOXliV0YwSUhaaGJHbGtZWFJwYjI0Z1ptRnBiR1ZrSUNoN2JXVnpjMkZuWlgwcFhDSXNYRzRnSUNBZ1MwVlpWMDlTUkY5RFZWTlVUMDA2SUZ3aVMyVjVkMjl5WkNCbVlXbHNaV1E2SUh0clpYbDlJQ2g3YldWemMyRm5aWDBwWENJc1hHNGdJQ0FnTHk4Z1UyTm9aVzFoSUhOMGNuVmpkSFZ5WlZ4dUlDQWdJRU5KVWtOVlRFRlNYMUpGUmtWU1JVNURSVG9nWENKRGFYSmpkV3hoY2lBa2NtVm1jem9nZTNWeWJITjlYQ0lzWEc0Z0lDQWdMeThnVG05dUxYTjBZVzVrWVhKa0lIWmhiR2xrWVhScGIyNGdiM0IwYVc5dWMxeHVJQ0FnSUZWT1MwNVBWMDVmVUZKUFVFVlNWRms2SUZ3aVZXNXJibTkzYmlCd2NtOXdaWEowZVNBb2JtOTBJR2x1SUhOamFHVnRZU2xjSWx4dWZUdGNibHh1Wm5WdVkzUnBiMjRnVm1Gc2FXUmhkR2x2YmtWeWNtOXlLR052WkdVc0lIQmhjbUZ0Y3l3Z1pHRjBZVkJoZEdnc0lITmphR1Z0WVZCaGRHZ3NJSE4xWWtWeWNtOXljeWtnZTF4dUlDQWdJRVZ5Y205eUxtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2FXWWdLR052WkdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKT2J5Qmxjbkp2Y2lCamIyUmxJSE4xY0hCc2FXVmtPaUJjSWlBcklITmphR1Z0WVZCaGRHZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbTFsYzNOaFoyVWdQU0FuSnp0Y2JpQWdJQ0IwYUdsekxuQmhjbUZ0Y3lBOUlIQmhjbUZ0Y3p0Y2JpQWdJQ0IwYUdsekxtTnZaR1VnUFNCamIyUmxPMXh1SUNBZ0lIUm9hWE11WkdGMFlWQmhkR2dnUFNCa1lYUmhVR0YwYUNCOGZDQmNJbHdpTzF4dUlDQWdJSFJvYVhNdWMyTm9aVzFoVUdGMGFDQTlJSE5qYUdWdFlWQmhkR2dnZkh3Z1hDSmNJanRjYmlBZ0lDQjBhR2x6TG5OMVlrVnljbTl5Y3lBOUlITjFZa1Z5Y205eWN5QjhmQ0J1ZFd4c08xeHVYRzRnSUNBZ2RtRnlJR1Z5Y2lBOUlHNWxkeUJGY25KdmNpaDBhR2x6TG0xbGMzTmhaMlVwTzF4dUlDQWdJSFJvYVhNdWMzUmhZMnNnUFNCbGNuSXVjM1JoWTJzZ2ZId2daWEp5TG5OMFlXTnJkSEpoWTJVN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5OMFlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJsY25JN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHRmpheUE5SUdWeWNpNXpkR0ZqYXlCOGZDQmxjbkl1YzNSaFkydDBjbUZqWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNibHh1Vm1Gc2FXUmhkR2x2YmtWeWNtOXlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9SWEp5YjNJdWNISnZkRzkwZVhCbEtUdGNibFpoYkdsa1lYUnBiMjVGY25KdmNpNXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBiM0lnUFNCV1lXeHBaR0YwYVc5dVJYSnliM0k3WEc1V1lXeHBaR0YwYVc5dVJYSnliM0l1Y0hKdmRHOTBlWEJsTG01aGJXVWdQU0FuVm1Gc2FXUmhkR2x2YmtWeWNtOXlKenRjYmx4dVZtRnNhV1JoZEdsdmJrVnljbTl5TG5CeWIzUnZkSGx3WlM1d2NtVm1hWGhYYVhSb0lEMGdablZ1WTNScGIyNGdLR1JoZEdGUWNtVm1hWGdzSUhOamFHVnRZVkJ5WldacGVDa2dlMXh1SUNBZ0lHbG1JQ2hrWVhSaFVISmxabWw0SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0ZRY21WbWFYZ2dQU0JrWVhSaFVISmxabWw0TG5KbGNHeGhZMlVvTDM0dlp5d2dYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl3Z1hDSitNVndpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFVHRjBhQ0E5SUZ3aUwxd2lJQ3NnWkdGMFlWQnlaV1pwZUNBcklIUm9hWE11WkdGMFlWQmhkR2c3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h6WTJobGJXRlFjbVZtYVhnZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdjMk5vWlcxaFVISmxabWw0SUQwZ2MyTm9aVzFoVUhKbFptbDRMbkpsY0d4aFkyVW9MMzR2Wnl3Z1hDSitNRndpS1M1eVpYQnNZV05sS0M5Y1hDOHZaeXdnWENKK01Wd2lLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMmhsYldGUVlYUm9JRDBnWENJdlhDSWdLeUJ6WTJobGJXRlFjbVZtYVhnZ0t5QjBhR2x6TG5OamFHVnRZVkJoZEdnN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpMbk4xWWtWeWNtOXljeUFoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YzNWaVJYSnliM0p6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4xWWtWeWNtOXljMXRwWFM1d2NtVm1hWGhYYVhSb0tHUmhkR0ZRY21WbWFYZ3NJSE5qYUdWdFlWQnlaV1pwZUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCcGMxUnlkWE4wWldSVmNtd29ZbUZ6WlZWeWJDd2dkR1Z6ZEZWeWJDa2dlMXh1SUNBZ0lHbG1JQ2gwWlhOMFZYSnNMbk4xWW5OMGNtbHVaeWd3TENCaVlYTmxWWEpzTG14bGJtZDBhQ2tnUFQwOUlHSmhjMlZWY213cElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGJXRnBibVJsY2lBOUlIUmxjM1JWY213dWMzVmljM1J5YVc1bktHSmhjMlZWY213dWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2gwWlhOMFZYSnNMbXhsYm1kMGFDQStJREFnSmlZZ2RHVnpkRlZ5YkM1amFHRnlRWFFvWW1GelpWVnliQzVzWlc1bmRHZ2dMU0F4S1NBOVBUMGdYQ0l2WENJcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I4ZkNCeVpXMWhhVzVrWlhJdVkyaGhja0YwS0RBcElEMDlQU0JjSWlOY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z2NtVnRZV2x1WkdWeUxtTm9ZWEpCZENnd0tTQTlQVDBnWENJL1hDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVkbUZ5SUd4aGJtZDFZV2RsY3lBOUlIdDlPMXh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZCY0drb2JHRnVaM1ZoWjJVcElIdGNiaUFnSUNCMllYSWdaMnh2WW1Gc1EyOXVkR1Y0ZENBOUlHNWxkeUJXWVd4cFpHRjBiM0pEYjI1MFpYaDBLQ2s3WEc0Z0lDQWdkbUZ5SUdOMWNuSmxiblJNWVc1bmRXRm5aVHRjYmlBZ0lDQjJZWElnWTNWemRHOXRSWEp5YjNKU1pYQnZjblJsY2p0Y2JpQWdJQ0IyWVhJZ1lYQnBJRDBnZTF4dUlDQWdJQ0FnSUNCelpYUkZjbkp2Y2xKbGNHOXlkR1Z5T2lCbWRXNWpkR2x2YmlBb2NtVndiM0owWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NtVndiM0owWlhJZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHRnVaM1ZoWjJVb2NtVndiM0owWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM1Z6ZEc5dFJYSnliM0pTWlhCdmNuUmxjaUE5SUhKbGNHOXlkR1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHRmtaRVp2Y20xaGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc1EyOXVkR1Y0ZEM1aFpHUkdiM0p0WVhRdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ2JHRnVaM1ZoWjJVNklHWjFibU4wYVc5dUlDaGpiMlJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTnZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTNWeWNtVnVkRXhoYm1kMVlXZGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnNZVzVuZFdGblpYTmJZMjlrWlYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMlJsSUQwZ1kyOWtaUzV6Y0d4cGRDZ25MU2NwV3pCZE95QXZMeUJtWVd4c0lHSmhZMnNnZEc4Z1ltRnpaU0JzWVc1bmRXRm5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHeGhibWQxWVdkbGMxdGpiMlJsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5STVlXNW5kV0ZuWlNBOUlHTnZaR1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR052WkdVN0lDOHZJSE52SUhsdmRTQmpZVzRnZEdWc2JDQnBaaUJtWVd4c0xXSmhZMnNnYUdGeklHaGhjSEJsYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHRmtaRXhoYm1kMVlXZGxPaUJtZFc1amRHbHZiaUFvWTI5a1pTd2diV1Z6YzJGblpVMWhjQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd0bGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlFVnljbTl5UTI5a1pYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JXVnpjMkZuWlUxaGNGdHJaWGxkSUNZbUlDRnRaWE56WVdkbFRXRndXMFZ5Y205eVEyOWtaWE5iYTJWNVhWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlUxaGNGdEZjbkp2Y2tOdlpHVnpXMnRsZVYxZElEMGdiV1Z6YzJGblpVMWhjRnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeWIyOTBRMjlrWlNBOUlHTnZaR1V1YzNCc2FYUW9KeTBuS1Zzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hiR0Z1WjNWaFoyVnpXM0p2YjNSRGIyUmxYU2tnZXlBdkx5QjFjMlVnWm05eUlHSmhjMlVnYkdGdVozVmhaMlVnYVdZZ2JtOTBJSGxsZENCa1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGdVozVmhaMlZ6VzJOdlpHVmRJRDBnYldWemMyRm5aVTFoY0R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXNW5kV0ZuWlhOYmNtOXZkRU52WkdWZElEMGdiV1Z6YzJGblpVMWhjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnVaM1ZoWjJWelcyTnZaR1ZkSUQwZ1QySnFaV04wTG1OeVpXRjBaU2hzWVc1bmRXRm5aWE5iY205dmRFTnZaR1ZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3RsZVNCcGJpQnRaWE56WVdkbFRXRndLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiR0Z1WjNWaFoyVnpXM0p2YjNSRGIyUmxYVnRyWlhsZElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnVaM1ZoWjJWelczSnZiM1JEYjJSbFhWdHJaWGxkSUQwZ2JXVnpjMkZuWlUxaGNGdHJaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGJtZDFZV2RsYzF0amIyUmxYVnRyWlhsZElEMGdiV1Z6YzJGblpVMWhjRnRyWlhsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQm1jbVZ6YUVGd2FUb2dablZ1WTNScGIyNGdLR3hoYm1kMVlXZGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnWTNKbFlYUmxRWEJwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHRnVaM1ZoWjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWJHRnVaM1ZoWjJVb2JHRnVaM1ZoWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVTZJR1oxYm1OMGFXOXVJQ2hrWVhSaExDQnpZMmhsYldFc0lHTm9aV05yVW1WamRYSnphWFpsTENCaVlXNVZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1JsWmlBOUlHUmxabUYxYkhSRmNuSnZjbEpsY0c5eWRHVnlLR04xY25KbGJuUk1ZVzVuZFdGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaWEp5YjNKU1pYQnZjblJsY2lBOUlHTjFjM1J2YlVWeWNtOXlVbVZ3YjNKMFpYSWdQeUJtZFc1amRHbHZiaUFvWlhKeWIzSXNJR1JoZEdFc0lITmphR1Z0WVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCamRYTjBiMjFGY25KdmNsSmxjRzl5ZEdWeUtHVnljbTl5TENCa1lYUmhMQ0J6WTJobGJXRXBJSHg4SUdSbFppaGxjbkp2Y2l3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdPaUJrWldZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlHNWxkeUJXWVd4cFpHRjBiM0pEYjI1MFpYaDBLR2RzYjJKaGJFTnZiblJsZUhRc0lHWmhiSE5sTENCbGNuSnZjbEpsY0c5eWRHVnlMQ0JqYUdWamExSmxZM1Z5YzJsMlpTd2dZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6WTJobGJXRWdQVDA5SUZ3aWMzUnlhVzVuWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpZMmhsYldFZ1BTQjdYQ0lrY21WbVhDSTZJSE5qYUdWdFlYMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbUZrWkZOamFHVnRZU2hjSWx3aUxDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnljbTl5SUQwZ1kyOXVkR1Y0ZEM1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCelkyaGxiV0VzSUc1MWJHd3NJRzUxYkd3c0lGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbGNuSnZjaUFtSmlCaVlXNVZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdZMjl1ZEdWNGRDNWlZVzVWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWhrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjaUE5SUdWeWNtOXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YVhOemFXNW5JRDBnWTI5dWRHVjRkQzV0YVhOemFXNW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpDQTlJQ2hsY25KdmNpQTlQVDBnYm5Wc2JDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3hwWkR0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVlNaWE4xYkhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1JoZEdVdVlYQndiSGtvY21WemRXeDBMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkbUZzYVdSaGRHVk5kV3gwYVhCc1pUb2dablZ1WTNScGIyNGdLR1JoZEdFc0lITmphR1Z0WVN3Z1kyaGxZMnRTWldOMWNuTnBkbVVzSUdKaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZtSUQwZ1pHVm1ZWFZzZEVWeWNtOXlVbVZ3YjNKMFpYSW9ZM1Z5Y21WdWRFeGhibWQxWVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2xKbGNHOXlkR1Z5SUQwZ1kzVnpkRzl0UlhKeWIzSlNaWEJ2Y25SbGNpQS9JR1oxYm1OMGFXOXVJQ2hsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOMWMzUnZiVVZ5Y205eVVtVndiM0owWlhJb1pYSnliM0lzSUdSaGRHRXNJSE5qYUdWdFlTa2dmSHdnWkdWbUtHVnljbTl5TENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJR1JsWmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamIyNTBaWGgwSUQwZ2JtVjNJRlpoYkdsa1lYUnZja052Ym5SbGVIUW9aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z2RISjFaU3dnWlhKeWIzSlNaWEJ2Y25SbGNpd2dZMmhsWTJ0U1pXTjFjbk5wZG1Vc0lHSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMk5vWlcxaElEMDlQU0JjSW5OMGNtbHVaMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2Uxd2lKSEpsWmx3aU9pQnpZMmhsYldGOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNWhaR1JUWTJobGJXRW9YQ0pjSWl3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djMk5vWlcxaExDQnVkV3hzTENCdWRXeHNMQ0JjSWx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGlZVzVWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1WW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNb1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1bGNuSnZjbk1nUFNCamIyNTBaWGgwTG1WeWNtOXljenRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1dGFYTnphVzVuSUQwZ1kyOXVkR1Y0ZEM1dGFYTnphVzVuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MExuWmhiR2xrSUQwZ0tISmxjM1ZzZEM1bGNuSnZjbk11YkdWdVozUm9JRDA5UFNBd0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdGa1pGTmphR1Z0WVRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkc2IySmhiRU52Ym5SbGVIUXVZV1JrVTJOb1pXMWhMbUZ3Y0d4NUtHZHNiMkpoYkVOdmJuUmxlSFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR2RsZEZOamFHVnRZVG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RzYjJKaGJFTnZiblJsZUhRdVoyVjBVMk5vWlcxaExtRndjR3g1S0dkc2IySmhiRU52Ym5SbGVIUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHZGxkRk5qYUdWdFlVMWhjRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RzYjJKaGJFTnZiblJsZUhRdVoyVjBVMk5vWlcxaFRXRndMbUZ3Y0d4NUtHZHNiMkpoYkVOdmJuUmxlSFFzSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJR2RsZEZOamFHVnRZVlZ5YVhNNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbmJHOWlZV3hEYjI1MFpYaDBMbWRsZEZOamFHVnRZVlZ5YVhNdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1oyVjBUV2x6YzJsdVoxVnlhWE02SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJuYkc5aVlXeERiMjUwWlhoMExtZGxkRTFwYzNOcGJtZFZjbWx6TG1Gd2NHeDVLR2RzYjJKaGJFTnZiblJsZUhRc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdSeWIzQlRZMmhsYldGek9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd4RGIyNTBaWGgwTG1SeWIzQlRZMmhsYldGekxtRndjR3g1S0dkc2IySmhiRU52Ym5SbGVIUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHUmxabWx1WlV0bGVYZHZjbVE2SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkc2IySmhiRU52Ym5SbGVIUXVaR1ZtYVc1bFMyVjVkMjl5WkM1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCa1pXWnBibVZGY25KdmNqb2dablZ1WTNScGIyNGdLR052WkdWT1lXMWxMQ0JqYjJSbFRuVnRZbVZ5TENCa1pXWmhkV3gwVFdWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjJSbFRtRnRaU0FoUFQwZ0ozTjBjbWx1WnljZ2ZId2dJUzllVzBFdFdsMHJLRjliUVMxYVhTc3BLaVF2TG5SbGMzUW9ZMjlrWlU1aGJXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2REYjJSbElHNWhiV1VnYlhWemRDQmlaU0JoSUhOMGNtbHVaeUJwYmlCVlVGQkZVbDlEUVZORlgxZEpWRWhmVlU1RVJWSlRRMDlTUlZNbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTI5a1pVNTFiV0psY2lBaFBUMGdKMjUxYldKbGNpY2dmSHdnWTI5a1pVNTFiV0psY2lBbElERWdJVDA5SURBZ2ZId2dZMjlrWlU1MWJXSmxjaUE4SURFd01EQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2REYjJSbElHNTFiV0psY2lCdGRYTjBJR0psSUdGdUlHbHVkR1ZuWlhJZ1BpQXhNREF3TUNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJGY25KdmNrTnZaR1Z6VzJOdlpHVk9ZVzFsWFNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBWeWNtOXlJR0ZzY21WaFpIa2daR1ZtYVc1bFpEb2dKeUFySUdOdlpHVk9ZVzFsSUNzZ0p5QmhjeUFuSUNzZ1JYSnliM0pEYjJSbGMxdGpiMlJsVG1GdFpWMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCRmNuSnZja052WkdWTWIyOXJkWEJiWTI5a1pVNTFiV0psY2wwZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkRmNuSnZjaUJqYjJSbElHRnNjbVZoWkhrZ2RYTmxaRG9nSnlBcklFVnljbTl5UTI5a1pVeHZiMnQxY0Z0amIyUmxUblZ0WW1WeVhTQXJJQ2NnWVhNZ0p5QXJJR052WkdWT2RXMWlaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1JYSnliM0pEYjJSbGMxdGpiMlJsVG1GdFpWMGdQU0JqYjJSbFRuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdSWEp5YjNKRGIyUmxURzl2YTNWd1cyTnZaR1ZPZFcxaVpYSmRJRDBnWTI5a1pVNWhiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkZjbkp2Y2sxbGMzTmhaMlZ6UkdWbVlYVnNkRnRqYjJSbFRtRnRaVjBnUFNCRmNuSnZjazFsYzNOaFoyVnpSR1ZtWVhWc2RGdGpiMlJsVG5WdFltVnlYU0E5SUdSbFptRjFiSFJOWlhOellXZGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JHRnVaME52WkdVZ2FXNGdiR0Z1WjNWaFoyVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHeGhibWQxWVdkbElEMGdiR0Z1WjNWaFoyVnpXMnhoYm1kRGIyUmxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHRnVaM1ZoWjJWYlkyOWtaVTVoYldWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGJtZDFZV2RsVzJOdlpHVk9kVzFpWlhKZElEMGdiR0Z1WjNWaFoyVmJZMjlrWlU1MWJXSmxjbDBnZkh3Z2JHRnVaM1ZoWjJWYlkyOWtaVTVoYldWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHNiMkpoYkVOdmJuUmxlSFF1Y21WelpYUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WlhKeWIzSWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRhWE56YVc1bklEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5aaGJHbGtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnYldsemMybHVaem9nVzEwc1hHNGdJQ0FnSUNBZ0lHVnljbTl5T2lCdWRXeHNMRnh1SUNBZ0lDQWdJQ0IyWVd4cFpEb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ2JtOXliVk5qYUdWdFlUb2dibTl5YlZOamFHVnRZU3hjYmlBZ0lDQWdJQ0FnY21WemIyeDJaVlZ5YkRvZ2NtVnpiMngyWlZWeWJDeGNiaUFnSUNBZ0lDQWdaMlYwUkc5amRXMWxiblJWY21rNklHZGxkRVJ2WTNWdFpXNTBWWEpwTEZ4dUlDQWdJQ0FnSUNCbGNuSnZja052WkdWek9pQkZjbkp2Y2tOdlpHVnpYRzRnSUNBZ2ZUdGNiaUFnSUNCaGNHa3ViR0Z1WjNWaFoyVW9iR0Z1WjNWaFoyVWdmSHdnSjJWdUp5azdYRzRnSUNBZ2NtVjBkWEp1SUdGd2FUdGNibjFjYmx4dUx5OWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEc5eUtDa2dlMXh1ZG1GeUlIUjJOQ0E5SUdOeVpXRjBaVUZ3YVNncE8xeHVkSFkwTG1Ga1pFeGhibWQxWVdkbEtDZGxiaTFuWWljc0lFVnljbTl5VFdWemMyRm5aWE5FWldaaGRXeDBLVHRjYmx4dUx5OXNaV2RoWTNrZ2NISnZjR1Z5ZEhsY2JuUjJOQzUwZGpRZ1BTQjBkalE3WEc0dkwzSmxkSFZ5YmlCMGRqUTdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjBkalE3WEc0dkwzMGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNHZLaXBjYmlBcUlGTjFjSEJ2Y25RZ2JXOWtkV3hsSUhkcGRHZ2djMjl0WlNCbWRXNWpkR2x2Ym5NZ2QybHNiQ0JpWlNCMWMyVm1kV3hjYmlBcUlFQnRiMlIxYkdVZ2RYUnBiSE5jYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JR1JwZG1sa1pWVlNURnh1SUNvZ1FIUjVjR1VnVDJKcVpXTjBYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ2RIbHdaU0JVYUdVZ2RIbHdaU0J2WmlCVlVreGNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCa2IyMWhhVzRnVkdobElHUnZiV0ZwYmlCdlppQlZVa3hjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZTQnBaR1Z1ZEdsMGVTQlVhR1VnYVdSbGJuUnBkSGtnYjJZZ1ZWSk1YRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQkVhWFpwWkdVZ1lXNGdkWEpzSUdsdUlIUjVjR1VzSUdSdmJXRnBiaUJoYm1RZ2FXUmxiblJwZEhsY2JpQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJSFZ5YkNBdElIVnliQ0JoWkdSeVpYTnpYRzRnS2lCQWNtVjBkWEp1SUh0a2FYWnBaR1ZWVWt4OUlIUm9aU0J5WlhOMWJIUWdiMllnWkdsMmFXUmxWVkpNWEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmthWFpwWkdWVlVrd29kWEpzS1NCN1hHNWNiaUFnYVdZZ0tDRjFjbXdwSUhSb2NtOTNJRVZ5Y205eUtDZFZVa3dnYVhNZ2JtVmxaR1ZrSUhSdklITndiR2wwSnlrN1hHNWNiaUFnTHk4Z2JHVjBJSEpsSUQwZ0x5aGJZUzE2UVMxYUxWMHFLVDg2WEZ3dlhGd3ZLRDg2WEZ3dUtUOG9XeTFoTFhwQkxWb3dMVGxBT2lVdVgxeGNLMzRqUFYxN01pd3lOVFo5WEZ3dVcyRXRlbDE3TWl3MmZWeGNZaWtxS0Z4Y0wxdGNYQzljWEdSY1hIZGNYQzR0WFNvcEtpZy9PbHRjWEQ5ZEtTb29MaXNwS2k5bmFUdGNiaUFnYkdWMElISmxJRDBnTHloYllTMTZRUzFhTFYwcUtUcGNYQzljWEM4b1B6cGNYQzRwUHloYkxXRXRla0V0V2pBdE9VQTZKUzVmWEZ3cmZpTTlYWHN5TERJMU5uMHBLRnN0WVMxNlFTMWFNQzA1UURvbExsOWNYQ3QrSXoxY1hDOWRLaWt2WjJrN1hHNGdJR3hsZENCemRXSnpkQ0E5SUNja01Td2tNaXdrTXljN1hHNGdJR3hsZENCd1lYSjBjeUE5SUhWeWJDNXlaWEJzWVdObEtISmxMQ0J6ZFdKemRDa3VjM0JzYVhRb0p5d25LVHRjYmx4dUlDQXZMeUJKWmlCMGFHVWdkWEpzSUdoaGN5QnVieUJ3Y205MGIyTnZiQ3dnZEdobElHUmxabUYxYkhRZ2NISnZkRzlqYjJ3Z2MyVjBJR2x6SUdoMGRIQnpYRzRnSUdsbUlDaHdZWEowYzFzd1hTQTlQVDBnZFhKc0tTQjdYRzRnSUNBZ2NHRnlkSE5iTUYwZ1BTQW5hSFIwY0hNbk8xeHVJQ0FnSUhCaGNuUnpXekZkSUQwZ2RYSnNPMXh1SUNCOVhHNWNiaUFnYkdWMElISmxjM1ZzZENBOUlIdGNiaUFnSUNCMGVYQmxPaUJ3WVhKMGMxc3dYU3hjYmlBZ0lDQmtiMjFoYVc0NklIQmhjblJ6V3pGZExGeHVJQ0FnSUdsa1pXNTBhWFI1T2lCd1lYSjBjMXN5WFZ4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmthWFpwWkdWRmJXRnBiQ2hsYldGcGJDa2dlMXh1SUNCc1pYUWdhVzVrWlhoUFprRjBJRDBnWlcxaGFXd3VhVzVrWlhoUFppZ25RQ2NwTzF4dVhHNGdJR3hsZENCeVpYTjFiSFFnUFNCN1hHNGdJQ0FnZFhObGNtNWhiV1U2SUdWdFlXbHNMbk4xWW5OMGNtbHVaeWd3TENCcGJtUmxlRTltUVhRcExGeHVJQ0FnSUdSdmJXRnBiam9nWlcxaGFXd3VjM1ZpYzNSeWFXNW5LR2x1WkdWNFQyWkJkQ0FySURFc0lHVnRZV2xzTG14bGJtZDBhQ2xjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFTm9aV05ySUdsbUlHRnVJRTlpYW1WamRDQnBjeUJsYlhCMGVWeHVJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0J2WW1wbFkzUWdUMkpxWldOMElIUnZJR0psSUdOb1pXTnJaV1JjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlDQWdJQ0FnSUhOMFlYUjFjeUJ2WmlCUFltcGxZM1FzSUdWdGNIUjVJRzl5SUc1dmRDQW9kSEoxWlh4bVlXeHpaU2s3WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmxiWEIwZVU5aWFtVmpkQ2h2WW1wbFkzUXBJSHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektHOWlhbVZqZENrdWJHVnVaM1JvSUQ0Z01DQS9JR1poYkhObElEb2dkSEoxWlR0Y2JuMWNibHh1THlvcVhHNGdLaUJOWVd0bElHRWdRMDlRV1NCdlppQjBhR1VnYjNKcFoybHVZV3dnWkdGMFlWeHVJQ29nUUhCaGNtRnRJQ0I3VDJKcVpXTjBmU0FnYjJKcUlDMGdiMkpxWldOMElIUnZJR0psSUdOc2IyNWxaRnh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR1ZsY0VOc2IyNWxLRzlpYWlrZ2UxeHVJQ0F2TDFSUFJFODZJSE5wYlhCc1pTQmlkWFFnYVc1bFptWnBZMmxsYm5RZ1NsTlBUaUJrWldWd0lHTnNiMjVsTGk0dVhHNGdJR2xtSUNodlltb3BJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLRXBUVDA0dWMzUnlhVzVuYVdaNUtHOWlhaWtwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRTlpZEdGcGJuTWdkR2hsSUhWelpYSWdWVkpNSUhSb1lYUWdZMjl5Y21WemNHOXVaSE1nZEc4Z1lTQm5hWFpsYmlCbGJXRnBiRnh1SUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNCMWMyVnlSVzFoYVd3Z1ZHaGxJSFZ6WlhJZ1pXMWhhV3hjYmlBcUlFQnlaWFIxY200Z2UxVlNUQzVWVWt4OUlIVnpaWEpWVWt3Z1ZHaGxJSFZ6WlhJZ1ZWSk1YRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlZjMlZ5VlZKTVJuSnZiVVZ0WVdsc0tIVnpaWEpGYldGcGJDa2dlMXh1SUNCc1pYUWdhVzVrWlhoUFprRjBJRDBnZFhObGNrVnRZV2xzTG1sdVpHVjRUMllvSjBBbktUdGNiaUFnY21WMGRYSnVJQ2QxYzJWeU9pOHZKeUFySUhWelpYSkZiV0ZwYkM1emRXSnpkSEpwYm1jb2FXNWtaWGhQWmtGMElDc2dNU3dnZFhObGNrVnRZV2xzTG14bGJtZDBhQ2tnS3lBbkx5Y2dLeUIxYzJWeVJXMWhhV3d1YzNWaWMzUnlhVzVuS0RBc0lHbHVaR1Y0VDJaQmRDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1QySjBZV2x1Y3lCMGFHVWdkWE5sY2lCbGJXRnBiQ0IwYUdGMElHTnZjbkpsYzNCdmJtUnpJSFJ2SUdFZ1oybDJaVzRnVlZKTVhHNGdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0IxYzJWeVZWSk1JRlJvWlNCMWMyVnlJRlZTVEZ4dUlDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQjFjMlZ5UlcxaGFXd2dWR2hsSUhWelpYSWdaVzFoYVd4Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEZWelpYSkZiV0ZwYkVaeWIyMVZVa3dvZFhObGNsVlNUQ2tnZTF4dUlDQnNaWFFnZFhKc0lEMGdaR2wyYVdSbFZWSk1LSFZ6WlhKVlVrd3BPMXh1SUNCeVpYUjFjbTRnZFhKc0xtbGtaVzUwYVhSNUxuSmxjR3hoWTJVb0p5OG5MQ0FuSnlrZ0t5QW5RQ2NnS3lCMWNtd3VaRzl0WVdsdU95QXZMeUJwWkdWdWRHbDBlU0JtYVdWc1pDQm9ZWE1nSnk5bGVHRnRjR3hsU1VRbklHbHVjM1JsWVdRZ2IyWWdKMlY0WVcxd2JHVkpSQ2RjYm4xY2JseHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JSFJvWlNCMWMyVnlJR2xrWlc1MGFXWnBaWElnYVhNZ1lXeHlaV0ZrZVNCcGJpQjBhR1VnVlZKTUlHWnZjbTFoZEN3Z2FXWWdibTkwTENCamIyNTJaWEowSUhSdklGVlNUQ0JtYjNKdFlYUmNiaUFxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnSUNCcFpHVnVkR2xtYVdWeUlDQjFjMlZ5SUdsa1pXNTBhV1pwWlhKY2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdJQ0IxYzJWeVZWSk1JQ0FnSUhSb1pTQjFjMlZ5SUZWU1RGeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTI5dWRtVnlkRlJ2VlhObGNsVlNUQ2hwWkdWdWRHbG1hV1Z5S1NCN1hHNWNiaUFnTHk4Z1kyaGxZMnNnYVdZZ2RHaGxJR2xrWlc1MGFXWnBaWElnYVhNZ1lXeHlaV0ZrZVNCcGJpQjBhR1VnZFhKc0lHWnZjbTFoZEZ4dUlDQnBaaUFvYVdSbGJuUnBabWxsY2k1emRXSnpkSEpwYm1jb01Dd2dOeWtnUFQwOUlDZDFjMlZ5T2k4dkp5a2dlMXh1SUNBZ0lHeGxkQ0JrYVhacFpHVmtWVkpNSUQwZ1pHbDJhV1JsVlZKTUtHbGtaVzUwYVdacFpYSXBPMXh1WEc0Z0lDQWdMeTlqYUdWamF5QnBaaUIwYUdVZ2RYSnNJR2x6SUhkbGJHd2dabTl5YldGMFpXUmNiaUFnSUNCcFppQW9aR2wyYVdSbFpGVlNUQzVrYjIxaGFXNGdKaVlnWkdsMmFXUmxaRlZTVEM1cFpHVnVkR2wwZVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdsa1pXNTBhV1pwWlhJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lDZDFjMlZ5VlZKTUlIZHBkR2dnZDNKdmJtY2dabTl5YldGMEp6dGNiaUFnSUNCOVhHNWNiaUFnTHk5cFppQnViM1FzSUdOdmJuWmxjblFnZEdobElIVnpaWElnWlcxaGFXd2dkRzhnVlZKTUlHWnZjbTFoZEZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlhSVmMyVnlWVkpNUm5KdmJVVnRZV2xzS0dsa1pXNTBhV1pwWlhJcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMFJoZEdGUFltcGxZM1JWVWt3b2RYSnNLU0I3WEc0Z0lHeGxkQ0J6WTJobGJXRnpWRzlKWjI1dmNtVWdQU0JiSjJSdmJXRnBiaTFwWkhBbkxDQW5jblZ1ZEdsdFpTY3NJQ2RrYjIxaGFXNG5MQ0FuYUhsd1pYSjBlU2RkTzF4dUlDQnNaWFFnYzNCc2FYUlZVa3dnUFNBb2RYSnNLUzV6Y0d4cGRDZ25PaTh2SnlrN1hHNGdJR3hsZENCMWNteFRZMmhsYldFZ1BTQnpjR3hwZEZWU1RGc3dYVHRjYmx4dUlDQnlaWFIxY200Z2MyTm9aVzFoYzFSdlNXZHViM0psTG1sdVpHVjRUMllvZFhKc1UyTm9aVzFoS1NBOVBUMGdMVEU3WEc1OVhHNGlYWDA9Cg==",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 30001,
    "type": "Runtimes",
    "version": "0.1",
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}