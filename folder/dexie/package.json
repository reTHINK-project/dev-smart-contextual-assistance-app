{
  "_args": [
    [
      {
        "raw": "dexie@^1.5.1",
        "scope": null,
        "escapedName": "dexie",
        "name": "dexie",
        "rawSpec": "^1.5.1",
        "spec": ">=1.5.1 <2.0.0",
        "type": "range"
      },
      "/home/luis/Documents/rethink/dev-smart-contextual-assistance-app/rethink/node_modules/runtime-browser"
    ]
  ],
  "_from": "dexie@>=1.5.1 <2.0.0",
  "_id": "dexie@1.5.1",
  "_inCache": true,
  "_location": "/dexie",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/dexie-1.5.1.tgz_1478006624401_0.7768115825019777"
  },
  "_npmUser": {
    "name": "dfahlander",
    "email": "david.fahlander@gmail.com"
  },
  "_npmVersion": "3.10.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dexie@^1.5.1",
    "scope": null,
    "escapedName": "dexie",
    "name": "dexie",
    "rawSpec": "^1.5.1",
    "spec": ">=1.5.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/runtime-browser"
  ],
  "_resolved": "https://registry.npmjs.org/dexie/-/dexie-1.5.1.tgz",
  "_shasum": "ac3ad5a0ebaf7e6e42760db58710418d4a756624",
  "_shrinkwrap": null,
  "_spec": "dexie@^1.5.1",
  "_where": "/home/luis/Documents/rethink/dev-smart-contextual-assistance-app/rethink/node_modules/runtime-browser",
  "author": {
    "name": "David Fahlander"
  },
  "bugs": {
    "url": "https://github.com/dfahlander/Dexie.js/issues"
  },
  "dependencies": {},
  "description": "A Minimalistic Wrapper for IndexedDB",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.17.0",
    "babel-plugin-syntax-async-functions": "^6.13.0",
    "babel-plugin-transform-es2015-arrow-functions": "^6.5.2",
    "babel-plugin-transform-es2015-block-scoped-functions": "^6.6.5",
    "babel-plugin-transform-es2015-block-scoping": "^6.15.0",
    "babel-plugin-transform-es2015-classes": "^6.14.0",
    "babel-plugin-transform-es2015-computed-properties": "^6.6.5",
    "babel-plugin-transform-es2015-literals": "^6.5.0",
    "babel-plugin-transform-es2015-object-super": "^6.6.5",
    "babel-plugin-transform-es2015-parameters": "^6.17.0",
    "babel-plugin-transform-es2015-shorthand-properties": "^6.5.0",
    "babel-plugin-transform-es2015-spread": "^6.6.5",
    "babel-plugin-transform-es2015-sticky-regex": "^6.5.0",
    "babel-plugin-transform-es2015-template-literals": "^6.6.5",
    "babel-plugin-transform-regenerator": "^6.16.1",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.16.0",
    "es6-promisify": "^5.0.0",
    "es6-promisify-all": "^0.1.0",
    "eslint": "^3.7.1",
    "karma": "^0.13.22",
    "karma-browserstack-launcher": "^1.1.1",
    "karma-chrome-launcher": "^2.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha-reporter": "^2.2.0",
    "karma-qunit": "^1.2.1",
    "node-watch": "^0.4.0",
    "qunit": "^0.7.7",
    "qunitjs": "^1.14.0",
    "rollup": "^0.36.1",
    "serve-static": "^1.11.1",
    "uglify-js": "^2.7.3"
  },
  "directories": {},
  "dist": {
    "shasum": "ac3ad5a0ebaf7e6e42760db58710418d4a756624",
    "tarball": "https://registry.npmjs.org/dexie/-/dexie-1.5.1.tgz"
  },
  "engines": {
    "node": ">=4.2"
  },
  "gitHead": "af57a0ad6ce21eb3f9a4f527b12a63b18326ef70",
  "homepage": "http://dexie.org",
  "jsnext:main": "dist/dexie.es6.js",
  "jspm": {
    "format": "cjs",
    "ignore": [
      "src/"
    ]
  },
  "keywords": [
    "indexeddb",
    "browser",
    "database"
  ],
  "license": "Apache-2.0",
  "main": "dist/dexie.js",
  "maintainers": [
    {
      "name": "anders.ekdahl",
      "email": "anders.ekdahl@gmail.com"
    },
    {
      "name": "dfahlander",
      "email": "david.fahlander@gmail.com"
    }
  ],
  "name": "dexie",
  "optionalDependencies": {},
  "readme": "Dexie.js\r\n========\r\n\r\n[![NPM Version][npm-image]][npm-url] [![Build Status](https://travis-ci.org/dfahlander/Dexie.js.svg?branch=master)](https://travis-ci.org/dfahlander/Dexie.js)[![Tested with Browserstack](http://dexie.org/assets/images/tested-with-browserstack2.png)](https://www.browserstack.com)\r\n\r\nDexie.js is a wrapper library for indexedDB - the standard database in the browser. http://dexie.org\r\n\r\n#### Why?\r\nDexie solves three main issues with the native IndexedDB API:\r\n\r\n 1. Ambivalent error handling\r\n 2. Poor queries\r\n 3. Code complexity\r\n\r\nDexie provides a neat database API with a well thought-through API design, robust error handling, extendability, change tracking awareness and extended KeyRange support (case insensitive search, set matches and OR operations).\r\n\r\n#### Hello World\r\n\r\n```html\r\n<!doctype html>\r\n<html>\r\n <head>\r\n  <script src=\"https://unpkg.com/dexie@latest/dist/dexie.js\"></script>\r\n  <script>\r\n   //\r\n   // Declare Database\r\n   //\r\n   var db = new Dexie(\"FriendDatabase\");\r\n   db.version(1).stores({\r\n     friends: \"++id,name,age\"\r\n   });\r\n   \r\n   //\r\n   // Manipulate and Query Database\r\n   //\r\n   db.friends.add({name: \"Josephine\", age: 21}).then(function() {\r\n       return db.friends.where(\"age\").below(25).toArray();\r\n   }).then(function (youngFriends) {\r\n       alert (\"My young friends: \" + JSON.stringify(youngFriends));\r\n   }).catch(function (e) {\r\n       alert (\"Error: \" + (e.stack || e));\r\n   });\r\n  </script>\r\n </head>\r\n</html>\r\n```\r\nYes, it's that simple.\r\n\r\n[Tutorial](https://github.com/dfahlander/Dexie.js/wiki/Tutorial)\r\n\r\n[API Reference](https://github.com/dfahlander/Dexie.js/wiki/API-Reference)\r\n\r\n[Samples](https://github.com/dfahlander/Dexie.js/wiki/Samples)\r\n\r\n### Performance\r\n\r\nDexie has a kick-ass performance. It's [bulk methods](https://github.com/dfahlander/Dexie.js/wiki/WriteableTable.bulkPut()) take advantage of a not well known feature in indexedDB that makes it possible to store stuff without listening to every onsuccess event. This speeds up the performance to a maximum.\r\n\r\n#### Supported operations\r\n```js\r\nabove(key): Collection;\r\naboveOrEqual(key): Collection;\r\nadd(item, key?): Promise;\r\nand(filter: (x) => boolean): Collection;\r\nanyOf(keys[]): Collection;\r\nanyOfIgnoreCase(keys: string[]): Collection;\r\nbelow(key): Collection;\r\nbelowOrEqual(key): Collection;\r\nbetween(lower, upper, includeLower?, includeUpper?): Collection;\r\nbulkAdd(items: Array): Promise;\r\nbulkDelete(keys: Array): Promise;\r\nbulkPut(items: Array): Promise;\r\nclear(): Promise;\r\ncount(): Promise;\r\ndelete(key): Promise;\r\ndistinct(): Collection;\r\neach(callback: (obj) => any): Promise;\r\neachKey(callback: (key) => any): Promise;\r\neachPrimaryKey(callback: (key) => any): Promise;\r\neachUniqueKey(callback: (key) => any): Promise;\r\nequals(key): Collection;\r\nequalsIgnoreCase(key): Collection;\r\nfilter(fn: (obj) => boolean): Collection;\r\nfirst(): Promise;\r\nget(key): Promise;\r\ninAnyRange(ranges): Collection;\r\nkeys(): Promise;\r\nlast(): Promise;\r\nlimit(n: number): Collection;\r\nmodify(changeCallback: (obj: T, ctx:{value: T}) => void): Promise;\r\nmodify(changes: { [keyPath: string]: any } ): Promise;\r\nnoneOf(keys: Array): Collection;\r\nnotEqual(key): Collection;\r\noffset(n: number): Collection;\r\nor(indexOrPrimayKey: string): WhereClause;\r\norderBy(index: string): Collection;\r\nprimaryKeys(): Promise;\r\nput(item: T, key?: Key): Promise;\r\nreverse(): Collection;\r\nsortBy(keyPath: string): Promise;\r\nstartsWith(key: string): Collection;\r\nstartsWithAnyOf(prefixes: string[]): Collection;\r\nstartsWithAnyOfIgnoreCase(prefixes: string[]): Collection;\r\nstartsWithIgnoreCase(key: string): Collection;\r\ntoArray(): Promise;\r\ntoCollection(): Collection;\r\nuniqueKeys(): Promise;\r\nuntil(filter: (value) => boolean, includeStopEntry?: boolean): Collection;\r\nupdate(key: Key, changes: { [keyPath: string]: any }): Promise;\r\n```\r\nThis is a mix of methods from [WhereClause](https://github.com/dfahlander/Dexie.js/wiki/WhereClause), [Table](https://github.com/dfahlander/Dexie.js/wiki/Table) and [Collection](https://github.com/dfahlander/Dexie.js/wiki/Collection). Dive into the [API reference](https://github.com/dfahlander/Dexie.js/wiki/API-Reference) to see the details.\r\n\r\n#### Hello World (ES2015 / ES6)\r\n\r\nThis sample shows how to use Dexie with ES6 compliant environments and npm module resolution. With ES6, the `yield` keyword can be  used instead of calling `.then()` on every database operation. The `yield` keyword and generator functions are already supported today (March 2016) in Chrome, Firefox, Edge and Opera without a transpiler (though this example also uses import statements which still needs transpilation). Dive into this? Read **[SIMPLIFY WITH YIELD](https://github.com/dfahlander/Dexie.js/wiki/Simplify-with-yield)**!\r\n\r\n```js\r\nimport Dexie from 'dexie';\r\n\r\n//\r\n// Declare Database\r\n//\r\nlet db = new Dexie(\"FriendDatabase\");\r\ndb.version(1).stores({ friends: \"++id,name,age\" });\r\n\r\n//\r\n// Have Fun\r\n//\r\ndb.transaction('rw', db.friends, function*() {\r\n\r\n    // Make sure we have something in DB:\r\n    if ((yield db.friends.where('name').equals('Josephine').count()) === 0) {\r\n        let id = yield db.friends.add({name: \"Josephine\", age: 21});\r\n        alert (`Addded friend with id ${id}`);\r\n    }\r\n    \r\n    // Query:\r\n    let youngFriends = yield db.friends.where(\"age\").below(25).toArray();\r\n        \r\n    // Show result:\r\n    alert (\"My young friends: \" + JSON.stringify(youngFriends));\r\n    \r\n}).catch(e => {\r\n    alert(e.stack || e);\r\n});\r\n```\r\n*NOTE: db.transaction() will treat generator functions (function * ) so that it is possible to use `yield` for consuming promises. [Yield can be used outside transactions as well](https://github.com/dfahlander/Dexie.js/wiki/Simplify-with-yield).*\r\n\r\n#### async await\r\n\r\nIf you need to use async and await, install Dexie v2:\r\n\r\n```\r\nnpm install dexie@^2.0.0-beta\r\n```\r\n\r\n\r\nSamples\r\n-------\r\nhttps://github.com/dfahlander/Dexie.js/wiki/Samples\r\n\r\nhttps://github.com/dfahlander/Dexie.js/tree/master/samples\r\n\r\nKnowledge Base\r\n-----\r\n[https://github.com/dfahlander/Dexie.js/wiki/Questions-and-Answers](https://github.com/dfahlander/Dexie.js/wiki/Questions-and-Answers)\r\n\r\nWebsite\r\n-------\r\n[http://dexie.org](http://dexie.org)\r\n\r\nInstall over npm\r\n----------------\r\n```\r\nnpm install dexie\r\n```\r\n\r\nDownload\r\n--------\r\nFor those who don't like package managers, here's the download links:\r\n\r\nhttps://unpkg.com/dexie/dist/dexie.min.js\r\n\r\nhttps://unpkg.com/dexie/dist/dexie.min.js.map\r\n\r\nhttps://unpkg.com/dexie/dist/dexie.d.ts\r\n\r\n\r\nContributing\r\n============\r\nHere is a little cheat-sheet for how to symlink your app's `node_modules/dexie` to a place where you can edit the source, version control your changes and create pull requests back to Dexie. Assuming you've already ran `npm install dexie --save` for the app your are developing.\r\n\r\n1. Fork Dexie.js from the web gui on github\r\n2. Clone your fork locally by launching a shell/command window and cd to a neutral place (like `~repos/`, `c:\\repos` or whatever)\r\n3. Run the following commands: *(if you're on npm 2.x and Windows, you need to elevate your command prompt for `npm install` to succeed)*\r\n\r\n    ```\r\n    git clone https://github.com/YOUR-USERNAME/Dexie.js.git dexie\r\n    cd dexie\r\n    npm install\r\n    npm run build\r\n    npm link\r\n    ```\r\n3. cd to your app directory and write:\r\n    ```\r\n    npm link dexie\r\n    ```\r\n\r\nYour app's `node_modules/dexie/` is now sym-linked to the Dexie.js clone on your hard drive so any change you do there will propagate to your app. Build dexie.js using `npm run build` or `npm run watch`. The latter will react on any source file change and rebuild the dist files.\r\n\r\nThat's it. Now you're up and running to test and commit changes to files under dexie/src/* or dexie/test/* and the changes will instantly affect the app you are developing.\r\n\r\nPull requests are more than welcome. Some advices are:\r\n\r\n* Run npm test before making a pull request.\r\n* If you find an issue, a unit test that reproduces it is lovely ;). If you don't know where to put it, put it in `test/tests-misc.js`. We use qunit. Just look at existing tests in `tests-misc.js` to see how they should be written. Tests are transpiled in the build script so you can use ES6 if you like.\r\n\r\nBuild\r\n-----\r\n```\r\nnpm install (need to be elevated on windows for some reason)\r\nnpm run build\r\n```\r\n\r\nTest\r\n----\r\n```\r\nnpm test\r\n```\r\n\r\nWatch\r\n-----\r\n```\r\nnpm run watch\r\n```\r\n\r\n\r\n[npm-image]: https://img.shields.io/npm/v/dexie.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/dexie\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dfahlander/Dexie.js.git"
  },
  "scripts": {
    "build": "babel-node --presets es2015 --plugins syntax-async-functions,transform-regenerator tools/build.js",
    "eslint": "eslint src",
    "test": "npm run eslint && npm run build && npm run test:local",
    "test:debug": "karma start test/karma.conf.js --log-level debug",
    "test:local": "karma start test/karma.conf.js --single-run",
    "test:release": "karma start test/karma.release.conf.js --single-run",
    "watch": "babel-node --presets es2015 --plugins syntax-async-functions,transform-regenerator tools/watch.js"
  },
  "typings": "dist/dexie.d.ts",
  "version": "1.5.1"
}
